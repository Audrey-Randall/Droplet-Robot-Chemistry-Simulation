
Chem_sim_droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007278  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000784  00802000  00007278  0000730c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000005c2  00802784  00802784  00007a90  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007a90  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000680  00000000  00000000  00007af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ecd9  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000029fe  00000000  00000000  00016e49  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000587f  00000000  00000000  00019847  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001f74  00000000  00000000  0001f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003400  00000000  00000000  0002103c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00009bad  00000000  00000000  0002443c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000910  00000000  00000000  0002dfe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c1       	rjmp	.+882    	; 0x374 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c1       	rjmp	.+942    	; 0x3b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c1       	rjmp	.+938    	; 0x3b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c1       	rjmp	.+934    	; 0x3b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c1       	rjmp	.+930    	; 0x3b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c1       	rjmp	.+926    	; 0x3b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c1       	rjmp	.+922    	; 0x3b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c1       	rjmp	.+918    	; 0x3b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c1       	rjmp	.+914    	; 0x3b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c1       	rjmp	.+910    	; 0x3b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 91 27 	jmp	0x4f22	; 0x4f22 <__vector_10>
      2c:	c4 c1       	rjmp	.+904    	; 0x3b6 <__vector_11>
      2e:	00 00       	nop
      30:	c1 c1       	rjmp	.+898    	; 0x3b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c1       	rjmp	.+894    	; 0x3b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c1       	rjmp	.+890    	; 0x3b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c1       	rjmp	.+886    	; 0x3b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c1       	rjmp	.+882    	; 0x3b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	b7 c1       	rjmp	.+878    	; 0x3b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	b5 c1       	rjmp	.+874    	; 0x3b4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b3 c1       	rjmp	.+870    	; 0x3b4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b1 c1       	rjmp	.+866    	; 0x3b4 <__bad_interrupt>
      52:	00 00       	nop
      54:	af c1       	rjmp	.+862    	; 0x3b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c1       	rjmp	.+858    	; 0x3b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c1       	rjmp	.+854    	; 0x3b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c1       	rjmp	.+850    	; 0x3b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 9c 0d 	jmp	0x1b38	; 0x1b38 <__vector_25>
      68:	0c 94 ec 0d 	jmp	0x1bd8	; 0x1bd8 <__vector_26>
      6c:	0c 94 c4 0d 	jmp	0x1b88	; 0x1b88 <__vector_27>
      70:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_28>
      74:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__vector_29>
      78:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__vector_30>
      7c:	9b c1       	rjmp	.+822    	; 0x3b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	99 c1       	rjmp	.+818    	; 0x3b4 <__bad_interrupt>
      82:	00 00       	nop
      84:	97 c1       	rjmp	.+814    	; 0x3b4 <__bad_interrupt>
      86:	00 00       	nop
      88:	95 c1       	rjmp	.+810    	; 0x3b4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	93 c1       	rjmp	.+806    	; 0x3b4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	91 c1       	rjmp	.+802    	; 0x3b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c1       	rjmp	.+798    	; 0x3b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c1       	rjmp	.+794    	; 0x3b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c1       	rjmp	.+790    	; 0x3b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c1       	rjmp	.+786    	; 0x3b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c1       	rjmp	.+782    	; 0x3b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	85 c1       	rjmp	.+778    	; 0x3b4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	83 c1       	rjmp	.+774    	; 0x3b4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	81 c1       	rjmp	.+770    	; 0x3b4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7f c1       	rjmp	.+766    	; 0x3b4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	93 c3       	rjmp	.+1830   	; 0x7e0 <__vector_46>
      ba:	00 00       	nop
      bc:	7b c1       	rjmp	.+758    	; 0x3b4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	79 c1       	rjmp	.+754    	; 0x3b4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	77 c1       	rjmp	.+750    	; 0x3b4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	75 c1       	rjmp	.+746    	; 0x3b4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	73 c1       	rjmp	.+742    	; 0x3b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	71 c1       	rjmp	.+738    	; 0x3b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6f c1       	rjmp	.+734    	; 0x3b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6d c1       	rjmp	.+730    	; 0x3b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	6b c1       	rjmp	.+726    	; 0x3b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	69 c1       	rjmp	.+722    	; 0x3b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	67 c1       	rjmp	.+718    	; 0x3b4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__vector_58>
      ec:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__vector_59>
      f0:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__vector_60>
      f4:	0c 94 7c 0f 	jmp	0x1ef8	; 0x1ef8 <__vector_61>
      f8:	0c 94 cc 0f 	jmp	0x1f98	; 0x1f98 <__vector_62>
      fc:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__vector_63>
     100:	59 c1       	rjmp	.+690    	; 0x3b4 <__bad_interrupt>
     102:	00 00       	nop
     104:	57 c1       	rjmp	.+686    	; 0x3b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c1       	rjmp	.+682    	; 0x3b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c1       	rjmp	.+678    	; 0x3b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c1       	rjmp	.+674    	; 0x3b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c1       	rjmp	.+670    	; 0x3b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	4d c1       	rjmp	.+666    	; 0x3b4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	4b c1       	rjmp	.+662    	; 0x3b4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	49 c1       	rjmp	.+658    	; 0x3b4 <__bad_interrupt>
     122:	00 00       	nop
     124:	47 c1       	rjmp	.+654    	; 0x3b4 <__bad_interrupt>
     126:	00 00       	nop
     128:	45 c1       	rjmp	.+650    	; 0x3b4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	43 c1       	rjmp	.+646    	; 0x3b4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	41 c1       	rjmp	.+642    	; 0x3b4 <__bad_interrupt>
     132:	00 00       	nop
     134:	3f c1       	rjmp	.+638    	; 0x3b4 <__bad_interrupt>
     136:	00 00       	nop
     138:	3d c1       	rjmp	.+634    	; 0x3b4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	3b c1       	rjmp	.+630    	; 0x3b4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	39 c1       	rjmp	.+626    	; 0x3b4 <__bad_interrupt>
     142:	00 00       	nop
     144:	37 c1       	rjmp	.+622    	; 0x3b4 <__bad_interrupt>
     146:	00 00       	nop
     148:	35 c1       	rjmp	.+618    	; 0x3b4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	33 c1       	rjmp	.+614    	; 0x3b4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	31 c1       	rjmp	.+610    	; 0x3b4 <__bad_interrupt>
     152:	00 00       	nop
     154:	2f c1       	rjmp	.+606    	; 0x3b4 <__bad_interrupt>
     156:	00 00       	nop
     158:	2d c1       	rjmp	.+602    	; 0x3b4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	2b c1       	rjmp	.+598    	; 0x3b4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 8c 0e 	jmp	0x1d18	; 0x1d18 <__vector_88>
     164:	0c 94 dc 0e 	jmp	0x1db8	; 0x1db8 <__vector_89>
     168:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__vector_90>
     16c:	0c 94 89 16 	jmp	0x2d12	; 0x2d12 <__vector_91>
     170:	21 c1       	rjmp	.+578    	; 0x3b4 <__bad_interrupt>
     172:	00 00       	nop
     174:	1f c1       	rjmp	.+574    	; 0x3b4 <__bad_interrupt>
     176:	00 00       	nop
     178:	1d c1       	rjmp	.+570    	; 0x3b4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	1b c1       	rjmp	.+566    	; 0x3b4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	19 c1       	rjmp	.+562    	; 0x3b4 <__bad_interrupt>
     182:	00 00       	nop
     184:	17 c1       	rjmp	.+558    	; 0x3b4 <__bad_interrupt>
     186:	00 00       	nop
     188:	15 c1       	rjmp	.+554    	; 0x3b4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	13 c1       	rjmp	.+550    	; 0x3b4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	11 c1       	rjmp	.+546    	; 0x3b4 <__bad_interrupt>
     192:	00 00       	nop
     194:	0f c1       	rjmp	.+542    	; 0x3b4 <__bad_interrupt>
     196:	00 00       	nop
     198:	0d c1       	rjmp	.+538    	; 0x3b4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	0b c1       	rjmp	.+534    	; 0x3b4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	09 c1       	rjmp	.+530    	; 0x3b4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	07 c1       	rjmp	.+526    	; 0x3b4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	05 c1       	rjmp	.+522    	; 0x3b4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	03 c1       	rjmp	.+518    	; 0x3b4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	01 c1       	rjmp	.+514    	; 0x3b4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	ff c0       	rjmp	.+510    	; 0x3b4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	fd c0       	rjmp	.+506    	; 0x3b4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	fb c0       	rjmp	.+502    	; 0x3b4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	f9 c0       	rjmp	.+498    	; 0x3b4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	f7 c0       	rjmp	.+494    	; 0x3b4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	f5 c0       	rjmp	.+490    	; 0x3b4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	f3 c0       	rjmp	.+486    	; 0x3b4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	f1 c0       	rjmp	.+482    	; 0x3b4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	ef c0       	rjmp	.+478    	; 0x3b4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ed c0       	rjmp	.+474    	; 0x3b4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 f4 0f 	jmp	0x1fe8	; 0x1fe8 <__vector_119>
     1e0:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_120>
     1e4:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__vector_121>
     1e8:	e5 c0       	rjmp	.+458    	; 0x3b4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	e3 c0       	rjmp	.+454    	; 0x3b4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	e1 c0       	rjmp	.+450    	; 0x3b4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	df c0       	rjmp	.+446    	; 0x3b4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	dd c0       	rjmp	.+442    	; 0x3b4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	0b 04       	cpc	r0, r11
     1fe:	11 04       	cpc	r1, r1
     200:	16 04       	cpc	r1, r6
     202:	1d 04       	cpc	r1, r13
     204:	22 04       	cpc	r2, r2
     206:	29 04       	cpc	r2, r9
     208:	2e 04       	cpc	r2, r14
     20a:	4c 08       	sbc	r4, r12
     20c:	59 08       	sbc	r5, r9
     20e:	6f 08       	sbc	r6, r15
     210:	b5 08       	sbc	r11, r5
     212:	c2 08       	sbc	r12, r2
     214:	d0 08       	sbc	r13, r0
     216:	dd 08       	sbc	r13, r13
     218:	06 0a       	sbc	r0, r22
     21a:	13 0a       	sbc	r1, r19
     21c:	d4 09       	sbc	r29, r4
     21e:	ec 09       	sbc	r30, r12
     220:	f9 09       	sbc	r31, r9
     222:	20 0a       	sbc	r2, r16
     224:	2d 0a       	sbc	r2, r29
     226:	08 4a       	sbci	r16, 0xA8	; 168
     228:	d7 3b       	cpi	r29, 0xB7	; 183
     22a:	3b ce       	rjmp	.-906    	; 0xfffffea2 <__eeprom_end+0xff7efea2>
     22c:	01 6e       	ori	r16, 0xE1	; 225
     22e:	84 bc       	out	0x24, r8	; 36
     230:	bf fd       	.word	0xfdbf	; ????
     232:	c1 2f       	mov	r28, r17
     234:	3d 6c       	ori	r19, 0xCD	; 205
     236:	74 31       	cpi	r23, 0x14	; 20
     238:	9a bd       	out	0x2a, r25	; 42
     23a:	56 83       	std	Z+6, r21	; 0x06
     23c:	3d da       	rcall	.-2950   	; 0xfffff6b8 <__eeprom_end+0xff7ef6b8>
     23e:	3d 00       	.word	0x003d	; ????
     240:	c7 7f       	andi	r28, 0xF7	; 247
     242:	11 be       	out	0x31, r1	; 49
     244:	d9 e4       	ldi	r29, 0x49	; 73
     246:	bb 4c       	sbci	r27, 0xCB	; 203
     248:	3e 91       	ld	r19, -X
     24a:	6b aa       	std	Y+51, r6	; 0x33
     24c:	aa be       	out	0x3a, r10	; 58
     24e:	00 00       	nop
     250:	00 80       	ld	r0, Z
     252:	3f 05       	cpc	r19, r15
     254:	a8 4c       	sbci	r26, 0xC8	; 200
     256:	cd b2       	in	r12, 0x1d	; 29
     258:	d4 4e       	sbci	r29, 0xE4	; 228
     25a:	b9 38       	cpi	r27, 0x89	; 137
     25c:	36 a9       	ldd	r19, Z+54	; 0x36
     25e:	02 0c       	add	r0, r2
     260:	50 b9       	out	0x00, r21	; 0
     262:	91 86       	std	Z+9, r9	; 0x09
     264:	88 08       	sbc	r8, r8
     266:	3c a6       	std	Y+44, r3	; 0x2c
     268:	aa aa       	std	Y+50, r10	; 0x32
     26a:	2a be       	out	0x3a, r2	; 58
     26c:	00 00       	nop
     26e:	00 80       	ld	r0, Z
     270:	3f 00       	.word	0x003f	; ????

00000272 <__trampolines_end>:
     272:	6e 61       	ori	r22, 0x1E	; 30
     274:	6e 00       	.word	0x006e	; ????

00000276 <__c.2159>:
     276:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     286:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     296:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2a6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2b6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2c6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2d6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2e6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2f6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     306:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     316:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     326:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     336:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     346:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     356:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     366:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000374 <__ctors_end>:
     374:	11 24       	eor	r1, r1
     376:	1f be       	out	0x3f, r1	; 63
     378:	cf ef       	ldi	r28, 0xFF	; 255
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	df e3       	ldi	r29, 0x3F	; 63
     37e:	de bf       	out	0x3e, r29	; 62
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	0c bf       	out	0x3c, r16	; 60

00000384 <__do_copy_data>:
     384:	17 e2       	ldi	r17, 0x27	; 39
     386:	a0 e0       	ldi	r26, 0x00	; 0
     388:	b0 e2       	ldi	r27, 0x20	; 32
     38a:	e8 e7       	ldi	r30, 0x78	; 120
     38c:	f2 e7       	ldi	r31, 0x72	; 114
     38e:	00 e0       	ldi	r16, 0x00	; 0
     390:	0b bf       	out	0x3b, r16	; 59
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x14>
     394:	07 90       	elpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	a4 38       	cpi	r26, 0x84	; 132
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0x10>

0000039e <__do_clear_bss>:
     39e:	2d e2       	ldi	r18, 0x2D	; 45
     3a0:	a4 e8       	ldi	r26, 0x84	; 132
     3a2:	b7 e2       	ldi	r27, 0x27	; 39
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	a6 34       	cpi	r26, 0x46	; 70
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	a6 d1       	rcall	.+844    	; 0x6fc <main>
     3b0:	0c 94 3a 39 	jmp	0x7274	; 0x7274 <_exit>

000003b4 <__bad_interrupt>:
     3b4:	25 ce       	rjmp	.-950    	; 0x0 <__vectors>

000003b6 <__vector_11>:
; * Returns from the interrupt handler
; Since run_tasks is on top of the stack, the IRS returns into the beginning of run_tasks
.global RTC_COMP_vect
RTC_COMP_vect:
rtc_compare_isr:
	push	r0							; Save all the registers on the stack
     3b6:	0f 92       	push	r0
	push	r1
     3b8:	1f 92       	push	r1
	push	r2
     3ba:	2f 92       	push	r2
	push	r3
     3bc:	3f 92       	push	r3
	push	r4
     3be:	4f 92       	push	r4
	push	r5
     3c0:	5f 92       	push	r5
	push	r6
     3c2:	6f 92       	push	r6
	push	r7
     3c4:	7f 92       	push	r7
	push	r8
     3c6:	8f 92       	push	r8
	push	r9
     3c8:	9f 92       	push	r9
	push	r10
     3ca:	af 92       	push	r10
	push	r11
     3cc:	bf 92       	push	r11
	push	r12
     3ce:	cf 92       	push	r12
	push	r13
     3d0:	df 92       	push	r13
	push	r14
     3d2:	ef 92       	push	r14
	push	r15
     3d4:	ff 92       	push	r15
	push	r16
     3d6:	0f 93       	push	r16
	push	r17
     3d8:	1f 93       	push	r17
	push	r18
     3da:	2f 93       	push	r18
	push	r19
     3dc:	3f 93       	push	r19
	push	r20
     3de:	4f 93       	push	r20
	push	r21
     3e0:	5f 93       	push	r21
	push	r22
     3e2:	6f 93       	push	r22
	push	r23
     3e4:	7f 93       	push	r23
	push	r24
     3e6:	8f 93       	push	r24
	push	r25
     3e8:	9f 93       	push	r25
	push	r26
     3ea:	af 93       	push	r26
	push	r27
     3ec:	bf 93       	push	r27
	push	r28
     3ee:	cf 93       	push	r28
	push	r29
     3f0:	df 93       	push	r29
	push	r30
     3f2:	ef 93       	push	r30
	push	r31
     3f4:	ff 93       	push	r31
	in		r16, _SFR_IO_ADDR(SREG)		; Save the CPU status register
     3f6:	0f b7       	in	r16, 0x3f	; 63
	push	r16
     3f8:	0f 93       	push	r16
	ldi		ZL,	pm_lo8(run_tasks)		; Push the address of run_tasks on the stack
     3fa:	e9 ed       	ldi	r30, 0xD9	; 217
	ldi		ZH, pm_hi8(run_tasks)		; Returning from the ISR will return to this address
     3fc:	f6 e2       	ldi	r31, 0x26	; 38
	ldi		r16, pm_hh8(run_tasks)
     3fe:	00 e0       	ldi	r16, 0x00	; 0
	push	ZL
     400:	ef 93       	push	r30
	push	ZH
     402:	ff 93       	push	r31
	push	r16
     404:	0f 93       	push	r16
	lds		r24, num_executing_tasks	; Increment num_executing_tasks
     406:	80 91 84 29 	lds	r24, 0x2984
	inc		r24
     40a:	83 95       	inc	r24
	sts		num_executing_tasks, r24
     40c:	80 93 84 29 	sts	0x2984, r24
	reti								; reti returns from the ISR to the beginning of run_tasks
     410:	18 95       	reti

00000412 <restore_registers>:
; the RTC_COMP interrupt had not occurred.  
; Returning from this subroutine returns program control to where it would have been if the RTC_COMP interrupt
; had not occurred
.global restore_registers
restore_registers:
	lds		r24, num_executing_tasks	; Decrement num_executing_tasks
     412:	80 91 84 29 	lds	r24, 0x2984
	dec		r24
     416:	8a 95       	dec	r24
	sts		num_executing_tasks, r24
     418:	80 93 84 29 	sts	0x2984, r24
	pop		r16							; Restore CPU status register
     41c:	0f 91       	pop	r16
	out		_SFR_IO_ADDR(SREG), r16
     41e:	0f bf       	out	0x3f, r16	; 63
	pop		r31								; Restore all registers
     420:	ff 91       	pop	r31
	pop		r30
     422:	ef 91       	pop	r30
	pop		r29
     424:	df 91       	pop	r29
	pop		r28
     426:	cf 91       	pop	r28
	pop		r27
     428:	bf 91       	pop	r27
	pop		r26
     42a:	af 91       	pop	r26
	pop		r25
     42c:	9f 91       	pop	r25
	pop		r24
     42e:	8f 91       	pop	r24
	pop		r23
     430:	7f 91       	pop	r23
	pop		r22
     432:	6f 91       	pop	r22
	pop		r21
     434:	5f 91       	pop	r21
	pop		r20
     436:	4f 91       	pop	r20
	pop		r19
     438:	3f 91       	pop	r19
	pop		r18
     43a:	2f 91       	pop	r18
	pop		r17
     43c:	1f 91       	pop	r17
	pop		r16
     43e:	0f 91       	pop	r16
	pop		r15
     440:	ff 90       	pop	r15
	pop		r14
     442:	ef 90       	pop	r14
	pop		r13
     444:	df 90       	pop	r13
	pop		r12
     446:	cf 90       	pop	r12
	pop		r11
     448:	bf 90       	pop	r11
	pop		r10
     44a:	af 90       	pop	r10
	pop		r9
     44c:	9f 90       	pop	r9
	pop		r8
     44e:	8f 90       	pop	r8
	pop		r7
     450:	7f 90       	pop	r7
	pop		r6
     452:	6f 90       	pop	r6
	pop		r5
     454:	5f 90       	pop	r5
	pop		r4
     456:	4f 90       	pop	r4
	pop		r3
     458:	3f 90       	pop	r3
	pop		r2
     45a:	2f 90       	pop	r2
	pop		r1
     45c:	1f 90       	pop	r1
	pop		r0
     45e:	0f 90       	pop	r0
	ret									; The top value of the stack was the code address that
     460:	08 95       	ret

00000462 <get_time>:


; Gets the time as an atomic operation
.global get_time
get_time:
	in		r0, _SFR_IO_ADDR(SREG)		; Save the state of the status register
     462:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
     464:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
     466:	60 91 08 04 	lds	r22, 0x0408
	lds		r23, RTC_CNT+1
     46a:	70 91 09 04 	lds	r23, 0x0409
	lds		r24, rtc_epoch				; epoch 16-bit high word
     46e:	80 91 8d 27 	lds	r24, 0x278D
	lds		r25, rtc_epoch+1
     472:	90 91 8e 27 	lds	r25, 0x278E
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
     476:	0f be       	out	0x3f, r0	; 63
	ret
     478:	08 95       	ret

0000047a <check_messages>:
	}
	return 0;
}

void check_messages ()
{
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	ca 54       	subi	r28, 0x4A	; 74
     490:	d1 09       	sbc	r29, r1
     492:	cd bf       	out	0x3d, r28	; 61
     494:	de bf       	out	0x3e, r29	; 62
	ir_msg* msg_struct;	
	char actual_struct[sizeof(ir_msg)]; //It's like malloc, but on the stack.
	char actual_msg[IR_BUFFER_SIZE+1];
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
     496:	ce 01       	movw	r24, r28
     498:	0b 96       	adiw	r24, 0x0b	; 11
     49a:	8f 83       	std	Y+7, r24	; 0x07
     49c:	98 87       	std	Y+8, r25	; 0x08
	uint8_t i;
	
	if(user_facing_messages_ovf)
     49e:	80 91 8c 27 	lds	r24, 0x278C
     4a2:	88 23       	and	r24, r24
     4a4:	39 f0       	breq	.+14     	; 0x4b4 <check_messages+0x3a>
	{
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
     4a6:	86 e0       	ldi	r24, 0x06	; 6
     4a8:	80 93 7f 29 	sts	0x297F, r24
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
     4ac:	86 e3       	ldi	r24, 0x36	; 54
     4ae:	91 e2       	ldi	r25, 0x21	; 33
     4b0:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
	}
	
	while(num_waiting_msgs>0)
     4b4:	80 91 7f 29 	lds	r24, 0x297F
     4b8:	88 23       	and	r24, r24
     4ba:	09 f4       	brne	.+2      	; 0x4be <check_messages+0x44>
     4bc:	45 c0       	rjmp	.+138    	; 0x548 <check_messages+0xce>
		i=num_waiting_msgs-1;
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			memcpy(msg_struct->msg, msg_node[i].msg, msg_node[i].msg_length);
     4be:	0f 2e       	mov	r0, r31
     4c0:	f7 e4       	ldi	r31, 0x47	; 71
     4c2:	cf 2e       	mov	r12, r31
     4c4:	f0 2d       	mov	r31, r0
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
     4c6:	60 91 7f 29 	lds	r22, 0x297F
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     4ca:	df b6       	in	r13, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4cc:	f8 94       	cli
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
     4ce:	61 50       	subi	r22, 0x01	; 1
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			memcpy(msg_struct->msg, msg_node[i].msg, msg_node[i].msg_length);
     4d0:	c6 9e       	mul	r12, r22
     4d2:	b0 01       	movw	r22, r0
     4d4:	11 24       	eor	r1, r1
     4d6:	8b 01       	movw	r16, r22
     4d8:	0d 52       	subi	r16, 0x2D	; 45
     4da:	18 4d       	sbci	r17, 0xD8	; 216
     4dc:	78 01       	movw	r14, r16
     4de:	86 e4       	ldi	r24, 0x46	; 70
     4e0:	e8 0e       	add	r14, r24
     4e2:	f1 1c       	adc	r15, r1
     4e4:	f7 01       	movw	r30, r14
     4e6:	40 81       	ld	r20, Z
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	67 52       	subi	r22, 0x27	; 39
     4ec:	78 4d       	sbci	r23, 0xD8	; 216
     4ee:	8f 81       	ldd	r24, Y+7	; 0x07
     4f0:	98 85       	ldd	r25, Y+8	; 0x08
     4f2:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <memcpy>
			
			msg_struct->msg[msg_node[i].msg_length]	= '\0';
     4f6:	f7 01       	movw	r30, r14
     4f8:	80 81       	ld	r24, Z
     4fa:	ef 81       	ldd	r30, Y+7	; 0x07
     4fc:	f8 85       	ldd	r31, Y+8	; 0x08
     4fe:	e8 0f       	add	r30, r24
     500:	f1 1d       	adc	r31, r1
     502:	10 82       	st	Z, r1
			msg_struct->arrival_time					= msg_node[i].arrival_time;
     504:	f8 01       	movw	r30, r16
     506:	80 81       	ld	r24, Z
     508:	91 81       	ldd	r25, Z+1	; 0x01
     50a:	a2 81       	ldd	r26, Z+2	; 0x02
     50c:	b3 81       	ldd	r27, Z+3	; 0x03
     50e:	89 83       	std	Y+1, r24	; 0x01
     510:	9a 83       	std	Y+2, r25	; 0x02
     512:	ab 83       	std	Y+3, r26	; 0x03
     514:	bc 83       	std	Y+4, r27	; 0x04
			msg_struct->sender_ID						= msg_node[i].sender_ID;
     516:	84 81       	ldd	r24, Z+4	; 0x04
     518:	95 81       	ldd	r25, Z+5	; 0x05
     51a:	8d 83       	std	Y+5, r24	; 0x05
     51c:	9e 83       	std	Y+6, r25	; 0x06
			msg_struct->dir_received					= msg_node[i].arrival_dir;
     51e:	eb 5b       	subi	r30, 0xBB	; 187
     520:	ff 4f       	sbci	r31, 0xFF	; 255
     522:	80 81       	ld	r24, Z
     524:	89 87       	std	Y+9, r24	; 0x09
			msg_struct->length							= msg_node[i].msg_length;
     526:	f7 01       	movw	r30, r14
     528:	80 81       	ld	r24, Z
     52a:	8a 87       	std	Y+10, r24	; 0x0a
			num_waiting_msgs--;
     52c:	80 91 7f 29 	lds	r24, 0x297F
     530:	81 50       	subi	r24, 0x01	; 1
     532:	80 93 7f 29 	sts	0x297F, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     536:	df be       	out	0x3f, r13	; 63
		}

		handle_msg(msg_struct);
     538:	ce 01       	movw	r24, r28
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <handle_msg>
	{
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	
	while(num_waiting_msgs>0)
     540:	80 91 7f 29 	lds	r24, 0x297F
     544:	81 11       	cpse	r24, r1
     546:	bf cf       	rjmp	.-130    	; 0x4c6 <check_messages+0x4c>
			num_waiting_msgs--;
		}

		handle_msg(msg_struct);
	}
}
     548:	c6 5b       	subi	r28, 0xB6	; 182
     54a:	df 4f       	sbci	r29, 0xFF	; 255
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	de bf       	out	0x3e, r29	; 62
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	ff 90       	pop	r15
     55a:	ef 90       	pop	r14
     55c:	df 90       	pop	r13
     55e:	cf 90       	pop	r12
     560:	08 95       	ret

00000562 <calculate_id_number>:

void calculate_id_number()
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	c0 54       	subi	r28, 0x40	; 64
     56c:	d1 09       	sbc	r29, r1
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	de bf       	out	0x3e, r29	; 62
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     572:	82 e0       	ldi	r24, 0x02	; 2
     574:	80 93 ca 01 	sts	0x01CA, r24

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
     578:	80 e4       	ldi	r24, 0x40	; 64
     57a:	e6 ef       	ldi	r30, 0xF6	; 246
     57c:	f0 e2       	ldi	r31, 0x20	; 32
     57e:	de 01       	movw	r26, r28
     580:	11 96       	adiw	r26, 0x01	; 1
     582:	01 90       	ld	r0, Z+
     584:	0d 92       	st	X+, r0
     586:	8a 95       	dec	r24
     588:	e1 f7       	brne	.-8      	; 0x582 <calculate_id_number+0x20>
     58a:	ae 01       	movw	r20, r28
     58c:	4f 5f       	subi	r20, 0xFF	; 255
     58e:	5f 4f       	sbci	r21, 0xFF	; 255
     590:	be 01       	movw	r22, r28
     592:	6f 5b       	subi	r22, 0xBF	; 191
     594:	7f 4f       	sbci	r23, 0xFF	; 255
void calculate_id_number()
{
	if(INIT_DEBUG_MODE >= 1)	printf("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
     596:	20 e0       	ldi	r18, 0x00	; 0
     598:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
     59a:	fa 01       	movw	r30, r20
     59c:	81 91       	ld	r24, Z+
     59e:	91 91       	ld	r25, Z+
     5a0:	a1 91       	ld	r26, Z+
     5a2:	b1 91       	ld	r27, Z+
     5a4:	af 01       	movw	r20, r30
     5a6:	ab bf       	out	0x3b, r26	; 59
     5a8:	fc 01       	movw	r30, r24
     5aa:	87 91       	elpm	r24, Z+
     5ac:	96 91       	elpm	r25, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     5ae:	28 27       	eor	r18, r24
     5b0:	82 2f       	mov	r24, r18
     5b2:	82 95       	swap	r24
     5b4:	82 27       	eor	r24, r18
     5b6:	08 2e       	mov	r0, r24
     5b8:	86 95       	lsr	r24
     5ba:	86 95       	lsr	r24
     5bc:	80 25       	eor	r24, r0
     5be:	08 2e       	mov	r0, r24
     5c0:	86 95       	lsr	r24
     5c2:	80 25       	eor	r24, r0
     5c4:	87 70       	andi	r24, 0x07	; 7
     5c6:	02 2e       	mov	r0, r18
     5c8:	23 2f       	mov	r18, r19
     5ca:	86 95       	lsr	r24
     5cc:	07 94       	ror	r0
     5ce:	87 95       	ror	r24
     5d0:	30 2d       	mov	r19, r0
     5d2:	28 27       	eor	r18, r24
     5d4:	06 94       	lsr	r0
     5d6:	87 95       	ror	r24
     5d8:	30 25       	eor	r19, r0
     5da:	28 27       	eor	r18, r24
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
     5dc:	46 17       	cp	r20, r22
     5de:	57 07       	cpc	r21, r23
     5e0:	09 f0       	breq	.+2      	; 0x5e4 <calculate_id_number+0x82>
     5e2:	db cf       	rjmp	.-74     	; 0x59a <calculate_id_number+0x38>
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     5e4:	10 92 ca 01 	sts	0x01CA, r1

	droplet_ID = crc;
     5e8:	20 93 86 27 	sts	0x2786, r18
     5ec:	30 93 87 27 	sts	0x2787, r19
}
     5f0:	c0 5c       	subi	r28, 0xC0	; 192
     5f2:	df 4f       	sbci	r29, 0xFF	; 255
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <enable_interrupts>:

void enable_interrupts()
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
     5fe:	e0 ea       	ldi	r30, 0xA0	; 160
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	82 81       	ldd	r24, Z+2	; 0x02
     604:	81 60       	ori	r24, 0x01	; 1
     606:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
     608:	82 81       	ldd	r24, Z+2	; 0x02
     60a:	82 60       	ori	r24, 0x02	; 2
     60c:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
     60e:	82 81       	ldd	r24, Z+2	; 0x02
     610:	84 60       	ori	r24, 0x04	; 4
     612:	82 83       	std	Z+2, r24	; 0x02
	sei();
     614:	78 94       	sei
     616:	08 95       	ret

00000618 <startup_light_sequence>:
}

void startup_light_sequence()
{
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	84 e6       	ldi	r24, 0x64	; 100
     61e:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     622:	84 e6       	ldi	r24, 0x64	; 100
     624:	90 e0       	ldi	r25, 0x00	; 0
     626:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     62a:	40 e0       	ldi	r20, 0x00	; 0
     62c:	64 e6       	ldi	r22, 0x64	; 100
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     634:	84 e6       	ldi	r24, 0x64	; 100
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     63c:	44 e6       	ldi	r20, 0x64	; 100
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     646:	84 e6       	ldi	r24, 0x64	; 100
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     64e:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	84 e6       	ldi	r24, 0x64	; 100
     658:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     65c:	84 e6       	ldi	r24, 0x64	; 100
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	64 e6       	ldi	r22, 0x64	; 100
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     66e:	84 e6       	ldi	r24, 0x64	; 100
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     676:	44 e6       	ldi	r20, 0x64	; 100
     678:	60 e0       	ldi	r22, 0x00	; 0
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     680:	84 e6       	ldi	r24, 0x64	; 100
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     688:	0e 94 7b 21 	call	0x42f6	; 0x42f6 <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     68c:	40 e0       	ldi	r20, 0x00	; 0
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	84 e6       	ldi	r24, 0x64	; 100
     692:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     696:	84 e6       	ldi	r24, 0x64	; 100
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     69e:	40 e0       	ldi	r20, 0x00	; 0
     6a0:	64 e6       	ldi	r22, 0x64	; 100
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     6a8:	84 e6       	ldi	r24, 0x64	; 100
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     6b0:	44 e6       	ldi	r20, 0x64	; 100
     6b2:	60 e0       	ldi	r22, 0x00	; 0
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
     6ba:	84 e6       	ldi	r24, 0x64	; 100
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
     6c2:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <led_off>
     6c6:	08 95       	ret

000006c8 <init_all_systems>:

uint16_t droplet_ID = 0;

void init_all_systems()
{
	Config32MHzClock();
     6c8:	0e 94 65 24 	call	0x48ca	; 0x48ca <Config32MHzClock>
	
	calculate_id_number();
     6cc:	4a df       	rcall	.-364    	; 0x562 <calculate_id_number>
	
	scheduler_init();			if(INIT_DEBUG_MODE) printf("SCHEDULER INIT\r\n"); //This will probably never print, since you need pc_com for printf to happen, but pc_com needs the scheduler.
     6ce:	0e 94 33 24 	call	0x4866	; 0x4866 <scheduler_init>
	pc_comm_init();				if(INIT_DEBUG_MODE) printf("PC COM INIT\r\n");
     6d2:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <pc_comm_init>
	rgb_led_init();				if(INIT_DEBUG_MODE) printf("LED INIT\r\n");
     6d6:	0e 94 44 21 	call	0x4288	; 0x4288 <rgb_led_init>
	rgb_sensor_init();			if(INIT_DEBUG_MODE) printf("RGB SENSE INIT\r\n");
     6da:	0e 94 45 23 	call	0x468a	; 0x468a <rgb_sensor_init>
	power_init();				if(INIT_DEBUG_MODE) printf("POWER INIT\r\n");
     6de:	0e 94 d5 16 	call	0x2daa	; 0x2daa <power_init>
	random_init();				if(INIT_DEBUG_MODE) printf("RAND INIT\r\n");
     6e2:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <random_init>
	i2c_init();					if(INIT_DEBUG_MODE) printf("I2C INIT\r\n");	
     6e6:	68 d0       	rcall	.+208    	; 0x7b8 <i2c_init>
	ir_comm_init();				if(INIT_DEBUG_MODE) printf("IR COM INIT\r\n");
     6e8:	e3 d2       	rcall	.+1478   	; 0xcb0 <ir_comm_init>
	ir_sensor_init();			if(INIT_DEBUG_MODE) printf("IR SENSE INIT\r\n");
     6ea:	0e 94 0e 11 	call	0x221c	; 0x221c <ir_sensor_init>
	motor_init();				if(INIT_DEBUG_MODE) printf("MOTOR INIT\r\n");
     6ee:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <motor_init>
	range_algs_init();	if(INIT_DEBUG_MODE) printf("RANGE ALGORITHMS INIT\r\n");
     6f2:	0e 94 3b 17 	call	0x2e76	; 0x2e76 <range_algs_init>

	enable_interrupts();
     6f6:	83 df       	rcall	.-250    	; 0x5fe <enable_interrupts>
	startup_light_sequence();
     6f8:	8f cf       	rjmp	.-226    	; 0x618 <startup_light_sequence>
     6fa:	08 95       	ret

000006fc <main>:

}

int main()
{
	init_all_systems();
     6fc:	e5 df       	rcall	.-54     	; 0x6c8 <init_all_systems>
	init();
     6fe:	0e 94 12 2e 	call	0x5c24	; 0x5c24 <init>
	while(1)
	{
		loop();
     702:	0e 94 39 2e 	call	0x5c72	; 0x5c72 <loop>
		check_messages();
     706:	b9 de       	rcall	.-654    	; 0x47a <check_messages>
     708:	fc cf       	rjmp	.-8      	; 0x702 <main+0x6>

0000070a <droplet_reboot>:
}


void droplet_reboot()
{
	CPU_CCP=CCP_IOREG_gc;
     70a:	88 ed       	ldi	r24, 0xD8	; 216
     70c:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	e8 e7       	ldi	r30, 0x78	; 120
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	81 83       	std	Z+1, r24	; 0x01
     716:	08 95       	ret

00000718 <wait_for_nvm>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
     718:	e0 ec       	ldi	r30, 0xC0	; 192
     71a:	f1 e0       	ldi	r31, 0x01	; 1
     71c:	87 85       	ldd	r24, Z+15	; 0x0f
     71e:	88 23       	and	r24, r24
     720:	ec f3       	brlt	.-6      	; 0x71c <wait_for_nvm+0x4>
}
     722:	08 95       	ret

00000724 <flush_buffer>:

void flush_buffer(void)
{
        wait_for_nvm();
     724:	f9 df       	rcall	.-14     	; 0x718 <wait_for_nvm>
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     726:	e0 ec       	ldi	r30, 0xC0	; 192
     728:	f1 e0       	ldi	r31, 0x01	; 1
     72a:	87 85       	ldd	r24, Z+15	; 0x0f
     72c:	81 ff       	sbrs	r24, 1
     72e:	0a c0       	rjmp	.+20     	; 0x744 <flush_buffer+0x20>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     730:	86 e3       	ldi	r24, 0x36	; 54
     732:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     734:	eb ec       	ldi	r30, 0xCB	; 203
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	21 e0       	ldi	r18, 0x01	; 1
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	88 ed       	ldi	r24, 0xD8	; 216
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	84 bf       	out	0x34, r24	; 52
     742:	20 83       	st	Z, r18
     744:	08 95       	ret

00000746 <EEPROM_read_byte>:
        }
}


uint8_t EEPROM_read_byte(uint16_t addr)
{
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	d8 2f       	mov	r29, r24
     74c:	c9 2f       	mov	r28, r25
        wait_for_nvm();
     74e:	e4 df       	rcall	.-56     	; 0x718 <wait_for_nvm>
        
        NVM.ADDR0 = addr & 0xFF;
     750:	e0 ec       	ldi	r30, 0xC0	; 192
     752:	f1 e0       	ldi	r31, 0x01	; 1
     754:	d0 83       	st	Z, r29
        NVM.ADDR1 = (addr >> 8) & 0x1F;
     756:	cf 71       	andi	r28, 0x1F	; 31
     758:	c1 83       	std	Z+1, r28	; 0x01
        NVM.ADDR2 = 0;
     75a:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
     75c:	86 e0       	ldi	r24, 0x06	; 6
     75e:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     760:	eb ec       	ldi	r30, 0xCB	; 203
     762:	f1 e0       	ldi	r31, 0x01	; 1
     764:	21 e0       	ldi	r18, 0x01	; 1
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	88 ed       	ldi	r24, 0xD8	; 216
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	84 bf       	out	0x34, r24	; 52
     76e:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
     770:	e0 ec       	ldi	r30, 0xC0	; 192
     772:	f1 e0       	ldi	r31, 0x01	; 1
     774:	84 81       	ldd	r24, Z+4	; 0x04
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <EEPROM_write_byte>:


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
     77c:	1f 93       	push	r17
     77e:	cf 93       	push	r28
     780:	df 93       	push	r29
     782:	18 2f       	mov	r17, r24
     784:	d9 2f       	mov	r29, r25
     786:	c6 2f       	mov	r28, r22
        flush_buffer();
     788:	cd df       	rcall	.-102    	; 0x724 <flush_buffer>
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
     78a:	e0 ec       	ldi	r30, 0xC0	; 192
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	83 e3       	ldi	r24, 0x33	; 51
     790:	82 87       	std	Z+10, r24	; 0x0a
        
        NVM.ADDR0 = addr & 0xFF;
     792:	10 83       	st	Z, r17
        NVM.ADDR1 = (addr >> 8) & 0x1F;
     794:	df 71       	andi	r29, 0x1F	; 31
     796:	d1 83       	std	Z+1, r29	; 0x01
        NVM.ADDR2 = 0;
     798:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.DATA0 = byte;
     79a:	c4 83       	std	Z+4, r28	; 0x04
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     79c:	85 e3       	ldi	r24, 0x35	; 53
     79e:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     7a0:	eb ec       	ldi	r30, 0xCB	; 203
     7a2:	f1 e0       	ldi	r31, 0x01	; 1
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	88 ed       	ldi	r24, 0xD8	; 216
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	84 bf       	out	0x34, r24	; 52
     7ae:	20 83       	st	Z, r18
        
        NVM.DATA0 = byte;
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	1f 91       	pop	r17
     7b6:	08 95       	ret

000007b8 <i2c_init>:
#include "i2c.h"

void i2c_init()
{
	count=0;
     7b8:	10 92 a0 29 	sts	0x29A0, r1
	thePower=0;
     7bc:	10 92 8a 27 	sts	0x278A, r1
     7c0:	10 92 8b 27 	sts	0x278B, r1
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     7c4:	83 e0       	ldi	r24, 0x03	; 3
     7c6:	e0 e8       	ldi	r30, 0x80	; 128
     7c8:	f6 e0       	ldi	r31, 0x06	; 6
     7ca:	81 83       	std	Z+1, r24	; 0x01
	TWIE_MASTER_CTRLA = TWI_MASTER_INTLVL_MED_gc | TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;
     7cc:	88 eb       	ldi	r24, 0xB8	; 184
     7ce:	80 93 a1 04 	sts	0x04A1, r24
	TWIE_MASTER_BAUD = TWI_BAUD(F_CPU, 400000);
     7d2:	83 e2       	ldi	r24, 0x23	; 35
     7d4:	80 93 a5 04 	sts	0x04A5, r24
	TWIE_MASTER_STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	80 93 a4 04 	sts	0x04A4, r24
     7de:	08 95       	ret

000007e0 <__vector_46>:
}

ISR(TWIE_TWIM_vect)
{
     7e0:	1f 92       	push	r1
     7e2:	0f 92       	push	r0
     7e4:	0f b6       	in	r0, 0x3f	; 63
     7e6:	0f 92       	push	r0
     7e8:	11 24       	eor	r1, r1
     7ea:	0b b6       	in	r0, 0x3b	; 59
     7ec:	0f 92       	push	r0
     7ee:	5f 93       	push	r21
     7f0:	6f 93       	push	r22
     7f2:	7f 93       	push	r23
     7f4:	8f 93       	push	r24
     7f6:	9f 93       	push	r25
     7f8:	af 93       	push	r26
     7fa:	bf 93       	push	r27
     7fc:	ef 93       	push	r30
     7fe:	ff 93       	push	r31
	switch(count)
     800:	80 91 a0 29 	lds	r24, 0x29A0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	87 30       	cpi	r24, 0x07	; 7
     808:	91 05       	cpc	r25, r1
     80a:	58 f5       	brcc	.+86     	; 0x862 <__vector_46+0x82>
     80c:	fc 01       	movw	r30, r24
     80e:	e2 50       	subi	r30, 0x02	; 2
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	0c 94 87 35 	jmp	0x6b0e	; 0x6b0e <__tablejump2__>
	{
		case 0:	TWIE_MASTER_DATA = (0x00 | ((uint8_t)((thePower>>8)&1))); break;
     816:	80 91 8b 27 	lds	r24, 0x278B
     81a:	81 70       	andi	r24, 0x01	; 1
     81c:	80 93 a7 04 	sts	0x04A7, r24
     820:	20 c0       	rjmp	.+64     	; 0x862 <__vector_46+0x82>
		case 1: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;
     822:	80 91 8a 27 	lds	r24, 0x278A
     826:	80 93 a7 04 	sts	0x04A7, r24
     82a:	1b c0       	rjmp	.+54     	; 0x862 <__vector_46+0x82>
		case 2:	TWIE_MASTER_DATA = (0x10 | ((uint8_t)((thePower>>8)&1))); break;
     82c:	80 91 8b 27 	lds	r24, 0x278B
     830:	81 70       	andi	r24, 0x01	; 1
     832:	80 61       	ori	r24, 0x10	; 16
     834:	80 93 a7 04 	sts	0x04A7, r24
     838:	14 c0       	rjmp	.+40     	; 0x862 <__vector_46+0x82>
		case 3: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;	
     83a:	80 91 8a 27 	lds	r24, 0x278A
     83e:	80 93 a7 04 	sts	0x04A7, r24
     842:	0f c0       	rjmp	.+30     	; 0x862 <__vector_46+0x82>
		case 4:	TWIE_MASTER_DATA = (0x60 | ((uint8_t)((thePower>>8)&1))); break;
     844:	80 91 8b 27 	lds	r24, 0x278B
     848:	81 70       	andi	r24, 0x01	; 1
     84a:	80 66       	ori	r24, 0x60	; 96
     84c:	80 93 a7 04 	sts	0x04A7, r24
     850:	08 c0       	rjmp	.+16     	; 0x862 <__vector_46+0x82>
		case 5: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;		
     852:	80 91 8a 27 	lds	r24, 0x278A
     856:	80 93 a7 04 	sts	0x04A7, r24
     85a:	03 c0       	rjmp	.+6      	; 0x862 <__vector_46+0x82>
		case 6: TWIE_MASTER_CTRLC = TWI_MASTER_CMD_STOP_gc;
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	80 93 a3 04 	sts	0x04A3, r24
	}
	count = (count+1)%7;
     862:	80 91 a0 29 	lds	r24, 0x29A0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	67 e0       	ldi	r22, 0x07	; 7
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
     872:	80 93 a0 29 	sts	0x29A0, r24
}
     876:	ff 91       	pop	r31
     878:	ef 91       	pop	r30
     87a:	bf 91       	pop	r27
     87c:	af 91       	pop	r26
     87e:	9f 91       	pop	r25
     880:	8f 91       	pop	r24
     882:	7f 91       	pop	r23
     884:	6f 91       	pop	r22
     886:	5f 91       	pop	r21
     888:	0f 90       	pop	r0
     88a:	0b be       	out	0x3b, r0	; 59
     88c:	0f 90       	pop	r0
     88e:	0f be       	out	0x3f, r0	; 63
     890:	0f 90       	pop	r0
     892:	1f 90       	pop	r1
     894:	18 95       	reti

00000896 <set_all_ir_powers>:

void set_all_ir_powers(uint16_t power)
{
	thePower=power;
     896:	80 93 8a 27 	sts	0x278A, r24
     89a:	90 93 8b 27 	sts	0x278B, r25
	TWIE_MASTER_ADDR = 0x58;
     89e:	88 e5       	ldi	r24, 0x58	; 88
     8a0:	80 93 a6 04 	sts	0x04A6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a4:	8f e7       	ldi	r24, 0x7F	; 127
     8a6:	95 e2       	ldi	r25, 0x25	; 37
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <set_all_ir_powers+0x12>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <set_all_ir_powers+0x18>
     8ae:	00 00       	nop
	delay_us(1200);
	TWIE_MASTER_ADDR = 0x5c;
     8b0:	8c e5       	ldi	r24, 0x5C	; 92
     8b2:	80 93 a6 04 	sts	0x04A6, r24
     8b6:	8f e7       	ldi	r24, 0x7F	; 127
     8b8:	95 e2       	ldi	r25, 0x25	; 37
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <set_all_ir_powers+0x24>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <set_all_ir_powers+0x2a>
     8c0:	00 00       	nop
     8c2:	08 95       	ret

000008c4 <perform_ir_upkeep>:
	channel[dir]->CTRLB |= USART_RXEN_bm;	// this enables receive on the USART
}

void ir_reset_rx(uint8_t dir)
{
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
     8c4:	2f 92       	push	r2
     8c6:	3f 92       	push	r3
     8c8:	4f 92       	push	r4
     8ca:	5f 92       	push	r5
     8cc:	6f 92       	push	r6
     8ce:	7f 92       	push	r7
     8d0:	8f 92       	push	r8
     8d2:	9f 92       	push	r9
     8d4:	af 92       	push	r10
     8d6:	bf 92       	push	r11
     8d8:	cf 92       	push	r12
     8da:	df 92       	push	r13
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	cd b7       	in	r28, 0x3d	; 61
     8ea:	de b7       	in	r29, 0x3e	; 62
     8ec:	2e 97       	sbiw	r28, 0x0e	; 14
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	fe 01       	movw	r30, r28
     8f4:	31 96       	adiw	r30, 0x01	; 1
     8f6:	8c e0       	ldi	r24, 0x0C	; 12
     8f8:	df 01       	movw	r26, r30
     8fa:	1d 92       	st	X+, r1
     8fc:	8a 95       	dec	r24
     8fe:	e9 f7       	brne	.-6      	; 0x8fa <perform_ir_upkeep+0x36>
     900:	26 e0       	ldi	r18, 0x06	; 6
     902:	30 e2       	ldi	r19, 0x20	; 32
     904:	2d 87       	std	Y+13, r18	; 0x0d
     906:	3e 87       	std	Y+14, r19	; 0x0e
     908:	0f 2e       	mov	r0, r31
     90a:	f7 ef       	ldi	r31, 0xF7	; 247
     90c:	8f 2e       	mov	r8, r31
     90e:	f9 e2       	ldi	r31, 0x29	; 41
     910:	9f 2e       	mov	r9, r31
     912:	f0 2d       	mov	r31, r0
     914:	5f 01       	movw	r10, r30
     916:	33 24       	eor	r3, r3
     918:	3a 94       	dec	r3
     91a:	c1 2c       	mov	r12, r1
     91c:	d1 2c       	mov	r13, r1
     91e:	0f 2e       	mov	r0, r31
     920:	ff e4       	ldi	r31, 0x4F	; 79
     922:	7f 2e       	mov	r7, r31
     924:	f0 2d       	mov	r31, r0
     926:	0f 2e       	mov	r0, r31
     928:	f7 e4       	ldi	r31, 0x47	; 71
     92a:	5f 2e       	mov	r5, r31
     92c:	f0 2d       	mov	r31, r0
     92e:	66 24       	eor	r6, r6
     930:	63 94       	inc	r6
     932:	2f b6       	in	r2, 0x3f	; 63
     934:	f8 94       	cli
     936:	a6 01       	movw	r20, r12
     938:	7c 9c       	mul	r7, r12
     93a:	f0 01       	movw	r30, r0
     93c:	7d 9c       	mul	r7, r13
     93e:	f0 0d       	add	r31, r0
     940:	11 24       	eor	r1, r1
     942:	ef 5b       	subi	r30, 0xBF	; 191
     944:	f5 4d       	sbci	r31, 0xD5	; 213
     946:	80 81       	ld	r24, Z
     948:	81 ff       	sbrs	r24, 1
     94a:	38 c1       	rjmp	.+624    	; 0xbbc <perform_ir_upkeep+0x2f8>
     94c:	4c 2c       	mov	r4, r12
     94e:	73 2d       	mov	r23, r3
     950:	33 20       	and	r3, r3
     952:	0c f4       	brge	.+2      	; 0x956 <perform_ir_upkeep+0x92>
     954:	51 c1       	rjmp	.+674    	; 0xbf8 <perform_ir_upkeep+0x334>
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	7c 9c       	mul	r7, r12
     95a:	f0 01       	movw	r30, r0
     95c:	7d 9c       	mul	r7, r13
     95e:	f0 0d       	add	r31, r0
     960:	11 24       	eor	r1, r1
     962:	ea 5c       	subi	r30, 0xCA	; 202
     964:	f5 4d       	sbci	r31, 0xD5	; 213
     966:	80 81       	ld	r24, Z
     968:	91 81       	ldd	r25, Z+1	; 0x01
     96a:	a7 2f       	mov	r26, r23
     96c:	aa 0f       	add	r26, r26
     96e:	bb 0b       	sbc	r27, r27
     970:	21 e0       	ldi	r18, 0x01	; 1
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	2c 0f       	add	r18, r28
     976:	3d 1f       	adc	r19, r29
     978:	a2 0f       	add	r26, r18
     97a:	b3 1f       	adc	r27, r19
     97c:	2d 91       	ld	r18, X+
     97e:	3c 91       	ld	r19, X
     980:	28 17       	cp	r18, r24
     982:	39 07       	cpc	r19, r25
     984:	09 f4       	brne	.+2      	; 0x988 <perform_ir_upkeep+0xc4>
     986:	66 2d       	mov	r22, r6
     988:	71 50       	subi	r23, 0x01	; 1
     98a:	6a f7       	brpl	.-38     	; 0x966 <perform_ir_upkeep+0xa2>
     98c:	74 9e       	mul	r7, r20
     98e:	f0 01       	movw	r30, r0
     990:	75 9e       	mul	r7, r21
     992:	f0 0d       	add	r31, r0
     994:	11 24       	eor	r1, r1
     996:	ea 5c       	subi	r30, 0xCA	; 202
     998:	f5 4d       	sbci	r31, 0xD5	; 213
     99a:	80 81       	ld	r24, Z
     99c:	91 81       	ldd	r25, Z+1	; 0x01
     99e:	d5 01       	movw	r26, r10
     9a0:	8d 93       	st	X+, r24
     9a2:	9c 93       	st	X, r25
     9a4:	66 23       	and	r22, r22
     9a6:	f1 f0       	breq	.+60     	; 0x9e4 <perform_ir_upkeep+0x120>
     9a8:	74 9e       	mul	r7, r20
     9aa:	c0 01       	movw	r24, r0
     9ac:	75 9e       	mul	r7, r21
     9ae:	90 0d       	add	r25, r0
     9b0:	11 24       	eor	r1, r1
     9b2:	8d 50       	subi	r24, 0x0D	; 13
     9b4:	96 4d       	sbci	r25, 0xD6	; 214
     9b6:	fc 01       	movw	r30, r24
     9b8:	e2 5b       	subi	r30, 0xB2	; 178
     9ba:	ff 4f       	sbci	r31, 0xFF	; 255
     9bc:	10 82       	st	Z, r1
     9be:	31 97       	sbiw	r30, 0x01	; 1
     9c0:	10 82       	st	Z, r1
     9c2:	34 97       	sbiw	r30, 0x04	; 4
     9c4:	10 82       	st	Z, r1
     9c6:	11 82       	std	Z+1, r1	; 0x01
     9c8:	32 97       	sbiw	r30, 0x02	; 2
     9ca:	10 82       	st	Z, r1
     9cc:	11 82       	std	Z+1, r1	; 0x01
     9ce:	32 97       	sbiw	r30, 0x02	; 2
     9d0:	10 82       	st	Z, r1
     9d2:	11 82       	std	Z+1, r1	; 0x01
     9d4:	ad 85       	ldd	r26, Y+13	; 0x0d
     9d6:	be 85       	ldd	r27, Y+14	; 0x0e
     9d8:	ed 91       	ld	r30, X+
     9da:	fc 91       	ld	r31, X
     9dc:	84 81       	ldd	r24, Z+4	; 0x04
     9de:	80 61       	ori	r24, 0x10	; 16
     9e0:	84 83       	std	Z+4, r24	; 0x04
     9e2:	ec c0       	rjmp	.+472    	; 0xbbc <perform_ir_upkeep+0x2f8>
     9e4:	74 9e       	mul	r7, r20
     9e6:	f0 01       	movw	r30, r0
     9e8:	75 9e       	mul	r7, r21
     9ea:	f0 0d       	add	r31, r0
     9ec:	11 24       	eor	r1, r1
     9ee:	ef 5b       	subi	r30, 0xBF	; 191
     9f0:	f5 4d       	sbci	r31, 0xD5	; 213
     9f2:	80 81       	ld	r24, Z
     9f4:	83 ff       	sbrs	r24, 3
     9f6:	69 c0       	rjmp	.+210    	; 0xaca <perform_ir_upkeep+0x206>
     9f8:	74 9e       	mul	r7, r20
     9fa:	80 01       	movw	r16, r0
     9fc:	75 9e       	mul	r7, r21
     9fe:	10 0d       	add	r17, r0
     a00:	11 24       	eor	r1, r1
     a02:	0d 50       	subi	r16, 0x0D	; 13
     a04:	16 4d       	sbci	r17, 0xD6	; 214
     a06:	78 01       	movw	r14, r16
     a08:	bd e4       	ldi	r27, 0x4D	; 77
     a0a:	eb 0e       	add	r14, r27
     a0c:	f1 1c       	adc	r15, r1
     a0e:	f7 01       	movw	r30, r14
     a10:	40 81       	ld	r20, Z
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	b4 01       	movw	r22, r8
     a16:	87 e0       	ldi	r24, 0x07	; 7
     a18:	9c e2       	ldi	r25, 0x2C	; 44
     a1a:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <memcpy>
     a1e:	d7 01       	movw	r26, r14
     a20:	ec 91       	ld	r30, X
     a22:	f0 e0       	ldi	r31, 0x00	; 0
     a24:	e9 5f       	subi	r30, 0xF9	; 249
     a26:	f3 4d       	sbci	r31, 0xD3	; 211
     a28:	10 82       	st	Z, r1
     a2a:	8c 91       	ld	r24, X
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	80 93 04 2c 	sts	0x2C04, r24
     a32:	90 93 05 2c 	sts	0x2C05, r25
     a36:	f8 01       	movw	r30, r16
     a38:	80 81       	ld	r24, Z
     a3a:	91 81       	ldd	r25, Z+1	; 0x01
     a3c:	a2 81       	ldd	r26, Z+2	; 0x02
     a3e:	b3 81       	ldd	r27, Z+3	; 0x03
     a40:	80 93 fe 2b 	sts	0x2BFE, r24
     a44:	90 93 ff 2b 	sts	0x2BFF, r25
     a48:	a0 93 00 2c 	sts	0x2C00, r26
     a4c:	b0 93 01 2c 	sts	0x2C01, r27
     a50:	eb 5b       	subi	r30, 0xBB	; 187
     a52:	ff 4f       	sbci	r31, 0xFF	; 255
     a54:	80 81       	ld	r24, Z
     a56:	91 81       	ldd	r25, Z+1	; 0x01
     a58:	80 93 7d 29 	sts	0x297D, r24
     a5c:	90 93 7e 29 	sts	0x297E, r25
     a60:	f5 e0       	ldi	r31, 0x05	; 5
     a62:	f4 15       	cp	r31, r4
     a64:	38 f1       	brcs	.+78     	; 0xab4 <perform_ir_upkeep+0x1f0>
     a66:	24 2d       	mov	r18, r4
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	72 9e       	mul	r7, r18
     a6c:	c0 01       	movw	r24, r0
     a6e:	73 9e       	mul	r7, r19
     a70:	90 0d       	add	r25, r0
     a72:	11 24       	eor	r1, r1
     a74:	8d 50       	subi	r24, 0x0D	; 13
     a76:	96 4d       	sbci	r25, 0xD6	; 214
     a78:	fc 01       	movw	r30, r24
     a7a:	e2 5b       	subi	r30, 0xB2	; 178
     a7c:	ff 4f       	sbci	r31, 0xFF	; 255
     a7e:	10 82       	st	Z, r1
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	10 82       	st	Z, r1
     a84:	34 97       	sbiw	r30, 0x04	; 4
     a86:	10 82       	st	Z, r1
     a88:	11 82       	std	Z+1, r1	; 0x01
     a8a:	32 97       	sbiw	r30, 0x02	; 2
     a8c:	10 82       	st	Z, r1
     a8e:	11 82       	std	Z+1, r1	; 0x01
     a90:	32 97       	sbiw	r30, 0x02	; 2
     a92:	10 82       	st	Z, r1
     a94:	11 82       	std	Z+1, r1	; 0x01
     a96:	f9 01       	movw	r30, r18
     a98:	ee 0f       	add	r30, r30
     a9a:	ff 1f       	adc	r31, r31
     a9c:	ea 5f       	subi	r30, 0xFA	; 250
     a9e:	ff 4d       	sbci	r31, 0xDF	; 223
     aa0:	01 90       	ld	r0, Z+
     aa2:	f0 81       	ld	r31, Z
     aa4:	e0 2d       	mov	r30, r0
     aa6:	84 81       	ldd	r24, Z+4	; 0x04
     aa8:	80 61       	ori	r24, 0x10	; 16
     aaa:	84 83       	std	Z+4, r24	; 0x04
     aac:	43 94       	inc	r4
     aae:	26 e0       	ldi	r18, 0x06	; 6
     ab0:	42 12       	cpse	r4, r18
     ab2:	d9 cf       	rjmp	.-78     	; 0xa66 <perform_ir_upkeep+0x1a2>
     ab4:	20 e0       	ldi	r18, 0x00	; 0
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	4f e1       	ldi	r20, 0x1F	; 31
     aba:	56 e0       	ldi	r21, 0x06	; 6
     abc:	65 e0       	ldi	r22, 0x05	; 5
     abe:	70 e0       	ldi	r23, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 b2 24 	call	0x4964	; 0x4964 <schedule_task>
     ac8:	79 c0       	rjmp	.+242    	; 0xbbc <perform_ir_upkeep+0x2f8>
     aca:	80 91 7f 29 	lds	r24, 0x297F
     ace:	86 30       	cpi	r24, 0x06	; 6
     ad0:	20 f0       	brcs	.+8      	; 0xada <perform_ir_upkeep+0x216>
     ad2:	60 92 8c 27 	sts	0x278C, r6
     ad6:	10 92 7f 29 	sts	0x297F, r1
     ada:	74 9e       	mul	r7, r20
     adc:	80 01       	movw	r16, r0
     ade:	75 9e       	mul	r7, r21
     ae0:	10 0d       	add	r17, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	0d 50       	subi	r16, 0x0D	; 13
     ae6:	16 4d       	sbci	r17, 0xD6	; 214
     ae8:	78 01       	movw	r14, r16
     aea:	3d e4       	ldi	r19, 0x4D	; 77
     aec:	e3 0e       	add	r14, r19
     aee:	f1 1c       	adc	r15, r1
     af0:	d7 01       	movw	r26, r14
     af2:	4c 91       	ld	r20, X
     af4:	80 91 7f 29 	lds	r24, 0x297F
     af8:	58 9e       	mul	r5, r24
     afa:	c0 01       	movw	r24, r0
     afc:	11 24       	eor	r1, r1
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	b4 01       	movw	r22, r8
     b02:	87 52       	subi	r24, 0x27	; 39
     b04:	98 4d       	sbci	r25, 0xD8	; 216
     b06:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <memcpy>
     b0a:	e0 91 7f 29 	lds	r30, 0x297F
     b0e:	d7 01       	movw	r26, r14
     b10:	8c 91       	ld	r24, X
     b12:	5e 9e       	mul	r5, r30
     b14:	f0 01       	movw	r30, r0
     b16:	11 24       	eor	r1, r1
     b18:	ed 52       	subi	r30, 0x2D	; 45
     b1a:	f8 4d       	sbci	r31, 0xD8	; 216
     b1c:	e8 0f       	add	r30, r24
     b1e:	f1 1d       	adc	r31, r1
     b20:	16 82       	std	Z+6, r1	; 0x06
     b22:	20 91 7f 29 	lds	r18, 0x297F
     b26:	f8 01       	movw	r30, r16
     b28:	80 81       	ld	r24, Z
     b2a:	91 81       	ldd	r25, Z+1	; 0x01
     b2c:	a2 81       	ldd	r26, Z+2	; 0x02
     b2e:	b3 81       	ldd	r27, Z+3	; 0x03
     b30:	52 9e       	mul	r5, r18
     b32:	f0 01       	movw	r30, r0
     b34:	11 24       	eor	r1, r1
     b36:	ed 52       	subi	r30, 0x2D	; 45
     b38:	f8 4d       	sbci	r31, 0xD8	; 216
     b3a:	80 83       	st	Z, r24
     b3c:	91 83       	std	Z+1, r25	; 0x01
     b3e:	a2 83       	std	Z+2, r26	; 0x02
     b40:	b3 83       	std	Z+3, r27	; 0x03
     b42:	e0 91 7f 29 	lds	r30, 0x297F
     b46:	5e 9e       	mul	r5, r30
     b48:	f0 01       	movw	r30, r0
     b4a:	11 24       	eor	r1, r1
     b4c:	e8 5e       	subi	r30, 0xE8	; 232
     b4e:	f7 4d       	sbci	r31, 0xD7	; 215
     b50:	40 82       	st	Z, r4
     b52:	a0 91 7f 29 	lds	r26, 0x297F
     b56:	f8 01       	movw	r30, r16
     b58:	eb 5b       	subi	r30, 0xBB	; 187
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	80 81       	ld	r24, Z
     b5e:	91 81       	ldd	r25, Z+1	; 0x01
     b60:	5a 9e       	mul	r5, r26
     b62:	d0 01       	movw	r26, r0
     b64:	11 24       	eor	r1, r1
     b66:	ad 52       	subi	r26, 0x2D	; 45
     b68:	b8 4d       	sbci	r27, 0xD8	; 216
     b6a:	14 96       	adiw	r26, 0x04	; 4
     b6c:	8d 93       	st	X+, r24
     b6e:	9c 93       	st	X, r25
     b70:	15 97       	sbiw	r26, 0x05	; 5
     b72:	90 91 7f 29 	lds	r25, 0x297F
     b76:	d7 01       	movw	r26, r14
     b78:	8c 91       	ld	r24, X
     b7a:	59 9e       	mul	r5, r25
     b7c:	d0 01       	movw	r26, r0
     b7e:	11 24       	eor	r1, r1
     b80:	a7 5e       	subi	r26, 0xE7	; 231
     b82:	b7 4d       	sbci	r27, 0xD7	; 215
     b84:	8c 93       	st	X, r24
     b86:	80 91 7f 29 	lds	r24, 0x297F
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	80 93 7f 29 	sts	0x297F, r24
     b90:	d8 01       	movw	r26, r16
     b92:	a2 5b       	subi	r26, 0xB2	; 178
     b94:	bf 4f       	sbci	r27, 0xFF	; 255
     b96:	1c 92       	st	X, r1
     b98:	d7 01       	movw	r26, r14
     b9a:	1c 92       	st	X, r1
     b9c:	14 97       	sbiw	r26, 0x04	; 4
     b9e:	1d 92       	st	X+, r1
     ba0:	1c 92       	st	X, r1
     ba2:	11 97       	sbiw	r26, 0x01	; 1
     ba4:	12 97       	sbiw	r26, 0x02	; 2
     ba6:	1d 92       	st	X+, r1
     ba8:	1c 92       	st	X, r1
     baa:	10 82       	st	Z, r1
     bac:	11 82       	std	Z+1, r1	; 0x01
     bae:	ad 85       	ldd	r26, Y+13	; 0x0d
     bb0:	be 85       	ldd	r27, Y+14	; 0x0e
     bb2:	ed 91       	ld	r30, X+
     bb4:	fc 91       	ld	r31, X
     bb6:	84 81       	ldd	r24, Z+4	; 0x04
     bb8:	80 61       	ori	r24, 0x10	; 16
     bba:	84 83       	std	Z+4, r24	; 0x04
     bbc:	2f be       	out	0x3f, r2	; 63
     bbe:	bf ef       	ldi	r27, 0xFF	; 255
     bc0:	cb 1a       	sub	r12, r27
     bc2:	db 0a       	sbc	r13, r27
     bc4:	ed 85       	ldd	r30, Y+13	; 0x0d
     bc6:	fe 85       	ldd	r31, Y+14	; 0x0e
     bc8:	32 96       	adiw	r30, 0x02	; 2
     bca:	ed 87       	std	Y+13, r30	; 0x0d
     bcc:	fe 87       	std	Y+14, r31	; 0x0e
     bce:	ff e4       	ldi	r31, 0x4F	; 79
     bd0:	8f 0e       	add	r8, r31
     bd2:	91 1c       	adc	r9, r1
     bd4:	22 e0       	ldi	r18, 0x02	; 2
     bd6:	a2 0e       	add	r10, r18
     bd8:	b1 1c       	adc	r11, r1
     bda:	33 94       	inc	r3
     bdc:	35 e0       	ldi	r19, 0x05	; 5
     bde:	33 12       	cpse	r3, r19
     be0:	a8 ce       	rjmp	.-688    	; 0x932 <perform_ir_upkeep+0x6e>
     be2:	20 e0       	ldi	r18, 0x00	; 0
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	42 e6       	ldi	r20, 0x62	; 98
     be8:	54 e0       	ldi	r21, 0x04	; 4
     bea:	62 e3       	ldi	r22, 0x32	; 50
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 b2 24 	call	0x4964	; 0x4964 <schedule_task>
     bf6:	0d c0       	rjmp	.+26     	; 0xc12 <perform_ir_upkeep+0x34e>
     bf8:	7c 9c       	mul	r7, r12
     bfa:	f0 01       	movw	r30, r0
     bfc:	7d 9c       	mul	r7, r13
     bfe:	f0 0d       	add	r31, r0
     c00:	11 24       	eor	r1, r1
     c02:	ea 5c       	subi	r30, 0xCA	; 202
     c04:	f5 4d       	sbci	r31, 0xD5	; 213
     c06:	80 81       	ld	r24, Z
     c08:	91 81       	ldd	r25, Z+1	; 0x01
     c0a:	d5 01       	movw	r26, r10
     c0c:	8d 93       	st	X+, r24
     c0e:	9c 93       	st	X, r25
     c10:	e9 ce       	rjmp	.-558    	; 0x9e4 <perform_ir_upkeep+0x120>
     c12:	2e 96       	adiw	r28, 0x0e	; 14
     c14:	cd bf       	out	0x3d, r28	; 61
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	bf 90       	pop	r11
     c2a:	af 90       	pop	r10
     c2c:	9f 90       	pop	r9
     c2e:	8f 90       	pop	r8
     c30:	7f 90       	pop	r7
     c32:	6f 90       	pop	r6
     c34:	5f 90       	pop	r5
     c36:	4f 90       	pop	r4
     c38:	3f 90       	pop	r3
     c3a:	2f 90       	pop	r2
     c3c:	08 95       	ret

00000c3e <handle_cmd_wrapper>:
     c3e:	df 92       	push	r13
     c40:	ef 92       	push	r14
     c42:	ff 92       	push	r15
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	cf 93       	push	r28
     c4a:	df 93       	push	r29
     c4c:	cd b7       	in	r28, 0x3d	; 61
     c4e:	de b7       	in	r29, 0x3e	; 62
     c50:	ed b6       	in	r14, 0x3d	; 61
     c52:	fe b6       	in	r15, 0x3e	; 62
     c54:	80 91 04 2c 	lds	r24, 0x2C04
     c58:	90 91 05 2c 	lds	r25, 0x2C05
     c5c:	01 96       	adiw	r24, 0x01	; 1
     c5e:	2d b7       	in	r18, 0x3d	; 61
     c60:	3e b7       	in	r19, 0x3e	; 62
     c62:	28 1b       	sub	r18, r24
     c64:	39 0b       	sbc	r19, r25
     c66:	2d bf       	out	0x3d, r18	; 61
     c68:	3e bf       	out	0x3e, r19	; 62
     c6a:	0d b7       	in	r16, 0x3d	; 61
     c6c:	1e b7       	in	r17, 0x3e	; 62
     c6e:	0f 5f       	subi	r16, 0xFF	; 255
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
     c72:	df b6       	in	r13, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	40 91 04 2c 	lds	r20, 0x2C04
     c7a:	50 91 05 2c 	lds	r21, 0x2C05
     c7e:	4f 5f       	subi	r20, 0xFF	; 255
     c80:	5f 4f       	sbci	r21, 0xFF	; 255
     c82:	67 e0       	ldi	r22, 0x07	; 7
     c84:	7c e2       	ldi	r23, 0x2C	; 44
     c86:	c8 01       	movw	r24, r16
     c88:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <memcpy>
     c8c:	60 91 04 2c 	lds	r22, 0x2C04
     c90:	70 91 05 2c 	lds	r23, 0x2C05
     c94:	df be       	out	0x3f, r13	; 63
     c96:	c8 01       	movw	r24, r16
     c98:	0e 94 8c 2c 	call	0x5918	; 0x5918 <handle_serial_command>
     c9c:	ed be       	out	0x3d, r14	; 61
     c9e:	fe be       	out	0x3e, r15	; 62
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	ff 90       	pop	r15
     caa:	ef 90       	pop	r14
     cac:	df 90       	pop	r13
     cae:	08 95       	ret

00000cb0 <ir_comm_init>:
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	a0 ea       	ldi	r26, 0xA0	; 160
     cb6:	b6 e0       	ldi	r27, 0x06	; 6
     cb8:	83 ef       	ldi	r24, 0xF3	; 243
     cba:	11 96       	adiw	r26, 0x01	; 1
     cbc:	8c 93       	st	X, r24
     cbe:	11 97       	sbiw	r26, 0x01	; 1
     cc0:	e0 e0       	ldi	r30, 0x00	; 0
     cc2:	fb e0       	ldi	r31, 0x0B	; 11
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	94 83       	std	Z+4, r25	; 0x04
     cc8:	90 81       	ld	r25, Z
     cca:	93 60       	ori	r25, 0x03	; 3
     ccc:	90 83       	st	Z, r25
     cce:	81 83       	std	Z+1, r24	; 0x01
     cd0:	82 ed       	ldi	r24, 0xD2	; 210
     cd2:	87 a3       	std	Z+39, r24	; 0x27
     cd4:	86 a3       	std	Z+38, r24	; 0x26
     cd6:	89 e6       	ldi	r24, 0x69	; 105
     cd8:	81 a7       	std	Z+41, r24	; 0x29
     cda:	83 a7       	std	Z+43, r24	; 0x2b
     cdc:	85 a7       	std	Z+45, r24	; 0x2d
     cde:	87 a7       	std	Z+47, r24	; 0x2f
     ce0:	80 a7       	std	Z+40, r24	; 0x28
     ce2:	82 a7       	std	Z+42, r24	; 0x2a
     ce4:	c0 e4       	ldi	r28, 0x40	; 64
     ce6:	d6 e0       	ldi	r29, 0x06	; 6
     ce8:	34 e4       	ldi	r19, 0x44	; 68
     cea:	3a 83       	std	Y+2, r19	; 0x02
     cec:	80 e6       	ldi	r24, 0x60	; 96
     cee:	96 e0       	ldi	r25, 0x06	; 6
     cf0:	24 e0       	ldi	r18, 0x04	; 4
     cf2:	fc 01       	movw	r30, r24
     cf4:	22 83       	std	Z+2, r18	; 0x02
     cf6:	40 e8       	ldi	r20, 0x80	; 128
     cf8:	56 e0       	ldi	r21, 0x06	; 6
     cfa:	fa 01       	movw	r30, r20
     cfc:	32 83       	std	Z+2, r19	; 0x02
     cfe:	12 96       	adiw	r26, 0x02	; 2
     d00:	2c 93       	st	X, r18
     d02:	12 97       	sbiw	r26, 0x02	; 2
     d04:	38 e8       	ldi	r19, 0x88	; 136
     d06:	39 83       	std	Y+1, r19	; 0x01
     d08:	28 e0       	ldi	r18, 0x08	; 8
     d0a:	fc 01       	movw	r30, r24
     d0c:	21 83       	std	Z+1, r18	; 0x01
     d0e:	fa 01       	movw	r30, r20
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	11 96       	adiw	r26, 0x01	; 1
     d14:	2c 93       	st	X, r18
     d16:	11 97       	sbiw	r26, 0x01	; 1
     d18:	20 e4       	ldi	r18, 0x40	; 64
     d1a:	2b 8b       	std	Y+19, r18	; 0x13
     d1c:	2f 8b       	std	Y+23, r18	; 0x17
     d1e:	fc 01       	movw	r30, r24
     d20:	23 8b       	std	Z+19, r18	; 0x13
     d22:	fa 01       	movw	r30, r20
     d24:	23 8b       	std	Z+19, r18	; 0x13
     d26:	27 8b       	std	Z+23, r18	; 0x17
     d28:	53 96       	adiw	r26, 0x13	; 19
     d2a:	2c 93       	st	X, r18
     d2c:	82 e1       	ldi	r24, 0x12	; 18
     d2e:	90 e2       	ldi	r25, 0x20	; 32
     d30:	e6 e0       	ldi	r30, 0x06	; 6
     d32:	f0 e2       	ldi	r31, 0x20	; 32
     d34:	68 e2       	ldi	r22, 0x28	; 40
     d36:	53 e0       	ldi	r21, 0x03	; 3
     d38:	40 e7       	ldi	r20, 0x70	; 112
     d3a:	32 e0       	ldi	r19, 0x02	; 2
     d3c:	a0 81       	ld	r26, Z
     d3e:	b1 81       	ldd	r27, Z+1	; 0x01
     d40:	13 96       	adiw	r26, 0x03	; 3
     d42:	6c 93       	st	X, r22
     d44:	a0 81       	ld	r26, Z
     d46:	b1 81       	ldd	r27, Z+1	; 0x01
     d48:	15 96       	adiw	r26, 0x05	; 5
     d4a:	5c 93       	st	X, r21
     d4c:	a0 81       	ld	r26, Z
     d4e:	b1 81       	ldd	r27, Z+1	; 0x01
     d50:	16 96       	adiw	r26, 0x06	; 6
     d52:	4c 93       	st	X, r20
     d54:	a0 81       	ld	r26, Z
     d56:	b1 81       	ldd	r27, Z+1	; 0x01
     d58:	17 96       	adiw	r26, 0x07	; 7
     d5a:	3c 93       	st	X, r19
     d5c:	a0 81       	ld	r26, Z
     d5e:	b1 81       	ldd	r27, Z+1	; 0x01
     d60:	14 96       	adiw	r26, 0x04	; 4
     d62:	2c 91       	ld	r18, X
     d64:	14 97       	sbiw	r26, 0x04	; 4
     d66:	20 61       	ori	r18, 0x10	; 16
     d68:	14 96       	adiw	r26, 0x04	; 4
     d6a:	2c 93       	st	X, r18
     d6c:	a1 91       	ld	r26, Z+
     d6e:	b1 91       	ld	r27, Z+
     d70:	14 96       	adiw	r26, 0x04	; 4
     d72:	2c 91       	ld	r18, X
     d74:	14 97       	sbiw	r26, 0x04	; 4
     d76:	28 60       	ori	r18, 0x08	; 8
     d78:	14 96       	adiw	r26, 0x04	; 4
     d7a:	2c 93       	st	X, r18
     d7c:	e8 17       	cp	r30, r24
     d7e:	f9 07       	cpc	r31, r25
     d80:	e9 f6       	brne	.-70     	; 0xd3c <ir_comm_init+0x8c>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	91 e0       	ldi	r25, 0x01	; 1
     d86:	87 dd       	rcall	.-1266   	; 0x896 <set_all_ir_powers>
     d88:	a6 e0       	ldi	r26, 0x06	; 6
     d8a:	b0 e2       	ldi	r27, 0x20	; 32
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	4f e4       	ldi	r20, 0x4F	; 79
     d92:	42 9f       	mul	r20, r18
     d94:	c0 01       	movw	r24, r0
     d96:	43 9f       	mul	r20, r19
     d98:	90 0d       	add	r25, r0
     d9a:	11 24       	eor	r1, r1
     d9c:	8d 50       	subi	r24, 0x0D	; 13
     d9e:	96 4d       	sbci	r25, 0xD6	; 214
     da0:	fc 01       	movw	r30, r24
     da2:	e2 5b       	subi	r30, 0xB2	; 178
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	10 82       	st	Z, r1
     da8:	31 97       	sbiw	r30, 0x01	; 1
     daa:	10 82       	st	Z, r1
     dac:	34 97       	sbiw	r30, 0x04	; 4
     dae:	10 82       	st	Z, r1
     db0:	11 82       	std	Z+1, r1	; 0x01
     db2:	32 97       	sbiw	r30, 0x02	; 2
     db4:	10 82       	st	Z, r1
     db6:	11 82       	std	Z+1, r1	; 0x01
     db8:	32 97       	sbiw	r30, 0x02	; 2
     dba:	10 82       	st	Z, r1
     dbc:	11 82       	std	Z+1, r1	; 0x01
     dbe:	ed 91       	ld	r30, X+
     dc0:	fd 91       	ld	r31, X+
     dc2:	84 81       	ldd	r24, Z+4	; 0x04
     dc4:	80 61       	ori	r24, 0x10	; 16
     dc6:	84 83       	std	Z+4, r24	; 0x04
     dc8:	2f 5f       	subi	r18, 0xFF	; 255
     dca:	3f 4f       	sbci	r19, 0xFF	; 255
     dcc:	26 30       	cpi	r18, 0x06	; 6
     dce:	31 05       	cpc	r19, r1
     dd0:	01 f7       	brne	.-64     	; 0xd92 <ir_comm_init+0xe2>
     dd2:	10 92 fe 2b 	sts	0x2BFE, r1
     dd6:	10 92 ff 2b 	sts	0x2BFF, r1
     dda:	10 92 00 2c 	sts	0x2C00, r1
     dde:	10 92 01 2c 	sts	0x2C01, r1
     de2:	10 92 7f 29 	sts	0x297F, r1
     de6:	10 92 8c 27 	sts	0x278C, r1
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	42 e6       	ldi	r20, 0x62	; 98
     df0:	54 e0       	ldi	r21, 0x04	; 4
     df2:	62 e3       	ldi	r22, 0x32	; 50
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	0e 94 b2 24 	call	0x4964	; 0x4964 <schedule_task>
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <send_msg>:
     e04:	4f 92       	push	r4
     e06:	5f 92       	push	r5
     e08:	6f 92       	push	r6
     e0a:	7f 92       	push	r7
     e0c:	8f 92       	push	r8
     e0e:	9f 92       	push	r9
     e10:	af 92       	push	r10
     e12:	bf 92       	push	r11
     e14:	cf 92       	push	r12
     e16:	df 92       	push	r13
     e18:	ef 92       	push	r14
     e1a:	ff 92       	push	r15
     e1c:	0f 93       	push	r16
     e1e:	1f 93       	push	r17
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	66 2e       	mov	r6, r22
     e26:	57 2e       	mov	r5, r23
     e28:	74 2e       	mov	r7, r20
     e2a:	c0 91 86 27 	lds	r28, 0x2786
     e2e:	d0 91 87 27 	lds	r29, 0x2787
     e32:	e8 2e       	mov	r14, r24
     e34:	f1 2c       	mov	r15, r1
     e36:	80 fd       	sbrc	r24, 0
     e38:	0d c0       	rjmp	.+26     	; 0xe54 <send_msg+0x50>
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	ac 01       	movw	r20, r24
     e40:	97 01       	movw	r18, r14
     e42:	08 2e       	mov	r0, r24
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <send_msg+0x46>
     e46:	35 95       	asr	r19
     e48:	27 95       	ror	r18
     e4a:	0a 94       	dec	r0
     e4c:	e2 f7       	brpl	.-8      	; 0xe46 <send_msg+0x42>
     e4e:	20 ff       	sbrs	r18, 0
     e50:	27 c0       	rjmp	.+78     	; 0xea0 <send_msg+0x9c>
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <send_msg+0x54>
     e54:	40 e0       	ldi	r20, 0x00	; 0
     e56:	50 e0       	ldi	r21, 0x00	; 0
     e58:	8f e4       	ldi	r24, 0x4F	; 79
     e5a:	84 9f       	mul	r24, r20
     e5c:	f0 01       	movw	r30, r0
     e5e:	85 9f       	mul	r24, r21
     e60:	f0 0d       	add	r31, r0
     e62:	11 24       	eor	r1, r1
     e64:	ef 5b       	subi	r30, 0xBF	; 191
     e66:	f5 4d       	sbci	r31, 0xD5	; 213
     e68:	80 81       	ld	r24, Z
     e6a:	88 70       	andi	r24, 0x08	; 8
     e6c:	c8 27       	eor	r28, r24
     e6e:	8c 2f       	mov	r24, r28
     e70:	82 95       	swap	r24
     e72:	8c 27       	eor	r24, r28
     e74:	08 2e       	mov	r0, r24
     e76:	86 95       	lsr	r24
     e78:	86 95       	lsr	r24
     e7a:	80 25       	eor	r24, r0
     e7c:	08 2e       	mov	r0, r24
     e7e:	86 95       	lsr	r24
     e80:	80 25       	eor	r24, r0
     e82:	87 70       	andi	r24, 0x07	; 7
     e84:	0c 2e       	mov	r0, r28
     e86:	cd 2f       	mov	r28, r29
     e88:	86 95       	lsr	r24
     e8a:	07 94       	ror	r0
     e8c:	87 95       	ror	r24
     e8e:	d0 2d       	mov	r29, r0
     e90:	c8 27       	eor	r28, r24
     e92:	06 94       	lsr	r0
     e94:	87 95       	ror	r24
     e96:	d0 25       	eor	r29, r0
     e98:	c8 27       	eor	r28, r24
     e9a:	71 10       	cpse	r7, r1
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <send_msg+0xa8>
     e9e:	86 c0       	rjmp	.+268    	; 0xfac <send_msg+0x1a8>
     ea0:	01 96       	adiw	r24, 0x01	; 1
     ea2:	86 30       	cpi	r24, 0x06	; 6
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f0       	breq	.+2      	; 0xeaa <send_msg+0xa6>
     ea8:	ca cf       	rjmp	.-108    	; 0xe3e <send_msg+0x3a>
     eaa:	f7 cf       	rjmp	.-18     	; 0xe9a <send_msg+0x96>
     eac:	96 2d       	mov	r25, r6
     eae:	e6 2d       	mov	r30, r6
     eb0:	f5 2d       	mov	r31, r5
     eb2:	81 91       	ld	r24, Z+
     eb4:	c8 27       	eor	r28, r24
     eb6:	8c 2f       	mov	r24, r28
     eb8:	82 95       	swap	r24
     eba:	8c 27       	eor	r24, r28
     ebc:	08 2e       	mov	r0, r24
     ebe:	86 95       	lsr	r24
     ec0:	86 95       	lsr	r24
     ec2:	80 25       	eor	r24, r0
     ec4:	08 2e       	mov	r0, r24
     ec6:	86 95       	lsr	r24
     ec8:	80 25       	eor	r24, r0
     eca:	87 70       	andi	r24, 0x07	; 7
     ecc:	0c 2e       	mov	r0, r28
     ece:	cd 2f       	mov	r28, r29
     ed0:	86 95       	lsr	r24
     ed2:	07 94       	ror	r0
     ed4:	87 95       	ror	r24
     ed6:	d0 2d       	mov	r29, r0
     ed8:	c8 27       	eor	r28, r24
     eda:	06 94       	lsr	r0
     edc:	87 95       	ror	r24
     ede:	d0 25       	eor	r29, r0
     ee0:	c8 27       	eor	r28, r24
     ee2:	8e 2f       	mov	r24, r30
     ee4:	89 1b       	sub	r24, r25
     ee6:	87 15       	cp	r24, r7
     ee8:	20 f3       	brcs	.-56     	; 0xeb2 <send_msg+0xae>
     eea:	60 c0       	rjmp	.+192    	; 0xfac <send_msg+0x1a8>
     eec:	c7 01       	movw	r24, r14
     eee:	00 2e       	mov	r0, r16
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <send_msg+0xf2>
     ef2:	95 95       	asr	r25
     ef4:	87 95       	ror	r24
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <send_msg+0xee>
     efa:	80 ff       	sbrs	r24, 0
     efc:	27 c0       	rjmp	.+78     	; 0xf4c <send_msg+0x148>
     efe:	40 9e       	mul	r4, r16
     f00:	c0 01       	movw	r24, r0
     f02:	41 9e       	mul	r4, r17
     f04:	90 0d       	add	r25, r0
     f06:	11 24       	eor	r1, r1
     f08:	8d 50       	subi	r24, 0x0D	; 13
     f0a:	96 4d       	sbci	r25, 0xD6	; 214
     f0c:	fc 01       	movw	r30, r24
     f0e:	e3 5b       	subi	r30, 0xB3	; 179
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	70 82       	st	Z, r7
     f14:	3a 97       	sbiw	r30, 0x0a	; 10
     f16:	c0 83       	st	Z, r28
     f18:	d1 83       	std	Z+1, r29	; 0x01
     f1a:	36 96       	adiw	r30, 0x06	; 6
     f1c:	10 82       	st	Z, r1
     f1e:	11 82       	std	Z+1, r1	; 0x01
     f20:	20 91 86 27 	lds	r18, 0x2786
     f24:	30 91 87 27 	lds	r19, 0x2787
     f28:	34 97       	sbiw	r30, 0x04	; 4
     f2a:	20 83       	st	Z, r18
     f2c:	31 83       	std	Z+1, r19	; 0x01
     f2e:	a5 01       	movw	r20, r10
     f30:	66 2d       	mov	r22, r6
     f32:	75 2d       	mov	r23, r5
     f34:	c4 01       	movw	r24, r8
     f36:	0e 94 b8 37 	call	0x6f70	; 0x6f70 <memcpy>
     f3a:	f6 01       	movw	r30, r12
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	f8 01       	movw	r30, r16
     f40:	e0 50       	subi	r30, 0x00	; 0
     f42:	f0 4e       	sbci	r31, 0xE0	; 224
     f44:	80 81       	ld	r24, Z
     f46:	89 2b       	or	r24, r25
     f48:	f6 01       	movw	r30, r12
     f4a:	81 83       	std	Z+1, r24	; 0x01
     f4c:	0f 5f       	subi	r16, 0xFF	; 255
     f4e:	1f 4f       	sbci	r17, 0xFF	; 255
     f50:	ff e4       	ldi	r31, 0x4F	; 79
     f52:	8f 0e       	add	r8, r31
     f54:	91 1c       	adc	r9, r1
     f56:	06 30       	cpi	r16, 0x06	; 6
     f58:	11 05       	cpc	r17, r1
     f5a:	41 f6       	brne	.-112    	; 0xeec <send_msg+0xe8>
     f5c:	e6 e0       	ldi	r30, 0x06	; 6
     f5e:	f0 e2       	ldi	r31, 0x20	; 32
     f60:	80 e0       	ldi	r24, 0x00	; 0
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	4f e4       	ldi	r20, 0x4F	; 79
     f66:	97 01       	movw	r18, r14
     f68:	08 2e       	mov	r0, r24
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <send_msg+0x16c>
     f6c:	35 95       	asr	r19
     f6e:	27 95       	ror	r18
     f70:	0a 94       	dec	r0
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <send_msg+0x168>
     f74:	20 ff       	sbrs	r18, 0
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <send_msg+0x19c>
     f78:	48 9f       	mul	r20, r24
     f7a:	d0 01       	movw	r26, r0
     f7c:	49 9f       	mul	r20, r25
     f7e:	b0 0d       	add	r27, r0
     f80:	11 24       	eor	r1, r1
     f82:	ad 50       	subi	r26, 0x0D	; 13
     f84:	b6 4d       	sbci	r27, 0xD6	; 214
     f86:	1d 92       	st	X+, r1
     f88:	1d 92       	st	X+, r1
     f8a:	1d 92       	st	X+, r1
     f8c:	1c 92       	st	X, r1
     f8e:	13 97       	sbiw	r26, 0x03	; 3
     f90:	a0 81       	ld	r26, Z
     f92:	b1 81       	ldd	r27, Z+1	; 0x01
     f94:	13 96       	adiw	r26, 0x03	; 3
     f96:	2c 91       	ld	r18, X
     f98:	13 97       	sbiw	r26, 0x03	; 3
     f9a:	22 60       	ori	r18, 0x02	; 2
     f9c:	13 96       	adiw	r26, 0x03	; 3
     f9e:	2c 93       	st	X, r18
     fa0:	01 96       	adiw	r24, 0x01	; 1
     fa2:	32 96       	adiw	r30, 0x02	; 2
     fa4:	86 30       	cpi	r24, 0x06	; 6
     fa6:	91 05       	cpc	r25, r1
     fa8:	f1 f6       	brne	.-68     	; 0xf66 <send_msg+0x162>
     faa:	14 c0       	rjmp	.+40     	; 0xfd4 <send_msg+0x1d0>
     fac:	0f 2e       	mov	r0, r31
     fae:	f7 ef       	ldi	r31, 0xF7	; 247
     fb0:	8f 2e       	mov	r8, r31
     fb2:	f9 e2       	ldi	r31, 0x29	; 41
     fb4:	9f 2e       	mov	r9, r31
     fb6:	f0 2d       	mov	r31, r0
     fb8:	00 e0       	ldi	r16, 0x00	; 0
     fba:	10 e0       	ldi	r17, 0x00	; 0
     fbc:	0f 2e       	mov	r0, r31
     fbe:	ff e4       	ldi	r31, 0x4F	; 79
     fc0:	4f 2e       	mov	r4, r31
     fc2:	f0 2d       	mov	r31, r0
     fc4:	a7 2c       	mov	r10, r7
     fc6:	b1 2c       	mov	r11, r1
     fc8:	0f 2e       	mov	r0, r31
     fca:	c1 2c       	mov	r12, r1
     fcc:	fb e0       	ldi	r31, 0x0B	; 11
     fce:	df 2e       	mov	r13, r31
     fd0:	f0 2d       	mov	r31, r0
     fd2:	8c cf       	rjmp	.-232    	; 0xeec <send_msg+0xe8>
     fd4:	df 91       	pop	r29
     fd6:	cf 91       	pop	r28
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	9f 90       	pop	r9
     fea:	8f 90       	pop	r8
     fec:	7f 90       	pop	r7
     fee:	6f 90       	pop	r6
     ff0:	5f 90       	pop	r5
     ff2:	4f 90       	pop	r4
     ff4:	08 95       	ret

00000ff6 <ir_receive>:
     ff6:	af 92       	push	r10
     ff8:	bf 92       	push	r11
     ffa:	cf 92       	push	r12
     ffc:	df 92       	push	r13
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	c8 2f       	mov	r28, r24
    100a:	d0 e0       	ldi	r29, 0x00	; 0
    100c:	fe 01       	movw	r30, r28
    100e:	ee 0f       	add	r30, r30
    1010:	ff 1f       	adc	r31, r31
    1012:	ea 5f       	subi	r30, 0xFA	; 250
    1014:	ff 4d       	sbci	r31, 0xDF	; 223
    1016:	01 90       	ld	r0, Z+
    1018:	f0 81       	ld	r31, Z
    101a:	e0 2d       	mov	r30, r0
    101c:	f0 80       	ld	r15, Z
    101e:	21 da       	rcall	.-3006   	; 0x462 <get_time>
    1020:	2f e4       	ldi	r18, 0x4F	; 79
    1022:	2c 9f       	mul	r18, r28
    1024:	f0 01       	movw	r30, r0
    1026:	2d 9f       	mul	r18, r29
    1028:	f0 0d       	add	r31, r0
    102a:	11 24       	eor	r1, r1
    102c:	ed 50       	subi	r30, 0x0D	; 13
    102e:	f6 4d       	sbci	r31, 0xD6	; 214
    1030:	00 81       	ld	r16, Z
    1032:	11 81       	ldd	r17, Z+1	; 0x01
    1034:	22 81       	ldd	r18, Z+2	; 0x02
    1036:	33 81       	ldd	r19, Z+3	; 0x03
    1038:	5b 01       	movw	r10, r22
    103a:	6c 01       	movw	r12, r24
    103c:	a0 1a       	sub	r10, r16
    103e:	b1 0a       	sbc	r11, r17
    1040:	c2 0a       	sbc	r12, r18
    1042:	d3 0a       	sbc	r13, r19
    1044:	96 01       	movw	r18, r12
    1046:	85 01       	movw	r16, r10
    1048:	0b 30       	cpi	r16, 0x0B	; 11
    104a:	11 05       	cpc	r17, r1
    104c:	21 05       	cpc	r18, r1
    104e:	31 05       	cpc	r19, r1
    1050:	50 f0       	brcs	.+20     	; 0x1066 <ir_receive+0x70>
    1052:	2f e4       	ldi	r18, 0x4F	; 79
    1054:	2c 9f       	mul	r18, r28
    1056:	f0 01       	movw	r30, r0
    1058:	2d 9f       	mul	r18, r29
    105a:	f0 0d       	add	r31, r0
    105c:	11 24       	eor	r1, r1
    105e:	e4 5c       	subi	r30, 0xC4	; 196
    1060:	f5 4d       	sbci	r31, 0xD5	; 213
    1062:	10 82       	st	Z, r1
    1064:	11 82       	std	Z+1, r1	; 0x01
    1066:	2f e4       	ldi	r18, 0x4F	; 79
    1068:	2c 9f       	mul	r18, r28
    106a:	f0 01       	movw	r30, r0
    106c:	2d 9f       	mul	r18, r29
    106e:	f0 0d       	add	r31, r0
    1070:	11 24       	eor	r1, r1
    1072:	ed 50       	subi	r30, 0x0D	; 13
    1074:	f6 4d       	sbci	r31, 0xD6	; 214
    1076:	60 83       	st	Z, r22
    1078:	71 83       	std	Z+1, r23	; 0x01
    107a:	82 83       	std	Z+2, r24	; 0x02
    107c:	93 83       	std	Z+3, r25	; 0x03
    107e:	e7 5b       	subi	r30, 0xB7	; 183
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	80 81       	ld	r24, Z
    1084:	91 81       	ldd	r25, Z+1	; 0x01
    1086:	87 30       	cpi	r24, 0x07	; 7
    1088:	91 05       	cpc	r25, r1
    108a:	08 f0       	brcs	.+2      	; 0x108e <ir_receive+0x98>
    108c:	a4 c0       	rjmp	.+328    	; 0x11d6 <ir_receive+0x1e0>
    108e:	fc 01       	movw	r30, r24
    1090:	eb 5f       	subi	r30, 0xFB	; 251
    1092:	fe 4f       	sbci	r31, 0xFE	; 254
    1094:	0c 94 87 35 	jmp	0x6b0e	; 0x6b0e <__tablejump2__>
    1098:	8f 2d       	mov	r24, r15
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	2f e4       	ldi	r18, 0x4F	; 79
    109e:	2c 9f       	mul	r18, r28
    10a0:	f0 01       	movw	r30, r0
    10a2:	2d 9f       	mul	r18, r29
    10a4:	f0 0d       	add	r31, r0
    10a6:	11 24       	eor	r1, r1
    10a8:	e8 5c       	subi	r30, 0xC8	; 200
    10aa:	f5 4d       	sbci	r31, 0xD5	; 213
    10ac:	80 83       	st	Z, r24
    10ae:	91 83       	std	Z+1, r25	; 0x01
    10b0:	ca c0       	rjmp	.+404    	; 0x1246 <ir_receive+0x250>
    10b2:	2f e4       	ldi	r18, 0x4F	; 79
    10b4:	2c 9f       	mul	r18, r28
    10b6:	c0 01       	movw	r24, r0
    10b8:	2d 9f       	mul	r18, r29
    10ba:	90 0d       	add	r25, r0
    10bc:	11 24       	eor	r1, r1
    10be:	8d 50       	subi	r24, 0x0D	; 13
    10c0:	96 4d       	sbci	r25, 0xD6	; 214
    10c2:	fc 01       	movw	r30, r24
    10c4:	eb 5b       	subi	r30, 0xBB	; 187
    10c6:	ff 4f       	sbci	r31, 0xFF	; 255
    10c8:	20 81       	ld	r18, Z
    10ca:	31 81       	ldd	r19, Z+1	; 0x01
    10cc:	3f 29       	or	r19, r15
    10ce:	20 83       	st	Z, r18
    10d0:	31 83       	std	Z+1, r19	; 0x01
    10d2:	20 81       	ld	r18, Z
    10d4:	31 81       	ldd	r19, Z+1	; 0x01
    10d6:	36 96       	adiw	r30, 0x06	; 6
    10d8:	20 83       	st	Z, r18
    10da:	31 83       	std	Z+1, r19	; 0x01
    10dc:	b4 c0       	rjmp	.+360    	; 0x1246 <ir_receive+0x250>
    10de:	ff 20       	and	r15, r15
    10e0:	5c f4       	brge	.+22     	; 0x10f8 <ir_receive+0x102>
    10e2:	8f e4       	ldi	r24, 0x4F	; 79
    10e4:	8c 9f       	mul	r24, r28
    10e6:	f0 01       	movw	r30, r0
    10e8:	8d 9f       	mul	r24, r29
    10ea:	f0 0d       	add	r31, r0
    10ec:	11 24       	eor	r1, r1
    10ee:	ef 5b       	subi	r30, 0xBF	; 191
    10f0:	f5 4d       	sbci	r31, 0xD5	; 213
    10f2:	80 81       	ld	r24, Z
    10f4:	88 60       	ori	r24, 0x08	; 8
    10f6:	80 83       	st	Z, r24
    10f8:	2f e4       	ldi	r18, 0x4F	; 79
    10fa:	2c 9f       	mul	r18, r28
    10fc:	c0 01       	movw	r24, r0
    10fe:	2d 9f       	mul	r18, r29
    1100:	90 0d       	add	r25, r0
    1102:	11 24       	eor	r1, r1
    1104:	8d 50       	subi	r24, 0x0D	; 13
    1106:	96 4d       	sbci	r25, 0xD6	; 214
    1108:	fc 01       	movw	r30, r24
    110a:	e2 5b       	subi	r30, 0xB2	; 178
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	20 81       	ld	r18, Z
    1110:	33 97       	sbiw	r30, 0x03	; 3
    1112:	80 81       	ld	r24, Z
    1114:	91 81       	ldd	r25, Z+1	; 0x01
    1116:	28 70       	andi	r18, 0x08	; 8
    1118:	82 27       	eor	r24, r18
    111a:	28 2f       	mov	r18, r24
    111c:	22 95       	swap	r18
    111e:	28 27       	eor	r18, r24
    1120:	02 2e       	mov	r0, r18
    1122:	26 95       	lsr	r18
    1124:	26 95       	lsr	r18
    1126:	20 25       	eor	r18, r0
    1128:	02 2e       	mov	r0, r18
    112a:	26 95       	lsr	r18
    112c:	20 25       	eor	r18, r0
    112e:	27 70       	andi	r18, 0x07	; 7
    1130:	08 2e       	mov	r0, r24
    1132:	89 2f       	mov	r24, r25
    1134:	26 95       	lsr	r18
    1136:	07 94       	ror	r0
    1138:	27 95       	ror	r18
    113a:	90 2d       	mov	r25, r0
    113c:	82 27       	eor	r24, r18
    113e:	06 94       	lsr	r0
    1140:	27 95       	ror	r18
    1142:	90 25       	eor	r25, r0
    1144:	82 27       	eor	r24, r18
    1146:	4f e4       	ldi	r20, 0x4F	; 79
    1148:	4c 9f       	mul	r20, r28
    114a:	90 01       	movw	r18, r0
    114c:	4d 9f       	mul	r20, r29
    114e:	30 0d       	add	r19, r0
    1150:	11 24       	eor	r1, r1
    1152:	2d 50       	subi	r18, 0x0D	; 13
    1154:	36 4d       	sbci	r19, 0xD6	; 214
    1156:	f9 01       	movw	r30, r18
    1158:	e5 5b       	subi	r30, 0xB5	; 181
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 83       	st	Z, r24
    115e:	91 83       	std	Z+1, r25	; 0x01
    1160:	8f 2d       	mov	r24, r15
    1162:	8f 77       	andi	r24, 0x7F	; 127
    1164:	32 96       	adiw	r30, 0x02	; 2
    1166:	80 83       	st	Z, r24
    1168:	6e c0       	rjmp	.+220    	; 0x1246 <ir_receive+0x250>
    116a:	8f 2d       	mov	r24, r15
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	2f e4       	ldi	r18, 0x4F	; 79
    1170:	2c 9f       	mul	r18, r28
    1172:	f0 01       	movw	r30, r0
    1174:	2d 9f       	mul	r18, r29
    1176:	f0 0d       	add	r31, r0
    1178:	11 24       	eor	r1, r1
    117a:	ea 5c       	subi	r30, 0xCA	; 202
    117c:	f5 4d       	sbci	r31, 0xD5	; 213
    117e:	80 83       	st	Z, r24
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	61 c0       	rjmp	.+194    	; 0x1246 <ir_receive+0x250>
    1184:	8f e4       	ldi	r24, 0x4F	; 79
    1186:	8c 9f       	mul	r24, r28
    1188:	f0 01       	movw	r30, r0
    118a:	8d 9f       	mul	r24, r29
    118c:	f0 0d       	add	r31, r0
    118e:	11 24       	eor	r1, r1
    1190:	ea 5c       	subi	r30, 0xCA	; 202
    1192:	f5 4d       	sbci	r31, 0xD5	; 213
    1194:	80 81       	ld	r24, Z
    1196:	91 81       	ldd	r25, Z+1	; 0x01
    1198:	9f 29       	or	r25, r15
    119a:	80 83       	st	Z, r24
    119c:	91 83       	std	Z+1, r25	; 0x01
    119e:	53 c0       	rjmp	.+166    	; 0x1246 <ir_receive+0x250>
    11a0:	8f 2d       	mov	r24, r15
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	2f e4       	ldi	r18, 0x4F	; 79
    11a6:	2c 9f       	mul	r18, r28
    11a8:	f0 01       	movw	r30, r0
    11aa:	2d 9f       	mul	r18, r29
    11ac:	f0 0d       	add	r31, r0
    11ae:	11 24       	eor	r1, r1
    11b0:	e6 5c       	subi	r30, 0xC6	; 198
    11b2:	f5 4d       	sbci	r31, 0xD5	; 213
    11b4:	80 83       	st	Z, r24
    11b6:	91 83       	std	Z+1, r25	; 0x01
    11b8:	46 c0       	rjmp	.+140    	; 0x1246 <ir_receive+0x250>
    11ba:	8f e4       	ldi	r24, 0x4F	; 79
    11bc:	8c 9f       	mul	r24, r28
    11be:	f0 01       	movw	r30, r0
    11c0:	8d 9f       	mul	r24, r29
    11c2:	f0 0d       	add	r31, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	e6 5c       	subi	r30, 0xC6	; 198
    11c8:	f5 4d       	sbci	r31, 0xD5	; 213
    11ca:	80 81       	ld	r24, Z
    11cc:	91 81       	ldd	r25, Z+1	; 0x01
    11ce:	9f 29       	or	r25, r15
    11d0:	80 83       	st	Z, r24
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	38 c0       	rjmp	.+112    	; 0x1246 <ir_receive+0x250>
    11d6:	2f e4       	ldi	r18, 0x4F	; 79
    11d8:	2c 9f       	mul	r18, r28
    11da:	c0 01       	movw	r24, r0
    11dc:	2d 9f       	mul	r18, r29
    11de:	90 0d       	add	r25, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	8d 50       	subi	r24, 0x0D	; 13
    11e4:	96 4d       	sbci	r25, 0xD6	; 214
    11e6:	fc 01       	movw	r30, r24
    11e8:	e7 5b       	subi	r30, 0xB7	; 183
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	01 90       	ld	r0, Z+
    11ee:	f0 81       	ld	r31, Z
    11f0:	e0 2d       	mov	r30, r0
    11f2:	37 97       	sbiw	r30, 0x07	; 7
    11f4:	e8 0f       	add	r30, r24
    11f6:	f9 1f       	adc	r31, r25
    11f8:	f4 82       	std	Z+4, r15	; 0x04
    11fa:	fc 01       	movw	r30, r24
    11fc:	e5 5b       	subi	r30, 0xB5	; 181
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	91 81       	ldd	r25, Z+1	; 0x01
    1204:	8f 25       	eor	r24, r15
    1206:	28 2f       	mov	r18, r24
    1208:	22 95       	swap	r18
    120a:	28 27       	eor	r18, r24
    120c:	02 2e       	mov	r0, r18
    120e:	26 95       	lsr	r18
    1210:	26 95       	lsr	r18
    1212:	20 25       	eor	r18, r0
    1214:	02 2e       	mov	r0, r18
    1216:	26 95       	lsr	r18
    1218:	20 25       	eor	r18, r0
    121a:	27 70       	andi	r18, 0x07	; 7
    121c:	08 2e       	mov	r0, r24
    121e:	89 2f       	mov	r24, r25
    1220:	26 95       	lsr	r18
    1222:	07 94       	ror	r0
    1224:	27 95       	ror	r18
    1226:	90 2d       	mov	r25, r0
    1228:	82 27       	eor	r24, r18
    122a:	06 94       	lsr	r0
    122c:	27 95       	ror	r18
    122e:	90 25       	eor	r25, r0
    1230:	82 27       	eor	r24, r18
    1232:	2f e4       	ldi	r18, 0x4F	; 79
    1234:	2c 9f       	mul	r18, r28
    1236:	f0 01       	movw	r30, r0
    1238:	2d 9f       	mul	r18, r29
    123a:	f0 0d       	add	r31, r0
    123c:	11 24       	eor	r1, r1
    123e:	e2 5c       	subi	r30, 0xC2	; 194
    1240:	f5 4d       	sbci	r31, 0xD5	; 213
    1242:	80 83       	st	Z, r24
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	2f e4       	ldi	r18, 0x4F	; 79
    1248:	2c 9f       	mul	r18, r28
    124a:	c0 01       	movw	r24, r0
    124c:	2d 9f       	mul	r18, r29
    124e:	90 0d       	add	r25, r0
    1250:	11 24       	eor	r1, r1
    1252:	8d 50       	subi	r24, 0x0D	; 13
    1254:	96 4d       	sbci	r25, 0xD6	; 214
    1256:	fc 01       	movw	r30, r24
    1258:	e7 5b       	subi	r30, 0xB7	; 183
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	20 81       	ld	r18, Z
    125e:	31 81       	ldd	r19, Z+1	; 0x01
    1260:	2f 5f       	subi	r18, 0xFF	; 255
    1262:	3f 4f       	sbci	r19, 0xFF	; 255
    1264:	20 83       	st	Z, r18
    1266:	31 83       	std	Z+1, r19	; 0x01
    1268:	20 81       	ld	r18, Z
    126a:	31 81       	ldd	r19, Z+1	; 0x01
    126c:	34 96       	adiw	r30, 0x04	; 4
    126e:	80 81       	ld	r24, Z
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	07 96       	adiw	r24, 0x07	; 7
    1274:	28 17       	cp	r18, r24
    1276:	39 07       	cpc	r19, r25
    1278:	08 f4       	brcc	.+2      	; 0x127c <ir_receive+0x286>
    127a:	79 c0       	rjmp	.+242    	; 0x136e <ir_receive+0x378>
    127c:	2f e4       	ldi	r18, 0x4F	; 79
    127e:	2c 9f       	mul	r18, r28
    1280:	c0 01       	movw	r24, r0
    1282:	2d 9f       	mul	r18, r29
    1284:	90 0d       	add	r25, r0
    1286:	11 24       	eor	r1, r1
    1288:	8d 50       	subi	r24, 0x0D	; 13
    128a:	96 4d       	sbci	r25, 0xD6	; 214
    128c:	fc 01       	movw	r30, r24
    128e:	e5 5b       	subi	r30, 0xB5	; 181
    1290:	ff 4f       	sbci	r31, 0xFF	; 255
    1292:	20 81       	ld	r18, Z
    1294:	31 81       	ldd	r19, Z+1	; 0x01
    1296:	38 97       	sbiw	r30, 0x08	; 8
    1298:	80 81       	ld	r24, Z
    129a:	91 81       	ldd	r25, Z+1	; 0x01
    129c:	28 17       	cp	r18, r24
    129e:	39 07       	cpc	r19, r25
    12a0:	59 f0       	breq	.+22     	; 0x12b8 <ir_receive+0x2c2>
    12a2:	8f e4       	ldi	r24, 0x4F	; 79
    12a4:	8c 9f       	mul	r24, r28
    12a6:	f0 01       	movw	r30, r0
    12a8:	8d 9f       	mul	r24, r29
    12aa:	f0 0d       	add	r31, r0
    12ac:	11 24       	eor	r1, r1
    12ae:	e4 5c       	subi	r30, 0xC4	; 196
    12b0:	f5 4d       	sbci	r31, 0xD5	; 213
    12b2:	10 82       	st	Z, r1
    12b4:	11 82       	std	Z+1, r1	; 0x01
    12b6:	5b c0       	rjmp	.+182    	; 0x136e <ir_receive+0x378>
    12b8:	8f e4       	ldi	r24, 0x4F	; 79
    12ba:	8c 9f       	mul	r24, r28
    12bc:	f0 01       	movw	r30, r0
    12be:	8d 9f       	mul	r24, r29
    12c0:	f0 0d       	add	r31, r0
    12c2:	11 24       	eor	r1, r1
    12c4:	e6 5c       	subi	r30, 0xC6	; 198
    12c6:	f5 4d       	sbci	r31, 0xD5	; 213
    12c8:	80 81       	ld	r24, Z
    12ca:	91 81       	ldd	r25, Z+1	; 0x01
    12cc:	89 2b       	or	r24, r25
    12ce:	e1 f0       	breq	.+56     	; 0x1308 <ir_receive+0x312>
    12d0:	8f e4       	ldi	r24, 0x4F	; 79
    12d2:	8c 9f       	mul	r24, r28
    12d4:	f0 01       	movw	r30, r0
    12d6:	8d 9f       	mul	r24, r29
    12d8:	f0 0d       	add	r31, r0
    12da:	11 24       	eor	r1, r1
    12dc:	e6 5c       	subi	r30, 0xC6	; 198
    12de:	f5 4d       	sbci	r31, 0xD5	; 213
    12e0:	20 81       	ld	r18, Z
    12e2:	31 81       	ldd	r19, Z+1	; 0x01
    12e4:	80 91 86 27 	lds	r24, 0x2786
    12e8:	90 91 87 27 	lds	r25, 0x2787
    12ec:	28 17       	cp	r18, r24
    12ee:	39 07       	cpc	r19, r25
    12f0:	59 f0       	breq	.+22     	; 0x1308 <ir_receive+0x312>
    12f2:	8f e4       	ldi	r24, 0x4F	; 79
    12f4:	8c 9f       	mul	r24, r28
    12f6:	f0 01       	movw	r30, r0
    12f8:	8d 9f       	mul	r24, r29
    12fa:	f0 0d       	add	r31, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	e4 5c       	subi	r30, 0xC4	; 196
    1300:	f5 4d       	sbci	r31, 0xD5	; 213
    1302:	10 82       	st	Z, r1
    1304:	11 82       	std	Z+1, r1	; 0x01
    1306:	33 c0       	rjmp	.+102    	; 0x136e <ir_receive+0x378>
    1308:	8f e4       	ldi	r24, 0x4F	; 79
    130a:	8c 9f       	mul	r24, r28
    130c:	f0 01       	movw	r30, r0
    130e:	8d 9f       	mul	r24, r29
    1310:	f0 0d       	add	r31, r0
    1312:	11 24       	eor	r1, r1
    1314:	e8 5c       	subi	r30, 0xC8	; 200
    1316:	f5 4d       	sbci	r31, 0xD5	; 213
    1318:	20 81       	ld	r18, Z
    131a:	31 81       	ldd	r19, Z+1	; 0x01
    131c:	80 91 86 27 	lds	r24, 0x2786
    1320:	90 91 87 27 	lds	r25, 0x2787
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	59 f4       	brne	.+22     	; 0x1340 <ir_receive+0x34a>
    132a:	8f e4       	ldi	r24, 0x4F	; 79
    132c:	8c 9f       	mul	r24, r28
    132e:	f0 01       	movw	r30, r0
    1330:	8d 9f       	mul	r24, r29
    1332:	f0 0d       	add	r31, r0
    1334:	11 24       	eor	r1, r1
    1336:	e4 5c       	subi	r30, 0xC4	; 196
    1338:	f5 4d       	sbci	r31, 0xD5	; 213
    133a:	10 82       	st	Z, r1
    133c:	11 82       	std	Z+1, r1	; 0x01
    133e:	17 c0       	rjmp	.+46     	; 0x136e <ir_receive+0x378>
    1340:	8f e4       	ldi	r24, 0x4F	; 79
    1342:	8c 9f       	mul	r24, r28
    1344:	f0 01       	movw	r30, r0
    1346:	8d 9f       	mul	r24, r29
    1348:	f0 0d       	add	r31, r0
    134a:	11 24       	eor	r1, r1
    134c:	ef 5b       	subi	r30, 0xBF	; 191
    134e:	f5 4d       	sbci	r31, 0xD5	; 213
    1350:	80 81       	ld	r24, Z
    1352:	82 60       	ori	r24, 0x02	; 2
    1354:	80 83       	st	Z, r24
    1356:	80 81       	ld	r24, Z
    1358:	81 60       	ori	r24, 0x01	; 1
    135a:	80 83       	st	Z, r24
    135c:	cc 0f       	add	r28, r28
    135e:	dd 1f       	adc	r29, r29
    1360:	ca 5f       	subi	r28, 0xFA	; 250
    1362:	df 4d       	sbci	r29, 0xDF	; 223
    1364:	e8 81       	ld	r30, Y
    1366:	f9 81       	ldd	r31, Y+1	; 0x01
    1368:	84 81       	ldd	r24, Z+4	; 0x04
    136a:	8f 7e       	andi	r24, 0xEF	; 239
    136c:	84 83       	std	Z+4, r24	; 0x04
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	ff 90       	pop	r15
    1378:	df 90       	pop	r13
    137a:	cf 90       	pop	r12
    137c:	bf 90       	pop	r11
    137e:	af 90       	pop	r10
    1380:	08 95       	ret

00001382 <ir_transmit>:
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	9f e4       	ldi	r25, 0x4F	; 79
    1388:	89 9f       	mul	r24, r25
    138a:	f0 01       	movw	r30, r0
    138c:	11 24       	eor	r1, r1
    138e:	e4 5c       	subi	r30, 0xC4	; 196
    1390:	f5 4d       	sbci	r31, 0xD5	; 213
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	87 30       	cpi	r24, 0x07	; 7
    1398:	91 05       	cpc	r25, r1
    139a:	08 f0       	brcs	.+2      	; 0x139e <ir_transmit+0x1c>
    139c:	6b c0       	rjmp	.+214    	; 0x1474 <ir_transmit+0xf2>
    139e:	fc 01       	movw	r30, r24
    13a0:	e4 5f       	subi	r30, 0xF4	; 244
    13a2:	fe 4f       	sbci	r31, 0xFE	; 254
    13a4:	0c 94 87 35 	jmp	0x6b0e	; 0x6b0e <__tablejump2__>
    13a8:	4f e4       	ldi	r20, 0x4F	; 79
    13aa:	42 9f       	mul	r20, r18
    13ac:	c0 01       	movw	r24, r0
    13ae:	43 9f       	mul	r20, r19
    13b0:	90 0d       	add	r25, r0
    13b2:	11 24       	eor	r1, r1
    13b4:	8d 50       	subi	r24, 0x0D	; 13
    13b6:	96 4d       	sbci	r25, 0xD6	; 214
    13b8:	fc 01       	movw	r30, r24
    13ba:	e3 5b       	subi	r30, 0xB3	; 179
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	40 81       	ld	r20, Z
    13c0:	40 93 06 2c 	sts	0x2C06, r20
    13c4:	31 96       	adiw	r30, 0x01	; 1
    13c6:	80 81       	ld	r24, Z
    13c8:	83 ff       	sbrs	r24, 3
    13ca:	69 c0       	rjmp	.+210    	; 0x149e <ir_transmit+0x11c>
    13cc:	80 91 06 2c 	lds	r24, 0x2C06
    13d0:	80 68       	ori	r24, 0x80	; 128
    13d2:	80 93 06 2c 	sts	0x2C06, r24
    13d6:	63 c0       	rjmp	.+198    	; 0x149e <ir_transmit+0x11c>
    13d8:	8f e4       	ldi	r24, 0x4F	; 79
    13da:	82 9f       	mul	r24, r18
    13dc:	f0 01       	movw	r30, r0
    13de:	83 9f       	mul	r24, r19
    13e0:	f0 0d       	add	r31, r0
    13e2:	11 24       	eor	r1, r1
    13e4:	ea 5c       	subi	r30, 0xCA	; 202
    13e6:	f5 4d       	sbci	r31, 0xD5	; 213
    13e8:	80 81       	ld	r24, Z
    13ea:	91 81       	ldd	r25, Z+1	; 0x01
    13ec:	80 93 06 2c 	sts	0x2C06, r24
    13f0:	56 c0       	rjmp	.+172    	; 0x149e <ir_transmit+0x11c>
    13f2:	8f e4       	ldi	r24, 0x4F	; 79
    13f4:	82 9f       	mul	r24, r18
    13f6:	f0 01       	movw	r30, r0
    13f8:	83 9f       	mul	r24, r19
    13fa:	f0 0d       	add	r31, r0
    13fc:	11 24       	eor	r1, r1
    13fe:	ea 5c       	subi	r30, 0xCA	; 202
    1400:	f5 4d       	sbci	r31, 0xD5	; 213
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	90 93 06 2c 	sts	0x2C06, r25
    140a:	49 c0       	rjmp	.+146    	; 0x149e <ir_transmit+0x11c>
    140c:	8f e4       	ldi	r24, 0x4F	; 79
    140e:	82 9f       	mul	r24, r18
    1410:	f0 01       	movw	r30, r0
    1412:	83 9f       	mul	r24, r19
    1414:	f0 0d       	add	r31, r0
    1416:	11 24       	eor	r1, r1
    1418:	e8 5c       	subi	r30, 0xC8	; 200
    141a:	f5 4d       	sbci	r31, 0xD5	; 213
    141c:	80 81       	ld	r24, Z
    141e:	91 81       	ldd	r25, Z+1	; 0x01
    1420:	80 93 06 2c 	sts	0x2C06, r24
    1424:	3c c0       	rjmp	.+120    	; 0x149e <ir_transmit+0x11c>
    1426:	8f e4       	ldi	r24, 0x4F	; 79
    1428:	82 9f       	mul	r24, r18
    142a:	f0 01       	movw	r30, r0
    142c:	83 9f       	mul	r24, r19
    142e:	f0 0d       	add	r31, r0
    1430:	11 24       	eor	r1, r1
    1432:	e8 5c       	subi	r30, 0xC8	; 200
    1434:	f5 4d       	sbci	r31, 0xD5	; 213
    1436:	80 81       	ld	r24, Z
    1438:	91 81       	ldd	r25, Z+1	; 0x01
    143a:	90 93 06 2c 	sts	0x2C06, r25
    143e:	2f c0       	rjmp	.+94     	; 0x149e <ir_transmit+0x11c>
    1440:	8f e4       	ldi	r24, 0x4F	; 79
    1442:	82 9f       	mul	r24, r18
    1444:	f0 01       	movw	r30, r0
    1446:	83 9f       	mul	r24, r19
    1448:	f0 0d       	add	r31, r0
    144a:	11 24       	eor	r1, r1
    144c:	e6 5c       	subi	r30, 0xC6	; 198
    144e:	f5 4d       	sbci	r31, 0xD5	; 213
    1450:	80 81       	ld	r24, Z
    1452:	91 81       	ldd	r25, Z+1	; 0x01
    1454:	80 93 06 2c 	sts	0x2C06, r24
    1458:	22 c0       	rjmp	.+68     	; 0x149e <ir_transmit+0x11c>
    145a:	8f e4       	ldi	r24, 0x4F	; 79
    145c:	82 9f       	mul	r24, r18
    145e:	f0 01       	movw	r30, r0
    1460:	83 9f       	mul	r24, r19
    1462:	f0 0d       	add	r31, r0
    1464:	11 24       	eor	r1, r1
    1466:	e6 5c       	subi	r30, 0xC6	; 198
    1468:	f5 4d       	sbci	r31, 0xD5	; 213
    146a:	80 81       	ld	r24, Z
    146c:	91 81       	ldd	r25, Z+1	; 0x01
    146e:	90 93 06 2c 	sts	0x2C06, r25
    1472:	15 c0       	rjmp	.+42     	; 0x149e <ir_transmit+0x11c>
    1474:	4f e4       	ldi	r20, 0x4F	; 79
    1476:	42 9f       	mul	r20, r18
    1478:	c0 01       	movw	r24, r0
    147a:	43 9f       	mul	r20, r19
    147c:	90 0d       	add	r25, r0
    147e:	11 24       	eor	r1, r1
    1480:	8d 50       	subi	r24, 0x0D	; 13
    1482:	96 4d       	sbci	r25, 0xD6	; 214
    1484:	fc 01       	movw	r30, r24
    1486:	e7 5b       	subi	r30, 0xB7	; 183
    1488:	ff 4f       	sbci	r31, 0xFF	; 255
    148a:	40 81       	ld	r20, Z
    148c:	51 81       	ldd	r21, Z+1	; 0x01
    148e:	47 50       	subi	r20, 0x07	; 7
    1490:	51 09       	sbc	r21, r1
    1492:	fc 01       	movw	r30, r24
    1494:	e4 0f       	add	r30, r20
    1496:	f5 1f       	adc	r31, r21
    1498:	84 81       	ldd	r24, Z+4	; 0x04
    149a:	80 93 06 2c 	sts	0x2C06, r24
    149e:	f9 01       	movw	r30, r18
    14a0:	ee 0f       	add	r30, r30
    14a2:	ff 1f       	adc	r31, r31
    14a4:	ea 5f       	subi	r30, 0xFA	; 250
    14a6:	ff 4d       	sbci	r31, 0xDF	; 223
    14a8:	01 90       	ld	r0, Z+
    14aa:	f0 81       	ld	r31, Z
    14ac:	e0 2d       	mov	r30, r0
    14ae:	80 91 06 2c 	lds	r24, 0x2C06
    14b2:	80 83       	st	Z, r24
    14b4:	4f e4       	ldi	r20, 0x4F	; 79
    14b6:	42 9f       	mul	r20, r18
    14b8:	c0 01       	movw	r24, r0
    14ba:	43 9f       	mul	r20, r19
    14bc:	90 0d       	add	r25, r0
    14be:	11 24       	eor	r1, r1
    14c0:	8d 50       	subi	r24, 0x0D	; 13
    14c2:	96 4d       	sbci	r25, 0xD6	; 214
    14c4:	fc 01       	movw	r30, r24
    14c6:	e7 5b       	subi	r30, 0xB7	; 183
    14c8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ca:	40 81       	ld	r20, Z
    14cc:	51 81       	ldd	r21, Z+1	; 0x01
    14ce:	4f 5f       	subi	r20, 0xFF	; 255
    14d0:	5f 4f       	sbci	r21, 0xFF	; 255
    14d2:	40 83       	st	Z, r20
    14d4:	51 83       	std	Z+1, r21	; 0x01
    14d6:	40 81       	ld	r20, Z
    14d8:	51 81       	ldd	r21, Z+1	; 0x01
    14da:	34 96       	adiw	r30, 0x04	; 4
    14dc:	80 81       	ld	r24, Z
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	07 96       	adiw	r24, 0x07	; 7
    14e2:	48 17       	cp	r20, r24
    14e4:	59 07       	cpc	r21, r25
    14e6:	50 f1       	brcs	.+84     	; 0x153c <ir_transmit+0x1ba>
    14e8:	4f e4       	ldi	r20, 0x4F	; 79
    14ea:	42 9f       	mul	r20, r18
    14ec:	c0 01       	movw	r24, r0
    14ee:	43 9f       	mul	r20, r19
    14f0:	90 0d       	add	r25, r0
    14f2:	11 24       	eor	r1, r1
    14f4:	8d 50       	subi	r24, 0x0D	; 13
    14f6:	96 4d       	sbci	r25, 0xD6	; 214
    14f8:	fc 01       	movw	r30, r24
    14fa:	e2 5b       	subi	r30, 0xB2	; 178
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	10 82       	st	Z, r1
    1500:	31 97       	sbiw	r30, 0x01	; 1
    1502:	10 82       	st	Z, r1
    1504:	34 97       	sbiw	r30, 0x04	; 4
    1506:	10 82       	st	Z, r1
    1508:	11 82       	std	Z+1, r1	; 0x01
    150a:	32 97       	sbiw	r30, 0x02	; 2
    150c:	10 82       	st	Z, r1
    150e:	11 82       	std	Z+1, r1	; 0x01
    1510:	32 97       	sbiw	r30, 0x02	; 2
    1512:	10 82       	st	Z, r1
    1514:	11 82       	std	Z+1, r1	; 0x01
    1516:	f9 01       	movw	r30, r18
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	ea 5f       	subi	r30, 0xFA	; 250
    151e:	ff 4d       	sbci	r31, 0xDF	; 223
    1520:	a0 81       	ld	r26, Z
    1522:	b1 81       	ldd	r27, Z+1	; 0x01
    1524:	14 96       	adiw	r26, 0x04	; 4
    1526:	8c 91       	ld	r24, X
    1528:	14 97       	sbiw	r26, 0x04	; 4
    152a:	80 61       	ori	r24, 0x10	; 16
    152c:	14 96       	adiw	r26, 0x04	; 4
    152e:	8c 93       	st	X, r24
    1530:	01 90       	ld	r0, Z+
    1532:	f0 81       	ld	r31, Z
    1534:	e0 2d       	mov	r30, r0
    1536:	83 81       	ldd	r24, Z+3	; 0x03
    1538:	8c 7f       	andi	r24, 0xFC	; 252
    153a:	83 83       	std	Z+3, r24	; 0x03
    153c:	08 95       	ret

0000153e <ir_transmit_complete>:
    153e:	e0 e0       	ldi	r30, 0x00	; 0
    1540:	fb e0       	ldi	r31, 0x0B	; 11
    1542:	31 81       	ldd	r19, Z+1	; 0x01
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	dc 01       	movw	r26, r24
    1548:	a0 50       	subi	r26, 0x00	; 0
    154a:	b0 4e       	sbci	r27, 0xE0	; 224
    154c:	2c 91       	ld	r18, X
    154e:	20 95       	com	r18
    1550:	23 23       	and	r18, r19
    1552:	21 83       	std	Z+1, r18	; 0x01
    1554:	4f e4       	ldi	r20, 0x4F	; 79
    1556:	48 9f       	mul	r20, r24
    1558:	90 01       	movw	r18, r0
    155a:	49 9f       	mul	r20, r25
    155c:	30 0d       	add	r19, r0
    155e:	11 24       	eor	r1, r1
    1560:	2d 50       	subi	r18, 0x0D	; 13
    1562:	36 4d       	sbci	r19, 0xD6	; 214
    1564:	f9 01       	movw	r30, r18
    1566:	e2 5b       	subi	r30, 0xB2	; 178
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	10 82       	st	Z, r1
    156c:	31 97       	sbiw	r30, 0x01	; 1
    156e:	10 82       	st	Z, r1
    1570:	34 97       	sbiw	r30, 0x04	; 4
    1572:	10 82       	st	Z, r1
    1574:	11 82       	std	Z+1, r1	; 0x01
    1576:	32 97       	sbiw	r30, 0x02	; 2
    1578:	10 82       	st	Z, r1
    157a:	11 82       	std	Z+1, r1	; 0x01
    157c:	32 97       	sbiw	r30, 0x02	; 2
    157e:	10 82       	st	Z, r1
    1580:	11 82       	std	Z+1, r1	; 0x01
    1582:	fc 01       	movw	r30, r24
    1584:	ee 0f       	add	r30, r30
    1586:	ff 1f       	adc	r31, r31
    1588:	ea 5f       	subi	r30, 0xFA	; 250
    158a:	ff 4d       	sbci	r31, 0xDF	; 223
    158c:	a0 81       	ld	r26, Z
    158e:	b1 81       	ldd	r27, Z+1	; 0x01
    1590:	11 96       	adiw	r26, 0x01	; 1
    1592:	8c 91       	ld	r24, X
    1594:	11 97       	sbiw	r26, 0x01	; 1
    1596:	80 64       	ori	r24, 0x40	; 64
    1598:	11 96       	adiw	r26, 0x01	; 1
    159a:	8c 93       	st	X, r24
    159c:	01 90       	ld	r0, Z+
    159e:	f0 81       	ld	r31, Z
    15a0:	e0 2d       	mov	r30, r0
    15a2:	84 81       	ldd	r24, Z+4	; 0x04
    15a4:	80 61       	ori	r24, 0x10	; 16
    15a6:	84 83       	std	Z+4, r24	; 0x04
    15a8:	08 95       	ret

000015aa <wait_for_ir>:
{
	uint8_t busy;
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
    15aa:	60 e0       	ldi	r22, 0x00	; 0
		{
			if(dirs&(1<<dir))
    15ac:	48 2f       	mov	r20, r24
    15ae:	50 e0       	ldi	r21, 0x00	; 0
			{
				if(ir_rxtx[dir].status & IR_STATUS_UNAVAILABLE_bm)
    15b0:	7f e4       	ldi	r23, 0x4F	; 79
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
		{
			if(dirs&(1<<dir))
    15b2:	26 2f       	mov	r18, r22
    15b4:	30 e0       	ldi	r19, 0x00	; 0
    15b6:	ca 01       	movw	r24, r20
    15b8:	06 2e       	mov	r0, r22
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <wait_for_ir+0x16>
    15bc:	95 95       	asr	r25
    15be:	87 95       	ror	r24
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <wait_for_ir+0x12>
    15c4:	80 ff       	sbrs	r24, 0
    15c6:	0a c0       	rjmp	.+20     	; 0x15dc <wait_for_ir+0x32>
			{
				if(ir_rxtx[dir].status & IR_STATUS_UNAVAILABLE_bm)
    15c8:	72 9f       	mul	r23, r18
    15ca:	f0 01       	movw	r30, r0
    15cc:	73 9f       	mul	r23, r19
    15ce:	f0 0d       	add	r31, r0
    15d0:	11 24       	eor	r1, r1
    15d2:	ef 5b       	subi	r30, 0xBF	; 191
    15d4:	f5 4d       	sbci	r31, 0xD5	; 213
    15d6:	80 81       	ld	r24, Z
    15d8:	83 70       	andi	r24, 0x03	; 3
    15da:	21 f4       	brne	.+8      	; 0x15e4 <wait_for_ir+0x3a>
{
	uint8_t busy;
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
    15dc:	6f 5f       	subi	r22, 0xFF	; 255
    15de:	66 30       	cpi	r22, 0x06	; 6
    15e0:	40 f3       	brcs	.-48     	; 0x15b2 <wait_for_ir+0x8>
    15e2:	08 95       	ret
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	e5 cf       	rjmp	.-54     	; 0x15b2 <wait_for_ir+0x8>

000015e8 <ir_targeted_cmd>:
		//else if(busy_channel) delay_ms(rand_byte()%10);
	//}
//}

void ir_targeted_cmd(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    15e8:	2f 92       	push	r2
    15ea:	3f 92       	push	r3
    15ec:	4f 92       	push	r4
    15ee:	5f 92       	push	r5
    15f0:	6f 92       	push	r6
    15f2:	7f 92       	push	r7
    15f4:	8f 92       	push	r8
    15f6:	9f 92       	push	r9
    15f8:	af 92       	push	r10
    15fa:	bf 92       	push	r11
    15fc:	cf 92       	push	r12
    15fe:	df 92       	push	r13
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	58 2e       	mov	r5, r24
    160e:	4b 01       	movw	r8, r22
    1610:	39 01       	movw	r6, r18
	all_ir_sends(dirs, data, data_length, target, 1);
    1612:	24 2e       	mov	r2, r20
	/* The whole transmission will now occur in interrupts. */
}

inline void all_ir_sends(uint8_t dirs, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	while(dirs)
    1614:	88 23       	and	r24, r24
    1616:	09 f4       	brne	.+2      	; 0x161a <ir_targeted_cmd+0x32>
    1618:	82 c0       	rjmp	.+260    	; 0x171e <ir_targeted_cmd+0x136>
    161a:	0f 2e       	mov	r0, r31
    161c:	f6 e0       	ldi	r31, 0x06	; 6
    161e:	ef 2e       	mov	r14, r31
    1620:	f0 e2       	ldi	r31, 0x20	; 32
    1622:	ff 2e       	mov	r15, r31
    1624:	f0 2d       	mov	r31, r0
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
		{
			if(dirs & (1<<dir))
			{
				if(!((ir_rxtx[dir].status & IR_STATUS_BUSY_bm) || (get_time() - ir_rxtx[dir].last_byte < IR_MSG_TIMEOUT)))
    1626:	0f 2e       	mov	r0, r31
    1628:	ff e4       	ldi	r31, 0x4F	; 79
    162a:	4f 2e       	mov	r4, r31
    162c:	f0 2d       	mov	r31, r0
				{
					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receive messages on this channel while transmitting.
					ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
					if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
					ir_rxtx[dir].target_ID=target;
					send_msg(1<<dir, data, data_length);
    162e:	aa 24       	eor	r10, r10
    1630:	a3 94       	inc	r10
    1632:	b1 2c       	mov	r11, r1
					wait_for_ir(1<<dir);
					dirs&=(~(1<<dir));
				}
			}
		}
		if(dirs) delay_ms(rand_byte()%10);
    1634:	0f 2e       	mov	r0, r31
    1636:	fd ec       	ldi	r31, 0xCD	; 205
    1638:	3f 2e       	mov	r3, r31
    163a:	f0 2d       	mov	r31, r0
    163c:	6c c0       	rjmp	.+216    	; 0x1716 <ir_targeted_cmd+0x12e>
{
	while(dirs)
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
		{
			if(dirs & (1<<dir))
    163e:	85 2d       	mov	r24, r5
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	0c 2e       	mov	r0, r28
    1644:	02 c0       	rjmp	.+4      	; 0x164a <ir_targeted_cmd+0x62>
    1646:	95 95       	asr	r25
    1648:	87 95       	ror	r24
    164a:	0a 94       	dec	r0
    164c:	e2 f7       	brpl	.-8      	; 0x1646 <ir_targeted_cmd+0x5e>
    164e:	80 ff       	sbrs	r24, 0
    1650:	48 c0       	rjmp	.+144    	; 0x16e2 <ir_targeted_cmd+0xfa>
			{
				if(!((ir_rxtx[dir].status & IR_STATUS_BUSY_bm) || (get_time() - ir_rxtx[dir].last_byte < IR_MSG_TIMEOUT)))
    1652:	4c 9e       	mul	r4, r28
    1654:	f0 01       	movw	r30, r0
    1656:	4d 9e       	mul	r4, r29
    1658:	f0 0d       	add	r31, r0
    165a:	11 24       	eor	r1, r1
    165c:	ef 5b       	subi	r30, 0xBF	; 191
    165e:	f5 4d       	sbci	r31, 0xD5	; 213
    1660:	80 81       	ld	r24, Z
    1662:	80 fd       	sbrc	r24, 0
    1664:	3e c0       	rjmp	.+124    	; 0x16e2 <ir_targeted_cmd+0xfa>
    1666:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    166a:	4c 9e       	mul	r4, r28
    166c:	f0 01       	movw	r30, r0
    166e:	4d 9e       	mul	r4, r29
    1670:	f0 0d       	add	r31, r0
    1672:	11 24       	eor	r1, r1
    1674:	ed 50       	subi	r30, 0x0D	; 13
    1676:	f6 4d       	sbci	r31, 0xD6	; 214
    1678:	20 81       	ld	r18, Z
    167a:	31 81       	ldd	r19, Z+1	; 0x01
    167c:	42 81       	ldd	r20, Z+2	; 0x02
    167e:	53 81       	ldd	r21, Z+3	; 0x03
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	82 1b       	sub	r24, r18
    1686:	93 0b       	sbc	r25, r19
    1688:	a4 0b       	sbc	r26, r20
    168a:	b5 0b       	sbc	r27, r21
    168c:	0a 97       	sbiw	r24, 0x0a	; 10
    168e:	a1 05       	cpc	r26, r1
    1690:	b1 05       	cpc	r27, r1
    1692:	38 f1       	brcs	.+78     	; 0x16e2 <ir_targeted_cmd+0xfa>
				{
					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receive messages on this channel while transmitting.
    1694:	d8 01       	movw	r26, r16
    1696:	ed 91       	ld	r30, X+
    1698:	fc 91       	ld	r31, X
    169a:	84 81       	ldd	r24, Z+4	; 0x04
    169c:	8f 7e       	andi	r24, 0xEF	; 239
    169e:	84 83       	std	Z+4, r24	; 0x04
					ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    16a0:	4c 9e       	mul	r4, r28
    16a2:	c0 01       	movw	r24, r0
    16a4:	4d 9e       	mul	r4, r29
    16a6:	90 0d       	add	r25, r0
    16a8:	11 24       	eor	r1, r1
    16aa:	8d 50       	subi	r24, 0x0D	; 13
    16ac:	96 4d       	sbci	r25, 0xD6	; 214
    16ae:	fc 01       	movw	r30, r24
    16b0:	e2 5b       	subi	r30, 0xB2	; 178
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	b1 e0       	ldi	r27, 0x01	; 1
    16b6:	b0 83       	st	Z, r27
					if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    16b8:	20 81       	ld	r18, Z
    16ba:	28 60       	ori	r18, 0x08	; 8
    16bc:	20 83       	st	Z, r18
					ir_rxtx[dir].target_ID=target;
    16be:	37 97       	sbiw	r30, 0x07	; 7
    16c0:	60 82       	st	Z, r6
    16c2:	71 82       	std	Z+1, r7	; 0x01
					send_msg(1<<dir, data, data_length);
    16c4:	c5 01       	movw	r24, r10
    16c6:	0c 2e       	mov	r0, r28
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <ir_targeted_cmd+0xe6>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <ir_targeted_cmd+0xe2>
    16d2:	6c 01       	movw	r12, r24
    16d4:	42 2d       	mov	r20, r2
    16d6:	b4 01       	movw	r22, r8
    16d8:	95 db       	rcall	.-2262   	; 0xe04 <send_msg>
					wait_for_ir(1<<dir);
    16da:	8c 2d       	mov	r24, r12
    16dc:	66 df       	rcall	.-308    	; 0x15aa <wait_for_ir>
					dirs&=(~(1<<dir));
    16de:	c0 94       	com	r12
    16e0:	5c 20       	and	r5, r12
    16e2:	21 96       	adiw	r28, 0x01	; 1
    16e4:	0e 5f       	subi	r16, 0xFE	; 254
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255

inline void all_ir_sends(uint8_t dirs, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	while(dirs)
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
    16e8:	c6 30       	cpi	r28, 0x06	; 6
    16ea:	d1 05       	cpc	r29, r1
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <ir_targeted_cmd+0x108>
    16ee:	a7 cf       	rjmp	.-178    	; 0x163e <ir_targeted_cmd+0x56>
					wait_for_ir(1<<dir);
					dirs&=(~(1<<dir));
				}
			}
		}
		if(dirs) delay_ms(rand_byte()%10);
    16f0:	55 20       	and	r5, r5
    16f2:	a9 f0       	breq	.+42     	; 0x171e <ir_targeted_cmd+0x136>
    16f4:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <rand_byte>
    16f8:	83 9d       	mul	r24, r3
    16fa:	91 2d       	mov	r25, r1
    16fc:	11 24       	eor	r1, r1
    16fe:	96 95       	lsr	r25
    1700:	96 95       	lsr	r25
    1702:	96 95       	lsr	r25
    1704:	99 0f       	add	r25, r25
    1706:	29 2f       	mov	r18, r25
    1708:	22 0f       	add	r18, r18
    170a:	22 0f       	add	r18, r18
    170c:	92 0f       	add	r25, r18
    170e:	89 1b       	sub	r24, r25
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    1716:	87 01       	movw	r16, r14
		//else if(busy_channel) delay_ms(rand_byte()%10);
	//}
//}

void ir_targeted_cmd(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    1718:	c0 e0       	ldi	r28, 0x00	; 0
    171a:	d0 e0       	ldi	r29, 0x00	; 0
    171c:	90 cf       	rjmp	.-224    	; 0x163e <ir_targeted_cmd+0x56>
	all_ir_sends(dirs, data, data_length, target, 1);
}
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	5f 90       	pop	r5
    173c:	4f 90       	pop	r4
    173e:	3f 90       	pop	r3
    1740:	2f 90       	pop	r2
    1742:	08 95       	ret

00001744 <ir_cmd>:

void ir_cmd(uint8_t dirs, char *data, uint16_t data_length)
{	
    1744:	3f 92       	push	r3
    1746:	4f 92       	push	r4
    1748:	5f 92       	push	r5
    174a:	6f 92       	push	r6
    174c:	7f 92       	push	r7
    174e:	8f 92       	push	r8
    1750:	9f 92       	push	r9
    1752:	af 92       	push	r10
    1754:	bf 92       	push	r11
    1756:	cf 92       	push	r12
    1758:	df 92       	push	r13
    175a:	ef 92       	push	r14
    175c:	ff 92       	push	r15
    175e:	0f 93       	push	r16
    1760:	1f 93       	push	r17
    1762:	cf 93       	push	r28
    1764:	df 93       	push	r29
    1766:	78 2e       	mov	r7, r24
    1768:	6b 01       	movw	r12, r22
    176a:	44 2e       	mov	r4, r20
	/* The whole transmission will now occur in interrupts. */
}

inline void all_ir_sends(uint8_t dirs, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	while(dirs)
    176c:	88 23       	and	r24, r24
    176e:	09 f4       	brne	.+2      	; 0x1772 <ir_cmd+0x2e>
    1770:	80 c0       	rjmp	.+256    	; 0x1872 <ir_cmd+0x12e>
    1772:	06 e0       	ldi	r16, 0x06	; 6
    1774:	10 e2       	ldi	r17, 0x20	; 32
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
		{
			if(dirs & (1<<dir))
			{
				if(!((ir_rxtx[dir].status & IR_STATUS_BUSY_bm) || (get_time() - ir_rxtx[dir].last_byte < IR_MSG_TIMEOUT)))
    1776:	0f 2e       	mov	r0, r31
    1778:	ff e4       	ldi	r31, 0x4F	; 79
    177a:	6f 2e       	mov	r6, r31
    177c:	f0 2d       	mov	r31, r0
				{
					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receive messages on this channel while transmitting.
					ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    177e:	33 24       	eor	r3, r3
    1780:	33 94       	inc	r3
					if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
					ir_rxtx[dir].target_ID=target;
					send_msg(1<<dir, data, data_length);
    1782:	aa 24       	eor	r10, r10
    1784:	a3 94       	inc	r10
    1786:	b1 2c       	mov	r11, r1
					wait_for_ir(1<<dir);
					dirs&=(~(1<<dir));
				}
			}
		}
		if(dirs) delay_ms(rand_byte()%10);
    1788:	0f 2e       	mov	r0, r31
    178a:	fd ec       	ldi	r31, 0xCD	; 205
    178c:	5f 2e       	mov	r5, r31
    178e:	f0 2d       	mov	r31, r0
    1790:	6c c0       	rjmp	.+216    	; 0x186a <ir_cmd+0x126>
{
	while(dirs)
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
		{
			if(dirs & (1<<dir))
    1792:	87 2d       	mov	r24, r7
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0c 2e       	mov	r0, r28
    1798:	02 c0       	rjmp	.+4      	; 0x179e <ir_cmd+0x5a>
    179a:	95 95       	asr	r25
    179c:	87 95       	ror	r24
    179e:	0a 94       	dec	r0
    17a0:	e2 f7       	brpl	.-8      	; 0x179a <ir_cmd+0x56>
    17a2:	80 ff       	sbrs	r24, 0
    17a4:	47 c0       	rjmp	.+142    	; 0x1834 <ir_cmd+0xf0>
			{
				if(!((ir_rxtx[dir].status & IR_STATUS_BUSY_bm) || (get_time() - ir_rxtx[dir].last_byte < IR_MSG_TIMEOUT)))
    17a6:	6c 9e       	mul	r6, r28
    17a8:	f0 01       	movw	r30, r0
    17aa:	6d 9e       	mul	r6, r29
    17ac:	f0 0d       	add	r31, r0
    17ae:	11 24       	eor	r1, r1
    17b0:	ef 5b       	subi	r30, 0xBF	; 191
    17b2:	f5 4d       	sbci	r31, 0xD5	; 213
    17b4:	80 81       	ld	r24, Z
    17b6:	80 fd       	sbrc	r24, 0
    17b8:	3d c0       	rjmp	.+122    	; 0x1834 <ir_cmd+0xf0>
    17ba:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    17be:	6c 9e       	mul	r6, r28
    17c0:	f0 01       	movw	r30, r0
    17c2:	6d 9e       	mul	r6, r29
    17c4:	f0 0d       	add	r31, r0
    17c6:	11 24       	eor	r1, r1
    17c8:	ed 50       	subi	r30, 0x0D	; 13
    17ca:	f6 4d       	sbci	r31, 0xD6	; 214
    17cc:	20 81       	ld	r18, Z
    17ce:	31 81       	ldd	r19, Z+1	; 0x01
    17d0:	42 81       	ldd	r20, Z+2	; 0x02
    17d2:	53 81       	ldd	r21, Z+3	; 0x03
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	82 1b       	sub	r24, r18
    17da:	93 0b       	sbc	r25, r19
    17dc:	a4 0b       	sbc	r26, r20
    17de:	b5 0b       	sbc	r27, r21
    17e0:	0a 97       	sbiw	r24, 0x0a	; 10
    17e2:	a1 05       	cpc	r26, r1
    17e4:	b1 05       	cpc	r27, r1
    17e6:	30 f1       	brcs	.+76     	; 0x1834 <ir_cmd+0xf0>
				{
					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receive messages on this channel while transmitting.
    17e8:	d4 01       	movw	r26, r8
    17ea:	ed 91       	ld	r30, X+
    17ec:	fc 91       	ld	r31, X
    17ee:	84 81       	ldd	r24, Z+4	; 0x04
    17f0:	8f 7e       	andi	r24, 0xEF	; 239
    17f2:	84 83       	std	Z+4, r24	; 0x04
					ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    17f4:	6c 9e       	mul	r6, r28
    17f6:	c0 01       	movw	r24, r0
    17f8:	6d 9e       	mul	r6, r29
    17fa:	90 0d       	add	r25, r0
    17fc:	11 24       	eor	r1, r1
    17fe:	8d 50       	subi	r24, 0x0D	; 13
    1800:	96 4d       	sbci	r25, 0xD6	; 214
    1802:	fc 01       	movw	r30, r24
    1804:	e2 5b       	subi	r30, 0xB2	; 178
    1806:	ff 4f       	sbci	r31, 0xFF	; 255
    1808:	30 82       	st	Z, r3
					if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    180a:	20 81       	ld	r18, Z
    180c:	28 60       	ori	r18, 0x08	; 8
    180e:	20 83       	st	Z, r18
					ir_rxtx[dir].target_ID=target;
    1810:	37 97       	sbiw	r30, 0x07	; 7
    1812:	10 82       	st	Z, r1
    1814:	11 82       	std	Z+1, r1	; 0x01
					send_msg(1<<dir, data, data_length);
    1816:	c5 01       	movw	r24, r10
    1818:	0c 2e       	mov	r0, r28
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <ir_cmd+0xdc>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <ir_cmd+0xd8>
    1824:	7c 01       	movw	r14, r24
    1826:	44 2d       	mov	r20, r4
    1828:	b6 01       	movw	r22, r12
    182a:	ec da       	rcall	.-2600   	; 0xe04 <send_msg>
					wait_for_ir(1<<dir);
    182c:	8e 2d       	mov	r24, r14
    182e:	bd de       	rcall	.-646    	; 0x15aa <wait_for_ir>
					dirs&=(~(1<<dir));
    1830:	e0 94       	com	r14
    1832:	7e 20       	and	r7, r14
    1834:	21 96       	adiw	r28, 0x01	; 1
    1836:	92 e0       	ldi	r25, 0x02	; 2
    1838:	89 0e       	add	r8, r25
    183a:	91 1c       	adc	r9, r1

inline void all_ir_sends(uint8_t dirs, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	while(dirs)
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
    183c:	c6 30       	cpi	r28, 0x06	; 6
    183e:	d1 05       	cpc	r29, r1
    1840:	09 f0       	breq	.+2      	; 0x1844 <ir_cmd+0x100>
    1842:	a7 cf       	rjmp	.-178    	; 0x1792 <ir_cmd+0x4e>
					wait_for_ir(1<<dir);
					dirs&=(~(1<<dir));
				}
			}
		}
		if(dirs) delay_ms(rand_byte()%10);
    1844:	77 20       	and	r7, r7
    1846:	a9 f0       	breq	.+42     	; 0x1872 <ir_cmd+0x12e>
    1848:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <rand_byte>
    184c:	85 9d       	mul	r24, r5
    184e:	91 2d       	mov	r25, r1
    1850:	11 24       	eor	r1, r1
    1852:	96 95       	lsr	r25
    1854:	96 95       	lsr	r25
    1856:	96 95       	lsr	r25
    1858:	99 0f       	add	r25, r25
    185a:	29 2f       	mov	r18, r25
    185c:	22 0f       	add	r18, r18
    185e:	22 0f       	add	r18, r18
    1860:	92 0f       	add	r25, r18
    1862:	89 1b       	sub	r24, r25
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    186a:	48 01       	movw	r8, r16
{
	all_ir_sends(dirs, data, data_length, target, 1);
}

void ir_cmd(uint8_t dirs, char *data, uint16_t data_length)
{	
    186c:	c0 e0       	ldi	r28, 0x00	; 0
    186e:	d0 e0       	ldi	r29, 0x00	; 0
    1870:	90 cf       	rjmp	.-224    	; 0x1792 <ir_cmd+0x4e>
	all_ir_sends(dirs, data, data_length, 0, 1);
}
    1872:	df 91       	pop	r29
    1874:	cf 91       	pop	r28
    1876:	1f 91       	pop	r17
    1878:	0f 91       	pop	r16
    187a:	ff 90       	pop	r15
    187c:	ef 90       	pop	r14
    187e:	df 90       	pop	r13
    1880:	cf 90       	pop	r12
    1882:	bf 90       	pop	r11
    1884:	af 90       	pop	r10
    1886:	9f 90       	pop	r9
    1888:	8f 90       	pop	r8
    188a:	7f 90       	pop	r7
    188c:	6f 90       	pop	r6
    188e:	5f 90       	pop	r5
    1890:	4f 90       	pop	r4
    1892:	3f 90       	pop	r3
    1894:	08 95       	ret

00001896 <ir_targeted_send>:

void ir_targeted_send(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    1896:	2f 92       	push	r2
    1898:	3f 92       	push	r3
    189a:	4f 92       	push	r4
    189c:	5f 92       	push	r5
    189e:	6f 92       	push	r6
    18a0:	7f 92       	push	r7
    18a2:	8f 92       	push	r8
    18a4:	9f 92       	push	r9
    18a6:	af 92       	push	r10
    18a8:	bf 92       	push	r11
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	58 2e       	mov	r5, r24
    18bc:	4b 01       	movw	r8, r22
    18be:	39 01       	movw	r6, r18
	all_ir_sends(dirs, data, data_length, target, 0);
    18c0:	24 2e       	mov	r2, r20
	/* The whole transmission will now occur in interrupts. */
}

inline void all_ir_sends(uint8_t dirs, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	while(dirs)
    18c2:	88 23       	and	r24, r24
    18c4:	09 f4       	brne	.+2      	; 0x18c8 <ir_targeted_send+0x32>
    18c6:	7f c0       	rjmp	.+254    	; 0x19c6 <ir_targeted_send+0x130>
    18c8:	0f 2e       	mov	r0, r31
    18ca:	f6 e0       	ldi	r31, 0x06	; 6
    18cc:	ef 2e       	mov	r14, r31
    18ce:	f0 e2       	ldi	r31, 0x20	; 32
    18d0:	ff 2e       	mov	r15, r31
    18d2:	f0 2d       	mov	r31, r0
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
		{
			if(dirs & (1<<dir))
			{
				if(!((ir_rxtx[dir].status & IR_STATUS_BUSY_bm) || (get_time() - ir_rxtx[dir].last_byte < IR_MSG_TIMEOUT)))
    18d4:	0f 2e       	mov	r0, r31
    18d6:	ff e4       	ldi	r31, 0x4F	; 79
    18d8:	4f 2e       	mov	r4, r31
    18da:	f0 2d       	mov	r31, r0
				{
					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receive messages on this channel while transmitting.
					ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
					if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
					ir_rxtx[dir].target_ID=target;
					send_msg(1<<dir, data, data_length);
    18dc:	aa 24       	eor	r10, r10
    18de:	a3 94       	inc	r10
    18e0:	b1 2c       	mov	r11, r1
					wait_for_ir(1<<dir);
					dirs&=(~(1<<dir));
				}
			}
		}
		if(dirs) delay_ms(rand_byte()%10);
    18e2:	0f 2e       	mov	r0, r31
    18e4:	fd ec       	ldi	r31, 0xCD	; 205
    18e6:	3f 2e       	mov	r3, r31
    18e8:	f0 2d       	mov	r31, r0
    18ea:	69 c0       	rjmp	.+210    	; 0x19be <ir_targeted_send+0x128>
{
	while(dirs)
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
		{
			if(dirs & (1<<dir))
    18ec:	85 2d       	mov	r24, r5
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0c 2e       	mov	r0, r28
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <ir_targeted_send+0x62>
    18f4:	95 95       	asr	r25
    18f6:	87 95       	ror	r24
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <ir_targeted_send+0x5e>
    18fc:	80 ff       	sbrs	r24, 0
    18fe:	45 c0       	rjmp	.+138    	; 0x198a <ir_targeted_send+0xf4>
			{
				if(!((ir_rxtx[dir].status & IR_STATUS_BUSY_bm) || (get_time() - ir_rxtx[dir].last_byte < IR_MSG_TIMEOUT)))
    1900:	4c 9e       	mul	r4, r28
    1902:	f0 01       	movw	r30, r0
    1904:	4d 9e       	mul	r4, r29
    1906:	f0 0d       	add	r31, r0
    1908:	11 24       	eor	r1, r1
    190a:	ef 5b       	subi	r30, 0xBF	; 191
    190c:	f5 4d       	sbci	r31, 0xD5	; 213
    190e:	80 81       	ld	r24, Z
    1910:	80 fd       	sbrc	r24, 0
    1912:	3b c0       	rjmp	.+118    	; 0x198a <ir_targeted_send+0xf4>
    1914:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    1918:	4c 9e       	mul	r4, r28
    191a:	f0 01       	movw	r30, r0
    191c:	4d 9e       	mul	r4, r29
    191e:	f0 0d       	add	r31, r0
    1920:	11 24       	eor	r1, r1
    1922:	ed 50       	subi	r30, 0x0D	; 13
    1924:	f6 4d       	sbci	r31, 0xD6	; 214
    1926:	20 81       	ld	r18, Z
    1928:	31 81       	ldd	r19, Z+1	; 0x01
    192a:	42 81       	ldd	r20, Z+2	; 0x02
    192c:	53 81       	ldd	r21, Z+3	; 0x03
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	82 1b       	sub	r24, r18
    1934:	93 0b       	sbc	r25, r19
    1936:	a4 0b       	sbc	r26, r20
    1938:	b5 0b       	sbc	r27, r21
    193a:	0a 97       	sbiw	r24, 0x0a	; 10
    193c:	a1 05       	cpc	r26, r1
    193e:	b1 05       	cpc	r27, r1
    1940:	20 f1       	brcs	.+72     	; 0x198a <ir_targeted_send+0xf4>
				{
					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receive messages on this channel while transmitting.
    1942:	d8 01       	movw	r26, r16
    1944:	ed 91       	ld	r30, X+
    1946:	fc 91       	ld	r31, X
    1948:	84 81       	ldd	r24, Z+4	; 0x04
    194a:	8f 7e       	andi	r24, 0xEF	; 239
    194c:	84 83       	std	Z+4, r24	; 0x04
					ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    194e:	4c 9e       	mul	r4, r28
    1950:	c0 01       	movw	r24, r0
    1952:	4d 9e       	mul	r4, r29
    1954:	90 0d       	add	r25, r0
    1956:	11 24       	eor	r1, r1
    1958:	8d 50       	subi	r24, 0x0D	; 13
    195a:	96 4d       	sbci	r25, 0xD6	; 214
    195c:	fc 01       	movw	r30, r24
    195e:	e2 5b       	subi	r30, 0xB2	; 178
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	b1 e0       	ldi	r27, 0x01	; 1
    1964:	b0 83       	st	Z, r27
					if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
					ir_rxtx[dir].target_ID=target;
    1966:	37 97       	sbiw	r30, 0x07	; 7
    1968:	60 82       	st	Z, r6
    196a:	71 82       	std	Z+1, r7	; 0x01
					send_msg(1<<dir, data, data_length);
    196c:	c5 01       	movw	r24, r10
    196e:	0c 2e       	mov	r0, r28
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <ir_targeted_send+0xe0>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <ir_targeted_send+0xdc>
    197a:	6c 01       	movw	r12, r24
    197c:	42 2d       	mov	r20, r2
    197e:	b4 01       	movw	r22, r8
    1980:	41 da       	rcall	.-2942   	; 0xe04 <send_msg>
					wait_for_ir(1<<dir);
    1982:	8c 2d       	mov	r24, r12
    1984:	12 de       	rcall	.-988    	; 0x15aa <wait_for_ir>
					dirs&=(~(1<<dir));
    1986:	c0 94       	com	r12
    1988:	5c 20       	and	r5, r12
    198a:	21 96       	adiw	r28, 0x01	; 1
    198c:	0e 5f       	subi	r16, 0xFE	; 254
    198e:	1f 4f       	sbci	r17, 0xFF	; 255

inline void all_ir_sends(uint8_t dirs, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	while(dirs)
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
    1990:	c6 30       	cpi	r28, 0x06	; 6
    1992:	d1 05       	cpc	r29, r1
    1994:	09 f0       	breq	.+2      	; 0x1998 <ir_targeted_send+0x102>
    1996:	aa cf       	rjmp	.-172    	; 0x18ec <ir_targeted_send+0x56>
					wait_for_ir(1<<dir);
					dirs&=(~(1<<dir));
				}
			}
		}
		if(dirs) delay_ms(rand_byte()%10);
    1998:	55 20       	and	r5, r5
    199a:	a9 f0       	breq	.+42     	; 0x19c6 <ir_targeted_send+0x130>
    199c:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <rand_byte>
    19a0:	83 9d       	mul	r24, r3
    19a2:	91 2d       	mov	r25, r1
    19a4:	11 24       	eor	r1, r1
    19a6:	96 95       	lsr	r25
    19a8:	96 95       	lsr	r25
    19aa:	96 95       	lsr	r25
    19ac:	99 0f       	add	r25, r25
    19ae:	29 2f       	mov	r18, r25
    19b0:	22 0f       	add	r18, r18
    19b2:	22 0f       	add	r18, r18
    19b4:	92 0f       	add	r25, r18
    19b6:	89 1b       	sub	r24, r25
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    19be:	87 01       	movw	r16, r14
{	
	all_ir_sends(dirs, data, data_length, 0, 1);
}

void ir_targeted_send(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    19c0:	c0 e0       	ldi	r28, 0x00	; 0
    19c2:	d0 e0       	ldi	r29, 0x00	; 0
    19c4:	93 cf       	rjmp	.-218    	; 0x18ec <ir_targeted_send+0x56>
	all_ir_sends(dirs, data, data_length, target, 0);
}
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	ff 90       	pop	r15
    19d0:	ef 90       	pop	r14
    19d2:	df 90       	pop	r13
    19d4:	cf 90       	pop	r12
    19d6:	bf 90       	pop	r11
    19d8:	af 90       	pop	r10
    19da:	9f 90       	pop	r9
    19dc:	8f 90       	pop	r8
    19de:	7f 90       	pop	r7
    19e0:	6f 90       	pop	r6
    19e2:	5f 90       	pop	r5
    19e4:	4f 90       	pop	r4
    19e6:	3f 90       	pop	r3
    19e8:	2f 90       	pop	r2
    19ea:	08 95       	ret

000019ec <ir_send>:

void ir_send(uint8_t dirs, char *data, uint8_t data_length)
{
    19ec:	3f 92       	push	r3
    19ee:	4f 92       	push	r4
    19f0:	5f 92       	push	r5
    19f2:	6f 92       	push	r6
    19f4:	7f 92       	push	r7
    19f6:	8f 92       	push	r8
    19f8:	9f 92       	push	r9
    19fa:	af 92       	push	r10
    19fc:	bf 92       	push	r11
    19fe:	cf 92       	push	r12
    1a00:	df 92       	push	r13
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	78 2e       	mov	r7, r24
    1a10:	6b 01       	movw	r12, r22
    1a12:	44 2e       	mov	r4, r20
	/* The whole transmission will now occur in interrupts. */
}

inline void all_ir_sends(uint8_t dirs, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	while(dirs)
    1a14:	88 23       	and	r24, r24
    1a16:	09 f4       	brne	.+2      	; 0x1a1a <ir_send+0x2e>
    1a18:	7d c0       	rjmp	.+250    	; 0x1b14 <ir_send+0x128>
    1a1a:	06 e0       	ldi	r16, 0x06	; 6
    1a1c:	10 e2       	ldi	r17, 0x20	; 32
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
		{
			if(dirs & (1<<dir))
			{
				if(!((ir_rxtx[dir].status & IR_STATUS_BUSY_bm) || (get_time() - ir_rxtx[dir].last_byte < IR_MSG_TIMEOUT)))
    1a1e:	0f 2e       	mov	r0, r31
    1a20:	ff e4       	ldi	r31, 0x4F	; 79
    1a22:	6f 2e       	mov	r6, r31
    1a24:	f0 2d       	mov	r31, r0
				{
					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receive messages on this channel while transmitting.
					ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    1a26:	33 24       	eor	r3, r3
    1a28:	33 94       	inc	r3
					if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
					ir_rxtx[dir].target_ID=target;
					send_msg(1<<dir, data, data_length);
    1a2a:	aa 24       	eor	r10, r10
    1a2c:	a3 94       	inc	r10
    1a2e:	b1 2c       	mov	r11, r1
					wait_for_ir(1<<dir);
					dirs&=(~(1<<dir));
				}
			}
		}
		if(dirs) delay_ms(rand_byte()%10);
    1a30:	0f 2e       	mov	r0, r31
    1a32:	fd ec       	ldi	r31, 0xCD	; 205
    1a34:	5f 2e       	mov	r5, r31
    1a36:	f0 2d       	mov	r31, r0
    1a38:	69 c0       	rjmp	.+210    	; 0x1b0c <ir_send+0x120>
{
	while(dirs)
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
		{
			if(dirs & (1<<dir))
    1a3a:	87 2d       	mov	r24, r7
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	0c 2e       	mov	r0, r28
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <ir_send+0x5a>
    1a42:	95 95       	asr	r25
    1a44:	87 95       	ror	r24
    1a46:	0a 94       	dec	r0
    1a48:	e2 f7       	brpl	.-8      	; 0x1a42 <ir_send+0x56>
    1a4a:	80 ff       	sbrs	r24, 0
    1a4c:	44 c0       	rjmp	.+136    	; 0x1ad6 <ir_send+0xea>
			{
				if(!((ir_rxtx[dir].status & IR_STATUS_BUSY_bm) || (get_time() - ir_rxtx[dir].last_byte < IR_MSG_TIMEOUT)))
    1a4e:	6c 9e       	mul	r6, r28
    1a50:	f0 01       	movw	r30, r0
    1a52:	6d 9e       	mul	r6, r29
    1a54:	f0 0d       	add	r31, r0
    1a56:	11 24       	eor	r1, r1
    1a58:	ef 5b       	subi	r30, 0xBF	; 191
    1a5a:	f5 4d       	sbci	r31, 0xD5	; 213
    1a5c:	80 81       	ld	r24, Z
    1a5e:	80 fd       	sbrc	r24, 0
    1a60:	3a c0       	rjmp	.+116    	; 0x1ad6 <ir_send+0xea>
    1a62:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    1a66:	6c 9e       	mul	r6, r28
    1a68:	f0 01       	movw	r30, r0
    1a6a:	6d 9e       	mul	r6, r29
    1a6c:	f0 0d       	add	r31, r0
    1a6e:	11 24       	eor	r1, r1
    1a70:	ed 50       	subi	r30, 0x0D	; 13
    1a72:	f6 4d       	sbci	r31, 0xD6	; 214
    1a74:	20 81       	ld	r18, Z
    1a76:	31 81       	ldd	r19, Z+1	; 0x01
    1a78:	42 81       	ldd	r20, Z+2	; 0x02
    1a7a:	53 81       	ldd	r21, Z+3	; 0x03
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	82 1b       	sub	r24, r18
    1a82:	93 0b       	sbc	r25, r19
    1a84:	a4 0b       	sbc	r26, r20
    1a86:	b5 0b       	sbc	r27, r21
    1a88:	0a 97       	sbiw	r24, 0x0a	; 10
    1a8a:	a1 05       	cpc	r26, r1
    1a8c:	b1 05       	cpc	r27, r1
    1a8e:	18 f1       	brcs	.+70     	; 0x1ad6 <ir_send+0xea>
				{
					channel[dir]->CTRLB &= ~USART_RXEN_bm; //Disable receive messages on this channel while transmitting.
    1a90:	d4 01       	movw	r26, r8
    1a92:	ed 91       	ld	r30, X+
    1a94:	fc 91       	ld	r31, X
    1a96:	84 81       	ldd	r24, Z+4	; 0x04
    1a98:	8f 7e       	andi	r24, 0xEF	; 239
    1a9a:	84 83       	std	Z+4, r24	; 0x04
					ir_rxtx[dir].status = IR_STATUS_BUSY_bm;
    1a9c:	6c 9e       	mul	r6, r28
    1a9e:	c0 01       	movw	r24, r0
    1aa0:	6d 9e       	mul	r6, r29
    1aa2:	90 0d       	add	r25, r0
    1aa4:	11 24       	eor	r1, r1
    1aa6:	8d 50       	subi	r24, 0x0D	; 13
    1aa8:	96 4d       	sbci	r25, 0xD6	; 214
    1aaa:	fc 01       	movw	r30, r24
    1aac:	e2 5b       	subi	r30, 0xB2	; 178
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	30 82       	st	Z, r3
					if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
					ir_rxtx[dir].target_ID=target;
    1ab2:	37 97       	sbiw	r30, 0x07	; 7
    1ab4:	10 82       	st	Z, r1
    1ab6:	11 82       	std	Z+1, r1	; 0x01
					send_msg(1<<dir, data, data_length);
    1ab8:	c5 01       	movw	r24, r10
    1aba:	0c 2e       	mov	r0, r28
    1abc:	02 c0       	rjmp	.+4      	; 0x1ac2 <ir_send+0xd6>
    1abe:	88 0f       	add	r24, r24
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	0a 94       	dec	r0
    1ac4:	e2 f7       	brpl	.-8      	; 0x1abe <ir_send+0xd2>
    1ac6:	7c 01       	movw	r14, r24
    1ac8:	44 2d       	mov	r20, r4
    1aca:	b6 01       	movw	r22, r12
    1acc:	9b d9       	rcall	.-3274   	; 0xe04 <send_msg>
					wait_for_ir(1<<dir);
    1ace:	8e 2d       	mov	r24, r14
    1ad0:	6c dd       	rcall	.-1320   	; 0x15aa <wait_for_ir>
					dirs&=(~(1<<dir));
    1ad2:	e0 94       	com	r14
    1ad4:	7e 20       	and	r7, r14
    1ad6:	21 96       	adiw	r28, 0x01	; 1
    1ad8:	92 e0       	ldi	r25, 0x02	; 2
    1ada:	89 0e       	add	r8, r25
    1adc:	91 1c       	adc	r9, r1

inline void all_ir_sends(uint8_t dirs, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	while(dirs)
	{
		for(uint8_t dir=0; dir<6; dir++) //first pass. send what you can.
    1ade:	c6 30       	cpi	r28, 0x06	; 6
    1ae0:	d1 05       	cpc	r29, r1
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <ir_send+0xfa>
    1ae4:	aa cf       	rjmp	.-172    	; 0x1a3a <ir_send+0x4e>
					wait_for_ir(1<<dir);
					dirs&=(~(1<<dir));
				}
			}
		}
		if(dirs) delay_ms(rand_byte()%10);
    1ae6:	77 20       	and	r7, r7
    1ae8:	a9 f0       	breq	.+42     	; 0x1b14 <ir_send+0x128>
    1aea:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <rand_byte>
    1aee:	85 9d       	mul	r24, r5
    1af0:	91 2d       	mov	r25, r1
    1af2:	11 24       	eor	r1, r1
    1af4:	96 95       	lsr	r25
    1af6:	96 95       	lsr	r25
    1af8:	96 95       	lsr	r25
    1afa:	99 0f       	add	r25, r25
    1afc:	29 2f       	mov	r18, r25
    1afe:	22 0f       	add	r18, r18
    1b00:	22 0f       	add	r18, r18
    1b02:	92 0f       	add	r25, r18
    1b04:	89 1b       	sub	r24, r25
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    1b0c:	48 01       	movw	r8, r16
{
	all_ir_sends(dirs, data, data_length, target, 0);
}

void ir_send(uint8_t dirs, char *data, uint8_t data_length)
{
    1b0e:	c0 e0       	ldi	r28, 0x00	; 0
    1b10:	d0 e0       	ldi	r29, 0x00	; 0
    1b12:	93 cf       	rjmp	.-218    	; 0x1a3a <ir_send+0x4e>
	all_ir_sends(dirs, data, data_length, 0, 0);
}
    1b14:	df 91       	pop	r29
    1b16:	cf 91       	pop	r28
    1b18:	1f 91       	pop	r17
    1b1a:	0f 91       	pop	r16
    1b1c:	ff 90       	pop	r15
    1b1e:	ef 90       	pop	r14
    1b20:	df 90       	pop	r13
    1b22:	cf 90       	pop	r12
    1b24:	bf 90       	pop	r11
    1b26:	af 90       	pop	r10
    1b28:	9f 90       	pop	r9
    1b2a:	8f 90       	pop	r8
    1b2c:	7f 90       	pop	r7
    1b2e:	6f 90       	pop	r6
    1b30:	5f 90       	pop	r5
    1b32:	4f 90       	pop	r4
    1b34:	3f 90       	pop	r3
    1b36:	08 95       	ret

00001b38 <__vector_25>:
		}
	} while (busy);
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { ir_receive(0); }
    1b38:	1f 92       	push	r1
    1b3a:	0f 92       	push	r0
    1b3c:	0f b6       	in	r0, 0x3f	; 63
    1b3e:	0f 92       	push	r0
    1b40:	11 24       	eor	r1, r1
    1b42:	0b b6       	in	r0, 0x3b	; 59
    1b44:	0f 92       	push	r0
    1b46:	2f 93       	push	r18
    1b48:	3f 93       	push	r19
    1b4a:	4f 93       	push	r20
    1b4c:	5f 93       	push	r21
    1b4e:	6f 93       	push	r22
    1b50:	7f 93       	push	r23
    1b52:	8f 93       	push	r24
    1b54:	9f 93       	push	r25
    1b56:	af 93       	push	r26
    1b58:	bf 93       	push	r27
    1b5a:	ef 93       	push	r30
    1b5c:	ff 93       	push	r31
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	4a da       	rcall	.-2924   	; 0xff6 <ir_receive>
    1b62:	ff 91       	pop	r31
    1b64:	ef 91       	pop	r30
    1b66:	bf 91       	pop	r27
    1b68:	af 91       	pop	r26
    1b6a:	9f 91       	pop	r25
    1b6c:	8f 91       	pop	r24
    1b6e:	7f 91       	pop	r23
    1b70:	6f 91       	pop	r22
    1b72:	5f 91       	pop	r21
    1b74:	4f 91       	pop	r20
    1b76:	3f 91       	pop	r19
    1b78:	2f 91       	pop	r18
    1b7a:	0f 90       	pop	r0
    1b7c:	0b be       	out	0x3b, r0	; 59
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <__vector_27>:
ISR( USARTC0_TXC_vect ) { ir_transmit_complete(0); }
    1b88:	1f 92       	push	r1
    1b8a:	0f 92       	push	r0
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	0f 92       	push	r0
    1b90:	11 24       	eor	r1, r1
    1b92:	0b b6       	in	r0, 0x3b	; 59
    1b94:	0f 92       	push	r0
    1b96:	2f 93       	push	r18
    1b98:	3f 93       	push	r19
    1b9a:	4f 93       	push	r20
    1b9c:	5f 93       	push	r21
    1b9e:	6f 93       	push	r22
    1ba0:	7f 93       	push	r23
    1ba2:	8f 93       	push	r24
    1ba4:	9f 93       	push	r25
    1ba6:	af 93       	push	r26
    1ba8:	bf 93       	push	r27
    1baa:	ef 93       	push	r30
    1bac:	ff 93       	push	r31
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	c6 dc       	rcall	.-1652   	; 0x153e <ir_transmit_complete>
    1bb2:	ff 91       	pop	r31
    1bb4:	ef 91       	pop	r30
    1bb6:	bf 91       	pop	r27
    1bb8:	af 91       	pop	r26
    1bba:	9f 91       	pop	r25
    1bbc:	8f 91       	pop	r24
    1bbe:	7f 91       	pop	r23
    1bc0:	6f 91       	pop	r22
    1bc2:	5f 91       	pop	r21
    1bc4:	4f 91       	pop	r20
    1bc6:	3f 91       	pop	r19
    1bc8:	2f 91       	pop	r18
    1bca:	0f 90       	pop	r0
    1bcc:	0b be       	out	0x3b, r0	; 59
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <__vector_26>:
ISR( USARTC0_DRE_vect ) { ir_transmit(0); }
    1bd8:	1f 92       	push	r1
    1bda:	0f 92       	push	r0
    1bdc:	0f b6       	in	r0, 0x3f	; 63
    1bde:	0f 92       	push	r0
    1be0:	11 24       	eor	r1, r1
    1be2:	0b b6       	in	r0, 0x3b	; 59
    1be4:	0f 92       	push	r0
    1be6:	2f 93       	push	r18
    1be8:	3f 93       	push	r19
    1bea:	4f 93       	push	r20
    1bec:	5f 93       	push	r21
    1bee:	6f 93       	push	r22
    1bf0:	7f 93       	push	r23
    1bf2:	8f 93       	push	r24
    1bf4:	9f 93       	push	r25
    1bf6:	af 93       	push	r26
    1bf8:	bf 93       	push	r27
    1bfa:	ef 93       	push	r30
    1bfc:	ff 93       	push	r31
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	c0 db       	rcall	.-2176   	; 0x1382 <ir_transmit>
    1c02:	ff 91       	pop	r31
    1c04:	ef 91       	pop	r30
    1c06:	bf 91       	pop	r27
    1c08:	af 91       	pop	r26
    1c0a:	9f 91       	pop	r25
    1c0c:	8f 91       	pop	r24
    1c0e:	7f 91       	pop	r23
    1c10:	6f 91       	pop	r22
    1c12:	5f 91       	pop	r21
    1c14:	4f 91       	pop	r20
    1c16:	3f 91       	pop	r19
    1c18:	2f 91       	pop	r18
    1c1a:	0f 90       	pop	r0
    1c1c:	0b be       	out	0x3b, r0	; 59
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	0f 90       	pop	r0
    1c24:	1f 90       	pop	r1
    1c26:	18 95       	reti

00001c28 <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { ir_receive(1); }
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	0b b6       	in	r0, 0x3b	; 59
    1c34:	0f 92       	push	r0
    1c36:	2f 93       	push	r18
    1c38:	3f 93       	push	r19
    1c3a:	4f 93       	push	r20
    1c3c:	5f 93       	push	r21
    1c3e:	6f 93       	push	r22
    1c40:	7f 93       	push	r23
    1c42:	8f 93       	push	r24
    1c44:	9f 93       	push	r25
    1c46:	af 93       	push	r26
    1c48:	bf 93       	push	r27
    1c4a:	ef 93       	push	r30
    1c4c:	ff 93       	push	r31
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	d2 d9       	rcall	.-3164   	; 0xff6 <ir_receive>
    1c52:	ff 91       	pop	r31
    1c54:	ef 91       	pop	r30
    1c56:	bf 91       	pop	r27
    1c58:	af 91       	pop	r26
    1c5a:	9f 91       	pop	r25
    1c5c:	8f 91       	pop	r24
    1c5e:	7f 91       	pop	r23
    1c60:	6f 91       	pop	r22
    1c62:	5f 91       	pop	r21
    1c64:	4f 91       	pop	r20
    1c66:	3f 91       	pop	r19
    1c68:	2f 91       	pop	r18
    1c6a:	0f 90       	pop	r0
    1c6c:	0b be       	out	0x3b, r0	; 59
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	0f 90       	pop	r0
    1c74:	1f 90       	pop	r1
    1c76:	18 95       	reti

00001c78 <__vector_30>:
ISR( USARTC1_TXC_vect ) { ir_transmit_complete(1); }
    1c78:	1f 92       	push	r1
    1c7a:	0f 92       	push	r0
    1c7c:	0f b6       	in	r0, 0x3f	; 63
    1c7e:	0f 92       	push	r0
    1c80:	11 24       	eor	r1, r1
    1c82:	0b b6       	in	r0, 0x3b	; 59
    1c84:	0f 92       	push	r0
    1c86:	2f 93       	push	r18
    1c88:	3f 93       	push	r19
    1c8a:	4f 93       	push	r20
    1c8c:	5f 93       	push	r21
    1c8e:	6f 93       	push	r22
    1c90:	7f 93       	push	r23
    1c92:	8f 93       	push	r24
    1c94:	9f 93       	push	r25
    1c96:	af 93       	push	r26
    1c98:	bf 93       	push	r27
    1c9a:	ef 93       	push	r30
    1c9c:	ff 93       	push	r31
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	4e dc       	rcall	.-1892   	; 0x153e <ir_transmit_complete>
    1ca2:	ff 91       	pop	r31
    1ca4:	ef 91       	pop	r30
    1ca6:	bf 91       	pop	r27
    1ca8:	af 91       	pop	r26
    1caa:	9f 91       	pop	r25
    1cac:	8f 91       	pop	r24
    1cae:	7f 91       	pop	r23
    1cb0:	6f 91       	pop	r22
    1cb2:	5f 91       	pop	r21
    1cb4:	4f 91       	pop	r20
    1cb6:	3f 91       	pop	r19
    1cb8:	2f 91       	pop	r18
    1cba:	0f 90       	pop	r0
    1cbc:	0b be       	out	0x3b, r0	; 59
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	0f 90       	pop	r0
    1cc4:	1f 90       	pop	r1
    1cc6:	18 95       	reti

00001cc8 <__vector_29>:
ISR( USARTC1_DRE_vect ) { ir_transmit(1); }
    1cc8:	1f 92       	push	r1
    1cca:	0f 92       	push	r0
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	0f 92       	push	r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	0b b6       	in	r0, 0x3b	; 59
    1cd4:	0f 92       	push	r0
    1cd6:	2f 93       	push	r18
    1cd8:	3f 93       	push	r19
    1cda:	4f 93       	push	r20
    1cdc:	5f 93       	push	r21
    1cde:	6f 93       	push	r22
    1ce0:	7f 93       	push	r23
    1ce2:	8f 93       	push	r24
    1ce4:	9f 93       	push	r25
    1ce6:	af 93       	push	r26
    1ce8:	bf 93       	push	r27
    1cea:	ef 93       	push	r30
    1cec:	ff 93       	push	r31
    1cee:	81 e0       	ldi	r24, 0x01	; 1
    1cf0:	48 db       	rcall	.-2416   	; 0x1382 <ir_transmit>
    1cf2:	ff 91       	pop	r31
    1cf4:	ef 91       	pop	r30
    1cf6:	bf 91       	pop	r27
    1cf8:	af 91       	pop	r26
    1cfa:	9f 91       	pop	r25
    1cfc:	8f 91       	pop	r24
    1cfe:	7f 91       	pop	r23
    1d00:	6f 91       	pop	r22
    1d02:	5f 91       	pop	r21
    1d04:	4f 91       	pop	r20
    1d06:	3f 91       	pop	r19
    1d08:	2f 91       	pop	r18
    1d0a:	0f 90       	pop	r0
    1d0c:	0b be       	out	0x3b, r0	; 59
    1d0e:	0f 90       	pop	r0
    1d10:	0f be       	out	0x3f, r0	; 63
    1d12:	0f 90       	pop	r0
    1d14:	1f 90       	pop	r1
    1d16:	18 95       	reti

00001d18 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { ir_receive(2); }
    1d18:	1f 92       	push	r1
    1d1a:	0f 92       	push	r0
    1d1c:	0f b6       	in	r0, 0x3f	; 63
    1d1e:	0f 92       	push	r0
    1d20:	11 24       	eor	r1, r1
    1d22:	0b b6       	in	r0, 0x3b	; 59
    1d24:	0f 92       	push	r0
    1d26:	2f 93       	push	r18
    1d28:	3f 93       	push	r19
    1d2a:	4f 93       	push	r20
    1d2c:	5f 93       	push	r21
    1d2e:	6f 93       	push	r22
    1d30:	7f 93       	push	r23
    1d32:	8f 93       	push	r24
    1d34:	9f 93       	push	r25
    1d36:	af 93       	push	r26
    1d38:	bf 93       	push	r27
    1d3a:	ef 93       	push	r30
    1d3c:	ff 93       	push	r31
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	5a d9       	rcall	.-3404   	; 0xff6 <ir_receive>
    1d42:	ff 91       	pop	r31
    1d44:	ef 91       	pop	r30
    1d46:	bf 91       	pop	r27
    1d48:	af 91       	pop	r26
    1d4a:	9f 91       	pop	r25
    1d4c:	8f 91       	pop	r24
    1d4e:	7f 91       	pop	r23
    1d50:	6f 91       	pop	r22
    1d52:	5f 91       	pop	r21
    1d54:	4f 91       	pop	r20
    1d56:	3f 91       	pop	r19
    1d58:	2f 91       	pop	r18
    1d5a:	0f 90       	pop	r0
    1d5c:	0b be       	out	0x3b, r0	; 59
    1d5e:	0f 90       	pop	r0
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	0f 90       	pop	r0
    1d64:	1f 90       	pop	r1
    1d66:	18 95       	reti

00001d68 <__vector_90>:
ISR( USARTD0_TXC_vect ) { ir_transmit_complete(2); }
    1d68:	1f 92       	push	r1
    1d6a:	0f 92       	push	r0
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	0f 92       	push	r0
    1d70:	11 24       	eor	r1, r1
    1d72:	0b b6       	in	r0, 0x3b	; 59
    1d74:	0f 92       	push	r0
    1d76:	2f 93       	push	r18
    1d78:	3f 93       	push	r19
    1d7a:	4f 93       	push	r20
    1d7c:	5f 93       	push	r21
    1d7e:	6f 93       	push	r22
    1d80:	7f 93       	push	r23
    1d82:	8f 93       	push	r24
    1d84:	9f 93       	push	r25
    1d86:	af 93       	push	r26
    1d88:	bf 93       	push	r27
    1d8a:	ef 93       	push	r30
    1d8c:	ff 93       	push	r31
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	d6 db       	rcall	.-2132   	; 0x153e <ir_transmit_complete>
    1d92:	ff 91       	pop	r31
    1d94:	ef 91       	pop	r30
    1d96:	bf 91       	pop	r27
    1d98:	af 91       	pop	r26
    1d9a:	9f 91       	pop	r25
    1d9c:	8f 91       	pop	r24
    1d9e:	7f 91       	pop	r23
    1da0:	6f 91       	pop	r22
    1da2:	5f 91       	pop	r21
    1da4:	4f 91       	pop	r20
    1da6:	3f 91       	pop	r19
    1da8:	2f 91       	pop	r18
    1daa:	0f 90       	pop	r0
    1dac:	0b be       	out	0x3b, r0	; 59
    1dae:	0f 90       	pop	r0
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	0f 90       	pop	r0
    1db4:	1f 90       	pop	r1
    1db6:	18 95       	reti

00001db8 <__vector_89>:
ISR( USARTD0_DRE_vect ) { ir_transmit(2); }
    1db8:	1f 92       	push	r1
    1dba:	0f 92       	push	r0
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	0f 92       	push	r0
    1dc0:	11 24       	eor	r1, r1
    1dc2:	0b b6       	in	r0, 0x3b	; 59
    1dc4:	0f 92       	push	r0
    1dc6:	2f 93       	push	r18
    1dc8:	3f 93       	push	r19
    1dca:	4f 93       	push	r20
    1dcc:	5f 93       	push	r21
    1dce:	6f 93       	push	r22
    1dd0:	7f 93       	push	r23
    1dd2:	8f 93       	push	r24
    1dd4:	9f 93       	push	r25
    1dd6:	af 93       	push	r26
    1dd8:	bf 93       	push	r27
    1dda:	ef 93       	push	r30
    1ddc:	ff 93       	push	r31
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	d0 da       	rcall	.-2656   	; 0x1382 <ir_transmit>
    1de2:	ff 91       	pop	r31
    1de4:	ef 91       	pop	r30
    1de6:	bf 91       	pop	r27
    1de8:	af 91       	pop	r26
    1dea:	9f 91       	pop	r25
    1dec:	8f 91       	pop	r24
    1dee:	7f 91       	pop	r23
    1df0:	6f 91       	pop	r22
    1df2:	5f 91       	pop	r21
    1df4:	4f 91       	pop	r20
    1df6:	3f 91       	pop	r19
    1df8:	2f 91       	pop	r18
    1dfa:	0f 90       	pop	r0
    1dfc:	0b be       	out	0x3b, r0	; 59
    1dfe:	0f 90       	pop	r0
    1e00:	0f be       	out	0x3f, r0	; 63
    1e02:	0f 90       	pop	r0
    1e04:	1f 90       	pop	r1
    1e06:	18 95       	reti

00001e08 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { ir_receive(3); }
    1e08:	1f 92       	push	r1
    1e0a:	0f 92       	push	r0
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	0f 92       	push	r0
    1e10:	11 24       	eor	r1, r1
    1e12:	0b b6       	in	r0, 0x3b	; 59
    1e14:	0f 92       	push	r0
    1e16:	2f 93       	push	r18
    1e18:	3f 93       	push	r19
    1e1a:	4f 93       	push	r20
    1e1c:	5f 93       	push	r21
    1e1e:	6f 93       	push	r22
    1e20:	7f 93       	push	r23
    1e22:	8f 93       	push	r24
    1e24:	9f 93       	push	r25
    1e26:	af 93       	push	r26
    1e28:	bf 93       	push	r27
    1e2a:	ef 93       	push	r30
    1e2c:	ff 93       	push	r31
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    1e30:	e2 d8       	rcall	.-3644   	; 0xff6 <ir_receive>
    1e32:	ff 91       	pop	r31
    1e34:	ef 91       	pop	r30
    1e36:	bf 91       	pop	r27
    1e38:	af 91       	pop	r26
    1e3a:	9f 91       	pop	r25
    1e3c:	8f 91       	pop	r24
    1e3e:	7f 91       	pop	r23
    1e40:	6f 91       	pop	r22
    1e42:	5f 91       	pop	r21
    1e44:	4f 91       	pop	r20
    1e46:	3f 91       	pop	r19
    1e48:	2f 91       	pop	r18
    1e4a:	0f 90       	pop	r0
    1e4c:	0b be       	out	0x3b, r0	; 59
    1e4e:	0f 90       	pop	r0
    1e50:	0f be       	out	0x3f, r0	; 63
    1e52:	0f 90       	pop	r0
    1e54:	1f 90       	pop	r1
    1e56:	18 95       	reti

00001e58 <__vector_60>:
ISR( USARTE0_TXC_vect ) { ir_transmit_complete(3); }
    1e58:	1f 92       	push	r1
    1e5a:	0f 92       	push	r0
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	0f 92       	push	r0
    1e60:	11 24       	eor	r1, r1
    1e62:	0b b6       	in	r0, 0x3b	; 59
    1e64:	0f 92       	push	r0
    1e66:	2f 93       	push	r18
    1e68:	3f 93       	push	r19
    1e6a:	4f 93       	push	r20
    1e6c:	5f 93       	push	r21
    1e6e:	6f 93       	push	r22
    1e70:	7f 93       	push	r23
    1e72:	8f 93       	push	r24
    1e74:	9f 93       	push	r25
    1e76:	af 93       	push	r26
    1e78:	bf 93       	push	r27
    1e7a:	ef 93       	push	r30
    1e7c:	ff 93       	push	r31
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	5e db       	rcall	.-2372   	; 0x153e <ir_transmit_complete>
    1e82:	ff 91       	pop	r31
    1e84:	ef 91       	pop	r30
    1e86:	bf 91       	pop	r27
    1e88:	af 91       	pop	r26
    1e8a:	9f 91       	pop	r25
    1e8c:	8f 91       	pop	r24
    1e8e:	7f 91       	pop	r23
    1e90:	6f 91       	pop	r22
    1e92:	5f 91       	pop	r21
    1e94:	4f 91       	pop	r20
    1e96:	3f 91       	pop	r19
    1e98:	2f 91       	pop	r18
    1e9a:	0f 90       	pop	r0
    1e9c:	0b be       	out	0x3b, r0	; 59
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	0f 90       	pop	r0
    1ea4:	1f 90       	pop	r1
    1ea6:	18 95       	reti

00001ea8 <__vector_59>:
ISR( USARTE0_DRE_vect ) { ir_transmit(3); }
    1ea8:	1f 92       	push	r1
    1eaa:	0f 92       	push	r0
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	0b b6       	in	r0, 0x3b	; 59
    1eb4:	0f 92       	push	r0
    1eb6:	2f 93       	push	r18
    1eb8:	3f 93       	push	r19
    1eba:	4f 93       	push	r20
    1ebc:	5f 93       	push	r21
    1ebe:	6f 93       	push	r22
    1ec0:	7f 93       	push	r23
    1ec2:	8f 93       	push	r24
    1ec4:	9f 93       	push	r25
    1ec6:	af 93       	push	r26
    1ec8:	bf 93       	push	r27
    1eca:	ef 93       	push	r30
    1ecc:	ff 93       	push	r31
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	58 da       	rcall	.-2896   	; 0x1382 <ir_transmit>
    1ed2:	ff 91       	pop	r31
    1ed4:	ef 91       	pop	r30
    1ed6:	bf 91       	pop	r27
    1ed8:	af 91       	pop	r26
    1eda:	9f 91       	pop	r25
    1edc:	8f 91       	pop	r24
    1ede:	7f 91       	pop	r23
    1ee0:	6f 91       	pop	r22
    1ee2:	5f 91       	pop	r21
    1ee4:	4f 91       	pop	r20
    1ee6:	3f 91       	pop	r19
    1ee8:	2f 91       	pop	r18
    1eea:	0f 90       	pop	r0
    1eec:	0b be       	out	0x3b, r0	; 59
    1eee:	0f 90       	pop	r0
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	0f 90       	pop	r0
    1ef4:	1f 90       	pop	r1
    1ef6:	18 95       	reti

00001ef8 <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { ir_receive(4); }
    1ef8:	1f 92       	push	r1
    1efa:	0f 92       	push	r0
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	0f 92       	push	r0
    1f00:	11 24       	eor	r1, r1
    1f02:	0b b6       	in	r0, 0x3b	; 59
    1f04:	0f 92       	push	r0
    1f06:	2f 93       	push	r18
    1f08:	3f 93       	push	r19
    1f0a:	4f 93       	push	r20
    1f0c:	5f 93       	push	r21
    1f0e:	6f 93       	push	r22
    1f10:	7f 93       	push	r23
    1f12:	8f 93       	push	r24
    1f14:	9f 93       	push	r25
    1f16:	af 93       	push	r26
    1f18:	bf 93       	push	r27
    1f1a:	ef 93       	push	r30
    1f1c:	ff 93       	push	r31
    1f1e:	84 e0       	ldi	r24, 0x04	; 4
    1f20:	6a d8       	rcall	.-3884   	; 0xff6 <ir_receive>
    1f22:	ff 91       	pop	r31
    1f24:	ef 91       	pop	r30
    1f26:	bf 91       	pop	r27
    1f28:	af 91       	pop	r26
    1f2a:	9f 91       	pop	r25
    1f2c:	8f 91       	pop	r24
    1f2e:	7f 91       	pop	r23
    1f30:	6f 91       	pop	r22
    1f32:	5f 91       	pop	r21
    1f34:	4f 91       	pop	r20
    1f36:	3f 91       	pop	r19
    1f38:	2f 91       	pop	r18
    1f3a:	0f 90       	pop	r0
    1f3c:	0b be       	out	0x3b, r0	; 59
    1f3e:	0f 90       	pop	r0
    1f40:	0f be       	out	0x3f, r0	; 63
    1f42:	0f 90       	pop	r0
    1f44:	1f 90       	pop	r1
    1f46:	18 95       	reti

00001f48 <__vector_63>:
ISR( USARTE1_TXC_vect ) { ir_transmit_complete(4); }
    1f48:	1f 92       	push	r1
    1f4a:	0f 92       	push	r0
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	0f 92       	push	r0
    1f50:	11 24       	eor	r1, r1
    1f52:	0b b6       	in	r0, 0x3b	; 59
    1f54:	0f 92       	push	r0
    1f56:	2f 93       	push	r18
    1f58:	3f 93       	push	r19
    1f5a:	4f 93       	push	r20
    1f5c:	5f 93       	push	r21
    1f5e:	6f 93       	push	r22
    1f60:	7f 93       	push	r23
    1f62:	8f 93       	push	r24
    1f64:	9f 93       	push	r25
    1f66:	af 93       	push	r26
    1f68:	bf 93       	push	r27
    1f6a:	ef 93       	push	r30
    1f6c:	ff 93       	push	r31
    1f6e:	84 e0       	ldi	r24, 0x04	; 4
    1f70:	e6 da       	rcall	.-2612   	; 0x153e <ir_transmit_complete>
    1f72:	ff 91       	pop	r31
    1f74:	ef 91       	pop	r30
    1f76:	bf 91       	pop	r27
    1f78:	af 91       	pop	r26
    1f7a:	9f 91       	pop	r25
    1f7c:	8f 91       	pop	r24
    1f7e:	7f 91       	pop	r23
    1f80:	6f 91       	pop	r22
    1f82:	5f 91       	pop	r21
    1f84:	4f 91       	pop	r20
    1f86:	3f 91       	pop	r19
    1f88:	2f 91       	pop	r18
    1f8a:	0f 90       	pop	r0
    1f8c:	0b be       	out	0x3b, r0	; 59
    1f8e:	0f 90       	pop	r0
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	0f 90       	pop	r0
    1f94:	1f 90       	pop	r1
    1f96:	18 95       	reti

00001f98 <__vector_62>:
ISR( USARTE1_DRE_vect ) { ir_transmit(4); }
    1f98:	1f 92       	push	r1
    1f9a:	0f 92       	push	r0
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	0f 92       	push	r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	0b b6       	in	r0, 0x3b	; 59
    1fa4:	0f 92       	push	r0
    1fa6:	2f 93       	push	r18
    1fa8:	3f 93       	push	r19
    1faa:	4f 93       	push	r20
    1fac:	5f 93       	push	r21
    1fae:	6f 93       	push	r22
    1fb0:	7f 93       	push	r23
    1fb2:	8f 93       	push	r24
    1fb4:	9f 93       	push	r25
    1fb6:	af 93       	push	r26
    1fb8:	bf 93       	push	r27
    1fba:	ef 93       	push	r30
    1fbc:	ff 93       	push	r31
    1fbe:	84 e0       	ldi	r24, 0x04	; 4
    1fc0:	e0 d9       	rcall	.-3136   	; 0x1382 <ir_transmit>
    1fc2:	ff 91       	pop	r31
    1fc4:	ef 91       	pop	r30
    1fc6:	bf 91       	pop	r27
    1fc8:	af 91       	pop	r26
    1fca:	9f 91       	pop	r25
    1fcc:	8f 91       	pop	r24
    1fce:	7f 91       	pop	r23
    1fd0:	6f 91       	pop	r22
    1fd2:	5f 91       	pop	r21
    1fd4:	4f 91       	pop	r20
    1fd6:	3f 91       	pop	r19
    1fd8:	2f 91       	pop	r18
    1fda:	0f 90       	pop	r0
    1fdc:	0b be       	out	0x3b, r0	; 59
    1fde:	0f 90       	pop	r0
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	0f 90       	pop	r0
    1fe4:	1f 90       	pop	r1
    1fe6:	18 95       	reti

00001fe8 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { ir_receive(5); }
    1fe8:	1f 92       	push	r1
    1fea:	0f 92       	push	r0
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	0f 92       	push	r0
    1ff0:	11 24       	eor	r1, r1
    1ff2:	0b b6       	in	r0, 0x3b	; 59
    1ff4:	0f 92       	push	r0
    1ff6:	2f 93       	push	r18
    1ff8:	3f 93       	push	r19
    1ffa:	4f 93       	push	r20
    1ffc:	5f 93       	push	r21
    1ffe:	6f 93       	push	r22
    2000:	7f 93       	push	r23
    2002:	8f 93       	push	r24
    2004:	9f 93       	push	r25
    2006:	af 93       	push	r26
    2008:	bf 93       	push	r27
    200a:	ef 93       	push	r30
    200c:	ff 93       	push	r31
    200e:	85 e0       	ldi	r24, 0x05	; 5
    2010:	0e 94 fb 07 	call	0xff6	; 0xff6 <ir_receive>
    2014:	ff 91       	pop	r31
    2016:	ef 91       	pop	r30
    2018:	bf 91       	pop	r27
    201a:	af 91       	pop	r26
    201c:	9f 91       	pop	r25
    201e:	8f 91       	pop	r24
    2020:	7f 91       	pop	r23
    2022:	6f 91       	pop	r22
    2024:	5f 91       	pop	r21
    2026:	4f 91       	pop	r20
    2028:	3f 91       	pop	r19
    202a:	2f 91       	pop	r18
    202c:	0f 90       	pop	r0
    202e:	0b be       	out	0x3b, r0	; 59
    2030:	0f 90       	pop	r0
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	0f 90       	pop	r0
    2036:	1f 90       	pop	r1
    2038:	18 95       	reti

0000203a <__vector_121>:
ISR( USARTF0_TXC_vect ) { ir_transmit_complete(5); }
    203a:	1f 92       	push	r1
    203c:	0f 92       	push	r0
    203e:	0f b6       	in	r0, 0x3f	; 63
    2040:	0f 92       	push	r0
    2042:	11 24       	eor	r1, r1
    2044:	0b b6       	in	r0, 0x3b	; 59
    2046:	0f 92       	push	r0
    2048:	2f 93       	push	r18
    204a:	3f 93       	push	r19
    204c:	4f 93       	push	r20
    204e:	5f 93       	push	r21
    2050:	6f 93       	push	r22
    2052:	7f 93       	push	r23
    2054:	8f 93       	push	r24
    2056:	9f 93       	push	r25
    2058:	af 93       	push	r26
    205a:	bf 93       	push	r27
    205c:	ef 93       	push	r30
    205e:	ff 93       	push	r31
    2060:	85 e0       	ldi	r24, 0x05	; 5
    2062:	6d da       	rcall	.-2854   	; 0x153e <ir_transmit_complete>
    2064:	ff 91       	pop	r31
    2066:	ef 91       	pop	r30
    2068:	bf 91       	pop	r27
    206a:	af 91       	pop	r26
    206c:	9f 91       	pop	r25
    206e:	8f 91       	pop	r24
    2070:	7f 91       	pop	r23
    2072:	6f 91       	pop	r22
    2074:	5f 91       	pop	r21
    2076:	4f 91       	pop	r20
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0b be       	out	0x3b, r0	; 59
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_120>:
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	11 24       	eor	r1, r1
    2094:	0b b6       	in	r0, 0x3b	; 59
    2096:	0f 92       	push	r0
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	4f 93       	push	r20
    209e:	5f 93       	push	r21
    20a0:	6f 93       	push	r22
    20a2:	7f 93       	push	r23
    20a4:	8f 93       	push	r24
    20a6:	9f 93       	push	r25
    20a8:	af 93       	push	r26
    20aa:	bf 93       	push	r27
    20ac:	ef 93       	push	r30
    20ae:	ff 93       	push	r31
    20b0:	85 e0       	ldi	r24, 0x05	; 5
    20b2:	67 d9       	rcall	.-3378   	; 0x1382 <ir_transmit>
    20b4:	ff 91       	pop	r31
    20b6:	ef 91       	pop	r30
    20b8:	bf 91       	pop	r27
    20ba:	af 91       	pop	r26
    20bc:	9f 91       	pop	r25
    20be:	8f 91       	pop	r24
    20c0:	7f 91       	pop	r23
    20c2:	6f 91       	pop	r22
    20c4:	5f 91       	pop	r21
    20c6:	4f 91       	pop	r20
    20c8:	3f 91       	pop	r19
    20ca:	2f 91       	pop	r18
    20cc:	0f 90       	pop	r0
    20ce:	0b be       	out	0x3b, r0	; 59
    20d0:	0f 90       	pop	r0
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	0f 90       	pop	r0
    20d6:	1f 90       	pop	r1
    20d8:	18 95       	reti

000020da <find_median>:
	return dirs;
}	

// Finds the median of 3 numbers by finding the max, finding the min, and returning the other value
int8_t find_median(int8_t* meas, uint8_t arr_len)
{
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
	if(arr_len==1) return meas[0];
    20de:	61 30       	cpi	r22, 0x01	; 1
    20e0:	19 f4       	brne	.+6      	; 0x20e8 <find_median+0xe>
    20e2:	fc 01       	movw	r30, r24
    20e4:	80 81       	ld	r24, Z
    20e6:	46 c0       	rjmp	.+140    	; 0x2174 <find_median+0x9a>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    20e8:	62 30       	cpi	r22, 0x02	; 2
    20ea:	19 f5       	brne	.+70     	; 0x2132 <find_median+0x58>
    20ec:	fc 01       	movw	r30, r24
    20ee:	20 81       	ld	r18, Z
    20f0:	81 81       	ldd	r24, Z+1	; 0x01
    20f2:	99 27       	eor	r25, r25
    20f4:	87 fd       	sbrc	r24, 7
    20f6:	90 95       	com	r25
    20f8:	82 0f       	add	r24, r18
    20fa:	91 1d       	adc	r25, r1
    20fc:	27 fd       	sbrc	r18, 7
    20fe:	9a 95       	dec	r25
    2100:	99 23       	and	r25, r25
    2102:	0c f4       	brge	.+2      	; 0x2106 <find_median+0x2c>
    2104:	01 96       	adiw	r24, 0x01	; 1
    2106:	95 95       	asr	r25
    2108:	87 95       	ror	r24
    210a:	34 c0       	rjmp	.+104    	; 0x2174 <find_median+0x9a>
    210c:	11 96       	adiw	r26, 0x01	; 1
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    210e:	5f 5f       	subi	r21, 0xFF	; 255
    2110:	56 17       	cp	r21, r22
    2112:	a1 f0       	breq	.+40     	; 0x213c <find_median+0x62>
    2114:	25 2f       	mov	r18, r21
    2116:	ed 01       	movw	r28, r26
		{
			if(meas[j] < meas[i])
    2118:	fc 01       	movw	r30, r24
    211a:	e2 0f       	add	r30, r18
    211c:	f1 1d       	adc	r31, r1
    211e:	40 81       	ld	r20, Z
    2120:	3c 91       	ld	r19, X
    2122:	43 17       	cp	r20, r19
    2124:	14 f4       	brge	.+4      	; 0x212a <find_median+0x50>
			{
				int8_t temp = meas[i];
				meas[i] = meas[j];
    2126:	48 83       	st	Y, r20
				meas[j] = temp;
    2128:	30 83       	st	Z, r19
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    212a:	2f 5f       	subi	r18, 0xFF	; 255
    212c:	26 13       	cpse	r18, r22
    212e:	f4 cf       	rjmp	.-24     	; 0x2118 <find_median+0x3e>
    2130:	ed cf       	rjmp	.-38     	; 0x210c <find_median+0x32>
int8_t find_median(int8_t* meas, uint8_t arr_len)
{
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
    2132:	66 23       	and	r22, r22
    2134:	29 f0       	breq	.+10     	; 0x2140 <find_median+0x66>
    2136:	dc 01       	movw	r26, r24
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	e9 cf       	rjmp	.-46     	; 0x210e <find_median+0x34>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    213c:	60 fd       	sbrc	r22, 0
    213e:	15 c0       	rjmp	.+42     	; 0x216a <find_median+0x90>
    2140:	66 95       	lsr	r22
    2142:	dc 01       	movw	r26, r24
    2144:	a6 0f       	add	r26, r22
    2146:	b1 1d       	adc	r27, r1
    2148:	fd 01       	movw	r30, r26
    214a:	31 97       	sbiw	r30, 0x01	; 1
    214c:	20 81       	ld	r18, Z
    214e:	8c 91       	ld	r24, X
    2150:	99 27       	eor	r25, r25
    2152:	87 fd       	sbrc	r24, 7
    2154:	90 95       	com	r25
    2156:	82 0f       	add	r24, r18
    2158:	91 1d       	adc	r25, r1
    215a:	27 fd       	sbrc	r18, 7
    215c:	9a 95       	dec	r25
    215e:	99 23       	and	r25, r25
    2160:	0c f4       	brge	.+2      	; 0x2164 <find_median+0x8a>
    2162:	01 96       	adiw	r24, 0x01	; 1
    2164:	95 95       	asr	r25
    2166:	87 95       	ror	r24
    2168:	05 c0       	rjmp	.+10     	; 0x2174 <find_median+0x9a>
	else return meas[arr_len/2];
    216a:	66 95       	lsr	r22
    216c:	fc 01       	movw	r30, r24
    216e:	e6 0f       	add	r30, r22
    2170:	f1 1d       	adc	r31, r1
    2172:	80 81       	ld	r24, Z
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	08 95       	ret

0000217a <get_ir_sensor>:
* This measurement will always output a number between 0 and about 200. Ambient light levels are typically around 20.
* The range of outputs that could be used for actual measurements will be limited to about 20 to 200 (only 180 significant values)
*/

uint8_t get_ir_sensor(uint8_t sensor_num)
{
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	00 d0       	rcall	.+0      	; 0x2184 <get_ir_sensor+0xa>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    2188:	e0 e4       	ldi	r30, 0x40	; 64
    218a:	f2 e0       	ldi	r31, 0x02	; 2
    218c:	91 a1       	ldd	r25, Z+33	; 0x21
    218e:	97 78       	andi	r25, 0x87	; 135
    2190:	91 a3       	std	Z+33, r25	; 0x21
	ADCB.CH0.MUXCTRL |= mux_sensor_selectors[sensor_num];
    2192:	91 a1       	ldd	r25, Z+33	; 0x21
    2194:	08 2f       	mov	r16, r24
    2196:	10 e0       	ldi	r17, 0x00	; 0
    2198:	d8 01       	movw	r26, r16
    219a:	a2 56       	subi	r26, 0x62	; 98
    219c:	be 4d       	sbci	r27, 0xDE	; 222
    219e:	8c 91       	ld	r24, X
    21a0:	89 2b       	or	r24, r25
    21a2:	81 a3       	std	Z+33, r24	; 0x21
    21a4:	de 01       	movw	r26, r28
    21a6:	11 96       	adiw	r26, 0x01	; 1
    21a8:	ce 01       	movw	r24, r28
    21aa:	04 96       	adiw	r24, 0x04	; 4
	
	int8_t meas[IR_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
	{
		ADCB.CH0.INTFLAGS=1; // clear the complete flag
    21ac:	51 e0       	ldi	r21, 0x01	; 1
    21ae:	53 a3       	std	Z+35, r21	; 0x23
		ADCB.CTRLA |= ADC_CH0START_bm;
    21b0:	20 81       	ld	r18, Z
    21b2:	24 60       	ori	r18, 0x04	; 4
    21b4:	20 83       	st	Z, r18
		while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    21b6:	23 a1       	ldd	r18, Z+35	; 0x23
    21b8:	22 23       	and	r18, r18
    21ba:	e9 f3       	breq	.-6      	; 0x21b6 <get_ir_sensor+0x3c>
		meas[meas_count] = (ADCB.CH0.RESH<<6)|(ADCB.CH0.RESL>>2);
    21bc:	25 a1       	ldd	r18, Z+37	; 0x25
    21be:	44 a1       	ldd	r20, Z+36	; 0x24
    21c0:	60 e4       	ldi	r22, 0x40	; 64
    21c2:	26 9f       	mul	r18, r22
    21c4:	90 01       	movw	r18, r0
    21c6:	11 24       	eor	r1, r1
    21c8:	34 2f       	mov	r19, r20
    21ca:	36 95       	lsr	r19
    21cc:	36 95       	lsr	r19
    21ce:	23 2b       	or	r18, r19
    21d0:	2d 93       	st	X+, r18
	ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
	ADCB.CH0.MUXCTRL |= mux_sensor_selectors[sensor_num];
	
	int8_t meas[IR_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
    21d2:	a8 17       	cp	r26, r24
    21d4:	b9 07       	cpc	r27, r25
    21d6:	59 f7       	brne	.-42     	; 0x21ae <get_ir_sensor+0x34>
		ADCB.CTRLA |= ADC_CH0START_bm;
		while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = (ADCB.CH0.RESH<<6)|(ADCB.CH0.RESL>>2);
	}
	
	if(find_median(meas, IR_MEAS_COUNT)<ir_sense_baseline[sensor_num])	return 0;
    21d8:	63 e0       	ldi	r22, 0x03	; 3
    21da:	ce 01       	movw	r24, r28
    21dc:	01 96       	adiw	r24, 0x01	; 1
    21de:	7d df       	rcall	.-262    	; 0x20da <find_median>
    21e0:	99 27       	eor	r25, r25
    21e2:	87 fd       	sbrc	r24, 7
    21e4:	90 95       	com	r25
    21e6:	f8 01       	movw	r30, r16
    21e8:	ea 56       	subi	r30, 0x6A	; 106
    21ea:	f6 4d       	sbci	r31, 0xD6	; 214
    21ec:	20 81       	ld	r18, Z
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	82 17       	cp	r24, r18
    21f2:	93 07       	cpc	r25, r19
    21f4:	54 f0       	brlt	.+20     	; 0x220a <get_ir_sensor+0x90>
	else									return (find_median(meas, IR_MEAS_COUNT)-ir_sense_baseline[sensor_num]);
    21f6:	63 e0       	ldi	r22, 0x03	; 3
    21f8:	ce 01       	movw	r24, r28
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	6e df       	rcall	.-292    	; 0x20da <find_median>
    21fe:	f8 01       	movw	r30, r16
    2200:	ea 56       	subi	r30, 0x6A	; 106
    2202:	f6 4d       	sbci	r31, 0xD6	; 214
    2204:	90 81       	ld	r25, Z
    2206:	89 1b       	sub	r24, r25
    2208:	01 c0       	rjmp	.+2      	; 0x220c <get_ir_sensor+0x92>
		ADCB.CTRLA |= ADC_CH0START_bm;
		while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = (ADCB.CH0.RESH<<6)|(ADCB.CH0.RESL>>2);
	}
	
	if(find_median(meas, IR_MEAS_COUNT)<ir_sense_baseline[sensor_num])	return 0;
    220a:	80 e0       	ldi	r24, 0x00	; 0
	else									return (find_median(meas, IR_MEAS_COUNT)-ir_sense_baseline[sensor_num]);
}
    220c:	23 96       	adiw	r28, 0x03	; 3
    220e:	cd bf       	out	0x3d, r28	; 61
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	08 95       	ret

0000221c <ir_sensor_init>:
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    221c:	af 92       	push	r10
    221e:	bf 92       	push	r11
    2220:	cf 92       	push	r12
    2222:	df 92       	push	r13
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
	/* SET INPUT PINS AS INPUTS */
	IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    2230:	a0 e2       	ldi	r26, 0x20	; 32
    2232:	b6 e0       	ldi	r27, 0x06	; 6
    2234:	8c ef       	ldi	r24, 0xFC	; 252
    2236:	12 96       	adiw	r26, 0x02	; 2
    2238:	8c 93       	st	X, r24
    223a:	12 97       	sbiw	r26, 0x02	; 2

	ADCB.REFCTRL = ADC_REFSEL_AREFB_gc;
    223c:	e0 e4       	ldi	r30, 0x40	; 64
    223e:	f2 e0       	ldi	r31, 0x02	; 2
    2240:	90 e3       	ldi	r25, 0x30	; 48
    2242:	92 83       	std	Z+2, r25	; 0x02
	ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //8bit resolution, and sets it to signed mode.
    2244:	90 e1       	ldi	r25, 0x10	; 16
    2246:	91 83       	std	Z+1, r25	; 0x01
	ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    2248:	97 e0       	ldi	r25, 0x07	; 7
    224a:	94 83       	std	Z+4, r25	; 0x04
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// differential input. requires signed mode (see sec. 28.6 in manual)
    224c:	92 e0       	ldi	r25, 0x02	; 2
    224e:	90 a3       	std	Z+32, r25	; 0x20
	ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_PIN0_gc;	// use VREF_IN for the negative input (0.54 V)
    2250:	11 a2       	std	Z+33, r1	; 0x21
	ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    2252:	94 b5       	in	r25, 0x24	; 36
    2254:	94 87       	std	Z+12, r25	; 0x0c
	ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    2256:	95 b5       	in	r25, 0x25	; 37
    2258:	95 87       	std	Z+13, r25	; 0x0d
	ADCB.CTRLA = ADC_ENABLE_bm;	
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	90 83       	st	Z, r25
	
	//ADCB.CH0.INTCTRL = ADC_CH_INTMODE_COMPLETE_gc;
	
	for(uint8_t dir=0; dir<6; dir++) ir_sense_baseline[dir] = 0;
    225e:	10 92 96 29 	sts	0x2996, r1
    2262:	10 92 97 29 	sts	0x2997, r1
    2266:	10 92 98 29 	sts	0x2998, r1
    226a:	10 92 99 29 	sts	0x2999, r1
    226e:	10 92 9a 29 	sts	0x299A, r1
    2272:	10 92 9b 29 	sts	0x299B, r1
	
	IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    2276:	12 96       	adiw	r26, 0x02	; 2
    2278:	8c 93       	st	X, r24
	delay_ms(5);
    227a:	85 e0       	ldi	r24, 0x05	; 5
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    2282:	0f 2e       	mov	r0, r31
    2284:	f6 e9       	ldi	r31, 0x96	; 150
    2286:	ef 2e       	mov	r14, r31
    2288:	f9 e2       	ldi	r31, 0x29	; 41
    228a:	ff 2e       	mov	r15, r31
    228c:	f0 2d       	mov	r31, r0
    228e:	0c e9       	ldi	r16, 0x9C	; 156
    2290:	19 e2       	ldi	r17, 0x29	; 41
    2292:	e7 01       	movw	r28, r14
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    2294:	aa 24       	eor	r10, r10
    2296:	aa 94       	dec	r10
    2298:	0b c0       	rjmp	.+22     	; 0x22b0 <ir_sensor_init+0x94>
	for(uint8_t dir=0; dir<6; dir++)
	{
		min_val=255;
		for(uint8_t meas_count=0; meas_count<5; meas_count++)
		{
			val = get_ir_sensor(dir);
    229a:	8b 2d       	mov	r24, r11
    229c:	6e df       	rcall	.-292    	; 0x217a <get_ir_sensor>
    229e:	8c 15       	cp	r24, r12
    22a0:	08 f4       	brcc	.+2      	; 0x22a4 <ir_sensor_init+0x88>
    22a2:	c8 2e       	mov	r12, r24
    22a4:	da 94       	dec	r13
	delay_ms(5);
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
	{
		min_val=255;
		for(uint8_t meas_count=0; meas_count<5; meas_count++)
    22a6:	c9 f7       	brne	.-14     	; 0x229a <ir_sensor_init+0x7e>
		{
			val = get_ir_sensor(dir);
			if(val<min_val) min_val = val;
		}
		ir_sense_baseline[dir] = min_val;
    22a8:	c9 92       	st	Y+, r12
	for(uint8_t dir=0; dir<6; dir++) ir_sense_baseline[dir] = 0;
	
	IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
	delay_ms(5);
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
    22aa:	c0 17       	cp	r28, r16
    22ac:	d1 07       	cpc	r29, r17
    22ae:	41 f0       	breq	.+16     	; 0x22c0 <ir_sensor_init+0xa4>
    22b0:	bc 2e       	mov	r11, r28
    22b2:	be 18       	sub	r11, r14
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    22b4:	0f 2e       	mov	r0, r31
    22b6:	f5 e0       	ldi	r31, 0x05	; 5
    22b8:	df 2e       	mov	r13, r31
    22ba:	f0 2d       	mov	r31, r0
    22bc:	ca 2c       	mov	r12, r10
    22be:	ed cf       	rjmp	.-38     	; 0x229a <ir_sensor_init+0x7e>
			val = get_ir_sensor(dir);
			if(val<min_val) min_val = val;
		}
		ir_sense_baseline[dir] = min_val;
	}
	printf("\r\n");
    22c0:	8d e7       	ldi	r24, 0x7D	; 125
    22c2:	95 e2       	ldi	r25, 0x25	; 37
    22c4:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
	//PORTC.DIRSET = (PIN3_bm | PIN7_bm);
	//PORTD.DIRCLR =  PIN3_bm;
	//PORTE.DIRSET = (PIN3_bm | PIN7_bm);
	//PORTF.DIRCLR =  PIN3_bm;	
	//PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;	//set carrier wave pins to output.
}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
    22d0:	ff 90       	pop	r15
    22d2:	ef 90       	pop	r14
    22d4:	df 90       	pop	r13
    22d6:	cf 90       	pop	r12
    22d8:	bf 90       	pop	r11
    22da:	af 90       	pop	r10
    22dc:	08 95       	ret

000022de <check_collisions>:
	if(find_median(meas, IR_MEAS_COUNT)<ir_sense_baseline[sensor_num])	return 0;
	else									return (find_median(meas, IR_MEAS_COUNT)-ir_sense_baseline[sensor_num]);
}

	
uint8_t check_collisions(){
    22de:	5f 92       	push	r5
    22e0:	6f 92       	push	r6
    22e2:	7f 92       	push	r7
    22e4:	8f 92       	push	r8
    22e6:	9f 92       	push	r9
    22e8:	af 92       	push	r10
    22ea:	bf 92       	push	r11
    22ec:	cf 92       	push	r12
    22ee:	df 92       	push	r13
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	cd b7       	in	r28, 0x3d	; 61
    22fe:	de b7       	in	r29, 0x3e	; 62
    2300:	62 97       	sbiw	r28, 0x12	; 18
    2302:	cd bf       	out	0x3d, r28	; 61
    2304:	de bf       	out	0x3e, r29	; 62
uint8_t count;
uint16_t thePower;
void i2c_init();

void set_all_ir_powers(uint16_t power);
inline uint16_t get_all_ir_powers(){ return thePower; };
    2306:	60 90 8a 27 	lds	r6, 0x278A
    230a:	70 90 8b 27 	lds	r7, 0x278B
	uint8_t channelCtrlBVals[6];
	int16_t measured_vals[6];
	uint8_t dirs=0;
	//wait_for_ir();	
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
    230e:	80 e0       	ldi	r24, 0x00	; 0
    2310:	91 e0       	ldi	r25, 0x01	; 1
    2312:	0e 94 4b 04 	call	0x896	; 0x896 <set_all_ir_powers>
    2316:	0f 2e       	mov	r0, r31
    2318:	f2 e1       	ldi	r31, 0x12	; 18
    231a:	ef 2e       	mov	r14, r31
    231c:	f0 e2       	ldi	r31, 0x20	; 32
    231e:	ff 2e       	mov	r15, r31
    2320:	f0 2d       	mov	r31, r0
    2322:	ce 01       	movw	r24, r28
    2324:	0d 96       	adiw	r24, 0x0d	; 13
    2326:	e6 e0       	ldi	r30, 0x06	; 6
    2328:	f0 e2       	ldi	r31, 0x20	; 32
	for(uint8_t i=0;i<6;i++)
	{
		channelCtrlBVals[i] = channel[i]->CTRLB;
    232a:	41 91       	ld	r20, Z+
    232c:	51 91       	ld	r21, Z+
    232e:	da 01       	movw	r26, r20
    2330:	14 96       	adiw	r26, 0x04	; 4
    2332:	2c 91       	ld	r18, X
    2334:	dc 01       	movw	r26, r24
    2336:	2d 93       	st	X+, r18
    2338:	cd 01       	movw	r24, r26
		channel[i]->CTRLB=0;
    233a:	da 01       	movw	r26, r20
    233c:	14 96       	adiw	r26, 0x04	; 4
    233e:	1c 92       	st	X, r1
	int16_t measured_vals[6];
	uint8_t dirs=0;
	//wait_for_ir();	
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
	for(uint8_t i=0;i<6;i++)
    2340:	ee 15       	cp	r30, r14
    2342:	ff 05       	cpc	r31, r15
    2344:	91 f7       	brne	.-28     	; 0x232a <check_collisions+0x4c>
    2346:	8e 01       	movw	r16, r28
    2348:	0f 5f       	subi	r16, 0xFF	; 255
    234a:	1f 4f       	sbci	r17, 0xFF	; 255
    234c:	b1 2c       	mov	r11, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    234e:	0f 2e       	mov	r0, r31
    2350:	ff e8       	ldi	r31, 0x8F	; 143
    2352:	cf 2e       	mov	r12, r31
    2354:	dd 24       	eor	r13, r13
    2356:	d3 94       	inc	r13
    2358:	f0 2d       	mov	r31, r0
    235a:	f6 01       	movw	r30, r12
    235c:	31 97       	sbiw	r30, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <check_collisions+0x7e>
    2360:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    2362:	00 c0       	rjmp	.+0      	; 0x2364 <check_collisions+0x86>
		channel[i]->CTRLB=0;
	}
	for(uint8_t i=0;i<6;i++)
	{
		busy_delay_us(50);
		baseline_meas[i] = get_ir_sensor(i);
    2364:	8b 2d       	mov	r24, r11
    2366:	09 df       	rcall	.-494    	; 0x217a <get_ir_sensor>
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	f8 01       	movw	r30, r16
    236e:	21 93       	st	Z+, r18
    2370:	31 93       	st	Z+, r19
    2372:	8f 01       	movw	r16, r30
	for(uint8_t i=0;i<6;i++)
	{
		channelCtrlBVals[i] = channel[i]->CTRLB;
		channel[i]->CTRLB=0;
	}
	for(uint8_t i=0;i<6;i++)
    2374:	b3 94       	inc	r11
    2376:	f6 e0       	ldi	r31, 0x06	; 6
    2378:	bf 12       	cpse	r11, r31
    237a:	ef cf       	rjmp	.-34     	; 0x235a <check_collisions+0x7c>
	{
		busy_delay_us(50);
		baseline_meas[i] = get_ir_sensor(i);
	}
	TCF2.CTRLB &= ~ALL_EMITTERS_CARWAV_bm;	//disable carrier wave output
    237c:	e0 e0       	ldi	r30, 0x00	; 0
    237e:	fb e0       	ldi	r31, 0x0B	; 11
    2380:	81 81       	ldd	r24, Z+1	; 0x01
    2382:	8c 70       	andi	r24, 0x0C	; 12
    2384:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = ALL_EMITTERS_CARWAV_bm;	// set carrier wave pins high.
    2386:	e0 ea       	ldi	r30, 0xA0	; 160
    2388:	f6 e0       	ldi	r31, 0x06	; 6
    238a:	83 ef       	ldi	r24, 0xF3	; 243
    238c:	85 83       	std	Z+5, r24	; 0x05
	PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;
    238e:	81 83       	std	Z+1, r24	; 0x01
	PORTC.DIRSET = (PIN3_bm | PIN7_bm);
    2390:	20 e4       	ldi	r18, 0x40	; 64
    2392:	36 e0       	ldi	r19, 0x06	; 6
    2394:	58 e8       	ldi	r21, 0x88	; 136
    2396:	d9 01       	movw	r26, r18
    2398:	11 96       	adiw	r26, 0x01	; 1
    239a:	5c 93       	st	X, r21
	PORTD.DIRSET =  PIN3_bm;
    239c:	80 e6       	ldi	r24, 0x60	; 96
    239e:	96 e0       	ldi	r25, 0x06	; 6
    23a0:	48 e0       	ldi	r20, 0x08	; 8
    23a2:	dc 01       	movw	r26, r24
    23a4:	11 96       	adiw	r26, 0x01	; 1
    23a6:	4c 93       	st	X, r20
	PORTE.DIRSET = (PIN3_bm | PIN7_bm);
    23a8:	60 e8       	ldi	r22, 0x80	; 128
    23aa:	76 e0       	ldi	r23, 0x06	; 6
    23ac:	db 01       	movw	r26, r22
    23ae:	11 96       	adiw	r26, 0x01	; 1
    23b0:	5c 93       	st	X, r21
	PORTF.DIRSET =  PIN3_bm;
    23b2:	41 83       	std	Z+1, r20	; 0x01

	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    23b4:	d9 01       	movw	r26, r18
    23b6:	16 96       	adiw	r26, 0x06	; 6
    23b8:	5c 93       	st	X, r21
	PORTD.OUTCLR = PIN3_bm;
    23ba:	dc 01       	movw	r26, r24
    23bc:	16 96       	adiw	r26, 0x06	; 6
    23be:	4c 93       	st	X, r20
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    23c0:	db 01       	movw	r26, r22
    23c2:	16 96       	adiw	r26, 0x06	; 6
    23c4:	5c 93       	st	X, r21
	PORTF.OUTCLR = PIN3_bm;
    23c6:	46 83       	std	Z+6, r20	; 0x06
    23c8:	fe 01       	movw	r30, r28
    23ca:	31 96       	adiw	r30, 0x01	; 1
    23cc:	6f 01       	movw	r12, r30
    23ce:	00 e0       	ldi	r16, 0x00	; 0
    23d0:	10 e0       	ldi	r17, 0x00	; 0
	
uint8_t check_collisions(){
	int16_t baseline_meas[6];
	uint8_t channelCtrlBVals[6];
	int16_t measured_vals[6];
	uint8_t dirs=0;
    23d2:	51 2c       	mov	r5, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    23d4:	0f 2e       	mov	r0, r31
    23d6:	ff ec       	ldi	r31, 0xCF	; 207
    23d8:	af 2e       	mov	r10, r31
    23da:	f7 e0       	ldi	r31, 0x07	; 7
    23dc:	bf 2e       	mov	r11, r31
    23de:	f0 2d       	mov	r31, r0
		busy_delay_us(250);
		measured_vals[i] = get_ir_sensor(i);
		int16_t temp = measured_vals[i]-baseline_meas[i];
		//printf("%hd ", temp);
		if((measured_vals[i]-baseline_meas[i])>30){
			dirs = dirs|(1<<i);
    23e0:	88 24       	eor	r8, r8
    23e2:	83 94       	inc	r8
    23e4:	91 2c       	mov	r9, r1
    23e6:	c5 01       	movw	r24, r10
    23e8:	01 97       	sbiw	r24, 0x01	; 1
    23ea:	f1 f7       	brne	.-4      	; 0x23e8 <check_collisions+0x10a>
    23ec:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    23ee:	00 c0       	rjmp	.+0      	; 0x23f0 <check_collisions+0x112>
	//busy_delay_us(250);
	//ADCB.CTRLA |= ADC_FLUSH_bm;
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++){
		busy_delay_us(250);
		measured_vals[i] = get_ir_sensor(i);
    23f0:	80 2f       	mov	r24, r16
    23f2:	c3 de       	rcall	.-634    	; 0x217a <get_ir_sensor>
		int16_t temp = measured_vals[i]-baseline_meas[i];
		//printf("%hd ", temp);
		if((measured_vals[i]-baseline_meas[i])>30){
    23f4:	d6 01       	movw	r26, r12
    23f6:	2d 91       	ld	r18, X+
    23f8:	3d 91       	ld	r19, X+
    23fa:	6d 01       	movw	r12, r26
	//busy_delay_us(250);
	//ADCB.CTRLA |= ADC_FLUSH_bm;
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++){
		busy_delay_us(250);
		measured_vals[i] = get_ir_sensor(i);
    23fc:	90 e0       	ldi	r25, 0x00	; 0
		int16_t temp = measured_vals[i]-baseline_meas[i];
		//printf("%hd ", temp);
		if((measured_vals[i]-baseline_meas[i])>30){
    23fe:	82 1b       	sub	r24, r18
    2400:	93 0b       	sbc	r25, r19
    2402:	4f 97       	sbiw	r24, 0x1f	; 31
    2404:	44 f0       	brlt	.+16     	; 0x2416 <check_collisions+0x138>
			dirs = dirs|(1<<i);
    2406:	c4 01       	movw	r24, r8
    2408:	00 2e       	mov	r0, r16
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <check_collisions+0x132>
    240c:	88 0f       	add	r24, r24
    240e:	99 1f       	adc	r25, r25
    2410:	0a 94       	dec	r0
    2412:	e2 f7       	brpl	.-8      	; 0x240c <check_collisions+0x12e>
    2414:	58 2a       	or	r5, r24
    2416:	0f 5f       	subi	r16, 0xFF	; 255
    2418:	1f 4f       	sbci	r17, 0xFF	; 255
	PORTF.OUTCLR = PIN3_bm;

	//busy_delay_us(250);
	//ADCB.CTRLA |= ADC_FLUSH_bm;
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++){
    241a:	06 30       	cpi	r16, 0x06	; 6
    241c:	11 05       	cpc	r17, r1
    241e:	19 f7       	brne	.-58     	; 0x23e6 <check_collisions+0x108>
		if((measured_vals[i]-baseline_meas[i])>30){
			dirs = dirs|(1<<i);
		}
	}
	//printf("\r\n");
	PORTC.OUTTGL = (PIN3_bm | PIN7_bm);
    2420:	98 e8       	ldi	r25, 0x88	; 136
    2422:	e0 e4       	ldi	r30, 0x40	; 64
    2424:	f6 e0       	ldi	r31, 0x06	; 6
    2426:	97 83       	std	Z+7, r25	; 0x07
	PORTD.OUTTGL =  PIN3_bm;
    2428:	88 e0       	ldi	r24, 0x08	; 8
    242a:	e0 e6       	ldi	r30, 0x60	; 96
    242c:	f6 e0       	ldi	r31, 0x06	; 6
    242e:	87 83       	std	Z+7, r24	; 0x07
	PORTE.OUTTGL = (PIN3_bm | PIN7_bm);
    2430:	e0 e8       	ldi	r30, 0x80	; 128
    2432:	f6 e0       	ldi	r31, 0x06	; 6
    2434:	97 83       	std	Z+7, r25	; 0x07
	PORTF.OUTTGL =  PIN3_bm;
    2436:	e0 ea       	ldi	r30, 0xA0	; 160
    2438:	f6 e0       	ldi	r31, 0x06	; 6
    243a:	87 83       	std	Z+7, r24	; 0x07
    243c:	ae 01       	movw	r20, r28
    243e:	43 5f       	subi	r20, 0xF3	; 243
    2440:	5f 4f       	sbci	r21, 0xFF	; 255
    2442:	e6 e0       	ldi	r30, 0x06	; 6
    2444:	f0 e2       	ldi	r31, 0x20	; 32
	for(uint8_t i=0;i<6;i++) channel[i]->CTRLB = channelCtrlBVals[i];
    2446:	81 91       	ld	r24, Z+
    2448:	91 91       	ld	r25, Z+
    244a:	da 01       	movw	r26, r20
    244c:	2d 91       	ld	r18, X+
    244e:	ad 01       	movw	r20, r26
    2450:	dc 01       	movw	r26, r24
    2452:	14 96       	adiw	r26, 0x04	; 4
    2454:	2c 93       	st	X, r18
    2456:	ee 15       	cp	r30, r14
    2458:	ff 05       	cpc	r31, r15
    245a:	a9 f7       	brne	.-22     	; 0x2446 <check_collisions+0x168>
	TCF2.CTRLB |= ALL_EMITTERS_CARWAV_bm; //reenable carrier wave output
    245c:	e0 e0       	ldi	r30, 0x00	; 0
    245e:	fb e0       	ldi	r31, 0x0B	; 11
    2460:	81 81       	ldd	r24, Z+1	; 0x01
    2462:	83 6f       	ori	r24, 0xF3	; 243
    2464:	81 83       	std	Z+1, r24	; 0x01
	set_all_ir_powers(curr_power);
    2466:	c3 01       	movw	r24, r6
    2468:	0e 94 4b 04 	call	0x896	; 0x896 <set_all_ir_powers>
	return dirs;
}	
    246c:	85 2d       	mov	r24, r5
    246e:	62 96       	adiw	r28, 0x12	; 18
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	1f 91       	pop	r17
    247a:	0f 91       	pop	r16
    247c:	ff 90       	pop	r15
    247e:	ef 90       	pop	r14
    2480:	df 90       	pop	r13
    2482:	cf 90       	pop	r12
    2484:	bf 90       	pop	r11
    2486:	af 90       	pop	r10
    2488:	9f 90       	pop	r9
    248a:	8f 90       	pop	r8
    248c:	7f 90       	pop	r7
    248e:	6f 90       	pop	r6
    2490:	5f 90       	pop	r5
    2492:	08 95       	ret

00002494 <stop>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcast_motor_adjusts()
{
    2494:	83 e0       	ldi	r24, 0x03	; 3
    2496:	e0 e0       	ldi	r30, 0x00	; 0
    2498:	f8 e0       	ldi	r31, 0x08	; 8
    249a:	81 83       	std	Z+1, r24	; 0x01
    249c:	e0 e4       	ldi	r30, 0x40	; 64
    249e:	f8 e0       	ldi	r31, 0x08	; 8
    24a0:	81 83       	std	Z+1, r24	; 0x01
    24a2:	e0 e0       	ldi	r30, 0x00	; 0
    24a4:	f9 e0       	ldi	r31, 0x09	; 9
    24a6:	81 83       	std	Z+1, r24	; 0x01
    24a8:	e0 e4       	ldi	r30, 0x40	; 64
    24aa:	f6 e0       	ldi	r31, 0x06	; 6
    24ac:	93 e3       	ldi	r25, 0x33	; 51
    24ae:	96 83       	std	Z+6, r25	; 0x06
    24b0:	a0 e6       	ldi	r26, 0x60	; 96
    24b2:	b6 e0       	ldi	r27, 0x06	; 6
    24b4:	16 96       	adiw	r26, 0x06	; 6
    24b6:	8c 93       	st	X, r24
    24b8:	16 97       	sbiw	r26, 0x06	; 6
    24ba:	10 8a       	std	Z+16, r1	; 0x10
    24bc:	11 8a       	std	Z+17, r1	; 0x11
    24be:	14 8a       	std	Z+20, r1	; 0x14
    24c0:	15 8a       	std	Z+21, r1	; 0x15
    24c2:	50 96       	adiw	r26, 0x10	; 16
    24c4:	1c 92       	st	X, r1
    24c6:	50 97       	sbiw	r26, 0x10	; 16
    24c8:	51 96       	adiw	r26, 0x11	; 17
    24ca:	1c 92       	st	X, r1
    24cc:	10 92 d2 27 	sts	0x27D2, r1
    24d0:	80 91 88 27 	lds	r24, 0x2788
    24d4:	90 91 89 27 	lds	r25, 0x2789
    24d8:	0c 94 c8 25 	jmp	0x4b90	; 0x4b90 <remove_task>
    24dc:	08 95       	ret

000024de <is_moving>:
    24de:	80 91 d2 27 	lds	r24, 0x27D2
    24e2:	88 23       	and	r24, r24
    24e4:	24 f4       	brge	.+8      	; 0x24ee <is_moving+0x10>
    24e6:	80 91 d2 27 	lds	r24, 0x27D2
    24ea:	87 70       	andi	r24, 0x07	; 7
    24ec:	08 95       	ret
    24ee:	8f ef       	ldi	r24, 0xFF	; 255
    24f0:	08 95       	ret

000024f2 <move_steps>:
    24f2:	4f 92       	push	r4
    24f4:	5f 92       	push	r5
    24f6:	6f 92       	push	r6
    24f8:	7f 92       	push	r7
    24fa:	8f 92       	push	r8
    24fc:	9f 92       	push	r9
    24fe:	af 92       	push	r10
    2500:	bf 92       	push	r11
    2502:	cf 92       	push	r12
    2504:	df 92       	push	r13
    2506:	ef 92       	push	r14
    2508:	ff 92       	push	r15
    250a:	0f 93       	push	r16
    250c:	1f 93       	push	r17
    250e:	cf 93       	push	r28
    2510:	df 93       	push	r29
    2512:	cd b7       	in	r28, 0x3d	; 61
    2514:	de b7       	in	r29, 0x3e	; 62
    2516:	29 97       	sbiw	r28, 0x09	; 9
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	de bf       	out	0x3e, r29	; 62
    251c:	18 2f       	mov	r17, r24
    251e:	7b 01       	movw	r14, r22
    2520:	de df       	rcall	.-68     	; 0x24de <is_moving>
    2522:	88 23       	and	r24, r24
    2524:	0c f0       	brlt	.+2      	; 0x2528 <move_steps+0x36>
    2526:	79 c1       	rjmp	.+754    	; 0x281a <move_steps+0x328>
    2528:	81 2f       	mov	r24, r17
    252a:	87 70       	andi	r24, 0x07	; 7
    252c:	80 68       	ori	r24, 0x80	; 128
    252e:	80 93 d2 27 	sts	0x27D2, r24
    2532:	a0 90 82 29 	lds	r10, 0x2982
    2536:	b0 90 83 29 	lds	r11, 0x2983
    253a:	aa 0c       	add	r10, r10
    253c:	bb 1c       	adc	r11, r11
    253e:	aa 0c       	add	r10, r10
    2540:	bb 1c       	adc	r11, r11
    2542:	aa 0c       	add	r10, r10
    2544:	bb 1c       	adc	r11, r11
    2546:	aa 0c       	add	r10, r10
    2548:	bb 1c       	adc	r11, r11
    254a:	aa 0c       	add	r10, r10
    254c:	bb 1c       	adc	r11, r11
    254e:	80 90 9e 29 	lds	r8, 0x299E
    2552:	90 90 9f 29 	lds	r9, 0x299F
    2556:	88 0c       	add	r8, r8
    2558:	99 1c       	adc	r9, r9
    255a:	88 0c       	add	r8, r8
    255c:	99 1c       	adc	r9, r9
    255e:	88 0c       	add	r8, r8
    2560:	99 1c       	adc	r9, r9
    2562:	88 0c       	add	r8, r8
    2564:	99 1c       	adc	r9, r9
    2566:	88 0c       	add	r8, r8
    2568:	99 1c       	adc	r9, r9
    256a:	81 2f       	mov	r24, r17
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9c 01       	movw	r18, r24
    2570:	22 0f       	add	r18, r18
    2572:	33 1f       	adc	r19, r19
    2574:	82 0f       	add	r24, r18
    2576:	93 1f       	adc	r25, r19
    2578:	88 0f       	add	r24, r24
    257a:	99 1f       	adc	r25, r25
    257c:	82 53       	subi	r24, 0x32	; 50
    257e:	94 4d       	sbci	r25, 0xD4	; 212
    2580:	9e 01       	movw	r18, r28
    2582:	29 5f       	subi	r18, 0xF9	; 249
    2584:	3f 4f       	sbci	r19, 0xFF	; 255
    2586:	69 01       	movw	r12, r18
    2588:	fe 01       	movw	r30, r28
    258a:	31 96       	adiw	r30, 0x01	; 1
    258c:	00 e0       	ldi	r16, 0x00	; 0
    258e:	10 e0       	ldi	r17, 0x00	; 0
    2590:	3c 01       	movw	r6, r24
    2592:	dc 01       	movw	r26, r24
    2594:	4d 91       	ld	r20, X+
    2596:	5c 91       	ld	r21, X
    2598:	41 15       	cp	r20, r1
    259a:	51 05       	cpc	r21, r1
    259c:	29 f4       	brne	.+10     	; 0x25a8 <move_steps+0xb6>
    259e:	10 82       	st	Z, r1
    25a0:	11 82       	std	Z+1, r1	; 0x01
    25a2:	d9 01       	movw	r26, r18
    25a4:	1c 92       	st	X, r1
    25a6:	18 c0       	rjmp	.+48     	; 0x25d8 <move_steps+0xe6>
    25a8:	ba 01       	movw	r22, r20
    25aa:	55 23       	and	r21, r21
    25ac:	24 f4       	brge	.+8      	; 0x25b6 <move_steps+0xc4>
    25ae:	66 27       	eor	r22, r22
    25b0:	77 27       	eor	r23, r23
    25b2:	64 1b       	sub	r22, r20
    25b4:	75 0b       	sbc	r23, r21
    25b6:	6a 0d       	add	r22, r10
    25b8:	7b 1d       	adc	r23, r11
    25ba:	60 83       	st	Z, r22
    25bc:	71 83       	std	Z+1, r23	; 0x01
    25be:	d3 01       	movw	r26, r6
    25c0:	11 96       	adiw	r26, 0x01	; 1
    25c2:	4c 91       	ld	r20, X
    25c4:	44 0f       	add	r20, r20
    25c6:	44 0b       	sbc	r20, r20
    25c8:	44 0f       	add	r20, r20
    25ca:	4f 5f       	subi	r20, 0xFF	; 255
    25cc:	d9 01       	movw	r26, r18
    25ce:	4c 93       	st	X, r20
    25d0:	08 0d       	add	r16, r8
    25d2:	19 1d       	adc	r17, r9
    25d4:	06 0f       	add	r16, r22
    25d6:	17 1f       	adc	r17, r23
    25d8:	02 96       	adiw	r24, 0x02	; 2
    25da:	32 96       	adiw	r30, 0x02	; 2
    25dc:	2f 5f       	subi	r18, 0xFF	; 255
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	ec 15       	cp	r30, r12
    25e2:	fd 05       	cpc	r31, r13
    25e4:	a9 f6       	brne	.-86     	; 0x2590 <move_steps+0x9e>
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	59 e0       	ldi	r21, 0x09	; 9
    25ea:	fa 01       	movw	r30, r20
    25ec:	06 a3       	std	Z+38, r16	; 0x26
    25ee:	17 a3       	std	Z+39, r17	; 0x27
    25f0:	a0 e4       	ldi	r26, 0x40	; 64
    25f2:	b8 e0       	ldi	r27, 0x08	; 8
    25f4:	96 96       	adiw	r26, 0x26	; 38
    25f6:	0d 93       	st	X+, r16
    25f8:	1c 93       	st	X, r17
    25fa:	97 97       	sbiw	r26, 0x27	; 39
    25fc:	80 e0       	ldi	r24, 0x00	; 0
    25fe:	98 e0       	ldi	r25, 0x08	; 8
    2600:	fc 01       	movw	r30, r24
    2602:	06 a3       	std	Z+38, r16	; 0x26
    2604:	17 a3       	std	Z+39, r17	; 0x27
    2606:	29 81       	ldd	r18, Y+1	; 0x01
    2608:	3a 81       	ldd	r19, Y+2	; 0x02
    260a:	22 a7       	std	Z+42, r18	; 0x2a
    260c:	33 a7       	std	Z+43, r19	; 0x2b
    260e:	20 a7       	std	Z+40, r18	; 0x28
    2610:	31 a7       	std	Z+41, r19	; 0x29
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	9a 96       	adiw	r26, 0x2a	; 42
    2618:	8d 93       	st	X+, r24
    261a:	9c 93       	st	X, r25
    261c:	9b 97       	sbiw	r26, 0x2b	; 43
    261e:	98 96       	adiw	r26, 0x28	; 40
    2620:	8d 93       	st	X+, r24
    2622:	9c 93       	st	X, r25
    2624:	99 97       	sbiw	r26, 0x29	; 41
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	da 01       	movw	r26, r20
    262c:	9a 96       	adiw	r26, 0x2a	; 42
    262e:	8d 93       	st	X+, r24
    2630:	9c 93       	st	X, r25
    2632:	9b 97       	sbiw	r26, 0x2b	; 43
    2634:	98 96       	adiw	r26, 0x28	; 40
    2636:	8d 93       	st	X+, r24
    2638:	9c 93       	st	X, r25
    263a:	99 97       	sbiw	r26, 0x29	; 41
    263c:	a0 90 9e 29 	lds	r10, 0x299E
    2640:	b0 90 9f 29 	lds	r11, 0x299F
    2644:	aa 0c       	add	r10, r10
    2646:	bb 1c       	adc	r11, r11
    2648:	aa 0c       	add	r10, r10
    264a:	bb 1c       	adc	r11, r11
    264c:	aa 0c       	add	r10, r10
    264e:	bb 1c       	adc	r11, r11
    2650:	aa 0c       	add	r10, r10
    2652:	bb 1c       	adc	r11, r11
    2654:	aa 0c       	add	r10, r10
    2656:	bb 1c       	adc	r11, r11
    2658:	fe 01       	movw	r30, r28
    265a:	31 96       	adiw	r30, 0x01	; 1
    265c:	6f 01       	movw	r12, r30
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	e0 e0       	ldi	r30, 0x00	; 0
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	68 94       	set
    2666:	88 24       	eor	r8, r8
    2668:	86 f8       	bld	r8, 6
    266a:	99 24       	eor	r9, r9
    266c:	93 f8       	bld	r9, 3
    266e:	61 2c       	mov	r6, r1
    2670:	68 94       	set
    2672:	77 24       	eor	r7, r7
    2674:	73 f8       	bld	r7, 3
    2676:	0f 2e       	mov	r0, r31
    2678:	41 2c       	mov	r4, r1
    267a:	f9 e0       	ldi	r31, 0x09	; 9
    267c:	5f 2e       	mov	r5, r31
    267e:	f0 2d       	mov	r31, r0
    2680:	d6 01       	movw	r26, r12
    2682:	2d 91       	ld	r18, X+
    2684:	3d 91       	ld	r19, X+
    2686:	6d 01       	movw	r12, r26
    2688:	21 15       	cp	r18, r1
    268a:	31 05       	cpc	r19, r1
    268c:	69 f1       	breq	.+90     	; 0x26e8 <move_steps+0x1f6>
    268e:	41 30       	cpi	r20, 0x01	; 1
    2690:	81 f0       	breq	.+32     	; 0x26b2 <move_steps+0x1c0>
    2692:	18 f0       	brcs	.+6      	; 0x269a <move_steps+0x1a8>
    2694:	42 30       	cpi	r20, 0x02	; 2
    2696:	c9 f0       	breq	.+50     	; 0x26ca <move_steps+0x1d8>
    2698:	23 c0       	rjmp	.+70     	; 0x26e0 <move_steps+0x1ee>
    269a:	c8 01       	movw	r24, r16
    269c:	8e 1b       	sub	r24, r30
    269e:	9f 0b       	sbc	r25, r31
    26a0:	b8 01       	movw	r22, r16
    26a2:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <__udivmodhi4>
    26a6:	d3 01       	movw	r26, r6
    26a8:	90 96       	adiw	r26, 0x20	; 32
    26aa:	8d 93       	st	X+, r24
    26ac:	9c 93       	st	X, r25
    26ae:	91 97       	sbiw	r26, 0x21	; 33
    26b0:	17 c0       	rjmp	.+46     	; 0x26e0 <move_steps+0x1ee>
    26b2:	c8 01       	movw	r24, r16
    26b4:	8e 1b       	sub	r24, r30
    26b6:	9f 0b       	sbc	r25, r31
    26b8:	b8 01       	movw	r22, r16
    26ba:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <__udivmodhi4>
    26be:	d4 01       	movw	r26, r8
    26c0:	90 96       	adiw	r26, 0x20	; 32
    26c2:	8d 93       	st	X+, r24
    26c4:	9c 93       	st	X, r25
    26c6:	91 97       	sbiw	r26, 0x21	; 33
    26c8:	0b c0       	rjmp	.+22     	; 0x26e0 <move_steps+0x1ee>
    26ca:	c8 01       	movw	r24, r16
    26cc:	8e 1b       	sub	r24, r30
    26ce:	9f 0b       	sbc	r25, r31
    26d0:	b8 01       	movw	r22, r16
    26d2:	0e 94 60 35 	call	0x6ac0	; 0x6ac0 <__udivmodhi4>
    26d6:	d2 01       	movw	r26, r4
    26d8:	90 96       	adiw	r26, 0x20	; 32
    26da:	8d 93       	st	X+, r24
    26dc:	9c 93       	st	X, r25
    26de:	91 97       	sbiw	r26, 0x21	; 33
    26e0:	ea 0d       	add	r30, r10
    26e2:	fb 1d       	adc	r31, r11
    26e4:	e2 0f       	add	r30, r18
    26e6:	f3 1f       	adc	r31, r19
    26e8:	4f 5f       	subi	r20, 0xFF	; 255
    26ea:	43 30       	cpi	r20, 0x03	; 3
    26ec:	49 f6       	brne	.-110    	; 0x2680 <move_steps+0x18e>
    26ee:	0e 17       	cp	r16, r30
    26f0:	1f 07       	cpc	r17, r31
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <move_steps+0x204>
    26f4:	94 c0       	rjmp	.+296    	; 0x281e <move_steps+0x32c>
    26f6:	1f 93       	push	r17
    26f8:	0f 93       	push	r16
    26fa:	ff 93       	push	r31
    26fc:	ef 93       	push	r30
    26fe:	84 ea       	ldi	r24, 0xA4	; 164
    2700:	91 e2       	ldi	r25, 0x21	; 33
    2702:	9f 93       	push	r25
    2704:	8f 93       	push	r24
    2706:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	0f 90       	pop	r0
    2716:	83 c0       	rjmp	.+262    	; 0x281e <move_steps+0x32c>
    2718:	5f 5f       	subi	r21, 0xFF	; 255
    271a:	4f ef       	ldi	r20, 0xFF	; 255
    271c:	45 0f       	add	r20, r21
    271e:	e7 e0       	ldi	r30, 0x07	; 7
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	ec 0f       	add	r30, r28
    2724:	fd 1f       	adc	r31, r29
    2726:	e4 0f       	add	r30, r20
    2728:	f1 1d       	adc	r31, r1
    272a:	60 81       	ld	r22, Z
    272c:	66 23       	and	r22, r22
    272e:	64 f5       	brge	.+88     	; 0x2788 <move_steps+0x296>
    2730:	41 30       	cpi	r20, 0x01	; 1
    2732:	89 f0       	breq	.+34     	; 0x2756 <move_steps+0x264>
    2734:	18 f0       	brcs	.+6      	; 0x273c <move_steps+0x24a>
    2736:	42 30       	cpi	r20, 0x02	; 2
    2738:	d9 f0       	breq	.+54     	; 0x2770 <move_steps+0x27e>
    273a:	54 c0       	rjmp	.+168    	; 0x27e4 <move_steps+0x2f2>
    273c:	fc 01       	movw	r30, r24
    273e:	c1 82       	std	Z+1, r12	; 0x01
    2740:	50 96       	adiw	r26, 0x10	; 16
    2742:	7c 93       	st	X, r23
    2744:	50 97       	sbiw	r26, 0x10	; 16
    2746:	15 96       	adiw	r26, 0x05	; 5
    2748:	4c 91       	ld	r20, X
    274a:	15 97       	sbiw	r26, 0x05	; 5
    274c:	42 60       	ori	r20, 0x02	; 2
    274e:	15 96       	adiw	r26, 0x05	; 5
    2750:	4c 93       	st	X, r20
    2752:	15 97       	sbiw	r26, 0x05	; 5
    2754:	e1 cf       	rjmp	.-62     	; 0x2718 <move_steps+0x226>
    2756:	f9 01       	movw	r30, r18
    2758:	c1 82       	std	Z+1, r12	; 0x01
    275a:	54 96       	adiw	r26, 0x14	; 20
    275c:	7c 93       	st	X, r23
    275e:	54 97       	sbiw	r26, 0x14	; 20
    2760:	15 96       	adiw	r26, 0x05	; 5
    2762:	4c 91       	ld	r20, X
    2764:	15 97       	sbiw	r26, 0x05	; 5
    2766:	40 62       	ori	r20, 0x20	; 32
    2768:	15 96       	adiw	r26, 0x05	; 5
    276a:	4c 93       	st	X, r20
    276c:	15 97       	sbiw	r26, 0x05	; 5
    276e:	d4 cf       	rjmp	.-88     	; 0x2718 <move_steps+0x226>
    2770:	83 e1       	ldi	r24, 0x13	; 19
    2772:	e0 e0       	ldi	r30, 0x00	; 0
    2774:	f9 e0       	ldi	r31, 0x09	; 9
    2776:	81 83       	std	Z+1, r24	; 0x01
    2778:	e0 e6       	ldi	r30, 0x60	; 96
    277a:	f6 e0       	ldi	r31, 0x06	; 6
    277c:	80 e4       	ldi	r24, 0x40	; 64
    277e:	80 8b       	std	Z+16, r24	; 0x10
    2780:	85 81       	ldd	r24, Z+5	; 0x05
    2782:	82 60       	ori	r24, 0x02	; 2
    2784:	85 83       	std	Z+5, r24	; 0x05
    2786:	31 c0       	rjmp	.+98     	; 0x27ea <move_steps+0x2f8>
    2788:	16 16       	cp	r1, r22
    278a:	64 f5       	brge	.+88     	; 0x27e4 <move_steps+0x2f2>
    278c:	41 30       	cpi	r20, 0x01	; 1
    278e:	89 f0       	breq	.+34     	; 0x27b2 <move_steps+0x2c0>
    2790:	18 f0       	brcs	.+6      	; 0x2798 <move_steps+0x2a6>
    2792:	42 30       	cpi	r20, 0x02	; 2
    2794:	d9 f0       	breq	.+54     	; 0x27cc <move_steps+0x2da>
    2796:	26 c0       	rjmp	.+76     	; 0x27e4 <move_steps+0x2f2>
    2798:	fc 01       	movw	r30, r24
    279a:	d1 82       	std	Z+1, r13	; 0x01
    279c:	51 96       	adiw	r26, 0x11	; 17
    279e:	7c 93       	st	X, r23
    27a0:	51 97       	sbiw	r26, 0x11	; 17
    27a2:	15 96       	adiw	r26, 0x05	; 5
    27a4:	4c 91       	ld	r20, X
    27a6:	15 97       	sbiw	r26, 0x05	; 5
    27a8:	41 60       	ori	r20, 0x01	; 1
    27aa:	15 96       	adiw	r26, 0x05	; 5
    27ac:	4c 93       	st	X, r20
    27ae:	15 97       	sbiw	r26, 0x05	; 5
    27b0:	b3 cf       	rjmp	.-154    	; 0x2718 <move_steps+0x226>
    27b2:	f9 01       	movw	r30, r18
    27b4:	d1 82       	std	Z+1, r13	; 0x01
    27b6:	55 96       	adiw	r26, 0x15	; 21
    27b8:	7c 93       	st	X, r23
    27ba:	55 97       	sbiw	r26, 0x15	; 21
    27bc:	15 96       	adiw	r26, 0x05	; 5
    27be:	4c 91       	ld	r20, X
    27c0:	15 97       	sbiw	r26, 0x05	; 5
    27c2:	40 61       	ori	r20, 0x10	; 16
    27c4:	15 96       	adiw	r26, 0x05	; 5
    27c6:	4c 93       	st	X, r20
    27c8:	15 97       	sbiw	r26, 0x05	; 5
    27ca:	a6 cf       	rjmp	.-180    	; 0x2718 <move_steps+0x226>
    27cc:	83 e2       	ldi	r24, 0x23	; 35
    27ce:	e0 e0       	ldi	r30, 0x00	; 0
    27d0:	f9 e0       	ldi	r31, 0x09	; 9
    27d2:	81 83       	std	Z+1, r24	; 0x01
    27d4:	e0 e6       	ldi	r30, 0x60	; 96
    27d6:	f6 e0       	ldi	r31, 0x06	; 6
    27d8:	80 e4       	ldi	r24, 0x40	; 64
    27da:	81 8b       	std	Z+17, r24	; 0x11
    27dc:	85 81       	ldd	r24, Z+5	; 0x05
    27de:	81 60       	ori	r24, 0x01	; 1
    27e0:	85 83       	std	Z+5, r24	; 0x05
    27e2:	03 c0       	rjmp	.+6      	; 0x27ea <move_steps+0x2f8>
    27e4:	53 30       	cpi	r21, 0x03	; 3
    27e6:	08 f4       	brcc	.+2      	; 0x27ea <move_steps+0x2f8>
    27e8:	97 cf       	rjmp	.-210    	; 0x2718 <move_steps+0x226>
    27ea:	98 01       	movw	r18, r16
    27ec:	d7 01       	movw	r26, r14
    27ee:	0e 94 8d 35 	call	0x6b1a	; 0x6b1a <__umulhisi3>
    27f2:	68 94       	set
    27f4:	14 f8       	bld	r1, 4
    27f6:	96 95       	lsr	r25
    27f8:	87 95       	ror	r24
    27fa:	77 95       	ror	r23
    27fc:	67 95       	ror	r22
    27fe:	16 94       	lsr	r1
    2800:	d1 f7       	brne	.-12     	; 0x27f6 <move_steps+0x304>
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	4a e4       	ldi	r20, 0x4A	; 74
    2808:	52 e1       	ldi	r21, 0x12	; 18
    280a:	0e 94 b2 24 	call	0x4964	; 0x4964 <schedule_task>
    280e:	80 93 88 27 	sts	0x2788, r24
    2812:	90 93 89 27 	sts	0x2789, r25
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	13 c0       	rjmp	.+38     	; 0x2840 <move_steps+0x34e>
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	11 c0       	rjmp	.+34     	; 0x2840 <move_steps+0x34e>
    281e:	51 e0       	ldi	r21, 0x01	; 1
    2820:	20 e4       	ldi	r18, 0x40	; 64
    2822:	38 e0       	ldi	r19, 0x08	; 8
    2824:	0f 2e       	mov	r0, r31
    2826:	f3 e2       	ldi	r31, 0x23	; 35
    2828:	df 2e       	mov	r13, r31
    282a:	f0 2d       	mov	r31, r0
    282c:	a0 e4       	ldi	r26, 0x40	; 64
    282e:	b6 e0       	ldi	r27, 0x06	; 6
    2830:	70 e4       	ldi	r23, 0x40	; 64
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	98 e0       	ldi	r25, 0x08	; 8
    2836:	0f 2e       	mov	r0, r31
    2838:	f3 e1       	ldi	r31, 0x13	; 19
    283a:	cf 2e       	mov	r12, r31
    283c:	f0 2d       	mov	r31, r0
    283e:	6d cf       	rjmp	.-294    	; 0x271a <move_steps+0x228>
    2840:	29 96       	adiw	r28, 0x09	; 9
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	df 91       	pop	r29
    2848:	cf 91       	pop	r28
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
    2858:	af 90       	pop	r10
    285a:	9f 90       	pop	r9
    285c:	8f 90       	pop	r8
    285e:	7f 90       	pop	r7
    2860:	6f 90       	pop	r6
    2862:	5f 90       	pop	r5
    2864:	4f 90       	pop	r4
    2866:	08 95       	ret

00002868 <walk>:
    2868:	af 92       	push	r10
    286a:	bf 92       	push	r11
    286c:	cf 92       	push	r12
    286e:	df 92       	push	r13
    2870:	ef 92       	push	r14
    2872:	ff 92       	push	r15
    2874:	1f 93       	push	r17
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	18 2f       	mov	r17, r24
    287c:	eb 01       	movw	r28, r22
    287e:	a8 2e       	mov	r10, r24
    2880:	b1 2c       	mov	r11, r1
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__floatunsisf>
    288a:	6b 01       	movw	r12, r22
    288c:	7c 01       	movw	r14, r24
    288e:	f5 01       	movw	r30, r10
    2890:	ee 0f       	add	r30, r30
    2892:	ff 1f       	adc	r31, r31
    2894:	ed 51       	subi	r30, 0x1D	; 29
    2896:	f6 4d       	sbci	r31, 0xD6	; 214
    2898:	60 81       	ld	r22, Z
    289a:	71 81       	ldd	r23, Z+1	; 0x01
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__floatunsisf>
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	4a e7       	ldi	r20, 0x7A	; 122
    28aa:	54 e4       	ldi	r21, 0x44	; 68
    28ac:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    28b0:	9b 01       	movw	r18, r22
    28b2:	ac 01       	movw	r20, r24
    28b4:	c7 01       	movw	r24, r14
    28b6:	b6 01       	movw	r22, r12
    28b8:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    28bc:	0e 94 76 2f 	call	0x5eec	; 0x5eec <__fixunssfsi>
    28c0:	e6 2e       	mov	r14, r22
    28c2:	f7 2e       	mov	r15, r23
    28c4:	7f 93       	push	r23
    28c6:	6f 93       	push	r22
    28c8:	df 93       	push	r29
    28ca:	cf 93       	push	r28
    28cc:	1f 92       	push	r1
    28ce:	1f 93       	push	r17
    28d0:	8a ee       	ldi	r24, 0xEA	; 234
    28d2:	91 e2       	ldi	r25, 0x21	; 33
    28d4:	9f 93       	push	r25
    28d6:	8f 93       	push	r24
    28d8:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    28dc:	6e 2d       	mov	r22, r14
    28de:	7f 2d       	mov	r23, r15
    28e0:	81 2f       	mov	r24, r17
    28e2:	07 de       	rcall	.-1010   	; 0x24f2 <move_steps>
    28e4:	8d b7       	in	r24, 0x3d	; 61
    28e6:	9e b7       	in	r25, 0x3e	; 62
    28e8:	08 96       	adiw	r24, 0x08	; 8
    28ea:	8d bf       	out	0x3d, r24	; 61
    28ec:	9e bf       	out	0x3e, r25	; 62
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
    28fc:	bf 90       	pop	r11
    28fe:	af 90       	pop	r10
    2900:	08 95       	ret

00002902 <set_mm_per_kilostep>:
    2902:	e8 2f       	mov	r30, r24
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	ee 0f       	add	r30, r30
    2908:	ff 1f       	adc	r31, r31
    290a:	ed 51       	subi	r30, 0x1D	; 29
    290c:	f6 4d       	sbci	r31, 0xD6	; 214
    290e:	60 83       	st	Z, r22
    2910:	71 83       	std	Z+1, r23	; 0x01
    2912:	08 95       	ret

00002914 <read_motor_settings>:
    2914:	ff 92       	push	r15
    2916:	0f 93       	push	r16
    2918:	1f 93       	push	r17
    291a:	cf 93       	push	r28
    291c:	df 93       	push	r29
    291e:	c0 e0       	ldi	r28, 0x00	; 0
    2920:	d0 e0       	ldi	r29, 0x00	; 0
    2922:	1b c0       	rjmp	.+54     	; 0x295a <read_motor_settings+0x46>
    2924:	ce 01       	movw	r24, r28
    2926:	40 96       	adiw	r24, 0x10	; 16
    2928:	0e 94 a3 03 	call	0x746	; 0x746 <EEPROM_read_byte>
    292c:	f8 2e       	mov	r15, r24
    292e:	ce 01       	movw	r24, r28
    2930:	41 96       	adiw	r24, 0x11	; 17
    2932:	0e 94 a3 03 	call	0x746	; 0x746 <EEPROM_read_byte>
    2936:	fe 01       	movw	r30, r28
    2938:	e2 53       	subi	r30, 0x32	; 50
    293a:	f4 4d       	sbci	r31, 0xD4	; 212
    293c:	2f 2d       	mov	r18, r15
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	32 2f       	mov	r19, r18
    2942:	22 27       	eor	r18, r18
    2944:	28 2b       	or	r18, r24
    2946:	20 83       	st	Z, r18
    2948:	31 83       	std	Z+1, r19	; 0x01
    294a:	22 96       	adiw	r28, 0x02	; 2
    294c:	c0 17       	cp	r28, r16
    294e:	d1 07       	cpc	r29, r17
    2950:	49 f7       	brne	.-46     	; 0x2924 <read_motor_settings+0x10>
    2952:	00 33       	cpi	r16, 0x30	; 48
    2954:	11 05       	cpc	r17, r1
    2956:	29 f0       	breq	.+10     	; 0x2962 <read_motor_settings+0x4e>
    2958:	e8 01       	movw	r28, r16
    295a:	8e 01       	movw	r16, r28
    295c:	0a 5f       	subi	r16, 0xFA	; 250
    295e:	1f 4f       	sbci	r17, 0xFF	; 255
    2960:	e1 cf       	rjmp	.-62     	; 0x2924 <read_motor_settings+0x10>
    2962:	03 ee       	ldi	r16, 0xE3	; 227
    2964:	19 e2       	ldi	r17, 0x29	; 41
    2966:	c0 e4       	ldi	r28, 0x40	; 64
    2968:	d0 e0       	ldi	r29, 0x00	; 0
    296a:	ce 01       	movw	r24, r28
    296c:	0e 94 a3 03 	call	0x746	; 0x746 <EEPROM_read_byte>
    2970:	f8 2e       	mov	r15, r24
    2972:	ce 01       	movw	r24, r28
    2974:	01 96       	adiw	r24, 0x01	; 1
    2976:	0e 94 a3 03 	call	0x746	; 0x746 <EEPROM_read_byte>
    297a:	2f 2d       	mov	r18, r15
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	32 2f       	mov	r19, r18
    2980:	22 27       	eor	r18, r18
    2982:	28 2b       	or	r18, r24
    2984:	f8 01       	movw	r30, r16
    2986:	21 93       	st	Z+, r18
    2988:	31 93       	st	Z+, r19
    298a:	8f 01       	movw	r16, r30
    298c:	22 96       	adiw	r28, 0x02	; 2
    298e:	c0 35       	cpi	r28, 0x50	; 80
    2990:	d1 05       	cpc	r29, r1
    2992:	59 f7       	brne	.-42     	; 0x296a <read_motor_settings+0x56>
    2994:	df 91       	pop	r29
    2996:	cf 91       	pop	r28
    2998:	1f 91       	pop	r17
    299a:	0f 91       	pop	r16
    299c:	ff 90       	pop	r15
    299e:	08 95       	ret

000029a0 <motor_init>:
    29a0:	83 e3       	ldi	r24, 0x33	; 51
    29a2:	e0 e4       	ldi	r30, 0x40	; 64
    29a4:	f6 e0       	ldi	r31, 0x06	; 6
    29a6:	81 83       	std	Z+1, r24	; 0x01
    29a8:	83 e0       	ldi	r24, 0x03	; 3
    29aa:	e0 e6       	ldi	r30, 0x60	; 96
    29ac:	f6 e0       	ldi	r31, 0x06	; 6
    29ae:	81 83       	std	Z+1, r24	; 0x01
    29b0:	e0 e0       	ldi	r30, 0x00	; 0
    29b2:	f8 e0       	ldi	r31, 0x08	; 8
    29b4:	97 e0       	ldi	r25, 0x07	; 7
    29b6:	90 83       	st	Z, r25
    29b8:	81 83       	std	Z+1, r24	; 0x01
    29ba:	e0 e4       	ldi	r30, 0x40	; 64
    29bc:	f8 e0       	ldi	r31, 0x08	; 8
    29be:	90 83       	st	Z, r25
    29c0:	81 83       	std	Z+1, r24	; 0x01
    29c2:	e0 e0       	ldi	r30, 0x00	; 0
    29c4:	f9 e0       	ldi	r31, 0x09	; 9
    29c6:	90 83       	st	Z, r25
    29c8:	81 83       	std	Z+1, r24	; 0x01
    29ca:	10 92 d2 27 	sts	0x27D2, r1
    29ce:	84 e1       	ldi	r24, 0x14	; 20
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	80 93 82 29 	sts	0x2982, r24
    29d6:	90 93 83 29 	sts	0x2983, r25
    29da:	8e e1       	ldi	r24, 0x1E	; 30
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	80 93 9e 29 	sts	0x299E, r24
    29e2:	90 93 9f 29 	sts	0x299F, r25
    29e6:	96 cf       	rjmp	.-212    	; 0x2914 <read_motor_settings>
    29e8:	08 95       	ret

000029ea <write_motor_settings>:
    29ea:	ff 92       	push	r15
    29ec:	0f 93       	push	r16
    29ee:	1f 93       	push	r17
    29f0:	cf 93       	push	r28
    29f2:	df 93       	push	r29
    29f4:	c0 e0       	ldi	r28, 0x00	; 0
    29f6:	d0 e0       	ldi	r29, 0x00	; 0
    29f8:	16 c0       	rjmp	.+44     	; 0x2a26 <write_motor_settings+0x3c>
    29fa:	fe 01       	movw	r30, r28
    29fc:	e2 53       	subi	r30, 0x32	; 50
    29fe:	f4 4d       	sbci	r31, 0xD4	; 212
    2a00:	f0 80       	ld	r15, Z
    2a02:	61 81       	ldd	r22, Z+1	; 0x01
    2a04:	ce 01       	movw	r24, r28
    2a06:	40 96       	adiw	r24, 0x10	; 16
    2a08:	0e 94 be 03 	call	0x77c	; 0x77c <EEPROM_write_byte>
    2a0c:	6f 2d       	mov	r22, r15
    2a0e:	ce 01       	movw	r24, r28
    2a10:	41 96       	adiw	r24, 0x11	; 17
    2a12:	0e 94 be 03 	call	0x77c	; 0x77c <EEPROM_write_byte>
    2a16:	22 96       	adiw	r28, 0x02	; 2
    2a18:	c0 17       	cp	r28, r16
    2a1a:	d1 07       	cpc	r29, r17
    2a1c:	71 f7       	brne	.-36     	; 0x29fa <write_motor_settings+0x10>
    2a1e:	00 33       	cpi	r16, 0x30	; 48
    2a20:	11 05       	cpc	r17, r1
    2a22:	29 f0       	breq	.+10     	; 0x2a2e <write_motor_settings+0x44>
    2a24:	e8 01       	movw	r28, r16
    2a26:	8e 01       	movw	r16, r28
    2a28:	0a 5f       	subi	r16, 0xFA	; 250
    2a2a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a2c:	e6 cf       	rjmp	.-52     	; 0x29fa <write_motor_settings+0x10>
    2a2e:	03 ee       	ldi	r16, 0xE3	; 227
    2a30:	19 e2       	ldi	r17, 0x29	; 41
    2a32:	c0 e4       	ldi	r28, 0x40	; 64
    2a34:	d0 e0       	ldi	r29, 0x00	; 0
    2a36:	f8 01       	movw	r30, r16
    2a38:	f0 80       	ld	r15, Z
    2a3a:	61 81       	ldd	r22, Z+1	; 0x01
    2a3c:	0e 5f       	subi	r16, 0xFE	; 254
    2a3e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a40:	ce 01       	movw	r24, r28
    2a42:	0e 94 be 03 	call	0x77c	; 0x77c <EEPROM_write_byte>
    2a46:	6f 2d       	mov	r22, r15
    2a48:	ce 01       	movw	r24, r28
    2a4a:	01 96       	adiw	r24, 0x01	; 1
    2a4c:	0e 94 be 03 	call	0x77c	; 0x77c <EEPROM_write_byte>
    2a50:	22 96       	adiw	r28, 0x02	; 2
    2a52:	c0 35       	cpi	r28, 0x50	; 80
    2a54:	d1 05       	cpc	r29, r1
    2a56:	79 f7       	brne	.-34     	; 0x2a36 <write_motor_settings+0x4c>
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	08 95       	ret

00002a64 <print_motor_values>:
    2a64:	9f 92       	push	r9
    2a66:	af 92       	push	r10
    2a68:	bf 92       	push	r11
    2a6a:	cf 92       	push	r12
    2a6c:	df 92       	push	r13
    2a6e:	ef 92       	push	r14
    2a70:	ff 92       	push	r15
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	87 e2       	ldi	r24, 0x27	; 39
    2a7c:	92 e2       	ldi	r25, 0x22	; 34
    2a7e:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    2a82:	0f 2e       	mov	r0, r31
    2a84:	fe ec       	ldi	r31, 0xCE	; 206
    2a86:	cf 2e       	mov	r12, r31
    2a88:	fb e2       	ldi	r31, 0x2B	; 43
    2a8a:	df 2e       	mov	r13, r31
    2a8c:	f0 2d       	mov	r31, r0
    2a8e:	e1 2c       	mov	r14, r1
    2a90:	f1 2c       	mov	r15, r1
    2a92:	0f 2e       	mov	r0, r31
    2a94:	f5 e3       	ldi	r31, 0x35	; 53
    2a96:	af 2e       	mov	r10, r31
    2a98:	f2 e2       	ldi	r31, 0x22	; 34
    2a9a:	bf 2e       	mov	r11, r31
    2a9c:	f0 2d       	mov	r31, r0
    2a9e:	0b e3       	ldi	r16, 0x3B	; 59
    2aa0:	12 e2       	ldi	r17, 0x22	; 34
    2aa2:	ff 92       	push	r15
    2aa4:	ef 92       	push	r14
    2aa6:	bf 92       	push	r11
    2aa8:	af 92       	push	r10
    2aaa:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    2aae:	0f 90       	pop	r0
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	e6 01       	movw	r28, r12
    2ab8:	91 2c       	mov	r9, r1
    2aba:	88 81       	ld	r24, Y
    2abc:	99 81       	ldd	r25, Y+1	; 0x01
    2abe:	22 96       	adiw	r28, 0x02	; 2
    2ac0:	9f 93       	push	r25
    2ac2:	8f 93       	push	r24
    2ac4:	1f 93       	push	r17
    2ac6:	0f 93       	push	r16
    2ac8:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    2acc:	93 94       	inc	r9
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	83 e0       	ldi	r24, 0x03	; 3
    2ad8:	98 12       	cpse	r9, r24
    2ada:	ef cf       	rjmp	.-34     	; 0x2aba <print_motor_values+0x56>
    2adc:	8d e7       	ldi	r24, 0x7D	; 125
    2ade:	95 e2       	ldi	r25, 0x25	; 37
    2ae0:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    2ae4:	8f ef       	ldi	r24, 0xFF	; 255
    2ae6:	e8 1a       	sub	r14, r24
    2ae8:	f8 0a       	sbc	r15, r24
    2aea:	86 e0       	ldi	r24, 0x06	; 6
    2aec:	c8 0e       	add	r12, r24
    2aee:	d1 1c       	adc	r13, r1
    2af0:	88 e0       	ldi	r24, 0x08	; 8
    2af2:	e8 16       	cp	r14, r24
    2af4:	f1 04       	cpc	r15, r1
    2af6:	a9 f6       	brne	.-86     	; 0x2aa2 <print_motor_values+0x3e>
    2af8:	8d e7       	ldi	r24, 0x7D	; 125
    2afa:	95 e2       	ldi	r25, 0x25	; 37
    2afc:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	ff 90       	pop	r15
    2b0a:	ef 90       	pop	r14
    2b0c:	df 90       	pop	r13
    2b0e:	cf 90       	pop	r12
    2b10:	bf 90       	pop	r11
    2b12:	af 90       	pop	r10
    2b14:	9f 90       	pop	r9
    2b16:	08 95       	ret

00002b18 <print_dist_per_step>:
	// TODO: Deprecated?
}

void print_dist_per_step()
{
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	1f 93       	push	r17
    2b20:	cf 93       	push	r28
    2b22:	df 93       	push	r29
	printf("Dist (mm) per kilostep\r\n");
    2b24:	8f e3       	ldi	r24, 0x3F	; 63
    2b26:	92 e2       	ldi	r25, 0x22	; 34
    2b28:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    2b2c:	03 ee       	ldi	r16, 0xE3	; 227
    2b2e:	19 e2       	ldi	r17, 0x29	; 41
    2b30:	c0 e0       	ldi	r28, 0x00	; 0
    2b32:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf("\t%i\t%hu\r\n", direction, mm_per_kilostep[direction]);	
    2b34:	0f 2e       	mov	r0, r31
    2b36:	f7 e5       	ldi	r31, 0x57	; 87
    2b38:	ef 2e       	mov	r14, r31
    2b3a:	f2 e2       	ldi	r31, 0x22	; 34
    2b3c:	ff 2e       	mov	r15, r31
    2b3e:	f0 2d       	mov	r31, r0
    2b40:	f8 01       	movw	r30, r16
    2b42:	80 81       	ld	r24, Z
    2b44:	91 81       	ldd	r25, Z+1	; 0x01
    2b46:	0e 5f       	subi	r16, 0xFE	; 254
    2b48:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4a:	9f 93       	push	r25
    2b4c:	8f 93       	push	r24
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	ff 92       	push	r15
    2b54:	ef 92       	push	r14
    2b56:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    2b5a:	21 96       	adiw	r28, 0x01	; 1
}

void print_dist_per_step()
{
	printf("Dist (mm) per kilostep\r\n");
	for(uint8_t direction = 0 ; direction<8; direction++)
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	0f 90       	pop	r0
    2b68:	c8 30       	cpi	r28, 0x08	; 8
    2b6a:	d1 05       	cpc	r29, r1
    2b6c:	49 f7       	brne	.-46     	; 0x2b40 <print_dist_per_step+0x28>
	{
		printf("\t%i\t%hu\r\n", direction, mm_per_kilostep[direction]);	
	}
    2b6e:	df 91       	pop	r29
    2b70:	cf 91       	pop	r28
    2b72:	1f 91       	pop	r17
    2b74:	0f 91       	pop	r16
    2b76:	ff 90       	pop	r15
    2b78:	ef 90       	pop	r14
    2b7a:	08 95       	ret

00002b7c <pc_comm_putchar>:
	serial_in_index = temp_index;
}

int pc_comm_putchar(char c, FILE *stream)
{
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    2b7c:	e0 eb       	ldi	r30, 0xB0	; 176
    2b7e:	f9 e0       	ldi	r31, 0x09	; 9
    2b80:	91 81       	ldd	r25, Z+1	; 0x01
    2b82:	95 ff       	sbrs	r25, 5
    2b84:	fd cf       	rjmp	.-6      	; 0x2b80 <pc_comm_putchar+0x4>
	PC_USART.DATA = c;
    2b86:	80 93 b0 09 	sts	0x09B0, r24
	return 1;
}
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	08 95       	ret

00002b90 <pc_comm_init>:

static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pc_comm_init()
{
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    2b90:	e0 e6       	ldi	r30, 0x60	; 96
    2b92:	f6 e0       	ldi	r31, 0x06	; 6
    2b94:	80 e8       	ldi	r24, 0x80	; 128
    2b96:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    2b98:	80 e4       	ldi	r24, 0x40	; 64
    2b9a:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    2b9c:	e0 eb       	ldi	r30, 0xB0	; 176
    2b9e:	f9 e0       	ldi	r31, 0x09	; 9
    2ba0:	83 e0       	ldi	r24, 0x03	; 3
    2ba2:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    2ba4:	87 e1       	ldi	r24, 0x17	; 23
    2ba6:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    2ba8:	84 ea       	ldi	r24, 0xA4	; 164
    2baa:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    2bac:	84 81       	ldd	r24, Z+4	; 0x04
    2bae:	80 61       	ori	r24, 0x10	; 16
    2bb0:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    2bb2:	84 81       	ldd	r24, Z+4	; 0x04
    2bb4:	88 60       	ori	r24, 0x08	; 8
    2bb6:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    2bb8:	82 e1       	ldi	r24, 0x12	; 18
    2bba:	90 e2       	ldi	r25, 0x20	; 32
    2bbc:	80 93 40 2d 	sts	0x2D40, r24
    2bc0:	90 93 41 2d 	sts	0x2D41, r25
	serial_in_index = 0;
    2bc4:	10 92 d0 27 	sts	0x27D0, r1
    2bc8:	10 92 d1 27 	sts	0x27D1, r1
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_LO_gc;
    2bcc:	80 e1       	ldi	r24, 0x10	; 16
    2bce:	83 83       	std	Z+3, r24	; 0x03
    2bd0:	08 95       	ret

00002bd2 <handle_up_arrow>:
		putchar(data);
	}
}

void handle_up_arrow()
{
    2bd2:	1f 93       	push	r17
    2bd4:	cf 93       	push	r28
    2bd6:	df 93       	push	r29
	uint8_t temp_index = serial_in_index;
    2bd8:	80 91 d0 27 	lds	r24, 0x27D0
    2bdc:	90 91 d1 27 	lds	r25, 0x27D1
    2be0:	18 2f       	mov	r17, r24
    2be2:	fc 01       	movw	r30, r24
    2be4:	ff 27       	eor	r31, r31
			
	while(serial_in_buffer[temp_index] != '\0')
    2be6:	e0 57       	subi	r30, 0x70	; 112
    2be8:	f8 4d       	sbci	r31, 0xD8	; 216
    2bea:	80 81       	ld	r24, Z
    2bec:	88 23       	and	r24, r24
    2bee:	79 f0       	breq	.+30     	; 0x2c0e <handle_up_arrow+0x3c>
	{
		putchar(serial_in_buffer[temp_index]);
    2bf0:	c0 e4       	ldi	r28, 0x40	; 64
    2bf2:	dd e2       	ldi	r29, 0x2D	; 45
    2bf4:	68 81       	ld	r22, Y
    2bf6:	79 81       	ldd	r23, Y+1	; 0x01
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	0e 94 29 38 	call	0x7052	; 0x7052 <fputc>
		temp_index++;
    2bfe:	1f 5f       	subi	r17, 0xFF	; 255

void handle_up_arrow()
{
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0')
    2c00:	e1 2f       	mov	r30, r17
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	e0 57       	subi	r30, 0x70	; 112
    2c06:	f8 4d       	sbci	r31, 0xD8	; 216
    2c08:	80 81       	ld	r24, Z
    2c0a:	81 11       	cpse	r24, r1
    2c0c:	f3 cf       	rjmp	.-26     	; 0x2bf4 <handle_up_arrow+0x22>
	{
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    2c0e:	81 2f       	mov	r24, r17
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	80 93 d0 27 	sts	0x27D0, r24
    2c16:	90 93 d1 27 	sts	0x27D1, r25
}
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	08 95       	ret

00002c22 <handle_serial_input>:

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }

void handle_serial_input()
{
	char data = PC_USART.DATA;
    2c22:	80 91 b0 09 	lds	r24, 0x09B0
	if(escaped_arrow==1)
    2c26:	90 91 cd 2b 	lds	r25, 0x2BCD
    2c2a:	91 30       	cpi	r25, 0x01	; 1
    2c2c:	31 f4       	brne	.+12     	; 0x2c3a <handle_serial_input+0x18>
	{
		if(data == 65)
    2c2e:	81 34       	cpi	r24, 0x41	; 65
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <handle_serial_input+0x12>
		{
			handle_up_arrow();
    2c32:	cf df       	rcall	.-98     	; 0x2bd2 <handle_up_arrow>
		}
		escaped_arrow=0;
    2c34:	10 92 cd 2b 	sts	0x2BCD, r1
    2c38:	08 95       	ret
	}
	else if(escaped)
    2c3a:	90 91 8f 27 	lds	r25, 0x278F
    2c3e:	99 23       	and	r25, r25
    2c40:	41 f0       	breq	.+16     	; 0x2c52 <handle_serial_input+0x30>
	{
		if(data == 91)
    2c42:	8b 35       	cpi	r24, 0x5B	; 91
    2c44:	19 f4       	brne	.+6      	; 0x2c4c <handle_serial_input+0x2a>
		{
			escaped_arrow=1;	
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	80 93 cd 2b 	sts	0x2BCD, r24
		}
		escaped=0;
    2c4c:	10 92 8f 27 	sts	0x278F, r1
    2c50:	08 95       	ret
	}
	else if(data == '\r' || data == '\n') //We got the newline character.
    2c52:	8d 30       	cpi	r24, 0x0D	; 13
    2c54:	11 f0       	breq	.+4      	; 0x2c5a <handle_serial_input+0x38>
    2c56:	8a 30       	cpi	r24, 0x0A	; 10
    2c58:	a9 f4       	brne	.+42     	; 0x2c84 <handle_serial_input+0x62>
	{
		printf("\r\n");
    2c5a:	8d e7       	ldi	r24, 0x7D	; 125
    2c5c:	95 e2       	ldi	r25, 0x25	; 37
    2c5e:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
		serial_in_buffer[serial_in_index]='\0';
    2c62:	60 91 d0 27 	lds	r22, 0x27D0
    2c66:	70 91 d1 27 	lds	r23, 0x27D1
    2c6a:	fb 01       	movw	r30, r22
    2c6c:	e0 57       	subi	r30, 0x70	; 112
    2c6e:	f8 4d       	sbci	r31, 0xD8	; 216
    2c70:	10 82       	st	Z, r1
		handle_serial_command(serial_in_buffer,serial_in_index);
    2c72:	80 e9       	ldi	r24, 0x90	; 144
    2c74:	97 e2       	ldi	r25, 0x27	; 39
    2c76:	0e 94 8c 2c 	call	0x5918	; 0x5918 <handle_serial_command>
		serial_in_index = 0;
    2c7a:	10 92 d0 27 	sts	0x27D0, r1
    2c7e:	10 92 d1 27 	sts	0x27D1, r1
    2c82:	08 95       	ret
	}
	else if(data == '\b') //We got the backspace character.
    2c84:	88 30       	cpi	r24, 0x08	; 8
    2c86:	a1 f4       	brne	.+40     	; 0x2cb0 <handle_serial_input+0x8e>
	{
		if(serial_in_index > 0) serial_in_index--;
    2c88:	80 91 d0 27 	lds	r24, 0x27D0
    2c8c:	90 91 d1 27 	lds	r25, 0x27D1
    2c90:	00 97       	sbiw	r24, 0x00	; 0
    2c92:	29 f0       	breq	.+10     	; 0x2c9e <handle_serial_input+0x7c>
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	80 93 d0 27 	sts	0x27D0, r24
    2c9a:	90 93 d1 27 	sts	0x27D1, r25
		printf("\b \b");
    2c9e:	81 e6       	ldi	r24, 0x61	; 97
    2ca0:	92 e2       	ldi	r25, 0x22	; 34
    2ca2:	9f 93       	push	r25
    2ca4:	8f 93       	push	r24
    2ca6:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    2caa:	0f 90       	pop	r0
    2cac:	0f 90       	pop	r0
    2cae:	08 95       	ret
	}
	else if(data == 27) //escape pressed.
    2cb0:	8b 31       	cpi	r24, 0x1B	; 27
    2cb2:	21 f4       	brne	.+8      	; 0x2cbc <handle_serial_input+0x9a>
	{
		escaped = 1;
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	80 93 8f 27 	sts	0x278F, r24
    2cba:	08 95       	ret
	}
	else if(serial_in_index==BUFFER_SIZE) //Buffer overflow
    2cbc:	20 91 d0 27 	lds	r18, 0x27D0
    2cc0:	30 91 d1 27 	lds	r19, 0x27D1
    2cc4:	20 34       	cpi	r18, 0x40	; 64
    2cc6:	31 05       	cpc	r19, r1
    2cc8:	91 f4       	brne	.+36     	; 0x2cee <handle_serial_input+0xcc>
	{
		printf("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n",BUFFER_SIZE);
    2cca:	1f 92       	push	r1
    2ccc:	80 e4       	ldi	r24, 0x40	; 64
    2cce:	8f 93       	push	r24
    2cd0:	85 e6       	ldi	r24, 0x65	; 101
    2cd2:	92 e2       	ldi	r25, 0x22	; 34
    2cd4:	9f 93       	push	r25
    2cd6:	8f 93       	push	r24
    2cd8:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
		serial_in_index = 0;
    2cdc:	10 92 d0 27 	sts	0x27D0, r1
    2ce0:	10 92 d1 27 	sts	0x27D1, r1
    2ce4:	0f 90       	pop	r0
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	08 95       	ret
	}
	else //Everything is fine. Add the character to the buffer.
	{
		serial_in_buffer[serial_in_index] = data;
    2cee:	f9 01       	movw	r30, r18
    2cf0:	e0 57       	subi	r30, 0x70	; 112
    2cf2:	f8 4d       	sbci	r31, 0xD8	; 216
    2cf4:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    2cf6:	2f 5f       	subi	r18, 0xFF	; 255
    2cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cfa:	20 93 d0 27 	sts	0x27D0, r18
    2cfe:	30 93 d1 27 	sts	0x27D1, r19
		putchar(data);
    2d02:	60 91 40 2d 	lds	r22, 0x2D40
    2d06:	70 91 41 2d 	lds	r23, 0x2D41
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	0c 94 29 38 	jmp	0x7052	; 0x7052 <fputc>
    2d10:	08 95       	ret

00002d12 <__vector_91>:
	serial_in_index = 0;
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_LO_gc;
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    2d12:	1f 92       	push	r1
    2d14:	0f 92       	push	r0
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	0f 92       	push	r0
    2d1a:	11 24       	eor	r1, r1
    2d1c:	0b b6       	in	r0, 0x3b	; 59
    2d1e:	0f 92       	push	r0
    2d20:	2f 93       	push	r18
    2d22:	3f 93       	push	r19
    2d24:	4f 93       	push	r20
    2d26:	5f 93       	push	r21
    2d28:	6f 93       	push	r22
    2d2a:	7f 93       	push	r23
    2d2c:	8f 93       	push	r24
    2d2e:	9f 93       	push	r25
    2d30:	af 93       	push	r26
    2d32:	bf 93       	push	r27
    2d34:	ef 93       	push	r30
    2d36:	ff 93       	push	r31
    2d38:	74 df       	rcall	.-280    	; 0x2c22 <handle_serial_input>
    2d3a:	ff 91       	pop	r31
    2d3c:	ef 91       	pop	r30
    2d3e:	bf 91       	pop	r27
    2d40:	af 91       	pop	r26
    2d42:	9f 91       	pop	r25
    2d44:	8f 91       	pop	r24
    2d46:	7f 91       	pop	r23
    2d48:	6f 91       	pop	r22
    2d4a:	5f 91       	pop	r21
    2d4c:	4f 91       	pop	r20
    2d4e:	3f 91       	pop	r19
    2d50:	2f 91       	pop	r18
    2d52:	0f 90       	pop	r0
    2d54:	0b be       	out	0x3b, r0	; 59
    2d56:	0f 90       	pop	r0
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	0f 90       	pop	r0
    2d5c:	1f 90       	pop	r1
    2d5e:	18 95       	reti

00002d60 <cap_monitor_init>:
}


void cap_monitor_init()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	e0 e2       	ldi	r30, 0x20	; 32
    2d64:	f6 e0       	ldi	r31, 0x06	; 6
    2d66:	82 83       	std	Z+2, r24	; 0x02
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    2d68:	e0 e9       	ldi	r30, 0x90	; 144
    2d6a:	f3 e0       	ldi	r31, 0x03	; 3
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    2d70:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_BANDGAP_gc;
    2d72:	8e e0       	ldi	r24, 0x0E	; 14
    2d74:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    2d76:	88 e0       	ldi	r24, 0x08	; 8
    2d78:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    2d7a:	80 e1       	ldi	r24, 0x10	; 16
    2d7c:	86 83       	std	Z+6, r24	; 0x06
    2d7e:	08 95       	ret

00002d80 <leg_monitor_init>:
}

void leg_monitor_init()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    2d80:	8f e1       	ldi	r24, 0x1F	; 31
    2d82:	e0 e0       	ldi	r30, 0x00	; 0
    2d84:	f6 e0       	ldi	r31, 0x06	; 6
    2d86:	82 83       	std	Z+2, r24	; 0x02
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    2d88:	e0 e8       	ldi	r30, 0x80	; 128
    2d8a:	f3 e0       	ldi	r31, 0x03	; 3
    2d8c:	89 e0       	ldi	r24, 0x09	; 9
    2d8e:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    2d90:	81 83       	std	Z+1, r24	; 0x01
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc;			// PA0 is VREF_HI
    2d92:	12 82       	std	Z+2, r1	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc;			// PA1 is VREF_LO
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0MUXCTRL |= AC_MUXPOS_PIN2_gc;		// Initially, look at leg1
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	80 61       	ori	r24, 0x10	; 16
    2d9c:	82 83       	std	Z+2, r24	; 0x02
	ACA.AC1MUXCTRL |= AC_MUXPOS_PIN2_gc;
    2d9e:	83 81       	ldd	r24, Z+3	; 0x03
    2da0:	80 61       	ori	r24, 0x10	; 16
    2da2:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    2da4:	80 e1       	ldi	r24, 0x10	; 16
    2da6:	86 83       	std	Z+6, r24	; 0x06
    2da8:	08 95       	ret

00002daa <power_init>:
#include "power.h"

void power_init()
{
	cap_monitor_init();
    2daa:	da df       	rcall	.-76     	; 0x2d60 <cap_monitor_init>
	leg_monitor_init();
    2dac:	e9 cf       	rjmp	.-46     	; 0x2d80 <leg_monitor_init>
    2dae:	08 95       	ret

00002db0 <random_init>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    2db0:	e0 ec       	ldi	r30, 0xC0	; 192
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 e2       	ldi	r24, 0x20	; 32
    2db6:	80 83       	st	Z, r24
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    2db8:	88 b1       	in	r24, 0x08	; 8
    2dba:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    2dbc:	89 b1       	in	r24, 0x09	; 9
    2dbe:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    2dc0:	8a b1       	in	r24, 0x0a	; 10
    2dc2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    2dc4:	8b b1       	in	r24, 0x0b	; 11
    2dc6:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    2dc8:	8c b1       	in	r24, 0x0c	; 12
    2dca:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    2dcc:	8d b1       	in	r24, 0x0d	; 13
    2dce:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_WAFNUM;
    2dd0:	80 b3       	in	r24, 0x10	; 16
    2dd2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDX0;
    2dd4:	82 b3       	in	r24, 0x12	; 18
    2dd6:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_COORDX1;
    2dd8:	83 b3       	in	r24, 0x13	; 19
    2dda:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY0;
    2ddc:	84 b3       	in	r24, 0x14	; 20
    2dde:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY1;
    2de0:	85 b3       	in	r24, 0x15	; 21
    2de2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH0.RESL;
    2de4:	a0 e0       	ldi	r26, 0x00	; 0
    2de6:	b2 e0       	ldi	r27, 0x02	; 2
    2de8:	94 96       	adiw	r26, 0x24	; 36
    2dea:	8c 91       	ld	r24, X
    2dec:	94 97       	sbiw	r26, 0x24	; 36
    2dee:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = ADCA.CH1.RESL;
    2df0:	9c 96       	adiw	r26, 0x2c	; 44
    2df2:	8c 91       	ld	r24, X
    2df4:	9c 97       	sbiw	r26, 0x2c	; 44
    2df6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH2.RESL;
    2df8:	d4 96       	adiw	r26, 0x34	; 52
    2dfa:	8c 91       	ld	r24, X
    2dfc:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH0.RESL;
    2dfe:	a0 e4       	ldi	r26, 0x40	; 64
    2e00:	b2 e0       	ldi	r27, 0x02	; 2
    2e02:	94 96       	adiw	r26, 0x24	; 36
    2e04:	8c 91       	ld	r24, X
    2e06:	94 97       	sbiw	r26, 0x24	; 36
    2e08:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH1.RESL;
    2e0a:	9c 96       	adiw	r26, 0x2c	; 44
    2e0c:	8c 91       	ld	r24, X
    2e0e:	83 83       	std	Z+3, r24	; 0x03

	r_round = 1;
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	80 93 47 2c 	sts	0x2C47, r24
    2e16:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    2e18:	91 e0       	ldi	r25, 0x01	; 1
    2e1a:	92 83       	std	Z+2, r25	; 0x02
    2e1c:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    2e1e:	e9 f7       	brne	.-6      	; 0x2e1a <random_init+0x6a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    2e20:	84 e8       	ldi	r24, 0x84	; 132
    2e22:	80 93 c0 00 	sts	0x00C0, r24

	r_position = 0;
    2e26:	10 92 48 2c 	sts	0x2C48, r1
    2e2a:	08 95       	ret

00002e2c <rand_byte>:
}

uint8_t rand_byte()
{
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
    2e2c:	90 91 48 2c 	lds	r25, 0x2C48
    2e30:	91 11       	cpse	r25, r1
    2e32:	06 c0       	rjmp	.+12     	; 0x2e40 <rand_byte+0x14>
    2e34:	e0 ec       	ldi	r30, 0xC0	; 192
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	81 81       	ldd	r24, Z+1	; 0x01
    2e3a:	80 ff       	sbrs	r24, 0
    2e3c:	fd cf       	rjmp	.-6      	; 0x2e38 <rand_byte+0xc>
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <rand_byte+0x3c>
	r = AES.STATE;
    2e40:	e0 ec       	ldi	r30, 0xC0	; 192
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	82 81       	ldd	r24, Z+2	; 0x02
	r_position++;
    2e46:	9f 5f       	subi	r25, 0xFF	; 255
    2e48:	90 93 48 2c 	sts	0x2C48, r25
	if (r_position > 15)
    2e4c:	90 31       	cpi	r25, 0x10	; 16
    2e4e:	90 f0       	brcs	.+36     	; 0x2e74 <rand_byte+0x48>
	{
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
    2e50:	20 91 47 2c 	lds	r18, 0x2C47
    2e54:	90 e1       	ldi	r25, 0x10	; 16
    2e56:	22 83       	std	Z+2, r18	; 0x02
    2e58:	91 50       	subi	r25, 0x01	; 1
    2e5a:	e9 f7       	brne	.-6      	; 0x2e56 <rand_byte+0x2a>
		AES.CTRL = AES_START_bm | AES_XOR_bm;
    2e5c:	94 e8       	ldi	r25, 0x84	; 132
    2e5e:	90 93 c0 00 	sts	0x00C0, r25
		r_position = 0;
    2e62:	10 92 48 2c 	sts	0x2C48, r1
    2e66:	08 95       	ret

uint8_t rand_byte()
{
	uint8_t r;
	if (r_position == 0) while (!(AES.STATUS & AES_SRIF_bm));
	r = AES.STATE;
    2e68:	e0 ec       	ldi	r30, 0xC0	; 192
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	82 81       	ldd	r24, Z+2	; 0x02
	r_position++;
    2e6e:	91 e0       	ldi	r25, 0x01	; 1
    2e70:	90 93 48 2c 	sts	0x2C48, r25
		for (uint8_t i = 0; i < 16; i++) AES.STATE = r_round;
		AES.CTRL = AES_START_bm | AES_XOR_bm;
		r_position = 0;
	}
	return r;
}
    2e74:	08 95       	ret

00002e76 <range_algs_init>:
	for(uint8_t i=1 ; i<13 ; i++)
	{
		printf("%3lu  |  ",timer[i] - timer[i-1]);
	}
	printf("\r\n");
}
    2e76:	8d e5       	ldi	r24, 0x5D	; 93
    2e78:	9c e2       	ldi	r25, 0x2C	; 44
    2e7a:	21 e6       	ldi	r18, 0x61	; 97
    2e7c:	3c e2       	ldi	r19, 0x2C	; 44
    2e7e:	14 c0       	rjmp	.+40     	; 0x2ea8 <range_algs_init+0x32>
    2e80:	df 01       	movw	r26, r30
    2e82:	54 97       	sbiw	r26, 0x14	; 20
    2e84:	1c 92       	st	X, r1
    2e86:	14 96       	adiw	r26, 0x04	; 4
    2e88:	1c 92       	st	X, r1
    2e8a:	14 96       	adiw	r26, 0x04	; 4
    2e8c:	1c 92       	st	X, r1
    2e8e:	14 96       	adiw	r26, 0x04	; 4
    2e90:	1c 92       	st	X, r1
    2e92:	14 96       	adiw	r26, 0x04	; 4
    2e94:	1c 92       	st	X, r1
    2e96:	10 82       	st	Z, r1
    2e98:	4f 5f       	subi	r20, 0xFF	; 255
    2e9a:	78 96       	adiw	r30, 0x18	; 24
    2e9c:	46 30       	cpi	r20, 0x06	; 6
    2e9e:	81 f7       	brne	.-32     	; 0x2e80 <range_algs_init+0xa>
    2ea0:	01 96       	adiw	r24, 0x01	; 1
    2ea2:	82 17       	cp	r24, r18
    2ea4:	93 07       	cpc	r25, r19
    2ea6:	19 f0       	breq	.+6      	; 0x2eae <range_algs_init+0x38>
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	40 e0       	ldi	r20, 0x00	; 0
    2eac:	e9 cf       	rjmp	.-46     	; 0x2e80 <range_algs_init+0xa>
    2eae:	08 95       	ret

00002eb0 <get_bearing>:
    2eb0:	2f 92       	push	r2
    2eb2:	3f 92       	push	r3
    2eb4:	4f 92       	push	r4
    2eb6:	5f 92       	push	r5
    2eb8:	6f 92       	push	r6
    2eba:	7f 92       	push	r7
    2ebc:	8f 92       	push	r8
    2ebe:	9f 92       	push	r9
    2ec0:	af 92       	push	r10
    2ec2:	bf 92       	push	r11
    2ec4:	cf 92       	push	r12
    2ec6:	df 92       	push	r13
    2ec8:	ef 92       	push	r14
    2eca:	ff 92       	push	r15
    2ecc:	0f 93       	push	r16
    2ece:	1f 93       	push	r17
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	c8 e3       	ldi	r28, 0x38	; 56
    2ed6:	d0 e2       	ldi	r29, 0x20	; 32
    2ed8:	8c 01       	movw	r16, r24
    2eda:	0f 2e       	mov	r0, r31
    2edc:	f8 e6       	ldi	r31, 0x68	; 104
    2ede:	2f 2e       	mov	r2, r31
    2ee0:	f0 e2       	ldi	r31, 0x20	; 32
    2ee2:	3f 2e       	mov	r3, r31
    2ee4:	f0 2d       	mov	r31, r0
    2ee6:	81 2c       	mov	r8, r1
    2ee8:	91 2c       	mov	r9, r1
    2eea:	54 01       	movw	r10, r8
    2eec:	24 01       	movw	r4, r8
    2eee:	35 01       	movw	r6, r10
    2ef0:	f8 01       	movw	r30, r16
    2ef2:	61 91       	ld	r22, Z+
    2ef4:	8f 01       	movw	r16, r30
    2ef6:	70 e0       	ldi	r23, 0x00	; 0
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__floatsisf>
    2f00:	6b 01       	movw	r12, r22
    2f02:	7c 01       	movw	r14, r24
    2f04:	28 81       	ld	r18, Y
    2f06:	39 81       	ldd	r19, Y+1	; 0x01
    2f08:	4a 81       	ldd	r20, Y+2	; 0x02
    2f0a:	5b 81       	ldd	r21, Y+3	; 0x03
    2f0c:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    2f10:	9b 01       	movw	r18, r22
    2f12:	ac 01       	movw	r20, r24
    2f14:	c3 01       	movw	r24, r6
    2f16:	b2 01       	movw	r22, r4
    2f18:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    2f1c:	2b 01       	movw	r4, r22
    2f1e:	3c 01       	movw	r6, r24
    2f20:	2c 81       	ldd	r18, Y+4	; 0x04
    2f22:	3d 81       	ldd	r19, Y+5	; 0x05
    2f24:	4e 81       	ldd	r20, Y+6	; 0x06
    2f26:	5f 81       	ldd	r21, Y+7	; 0x07
    2f28:	c7 01       	movw	r24, r14
    2f2a:	b6 01       	movw	r22, r12
    2f2c:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    2f30:	9b 01       	movw	r18, r22
    2f32:	ac 01       	movw	r20, r24
    2f34:	c5 01       	movw	r24, r10
    2f36:	b4 01       	movw	r22, r8
    2f38:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    2f3c:	4b 01       	movw	r8, r22
    2f3e:	5c 01       	movw	r10, r24
    2f40:	28 96       	adiw	r28, 0x08	; 8
    2f42:	c2 15       	cp	r28, r2
    2f44:	d3 05       	cpc	r29, r3
    2f46:	a1 f6       	brne	.-88     	; 0x2ef0 <get_bearing+0x40>
    2f48:	a3 01       	movw	r20, r6
    2f4a:	92 01       	movw	r18, r4
    2f4c:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <atan2>
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	ff 90       	pop	r15
    2f5a:	ef 90       	pop	r14
    2f5c:	df 90       	pop	r13
    2f5e:	cf 90       	pop	r12
    2f60:	bf 90       	pop	r11
    2f62:	af 90       	pop	r10
    2f64:	9f 90       	pop	r9
    2f66:	8f 90       	pop	r8
    2f68:	7f 90       	pop	r7
    2f6a:	6f 90       	pop	r6
    2f6c:	5f 90       	pop	r5
    2f6e:	4f 90       	pop	r4
    2f70:	3f 90       	pop	r3
    2f72:	2f 90       	pop	r2
    2f74:	08 95       	ret

00002f76 <fill_S_and_T>:
    2f76:	cf 92       	push	r12
    2f78:	df 92       	push	r13
    2f7a:	ff 92       	push	r15
    2f7c:	0f 93       	push	r16
    2f7e:	1f 93       	push	r17
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	f6 2e       	mov	r15, r22
    2f86:	07 2f       	mov	r16, r23
    2f88:	a6 2f       	mov	r26, r22
    2f8a:	b7 2f       	mov	r27, r23
    2f8c:	e4 2f       	mov	r30, r20
    2f8e:	f5 2f       	mov	r31, r21
    2f90:	26 e0       	ldi	r18, 0x06	; 6
    2f92:	11 92       	st	Z+, r1
    2f94:	1d 92       	st	X+, r1
    2f96:	21 50       	subi	r18, 0x01	; 1
    2f98:	e1 f7       	brne	.-8      	; 0x2f92 <fill_S_and_T+0x1c>
    2f9a:	c4 2e       	mov	r12, r20
    2f9c:	d5 2e       	mov	r13, r21
    2f9e:	40 e0       	ldi	r20, 0x00	; 0
    2fa0:	50 e0       	ldi	r21, 0x00	; 0
    2fa2:	17 c0       	rjmp	.+46     	; 0x2fd2 <fill_S_and_T+0x5c>
    2fa4:	9d 01       	movw	r18, r26
    2fa6:	10 81       	ld	r17, Z
    2fa8:	7d 91       	ld	r23, X+
    2faa:	71 0f       	add	r23, r17
    2fac:	71 93       	st	Z+, r23
    2fae:	e6 01       	movw	r28, r12
    2fb0:	78 81       	ld	r23, Y
    2fb2:	e9 01       	movw	r28, r18
    2fb4:	28 81       	ld	r18, Y
    2fb6:	27 0f       	add	r18, r23
    2fb8:	e6 01       	movw	r28, r12
    2fba:	28 83       	st	Y, r18
    2fbc:	6f 5f       	subi	r22, 0xFF	; 255
    2fbe:	66 30       	cpi	r22, 0x06	; 6
    2fc0:	89 f7       	brne	.-30     	; 0x2fa4 <fill_S_and_T+0x2e>
    2fc2:	4a 5f       	subi	r20, 0xFA	; 250
    2fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    2fc6:	df ef       	ldi	r29, 0xFF	; 255
    2fc8:	cd 1a       	sub	r12, r29
    2fca:	dd 0a       	sbc	r13, r29
    2fcc:	44 32       	cpi	r20, 0x24	; 36
    2fce:	51 05       	cpc	r21, r1
    2fd0:	39 f0       	breq	.+14     	; 0x2fe0 <fill_S_and_T+0x6a>
    2fd2:	dc 01       	movw	r26, r24
    2fd4:	a4 0f       	add	r26, r20
    2fd6:	b5 1f       	adc	r27, r21
    2fd8:	ef 2d       	mov	r30, r15
    2fda:	f0 2f       	mov	r31, r16
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	e2 cf       	rjmp	.-60     	; 0x2fa4 <fill_S_and_T+0x2e>
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	1f 91       	pop	r17
    2fe6:	0f 91       	pop	r16
    2fe8:	ff 90       	pop	r15
    2fea:	df 90       	pop	r13
    2fec:	cf 90       	pop	r12
    2fee:	08 95       	ret

00002ff0 <pack_measurements_into_matrix>:
    2ff0:	df 92       	push	r13
    2ff2:	ef 92       	push	r14
    2ff4:	ff 92       	push	r15
    2ff6:	0f 93       	push	r16
    2ff8:	1f 93       	push	r17
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	49 e4       	ldi	r20, 0x49	; 73
    3000:	5c e2       	ldi	r21, 0x2C	; 44
    3002:	69 ed       	ldi	r22, 0xD9	; 217
    3004:	7c e2       	ldi	r23, 0x2C	; 44
    3006:	e1 2c       	mov	r14, r1
    3008:	dd 24       	eor	r13, r13
    300a:	da 94       	dec	r13
    300c:	1e c0       	rjmp	.+60     	; 0x304a <pack_measurements_into_matrix+0x5a>
    300e:	c1 91       	ld	r28, Z+
    3010:	c1 17       	cp	r28, r17
    3012:	08 f4       	brcc	.+2      	; 0x3016 <pack_measurements_into_matrix+0x26>
    3014:	1c 2f       	mov	r17, r28
    3016:	0c 17       	cp	r16, r28
    3018:	08 f4       	brcc	.+2      	; 0x301c <pack_measurements_into_matrix+0x2c>
    301a:	0c 2f       	mov	r16, r28
    301c:	d1 50       	subi	r29, 0x01	; 1
    301e:	b9 f7       	brne	.-18     	; 0x300e <pack_measurements_into_matrix+0x1e>
    3020:	01 1b       	sub	r16, r17
    3022:	e0 16       	cp	r14, r16
    3024:	08 f4       	brcc	.+2      	; 0x3028 <pack_measurements_into_matrix+0x38>
    3026:	e0 2e       	mov	r14, r16
    3028:	0d 93       	st	X+, r16
    302a:	fa 94       	dec	r15
    302c:	2c 5f       	subi	r18, 0xFC	; 252
    302e:	3f 4f       	sbci	r19, 0xFF	; 255
    3030:	ff 20       	and	r15, r15
    3032:	29 f0       	breq	.+10     	; 0x303e <pack_measurements_into_matrix+0x4e>
    3034:	f9 01       	movw	r30, r18
    3036:	d4 e0       	ldi	r29, 0x04	; 4
    3038:	00 e0       	ldi	r16, 0x00	; 0
    303a:	1d 2d       	mov	r17, r13
    303c:	e8 cf       	rjmp	.-48     	; 0x300e <pack_measurements_into_matrix+0x1e>
    303e:	06 96       	adiw	r24, 0x06	; 6
    3040:	48 5e       	subi	r20, 0xE8	; 232
    3042:	5f 4f       	sbci	r21, 0xFF	; 255
    3044:	46 17       	cp	r20, r22
    3046:	57 07       	cpc	r21, r23
    3048:	39 f0       	breq	.+14     	; 0x3058 <pack_measurements_into_matrix+0x68>
    304a:	9a 01       	movw	r18, r20
    304c:	dc 01       	movw	r26, r24
    304e:	0f 2e       	mov	r0, r31
    3050:	f6 e0       	ldi	r31, 0x06	; 6
    3052:	ff 2e       	mov	r15, r31
    3054:	f0 2d       	mov	r31, r0
    3056:	ee cf       	rjmp	.-36     	; 0x3034 <pack_measurements_into_matrix+0x44>
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	93 e0       	ldi	r25, 0x03	; 3
    305c:	9e 15       	cp	r25, r14
    305e:	08 f4       	brcc	.+2      	; 0x3062 <pack_measurements_into_matrix+0x72>
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	df 91       	pop	r29
    3064:	cf 91       	pop	r28
    3066:	1f 91       	pop	r17
    3068:	0f 91       	pop	r16
    306a:	ff 90       	pop	r15
    306c:	ef 90       	pop	r14
    306e:	df 90       	pop	r13
    3070:	08 95       	ret

00003072 <get_baseline_readings>:
    3072:	df 92       	push	r13
    3074:	ef 92       	push	r14
    3076:	ff 92       	push	r15
    3078:	0f 93       	push	r16
    307a:	1f 93       	push	r17
    307c:	cf 93       	push	r28
    307e:	df 93       	push	r29
    3080:	09 e4       	ldi	r16, 0x49	; 73
    3082:	1c e2       	ldi	r17, 0x2C	; 44
    3084:	0f 2e       	mov	r0, r31
    3086:	f9 ed       	ldi	r31, 0xD9	; 217
    3088:	ef 2e       	mov	r14, r31
    308a:	fc e2       	ldi	r31, 0x2C	; 44
    308c:	ff 2e       	mov	r15, r31
    308e:	f0 2d       	mov	r31, r0
    3090:	0d c0       	rjmp	.+26     	; 0x30ac <get_baseline_readings+0x3a>
    3092:	8d 2d       	mov	r24, r13
    3094:	72 d8       	rcall	.-3868   	; 0x217a <get_ir_sensor>
    3096:	88 83       	st	Y, r24
    3098:	d3 94       	inc	r13
    309a:	24 96       	adiw	r28, 0x04	; 4
    309c:	86 e0       	ldi	r24, 0x06	; 6
    309e:	d8 12       	cpse	r13, r24
    30a0:	f8 cf       	rjmp	.-16     	; 0x3092 <get_baseline_readings+0x20>
    30a2:	08 5e       	subi	r16, 0xE8	; 232
    30a4:	1f 4f       	sbci	r17, 0xFF	; 255
    30a6:	0e 15       	cp	r16, r14
    30a8:	1f 05       	cpc	r17, r15
    30aa:	19 f0       	breq	.+6      	; 0x30b2 <get_baseline_readings+0x40>
    30ac:	e8 01       	movw	r28, r16
    30ae:	d1 2c       	mov	r13, r1
    30b0:	f0 cf       	rjmp	.-32     	; 0x3092 <get_baseline_readings+0x20>
    30b2:	df 91       	pop	r29
    30b4:	cf 91       	pop	r28
    30b6:	1f 91       	pop	r17
    30b8:	0f 91       	pop	r16
    30ba:	ff 90       	pop	r15
    30bc:	ef 90       	pop	r14
    30be:	df 90       	pop	r13
    30c0:	08 95       	ret

000030c2 <ir_range_meas>:
    30c2:	2f 92       	push	r2
    30c4:	3f 92       	push	r3
    30c6:	4f 92       	push	r4
    30c8:	5f 92       	push	r5
    30ca:	6f 92       	push	r6
    30cc:	7f 92       	push	r7
    30ce:	8f 92       	push	r8
    30d0:	9f 92       	push	r9
    30d2:	af 92       	push	r10
    30d4:	bf 92       	push	r11
    30d6:	cf 92       	push	r12
    30d8:	df 92       	push	r13
    30da:	ef 92       	push	r14
    30dc:	ff 92       	push	r15
    30de:	0f 93       	push	r16
    30e0:	1f 93       	push	r17
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	8f e5       	ldi	r24, 0x5F	; 95
    30e8:	9a ee       	ldi	r25, 0xEA	; 234
    30ea:	a0 e0       	ldi	r26, 0x00	; 0
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	01 97       	sbiw	r24, 0x01	; 1
    30f0:	a1 09       	sbc	r26, r1
    30f2:	b1 09       	sbc	r27, r1
    30f4:	00 00       	nop
    30f6:	01 f0       	breq	.+0      	; 0x30f8 <ir_range_meas+0x36>
    30f8:	d1 f7       	brne	.-12     	; 0x30ee <ir_range_meas+0x2c>
    30fa:	c8 95       	lpm
    30fc:	00 00       	nop
    30fe:	8f e7       	ldi	r24, 0x7F	; 127
    3100:	9e e3       	ldi	r25, 0x3E	; 62
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <ir_range_meas+0x40>
    3106:	00 00       	nop
    3108:	00 c0       	rjmp	.+0      	; 0x310a <ir_range_meas+0x48>
    310a:	0f 2e       	mov	r0, r31
    310c:	fa e4       	ldi	r31, 0x4A	; 74
    310e:	6f 2e       	mov	r6, r31
    3110:	fc e2       	ldi	r31, 0x2C	; 44
    3112:	7f 2e       	mov	r7, r31
    3114:	f0 2d       	mov	r31, r0
    3116:	0f 2e       	mov	r0, r31
    3118:	fa ed       	ldi	r31, 0xDA	; 218
    311a:	4f 2e       	mov	r4, r31
    311c:	fc e2       	ldi	r31, 0x2C	; 44
    311e:	5f 2e       	mov	r5, r31
    3120:	f0 2d       	mov	r31, r0
    3122:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    3126:	4b 01       	movw	r8, r22
    3128:	5c 01       	movw	r10, r24
    312a:	83 01       	movw	r16, r6
    312c:	33 24       	eor	r3, r3
    312e:	33 94       	inc	r3
    3130:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    3134:	6b 01       	movw	r12, r22
    3136:	7c 01       	movw	r14, r24
    3138:	e8 01       	movw	r28, r16
    313a:	21 2c       	mov	r2, r1
    313c:	82 2d       	mov	r24, r2
    313e:	1d d8       	rcall	.-4038   	; 0x217a <get_ir_sensor>
    3140:	88 83       	st	Y, r24
    3142:	23 94       	inc	r2
    3144:	24 96       	adiw	r28, 0x04	; 4
    3146:	86 e0       	ldi	r24, 0x06	; 6
    3148:	28 12       	cpse	r2, r24
    314a:	f8 cf       	rjmp	.-16     	; 0x313c <ir_range_meas+0x7a>
    314c:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    3150:	dc 01       	movw	r26, r24
    3152:	cb 01       	movw	r24, r22
    3154:	8c 19       	sub	r24, r12
    3156:	9d 09       	sbc	r25, r13
    3158:	ae 09       	sbc	r26, r14
    315a:	bf 09       	sbc	r27, r15
    315c:	03 97       	sbiw	r24, 0x03	; 3
    315e:	a1 05       	cpc	r26, r1
    3160:	b1 05       	cpc	r27, r1
    3162:	a0 f3       	brcs	.-24     	; 0x314c <ir_range_meas+0x8a>
    3164:	82 e0       	ldi	r24, 0x02	; 2
    3166:	83 15       	cp	r24, r3
    3168:	20 f0       	brcs	.+8      	; 0x3172 <ir_range_meas+0xb0>
    316a:	85 e0       	ldi	r24, 0x05	; 5
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    3172:	33 94       	inc	r3
    3174:	0f 5f       	subi	r16, 0xFF	; 255
    3176:	1f 4f       	sbci	r17, 0xFF	; 255
    3178:	84 e0       	ldi	r24, 0x04	; 4
    317a:	38 12       	cpse	r3, r24
    317c:	d9 cf       	rjmp	.-78     	; 0x3130 <ir_range_meas+0x6e>
    317e:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	88 19       	sub	r24, r8
    3188:	99 09       	sbc	r25, r9
    318a:	aa 09       	sbc	r26, r10
    318c:	bb 09       	sbc	r27, r11
    318e:	47 97       	sbiw	r24, 0x17	; 23
    3190:	a1 05       	cpc	r26, r1
    3192:	b1 05       	cpc	r27, r1
    3194:	a0 f3       	brcs	.-24     	; 0x317e <ir_range_meas+0xbc>
    3196:	8f e0       	ldi	r24, 0x0F	; 15
    3198:	90 e0       	ldi	r25, 0x00	; 0
    319a:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    319e:	88 e1       	ldi	r24, 0x18	; 24
    31a0:	68 0e       	add	r6, r24
    31a2:	71 1c       	adc	r7, r1
    31a4:	64 14       	cp	r6, r4
    31a6:	75 04       	cpc	r7, r5
    31a8:	09 f0       	breq	.+2      	; 0x31ac <ir_range_meas+0xea>
    31aa:	bb cf       	rjmp	.-138    	; 0x3122 <ir_range_meas+0x60>
    31ac:	df 91       	pop	r29
    31ae:	cf 91       	pop	r28
    31b0:	1f 91       	pop	r17
    31b2:	0f 91       	pop	r16
    31b4:	ff 90       	pop	r15
    31b6:	ef 90       	pop	r14
    31b8:	df 90       	pop	r13
    31ba:	cf 90       	pop	r12
    31bc:	bf 90       	pop	r11
    31be:	af 90       	pop	r10
    31c0:	9f 90       	pop	r9
    31c2:	8f 90       	pop	r8
    31c4:	7f 90       	pop	r7
    31c6:	6f 90       	pop	r6
    31c8:	5f 90       	pop	r5
    31ca:	4f 90       	pop	r4
    31cc:	3f 90       	pop	r3
    31ce:	2f 90       	pop	r2
    31d0:	08 95       	ret

000031d2 <receive_rnb_data>:
    31d2:	cf 93       	push	r28
    31d4:	df 93       	push	r29
    31d6:	1f 92       	push	r1
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	72 df       	rcall	.-284    	; 0x30c2 <ir_range_meas>
    31de:	49 df       	rcall	.-366    	; 0x3072 <get_baseline_readings>
    31e0:	19 82       	std	Y+1, r1	; 0x01
    31e2:	9e 01       	movw	r18, r28
    31e4:	2f 5f       	subi	r18, 0xFF	; 255
    31e6:	3f 4f       	sbci	r19, 0xFF	; 255
    31e8:	40 e7       	ldi	r20, 0x70	; 112
    31ea:	50 e2       	ldi	r21, 0x20	; 32
    31ec:	6a e0       	ldi	r22, 0x0A	; 10
    31ee:	70 e0       	ldi	r23, 0x00	; 0
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 b2 24 	call	0x4964	; 0x4964 <schedule_task>
    31f8:	0f 90       	pop	r0
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	08 95       	ret

00003200 <ir_emit>:
    3200:	af 92       	push	r10
    3202:	bf 92       	push	r11
    3204:	cf 92       	push	r12
    3206:	df 92       	push	r13
    3208:	ef 92       	push	r14
    320a:	ff 92       	push	r15
    320c:	0f 93       	push	r16
    320e:	1f 93       	push	r17
    3210:	82 30       	cpi	r24, 0x02	; 2
    3212:	19 f1       	breq	.+70     	; 0x325a <ir_emit+0x5a>
    3214:	30 f4       	brcc	.+12     	; 0x3222 <ir_emit+0x22>
    3216:	88 23       	and	r24, r24
    3218:	09 f4       	brne	.+2      	; 0x321c <ir_emit+0x1c>
    321a:	5b c0       	rjmp	.+182    	; 0x32d2 <ir_emit+0xd2>
    321c:	81 30       	cpi	r24, 0x01	; 1
    321e:	71 f0       	breq	.+28     	; 0x323c <ir_emit+0x3c>
    3220:	06 c0       	rjmp	.+12     	; 0x322e <ir_emit+0x2e>
    3222:	84 30       	cpi	r24, 0x04	; 4
    3224:	c1 f1       	breq	.+112    	; 0x3296 <ir_emit+0x96>
    3226:	40 f1       	brcs	.+80     	; 0x3278 <ir_emit+0x78>
    3228:	85 30       	cpi	r24, 0x05	; 5
    322a:	09 f4       	brne	.+2      	; 0x322e <ir_emit+0x2e>
    322c:	43 c0       	rjmp	.+134    	; 0x32b4 <ir_emit+0xb4>
    322e:	e1 2c       	mov	r14, r1
    3230:	f1 2c       	mov	r15, r1
    3232:	00 e0       	ldi	r16, 0x00	; 0
    3234:	10 e0       	ldi	r17, 0x00	; 0
    3236:	c1 2c       	mov	r12, r1
    3238:	d1 2c       	mov	r13, r1
    323a:	58 c0       	rjmp	.+176    	; 0x32ec <ir_emit+0xec>
    323c:	0f 2e       	mov	r0, r31
    323e:	f0 eb       	ldi	r31, 0xB0	; 176
    3240:	ef 2e       	mov	r14, r31
    3242:	f8 e0       	ldi	r31, 0x08	; 8
    3244:	ff 2e       	mov	r15, r31
    3246:	f0 2d       	mov	r31, r0
    3248:	00 e4       	ldi	r16, 0x40	; 64
    324a:	16 e0       	ldi	r17, 0x06	; 6
    324c:	68 94       	set
    324e:	cc 24       	eor	r12, r12
    3250:	c7 f8       	bld	r12, 7
    3252:	68 94       	set
    3254:	dd 24       	eor	r13, r13
    3256:	d1 f8       	bld	r13, 1
    3258:	49 c0       	rjmp	.+146    	; 0x32ec <ir_emit+0xec>
    325a:	0f 2e       	mov	r0, r31
    325c:	f0 ea       	ldi	r31, 0xA0	; 160
    325e:	ef 2e       	mov	r14, r31
    3260:	f9 e0       	ldi	r31, 0x09	; 9
    3262:	ff 2e       	mov	r15, r31
    3264:	f0 2d       	mov	r31, r0
    3266:	00 e6       	ldi	r16, 0x60	; 96
    3268:	16 e0       	ldi	r17, 0x06	; 6
    326a:	68 94       	set
    326c:	cc 24       	eor	r12, r12
    326e:	c3 f8       	bld	r12, 3
    3270:	68 94       	set
    3272:	dd 24       	eor	r13, r13
    3274:	d4 f8       	bld	r13, 4
    3276:	3a c0       	rjmp	.+116    	; 0x32ec <ir_emit+0xec>
    3278:	0f 2e       	mov	r0, r31
    327a:	f0 ea       	ldi	r31, 0xA0	; 160
    327c:	ef 2e       	mov	r14, r31
    327e:	fa e0       	ldi	r31, 0x0A	; 10
    3280:	ff 2e       	mov	r15, r31
    3282:	f0 2d       	mov	r31, r0
    3284:	00 e8       	ldi	r16, 0x80	; 128
    3286:	16 e0       	ldi	r17, 0x06	; 6
    3288:	68 94       	set
    328a:	cc 24       	eor	r12, r12
    328c:	c3 f8       	bld	r12, 3
    328e:	68 94       	set
    3290:	dd 24       	eor	r13, r13
    3292:	d5 f8       	bld	r13, 5
    3294:	2b c0       	rjmp	.+86     	; 0x32ec <ir_emit+0xec>
    3296:	0f 2e       	mov	r0, r31
    3298:	f0 eb       	ldi	r31, 0xB0	; 176
    329a:	ef 2e       	mov	r14, r31
    329c:	fa e0       	ldi	r31, 0x0A	; 10
    329e:	ff 2e       	mov	r15, r31
    32a0:	f0 2d       	mov	r31, r0
    32a2:	00 e8       	ldi	r16, 0x80	; 128
    32a4:	16 e0       	ldi	r17, 0x06	; 6
    32a6:	68 94       	set
    32a8:	cc 24       	eor	r12, r12
    32aa:	c7 f8       	bld	r12, 7
    32ac:	68 94       	set
    32ae:	dd 24       	eor	r13, r13
    32b0:	d7 f8       	bld	r13, 7
    32b2:	1c c0       	rjmp	.+56     	; 0x32ec <ir_emit+0xec>
    32b4:	0f 2e       	mov	r0, r31
    32b6:	f0 ea       	ldi	r31, 0xA0	; 160
    32b8:	ef 2e       	mov	r14, r31
    32ba:	fb e0       	ldi	r31, 0x0B	; 11
    32bc:	ff 2e       	mov	r15, r31
    32be:	f0 2d       	mov	r31, r0
    32c0:	00 ea       	ldi	r16, 0xA0	; 160
    32c2:	16 e0       	ldi	r17, 0x06	; 6
    32c4:	68 94       	set
    32c6:	cc 24       	eor	r12, r12
    32c8:	c3 f8       	bld	r12, 3
    32ca:	68 94       	set
    32cc:	dd 24       	eor	r13, r13
    32ce:	d6 f8       	bld	r13, 6
    32d0:	0d c0       	rjmp	.+26     	; 0x32ec <ir_emit+0xec>
    32d2:	0f 2e       	mov	r0, r31
    32d4:	f0 ea       	ldi	r31, 0xA0	; 160
    32d6:	ef 2e       	mov	r14, r31
    32d8:	f8 e0       	ldi	r31, 0x08	; 8
    32da:	ff 2e       	mov	r15, r31
    32dc:	f0 2d       	mov	r31, r0
    32de:	00 e4       	ldi	r16, 0x40	; 64
    32e0:	16 e0       	ldi	r17, 0x06	; 6
    32e2:	68 94       	set
    32e4:	cc 24       	eor	r12, r12
    32e6:	c3 f8       	bld	r12, 3
    32e8:	dd 24       	eor	r13, r13
    32ea:	d3 94       	inc	r13
    32ec:	f7 01       	movw	r30, r14
    32ee:	a4 80       	ldd	r10, Z+4	; 0x04
    32f0:	e0 e0       	ldi	r30, 0x00	; 0
    32f2:	fb e0       	ldi	r31, 0x0B	; 11
    32f4:	81 81       	ldd	r24, Z+1	; 0x01
    32f6:	bd 2c       	mov	r11, r13
    32f8:	b0 94       	com	r11
    32fa:	8b 21       	and	r24, r11
    32fc:	81 83       	std	Z+1, r24	; 0x01
    32fe:	e0 ea       	ldi	r30, 0xA0	; 160
    3300:	f6 e0       	ldi	r31, 0x06	; 6
    3302:	d1 82       	std	Z+1, r13	; 0x01
    3304:	84 81       	ldd	r24, Z+4	; 0x04
    3306:	8d 29       	or	r24, r13
    3308:	84 83       	std	Z+4, r24	; 0x04
    330a:	f7 01       	movw	r30, r14
    330c:	14 82       	std	Z+4, r1	; 0x04
    330e:	f8 01       	movw	r30, r16
    3310:	c1 82       	std	Z+1, r12	; 0x01
    3312:	84 81       	ldd	r24, Z+4	; 0x04
    3314:	9c 2d       	mov	r25, r12
    3316:	90 95       	com	r25
    3318:	89 23       	and	r24, r25
    331a:	84 83       	std	Z+4, r24	; 0x04
    331c:	70 e0       	ldi	r23, 0x00	; 0
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__floatunsisf>
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	34 e2       	ldi	r19, 0x24	; 36
    332a:	44 ef       	ldi	r20, 0xF4	; 244
    332c:	5b e4       	ldi	r21, 0x4B	; 75
    332e:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	4a e7       	ldi	r20, 0x7A	; 122
    3338:	54 e4       	ldi	r21, 0x44	; 68
    333a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e0       	ldi	r19, 0x00	; 0
    3342:	40 e0       	ldi	r20, 0x00	; 0
    3344:	5f e3       	ldi	r21, 0x3F	; 63
    3346:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    334a:	0e 94 76 2f 	call	0x5eec	; 0x5eec <__fixunssfsi>
    334e:	ab 01       	movw	r20, r22
    3350:	bc 01       	movw	r22, r24
    3352:	4d 30       	cpi	r20, 0x0D	; 13
    3354:	51 05       	cpc	r21, r1
    3356:	61 05       	cpc	r22, r1
    3358:	71 05       	cpc	r23, r1
    335a:	08 f4       	brcc	.+2      	; 0x335e <ir_emit+0x15e>
    335c:	5d c0       	rjmp	.+186    	; 0x3418 <ir_emit+0x218>
    335e:	41 30       	cpi	r20, 0x01	; 1
    3360:	f4 e0       	ldi	r31, 0x04	; 4
    3362:	5f 07       	cpc	r21, r31
    3364:	61 05       	cpc	r22, r1
    3366:	71 05       	cpc	r23, r1
    3368:	d8 f4       	brcc	.+54     	; 0x33a0 <ir_emit+0x1a0>
    336a:	41 50       	subi	r20, 0x01	; 1
    336c:	51 09       	sbc	r21, r1
    336e:	61 09       	sbc	r22, r1
    3370:	71 09       	sbc	r23, r1
    3372:	db 01       	movw	r26, r22
    3374:	ca 01       	movw	r24, r20
    3376:	b6 95       	lsr	r27
    3378:	a7 95       	ror	r26
    337a:	97 95       	ror	r25
    337c:	87 95       	ror	r24
    337e:	b6 95       	lsr	r27
    3380:	a7 95       	ror	r26
    3382:	97 95       	ror	r25
    3384:	87 95       	ror	r24
    3386:	43 70       	andi	r20, 0x03	; 3
    3388:	55 27       	eor	r21, r21
    338a:	66 27       	eor	r22, r22
    338c:	77 27       	eor	r23, r23
    338e:	00 97       	sbiw	r24, 0x00	; 0
    3390:	a1 05       	cpc	r26, r1
    3392:	b1 05       	cpc	r27, r1
    3394:	09 f4       	brne	.+2      	; 0x3398 <ir_emit+0x198>
    3396:	40 c0       	rjmp	.+128    	; 0x3418 <ir_emit+0x218>
    3398:	8a 95       	dec	r24
    339a:	01 f0       	breq	.+0      	; 0x339c <ir_emit+0x19c>
    339c:	e9 f7       	brne	.-6      	; 0x3398 <ir_emit+0x198>
    339e:	3c c0       	rjmp	.+120    	; 0x3418 <ir_emit+0x218>
    33a0:	42 30       	cpi	r20, 0x02	; 2
    33a2:	51 05       	cpc	r21, r1
    33a4:	84 e0       	ldi	r24, 0x04	; 4
    33a6:	68 07       	cpc	r22, r24
    33a8:	71 05       	cpc	r23, r1
    33aa:	d0 f4       	brcc	.+52     	; 0x33e0 <ir_emit+0x1e0>
    33ac:	42 50       	subi	r20, 0x02	; 2
    33ae:	51 09       	sbc	r21, r1
    33b0:	61 09       	sbc	r22, r1
    33b2:	71 09       	sbc	r23, r1
    33b4:	db 01       	movw	r26, r22
    33b6:	ca 01       	movw	r24, r20
    33b8:	b6 95       	lsr	r27
    33ba:	a7 95       	ror	r26
    33bc:	97 95       	ror	r25
    33be:	87 95       	ror	r24
    33c0:	b6 95       	lsr	r27
    33c2:	a7 95       	ror	r26
    33c4:	97 95       	ror	r25
    33c6:	87 95       	ror	r24
    33c8:	43 70       	andi	r20, 0x03	; 3
    33ca:	55 27       	eor	r21, r21
    33cc:	66 27       	eor	r22, r22
    33ce:	77 27       	eor	r23, r23
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	a1 05       	cpc	r26, r1
    33d4:	b1 05       	cpc	r27, r1
    33d6:	01 f1       	breq	.+64     	; 0x3418 <ir_emit+0x218>
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	f1 f7       	brne	.-4      	; 0x33d8 <ir_emit+0x1d8>
    33dc:	00 00       	nop
    33de:	1c c0       	rjmp	.+56     	; 0x3418 <ir_emit+0x218>
    33e0:	44 50       	subi	r20, 0x04	; 4
    33e2:	51 09       	sbc	r21, r1
    33e4:	61 09       	sbc	r22, r1
    33e6:	71 09       	sbc	r23, r1
    33e8:	db 01       	movw	r26, r22
    33ea:	ca 01       	movw	r24, r20
    33ec:	68 94       	set
    33ee:	12 f8       	bld	r1, 2
    33f0:	b6 95       	lsr	r27
    33f2:	a7 95       	ror	r26
    33f4:	97 95       	ror	r25
    33f6:	87 95       	ror	r24
    33f8:	16 94       	lsr	r1
    33fa:	d1 f7       	brne	.-12     	; 0x33f0 <ir_emit+0x1f0>
    33fc:	47 70       	andi	r20, 0x07	; 7
    33fe:	55 27       	eor	r21, r21
    3400:	66 27       	eor	r22, r22
    3402:	77 27       	eor	r23, r23
    3404:	00 97       	sbiw	r24, 0x00	; 0
    3406:	a1 05       	cpc	r26, r1
    3408:	b1 05       	cpc	r27, r1
    340a:	31 f0       	breq	.+12     	; 0x3418 <ir_emit+0x218>
    340c:	01 97       	sbiw	r24, 0x01	; 1
    340e:	a1 09       	sbc	r26, r1
    3410:	b1 09       	sbc	r27, r1
    3412:	00 00       	nop
    3414:	01 f0       	breq	.+0      	; 0x3416 <ir_emit+0x216>
    3416:	d1 f7       	brne	.-12     	; 0x340c <ir_emit+0x20c>
    3418:	41 30       	cpi	r20, 0x01	; 1
    341a:	51 05       	cpc	r21, r1
    341c:	61 05       	cpc	r22, r1
    341e:	71 05       	cpc	r23, r1
    3420:	11 f4       	brne	.+4      	; 0x3426 <ir_emit+0x226>
    3422:	00 00       	nop
    3424:	0e c0       	rjmp	.+28     	; 0x3442 <ir_emit+0x242>
    3426:	42 30       	cpi	r20, 0x02	; 2
    3428:	51 05       	cpc	r21, r1
    342a:	61 05       	cpc	r22, r1
    342c:	71 05       	cpc	r23, r1
    342e:	11 f4       	brne	.+4      	; 0x3434 <ir_emit+0x234>
    3430:	00 c0       	rjmp	.+0      	; 0x3432 <ir_emit+0x232>
    3432:	0f c0       	rjmp	.+30     	; 0x3452 <ir_emit+0x252>
    3434:	43 30       	cpi	r20, 0x03	; 3
    3436:	51 05       	cpc	r21, r1
    3438:	61 05       	cpc	r22, r1
    343a:	71 05       	cpc	r23, r1
    343c:	11 f4       	brne	.+4      	; 0x3442 <ir_emit+0x242>
    343e:	c8 95       	lpm
    3440:	10 c0       	rjmp	.+32     	; 0x3462 <ir_emit+0x262>
    3442:	44 30       	cpi	r20, 0x04	; 4
    3444:	51 05       	cpc	r21, r1
    3446:	61 05       	cpc	r22, r1
    3448:	71 05       	cpc	r23, r1
    344a:	19 f4       	brne	.+6      	; 0x3452 <ir_emit+0x252>
    344c:	c8 95       	lpm
    344e:	00 00       	nop
    3450:	10 c0       	rjmp	.+32     	; 0x3472 <ir_emit+0x272>
    3452:	45 30       	cpi	r20, 0x05	; 5
    3454:	51 05       	cpc	r21, r1
    3456:	61 05       	cpc	r22, r1
    3458:	71 05       	cpc	r23, r1
    345a:	19 f4       	brne	.+6      	; 0x3462 <ir_emit+0x262>
    345c:	c8 95       	lpm
    345e:	00 c0       	rjmp	.+0      	; 0x3460 <ir_emit+0x260>
    3460:	11 c0       	rjmp	.+34     	; 0x3484 <ir_emit+0x284>
    3462:	46 30       	cpi	r20, 0x06	; 6
    3464:	51 05       	cpc	r21, r1
    3466:	61 05       	cpc	r22, r1
    3468:	71 05       	cpc	r23, r1
    346a:	19 f4       	brne	.+6      	; 0x3472 <ir_emit+0x272>
    346c:	c8 95       	lpm
    346e:	c8 95       	lpm
    3470:	12 c0       	rjmp	.+36     	; 0x3496 <ir_emit+0x296>
    3472:	47 30       	cpi	r20, 0x07	; 7
    3474:	51 05       	cpc	r21, r1
    3476:	61 05       	cpc	r22, r1
    3478:	71 05       	cpc	r23, r1
    347a:	21 f4       	brne	.+8      	; 0x3484 <ir_emit+0x284>
    347c:	c8 95       	lpm
    347e:	c8 95       	lpm
    3480:	00 00       	nop
    3482:	12 c0       	rjmp	.+36     	; 0x34a8 <ir_emit+0x2a8>
    3484:	48 30       	cpi	r20, 0x08	; 8
    3486:	51 05       	cpc	r21, r1
    3488:	61 05       	cpc	r22, r1
    348a:	71 05       	cpc	r23, r1
    348c:	21 f4       	brne	.+8      	; 0x3496 <ir_emit+0x296>
    348e:	c8 95       	lpm
    3490:	c8 95       	lpm
    3492:	00 c0       	rjmp	.+0      	; 0x3494 <ir_emit+0x294>
    3494:	13 c0       	rjmp	.+38     	; 0x34bc <ir_emit+0x2bc>
    3496:	49 30       	cpi	r20, 0x09	; 9
    3498:	51 05       	cpc	r21, r1
    349a:	61 05       	cpc	r22, r1
    349c:	71 05       	cpc	r23, r1
    349e:	21 f4       	brne	.+8      	; 0x34a8 <ir_emit+0x2a8>
    34a0:	c8 95       	lpm
    34a2:	c8 95       	lpm
    34a4:	c8 95       	lpm
    34a6:	14 c0       	rjmp	.+40     	; 0x34d0 <ir_emit+0x2d0>
    34a8:	4a 30       	cpi	r20, 0x0A	; 10
    34aa:	51 05       	cpc	r21, r1
    34ac:	61 05       	cpc	r22, r1
    34ae:	71 05       	cpc	r23, r1
    34b0:	29 f4       	brne	.+10     	; 0x34bc <ir_emit+0x2bc>
    34b2:	c8 95       	lpm
    34b4:	c8 95       	lpm
    34b6:	c8 95       	lpm
    34b8:	00 00       	nop
    34ba:	13 c0       	rjmp	.+38     	; 0x34e2 <ir_emit+0x2e2>
    34bc:	4b 30       	cpi	r20, 0x0B	; 11
    34be:	51 05       	cpc	r21, r1
    34c0:	61 05       	cpc	r22, r1
    34c2:	71 05       	cpc	r23, r1
    34c4:	29 f4       	brne	.+10     	; 0x34d0 <ir_emit+0x2d0>
    34c6:	c8 95       	lpm
    34c8:	c8 95       	lpm
    34ca:	c8 95       	lpm
    34cc:	00 c0       	rjmp	.+0      	; 0x34ce <ir_emit+0x2ce>
    34ce:	09 c0       	rjmp	.+18     	; 0x34e2 <ir_emit+0x2e2>
    34d0:	4c 30       	cpi	r20, 0x0C	; 12
    34d2:	51 05       	cpc	r21, r1
    34d4:	61 05       	cpc	r22, r1
    34d6:	71 05       	cpc	r23, r1
    34d8:	21 f4       	brne	.+8      	; 0x34e2 <ir_emit+0x2e2>
    34da:	c8 95       	lpm
    34dc:	c8 95       	lpm
    34de:	c8 95       	lpm
    34e0:	c8 95       	lpm
    34e2:	f8 01       	movw	r30, r16
    34e4:	84 81       	ldd	r24, Z+4	; 0x04
    34e6:	c8 2a       	or	r12, r24
    34e8:	c4 82       	std	Z+4, r12	; 0x04
    34ea:	f7 01       	movw	r30, r14
    34ec:	a4 82       	std	Z+4, r10	; 0x04
    34ee:	e0 ea       	ldi	r30, 0xA0	; 160
    34f0:	f6 e0       	ldi	r31, 0x06	; 6
    34f2:	84 81       	ldd	r24, Z+4	; 0x04
    34f4:	b8 22       	and	r11, r24
    34f6:	b4 82       	std	Z+4, r11	; 0x04
    34f8:	e0 e0       	ldi	r30, 0x00	; 0
    34fa:	fb e0       	ldi	r31, 0x0B	; 11
    34fc:	81 81       	ldd	r24, Z+1	; 0x01
    34fe:	d8 2a       	or	r13, r24
    3500:	d1 82       	std	Z+1, r13	; 0x01
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	ff 90       	pop	r15
    3508:	ef 90       	pop	r14
    350a:	df 90       	pop	r13
    350c:	cf 90       	pop	r12
    350e:	bf 90       	pop	r11
    3510:	af 90       	pop	r10
    3512:	08 95       	ret

00003514 <ir_range_blast>:
    3514:	cf 92       	push	r12
    3516:	df 92       	push	r13
    3518:	ef 92       	push	r14
    351a:	ff 92       	push	r15
    351c:	cf 93       	push	r28
    351e:	8f e0       	ldi	r24, 0x0F	; 15
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    3526:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    352a:	6b 01       	movw	r12, r22
    352c:	7c 01       	movw	r14, r24
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	91 e0       	ldi	r25, 0x01	; 1
    3532:	0e 94 4b 04 	call	0x896	; 0x896 <set_all_ir_powers>
    3536:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    353a:	dc 01       	movw	r26, r24
    353c:	cb 01       	movw	r24, r22
    353e:	8c 19       	sub	r24, r12
    3540:	9d 09       	sbc	r25, r13
    3542:	ae 09       	sbc	r26, r14
    3544:	bf 09       	sbc	r27, r15
    3546:	02 97       	sbiw	r24, 0x02	; 2
    3548:	a1 05       	cpc	r26, r1
    354a:	b1 05       	cpc	r27, r1
    354c:	a0 f3       	brcs	.-24     	; 0x3536 <ir_range_blast+0x22>
    354e:	c0 e0       	ldi	r28, 0x00	; 0
    3550:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    3554:	6b 01       	movw	r12, r22
    3556:	7c 01       	movw	r14, r24
    3558:	67 e1       	ldi	r22, 0x17	; 23
    355a:	8c 2f       	mov	r24, r28
    355c:	51 de       	rcall	.-862    	; 0x3200 <ir_emit>
    355e:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    3562:	ab 01       	movw	r20, r22
    3564:	bc 01       	movw	r22, r24
    3566:	4c 19       	sub	r20, r12
    3568:	5d 09       	sbc	r21, r13
    356a:	6e 09       	sbc	r22, r14
    356c:	7f 09       	sbc	r23, r15
    356e:	47 31       	cpi	r20, 0x17	; 23
    3570:	51 05       	cpc	r21, r1
    3572:	61 05       	cpc	r22, r1
    3574:	71 05       	cpc	r23, r1
    3576:	98 f3       	brcs	.-26     	; 0x355e <ir_range_blast+0x4a>
    3578:	8f e0       	ldi	r24, 0x0F	; 15
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    3580:	cf 5f       	subi	r28, 0xFF	; 255
    3582:	c6 30       	cpi	r28, 0x06	; 6
    3584:	29 f7       	brne	.-54     	; 0x3550 <ir_range_blast+0x3c>
    3586:	cf 91       	pop	r28
    3588:	ff 90       	pop	r15
    358a:	ef 90       	pop	r14
    358c:	df 90       	pop	r13
    358e:	cf 90       	pop	r12
    3590:	08 95       	ret

00003592 <broadcast_rnb_data>:
    3592:	45 e0       	ldi	r20, 0x05	; 5
    3594:	50 e0       	ldi	r21, 0x00	; 0
    3596:	68 ea       	ldi	r22, 0xA8	; 168
    3598:	72 e2       	ldi	r23, 0x22	; 34
    359a:	8f e3       	ldi	r24, 0x3F	; 63
    359c:	0e 94 a2 0b 	call	0x1744	; 0x1744 <ir_cmd>
    35a0:	8f e3       	ldi	r24, 0x3F	; 63
    35a2:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <wait_for_ir>
    35a6:	8b e4       	ldi	r24, 0x4B	; 75
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	0e 94 8c 24 	call	0x4918	; 0x4918 <delay_ms>
    35ae:	8f ef       	ldi	r24, 0xFF	; 255
    35b0:	b1 cf       	rjmp	.-158    	; 0x3514 <ir_range_blast>
    35b2:	08 95       	ret

000035b4 <pretty_angle>:
    35b4:	cf 92       	push	r12
    35b6:	df 92       	push	r13
    35b8:	ef 92       	push	r14
    35ba:	ff 92       	push	r15
    35bc:	6b 01       	movw	r12, r22
    35be:	7c 01       	movw	r14, r24
    35c0:	20 e0       	ldi	r18, 0x00	; 0
    35c2:	30 e0       	ldi	r19, 0x00	; 0
    35c4:	a9 01       	movw	r20, r18
    35c6:	0e 94 0e 31 	call	0x621c	; 0x621c <__gesf2>
    35ca:	88 23       	and	r24, r24
    35cc:	ac f0       	brlt	.+42     	; 0x35f8 <pretty_angle+0x44>
    35ce:	2b ed       	ldi	r18, 0xDB	; 219
    35d0:	3f e0       	ldi	r19, 0x0F	; 15
    35d2:	49 e4       	ldi	r20, 0x49	; 73
    35d4:	50 e4       	ldi	r21, 0x40	; 64
    35d6:	c7 01       	movw	r24, r14
    35d8:	b6 01       	movw	r22, r12
    35da:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    35de:	2b ed       	ldi	r18, 0xDB	; 219
    35e0:	3f e0       	ldi	r19, 0x0F	; 15
    35e2:	49 ec       	ldi	r20, 0xC9	; 201
    35e4:	50 e4       	ldi	r21, 0x40	; 64
    35e6:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <fmod>
    35ea:	2b ed       	ldi	r18, 0xDB	; 219
    35ec:	3f e0       	ldi	r19, 0x0F	; 15
    35ee:	49 e4       	ldi	r20, 0x49	; 73
    35f0:	50 e4       	ldi	r21, 0x40	; 64
    35f2:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    35f6:	14 c0       	rjmp	.+40     	; 0x3620 <pretty_angle+0x6c>
    35f8:	2b ed       	ldi	r18, 0xDB	; 219
    35fa:	3f e0       	ldi	r19, 0x0F	; 15
    35fc:	49 e4       	ldi	r20, 0x49	; 73
    35fe:	50 e4       	ldi	r21, 0x40	; 64
    3600:	c7 01       	movw	r24, r14
    3602:	b6 01       	movw	r22, r12
    3604:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3608:	2b ed       	ldi	r18, 0xDB	; 219
    360a:	3f e0       	ldi	r19, 0x0F	; 15
    360c:	49 ec       	ldi	r20, 0xC9	; 201
    360e:	50 e4       	ldi	r21, 0x40	; 64
    3610:	0e 94 e6 2f 	call	0x5fcc	; 0x5fcc <fmod>
    3614:	2b ed       	ldi	r18, 0xDB	; 219
    3616:	3f e0       	ldi	r19, 0x0F	; 15
    3618:	49 e4       	ldi	r20, 0x49	; 73
    361a:	50 e4       	ldi	r21, 0x40	; 64
    361c:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    3620:	ff 90       	pop	r15
    3622:	ef 90       	pop	r14
    3624:	df 90       	pop	r13
    3626:	cf 90       	pop	r12
    3628:	08 95       	ret

0000362a <get_heading>:
    362a:	2f 92       	push	r2
    362c:	3f 92       	push	r3
    362e:	6f 92       	push	r6
    3630:	7f 92       	push	r7
    3632:	8f 92       	push	r8
    3634:	9f 92       	push	r9
    3636:	af 92       	push	r10
    3638:	bf 92       	push	r11
    363a:	cf 92       	push	r12
    363c:	df 92       	push	r13
    363e:	ef 92       	push	r14
    3640:	ff 92       	push	r15
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	cd b7       	in	r28, 0x3d	; 61
    364c:	de b7       	in	r29, 0x3e	; 62
    364e:	60 97       	sbiw	r28, 0x10	; 16
    3650:	cd bf       	out	0x3d, r28	; 61
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	4d 87       	std	Y+13, r20	; 0x0d
    3656:	5e 87       	std	Y+14, r21	; 0x0e
    3658:	6f 87       	std	Y+15, r22	; 0x0f
    365a:	78 8b       	std	Y+16, r23	; 0x10
    365c:	19 82       	std	Y+1, r1	; 0x01
    365e:	1a 82       	std	Y+2, r1	; 0x02
    3660:	1b 82       	std	Y+3, r1	; 0x03
    3662:	1c 82       	std	Y+4, r1	; 0x04
    3664:	1d 82       	std	Y+5, r1	; 0x05
    3666:	1e 82       	std	Y+6, r1	; 0x06
    3668:	1f 82       	std	Y+7, r1	; 0x07
    366a:	18 86       	std	Y+8, r1	; 0x08
    366c:	08 e3       	ldi	r16, 0x38	; 56
    366e:	10 e2       	ldi	r17, 0x20	; 32
    3670:	1c 01       	movw	r2, r24
    3672:	0f 2e       	mov	r0, r31
    3674:	f8 e6       	ldi	r31, 0x68	; 104
    3676:	6f 2e       	mov	r6, r31
    3678:	f0 e2       	ldi	r31, 0x20	; 32
    367a:	7f 2e       	mov	r7, r31
    367c:	f0 2d       	mov	r31, r0
    367e:	f1 01       	movw	r30, r2
    3680:	61 91       	ld	r22, Z+
    3682:	1f 01       	movw	r2, r30
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	80 e0       	ldi	r24, 0x00	; 0
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__floatsisf>
    368e:	6b 01       	movw	r12, r22
    3690:	7c 01       	movw	r14, r24
    3692:	89 80       	ldd	r8, Y+1	; 0x01
    3694:	9a 80       	ldd	r9, Y+2	; 0x02
    3696:	ab 80       	ldd	r10, Y+3	; 0x03
    3698:	bc 80       	ldd	r11, Y+4	; 0x04
    369a:	f8 01       	movw	r30, r16
    369c:	20 81       	ld	r18, Z
    369e:	31 81       	ldd	r19, Z+1	; 0x01
    36a0:	42 81       	ldd	r20, Z+2	; 0x02
    36a2:	53 81       	ldd	r21, Z+3	; 0x03
    36a4:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    36a8:	a5 01       	movw	r20, r10
    36aa:	94 01       	movw	r18, r8
    36ac:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    36b0:	69 83       	std	Y+1, r22	; 0x01
    36b2:	7a 83       	std	Y+2, r23	; 0x02
    36b4:	8b 83       	std	Y+3, r24	; 0x03
    36b6:	9c 83       	std	Y+4, r25	; 0x04
    36b8:	8d 80       	ldd	r8, Y+5	; 0x05
    36ba:	9e 80       	ldd	r9, Y+6	; 0x06
    36bc:	af 80       	ldd	r10, Y+7	; 0x07
    36be:	b8 84       	ldd	r11, Y+8	; 0x08
    36c0:	f8 01       	movw	r30, r16
    36c2:	24 81       	ldd	r18, Z+4	; 0x04
    36c4:	35 81       	ldd	r19, Z+5	; 0x05
    36c6:	46 81       	ldd	r20, Z+6	; 0x06
    36c8:	57 81       	ldd	r21, Z+7	; 0x07
    36ca:	c7 01       	movw	r24, r14
    36cc:	b6 01       	movw	r22, r12
    36ce:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    36d2:	a5 01       	movw	r20, r10
    36d4:	94 01       	movw	r18, r8
    36d6:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    36da:	6d 83       	std	Y+5, r22	; 0x05
    36dc:	7e 83       	std	Y+6, r23	; 0x06
    36de:	8f 83       	std	Y+7, r24	; 0x07
    36e0:	98 87       	std	Y+8, r25	; 0x08
    36e2:	08 5f       	subi	r16, 0xF8	; 248
    36e4:	1f 4f       	sbci	r17, 0xFF	; 255
    36e6:	06 15       	cp	r16, r6
    36e8:	17 05       	cpc	r17, r7
    36ea:	49 f6       	brne	.-110    	; 0x367e <get_heading+0x54>
    36ec:	29 81       	ldd	r18, Y+1	; 0x01
    36ee:	3a 81       	ldd	r19, Y+2	; 0x02
    36f0:	4b 81       	ldd	r20, Y+3	; 0x03
    36f2:	5c 81       	ldd	r21, Y+4	; 0x04
    36f4:	6d 81       	ldd	r22, Y+5	; 0x05
    36f6:	7e 81       	ldd	r23, Y+6	; 0x06
    36f8:	8f 81       	ldd	r24, Y+7	; 0x07
    36fa:	98 85       	ldd	r25, Y+8	; 0x08
    36fc:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <atan2>
    3700:	69 87       	std	Y+9, r22	; 0x09
    3702:	7a 87       	std	Y+10, r23	; 0x0a
    3704:	8b 87       	std	Y+11, r24	; 0x0b
    3706:	9c 87       	std	Y+12, r25	; 0x0c
    3708:	c9 84       	ldd	r12, Y+9	; 0x09
    370a:	da 84       	ldd	r13, Y+10	; 0x0a
    370c:	eb 84       	ldd	r14, Y+11	; 0x0b
    370e:	fc 84       	ldd	r15, Y+12	; 0x0c
    3710:	2b ed       	ldi	r18, 0xDB	; 219
    3712:	3f e0       	ldi	r19, 0x0F	; 15
    3714:	49 e4       	ldi	r20, 0x49	; 73
    3716:	50 e4       	ldi	r21, 0x40	; 64
    3718:	6d 85       	ldd	r22, Y+13	; 0x0d
    371a:	7e 85       	ldd	r23, Y+14	; 0x0e
    371c:	8f 85       	ldd	r24, Y+15	; 0x0f
    371e:	98 89       	ldd	r25, Y+16	; 0x10
    3720:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    3724:	a7 01       	movw	r20, r14
    3726:	96 01       	movw	r18, r12
    3728:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    372c:	43 df       	rcall	.-378    	; 0x35b4 <pretty_angle>
    372e:	60 96       	adiw	r28, 0x10	; 16
    3730:	cd bf       	out	0x3d, r28	; 61
    3732:	de bf       	out	0x3e, r29	; 62
    3734:	df 91       	pop	r29
    3736:	cf 91       	pop	r28
    3738:	1f 91       	pop	r17
    373a:	0f 91       	pop	r16
    373c:	ff 90       	pop	r15
    373e:	ef 90       	pop	r14
    3740:	df 90       	pop	r13
    3742:	cf 90       	pop	r12
    3744:	bf 90       	pop	r11
    3746:	af 90       	pop	r10
    3748:	9f 90       	pop	r9
    374a:	8f 90       	pop	r8
    374c:	7f 90       	pop	r7
    374e:	6f 90       	pop	r6
    3750:	3f 90       	pop	r3
    3752:	2f 90       	pop	r2
    3754:	08 95       	ret

00003756 <sensor_model>:
    3756:	cf 92       	push	r12
    3758:	df 92       	push	r13
    375a:	ef 92       	push	r14
    375c:	ff 92       	push	r15
    375e:	6b 01       	movw	r12, r22
    3760:	7c 01       	movw	r14, r24
    3762:	2b ed       	ldi	r18, 0xDB	; 219
    3764:	3f e0       	ldi	r19, 0x0F	; 15
    3766:	49 ec       	ldi	r20, 0xC9	; 201
    3768:	5f eb       	ldi	r21, 0xBF	; 191
    376a:	0e 94 0e 31 	call	0x621c	; 0x621c <__gesf2>
    376e:	18 16       	cp	r1, r24
    3770:	7c f4       	brge	.+30     	; 0x3790 <sensor_model+0x3a>
    3772:	2b ed       	ldi	r18, 0xDB	; 219
    3774:	3f e0       	ldi	r19, 0x0F	; 15
    3776:	49 ec       	ldi	r20, 0xC9	; 201
    3778:	5f e3       	ldi	r21, 0x3F	; 63
    377a:	c7 01       	movw	r24, r14
    377c:	b6 01       	movw	r22, r12
    377e:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__cmpsf2>
    3782:	88 23       	and	r24, r24
    3784:	4c f4       	brge	.+18     	; 0x3798 <sensor_model+0x42>
    3786:	c7 01       	movw	r24, r14
    3788:	b6 01       	movw	r22, r12
    378a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <cos>
    378e:	07 c0       	rjmp	.+14     	; 0x379e <sensor_model+0x48>
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	70 e0       	ldi	r23, 0x00	; 0
    3794:	cb 01       	movw	r24, r22
    3796:	03 c0       	rjmp	.+6      	; 0x379e <sensor_model+0x48>
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	70 e0       	ldi	r23, 0x00	; 0
    379c:	cb 01       	movw	r24, r22
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	df 90       	pop	r13
    37a4:	cf 90       	pop	r12
    37a6:	08 95       	ret

000037a8 <emitter_model>:
    37a8:	cf 92       	push	r12
    37aa:	df 92       	push	r13
    37ac:	ef 92       	push	r14
    37ae:	ff 92       	push	r15
    37b0:	6b 01       	movw	r12, r22
    37b2:	7c 01       	movw	r14, r24
    37b4:	2b ed       	ldi	r18, 0xDB	; 219
    37b6:	3f e0       	ldi	r19, 0x0F	; 15
    37b8:	49 ec       	ldi	r20, 0xC9	; 201
    37ba:	5f eb       	ldi	r21, 0xBF	; 191
    37bc:	0e 94 0e 31 	call	0x621c	; 0x621c <__gesf2>
    37c0:	18 16       	cp	r1, r24
    37c2:	7c f4       	brge	.+30     	; 0x37e2 <emitter_model+0x3a>
    37c4:	2b ed       	ldi	r18, 0xDB	; 219
    37c6:	3f e0       	ldi	r19, 0x0F	; 15
    37c8:	49 ec       	ldi	r20, 0xC9	; 201
    37ca:	5f e3       	ldi	r21, 0x3F	; 63
    37cc:	c7 01       	movw	r24, r14
    37ce:	b6 01       	movw	r22, r12
    37d0:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__cmpsf2>
    37d4:	88 23       	and	r24, r24
    37d6:	4c f4       	brge	.+18     	; 0x37ea <emitter_model+0x42>
    37d8:	c7 01       	movw	r24, r14
    37da:	b6 01       	movw	r22, r12
    37dc:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <cos>
    37e0:	07 c0       	rjmp	.+14     	; 0x37f0 <emitter_model+0x48>
    37e2:	60 e0       	ldi	r22, 0x00	; 0
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	cb 01       	movw	r24, r22
    37e8:	03 c0       	rjmp	.+6      	; 0x37f0 <emitter_model+0x48>
    37ea:	60 e0       	ldi	r22, 0x00	; 0
    37ec:	70 e0       	ldi	r23, 0x00	; 0
    37ee:	cb 01       	movw	r24, r22
    37f0:	ff 90       	pop	r15
    37f2:	ef 90       	pop	r14
    37f4:	df 90       	pop	r13
    37f6:	cf 90       	pop	r12
    37f8:	08 95       	ret

000037fa <inverse_amplitude_model>:
    37fa:	4f 3f       	cpi	r20, 0xFF	; 255
    37fc:	b1 f4       	brne	.+44     	; 0x382a <inverse_amplitude_model+0x30>
    37fe:	2a e0       	ldi	r18, 0x0A	; 10
    3800:	38 e6       	ldi	r19, 0x68	; 104
    3802:	4e ea       	ldi	r20, 0xAE	; 174
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    380a:	0e 94 86 31 	call	0x630c	; 0x630c <sqrt>
    380e:	9b 01       	movw	r18, r22
    3810:	ac 01       	movw	r20, r24
    3812:	65 e0       	ldi	r22, 0x05	; 5
    3814:	75 e4       	ldi	r23, 0x45	; 69
    3816:	8d e9       	ldi	r24, 0x9D	; 157
    3818:	91 e4       	ldi	r25, 0x41	; 65
    381a:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    381e:	2f e1       	ldi	r18, 0x1F	; 31
    3820:	3e e2       	ldi	r19, 0x2E	; 46
    3822:	49 e9       	ldi	r20, 0x99	; 153
    3824:	5f e3       	ldi	r21, 0x3F	; 63
    3826:	0c 94 3b 2e 	jmp	0x5c76	; 0x5c76 <__subsf3>
    382a:	1f 92       	push	r1
    382c:	4f 93       	push	r20
    382e:	8e ea       	ldi	r24, 0xAE	; 174
    3830:	92 e2       	ldi	r25, 0x22	; 34
    3832:	9f 93       	push	r25
    3834:	8f 93       	push	r24
    3836:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    383a:	0f 90       	pop	r0
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	60 e0       	ldi	r22, 0x00	; 0
    3844:	70 e0       	ldi	r23, 0x00	; 0
    3846:	cb 01       	movw	r24, r22
    3848:	08 95       	ret

0000384a <get_initial_range_guess>:
    384a:	4f 92       	push	r4
    384c:	5f 92       	push	r5
    384e:	6f 92       	push	r6
    3850:	7f 92       	push	r7
    3852:	8f 92       	push	r8
    3854:	9f 92       	push	r9
    3856:	af 92       	push	r10
    3858:	bf 92       	push	r11
    385a:	cf 92       	push	r12
    385c:	df 92       	push	r13
    385e:	ef 92       	push	r14
    3860:	ff 92       	push	r15
    3862:	0f 93       	push	r16
    3864:	1f 93       	push	r17
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	00 d0       	rcall	.+0      	; 0x386c <get_initial_range_guess+0x22>
    386c:	1f 92       	push	r1
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	2b 01       	movw	r4, r22
    3874:	3c 01       	movw	r6, r24
    3876:	29 83       	std	Y+1, r18	; 0x01
    3878:	3a 83       	std	Y+2, r19	; 0x02
    387a:	4b 83       	std	Y+3, r20	; 0x03
    387c:	5c 83       	std	Y+4, r21	; 0x04
    387e:	ac 2d       	mov	r26, r12
    3880:	bd 2d       	mov	r27, r13
    3882:	ee 2d       	mov	r30, r14
    3884:	ff 2d       	mov	r31, r15
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	50 e0       	ldi	r21, 0x00	; 0
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	7f ef       	ldi	r23, 0xFF	; 255
    3892:	1f ef       	ldi	r17, 0xFF	; 255
    3894:	8d 91       	ld	r24, X+
    3896:	90 e0       	ldi	r25, 0x00	; 0
    3898:	28 17       	cp	r18, r24
    389a:	39 07       	cpc	r19, r25
    389c:	10 f4       	brcc	.+4      	; 0x38a2 <get_initial_range_guess+0x58>
    389e:	9c 01       	movw	r18, r24
    38a0:	16 2f       	mov	r17, r22
    38a2:	81 91       	ld	r24, Z+
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	48 17       	cp	r20, r24
    38a8:	59 07       	cpc	r21, r25
    38aa:	10 f4       	brcc	.+4      	; 0x38b0 <get_initial_range_guess+0x66>
    38ac:	ac 01       	movw	r20, r24
    38ae:	76 2f       	mov	r23, r22
    38b0:	6f 5f       	subi	r22, 0xFF	; 255
    38b2:	66 30       	cpi	r22, 0x06	; 6
    38b4:	79 f7       	brne	.-34     	; 0x3894 <get_initial_range_guess+0x4a>
    38b6:	87 2e       	mov	r8, r23
    38b8:	91 2c       	mov	r9, r1
    38ba:	f4 01       	movw	r30, r8
    38bc:	ee 0f       	add	r30, r30
    38be:	ff 1f       	adc	r31, r31
    38c0:	ee 0f       	add	r30, r30
    38c2:	ff 1f       	adc	r31, r31
    38c4:	e0 5e       	subi	r30, 0xE0	; 224
    38c6:	ff 4d       	sbci	r31, 0xDF	; 223
    38c8:	20 81       	ld	r18, Z
    38ca:	31 81       	ldd	r19, Z+1	; 0x01
    38cc:	42 81       	ldd	r20, Z+2	; 0x02
    38ce:	53 81       	ldd	r21, Z+3	; 0x03
    38d0:	c3 01       	movw	r24, r6
    38d2:	b2 01       	movw	r22, r4
    38d4:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    38d8:	6b 01       	movw	r12, r22
    38da:	7c 01       	movw	r14, r24
    38dc:	2b ed       	ldi	r18, 0xDB	; 219
    38de:	3f e0       	ldi	r19, 0x0F	; 15
    38e0:	49 ec       	ldi	r20, 0xC9	; 201
    38e2:	5f e3       	ldi	r21, 0x3F	; 63
    38e4:	0e 94 0e 31 	call	0x621c	; 0x621c <__gesf2>
    38e8:	18 16       	cp	r1, r24
    38ea:	0c f4       	brge	.+2      	; 0x38ee <get_initial_range_guess+0xa4>
    38ec:	76 c0       	rjmp	.+236    	; 0x39da <get_initial_range_guess+0x190>
    38ee:	2b ed       	ldi	r18, 0xDB	; 219
    38f0:	3f e0       	ldi	r19, 0x0F	; 15
    38f2:	49 ec       	ldi	r20, 0xC9	; 201
    38f4:	5f eb       	ldi	r21, 0xBF	; 191
    38f6:	c7 01       	movw	r24, r14
    38f8:	b6 01       	movw	r22, r12
    38fa:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__cmpsf2>
    38fe:	88 23       	and	r24, r24
    3900:	0c f4       	brge	.+2      	; 0x3904 <get_initial_range_guess+0xba>
    3902:	6f c0       	rjmp	.+222    	; 0x39e2 <get_initial_range_guess+0x198>
    3904:	29 81       	ldd	r18, Y+1	; 0x01
    3906:	3a 81       	ldd	r19, Y+2	; 0x02
    3908:	4b 81       	ldd	r20, Y+3	; 0x03
    390a:	5c 81       	ldd	r21, Y+4	; 0x04
    390c:	c3 01       	movw	r24, r6
    390e:	b2 01       	movw	r22, r4
    3910:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3914:	e1 2f       	mov	r30, r17
    3916:	f0 e0       	ldi	r31, 0x00	; 0
    3918:	ee 0f       	add	r30, r30
    391a:	ff 1f       	adc	r31, r31
    391c:	ee 0f       	add	r30, r30
    391e:	ff 1f       	adc	r31, r31
    3920:	e0 5e       	subi	r30, 0xE0	; 224
    3922:	ff 4d       	sbci	r31, 0xDF	; 223
    3924:	20 81       	ld	r18, Z
    3926:	31 81       	ldd	r19, Z+1	; 0x01
    3928:	42 81       	ldd	r20, Z+2	; 0x02
    392a:	53 81       	ldd	r21, Z+3	; 0x03
    392c:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3930:	2b ed       	ldi	r18, 0xDB	; 219
    3932:	3f e0       	ldi	r19, 0x0F	; 15
    3934:	49 e4       	ldi	r20, 0x49	; 73
    3936:	50 e4       	ldi	r21, 0x40	; 64
    3938:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    393c:	3b de       	rcall	.-906    	; 0x35b4 <pretty_angle>
    393e:	2b 01       	movw	r4, r22
    3940:	3c 01       	movw	r6, r24
    3942:	2b ed       	ldi	r18, 0xDB	; 219
    3944:	3f e0       	ldi	r19, 0x0F	; 15
    3946:	49 ec       	ldi	r20, 0xC9	; 201
    3948:	5f e3       	ldi	r21, 0x3F	; 63
    394a:	0e 94 0e 31 	call	0x621c	; 0x621c <__gesf2>
    394e:	18 16       	cp	r1, r24
    3950:	0c f4       	brge	.+2      	; 0x3954 <get_initial_range_guess+0x10a>
    3952:	4b c0       	rjmp	.+150    	; 0x39ea <get_initial_range_guess+0x1a0>
    3954:	2b ed       	ldi	r18, 0xDB	; 219
    3956:	3f e0       	ldi	r19, 0x0F	; 15
    3958:	49 ec       	ldi	r20, 0xC9	; 201
    395a:	5f eb       	ldi	r21, 0xBF	; 191
    395c:	c3 01       	movw	r24, r6
    395e:	b2 01       	movw	r22, r4
    3960:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__cmpsf2>
    3964:	88 23       	and	r24, r24
    3966:	0c f4       	brge	.+2      	; 0x396a <get_initial_range_guess+0x120>
    3968:	44 c0       	rjmp	.+136    	; 0x39f2 <get_initial_range_guess+0x1a8>
    396a:	c7 01       	movw	r24, r14
    396c:	b6 01       	movw	r22, r12
    396e:	f3 de       	rcall	.-538    	; 0x3756 <sensor_model>
    3970:	6b 01       	movw	r12, r22
    3972:	7c 01       	movw	r14, r24
    3974:	c3 01       	movw	r24, r6
    3976:	b2 01       	movw	r22, r4
    3978:	17 df       	rcall	.-466    	; 0x37a8 <emitter_model>
    397a:	9b 01       	movw	r18, r22
    397c:	ac 01       	movw	r20, r24
    397e:	c7 01       	movw	r24, r14
    3980:	b6 01       	movw	r22, r12
    3982:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3986:	6b 01       	movw	r12, r22
    3988:	7c 01       	movw	r14, r24
    398a:	20 e0       	ldi	r18, 0x00	; 0
    398c:	30 e0       	ldi	r19, 0x00	; 0
    398e:	a9 01       	movw	r20, r18
    3990:	0e 94 0e 31 	call	0x621c	; 0x621c <__gesf2>
    3994:	18 16       	cp	r1, r24
    3996:	8c f5       	brge	.+98     	; 0x39fa <get_initial_range_guess+0x1b0>
    3998:	81 2f       	mov	r24, r17
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	9c 01       	movw	r18, r24
    399e:	22 0f       	add	r18, r18
    39a0:	33 1f       	adc	r19, r19
    39a2:	82 0f       	add	r24, r18
    39a4:	93 1f       	adc	r25, r19
    39a6:	88 0f       	add	r24, r24
    39a8:	99 1f       	adc	r25, r25
    39aa:	a8 0e       	add	r10, r24
    39ac:	b9 1e       	adc	r11, r25
    39ae:	f4 01       	movw	r30, r8
    39b0:	ea 0d       	add	r30, r10
    39b2:	fb 1d       	adc	r31, r11
    39b4:	60 81       	ld	r22, Z
    39b6:	70 e0       	ldi	r23, 0x00	; 0
    39b8:	80 e0       	ldi	r24, 0x00	; 0
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__floatsisf>
    39c0:	a7 01       	movw	r20, r14
    39c2:	96 01       	movw	r18, r12
    39c4:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    39c8:	40 2f       	mov	r20, r16
    39ca:	17 df       	rcall	.-466    	; 0x37fa <inverse_amplitude_model>
    39cc:	28 e9       	ldi	r18, 0x98	; 152
    39ce:	3c e4       	ldi	r19, 0x4C	; 76
    39d0:	45 e8       	ldi	r20, 0x85	; 133
    39d2:	50 e4       	ldi	r21, 0x40	; 64
    39d4:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    39d8:	13 c0       	rjmp	.+38     	; 0x3a00 <get_initial_range_guess+0x1b6>
    39da:	60 e0       	ldi	r22, 0x00	; 0
    39dc:	70 e0       	ldi	r23, 0x00	; 0
    39de:	cb 01       	movw	r24, r22
    39e0:	0f c0       	rjmp	.+30     	; 0x3a00 <get_initial_range_guess+0x1b6>
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	70 e0       	ldi	r23, 0x00	; 0
    39e6:	cb 01       	movw	r24, r22
    39e8:	0b c0       	rjmp	.+22     	; 0x3a00 <get_initial_range_guess+0x1b6>
    39ea:	60 e0       	ldi	r22, 0x00	; 0
    39ec:	70 e0       	ldi	r23, 0x00	; 0
    39ee:	cb 01       	movw	r24, r22
    39f0:	07 c0       	rjmp	.+14     	; 0x3a00 <get_initial_range_guess+0x1b6>
    39f2:	60 e0       	ldi	r22, 0x00	; 0
    39f4:	70 e0       	ldi	r23, 0x00	; 0
    39f6:	cb 01       	movw	r24, r22
    39f8:	03 c0       	rjmp	.+6      	; 0x3a00 <get_initial_range_guess+0x1b6>
    39fa:	60 e0       	ldi	r22, 0x00	; 0
    39fc:	70 e0       	ldi	r23, 0x00	; 0
    39fe:	cb 01       	movw	r24, r22
    3a00:	24 96       	adiw	r28, 0x04	; 4
    3a02:	cd bf       	out	0x3d, r28	; 61
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	ff 90       	pop	r15
    3a10:	ef 90       	pop	r14
    3a12:	df 90       	pop	r13
    3a14:	cf 90       	pop	r12
    3a16:	bf 90       	pop	r11
    3a18:	af 90       	pop	r10
    3a1a:	9f 90       	pop	r9
    3a1c:	8f 90       	pop	r8
    3a1e:	7f 90       	pop	r7
    3a20:	6f 90       	pop	r6
    3a22:	5f 90       	pop	r5
    3a24:	4f 90       	pop	r4
    3a26:	08 95       	ret

00003a28 <range_estimate>:
    3a28:	2f 92       	push	r2
    3a2a:	3f 92       	push	r3
    3a2c:	4f 92       	push	r4
    3a2e:	5f 92       	push	r5
    3a30:	6f 92       	push	r6
    3a32:	7f 92       	push	r7
    3a34:	8f 92       	push	r8
    3a36:	9f 92       	push	r9
    3a38:	af 92       	push	r10
    3a3a:	bf 92       	push	r11
    3a3c:	cf 92       	push	r12
    3a3e:	df 92       	push	r13
    3a40:	ef 92       	push	r14
    3a42:	ff 92       	push	r15
    3a44:	0f 93       	push	r16
    3a46:	1f 93       	push	r17
    3a48:	cf 93       	push	r28
    3a4a:	df 93       	push	r29
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	c7 5b       	subi	r28, 0xB7	; 183
    3a52:	d1 09       	sbc	r29, r1
    3a54:	cd bf       	out	0x3d, r28	; 61
    3a56:	de bf       	out	0x3e, r29	; 62
    3a58:	c9 55       	subi	r28, 0x59	; 89
    3a5a:	df 4f       	sbci	r29, 0xFF	; 255
    3a5c:	68 83       	st	Y, r22
    3a5e:	79 83       	std	Y+1, r23	; 0x01
    3a60:	8a 83       	std	Y+2, r24	; 0x02
    3a62:	9b 83       	std	Y+3, r25	; 0x03
    3a64:	c7 5a       	subi	r28, 0xA7	; 167
    3a66:	d0 40       	sbci	r29, 0x00	; 0
    3a68:	c5 55       	subi	r28, 0x55	; 85
    3a6a:	df 4f       	sbci	r29, 0xFF	; 255
    3a6c:	28 83       	st	Y, r18
    3a6e:	39 83       	std	Y+1, r19	; 0x01
    3a70:	4a 83       	std	Y+2, r20	; 0x02
    3a72:	5b 83       	std	Y+3, r21	; 0x03
    3a74:	cb 5a       	subi	r28, 0xAB	; 171
    3a76:	d0 40       	sbci	r29, 0x00	; 0
    3a78:	cd 54       	subi	r28, 0x4D	; 77
    3a7a:	df 4f       	sbci	r29, 0xFF	; 255
    3a7c:	e8 82       	st	Y, r14
    3a7e:	f9 82       	std	Y+1, r15	; 0x01
    3a80:	0a 83       	std	Y+2, r16	; 0x02
    3a82:	1b 83       	std	Y+3, r17	; 0x03
    3a84:	c3 5b       	subi	r28, 0xB3	; 179
    3a86:	d0 40       	sbci	r29, 0x00	; 0
    3a88:	c9 54       	subi	r28, 0x49	; 73
    3a8a:	df 4f       	sbci	r29, 0xFF	; 255
    3a8c:	c8 82       	st	Y, r12
    3a8e:	c7 5b       	subi	r28, 0xB7	; 183
    3a90:	d0 40       	sbci	r29, 0x00	; 0
    3a92:	ca 56       	subi	r28, 0x6A	; 106
    3a94:	df 4f       	sbci	r29, 0xFF	; 255
    3a96:	a8 82       	st	Y, r10
    3a98:	c6 59       	subi	r28, 0x96	; 150
    3a9a:	d0 40       	sbci	r29, 0x00	; 0
    3a9c:	c9 56       	subi	r28, 0x69	; 105
    3a9e:	df 4f       	sbci	r29, 0xFF	; 255
    3aa0:	b8 82       	st	Y, r11
    3aa2:	c7 59       	subi	r28, 0x97	; 151
    3aa4:	d0 40       	sbci	r29, 0x00	; 0
    3aa6:	ce 01       	movw	r24, r28
    3aa8:	01 96       	adiw	r24, 0x01	; 1
    3aaa:	cf 54       	subi	r28, 0x4F	; 79
    3aac:	df 4f       	sbci	r29, 0xFF	; 255
    3aae:	88 83       	st	Y, r24
    3ab0:	99 83       	std	Y+1, r25	; 0x01
    3ab2:	c1 5b       	subi	r28, 0xB1	; 177
    3ab4:	d0 40       	sbci	r29, 0x00	; 0
    3ab6:	e0 e2       	ldi	r30, 0x20	; 32
    3ab8:	f0 e2       	ldi	r31, 0x20	; 32
    3aba:	cb 55       	subi	r28, 0x5B	; 91
    3abc:	df 4f       	sbci	r29, 0xFF	; 255
    3abe:	e8 83       	st	Y, r30
    3ac0:	f9 83       	std	Y+1, r31	; 0x01
    3ac2:	c5 5a       	subi	r28, 0xA5	; 165
    3ac4:	d0 40       	sbci	r29, 0x00	; 0
    3ac6:	88 e3       	ldi	r24, 0x38	; 56
    3ac8:	90 e2       	ldi	r25, 0x20	; 32
    3aca:	c7 56       	subi	r28, 0x67	; 103
    3acc:	df 4f       	sbci	r29, 0xFF	; 255
    3ace:	88 83       	st	Y, r24
    3ad0:	99 83       	std	Y+1, r25	; 0x01
    3ad2:	c9 59       	subi	r28, 0x99	; 153
    3ad4:	d0 40       	sbci	r29, 0x00	; 0
    3ad6:	cd 55       	subi	r28, 0x5D	; 93
    3ad8:	df 4f       	sbci	r29, 0xFF	; 255
    3ada:	18 82       	st	Y, r1
    3adc:	c3 5a       	subi	r28, 0xA3	; 163
    3ade:	d0 40       	sbci	r29, 0x00	; 0
    3ae0:	9f ef       	ldi	r25, 0xFF	; 255
    3ae2:	c0 55       	subi	r28, 0x50	; 80
    3ae4:	df 4f       	sbci	r29, 0xFF	; 255
    3ae6:	98 83       	st	Y, r25
    3ae8:	c0 5b       	subi	r28, 0xB0	; 176
    3aea:	d0 40       	sbci	r29, 0x00	; 0
    3aec:	ef ef       	ldi	r30, 0xFF	; 255
    3aee:	c1 55       	subi	r28, 0x51	; 81
    3af0:	df 4f       	sbci	r29, 0xFF	; 255
    3af2:	e8 83       	st	Y, r30
    3af4:	cf 5a       	subi	r28, 0xAF	; 175
    3af6:	d0 40       	sbci	r29, 0x00	; 0
    3af8:	c8 56       	subi	r28, 0x68	; 104
    3afa:	df 4f       	sbci	r29, 0xFF	; 255
    3afc:	18 82       	st	Y, r1
    3afe:	c8 59       	subi	r28, 0x98	; 152
    3b00:	d0 40       	sbci	r29, 0x00	; 0
    3b02:	3e c2       	rjmp	.+1148   	; 0x3f80 <range_estimate+0x558>
    3b04:	ce 56       	subi	r28, 0x6E	; 110
    3b06:	df 4f       	sbci	r29, 0xFF	; 255
    3b08:	88 81       	ld	r24, Y
    3b0a:	c2 59       	subi	r28, 0x92	; 146
    3b0c:	d0 40       	sbci	r29, 0x00	; 0
    3b0e:	ca 56       	subi	r28, 0x6A	; 106
    3b10:	df 4f       	sbci	r29, 0xFF	; 255
    3b12:	f8 81       	ld	r31, Y
    3b14:	c6 59       	subi	r28, 0x96	; 150
    3b16:	d0 40       	sbci	r29, 0x00	; 0
    3b18:	8f 1b       	sub	r24, r31
    3b1a:	ce 56       	subi	r28, 0x6E	; 110
    3b1c:	df 4f       	sbci	r29, 0xFF	; 255
    3b1e:	e8 81       	ld	r30, Y
    3b20:	f9 81       	ldd	r31, Y+1	; 0x01
    3b22:	c2 59       	subi	r28, 0x92	; 146
    3b24:	d0 40       	sbci	r29, 0x00	; 0
    3b26:	21 91       	ld	r18, Z+
    3b28:	ce 56       	subi	r28, 0x6E	; 110
    3b2a:	df 4f       	sbci	r29, 0xFF	; 255
    3b2c:	e8 83       	st	Y, r30
    3b2e:	f9 83       	std	Y+1, r31	; 0x01
    3b30:	c2 59       	subi	r28, 0x92	; 146
    3b32:	d0 40       	sbci	r29, 0x00	; 0
    3b34:	cf 56       	subi	r28, 0x6F	; 111
    3b36:	df 4f       	sbci	r29, 0xFF	; 255
    3b38:	28 83       	st	Y, r18
    3b3a:	c1 59       	subi	r28, 0x91	; 145
    3b3c:	d0 40       	sbci	r29, 0x00	; 0
    3b3e:	c8 56       	subi	r28, 0x68	; 104
    3b40:	df 4f       	sbci	r29, 0xFF	; 255
    3b42:	98 81       	ld	r25, Y
    3b44:	c8 59       	subi	r28, 0x98	; 152
    3b46:	d0 40       	sbci	r29, 0x00	; 0
    3b48:	92 17       	cp	r25, r18
    3b4a:	a0 f4       	brcc	.+40     	; 0x3b74 <range_estimate+0x14c>
    3b4c:	c0 55       	subi	r28, 0x50	; 80
    3b4e:	df 4f       	sbci	r29, 0xFF	; 255
    3b50:	88 83       	st	Y, r24
    3b52:	c0 5b       	subi	r28, 0xB0	; 176
    3b54:	d0 40       	sbci	r29, 0x00	; 0
    3b56:	cc 55       	subi	r28, 0x5C	; 92
    3b58:	df 4f       	sbci	r29, 0xFF	; 255
    3b5a:	e8 81       	ld	r30, Y
    3b5c:	c4 5a       	subi	r28, 0xA4	; 164
    3b5e:	d0 40       	sbci	r29, 0x00	; 0
    3b60:	c1 55       	subi	r28, 0x51	; 81
    3b62:	df 4f       	sbci	r29, 0xFF	; 255
    3b64:	e8 83       	st	Y, r30
    3b66:	cf 5a       	subi	r28, 0xAF	; 175
    3b68:	d0 40       	sbci	r29, 0x00	; 0
    3b6a:	c8 56       	subi	r28, 0x68	; 104
    3b6c:	df 4f       	sbci	r29, 0xFF	; 255
    3b6e:	28 83       	st	Y, r18
    3b70:	c8 59       	subi	r28, 0x98	; 152
    3b72:	d0 40       	sbci	r29, 0x00	; 0
    3b74:	cf 56       	subi	r28, 0x6F	; 111
    3b76:	df 4f       	sbci	r29, 0xFF	; 255
    3b78:	f8 81       	ld	r31, Y
    3b7a:	c1 59       	subi	r28, 0x91	; 145
    3b7c:	d0 40       	sbci	r29, 0x00	; 0
    3b7e:	f4 30       	cpi	r31, 0x04	; 4
    3b80:	08 f4       	brcc	.+2      	; 0x3b84 <range_estimate+0x15c>
    3b82:	9b c1       	rjmp	.+822    	; 0x3eba <range_estimate+0x492>
    3b84:	28 e9       	ldi	r18, 0x98	; 152
    3b86:	3c e4       	ldi	r19, 0x4C	; 76
    3b88:	45 e0       	ldi	r20, 0x05	; 5
    3b8a:	50 e4       	ldi	r21, 0x40	; 64
    3b8c:	f1 01       	movw	r30, r2
    3b8e:	60 81       	ld	r22, Z
    3b90:	71 81       	ldd	r23, Z+1	; 0x01
    3b92:	82 81       	ldd	r24, Z+2	; 0x02
    3b94:	93 81       	ldd	r25, Z+3	; 0x03
    3b96:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3b9a:	c5 56       	subi	r28, 0x65	; 101
    3b9c:	df 4f       	sbci	r29, 0xFF	; 255
    3b9e:	68 83       	st	Y, r22
    3ba0:	79 83       	std	Y+1, r23	; 0x01
    3ba2:	8a 83       	std	Y+2, r24	; 0x02
    3ba4:	9b 83       	std	Y+3, r25	; 0x03
    3ba6:	cb 59       	subi	r28, 0x9B	; 155
    3ba8:	d0 40       	sbci	r29, 0x00	; 0
    3baa:	28 e9       	ldi	r18, 0x98	; 152
    3bac:	3c e4       	ldi	r19, 0x4C	; 76
    3bae:	45 e0       	ldi	r20, 0x05	; 5
    3bb0:	50 e4       	ldi	r21, 0x40	; 64
    3bb2:	f1 01       	movw	r30, r2
    3bb4:	64 81       	ldd	r22, Z+4	; 0x04
    3bb6:	75 81       	ldd	r23, Z+5	; 0x05
    3bb8:	86 81       	ldd	r24, Z+6	; 0x06
    3bba:	97 81       	ldd	r25, Z+7	; 0x07
    3bbc:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3bc0:	c1 56       	subi	r28, 0x61	; 97
    3bc2:	df 4f       	sbci	r29, 0xFF	; 255
    3bc4:	68 83       	st	Y, r22
    3bc6:	79 83       	std	Y+1, r23	; 0x01
    3bc8:	8a 83       	std	Y+2, r24	; 0x02
    3bca:	9b 83       	std	Y+3, r25	; 0x03
    3bcc:	cf 59       	subi	r28, 0x9F	; 159
    3bce:	d0 40       	sbci	r29, 0x00	; 0
    3bd0:	c5 55       	subi	r28, 0x55	; 85
    3bd2:	df 4f       	sbci	r29, 0xFF	; 255
    3bd4:	68 81       	ld	r22, Y
    3bd6:	79 81       	ldd	r23, Y+1	; 0x01
    3bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3bda:	9b 81       	ldd	r25, Y+3	; 0x03
    3bdc:	cb 5a       	subi	r28, 0xAB	; 171
    3bde:	d0 40       	sbci	r29, 0x00	; 0
    3be0:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <cos>
    3be4:	4b 01       	movw	r8, r22
    3be6:	5c 01       	movw	r10, r24
    3be8:	28 e9       	ldi	r18, 0x98	; 152
    3bea:	3c e4       	ldi	r19, 0x4C	; 76
    3bec:	45 e0       	ldi	r20, 0x05	; 5
    3bee:	50 e4       	ldi	r21, 0x40	; 64
    3bf0:	c7 56       	subi	r28, 0x67	; 103
    3bf2:	df 4f       	sbci	r29, 0xFF	; 255
    3bf4:	e8 81       	ld	r30, Y
    3bf6:	f9 81       	ldd	r31, Y+1	; 0x01
    3bf8:	c9 59       	subi	r28, 0x99	; 153
    3bfa:	d0 40       	sbci	r29, 0x00	; 0
    3bfc:	60 81       	ld	r22, Z
    3bfe:	71 81       	ldd	r23, Z+1	; 0x01
    3c00:	82 81       	ldd	r24, Z+2	; 0x02
    3c02:	93 81       	ldd	r25, Z+3	; 0x03
    3c04:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3c08:	6b 01       	movw	r12, r22
    3c0a:	7c 01       	movw	r14, r24
    3c0c:	c9 55       	subi	r28, 0x59	; 89
    3c0e:	df 4f       	sbci	r29, 0xFF	; 255
    3c10:	28 81       	ld	r18, Y
    3c12:	39 81       	ldd	r19, Y+1	; 0x01
    3c14:	4a 81       	ldd	r20, Y+2	; 0x02
    3c16:	5b 81       	ldd	r21, Y+3	; 0x03
    3c18:	c7 5a       	subi	r28, 0xA7	; 167
    3c1a:	d0 40       	sbci	r29, 0x00	; 0
    3c1c:	c5 01       	movw	r24, r10
    3c1e:	b4 01       	movw	r22, r8
    3c20:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3c24:	9b 01       	movw	r18, r22
    3c26:	ac 01       	movw	r20, r24
    3c28:	c7 01       	movw	r24, r14
    3c2a:	b6 01       	movw	r22, r12
    3c2c:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    3c30:	4b 01       	movw	r8, r22
    3c32:	5c 01       	movw	r10, r24
    3c34:	c5 55       	subi	r28, 0x55	; 85
    3c36:	df 4f       	sbci	r29, 0xFF	; 255
    3c38:	68 81       	ld	r22, Y
    3c3a:	79 81       	ldd	r23, Y+1	; 0x01
    3c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c40:	cb 5a       	subi	r28, 0xAB	; 171
    3c42:	d0 40       	sbci	r29, 0x00	; 0
    3c44:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <sin>
    3c48:	2b 01       	movw	r4, r22
    3c4a:	3c 01       	movw	r6, r24
    3c4c:	28 e9       	ldi	r18, 0x98	; 152
    3c4e:	3c e4       	ldi	r19, 0x4C	; 76
    3c50:	45 e0       	ldi	r20, 0x05	; 5
    3c52:	50 e4       	ldi	r21, 0x40	; 64
    3c54:	c7 56       	subi	r28, 0x67	; 103
    3c56:	df 4f       	sbci	r29, 0xFF	; 255
    3c58:	e8 81       	ld	r30, Y
    3c5a:	f9 81       	ldd	r31, Y+1	; 0x01
    3c5c:	c9 59       	subi	r28, 0x99	; 153
    3c5e:	d0 40       	sbci	r29, 0x00	; 0
    3c60:	64 81       	ldd	r22, Z+4	; 0x04
    3c62:	75 81       	ldd	r23, Z+5	; 0x05
    3c64:	86 81       	ldd	r24, Z+6	; 0x06
    3c66:	97 81       	ldd	r25, Z+7	; 0x07
    3c68:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3c6c:	6b 01       	movw	r12, r22
    3c6e:	7c 01       	movw	r14, r24
    3c70:	c9 55       	subi	r28, 0x59	; 89
    3c72:	df 4f       	sbci	r29, 0xFF	; 255
    3c74:	28 81       	ld	r18, Y
    3c76:	39 81       	ldd	r19, Y+1	; 0x01
    3c78:	4a 81       	ldd	r20, Y+2	; 0x02
    3c7a:	5b 81       	ldd	r21, Y+3	; 0x03
    3c7c:	c7 5a       	subi	r28, 0xA7	; 167
    3c7e:	d0 40       	sbci	r29, 0x00	; 0
    3c80:	c3 01       	movw	r24, r6
    3c82:	b2 01       	movw	r22, r4
    3c84:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3c88:	9b 01       	movw	r18, r22
    3c8a:	ac 01       	movw	r20, r24
    3c8c:	c7 01       	movw	r24, r14
    3c8e:	b6 01       	movw	r22, r12
    3c90:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    3c94:	6b 01       	movw	r12, r22
    3c96:	7c 01       	movw	r14, r24
    3c98:	c5 56       	subi	r28, 0x65	; 101
    3c9a:	df 4f       	sbci	r29, 0xFF	; 255
    3c9c:	28 81       	ld	r18, Y
    3c9e:	39 81       	ldd	r19, Y+1	; 0x01
    3ca0:	4a 81       	ldd	r20, Y+2	; 0x02
    3ca2:	5b 81       	ldd	r21, Y+3	; 0x03
    3ca4:	cb 59       	subi	r28, 0x9B	; 155
    3ca6:	d0 40       	sbci	r29, 0x00	; 0
    3ca8:	c5 01       	movw	r24, r10
    3caa:	b4 01       	movw	r22, r8
    3cac:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3cb0:	2b 01       	movw	r4, r22
    3cb2:	3c 01       	movw	r6, r24
    3cb4:	c1 56       	subi	r28, 0x61	; 97
    3cb6:	df 4f       	sbci	r29, 0xFF	; 255
    3cb8:	28 81       	ld	r18, Y
    3cba:	39 81       	ldd	r19, Y+1	; 0x01
    3cbc:	4a 81       	ldd	r20, Y+2	; 0x02
    3cbe:	5b 81       	ldd	r21, Y+3	; 0x03
    3cc0:	cf 59       	subi	r28, 0x9F	; 159
    3cc2:	d0 40       	sbci	r29, 0x00	; 0
    3cc4:	c7 01       	movw	r24, r14
    3cc6:	b6 01       	movw	r22, r12
    3cc8:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3ccc:	a3 01       	movw	r20, r6
    3cce:	92 01       	movw	r18, r4
    3cd0:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <atan2>
    3cd4:	cc 56       	subi	r28, 0x6C	; 108
    3cd6:	df 4f       	sbci	r29, 0xFF	; 255
    3cd8:	e8 81       	ld	r30, Y
    3cda:	f9 81       	ldd	r31, Y+1	; 0x01
    3cdc:	c4 59       	subi	r28, 0x94	; 148
    3cde:	d0 40       	sbci	r29, 0x00	; 0
    3ce0:	20 81       	ld	r18, Z
    3ce2:	31 81       	ldd	r19, Z+1	; 0x01
    3ce4:	42 81       	ldd	r20, Z+2	; 0x02
    3ce6:	53 81       	ldd	r21, Z+3	; 0x03
    3ce8:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3cec:	2b 01       	movw	r4, r22
    3cee:	3c 01       	movw	r6, r24
    3cf0:	a5 01       	movw	r20, r10
    3cf2:	94 01       	movw	r18, r8
    3cf4:	c5 56       	subi	r28, 0x65	; 101
    3cf6:	df 4f       	sbci	r29, 0xFF	; 255
    3cf8:	68 81       	ld	r22, Y
    3cfa:	79 81       	ldd	r23, Y+1	; 0x01
    3cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    3cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    3d00:	cb 59       	subi	r28, 0x9B	; 155
    3d02:	d0 40       	sbci	r29, 0x00	; 0
    3d04:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3d08:	4b 01       	movw	r8, r22
    3d0a:	5c 01       	movw	r10, r24
    3d0c:	a7 01       	movw	r20, r14
    3d0e:	96 01       	movw	r18, r12
    3d10:	c1 56       	subi	r28, 0x61	; 97
    3d12:	df 4f       	sbci	r29, 0xFF	; 255
    3d14:	68 81       	ld	r22, Y
    3d16:	79 81       	ldd	r23, Y+1	; 0x01
    3d18:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    3d1c:	cf 59       	subi	r28, 0x9F	; 159
    3d1e:	d0 40       	sbci	r29, 0x00	; 0
    3d20:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3d24:	a5 01       	movw	r20, r10
    3d26:	94 01       	movw	r18, r8
    3d28:	0e 94 af 2e 	call	0x5d5e	; 0x5d5e <atan2>
    3d2c:	cb 55       	subi	r28, 0x5B	; 91
    3d2e:	df 4f       	sbci	r29, 0xFF	; 255
    3d30:	e8 81       	ld	r30, Y
    3d32:	f9 81       	ldd	r31, Y+1	; 0x01
    3d34:	c5 5a       	subi	r28, 0xA5	; 165
    3d36:	d0 40       	sbci	r29, 0x00	; 0
    3d38:	20 81       	ld	r18, Z
    3d3a:	31 81       	ldd	r19, Z+1	; 0x01
    3d3c:	42 81       	ldd	r20, Z+2	; 0x02
    3d3e:	53 81       	ldd	r21, Z+3	; 0x03
    3d40:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3d44:	cd 54       	subi	r28, 0x4D	; 77
    3d46:	df 4f       	sbci	r29, 0xFF	; 255
    3d48:	28 81       	ld	r18, Y
    3d4a:	39 81       	ldd	r19, Y+1	; 0x01
    3d4c:	4a 81       	ldd	r20, Y+2	; 0x02
    3d4e:	5b 81       	ldd	r21, Y+3	; 0x03
    3d50:	c3 5b       	subi	r28, 0xB3	; 179
    3d52:	d0 40       	sbci	r29, 0x00	; 0
    3d54:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3d58:	6b 01       	movw	r12, r22
    3d5a:	7c 01       	movw	r14, r24
    3d5c:	c3 01       	movw	r24, r6
    3d5e:	b2 01       	movw	r22, r4
    3d60:	29 dc       	rcall	.-1966   	; 0x35b4 <pretty_angle>
    3d62:	2b 01       	movw	r4, r22
    3d64:	3c 01       	movw	r6, r24
    3d66:	c7 01       	movw	r24, r14
    3d68:	b6 01       	movw	r22, r12
    3d6a:	24 dc       	rcall	.-1976   	; 0x35b4 <pretty_angle>
    3d6c:	6b 01       	movw	r12, r22
    3d6e:	7c 01       	movw	r14, r24
    3d70:	c3 01       	movw	r24, r6
    3d72:	b2 01       	movw	r22, r4
    3d74:	f0 dc       	rcall	.-1568   	; 0x3756 <sensor_model>
    3d76:	c5 56       	subi	r28, 0x65	; 101
    3d78:	df 4f       	sbci	r29, 0xFF	; 255
    3d7a:	68 83       	st	Y, r22
    3d7c:	79 83       	std	Y+1, r23	; 0x01
    3d7e:	8a 83       	std	Y+2, r24	; 0x02
    3d80:	9b 83       	std	Y+3, r25	; 0x03
    3d82:	cb 59       	subi	r28, 0x9B	; 155
    3d84:	d0 40       	sbci	r29, 0x00	; 0
    3d86:	c7 01       	movw	r24, r14
    3d88:	b6 01       	movw	r22, r12
    3d8a:	0e dd       	rcall	.-1508   	; 0x37a8 <emitter_model>
    3d8c:	6b 01       	movw	r12, r22
    3d8e:	7c 01       	movw	r14, r24
    3d90:	cf 56       	subi	r28, 0x6F	; 111
    3d92:	df 4f       	sbci	r29, 0xFF	; 255
    3d94:	f8 81       	ld	r31, Y
    3d96:	c1 59       	subi	r28, 0x91	; 145
    3d98:	d0 40       	sbci	r29, 0x00	; 0
    3d9a:	6f 2f       	mov	r22, r31
    3d9c:	70 e0       	ldi	r23, 0x00	; 0
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__floatsisf>
    3da6:	4b 01       	movw	r8, r22
    3da8:	5c 01       	movw	r10, r24
    3daa:	a7 01       	movw	r20, r14
    3dac:	96 01       	movw	r18, r12
    3dae:	c5 56       	subi	r28, 0x65	; 101
    3db0:	df 4f       	sbci	r29, 0xFF	; 255
    3db2:	68 81       	ld	r22, Y
    3db4:	79 81       	ldd	r23, Y+1	; 0x01
    3db6:	8a 81       	ldd	r24, Y+2	; 0x02
    3db8:	9b 81       	ldd	r25, Y+3	; 0x03
    3dba:	cb 59       	subi	r28, 0x9B	; 155
    3dbc:	d0 40       	sbci	r29, 0x00	; 0
    3dbe:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3dc2:	9b 01       	movw	r18, r22
    3dc4:	ac 01       	movw	r20, r24
    3dc6:	c5 01       	movw	r24, r10
    3dc8:	b4 01       	movw	r22, r8
    3dca:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    3dce:	c9 54       	subi	r28, 0x49	; 73
    3dd0:	df 4f       	sbci	r29, 0xFF	; 255
    3dd2:	48 81       	ld	r20, Y
    3dd4:	c7 5b       	subi	r28, 0xB7	; 183
    3dd6:	d0 40       	sbci	r29, 0x00	; 0
    3dd8:	10 dd       	rcall	.-1504   	; 0x37fa <inverse_amplitude_model>
    3dda:	4b 01       	movw	r8, r22
    3ddc:	5c 01       	movw	r10, r24
    3dde:	c3 01       	movw	r24, r6
    3de0:	b2 01       	movw	r22, r4
    3de2:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <cos>
    3de6:	a5 01       	movw	r20, r10
    3de8:	94 01       	movw	r18, r8
    3dea:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3dee:	6b 01       	movw	r12, r22
    3df0:	7c 01       	movw	r14, r24
    3df2:	c7 56       	subi	r28, 0x67	; 103
    3df4:	df 4f       	sbci	r29, 0xFF	; 255
    3df6:	e8 81       	ld	r30, Y
    3df8:	f9 81       	ldd	r31, Y+1	; 0x01
    3dfa:	c9 59       	subi	r28, 0x99	; 153
    3dfc:	d0 40       	sbci	r29, 0x00	; 0
    3dfe:	20 81       	ld	r18, Z
    3e00:	31 81       	ldd	r19, Z+1	; 0x01
    3e02:	42 81       	ldd	r20, Z+2	; 0x02
    3e04:	53 81       	ldd	r21, Z+3	; 0x03
    3e06:	f1 01       	movw	r30, r2
    3e08:	60 81       	ld	r22, Z
    3e0a:	71 81       	ldd	r23, Z+1	; 0x01
    3e0c:	82 81       	ldd	r24, Z+2	; 0x02
    3e0e:	93 81       	ldd	r25, Z+3	; 0x03
    3e10:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3e14:	28 e9       	ldi	r18, 0x98	; 152
    3e16:	3c e4       	ldi	r19, 0x4C	; 76
    3e18:	45 e0       	ldi	r20, 0x05	; 5
    3e1a:	50 e4       	ldi	r21, 0x40	; 64
    3e1c:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3e20:	9b 01       	movw	r18, r22
    3e22:	ac 01       	movw	r20, r24
    3e24:	c7 01       	movw	r24, r14
    3e26:	b6 01       	movw	r22, r12
    3e28:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    3e2c:	6b 01       	movw	r12, r22
    3e2e:	7c 01       	movw	r14, r24
    3e30:	c3 01       	movw	r24, r6
    3e32:	b2 01       	movw	r22, r4
    3e34:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <sin>
    3e38:	a5 01       	movw	r20, r10
    3e3a:	94 01       	movw	r18, r8
    3e3c:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3e40:	4b 01       	movw	r8, r22
    3e42:	5c 01       	movw	r10, r24
    3e44:	c7 56       	subi	r28, 0x67	; 103
    3e46:	df 4f       	sbci	r29, 0xFF	; 255
    3e48:	e8 81       	ld	r30, Y
    3e4a:	f9 81       	ldd	r31, Y+1	; 0x01
    3e4c:	c9 59       	subi	r28, 0x99	; 153
    3e4e:	d0 40       	sbci	r29, 0x00	; 0
    3e50:	24 81       	ldd	r18, Z+4	; 0x04
    3e52:	35 81       	ldd	r19, Z+5	; 0x05
    3e54:	46 81       	ldd	r20, Z+6	; 0x06
    3e56:	57 81       	ldd	r21, Z+7	; 0x07
    3e58:	f1 01       	movw	r30, r2
    3e5a:	64 81       	ldd	r22, Z+4	; 0x04
    3e5c:	75 81       	ldd	r23, Z+5	; 0x05
    3e5e:	86 81       	ldd	r24, Z+6	; 0x06
    3e60:	97 81       	ldd	r25, Z+7	; 0x07
    3e62:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    3e66:	28 e9       	ldi	r18, 0x98	; 152
    3e68:	3c e4       	ldi	r19, 0x4C	; 76
    3e6a:	45 e0       	ldi	r20, 0x05	; 5
    3e6c:	50 e4       	ldi	r21, 0x40	; 64
    3e6e:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3e72:	9b 01       	movw	r18, r22
    3e74:	ac 01       	movw	r20, r24
    3e76:	c5 01       	movw	r24, r10
    3e78:	b4 01       	movw	r22, r8
    3e7a:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    3e7e:	4b 01       	movw	r8, r22
    3e80:	5c 01       	movw	r10, r24
    3e82:	a7 01       	movw	r20, r14
    3e84:	96 01       	movw	r18, r12
    3e86:	c7 01       	movw	r24, r14
    3e88:	b6 01       	movw	r22, r12
    3e8a:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3e8e:	6b 01       	movw	r12, r22
    3e90:	7c 01       	movw	r14, r24
    3e92:	a5 01       	movw	r20, r10
    3e94:	94 01       	movw	r18, r8
    3e96:	c5 01       	movw	r24, r10
    3e98:	b4 01       	movw	r22, r8
    3e9a:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    3e9e:	9b 01       	movw	r18, r22
    3ea0:	ac 01       	movw	r20, r24
    3ea2:	c7 01       	movw	r24, r14
    3ea4:	b6 01       	movw	r22, r12
    3ea6:	0e 94 3c 2e 	call	0x5c78	; 0x5c78 <__addsf3>
    3eaa:	0e 94 86 31 	call	0x630c	; 0x630c <sqrt>
    3eae:	f8 01       	movw	r30, r16
    3eb0:	60 83       	st	Z, r22
    3eb2:	71 83       	std	Z+1, r23	; 0x01
    3eb4:	82 83       	std	Z+2, r24	; 0x02
    3eb6:	93 83       	std	Z+3, r25	; 0x03
    3eb8:	05 c0       	rjmp	.+10     	; 0x3ec4 <range_estimate+0x49c>
    3eba:	f8 01       	movw	r30, r16
    3ebc:	10 82       	st	Z, r1
    3ebe:	11 82       	std	Z+1, r1	; 0x01
    3ec0:	12 82       	std	Z+2, r1	; 0x02
    3ec2:	13 82       	std	Z+3, r1	; 0x03
    3ec4:	f8 e0       	ldi	r31, 0x08	; 8
    3ec6:	2f 0e       	add	r2, r31
    3ec8:	31 1c       	adc	r3, r1
    3eca:	cc 56       	subi	r28, 0x6C	; 108
    3ecc:	df 4f       	sbci	r29, 0xFF	; 255
    3ece:	88 81       	ld	r24, Y
    3ed0:	99 81       	ldd	r25, Y+1	; 0x01
    3ed2:	c4 59       	subi	r28, 0x94	; 148
    3ed4:	d0 40       	sbci	r29, 0x00	; 0
    3ed6:	04 96       	adiw	r24, 0x04	; 4
    3ed8:	cc 56       	subi	r28, 0x6C	; 108
    3eda:	df 4f       	sbci	r29, 0xFF	; 255
    3edc:	88 83       	st	Y, r24
    3ede:	99 83       	std	Y+1, r25	; 0x01
    3ee0:	c4 59       	subi	r28, 0x94	; 148
    3ee2:	d0 40       	sbci	r29, 0x00	; 0
    3ee4:	0c 5f       	subi	r16, 0xFC	; 252
    3ee6:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee8:	98 e6       	ldi	r25, 0x68	; 104
    3eea:	29 16       	cp	r2, r25
    3eec:	90 e2       	ldi	r25, 0x20	; 32
    3eee:	39 06       	cpc	r3, r25
    3ef0:	09 f0       	breq	.+2      	; 0x3ef4 <range_estimate+0x4cc>
    3ef2:	08 ce       	rjmp	.-1008   	; 0x3b04 <range_estimate+0xdc>
    3ef4:	cd 55       	subi	r28, 0x5D	; 93
    3ef6:	df 4f       	sbci	r29, 0xFF	; 255
    3ef8:	e8 81       	ld	r30, Y
    3efa:	c3 5a       	subi	r28, 0xA3	; 163
    3efc:	d0 40       	sbci	r29, 0x00	; 0
    3efe:	ef 5f       	subi	r30, 0xFF	; 255
    3f00:	cd 55       	subi	r28, 0x5D	; 93
    3f02:	df 4f       	sbci	r29, 0xFF	; 255
    3f04:	e8 83       	st	Y, r30
    3f06:	c3 5a       	subi	r28, 0xA3	; 163
    3f08:	d0 40       	sbci	r29, 0x00	; 0
    3f0a:	c7 56       	subi	r28, 0x67	; 103
    3f0c:	df 4f       	sbci	r29, 0xFF	; 255
    3f0e:	88 81       	ld	r24, Y
    3f10:	99 81       	ldd	r25, Y+1	; 0x01
    3f12:	c9 59       	subi	r28, 0x99	; 153
    3f14:	d0 40       	sbci	r29, 0x00	; 0
    3f16:	08 96       	adiw	r24, 0x08	; 8
    3f18:	c7 56       	subi	r28, 0x67	; 103
    3f1a:	df 4f       	sbci	r29, 0xFF	; 255
    3f1c:	88 83       	st	Y, r24
    3f1e:	99 83       	std	Y+1, r25	; 0x01
    3f20:	c9 59       	subi	r28, 0x99	; 153
    3f22:	d0 40       	sbci	r29, 0x00	; 0
    3f24:	cb 55       	subi	r28, 0x5B	; 91
    3f26:	df 4f       	sbci	r29, 0xFF	; 255
    3f28:	e8 81       	ld	r30, Y
    3f2a:	f9 81       	ldd	r31, Y+1	; 0x01
    3f2c:	c5 5a       	subi	r28, 0xA5	; 165
    3f2e:	d0 40       	sbci	r29, 0x00	; 0
    3f30:	34 96       	adiw	r30, 0x04	; 4
    3f32:	cb 55       	subi	r28, 0x5B	; 91
    3f34:	df 4f       	sbci	r29, 0xFF	; 255
    3f36:	e8 83       	st	Y, r30
    3f38:	f9 83       	std	Y+1, r31	; 0x01
    3f3a:	c5 5a       	subi	r28, 0xA5	; 165
    3f3c:	d0 40       	sbci	r29, 0x00	; 0
    3f3e:	ca 56       	subi	r28, 0x6A	; 106
    3f40:	df 4f       	sbci	r29, 0xFF	; 255
    3f42:	88 81       	ld	r24, Y
    3f44:	99 81       	ldd	r25, Y+1	; 0x01
    3f46:	c6 59       	subi	r28, 0x96	; 150
    3f48:	d0 40       	sbci	r29, 0x00	; 0
    3f4a:	06 96       	adiw	r24, 0x06	; 6
    3f4c:	ca 56       	subi	r28, 0x6A	; 106
    3f4e:	df 4f       	sbci	r29, 0xFF	; 255
    3f50:	88 83       	st	Y, r24
    3f52:	99 83       	std	Y+1, r25	; 0x01
    3f54:	c6 59       	subi	r28, 0x96	; 150
    3f56:	d0 40       	sbci	r29, 0x00	; 0
    3f58:	cf 54       	subi	r28, 0x4F	; 79
    3f5a:	df 4f       	sbci	r29, 0xFF	; 255
    3f5c:	e8 81       	ld	r30, Y
    3f5e:	f9 81       	ldd	r31, Y+1	; 0x01
    3f60:	c1 5b       	subi	r28, 0xB1	; 177
    3f62:	d0 40       	sbci	r29, 0x00	; 0
    3f64:	78 96       	adiw	r30, 0x18	; 24
    3f66:	cf 54       	subi	r28, 0x4F	; 79
    3f68:	df 4f       	sbci	r29, 0xFF	; 255
    3f6a:	e8 83       	st	Y, r30
    3f6c:	f9 83       	std	Y+1, r31	; 0x01
    3f6e:	c1 5b       	subi	r28, 0xB1	; 177
    3f70:	d0 40       	sbci	r29, 0x00	; 0
    3f72:	cd 55       	subi	r28, 0x5D	; 93
    3f74:	df 4f       	sbci	r29, 0xFF	; 255
    3f76:	f8 81       	ld	r31, Y
    3f78:	c3 5a       	subi	r28, 0xA3	; 163
    3f7a:	d0 40       	sbci	r29, 0x00	; 0
    3f7c:	f6 30       	cpi	r31, 0x06	; 6
    3f7e:	59 f1       	breq	.+86     	; 0x3fd6 <range_estimate+0x5ae>
    3f80:	cf 54       	subi	r28, 0x4F	; 79
    3f82:	df 4f       	sbci	r29, 0xFF	; 255
    3f84:	08 81       	ld	r16, Y
    3f86:	19 81       	ldd	r17, Y+1	; 0x01
    3f88:	c1 5b       	subi	r28, 0xB1	; 177
    3f8a:	d0 40       	sbci	r29, 0x00	; 0
    3f8c:	80 e2       	ldi	r24, 0x20	; 32
    3f8e:	90 e2       	ldi	r25, 0x20	; 32
    3f90:	cc 56       	subi	r28, 0x6C	; 108
    3f92:	df 4f       	sbci	r29, 0xFF	; 255
    3f94:	88 83       	st	Y, r24
    3f96:	99 83       	std	Y+1, r25	; 0x01
    3f98:	c4 59       	subi	r28, 0x94	; 148
    3f9a:	d0 40       	sbci	r29, 0x00	; 0
    3f9c:	0f 2e       	mov	r0, r31
    3f9e:	f8 e3       	ldi	r31, 0x38	; 56
    3fa0:	2f 2e       	mov	r2, r31
    3fa2:	f0 e2       	ldi	r31, 0x20	; 32
    3fa4:	3f 2e       	mov	r3, r31
    3fa6:	f0 2d       	mov	r31, r0
    3fa8:	ca 56       	subi	r28, 0x6A	; 106
    3faa:	df 4f       	sbci	r29, 0xFF	; 255
    3fac:	e8 81       	ld	r30, Y
    3fae:	f9 81       	ldd	r31, Y+1	; 0x01
    3fb0:	c6 59       	subi	r28, 0x96	; 150
    3fb2:	d0 40       	sbci	r29, 0x00	; 0
    3fb4:	ce 56       	subi	r28, 0x6E	; 110
    3fb6:	df 4f       	sbci	r29, 0xFF	; 255
    3fb8:	e8 83       	st	Y, r30
    3fba:	f9 83       	std	Y+1, r31	; 0x01
    3fbc:	c2 59       	subi	r28, 0x92	; 146
    3fbe:	d0 40       	sbci	r29, 0x00	; 0
    3fc0:	cd 55       	subi	r28, 0x5D	; 93
    3fc2:	df 4f       	sbci	r29, 0xFF	; 255
    3fc4:	f8 81       	ld	r31, Y
    3fc6:	c3 5a       	subi	r28, 0xA3	; 163
    3fc8:	d0 40       	sbci	r29, 0x00	; 0
    3fca:	cc 55       	subi	r28, 0x5C	; 92
    3fcc:	df 4f       	sbci	r29, 0xFF	; 255
    3fce:	f8 83       	st	Y, r31
    3fd0:	c4 5a       	subi	r28, 0xA4	; 164
    3fd2:	d0 40       	sbci	r29, 0x00	; 0
    3fd4:	97 cd       	rjmp	.-1234   	; 0x3b04 <range_estimate+0xdc>
    3fd6:	c1 55       	subi	r28, 0x51	; 81
    3fd8:	df 4f       	sbci	r29, 0xFF	; 255
    3fda:	28 81       	ld	r18, Y
    3fdc:	cf 5a       	subi	r28, 0xAF	; 175
    3fde:	d0 40       	sbci	r29, 0x00	; 0
    3fe0:	82 2f       	mov	r24, r18
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	fc 01       	movw	r30, r24
    3fe6:	ee 0f       	add	r30, r30
    3fe8:	ff 1f       	adc	r31, r31
    3fea:	8e 0f       	add	r24, r30
    3fec:	9f 1f       	adc	r25, r31
    3fee:	fc 01       	movw	r30, r24
    3ff0:	ee 0f       	add	r30, r30
    3ff2:	ff 1f       	adc	r31, r31
    3ff4:	c0 55       	subi	r28, 0x50	; 80
    3ff6:	df 4f       	sbci	r29, 0xFF	; 255
    3ff8:	88 81       	ld	r24, Y
    3ffa:	c0 5b       	subi	r28, 0xB0	; 176
    3ffc:	d0 40       	sbci	r29, 0x00	; 0
    3ffe:	e8 0f       	add	r30, r24
    4000:	f1 1d       	adc	r31, r1
    4002:	ee 0f       	add	r30, r30
    4004:	ff 1f       	adc	r31, r31
    4006:	ee 0f       	add	r30, r30
    4008:	ff 1f       	adc	r31, r31
    400a:	ec 0f       	add	r30, r28
    400c:	fd 1f       	adc	r31, r29
    400e:	61 81       	ldd	r22, Z+1	; 0x01
    4010:	72 81       	ldd	r23, Z+2	; 0x02
    4012:	83 81       	ldd	r24, Z+3	; 0x03
    4014:	94 81       	ldd	r25, Z+4	; 0x04
    4016:	c9 54       	subi	r28, 0x49	; 73
    4018:	df 4f       	sbci	r29, 0xFF	; 255
    401a:	cd bf       	out	0x3d, r28	; 61
    401c:	de bf       	out	0x3e, r29	; 62
    401e:	df 91       	pop	r29
    4020:	cf 91       	pop	r28
    4022:	1f 91       	pop	r17
    4024:	0f 91       	pop	r16
    4026:	ff 90       	pop	r15
    4028:	ef 90       	pop	r14
    402a:	df 90       	pop	r13
    402c:	cf 90       	pop	r12
    402e:	bf 90       	pop	r11
    4030:	af 90       	pop	r10
    4032:	9f 90       	pop	r9
    4034:	8f 90       	pop	r8
    4036:	7f 90       	pop	r7
    4038:	6f 90       	pop	r6
    403a:	5f 90       	pop	r5
    403c:	4f 90       	pop	r4
    403e:	3f 90       	pop	r3
    4040:	2f 90       	pop	r2
    4042:	08 95       	ret

00004044 <print_brightness_matrix>:

void print_brightness_matrix(uint8_t brightness_matrix[6][6])
{
    4044:	cf 92       	push	r12
    4046:	df 92       	push	r13
    4048:	ef 92       	push	r14
    404a:	ff 92       	push	r15
    404c:	0f 93       	push	r16
    404e:	1f 93       	push	r17
    4050:	cf 93       	push	r28
    4052:	df 93       	push	r29
    4054:	d8 2f       	mov	r29, r24
    4056:	c9 2f       	mov	r28, r25
	printf("{");
    4058:	8b e7       	ldi	r24, 0x7B	; 123
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <putchar>
    4060:	ed 2e       	mov	r14, r29
    4062:	fc 2e       	mov	r15, r28
	for(uint8_t emitter_num=0 ; emitter_num<6 ; emitter_num++)
    4064:	c1 2c       	mov	r12, r1
	{
		printf("{");
		for(uint8_t sensor_num=0 ; sensor_num<6 ; sensor_num++)
		{
			printf("%u",brightness_matrix[emitter_num][sensor_num]);
    4066:	08 ee       	ldi	r16, 0xE8	; 232
    4068:	12 e2       	ldi	r17, 0x22	; 34
void print_brightness_matrix(uint8_t brightness_matrix[6][6])
{
	printf("{");
	for(uint8_t emitter_num=0 ; emitter_num<6 ; emitter_num++)
	{
		printf("{");
    406a:	8b e7       	ldi	r24, 0x7B	; 123
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <putchar>
    4072:	e7 01       	movw	r28, r14
		for(uint8_t sensor_num=0 ; sensor_num<6 ; sensor_num++)
    4074:	d1 2c       	mov	r13, r1
		{
			printf("%u",brightness_matrix[emitter_num][sensor_num]);
    4076:	89 91       	ld	r24, Y+
    4078:	1f 92       	push	r1
    407a:	8f 93       	push	r24
    407c:	1f 93       	push	r17
    407e:	0f 93       	push	r16
    4080:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
			if(sensor_num<5) printf(",");
    4084:	0f 90       	pop	r0
    4086:	0f 90       	pop	r0
    4088:	0f 90       	pop	r0
    408a:	0f 90       	pop	r0
    408c:	84 e0       	ldi	r24, 0x04	; 4
    408e:	8d 15       	cp	r24, r13
    4090:	20 f0       	brcs	.+8      	; 0x409a <print_brightness_matrix+0x56>
    4092:	8c e2       	ldi	r24, 0x2C	; 44
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <putchar>
{
	printf("{");
	for(uint8_t emitter_num=0 ; emitter_num<6 ; emitter_num++)
	{
		printf("{");
		for(uint8_t sensor_num=0 ; sensor_num<6 ; sensor_num++)
    409a:	d3 94       	inc	r13
    409c:	86 e0       	ldi	r24, 0x06	; 6
    409e:	d8 12       	cpse	r13, r24
    40a0:	ea cf       	rjmp	.-44     	; 0x4076 <print_brightness_matrix+0x32>
		{
			printf("%u",brightness_matrix[emitter_num][sensor_num]);
			if(sensor_num<5) printf(",");
		}
		printf("}");
    40a2:	8d e7       	ldi	r24, 0x7D	; 125
    40a4:	90 e0       	ldi	r25, 0x00	; 0
    40a6:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <putchar>
		if(emitter_num<5) printf(",");
    40aa:	84 e0       	ldi	r24, 0x04	; 4
    40ac:	8c 15       	cp	r24, r12
    40ae:	20 f0       	brcs	.+8      	; 0x40b8 <print_brightness_matrix+0x74>
    40b0:	8c e2       	ldi	r24, 0x2C	; 44
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <putchar>
}

void print_brightness_matrix(uint8_t brightness_matrix[6][6])
{
	printf("{");
	for(uint8_t emitter_num=0 ; emitter_num<6 ; emitter_num++)
    40b8:	c3 94       	inc	r12
    40ba:	86 e0       	ldi	r24, 0x06	; 6
    40bc:	e8 0e       	add	r14, r24
    40be:	f1 1c       	adc	r15, r1
    40c0:	86 e0       	ldi	r24, 0x06	; 6
    40c2:	c8 12       	cpse	r12, r24
    40c4:	d2 cf       	rjmp	.-92     	; 0x406a <print_brightness_matrix+0x26>
			if(sensor_num<5) printf(",");
		}
		printf("}");
		if(emitter_num<5) printf(",");
	}
	printf("};\r\n");
    40c6:	87 e1       	ldi	r24, 0x17	; 23
    40c8:	93 e2       	ldi	r25, 0x23	; 35
    40ca:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
}
    40ce:	df 91       	pop	r29
    40d0:	cf 91       	pop	r28
    40d2:	1f 91       	pop	r17
    40d4:	0f 91       	pop	r16
    40d6:	ff 90       	pop	r15
    40d8:	ef 90       	pop	r14
    40da:	df 90       	pop	r13
    40dc:	cf 90       	pop	r12
    40de:	08 95       	ret

000040e0 <use_rnb_data>:
	uint8_t power = 0; //TODO: get this from the message.
	schedule_task(10, use_rnb_data, (void*)(&power));
}

void use_rnb_data(uint8_t power)
{
    40e0:	4f 92       	push	r4
    40e2:	5f 92       	push	r5
    40e4:	6f 92       	push	r6
    40e6:	7f 92       	push	r7
    40e8:	8f 92       	push	r8
    40ea:	9f 92       	push	r9
    40ec:	af 92       	push	r10
    40ee:	bf 92       	push	r11
    40f0:	cf 92       	push	r12
    40f2:	df 92       	push	r13
    40f4:	ef 92       	push	r14
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	cf 93       	push	r28
    40fe:	df 93       	push	r29
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	e8 97       	sbiw	r28, 0x38	; 56
    4106:	cd bf       	out	0x3d, r28	; 61
    4108:	de bf       	out	0x3e, r29	; 62
    410a:	18 2f       	mov	r17, r24
	uint8_t brightness_matrix[6][6];
	uint8_t error = pack_measurements_into_matrix(brightness_matrix);
    410c:	ce 01       	movw	r24, r28
    410e:	01 96       	adiw	r24, 0x01	; 1
    4110:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <pack_measurements_into_matrix>
	if(error) return;
    4114:	81 11       	cpse	r24, r1
    4116:	6e c0       	rjmp	.+220    	; 0x41f4 <use_rnb_data+0x114>
		{0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0}
	};
	*/
	print_brightness_matrix(brightness_matrix);
    4118:	ce 01       	movw	r24, r28
    411a:	01 96       	adiw	r24, 0x01	; 1
    411c:	93 df       	rcall	.-218    	; 0x4044 <print_brightness_matrix>
	
	uint8_t emitter_total[6];
	uint8_t sensor_total[6];
	fill_S_and_T(brightness_matrix, sensor_total, emitter_total);
    411e:	ae 01       	movw	r20, r28
    4120:	4b 5d       	subi	r20, 0xDB	; 219
    4122:	5f 4f       	sbci	r21, 0xFF	; 255
    4124:	be 01       	movw	r22, r28
    4126:	65 5d       	subi	r22, 0xD5	; 213
    4128:	7f 4f       	sbci	r23, 0xFF	; 255
    412a:	ce 01       	movw	r24, r28
    412c:	01 96       	adiw	r24, 0x01	; 1
    412e:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <fill_S_and_T>
	
	float bearing = get_bearing(sensor_total);
    4132:	ce 01       	movw	r24, r28
    4134:	8b 96       	adiw	r24, 0x2b	; 43
    4136:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <get_bearing>
    413a:	2b 01       	movw	r4, r22
    413c:	3c 01       	movw	r6, r24
	float heading = get_heading(emitter_total, bearing);
    413e:	ab 01       	movw	r20, r22
    4140:	bc 01       	movw	r22, r24
    4142:	ce 01       	movw	r24, r28
    4144:	85 96       	adiw	r24, 0x25	; 37
    4146:	71 da       	rcall	.-2846   	; 0x362a <get_heading>
    4148:	69 ab       	std	Y+49, r22	; 0x31
    414a:	7a ab       	std	Y+50, r23	; 0x32
    414c:	8b ab       	std	Y+51, r24	; 0x33
    414e:	9c ab       	std	Y+52, r25	; 0x34
	
	float initial_range = get_initial_range_guess(bearing, heading, power, sensor_total, emitter_total, brightness_matrix);
    4150:	ce 01       	movw	r24, r28
    4152:	01 96       	adiw	r24, 0x01	; 1
    4154:	5c 01       	movw	r10, r24
    4156:	de 01       	movw	r26, r28
    4158:	95 96       	adiw	r26, 0x25	; 37
    415a:	6d 01       	movw	r12, r26
    415c:	8a 96       	adiw	r24, 0x2a	; 42
    415e:	7c 01       	movw	r14, r24
    4160:	01 2f       	mov	r16, r17
    4162:	29 a9       	ldd	r18, Y+49	; 0x31
    4164:	3a a9       	ldd	r19, Y+50	; 0x32
    4166:	4b a9       	ldd	r20, Y+51	; 0x33
    4168:	5c a9       	ldd	r21, Y+52	; 0x34
    416a:	c3 01       	movw	r24, r6
    416c:	b2 01       	movw	r22, r4
    416e:	6d db       	rcall	.-2342   	; 0x384a <get_initial_range_guess>
    4170:	6d ab       	std	Y+53, r22	; 0x35
    4172:	7e ab       	std	Y+54, r23	; 0x36
    4174:	8f ab       	std	Y+55, r24	; 0x37
    4176:	98 af       	std	Y+56, r25	; 0x38
	if(initial_range==0) return; //Some error occurred.
    4178:	20 e0       	ldi	r18, 0x00	; 0
    417a:	30 e0       	ldi	r19, 0x00	; 0
    417c:	a9 01       	movw	r20, r18
    417e:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__cmpsf2>
    4182:	88 23       	and	r24, r24
    4184:	b9 f1       	breq	.+110    	; 0x41f4 <use_rnb_data+0x114>
	float range = range_estimate(initial_range, bearing, heading, power, brightness_matrix);
    4186:	c1 2e       	mov	r12, r17
    4188:	e9 a8       	ldd	r14, Y+49	; 0x31
    418a:	fa a8       	ldd	r15, Y+50	; 0x32
    418c:	0b a9       	ldd	r16, Y+51	; 0x33
    418e:	1c a9       	ldd	r17, Y+52	; 0x34
    4190:	a3 01       	movw	r20, r6
    4192:	92 01       	movw	r18, r4
    4194:	6d a9       	ldd	r22, Y+53	; 0x35
    4196:	7e a9       	ldd	r23, Y+54	; 0x36
    4198:	8f a9       	ldd	r24, Y+55	; 0x37
    419a:	98 ad       	ldd	r25, Y+56	; 0x38
    419c:	45 dc       	rcall	.-1910   	; 0x3a28 <range_estimate>
	
	last_good_rnb.range = range;
    419e:	60 93 86 29 	sts	0x2986, r22
    41a2:	70 93 87 29 	sts	0x2987, r23
    41a6:	80 93 88 29 	sts	0x2988, r24
    41aa:	90 93 89 29 	sts	0x2989, r25
	last_good_rnb.bearing = bearing;
    41ae:	40 92 8a 29 	sts	0x298A, r4
    41b2:	50 92 8b 29 	sts	0x298B, r5
    41b6:	60 92 8c 29 	sts	0x298C, r6
    41ba:	70 92 8d 29 	sts	0x298D, r7
	last_good_rnb.heading = heading;
    41be:	89 a9       	ldd	r24, Y+49	; 0x31
    41c0:	9a a9       	ldd	r25, Y+50	; 0x32
    41c2:	ab a9       	ldd	r26, Y+51	; 0x33
    41c4:	bc a9       	ldd	r27, Y+52	; 0x34
    41c6:	80 93 8e 29 	sts	0x298E, r24
    41ca:	90 93 8f 29 	sts	0x298F, r25
    41ce:	a0 93 90 29 	sts	0x2990, r26
    41d2:	b0 93 91 29 	sts	0x2991, r27
	last_good_rnb.brightness_matrix_ptr = brightness_matrix;
    41d6:	a0 92 92 29 	sts	0x2992, r10
    41da:	b0 92 93 29 	sts	0x2993, r11
	last_good_rnb.id_number = cmd_sender_id;
    41de:	80 91 7d 29 	lds	r24, 0x297D
    41e2:	90 91 7e 29 	lds	r25, 0x297E
    41e6:	80 93 94 29 	sts	0x2994, r24
    41ea:	90 93 95 29 	sts	0x2995, r25
	
	rnb_updated=1;
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	80 93 9c 29 	sts	0x299C, r24
}
    41f4:	e8 96       	adiw	r28, 0x38	; 56
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	de bf       	out	0x3e, r29	; 62
    41fa:	df 91       	pop	r29
    41fc:	cf 91       	pop	r28
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	ff 90       	pop	r15
    4204:	ef 90       	pop	r14
    4206:	df 90       	pop	r13
    4208:	cf 90       	pop	r12
    420a:	bf 90       	pop	r11
    420c:	af 90       	pop	r10
    420e:	9f 90       	pop	r9
    4210:	8f 90       	pop	r8
    4212:	7f 90       	pop	r7
    4214:	6f 90       	pop	r6
    4216:	5f 90       	pop	r5
    4218:	4f 90       	pop	r4
    421a:	08 95       	ret

0000421c <collect_rnb_data>:
		}
	}
}

void collect_rnb_data(uint16_t target_id, uint8_t power)
{	
    421c:	ff 92       	push	r15
    421e:	0f 93       	push	r16
    4220:	1f 93       	push	r17
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	27 97       	sbiw	r28, 0x07	; 7
    422c:	cd bf       	out	0x3d, r28	; 61
    422e:	de bf       	out	0x3e, r29	; 62
    4230:	8c 01       	movw	r16, r24
    4232:	f6 2e       	mov	r15, r22
	char cmd[7] = "rnb_t ";
    4234:	87 e0       	ldi	r24, 0x07	; 7
    4236:	eb ee       	ldi	r30, 0xEB	; 235
    4238:	f2 e2       	ldi	r31, 0x22	; 34
    423a:	de 01       	movw	r26, r28
    423c:	11 96       	adiw	r26, 0x01	; 1
    423e:	01 90       	ld	r0, Z+
    4240:	0d 92       	st	X+, r0
    4242:	8a 95       	dec	r24
    4244:	e1 f7       	brne	.-8      	; 0x423e <collect_rnb_data+0x22>
	cmd[6] = power;
    4246:	6f 83       	std	Y+7, r22	; 0x07
	get_baseline_readings(bright_meas);
    4248:	89 e4       	ldi	r24, 0x49	; 73
    424a:	9c e2       	ldi	r25, 0x2C	; 44
    424c:	0e 94 39 18 	call	0x3072	; 0x3072 <get_baseline_readings>
	
	ir_targeted_cmd(ALL_DIRS, cmd, 7, target_id);
    4250:	98 01       	movw	r18, r16
    4252:	47 e0       	ldi	r20, 0x07	; 7
    4254:	50 e0       	ldi	r21, 0x00	; 0
    4256:	be 01       	movw	r22, r28
    4258:	6f 5f       	subi	r22, 0xFF	; 255
    425a:	7f 4f       	sbci	r23, 0xFF	; 255
    425c:	8f e3       	ldi	r24, 0x3F	; 63
    425e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ir_targeted_cmd>
	wait_for_ir(ALL_DIRS);
    4262:	8f e3       	ldi	r24, 0x3F	; 63
    4264:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <wait_for_ir>
	delay_ms(POST_MESSAGE_DELAY);
    4268:	8b e4       	ldi	r24, 0x4B	; 75
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	55 d3       	rcall	.+1706   	; 0x4918 <delay_ms>
	ir_range_meas();
    426e:	0e 94 61 18 	call	0x30c2	; 0x30c2 <ir_range_meas>
	//brightness_meas_printout_mathematica();
	use_rnb_data(power);
    4272:	8f 2d       	mov	r24, r15
    4274:	35 df       	rcall	.-406    	; 0x40e0 <use_rnb_data>
}
    4276:	27 96       	adiw	r28, 0x07	; 7
    4278:	cd bf       	out	0x3d, r28	; 61
    427a:	de bf       	out	0x3e, r29	; 62
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	ff 90       	pop	r15
    4286:	08 95       	ret

00004288 <rgb_led_init>:
#include "rgb_led.h"

void rgb_led_init()
{
	// LED Pins as output
	LED_R_PORT.DIRSET = LED_R_PIN_bm;
    4288:	e0 e8       	ldi	r30, 0x80	; 128
    428a:	f6 e0       	ldi	r31, 0x06	; 6
    428c:	80 e2       	ldi	r24, 0x20	; 32
    428e:	81 83       	std	Z+1, r24	; 0x01
	LED_G_PORT.DIRSET = LED_G_PIN_bm;
    4290:	80 e1       	ldi	r24, 0x10	; 16
    4292:	81 83       	std	Z+1, r24	; 0x01
	LED_B_PORT.DIRSET = LED_B_PIN_bm;
    4294:	e0 e6       	ldi	r30, 0x60	; 96
    4296:	f6 e0       	ldi	r31, 0x06	; 6
    4298:	81 83       	std	Z+1, r24	; 0x01
	
	//---------RED-----------
	LED_R_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    429a:	e0 e4       	ldi	r30, 0x40	; 64
    429c:	fa e0       	ldi	r31, 0x0A	; 10
    429e:	8f ef       	ldi	r24, 0xFF	; 255
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	86 a3       	std	Z+38, r24	; 0x26
    42a4:	97 a3       	std	Z+39, r25	; 0x27
	LED_R_TC.CCB = 0;							// initially fill the CCB register with a value
    42a6:	12 a6       	std	Z+42, r1	; 0x2a
    42a8:	13 a6       	std	Z+43, r1	; 0x2b
	LED_R_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    42aa:	20 81       	ld	r18, Z
    42ac:	21 60       	ori	r18, 0x01	; 1
    42ae:	20 83       	st	Z, r18
	LED_R_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    42b0:	21 81       	ldd	r18, Z+1	; 0x01
    42b2:	23 60       	ori	r18, 0x03	; 3
    42b4:	21 83       	std	Z+1, r18	; 0x01
	LED_R_TC.CTRLB |= TC1_CCBEN_bm;				// enable waveform output on OCnB (setting WGM operation overrides the port output register for this output pin)
    42b6:	21 81       	ldd	r18, Z+1	; 0x01
    42b8:	20 62       	ori	r18, 0x20	; 32
    42ba:	21 83       	std	Z+1, r18	; 0x01
	
	//---------GREEN-----------
	// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
	LED_G_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    42bc:	86 a3       	std	Z+38, r24	; 0x26
    42be:	97 a3       	std	Z+39, r25	; 0x27
	LED_G_TC.CCA = 0;							// initially fill the CCB register with a value
    42c0:	10 a6       	std	Z+40, r1	; 0x28
    42c2:	11 a6       	std	Z+41, r1	; 0x29
	LED_G_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    42c4:	20 81       	ld	r18, Z
    42c6:	21 60       	ori	r18, 0x01	; 1
    42c8:	20 83       	st	Z, r18
	LED_G_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    42ca:	21 81       	ldd	r18, Z+1	; 0x01
    42cc:	23 60       	ori	r18, 0x03	; 3
    42ce:	21 83       	std	Z+1, r18	; 0x01
	LED_G_TC.CTRLB |= TC1_CCAEN_bm;				// enable waveform output on OCnA (setting WGM operation overrides the port output register for this output pin)
    42d0:	21 81       	ldd	r18, Z+1	; 0x01
    42d2:	20 61       	ori	r18, 0x10	; 16
    42d4:	21 83       	std	Z+1, r18	; 0x01
	
	//---------BLUE-----------
	// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
	LED_B_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    42d6:	e0 e4       	ldi	r30, 0x40	; 64
    42d8:	f9 e0       	ldi	r31, 0x09	; 9
    42da:	86 a3       	std	Z+38, r24	; 0x26
    42dc:	97 a3       	std	Z+39, r25	; 0x27
	LED_B_TC.CCA = 0;							// initially fill the CCB register with a value
    42de:	10 a6       	std	Z+40, r1	; 0x28
    42e0:	11 a6       	std	Z+41, r1	; 0x29
	LED_B_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    42e2:	80 81       	ld	r24, Z
    42e4:	81 60       	ori	r24, 0x01	; 1
    42e6:	80 83       	st	Z, r24
	LED_B_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    42e8:	81 81       	ldd	r24, Z+1	; 0x01
    42ea:	83 60       	ori	r24, 0x03	; 3
    42ec:	81 83       	std	Z+1, r24	; 0x01
	LED_B_TC.CTRLB |= TC1_CCAEN_bm;				// enable waveform output on OCnA (setting WGM operation overrides the port output register for this output pin)
    42ee:	81 81       	ldd	r24, Z+1	; 0x01
    42f0:	80 61       	ori	r24, 0x10	; 16
    42f2:	81 83       	std	Z+1, r24	; 0x01
    42f4:	08 95       	ret

000042f6 <led_off>:
}

void led_off()
{ 
	LED_B_TC.CCABUF = 0;
    42f6:	e0 e4       	ldi	r30, 0x40	; 64
    42f8:	f9 e0       	ldi	r31, 0x09	; 9
    42fa:	10 ae       	std	Z+56, r1	; 0x38
    42fc:	11 ae       	std	Z+57, r1	; 0x39
	LED_G_TC.CCABUF = 0;
    42fe:	e0 e4       	ldi	r30, 0x40	; 64
    4300:	fa e0       	ldi	r31, 0x0A	; 10
    4302:	10 ae       	std	Z+56, r1	; 0x38
    4304:	11 ae       	std	Z+57, r1	; 0x39
	LED_R_TC.CCBBUF = 0; 
    4306:	12 ae       	std	Z+58, r1	; 0x3a
    4308:	13 ae       	std	Z+59, r1	; 0x3b
    430a:	08 95       	ret

0000430c <set_rgb>:

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	e0 e4       	ldi	r30, 0x40	; 64
    4310:	fa e0       	ldi	r31, 0x0A	; 10
    4312:	82 af       	std	Z+58, r24	; 0x3a
    4314:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	60 af       	std	Z+56, r22	; 0x38
    431a:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	e0 e4       	ldi	r30, 0x40	; 64
    4320:	f9 e0       	ldi	r31, 0x09	; 9
    4322:	40 af       	std	Z+56, r20	; 0x38
    4324:	51 af       	std	Z+57, r21	; 0x39
    4326:	08 95       	ret

00004328 <hsv_to_rgb>:
	set_rgb(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    4328:	2f 92       	push	r2
    432a:	3f 92       	push	r3
    432c:	4f 92       	push	r4
    432e:	5f 92       	push	r5
    4330:	6f 92       	push	r6
    4332:	7f 92       	push	r7
    4334:	8f 92       	push	r8
    4336:	9f 92       	push	r9
    4338:	af 92       	push	r10
    433a:	bf 92       	push	r11
    433c:	cf 92       	push	r12
    433e:	df 92       	push	r13
    4340:	ef 92       	push	r14
    4342:	ff 92       	push	r15
    4344:	0f 93       	push	r16
    4346:	1f 93       	push	r17
    4348:	cf 93       	push	r28
    434a:	df 93       	push	r29
    434c:	cd b7       	in	r28, 0x3d	; 61
    434e:	de b7       	in	r29, 0x3e	; 62
    4350:	2b 97       	sbiw	r28, 0x0b	; 11
    4352:	cd bf       	out	0x3d, r28	; 61
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	fc 01       	movw	r30, r24
    4358:	d6 2e       	mov	r13, r22
    435a:	b4 2e       	mov	r11, r20
    435c:	2c 83       	std	Y+4, r18	; 0x04
    435e:	3d 83       	std	Y+5, r19	; 0x05
    4360:	18 01       	movw	r2, r16
    4362:	ea 82       	std	Y+2, r14	; 0x02
    4364:	fb 82       	std	Y+3, r15	; 0x03
	float h = (hue%360)*1.0;
    4366:	9c 01       	movw	r18, r24
    4368:	a3 e8       	ldi	r26, 0x83	; 131
    436a:	bd e2       	ldi	r27, 0x2D	; 45
    436c:	0e 94 8d 35 	call	0x6b1a	; 0x6b1a <__umulhisi3>
    4370:	00 24       	eor	r0, r0
    4372:	88 0f       	add	r24, r24
    4374:	99 1f       	adc	r25, r25
    4376:	00 1c       	adc	r0, r0
    4378:	88 0f       	add	r24, r24
    437a:	99 1f       	adc	r25, r25
    437c:	00 1c       	adc	r0, r0
    437e:	89 2f       	mov	r24, r25
    4380:	90 2d       	mov	r25, r0
    4382:	48 e6       	ldi	r20, 0x68	; 104
    4384:	51 e0       	ldi	r21, 0x01	; 1
    4386:	84 9f       	mul	r24, r20
    4388:	90 01       	movw	r18, r0
    438a:	85 9f       	mul	r24, r21
    438c:	30 0d       	add	r19, r0
    438e:	94 9f       	mul	r25, r20
    4390:	30 0d       	add	r19, r0
    4392:	11 24       	eor	r1, r1
    4394:	bf 01       	movw	r22, r30
    4396:	62 1b       	sub	r22, r18
    4398:	73 0b       	sbc	r23, r19
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	0e 94 a2 2f 	call	0x5f44	; 0x5f44 <__floatunsisf>
    43a2:	2b 01       	movw	r4, r22
    43a4:	3c 01       	movw	r6, r24
	float s = saturation/255.0;
    43a6:	6d 2d       	mov	r22, r13
    43a8:	70 e0       	ldi	r23, 0x00	; 0
    43aa:	80 e0       	ldi	r24, 0x00	; 0
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__floatsisf>
    43b2:	20 e0       	ldi	r18, 0x00	; 0
    43b4:	30 e0       	ldi	r19, 0x00	; 0
    43b6:	4f e7       	ldi	r20, 0x7F	; 127
    43b8:	53 e4       	ldi	r21, 0x43	; 67
    43ba:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    43be:	6b 01       	movw	r12, r22
    43c0:	7c 01       	movw	r14, r24
	float v = val/255.0;
    43c2:	6b 2d       	mov	r22, r11
    43c4:	70 e0       	ldi	r23, 0x00	; 0
    43c6:	80 e0       	ldi	r24, 0x00	; 0
    43c8:	90 e0       	ldi	r25, 0x00	; 0
    43ca:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__floatsisf>
    43ce:	20 e0       	ldi	r18, 0x00	; 0
    43d0:	30 e0       	ldi	r19, 0x00	; 0
    43d2:	4f e7       	ldi	r20, 0x7F	; 127
    43d4:	53 e4       	ldi	r21, 0x43	; 67
    43d6:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    43da:	06 2f       	mov	r16, r22
    43dc:	17 2f       	mov	r17, r23
    43de:	8b 87       	std	Y+11, r24	; 0x0b
    43e0:	9a 87       	std	Y+10, r25	; 0x0a
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (abs(s)<0.00001)
    43e2:	c7 01       	movw	r24, r14
    43e4:	b6 01       	movw	r22, r12
    43e6:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <__fixsfsi>
    43ea:	9b 01       	movw	r18, r22
    43ec:	77 23       	and	r23, r23
    43ee:	24 f4       	brge	.+8      	; 0x43f8 <hsv_to_rgb+0xd0>
    43f0:	22 27       	eor	r18, r18
    43f2:	33 27       	eor	r19, r19
    43f4:	26 1b       	sub	r18, r22
    43f6:	37 0b       	sbc	r19, r23
    43f8:	b9 01       	movw	r22, r18
    43fa:	88 27       	eor	r24, r24
    43fc:	77 fd       	sbrc	r23, 7
    43fe:	80 95       	com	r24
    4400:	98 2f       	mov	r25, r24
    4402:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__floatsisf>
    4406:	2c ea       	ldi	r18, 0xAC	; 172
    4408:	35 ec       	ldi	r19, 0xC5	; 197
    440a:	47 e2       	ldi	r20, 0x27	; 39
    440c:	57 e3       	ldi	r21, 0x37	; 55
    440e:	0e 94 02 2f 	call	0x5e04	; 0x5e04 <__cmpsf2>
    4412:	88 23       	and	r24, r24
    4414:	2c f4       	brge	.+10     	; 0x4420 <hsv_to_rgb+0xf8>
	{
		*red = *green = *blue = val;
    4416:	aa 81       	ldd	r26, Y+2	; 0x02
    4418:	bb 81       	ldd	r27, Y+3	; 0x03
    441a:	bc 92       	st	X, r11
    441c:	f1 01       	movw	r30, r2
    441e:	b0 82       	st	Z, r11
	}
	
	h = h / 60.0;
    4420:	20 e0       	ldi	r18, 0x00	; 0
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	40 e7       	ldi	r20, 0x70	; 112
    4426:	52 e4       	ldi	r21, 0x42	; 66
    4428:	c3 01       	movw	r24, r6
    442a:	b2 01       	movw	r22, r4
    442c:	0e 94 09 2f 	call	0x5e12	; 0x5e12 <__divsf3>
    4430:	4b 01       	movw	r8, r22
    4432:	5c 01       	movw	r10, r24
	uint8_t i = (uint8_t)h;
    4434:	0e 94 76 2f 	call	0x5eec	; 0x5eec <__fixunssfsi>
    4438:	69 83       	std	Y+1, r22	; 0x01
	f = h - i;
    443a:	70 e0       	ldi	r23, 0x00	; 0
    443c:	80 e0       	ldi	r24, 0x00	; 0
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <__floatsisf>
    4444:	9b 01       	movw	r18, r22
    4446:	ac 01       	movw	r20, r24
    4448:	c5 01       	movw	r24, r10
    444a:	b4 01       	movw	r22, r8
    444c:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    4450:	4b 01       	movw	r8, r22
    4452:	5c 01       	movw	r10, r24
	
	p = v*(1-s);
    4454:	a7 01       	movw	r20, r14
    4456:	96 01       	movw	r18, r12
    4458:	60 e0       	ldi	r22, 0x00	; 0
    445a:	70 e0       	ldi	r23, 0x00	; 0
    445c:	80 e8       	ldi	r24, 0x80	; 128
    445e:	9f e3       	ldi	r25, 0x3F	; 63
    4460:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    4464:	20 2f       	mov	r18, r16
    4466:	31 2f       	mov	r19, r17
    4468:	4b 85       	ldd	r20, Y+11	; 0x0b
    446a:	5a 85       	ldd	r21, Y+10	; 0x0a
    446c:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    4470:	66 2e       	mov	r6, r22
    4472:	77 2e       	mov	r7, r23
    4474:	48 2e       	mov	r4, r24
    4476:	59 2e       	mov	r5, r25
	q = v*(1-s*f);
    4478:	a5 01       	movw	r20, r10
    447a:	94 01       	movw	r18, r8
    447c:	c7 01       	movw	r24, r14
    447e:	b6 01       	movw	r22, r12
    4480:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    4484:	9b 01       	movw	r18, r22
    4486:	ac 01       	movw	r20, r24
    4488:	60 e0       	ldi	r22, 0x00	; 0
    448a:	70 e0       	ldi	r23, 0x00	; 0
    448c:	80 e8       	ldi	r24, 0x80	; 128
    448e:	9f e3       	ldi	r25, 0x3F	; 63
    4490:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    4494:	20 2f       	mov	r18, r16
    4496:	31 2f       	mov	r19, r17
    4498:	4b 85       	ldd	r20, Y+11	; 0x0b
    449a:	5a 85       	ldd	r21, Y+10	; 0x0a
    449c:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    44a0:	6e 83       	std	Y+6, r22	; 0x06
    44a2:	7f 83       	std	Y+7, r23	; 0x07
    44a4:	88 87       	std	Y+8, r24	; 0x08
    44a6:	99 87       	std	Y+9, r25	; 0x09
	t = v*(1-s*(1-f));
    44a8:	a5 01       	movw	r20, r10
    44aa:	94 01       	movw	r18, r8
    44ac:	60 e0       	ldi	r22, 0x00	; 0
    44ae:	70 e0       	ldi	r23, 0x00	; 0
    44b0:	80 e8       	ldi	r24, 0x80	; 128
    44b2:	9f e3       	ldi	r25, 0x3F	; 63
    44b4:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    44b8:	a7 01       	movw	r20, r14
    44ba:	96 01       	movw	r18, r12
    44bc:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    44c0:	9b 01       	movw	r18, r22
    44c2:	ac 01       	movw	r20, r24
    44c4:	60 e0       	ldi	r22, 0x00	; 0
    44c6:	70 e0       	ldi	r23, 0x00	; 0
    44c8:	80 e8       	ldi	r24, 0x80	; 128
    44ca:	9f e3       	ldi	r25, 0x3F	; 63
    44cc:	0e 94 3b 2e 	call	0x5c76	; 0x5c76 <__subsf3>
    44d0:	20 2f       	mov	r18, r16
    44d2:	31 2f       	mov	r19, r17
    44d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    44d6:	5a 85       	ldd	r21, Y+10	; 0x0a
    44d8:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    44dc:	c6 2e       	mov	r12, r22
    44de:	d7 2e       	mov	r13, r23
    44e0:	e8 2e       	mov	r14, r24
    44e2:	f9 2e       	mov	r15, r25
	
	switch(i)
    44e4:	f9 81       	ldd	r31, Y+1	; 0x01
    44e6:	f2 30       	cpi	r31, 0x02	; 2
    44e8:	31 f1       	breq	.+76     	; 0x4536 <hsv_to_rgb+0x20e>
    44ea:	30 f4       	brcc	.+12     	; 0x44f8 <hsv_to_rgb+0x1d0>
    44ec:	ff 23       	and	r31, r31
    44ee:	09 f4       	brne	.+2      	; 0x44f2 <hsv_to_rgb+0x1ca>
    44f0:	5d c0       	rjmp	.+186    	; 0x45ac <hsv_to_rgb+0x284>
    44f2:	f1 30       	cpi	r31, 0x01	; 1
    44f4:	a9 f0       	breq	.+42     	; 0x4520 <hsv_to_rgb+0x1f8>
    44f6:	07 c0       	rjmp	.+14     	; 0x4506 <hsv_to_rgb+0x1de>
    44f8:	29 81       	ldd	r18, Y+1	; 0x01
    44fa:	24 30       	cpi	r18, 0x04	; 4
    44fc:	f1 f1       	breq	.+124    	; 0x457a <hsv_to_rgb+0x252>
    44fe:	60 f1       	brcs	.+88     	; 0x4558 <hsv_to_rgb+0x230>
    4500:	25 30       	cpi	r18, 0x05	; 5
    4502:	09 f4       	brne	.+2      	; 0x4506 <hsv_to_rgb+0x1de>
    4504:	4b c0       	rjmp	.+150    	; 0x459c <hsv_to_rgb+0x274>
{
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
	float v = val/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
    4506:	61 2c       	mov	r6, r1
    4508:	71 2c       	mov	r7, r1
    450a:	41 2c       	mov	r4, r1
    450c:	51 2c       	mov	r5, r1
    450e:	c1 2c       	mov	r12, r1
    4510:	d1 2c       	mov	r13, r1
    4512:	e1 2c       	mov	r14, r1
    4514:	f1 2c       	mov	r15, r1
    4516:	00 e0       	ldi	r16, 0x00	; 0
    4518:	10 e0       	ldi	r17, 0x00	; 0
    451a:	1b 86       	std	Y+11, r1	; 0x0b
    451c:	1a 86       	std	Y+10, r1	; 0x0a
    451e:	46 c0       	rjmp	.+140    	; 0x45ac <hsv_to_rgb+0x284>
			g = t;
			b = p;
			break;
		case 1:
			r = q;
			g = v;
    4520:	c0 2e       	mov	r12, r16
    4522:	d1 2e       	mov	r13, r17
    4524:	eb 84       	ldd	r14, Y+11	; 0x0b
    4526:	fa 84       	ldd	r15, Y+10	; 0x0a
			r = v;
			g = t;
			b = p;
			break;
		case 1:
			r = q;
    4528:	0e 81       	ldd	r16, Y+6	; 0x06
    452a:	1f 81       	ldd	r17, Y+7	; 0x07
    452c:	88 85       	ldd	r24, Y+8	; 0x08
    452e:	8b 87       	std	Y+11, r24	; 0x0b
    4530:	a9 85       	ldd	r26, Y+9	; 0x09
    4532:	aa 87       	std	Y+10, r26	; 0x0a
			g = v;
			b = p;
			break;
    4534:	3b c0       	rjmp	.+118    	; 0x45ac <hsv_to_rgb+0x284>
		case 2:
			r = p;
			g = v;
			b = t;
			break;
    4536:	30 2f       	mov	r19, r16
    4538:	21 2f       	mov	r18, r17
    453a:	9b 85       	ldd	r25, Y+11	; 0x0b
    453c:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = q;
			g = v;
			b = p;
			break;
		case 2:
			r = p;
    453e:	06 2d       	mov	r16, r6
    4540:	17 2d       	mov	r17, r7
    4542:	4b 86       	std	Y+11, r4	; 0x0b
    4544:	5a 86       	std	Y+10, r5	; 0x0a
			g = v;
			b = t;
    4546:	6c 2c       	mov	r6, r12
    4548:	7d 2c       	mov	r7, r13
    454a:	4e 2c       	mov	r4, r14
    454c:	5f 2c       	mov	r5, r15
			g = v;
			b = p;
			break;
		case 2:
			r = p;
			g = v;
    454e:	c3 2e       	mov	r12, r19
    4550:	d2 2e       	mov	r13, r18
    4552:	e9 2e       	mov	r14, r25
    4554:	f8 2e       	mov	r15, r24
			b = t;
			break;
    4556:	2a c0       	rjmp	.+84     	; 0x45ac <hsv_to_rgb+0x284>
		case 3:
			r = p;
			g = q;
    4558:	ce 80       	ldd	r12, Y+6	; 0x06
    455a:	df 80       	ldd	r13, Y+7	; 0x07
    455c:	e8 84       	ldd	r14, Y+8	; 0x08
    455e:	f9 84       	ldd	r15, Y+9	; 0x09
			b = v;
			break;
    4560:	30 2f       	mov	r19, r16
    4562:	21 2f       	mov	r18, r17
    4564:	9b 85       	ldd	r25, Y+11	; 0x0b
    4566:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = p;
			g = v;
			b = t;
			break;
		case 3:
			r = p;
    4568:	06 2d       	mov	r16, r6
    456a:	17 2d       	mov	r17, r7
    456c:	4b 86       	std	Y+11, r4	; 0x0b
    456e:	5a 86       	std	Y+10, r5	; 0x0a
			g = q;
			b = v;
    4570:	63 2e       	mov	r6, r19
    4572:	72 2e       	mov	r7, r18
    4574:	49 2e       	mov	r4, r25
    4576:	58 2e       	mov	r5, r24
			break;
    4578:	19 c0       	rjmp	.+50     	; 0x45ac <hsv_to_rgb+0x284>
		case 4:
			r = t;
			g = p;
			b = v;
			break;
    457a:	30 2f       	mov	r19, r16
    457c:	21 2f       	mov	r18, r17
    457e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4580:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = p;
			g = q;
			b = v;
			break;
		case 4:
			r = t;
    4582:	0c 2d       	mov	r16, r12
    4584:	1d 2d       	mov	r17, r13
    4586:	eb 86       	std	Y+11, r14	; 0x0b
    4588:	fa 86       	std	Y+10, r15	; 0x0a
			g = p;
    458a:	c6 2c       	mov	r12, r6
    458c:	d7 2c       	mov	r13, r7
    458e:	e4 2c       	mov	r14, r4
    4590:	f5 2c       	mov	r15, r5
			b = v;
    4592:	63 2e       	mov	r6, r19
    4594:	72 2e       	mov	r7, r18
    4596:	49 2e       	mov	r4, r25
    4598:	58 2e       	mov	r5, r24
			break;
    459a:	08 c0       	rjmp	.+16     	; 0x45ac <hsv_to_rgb+0x284>
		case 5:
			r = v;
			g = p;
    459c:	c6 2c       	mov	r12, r6
    459e:	d7 2c       	mov	r13, r7
    45a0:	e4 2c       	mov	r14, r4
    45a2:	f5 2c       	mov	r15, r5
			b = q;
    45a4:	6e 80       	ldd	r6, Y+6	; 0x06
    45a6:	7f 80       	ldd	r7, Y+7	; 0x07
    45a8:	48 84       	ldd	r4, Y+8	; 0x08
    45aa:	59 84       	ldd	r5, Y+9	; 0x09
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    45ac:	20 e0       	ldi	r18, 0x00	; 0
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	4f e7       	ldi	r20, 0x7F	; 127
    45b2:	53 e4       	ldi	r21, 0x43	; 67
    45b4:	60 2f       	mov	r22, r16
    45b6:	71 2f       	mov	r23, r17
    45b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    45ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    45bc:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    45c0:	0e 94 76 2f 	call	0x5eec	; 0x5eec <__fixunssfsi>
    45c4:	ec 81       	ldd	r30, Y+4	; 0x04
    45c6:	fd 81       	ldd	r31, Y+5	; 0x05
    45c8:	60 83       	st	Z, r22
	*blue = (uint8_t)(b*255);
    45ca:	20 e0       	ldi	r18, 0x00	; 0
    45cc:	30 e0       	ldi	r19, 0x00	; 0
    45ce:	4f e7       	ldi	r20, 0x7F	; 127
    45d0:	53 e4       	ldi	r21, 0x43	; 67
    45d2:	66 2d       	mov	r22, r6
    45d4:	77 2d       	mov	r23, r7
    45d6:	84 2d       	mov	r24, r4
    45d8:	95 2d       	mov	r25, r5
    45da:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    45de:	0e 94 76 2f 	call	0x5eec	; 0x5eec <__fixunssfsi>
    45e2:	aa 81       	ldd	r26, Y+2	; 0x02
    45e4:	bb 81       	ldd	r27, Y+3	; 0x03
    45e6:	6c 93       	st	X, r22
	*green = (uint8_t)(g*255);
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
    45ec:	4f e7       	ldi	r20, 0x7F	; 127
    45ee:	53 e4       	ldi	r21, 0x43	; 67
    45f0:	6c 2d       	mov	r22, r12
    45f2:	7d 2d       	mov	r23, r13
    45f4:	8e 2d       	mov	r24, r14
    45f6:	9f 2d       	mov	r25, r15
    45f8:	0e 94 19 31 	call	0x6232	; 0x6232 <__mulsf3>
    45fc:	0e 94 76 2f 	call	0x5eec	; 0x5eec <__fixunssfsi>
    4600:	f1 01       	movw	r30, r2
    4602:	60 83       	st	Z, r22
    4604:	2b 96       	adiw	r28, 0x0b	; 11
    4606:	cd bf       	out	0x3d, r28	; 61
    4608:	de bf       	out	0x3e, r29	; 62
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	1f 91       	pop	r17
    4610:	0f 91       	pop	r16
    4612:	ff 90       	pop	r15
    4614:	ef 90       	pop	r14
    4616:	df 90       	pop	r13
    4618:	cf 90       	pop	r12
    461a:	bf 90       	pop	r11
    461c:	af 90       	pop	r10
    461e:	9f 90       	pop	r9
    4620:	8f 90       	pop	r8
    4622:	7f 90       	pop	r7
    4624:	6f 90       	pop	r6
    4626:	5f 90       	pop	r5
    4628:	4f 90       	pop	r4
    462a:	3f 90       	pop	r3
    462c:	2f 90       	pop	r2
    462e:	08 95       	ret

00004630 <set_hsv>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void set_hsv(uint16_t h, uint8_t s, uint8_t v)
{
    4630:	ef 92       	push	r14
    4632:	ff 92       	push	r15
    4634:	0f 93       	push	r16
    4636:	1f 93       	push	r17
    4638:	cf 93       	push	r28
    463a:	df 93       	push	r29
    463c:	00 d0       	rcall	.+0      	; 0x463e <set_hsv+0xe>
    463e:	cd b7       	in	r28, 0x3d	; 61
    4640:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsv_to_rgb(h,s,v,&r,&g,&b);
    4642:	9e 01       	movw	r18, r28
    4644:	2d 5f       	subi	r18, 0xFD	; 253
    4646:	3f 4f       	sbci	r19, 0xFF	; 255
    4648:	79 01       	movw	r14, r18
    464a:	8e 01       	movw	r16, r28
    464c:	0e 5f       	subi	r16, 0xFE	; 254
    464e:	1f 4f       	sbci	r17, 0xFF	; 255
    4650:	22 50       	subi	r18, 0x02	; 2
    4652:	31 09       	sbc	r19, r1
    4654:	69 de       	rcall	.-814    	; 0x4328 <hsv_to_rgb>
	set_rgb(r,g,b);
    4656:	8b 81       	ldd	r24, Y+3	; 0x03
    4658:	2a 81       	ldd	r18, Y+2	; 0x02

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    465a:	49 81       	ldd	r20, Y+1	; 0x01
    465c:	50 e0       	ldi	r21, 0x00	; 0
    465e:	e0 e4       	ldi	r30, 0x40	; 64
    4660:	fa e0       	ldi	r31, 0x0A	; 10
    4662:	42 af       	std	Z+58, r20	; 0x3a
    4664:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	20 af       	std	Z+56, r18	; 0x38
    466a:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	e0 e4       	ldi	r30, 0x40	; 64
    4670:	f9 e0       	ldi	r31, 0x09	; 9
    4672:	80 af       	std	Z+56, r24	; 0x38
    4674:	91 af       	std	Z+57, r25	; 0x39
}
    4676:	23 96       	adiw	r28, 0x03	; 3
    4678:	cd bf       	out	0x3d, r28	; 61
    467a:	de bf       	out	0x3e, r29	; 62
    467c:	df 91       	pop	r29
    467e:	cf 91       	pop	r28
    4680:	1f 91       	pop	r17
    4682:	0f 91       	pop	r16
    4684:	ff 90       	pop	r15
    4686:	ef 90       	pop	r14
    4688:	08 95       	ret

0000468a <rgb_sensor_init>:
#include "rgb_sensor.h"

void rgb_sensor_init()
{
	RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    468a:	80 ee       	ldi	r24, 0xE0	; 224
    468c:	e0 e0       	ldi	r30, 0x00	; 0
    468e:	f6 e0       	ldi	r31, 0x06	; 6
    4690:	82 83       	std	Z+2, r24	; 0x02
	
	ADCA.CTRLA = ADC_ENABLE_bm;
    4692:	e0 e0       	ldi	r30, 0x00	; 0
    4694:	f2 e0       	ldi	r31, 0x02	; 2
    4696:	81 e0       	ldi	r24, 0x01	; 1
    4698:	80 83       	st	Z, r24
	ADCA.REFCTRL = ADC_REFSEL_INT1V_gc | ADC_BANDGAP_bm;
    469a:	82 e0       	ldi	r24, 0x02	; 2
    469c:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = ADC_RESOLUTION_8BIT_gc | ADC_CONMODE_bm;
    469e:	84 e1       	ldi	r24, 0x14	; 20
    46a0:	81 83       	std	Z+1, r24	; 0x01
	ADCA.PRESCALER = ADC_PRESCALER_DIV512_gc;
    46a2:	87 e0       	ldi	r24, 0x07	; 7
    46a4:	84 83       	std	Z+4, r24	; 0x04
	/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */
	ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    46a6:	80 b5       	in	r24, 0x20	; 32
    46a8:	84 87       	std	Z+12, r24	; 0x0c
	ADCA.CALH = PRODSIGNATURES_ADCACAL1;
    46aa:	81 b5       	in	r24, 0x21	; 33
    46ac:	85 87       	std	Z+13, r24	; 0x0d

	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_4X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    46ae:	8b e0       	ldi	r24, 0x0B	; 11
    46b0:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_4X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    46b2:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_8X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    46b4:	8f e0       	ldi	r24, 0x0F	; 15
    46b6:	80 ab       	std	Z+48, r24	; 0x30
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc;	// Red sensor on ADC A channel 0
    46b8:	88 e2       	ldi	r24, 0x28	; 40
    46ba:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc;	// Green sensor on ADC A channel 1
    46bc:	80 e3       	ldi	r24, 0x30	; 48
    46be:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc;	// Blue sensor on ADC A channel 2
    46c0:	88 e3       	ldi	r24, 0x38	; 56
    46c2:	81 ab       	std	Z+49, r24	; 0x31

	ADCA.CH0.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE4_gc;
    46c4:	81 a1       	ldd	r24, Z+33	; 0x21
    46c6:	84 60       	ori	r24, 0x04	; 4
    46c8:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE4_gc;
    46ca:	81 a5       	ldd	r24, Z+41	; 0x29
    46cc:	84 60       	ori	r24, 0x04	; 4
    46ce:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH2.MUXCTRL |= ADC_CH_MUXNEG_INTGND_MODE4_gc;
    46d0:	81 a9       	ldd	r24, Z+49	; 0x31
    46d2:	84 60       	ori	r24, 0x04	; 4
    46d4:	81 ab       	std	Z+49, r24	; 0x31
    46d6:	08 95       	ret

000046d8 <get_red_sensor>:
		
	if(led_r || led_g || led_b) set_rgb(led_r, led_g, led_b);
}

int8_t get_red_sensor()
{
    46d8:	cf 93       	push	r28
    46da:	df 93       	push	r29
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	27 97       	sbiw	r28, 0x07	; 7
    46e2:	cd bf       	out	0x3d, r28	; 61
    46e4:	de bf       	out	0x3e, r29	; 62
    46e6:	de 01       	movw	r26, r28
    46e8:	11 96       	adiw	r26, 0x01	; 1
    46ea:	ce 01       	movw	r24, r28
    46ec:	08 96       	adiw	r24, 0x08	; 8
	int8_t meas[RGB_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH0.INTFLAGS=1; // clear the complete flag
    46ee:	e0 e0       	ldi	r30, 0x00	; 0
    46f0:	f2 e0       	ldi	r31, 0x02	; 2
    46f2:	31 e0       	ldi	r19, 0x01	; 1
    46f4:	33 a3       	std	Z+35, r19	; 0x23
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    46f6:	20 a1       	ldd	r18, Z+32	; 0x20
    46f8:	20 68       	ori	r18, 0x80	; 128
    46fa:	20 a3       	std	Z+32, r18	; 0x20
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    46fc:	23 a1       	ldd	r18, Z+35	; 0x23
    46fe:	22 23       	and	r18, r18
    4700:	e9 f3       	breq	.-6      	; 0x46fc <get_red_sensor+0x24>
		meas[meas_count] = ADCA.CH0.RESL;
    4702:	24 a1       	ldd	r18, Z+36	; 0x24
    4704:	2d 93       	st	X+, r18

int8_t get_red_sensor()
{
	int8_t meas[RGB_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    4706:	a8 17       	cp	r26, r24
    4708:	b9 07       	cpc	r27, r25
    470a:	a1 f7       	brne	.-24     	; 0x46f4 <get_red_sensor+0x1c>
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ADCA.CH0.RESL;
	}
	
	return find_median(meas, RGB_MEAS_COUNT);
    470c:	67 e0       	ldi	r22, 0x07	; 7
    470e:	ce 01       	movw	r24, r28
    4710:	01 96       	adiw	r24, 0x01	; 1
    4712:	0e 94 6d 10 	call	0x20da	; 0x20da <find_median>
}
    4716:	27 96       	adiw	r28, 0x07	; 7
    4718:	cd bf       	out	0x3d, r28	; 61
    471a:	de bf       	out	0x3e, r29	; 62
    471c:	df 91       	pop	r29
    471e:	cf 91       	pop	r28
    4720:	08 95       	ret

00004722 <get_green_sensor>:

int8_t get_green_sensor()
{
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	cd b7       	in	r28, 0x3d	; 61
    4728:	de b7       	in	r29, 0x3e	; 62
    472a:	27 97       	sbiw	r28, 0x07	; 7
    472c:	cd bf       	out	0x3d, r28	; 61
    472e:	de bf       	out	0x3e, r29	; 62
    4730:	de 01       	movw	r26, r28
    4732:	11 96       	adiw	r26, 0x01	; 1
    4734:	ce 01       	movw	r24, r28
    4736:	08 96       	adiw	r24, 0x08	; 8
	int8_t meas[RGB_MEAS_COUNT];
		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH1.INTFLAGS=1; // clear the complete flag
    4738:	e0 e0       	ldi	r30, 0x00	; 0
    473a:	f2 e0       	ldi	r31, 0x02	; 2
    473c:	31 e0       	ldi	r19, 0x01	; 1
    473e:	33 a7       	std	Z+43, r19	; 0x2b
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    4740:	20 a5       	ldd	r18, Z+40	; 0x28
    4742:	20 68       	ori	r18, 0x80	; 128
    4744:	20 a7       	std	Z+40, r18	; 0x28
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    4746:	23 a5       	ldd	r18, Z+43	; 0x2b
    4748:	22 23       	and	r18, r18
    474a:	e9 f3       	breq	.-6      	; 0x4746 <get_green_sensor+0x24>
		meas[meas_count] = ADCA.CH1.RESL;
    474c:	24 a5       	ldd	r18, Z+44	; 0x2c
    474e:	2d 93       	st	X+, r18

int8_t get_green_sensor()
{
	int8_t meas[RGB_MEAS_COUNT];
		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    4750:	a8 17       	cp	r26, r24
    4752:	b9 07       	cpc	r27, r25
    4754:	a1 f7       	brne	.-24     	; 0x473e <get_green_sensor+0x1c>
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ADCA.CH1.RESL;
	}
		
	return find_median(meas, RGB_MEAS_COUNT);
    4756:	67 e0       	ldi	r22, 0x07	; 7
    4758:	ce 01       	movw	r24, r28
    475a:	01 96       	adiw	r24, 0x01	; 1
    475c:	0e 94 6d 10 	call	0x20da	; 0x20da <find_median>
}
    4760:	27 96       	adiw	r28, 0x07	; 7
    4762:	cd bf       	out	0x3d, r28	; 61
    4764:	de bf       	out	0x3e, r29	; 62
    4766:	df 91       	pop	r29
    4768:	cf 91       	pop	r28
    476a:	08 95       	ret

0000476c <get_blue_sensor>:

int8_t get_blue_sensor()
{
    476c:	cf 93       	push	r28
    476e:	df 93       	push	r29
    4770:	cd b7       	in	r28, 0x3d	; 61
    4772:	de b7       	in	r29, 0x3e	; 62
    4774:	27 97       	sbiw	r28, 0x07	; 7
    4776:	cd bf       	out	0x3d, r28	; 61
    4778:	de bf       	out	0x3e, r29	; 62
    477a:	de 01       	movw	r26, r28
    477c:	11 96       	adiw	r26, 0x01	; 1
    477e:	ce 01       	movw	r24, r28
    4780:	08 96       	adiw	r24, 0x08	; 8
	int8_t meas[RGB_MEAS_COUNT];
		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH2.INTFLAGS=1; // clear the complete flag
    4782:	e0 e0       	ldi	r30, 0x00	; 0
    4784:	f2 e0       	ldi	r31, 0x02	; 2
    4786:	31 e0       	ldi	r19, 0x01	; 1
    4788:	33 ab       	std	Z+51, r19	; 0x33
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    478a:	20 a9       	ldd	r18, Z+48	; 0x30
    478c:	20 68       	ori	r18, 0x80	; 128
    478e:	20 ab       	std	Z+48, r18	; 0x30
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    4790:	23 a9       	ldd	r18, Z+51	; 0x33
    4792:	22 23       	and	r18, r18
    4794:	e9 f3       	breq	.-6      	; 0x4790 <get_blue_sensor+0x24>
		meas[meas_count] = ADCA.CH2.RESL;
    4796:	24 a9       	ldd	r18, Z+52	; 0x34
    4798:	2d 93       	st	X+, r18

int8_t get_blue_sensor()
{
	int8_t meas[RGB_MEAS_COUNT];
		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    479a:	a8 17       	cp	r26, r24
    479c:	b9 07       	cpc	r27, r25
    479e:	a1 f7       	brne	.-24     	; 0x4788 <get_blue_sensor+0x1c>
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ADCA.CH2.RESL;
	}
		
	return find_median(meas, RGB_MEAS_COUNT);
    47a0:	67 e0       	ldi	r22, 0x07	; 7
    47a2:	ce 01       	movw	r24, r28
    47a4:	01 96       	adiw	r24, 0x01	; 1
    47a6:	0e 94 6d 10 	call	0x20da	; 0x20da <find_median>
}
    47aa:	27 96       	adiw	r28, 0x07	; 7
    47ac:	cd bf       	out	0x3d, r28	; 61
    47ae:	de bf       	out	0x3e, r29	; 62
    47b0:	df 91       	pop	r29
    47b2:	cf 91       	pop	r28
    47b4:	08 95       	ret

000047b6 <get_rgb_sensors>:
}

// Still not convinced that we should have the conditional, instead of just telling people
// that if their lights are on they won't get good values, here.
void get_rgb_sensors(int8_t* r, int8_t* g, int8_t* b)
{
    47b6:	5f 92       	push	r5
    47b8:	6f 92       	push	r6
    47ba:	7f 92       	push	r7
    47bc:	8f 92       	push	r8
    47be:	9f 92       	push	r9
    47c0:	af 92       	push	r10
    47c2:	bf 92       	push	r11
    47c4:	cf 92       	push	r12
    47c6:	df 92       	push	r13
    47c8:	ef 92       	push	r14
    47ca:	ff 92       	push	r15
    47cc:	0f 93       	push	r16
    47ce:	1f 93       	push	r17
    47d0:	cf 93       	push	r28
    47d2:	df 93       	push	r29
    47d4:	5c 01       	movw	r10, r24
    47d6:	6b 01       	movw	r12, r22
    47d8:	7a 01       	movw	r14, r20
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    47da:	e0 e4       	ldi	r30, 0x40	; 64
    47dc:	fa e0       	ldi	r31, 0x0A	; 10
    47de:	82 ac       	ldd	r8, Z+58	; 0x3a
    47e0:	93 ac       	ldd	r9, Z+59	; 0x3b
    47e2:	78 2c       	mov	r7, r8
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    47e4:	c0 ad       	ldd	r28, Z+56	; 0x38
    47e6:	d1 ad       	ldd	r29, Z+57	; 0x39
    47e8:	6c 2e       	mov	r6, r28
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    47ea:	e0 e4       	ldi	r30, 0x40	; 64
    47ec:	f9 e0       	ldi	r31, 0x09	; 9
    47ee:	00 ad       	ldd	r16, Z+56	; 0x38
    47f0:	11 ad       	ldd	r17, Z+57	; 0x39
    47f2:	50 2e       	mov	r5, r16
	uint8_t led_r = get_red_led();
	uint8_t led_g = get_green_led();
	uint8_t led_b = get_blue_led();
	
	if(led_r || led_g || led_b)
    47f4:	81 10       	cpse	r8, r1
    47f6:	04 c0       	rjmp	.+8      	; 0x4800 <get_rgb_sensors+0x4a>
    47f8:	c1 11       	cpse	r28, r1
    47fa:	02 c0       	rjmp	.+4      	; 0x4800 <get_rgb_sensors+0x4a>
    47fc:	00 23       	and	r16, r16
    47fe:	39 f0       	breq	.+14     	; 0x480e <get_rgb_sensors+0x58>
	{
		set_rgb(0,0,0);
    4800:	40 e0       	ldi	r20, 0x00	; 0
    4802:	60 e0       	ldi	r22, 0x00	; 0
    4804:	80 e0       	ldi	r24, 0x00	; 0
    4806:	82 dd       	rcall	.-1276   	; 0x430c <set_rgb>
		delay_ms(LED_OFF_DELAY_MS);
    4808:	86 e9       	ldi	r24, 0x96	; 150
    480a:	90 e0       	ldi	r25, 0x00	; 0
    480c:	85 d0       	rcall	.+266    	; 0x4918 <delay_ms>
	} 

	if(r!=NULL) *r = get_red_sensor();
    480e:	a1 14       	cp	r10, r1
    4810:	b1 04       	cpc	r11, r1
    4812:	19 f0       	breq	.+6      	; 0x481a <get_rgb_sensors+0x64>
    4814:	61 df       	rcall	.-318    	; 0x46d8 <get_red_sensor>
    4816:	f5 01       	movw	r30, r10
    4818:	80 83       	st	Z, r24
	if(g!=NULL) *g = get_green_sensor();
    481a:	c1 14       	cp	r12, r1
    481c:	d1 04       	cpc	r13, r1
    481e:	19 f0       	breq	.+6      	; 0x4826 <get_rgb_sensors+0x70>
    4820:	80 df       	rcall	.-256    	; 0x4722 <get_green_sensor>
    4822:	f6 01       	movw	r30, r12
    4824:	80 83       	st	Z, r24
	if(b!=NULL) *b = get_blue_sensor();
    4826:	e1 14       	cp	r14, r1
    4828:	f1 04       	cpc	r15, r1
    482a:	19 f0       	breq	.+6      	; 0x4832 <get_rgb_sensors+0x7c>
    482c:	9f df       	rcall	.-194    	; 0x476c <get_blue_sensor>
    482e:	f7 01       	movw	r30, r14
    4830:	80 83       	st	Z, r24
		
	if(led_r || led_g || led_b) set_rgb(led_r, led_g, led_b);
    4832:	71 10       	cpse	r7, r1
    4834:	04 c0       	rjmp	.+8      	; 0x483e <get_rgb_sensors+0x88>
    4836:	61 10       	cpse	r6, r1
    4838:	02 c0       	rjmp	.+4      	; 0x483e <get_rgb_sensors+0x88>
    483a:	55 20       	and	r5, r5
    483c:	21 f0       	breq	.+8      	; 0x4846 <get_rgb_sensors+0x90>
    483e:	40 2f       	mov	r20, r16
    4840:	6c 2f       	mov	r22, r28
    4842:	88 2d       	mov	r24, r8
    4844:	63 dd       	rcall	.-1338   	; 0x430c <set_rgb>
}
    4846:	df 91       	pop	r29
    4848:	cf 91       	pop	r28
    484a:	1f 91       	pop	r17
    484c:	0f 91       	pop	r16
    484e:	ff 90       	pop	r15
    4850:	ef 90       	pop	r14
    4852:	df 90       	pop	r13
    4854:	cf 90       	pop	r12
    4856:	bf 90       	pop	r11
    4858:	af 90       	pop	r10
    485a:	9f 90       	pop	r9
    485c:	8f 90       	pop	r8
    485e:	7f 90       	pop	r7
    4860:	6f 90       	pop	r6
    4862:	5f 90       	pop	r5
    4864:	08 95       	ret

00004866 <scheduler_init>:
	}
}

void scheduler_init()
{
	task_list = NULL;
    4866:	10 92 02 2c 	sts	0x2C02, r1
    486a:	10 92 03 2c 	sts	0x2C03, r1
	num_tasks = 0;
    486e:	10 92 81 29 	sts	0x2981, r1
	num_executing_tasks = 0;
    4872:	10 92 84 29 	sts	0x2984, r1
	curr_pointer = 0;
    4876:	10 92 d9 2c 	sts	0x2CD9, r1
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during initialization
    487a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    487c:	f8 94       	cli
	{
		// Clear current task list, if necessary
		// (Should only be necessary if scheduler is re-initialized at runtime)
		
		// Set up real-time clock
		rtc_epoch = 0;
    487e:	10 92 8d 27 	sts	0x278D, r1
    4882:	10 92 8e 27 	sts	0x278E, r1
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    4886:	85 e0       	ldi	r24, 0x05	; 5
    4888:	e0 e4       	ldi	r30, 0x40	; 64
    488a:	f0 e0       	ldi	r31, 0x00	; 0
    488c:	83 83       	std	Z+3, r24	; 0x03
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    488e:	83 e0       	ldi	r24, 0x03	; 3
    4890:	e0 e0       	ldi	r30, 0x00	; 0
    4892:	f4 e0       	ldi	r31, 0x04	; 4
    4894:	82 83       	std	Z+2, r24	; 0x02
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4896:	81 81       	ldd	r24, Z+1	; 0x01
    4898:	80 fd       	sbrc	r24, 0
    489a:	fd cf       	rjmp	.-6      	; 0x4896 <scheduler_init+0x30>
		RTC.PER = 0xFFFF;
    489c:	8f ef       	ldi	r24, 0xFF	; 255
    489e:	9f ef       	ldi	r25, 0xFF	; 255
    48a0:	e0 e0       	ldi	r30, 0x00	; 0
    48a2:	f4 e0       	ldi	r31, 0x04	; 4
    48a4:	82 87       	std	Z+10, r24	; 0x0a
    48a6:	93 87       	std	Z+11, r25	; 0x0b
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    48a8:	81 81       	ldd	r24, Z+1	; 0x01
    48aa:	80 fd       	sbrc	r24, 0
    48ac:	fd cf       	rjmp	.-6      	; 0x48a8 <scheduler_init+0x42>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	80 93 00 04 	sts	0x0400, r24
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    48b4:	e0 e0       	ldi	r30, 0x00	; 0
    48b6:	f4 e0       	ldi	r31, 0x04	; 4
    48b8:	81 81       	ldd	r24, Z+1	; 0x01
    48ba:	80 fd       	sbrc	r24, 0
    48bc:	fd cf       	rjmp	.-6      	; 0x48b8 <scheduler_init+0x52>
		RTC.CNT = 0;
    48be:	e0 e0       	ldi	r30, 0x00	; 0
    48c0:	f4 e0       	ldi	r31, 0x04	; 4
    48c2:	10 86       	std	Z+8, r1	; 0x08
    48c4:	11 86       	std	Z+9, r1	; 0x09
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    48c6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    48c8:	08 95       	ret

000048ca <Config32MHzClock>:
}

void Config32MHzClock(void)
{
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    48ca:	88 ed       	ldi	r24, 0xD8	; 216
    48cc:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    48ce:	82 e0       	ldi	r24, 0x02	; 2
    48d0:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    48d4:	e0 e5       	ldi	r30, 0x50	; 80
    48d6:	f0 e0       	ldi	r31, 0x00	; 0
    48d8:	81 81       	ldd	r24, Z+1	; 0x01
    48da:	81 ff       	sbrs	r24, 1
    48dc:	fd cf       	rjmp	.-6      	; 0x48d8 <Config32MHzClock+0xe>
	CCP = CCP_IOREG_gc;
    48de:	88 ed       	ldi	r24, 0xD8	; 216
    48e0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    48e2:	e0 e4       	ldi	r30, 0x40	; 64
    48e4:	f0 e0       	ldi	r31, 0x00	; 0
    48e6:	81 e0       	ldi	r24, 0x01	; 1
    48e8:	80 83       	st	Z, r24
	
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;	// per Dustin: RTCSRC is a 1 kHz oscillator, needs to be verified
    48ea:	85 e0       	ldi	r24, 0x05	; 5
    48ec:	83 83       	std	Z+3, r24	; 0x03
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    48ee:	e0 e0       	ldi	r30, 0x00	; 0
    48f0:	f4 e0       	ldi	r31, 0x04	; 4
    48f2:	81 81       	ldd	r24, Z+1	; 0x01
    48f4:	80 fd       	sbrc	r24, 0
    48f6:	fd cf       	rjmp	.-6      	; 0x48f2 <Config32MHzClock+0x28>
	
	RTC.PER = 0xFFFF;		//	0xFFFF == 0b1111111111111111 = (2^16)-1
    48f8:	e0 e0       	ldi	r30, 0x00	; 0
    48fa:	f4 e0       	ldi	r31, 0x04	; 4
    48fc:	8f ef       	ldi	r24, 0xFF	; 255
    48fe:	9f ef       	ldi	r25, 0xFF	; 255
    4900:	82 87       	std	Z+10, r24	; 0x0a
    4902:	93 87       	std	Z+11, r25	; 0x0b
	// (2^16)-1 milliseconds is 65.535 seconds

	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    4904:	81 e0       	ldi	r24, 0x01	; 1
    4906:	80 83       	st	Z, r24

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    4908:	81 81       	ldd	r24, Z+1	; 0x01
    490a:	80 fd       	sbrc	r24, 0
    490c:	fd cf       	rjmp	.-6      	; 0x4908 <Config32MHzClock+0x3e>
	
	RTC.CNT = 0;
    490e:	e0 e0       	ldi	r30, 0x00	; 0
    4910:	f4 e0       	ldi	r31, 0x04	; 4
    4912:	10 86       	std	Z+8, r1	; 0x08
    4914:	11 86       	std	Z+9, r1	; 0x09
    4916:	08 95       	ret

00004918 <delay_ms>:
}

// Delay ms milliseconds
// (the built-in _delay_ms only takes constant arguments, not variables)
void delay_ms(uint16_t ms)
{
    4918:	cf 92       	push	r12
    491a:	df 92       	push	r13
    491c:	ef 92       	push	r14
    491e:	ff 92       	push	r15
    4920:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = get_time(); sei();
    4922:	f8 94       	cli
    4924:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4928:	78 94       	sei
	end_time = cur_time + ms;
    492a:	9b 01       	movw	r18, r22
    492c:	ac 01       	movw	r20, r24
    492e:	2e 0d       	add	r18, r14
    4930:	3f 1d       	adc	r19, r15
    4932:	41 1d       	adc	r20, r1
    4934:	51 1d       	adc	r21, r1
    4936:	69 01       	movw	r12, r18
    4938:	7a 01       	movw	r14, r20
	while (1)
	{
		cli();
    493a:	f8 94       	cli
		if (get_time() >= end_time)
    493c:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4940:	6c 15       	cp	r22, r12
    4942:	7d 05       	cpc	r23, r13
    4944:	8e 05       	cpc	r24, r14
    4946:	9f 05       	cpc	r25, r15
    4948:	10 f0       	brcs	.+4      	; 0x494e <delay_ms+0x36>
		{
			sei();
    494a:	78 94       	sei
    494c:	06 c0       	rjmp	.+12     	; 0x495a <delay_ms+0x42>
			return;
		}
		sei();
    494e:	78 94       	sei
    4950:	3a e6       	ldi	r19, 0x6A	; 106
    4952:	3a 95       	dec	r19
    4954:	f1 f7       	brne	.-4      	; 0x4952 <delay_ms+0x3a>
    4956:	00 c0       	rjmp	.+0      	; 0x4958 <delay_ms+0x40>
    4958:	f0 cf       	rjmp	.-32     	; 0x493a <delay_ms+0x22>
		delay_us(10);
	}
}
    495a:	ff 90       	pop	r15
    495c:	ef 90       	pop	r14
    495e:	df 90       	pop	r13
    4960:	cf 90       	pop	r12
    4962:	08 95       	ret

00004964 <schedule_task>:
// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
    4964:	8f 92       	push	r8
    4966:	9f 92       	push	r9
    4968:	af 92       	push	r10
    496a:	bf 92       	push	r11
    496c:	cf 92       	push	r12
    496e:	df 92       	push	r13
    4970:	ef 92       	push	r14
    4972:	ff 92       	push	r15
    4974:	0f 93       	push	r16
    4976:	1f 93       	push	r17
    4978:	cf 93       	push	r28
    497a:	df 93       	push	r29
    497c:	00 d0       	rcall	.+0      	; 0x497e <schedule_task+0x1a>
    497e:	1f 92       	push	r1
    4980:	cd b7       	in	r28, 0x3d	; 61
    4982:	de b7       	in	r29, 0x3e	; 62
    4984:	69 83       	std	Y+1, r22	; 0x01
    4986:	7a 83       	std	Y+2, r23	; 0x02
    4988:	8b 83       	std	Y+3, r24	; 0x03
    498a:	9c 83       	std	Y+4, r25	; 0x04
    498c:	6a 01       	movw	r12, r20
    498e:	79 01       	movw	r14, r18
Task_t task_storage_arr[MAX_NUM_SCHEDULED_TASKS];
uint8_t curr_pointer;

inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    4990:	80 91 81 29 	lds	r24, 0x2981
    4994:	8a 30       	cpi	r24, 0x0A	; 10
    4996:	08 f0       	brcs	.+2      	; 0x499a <schedule_task+0x36>
    4998:	e8 c0       	rjmp	.+464    	; 0x4b6a <schedule_task+0x206>
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    499a:	40 91 d9 2c 	lds	r20, 0x2CD9
    499e:	84 2f       	mov	r24, r20
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	01 96       	adiw	r24, 0x01	; 1
    49a4:	6a e0       	ldi	r22, 0x0A	; 10
    49a6:	70 e0       	ldi	r23, 0x00	; 0
    49a8:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
    49ac:	58 2f       	mov	r21, r24
    49ae:	48 17       	cp	r20, r24
    49b0:	91 f1       	breq	.+100    	; 0x4a16 <schedule_task+0xb2>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
    49b2:	99 27       	eor	r25, r25
    49b4:	fc 01       	movw	r30, r24
    49b6:	ee 0f       	add	r30, r30
    49b8:	ff 1f       	adc	r31, r31
    49ba:	9c 01       	movw	r18, r24
    49bc:	22 0f       	add	r18, r18
    49be:	33 1f       	adc	r19, r19
    49c0:	22 0f       	add	r18, r18
    49c2:	33 1f       	adc	r19, r19
    49c4:	22 0f       	add	r18, r18
    49c6:	33 1f       	adc	r19, r19
    49c8:	e2 0f       	add	r30, r18
    49ca:	f3 1f       	adc	r31, r19
    49cc:	e6 52       	subi	r30, 0x26	; 38
    49ce:	f3 4d       	sbci	r31, 0xD3	; 211
    49d0:	24 81       	ldd	r18, Z+4	; 0x04
    49d2:	35 81       	ldd	r19, Z+5	; 0x05
    49d4:	23 2b       	or	r18, r19
    49d6:	f9 f0       	breq	.+62     	; 0x4a16 <schedule_task+0xb2>
inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    49d8:	ea e0       	ldi	r30, 0x0A	; 10
    49da:	f0 e0       	ldi	r31, 0x00	; 0
    49dc:	15 c0       	rjmp	.+42     	; 0x4a08 <schedule_task+0xa4>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
    49de:	99 27       	eor	r25, r25
    49e0:	dc 01       	movw	r26, r24
    49e2:	aa 0f       	add	r26, r26
    49e4:	bb 1f       	adc	r27, r27
    49e6:	9c 01       	movw	r18, r24
    49e8:	22 0f       	add	r18, r18
    49ea:	33 1f       	adc	r19, r19
    49ec:	22 0f       	add	r18, r18
    49ee:	33 1f       	adc	r19, r19
    49f0:	22 0f       	add	r18, r18
    49f2:	33 1f       	adc	r19, r19
    49f4:	a2 0f       	add	r26, r18
    49f6:	b3 1f       	adc	r27, r19
    49f8:	a6 52       	subi	r26, 0x26	; 38
    49fa:	b3 4d       	sbci	r27, 0xD3	; 211
    49fc:	14 96       	adiw	r26, 0x04	; 4
    49fe:	2d 91       	ld	r18, X+
    4a00:	3c 91       	ld	r19, X
    4a02:	15 97       	sbiw	r26, 0x05	; 5
    4a04:	23 2b       	or	r18, r19
    4a06:	39 f0       	breq	.+14     	; 0x4a16 <schedule_task+0xb2>
inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    4a08:	01 96       	adiw	r24, 0x01	; 1
    4a0a:	bf 01       	movw	r22, r30
    4a0c:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
    4a10:	58 2f       	mov	r21, r24
    4a12:	48 13       	cpse	r20, r24
    4a14:	e4 cf       	rjmp	.-56     	; 0x49de <schedule_task+0x7a>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
	}
	curr_pointer = tmp;
    4a16:	50 93 d9 2c 	sts	0x2CD9, r21
	return &(task_storage_arr[curr_pointer]);
    4a1a:	85 2f       	mov	r24, r21
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	8c 01       	movw	r16, r24
    4a20:	00 0f       	add	r16, r16
    4a22:	11 1f       	adc	r17, r17
    4a24:	88 0f       	add	r24, r24
    4a26:	99 1f       	adc	r25, r25
    4a28:	88 0f       	add	r24, r24
    4a2a:	99 1f       	adc	r25, r25
    4a2c:	88 0f       	add	r24, r24
    4a2e:	99 1f       	adc	r25, r25
    4a30:	08 0f       	add	r16, r24
    4a32:	19 1f       	adc	r17, r25
    4a34:	06 52       	subi	r16, 0x26	; 38
    4a36:	13 4d       	sbci	r17, 0xD3	; 211
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
    4a38:	01 15       	cp	r16, r1
    4a3a:	11 05       	cpc	r17, r1
    4a3c:	09 f4       	brne	.+2      	; 0x4a40 <schedule_task+0xdc>
    4a3e:	97 c0       	rjmp	.+302    	; 0x4b6e <schedule_task+0x20a>
	
	new_task->scheduled_time = time + get_time();
    4a40:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4a44:	89 80       	ldd	r8, Y+1	; 0x01
    4a46:	9a 80       	ldd	r9, Y+2	; 0x02
    4a48:	ab 80       	ldd	r10, Y+3	; 0x03
    4a4a:	bc 80       	ldd	r11, Y+4	; 0x04
    4a4c:	dc 01       	movw	r26, r24
    4a4e:	cb 01       	movw	r24, r22
    4a50:	88 0d       	add	r24, r8
    4a52:	99 1d       	adc	r25, r9
    4a54:	aa 1d       	adc	r26, r10
    4a56:	bb 1d       	adc	r27, r11
	if ((uint16_t)(new_task->scheduled_time) < 2) new_task->scheduled_time += 4;
    4a58:	82 30       	cpi	r24, 0x02	; 2
    4a5a:	91 05       	cpc	r25, r1
    4a5c:	30 f0       	brcs	.+12     	; 0x4a6a <schedule_task+0x106>
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
	
	new_task->scheduled_time = time + get_time();
    4a5e:	f8 01       	movw	r30, r16
    4a60:	80 83       	st	Z, r24
    4a62:	91 83       	std	Z+1, r25	; 0x01
    4a64:	a2 83       	std	Z+2, r26	; 0x02
    4a66:	b3 83       	std	Z+3, r27	; 0x03
    4a68:	08 c0       	rjmp	.+16     	; 0x4a7a <schedule_task+0x116>
	if ((uint16_t)(new_task->scheduled_time) < 2) new_task->scheduled_time += 4;
    4a6a:	04 96       	adiw	r24, 0x04	; 4
    4a6c:	a1 1d       	adc	r26, r1
    4a6e:	b1 1d       	adc	r27, r1
    4a70:	f8 01       	movw	r30, r16
    4a72:	80 83       	st	Z, r24
    4a74:	91 83       	std	Z+1, r25	; 0x01
    4a76:	a2 83       	std	Z+2, r26	; 0x02
    4a78:	b3 83       	std	Z+3, r27	; 0x03
	new_task->arg = arg;
    4a7a:	d8 01       	movw	r26, r16
    4a7c:	16 96       	adiw	r26, 0x06	; 6
    4a7e:	ed 92       	st	X+, r14
    4a80:	fc 92       	st	X, r15
    4a82:	17 97       	sbiw	r26, 0x07	; 7
	new_task->task_function = function;
    4a84:	14 96       	adiw	r26, 0x04	; 4
    4a86:	cd 92       	st	X+, r12
    4a88:	dc 92       	st	X, r13
    4a8a:	15 97       	sbiw	r26, 0x05	; 5
	
	// Turn off interrupts so we don't muck up the task list during this function
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4a8c:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a8e:	f8 94       	cli
	{
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		new_task->next = task_list;
    4a90:	c0 90 02 2c 	lds	r12, 0x2C02
    4a94:	d0 90 03 2c 	lds	r13, 0x2C03
    4a98:	f8 01       	movw	r30, r16
    4a9a:	c0 86       	std	Z+8, r12	; 0x08
    4a9c:	d1 86       	std	Z+9, r13	; 0x09
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || new_task->scheduled_time <= task_list->scheduled_time)
    4a9e:	c1 14       	cp	r12, r1
    4aa0:	d1 04       	cpc	r13, r1
    4aa2:	71 f0       	breq	.+28     	; 0x4ac0 <schedule_task+0x15c>
    4aa4:	40 81       	ld	r20, Z
    4aa6:	51 81       	ldd	r21, Z+1	; 0x01
    4aa8:	62 81       	ldd	r22, Z+2	; 0x02
    4aaa:	73 81       	ldd	r23, Z+3	; 0x03
    4aac:	f6 01       	movw	r30, r12
    4aae:	80 81       	ld	r24, Z
    4ab0:	91 81       	ldd	r25, Z+1	; 0x01
    4ab2:	a2 81       	ldd	r26, Z+2	; 0x02
    4ab4:	b3 81       	ldd	r27, Z+3	; 0x03
    4ab6:	84 17       	cp	r24, r20
    4ab8:	95 07       	cpc	r25, r21
    4aba:	a6 07       	cpc	r26, r22
    4abc:	b7 07       	cpc	r27, r23
    4abe:	90 f1       	brcs	.+100    	; 0x4b24 <schedule_task+0x1c0>

		{
			task_list = new_task;
    4ac0:	00 93 02 2c 	sts	0x2C02, r16
    4ac4:	10 93 03 2c 	sts	0x2C03, r17
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if (new_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4ac8:	f8 01       	movw	r30, r16
    4aca:	80 81       	ld	r24, Z
    4acc:	91 81       	ldd	r25, Z+1	; 0x01
    4ace:	a2 81       	ldd	r26, Z+2	; 0x02
    4ad0:	b3 81       	ldd	r27, Z+3	; 0x03
    4ad2:	40 91 8d 27 	lds	r20, 0x278D
    4ad6:	50 91 8e 27 	lds	r21, 0x278E
    4ada:	e0 e0       	ldi	r30, 0x00	; 0
    4adc:	f4 e0       	ldi	r31, 0x04	; 4
    4ade:	c2 84       	ldd	r12, Z+10	; 0x0a
    4ae0:	d3 84       	ldd	r13, Z+11	; 0x0b
    4ae2:	60 e0       	ldi	r22, 0x00	; 0
    4ae4:	70 e0       	ldi	r23, 0x00	; 0
    4ae6:	ba 01       	movw	r22, r20
    4ae8:	55 27       	eor	r21, r21
    4aea:	44 27       	eor	r20, r20
    4aec:	e1 2c       	mov	r14, r1
    4aee:	f1 2c       	mov	r15, r1
    4af0:	4c 29       	or	r20, r12
    4af2:	5d 29       	or	r21, r13
    4af4:	6e 29       	or	r22, r14
    4af6:	7f 29       	or	r23, r15
    4af8:	48 17       	cp	r20, r24
    4afa:	59 07       	cpc	r21, r25
    4afc:	6a 07       	cpc	r22, r26
    4afe:	7b 07       	cpc	r23, r27
    4b00:	58 f0       	brcs	.+22     	; 0x4b18 <schedule_task+0x1b4>
			{
				while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4b02:	31 81       	ldd	r19, Z+1	; 0x01
    4b04:	30 fd       	sbrc	r19, 0
    4b06:	fd cf       	rjmp	.-6      	; 0x4b02 <schedule_task+0x19e>
				RTC.COMP = (uint16_t)(new_task->scheduled_time);
    4b08:	e0 e0       	ldi	r30, 0x00	; 0
    4b0a:	f4 e0       	ldi	r31, 0x04	; 4
    4b0c:	84 87       	std	Z+12, r24	; 0x0c
    4b0e:	95 87       	std	Z+13, r25	; 0x0d
				RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    4b10:	82 81       	ldd	r24, Z+2	; 0x02
    4b12:	84 60       	ori	r24, 0x04	; 4
    4b14:	82 83       	std	Z+2, r24	; 0x02
    4b16:	22 c0       	rjmp	.+68     	; 0x4b5c <schedule_task+0x1f8>
			}
			else
			{
				RTC.INTCTRL &= ~RTC_COMPINTLVL_LO_gc;
    4b18:	e0 e0       	ldi	r30, 0x00	; 0
    4b1a:	f4 e0       	ldi	r31, 0x04	; 4
    4b1c:	82 81       	ldd	r24, Z+2	; 0x02
    4b1e:	8b 7f       	andi	r24, 0xFB	; 251
    4b20:	82 83       	std	Z+2, r24	; 0x02
    4b22:	1c c0       	rjmp	.+56     	; 0x4b5c <schedule_task+0x1f8>
		// If the new task is not the next to be executed, iterate through the task_list,
		// find its position in the linked list, and insert it there.
		else
		{
			Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && new_task->scheduled_time > tmp_task_ptr->next->scheduled_time)
    4b24:	d6 01       	movw	r26, r12
    4b26:	18 96       	adiw	r26, 0x08	; 8
    4b28:	ed 90       	ld	r14, X+
    4b2a:	fc 90       	ld	r15, X
    4b2c:	19 97       	sbiw	r26, 0x09	; 9
    4b2e:	e1 14       	cp	r14, r1
    4b30:	f1 04       	cpc	r15, r1
    4b32:	61 f0       	breq	.+24     	; 0x4b4c <schedule_task+0x1e8>
    4b34:	f7 01       	movw	r30, r14
    4b36:	80 81       	ld	r24, Z
    4b38:	91 81       	ldd	r25, Z+1	; 0x01
    4b3a:	a2 81       	ldd	r26, Z+2	; 0x02
    4b3c:	b3 81       	ldd	r27, Z+3	; 0x03
    4b3e:	84 17       	cp	r24, r20
    4b40:	95 07       	cpc	r25, r21
    4b42:	a6 07       	cpc	r26, r22
    4b44:	b7 07       	cpc	r27, r23
    4b46:	10 f4       	brcc	.+4      	; 0x4b4c <schedule_task+0x1e8>
    4b48:	67 01       	movw	r12, r14
    4b4a:	ec cf       	rjmp	.-40     	; 0x4b24 <schedule_task+0x1c0>
			{
				tmp_task_ptr = tmp_task_ptr->next;
			}
			new_task->next = tmp_task_ptr->next;
    4b4c:	d8 01       	movw	r26, r16
    4b4e:	18 96       	adiw	r26, 0x08	; 8
    4b50:	ed 92       	st	X+, r14
    4b52:	fc 92       	st	X, r15
    4b54:	19 97       	sbiw	r26, 0x09	; 9
			tmp_task_ptr->next = new_task;
    4b56:	f6 01       	movw	r30, r12
    4b58:	00 87       	std	Z+8, r16	; 0x08
    4b5a:	11 87       	std	Z+9, r17	; 0x09
		}


		num_tasks++;
    4b5c:	80 91 81 29 	lds	r24, 0x2981
    4b60:	8f 5f       	subi	r24, 0xFF	; 255
    4b62:	80 93 81 29 	sts	0x2981, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4b66:	2f bf       	out	0x3f, r18	; 63
	}

	return new_task;
    4b68:	02 c0       	rjmp	.+4      	; 0x4b6e <schedule_task+0x20a>
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
    4b6a:	00 e0       	ldi	r16, 0x00	; 0
    4b6c:	10 e0       	ldi	r17, 0x00	; 0

		num_tasks++;
	}

	return new_task;
}
    4b6e:	c8 01       	movw	r24, r16
    4b70:	24 96       	adiw	r28, 0x04	; 4
    4b72:	cd bf       	out	0x3d, r28	; 61
    4b74:	de bf       	out	0x3e, r29	; 62
    4b76:	df 91       	pop	r29
    4b78:	cf 91       	pop	r28
    4b7a:	1f 91       	pop	r17
    4b7c:	0f 91       	pop	r16
    4b7e:	ff 90       	pop	r15
    4b80:	ef 90       	pop	r14
    4b82:	df 90       	pop	r13
    4b84:	cf 90       	pop	r12
    4b86:	bf 90       	pop	r11
    4b88:	af 90       	pop	r10
    4b8a:	9f 90       	pop	r9
    4b8c:	8f 90       	pop	r8
    4b8e:	08 95       	ret

00004b90 <remove_task>:

// Remove a task from the task queue
void remove_task(Task_t* task)
{
    4b90:	1f 93       	push	r17
    4b92:	cf 93       	push	r28
    4b94:	df 93       	push	r29
    4b96:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4b98:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4b9a:	f8 94       	cli
	{
		if(task_list==NULL) return;
    4b9c:	a0 91 02 2c 	lds	r26, 0x2C02
    4ba0:	b0 91 03 2c 	lds	r27, 0x2C03
    4ba4:	10 97       	sbiw	r26, 0x00	; 0
    4ba6:	09 f4       	brne	.+2      	; 0x4baa <remove_task+0x1a>
    4ba8:	b1 c0       	rjmp	.+354    	; 0x4d0c <remove_task+0x17c>
		if(task_list==task)
    4baa:	8a 17       	cp	r24, r26
    4bac:	9b 07       	cpc	r25, r27
    4bae:	09 f0       	breq	.+2      	; 0x4bb2 <remove_task+0x22>
    4bb0:	50 c0       	rjmp	.+160    	; 0x4c52 <remove_task+0xc2>
		{
			task_list=task->next;
    4bb2:	80 85       	ldd	r24, Z+8	; 0x08
    4bb4:	91 85       	ldd	r25, Z+9	; 0x09
    4bb6:	80 93 02 2c 	sts	0x2C02, r24
    4bba:	90 93 03 2c 	sts	0x2C03, r25

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4bbe:	80 91 d9 2c 	lds	r24, 0x2CD9
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	ac 01       	movw	r20, r24
    4bc6:	44 0f       	add	r20, r20
    4bc8:	55 1f       	adc	r21, r21
    4bca:	9c 01       	movw	r18, r24
    4bcc:	22 0f       	add	r18, r18
    4bce:	33 1f       	adc	r19, r19
    4bd0:	22 0f       	add	r18, r18
    4bd2:	33 1f       	adc	r19, r19
    4bd4:	22 0f       	add	r18, r18
    4bd6:	33 1f       	adc	r19, r19
    4bd8:	24 0f       	add	r18, r20
    4bda:	35 1f       	adc	r19, r21
    4bdc:	26 52       	subi	r18, 0x26	; 38
    4bde:	33 4d       	sbci	r19, 0xD3	; 211
    4be0:	e2 17       	cp	r30, r18
    4be2:	f3 07       	cpc	r31, r19
    4be4:	e9 f4       	brne	.+58     	; 0x4c20 <remove_task+0x90>
		{
			task_storage_arr[tmp].task_function = NULL;
    4be6:	fc 01       	movw	r30, r24
    4be8:	ee 0f       	add	r30, r30
    4bea:	ff 1f       	adc	r31, r31
    4bec:	9c 01       	movw	r18, r24
    4bee:	22 0f       	add	r18, r18
    4bf0:	33 1f       	adc	r19, r19
    4bf2:	22 0f       	add	r18, r18
    4bf4:	33 1f       	adc	r19, r19
    4bf6:	22 0f       	add	r18, r18
    4bf8:	33 1f       	adc	r19, r19
    4bfa:	e2 0f       	add	r30, r18
    4bfc:	f3 1f       	adc	r31, r19
    4bfe:	e6 52       	subi	r30, 0x26	; 38
    4c00:	f3 4d       	sbci	r31, 0xD3	; 211
    4c02:	14 82       	std	Z+4, r1	; 0x04
    4c04:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4c06:	09 96       	adiw	r24, 0x09	; 9
    4c08:	6a e0       	ldi	r22, 0x0A	; 10
    4c0a:	70 e0       	ldi	r23, 0x00	; 0
    4c0c:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
    4c10:	80 93 d9 2c 	sts	0x2CD9, r24
		if(task_list==task)
		{
			task_list=task->next;
			scheduler_free(task);
			task = NULL;
			num_tasks--;
    4c14:	80 91 81 29 	lds	r24, 0x2981
    4c18:	81 50       	subi	r24, 0x01	; 1
    4c1a:	80 93 81 29 	sts	0x2981, r24
    4c1e:	78 c0       	rjmp	.+240    	; 0x4d10 <remove_task+0x180>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4c20:	ca e0       	ldi	r28, 0x0A	; 10
    4c22:	d0 e0       	ldi	r29, 0x00	; 0
    4c24:	09 96       	adiw	r24, 0x09	; 9
    4c26:	be 01       	movw	r22, r28
    4c28:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4c2c:	99 27       	eor	r25, r25
    4c2e:	ac 01       	movw	r20, r24
    4c30:	44 0f       	add	r20, r20
    4c32:	55 1f       	adc	r21, r21
    4c34:	9c 01       	movw	r18, r24
    4c36:	22 0f       	add	r18, r18
    4c38:	33 1f       	adc	r19, r19
    4c3a:	22 0f       	add	r18, r18
    4c3c:	33 1f       	adc	r19, r19
    4c3e:	22 0f       	add	r18, r18
    4c40:	33 1f       	adc	r19, r19
    4c42:	24 0f       	add	r18, r20
    4c44:	35 1f       	adc	r19, r21
    4c46:	26 52       	subi	r18, 0x26	; 38
    4c48:	33 4d       	sbci	r19, 0xD3	; 211
    4c4a:	e2 17       	cp	r30, r18
    4c4c:	f3 07       	cpc	r31, r19
    4c4e:	51 f7       	brne	.-44     	; 0x4c24 <remove_task+0x94>
    4c50:	ca cf       	rjmp	.-108    	; 0x4be6 <remove_task+0x56>
			num_tasks--;
		}
		else
		{
			Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    4c52:	18 96       	adiw	r26, 0x08	; 8
    4c54:	2d 91       	ld	r18, X+
    4c56:	3c 91       	ld	r19, X
    4c58:	19 97       	sbiw	r26, 0x09	; 9
    4c5a:	21 15       	cp	r18, r1
    4c5c:	31 05       	cpc	r19, r1
    4c5e:	09 f4       	brne	.+2      	; 0x4c62 <remove_task+0xd2>
    4c60:	57 c0       	rjmp	.+174    	; 0x4d10 <remove_task+0x180>
    4c62:	e2 17       	cp	r30, r18
    4c64:	f3 07       	cpc	r31, r19
    4c66:	11 f0       	breq	.+4      	; 0x4c6c <remove_task+0xdc>
    4c68:	d9 01       	movw	r26, r18
    4c6a:	f3 cf       	rjmp	.-26     	; 0x4c52 <remove_task+0xc2>
			if (tmp_task->next != NULL)
			{
				tmp_task->next = task->next;
    4c6c:	80 85       	ldd	r24, Z+8	; 0x08
    4c6e:	91 85       	ldd	r25, Z+9	; 0x09
    4c70:	18 96       	adiw	r26, 0x08	; 8
    4c72:	8d 93       	st	X+, r24
    4c74:	9c 93       	st	X, r25
    4c76:	19 97       	sbiw	r26, 0x09	; 9

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4c78:	80 91 d9 2c 	lds	r24, 0x2CD9
    4c7c:	90 e0       	ldi	r25, 0x00	; 0
    4c7e:	ac 01       	movw	r20, r24
    4c80:	44 0f       	add	r20, r20
    4c82:	55 1f       	adc	r21, r21
    4c84:	9c 01       	movw	r18, r24
    4c86:	22 0f       	add	r18, r18
    4c88:	33 1f       	adc	r19, r19
    4c8a:	22 0f       	add	r18, r18
    4c8c:	33 1f       	adc	r19, r19
    4c8e:	22 0f       	add	r18, r18
    4c90:	33 1f       	adc	r19, r19
    4c92:	24 0f       	add	r18, r20
    4c94:	35 1f       	adc	r19, r21
    4c96:	26 52       	subi	r18, 0x26	; 38
    4c98:	33 4d       	sbci	r19, 0xD3	; 211
    4c9a:	e2 17       	cp	r30, r18
    4c9c:	f3 07       	cpc	r31, r19
    4c9e:	e9 f4       	brne	.+58     	; 0x4cda <remove_task+0x14a>
		{
			task_storage_arr[tmp].task_function = NULL;
    4ca0:	fc 01       	movw	r30, r24
    4ca2:	ee 0f       	add	r30, r30
    4ca4:	ff 1f       	adc	r31, r31
    4ca6:	9c 01       	movw	r18, r24
    4ca8:	22 0f       	add	r18, r18
    4caa:	33 1f       	adc	r19, r19
    4cac:	22 0f       	add	r18, r18
    4cae:	33 1f       	adc	r19, r19
    4cb0:	22 0f       	add	r18, r18
    4cb2:	33 1f       	adc	r19, r19
    4cb4:	e2 0f       	add	r30, r18
    4cb6:	f3 1f       	adc	r31, r19
    4cb8:	e6 52       	subi	r30, 0x26	; 38
    4cba:	f3 4d       	sbci	r31, 0xD3	; 211
    4cbc:	14 82       	std	Z+4, r1	; 0x04
    4cbe:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4cc0:	09 96       	adiw	r24, 0x09	; 9
    4cc2:	6a e0       	ldi	r22, 0x0A	; 10
    4cc4:	70 e0       	ldi	r23, 0x00	; 0
    4cc6:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
    4cca:	80 93 d9 2c 	sts	0x2CD9, r24
			if (tmp_task->next != NULL)
			{
				tmp_task->next = task->next;
				scheduler_free(task);
				task = NULL;
				num_tasks--;
    4cce:	80 91 81 29 	lds	r24, 0x2981
    4cd2:	81 50       	subi	r24, 0x01	; 1
    4cd4:	80 93 81 29 	sts	0x2981, r24
    4cd8:	1b c0       	rjmp	.+54     	; 0x4d10 <remove_task+0x180>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4cda:	ca e0       	ldi	r28, 0x0A	; 10
    4cdc:	d0 e0       	ldi	r29, 0x00	; 0
    4cde:	09 96       	adiw	r24, 0x09	; 9
    4ce0:	be 01       	movw	r22, r28
    4ce2:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4ce6:	99 27       	eor	r25, r25
    4ce8:	ac 01       	movw	r20, r24
    4cea:	44 0f       	add	r20, r20
    4cec:	55 1f       	adc	r21, r21
    4cee:	9c 01       	movw	r18, r24
    4cf0:	22 0f       	add	r18, r18
    4cf2:	33 1f       	adc	r19, r19
    4cf4:	22 0f       	add	r18, r18
    4cf6:	33 1f       	adc	r19, r19
    4cf8:	22 0f       	add	r18, r18
    4cfa:	33 1f       	adc	r19, r19
    4cfc:	24 0f       	add	r18, r20
    4cfe:	35 1f       	adc	r19, r21
    4d00:	26 52       	subi	r18, 0x26	; 38
    4d02:	33 4d       	sbci	r19, 0xD3	; 211
    4d04:	e2 17       	cp	r30, r18
    4d06:	f3 07       	cpc	r31, r19
    4d08:	51 f7       	brne	.-44     	; 0x4cde <remove_task+0x14e>
    4d0a:	ca cf       	rjmp	.-108    	; 0x4ca0 <remove_task+0x110>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4d0c:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    4d0e:	01 c0       	rjmp	.+2      	; 0x4d12 <remove_task+0x182>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4d10:	1f bf       	out	0x3f, r17	; 63
			}
		}

	}

}
    4d12:	df 91       	pop	r29
    4d14:	cf 91       	pop	r28
    4d16:	1f 91       	pop	r17
    4d18:	08 95       	ret

00004d1a <print_task_queue>:

void print_task_queue()
{
    4d1a:	ff 92       	push	r15
    4d1c:	0f 93       	push	r16
    4d1e:	1f 93       	push	r17
    4d20:	cf 93       	push	r28
    4d22:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during printing
    4d24:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4d26:	f8 94       	cli
	{
		Task_t* cur_task = task_list;
    4d28:	c0 91 02 2c 	lds	r28, 0x2C02
    4d2c:	d0 91 03 2c 	lds	r29, 0x2C03
		
		printf("Task Queue (%hhu tasks, %hhu executing):\r\n", num_tasks, num_executing_tasks);
    4d30:	90 91 84 29 	lds	r25, 0x2984
    4d34:	80 91 81 29 	lds	r24, 0x2981
    4d38:	1f 92       	push	r1
    4d3a:	9f 93       	push	r25
    4d3c:	1f 92       	push	r1
    4d3e:	8f 93       	push	r24
    4d40:	8b e1       	ldi	r24, 0x1B	; 27
    4d42:	93 e2       	ldi	r25, 0x23	; 35
    4d44:	9f 93       	push	r25
    4d46:	8f 93       	push	r24
    4d48:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    4d4c:	0f 90       	pop	r0
    4d4e:	0f 90       	pop	r0
    4d50:	0f 90       	pop	r0
    4d52:	0f 90       	pop	r0
    4d54:	0f 90       	pop	r0
    4d56:	0f 90       	pop	r0
    4d58:	20 97       	sbiw	r28, 0x00	; 0
    4d5a:	21 f1       	breq	.+72     	; 0x4da4 <print_task_queue+0x8a>
		{
			printf("\tTask %p (%p) scheduled at %lu, %lu current\r\n", cur_task, cur_task->task_function, cur_task->scheduled_time, get_time());
    4d5c:	06 e4       	ldi	r16, 0x46	; 70
    4d5e:	13 e2       	ldi	r17, 0x23	; 35
    4d60:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4d64:	9f 93       	push	r25
    4d66:	8f 93       	push	r24
    4d68:	7f 93       	push	r23
    4d6a:	6f 93       	push	r22
    4d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6e:	8f 93       	push	r24
    4d70:	8a 81       	ldd	r24, Y+2	; 0x02
    4d72:	8f 93       	push	r24
    4d74:	89 81       	ldd	r24, Y+1	; 0x01
    4d76:	8f 93       	push	r24
    4d78:	88 81       	ld	r24, Y
    4d7a:	8f 93       	push	r24
    4d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d7e:	8f 93       	push	r24
    4d80:	8c 81       	ldd	r24, Y+4	; 0x04
    4d82:	8f 93       	push	r24
    4d84:	df 93       	push	r29
    4d86:	cf 93       	push	r28
    4d88:	1f 93       	push	r17
    4d8a:	0f 93       	push	r16
    4d8c:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
			cur_task = cur_task->next;
    4d90:	08 84       	ldd	r0, Y+8	; 0x08
    4d92:	d9 85       	ldd	r29, Y+9	; 0x09
    4d94:	c0 2d       	mov	r28, r0
		Task_t* cur_task = task_list;
		
		printf("Task Queue (%hhu tasks, %hhu executing):\r\n", num_tasks, num_executing_tasks);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    4d96:	8d b7       	in	r24, 0x3d	; 61
    4d98:	9e b7       	in	r25, 0x3e	; 62
    4d9a:	0e 96       	adiw	r24, 0x0e	; 14
    4d9c:	8d bf       	out	0x3d, r24	; 61
    4d9e:	9e bf       	out	0x3e, r25	; 62
    4da0:	20 97       	sbiw	r28, 0x00	; 0
    4da2:	f1 f6       	brne	.-68     	; 0x4d60 <print_task_queue+0x46>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4da4:	ff be       	out	0x3f, r15	; 63
		{
			printf("\tTask %p (%p) scheduled at %lu, %lu current\r\n", cur_task, cur_task->task_function, cur_task->scheduled_time, get_time());
			cur_task = cur_task->next;
		}
	}
}
    4da6:	df 91       	pop	r29
    4da8:	cf 91       	pop	r28
    4daa:	1f 91       	pop	r17
    4dac:	0f 91       	pop	r16
    4dae:	ff 90       	pop	r15
    4db0:	08 95       	ret

00004db2 <run_tasks>:

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
void run_tasks()
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    4db2:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4db4:	f8 94       	cli
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4db6:	e0 91 02 2c 	lds	r30, 0x2C02
    4dba:	f0 91 03 2c 	lds	r31, 0x2C03
    4dbe:	30 97       	sbiw	r30, 0x00	; 0
    4dc0:	09 f0       	breq	.+2      	; 0x4dc4 <run_tasks+0x12>
    4dc2:	67 c0       	rjmp	.+206    	; 0x4e92 <run_tasks+0xe0>
    4dc4:	a6 c0       	rjmp	.+332    	; 0x4f12 <run_tasks+0x160>
		{
			Task_t* cur_task = task_list;
    4dc6:	e0 90 02 2c 	lds	r14, 0x2C02
    4dca:	f0 90 03 2c 	lds	r15, 0x2C03
			task_list = cur_task->next;
    4dce:	d7 01       	movw	r26, r14
    4dd0:	18 96       	adiw	r26, 0x08	; 8
    4dd2:	8d 91       	ld	r24, X+
    4dd4:	9c 91       	ld	r25, X
    4dd6:	19 97       	sbiw	r26, 0x09	; 9
    4dd8:	80 93 02 2c 	sts	0x2C02, r24
    4ddc:	90 93 03 2c 	sts	0x2C03, r25

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    4de0:	78 94       	sei
			NONATOMIC_BLOCK(NONATOMIC_FORCEOFF) // Enable interrupts during tasks
			{
				cur_task->task_function(cur_task->arg); // run the task
    4de2:	d7 01       	movw	r26, r14
    4de4:	14 96       	adiw	r26, 0x04	; 4
    4de6:	ed 91       	ld	r30, X+
    4de8:	fc 91       	ld	r31, X
    4dea:	15 97       	sbiw	r26, 0x05	; 5
    4dec:	16 96       	adiw	r26, 0x06	; 6
    4dee:	8d 91       	ld	r24, X+
    4df0:	9c 91       	ld	r25, X
    4df2:	17 97       	sbiw	r26, 0x07	; 7
    4df4:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
    4df6:	f8 94       	cli

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4df8:	80 91 d9 2c 	lds	r24, 0x2CD9
    4dfc:	90 e0       	ldi	r25, 0x00	; 0
    4dfe:	ac 01       	movw	r20, r24
    4e00:	44 0f       	add	r20, r20
    4e02:	55 1f       	adc	r21, r21
    4e04:	9c 01       	movw	r18, r24
    4e06:	22 0f       	add	r18, r18
    4e08:	33 1f       	adc	r19, r19
    4e0a:	22 0f       	add	r18, r18
    4e0c:	33 1f       	adc	r19, r19
    4e0e:	22 0f       	add	r18, r18
    4e10:	33 1f       	adc	r19, r19
    4e12:	24 0f       	add	r18, r20
    4e14:	35 1f       	adc	r19, r21
    4e16:	26 52       	subi	r18, 0x26	; 38
    4e18:	33 4d       	sbci	r19, 0xD3	; 211
    4e1a:	e2 16       	cp	r14, r18
    4e1c:	f3 06       	cpc	r15, r19
    4e1e:	11 f5       	brne	.+68     	; 0x4e64 <run_tasks+0xb2>
		{
			task_storage_arr[tmp].task_function = NULL;
    4e20:	fc 01       	movw	r30, r24
    4e22:	ee 0f       	add	r30, r30
    4e24:	ff 1f       	adc	r31, r31
    4e26:	9c 01       	movw	r18, r24
    4e28:	22 0f       	add	r18, r18
    4e2a:	33 1f       	adc	r19, r19
    4e2c:	22 0f       	add	r18, r18
    4e2e:	33 1f       	adc	r19, r19
    4e30:	22 0f       	add	r18, r18
    4e32:	33 1f       	adc	r19, r19
    4e34:	e2 0f       	add	r30, r18
    4e36:	f3 1f       	adc	r31, r19
    4e38:	e6 52       	subi	r30, 0x26	; 38
    4e3a:	f3 4d       	sbci	r31, 0xD3	; 211
    4e3c:	14 82       	std	Z+4, r1	; 0x04
    4e3e:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4e40:	09 96       	adiw	r24, 0x09	; 9
    4e42:	be 01       	movw	r22, r28
    4e44:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
    4e48:	80 93 d9 2c 	sts	0x2CD9, r24
			{
				cur_task->task_function(cur_task->arg); // run the task
			}
			scheduler_free(cur_task);
			cur_task = NULL;
			num_tasks--;
    4e4c:	80 91 81 29 	lds	r24, 0x2981
    4e50:	81 50       	subi	r24, 0x01	; 1
    4e52:	80 93 81 29 	sts	0x2981, r24
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4e56:	e0 91 02 2c 	lds	r30, 0x2C02
    4e5a:	f0 91 03 2c 	lds	r31, 0x2C03
    4e5e:	30 97       	sbiw	r30, 0x00	; 0
    4e60:	d1 f4       	brne	.+52     	; 0x4e96 <run_tasks+0xe4>
    4e62:	57 c0       	rjmp	.+174    	; 0x4f12 <run_tasks+0x160>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4e64:	09 96       	adiw	r24, 0x09	; 9
    4e66:	be 01       	movw	r22, r28
    4e68:	0e 94 74 35 	call	0x6ae8	; 0x6ae8 <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4e6c:	99 27       	eor	r25, r25
    4e6e:	ac 01       	movw	r20, r24
    4e70:	44 0f       	add	r20, r20
    4e72:	55 1f       	adc	r21, r21
    4e74:	9c 01       	movw	r18, r24
    4e76:	22 0f       	add	r18, r18
    4e78:	33 1f       	adc	r19, r19
    4e7a:	22 0f       	add	r18, r18
    4e7c:	33 1f       	adc	r19, r19
    4e7e:	22 0f       	add	r18, r18
    4e80:	33 1f       	adc	r19, r19
    4e82:	24 0f       	add	r18, r20
    4e84:	35 1f       	adc	r19, r21
    4e86:	26 52       	subi	r18, 0x26	; 38
    4e88:	33 4d       	sbci	r19, 0xD3	; 211
    4e8a:	e2 16       	cp	r14, r18
    4e8c:	f3 06       	cpc	r15, r19
    4e8e:	51 f7       	brne	.-44     	; 0x4e64 <run_tasks+0xb2>
    4e90:	c7 cf       	rjmp	.-114    	; 0x4e20 <run_tasks+0x6e>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4e92:	ca e0       	ldi	r28, 0x0A	; 10
    4e94:	d0 e0       	ldi	r29, 0x00	; 0
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4e96:	c0 80       	ld	r12, Z
    4e98:	d1 80       	ldd	r13, Z+1	; 0x01
    4e9a:	e2 80       	ldd	r14, Z+2	; 0x02
    4e9c:	f3 80       	ldd	r15, Z+3	; 0x03
    4e9e:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4ea2:	dc 01       	movw	r26, r24
    4ea4:	cb 01       	movw	r24, r22
    4ea6:	02 96       	adiw	r24, 0x02	; 2
    4ea8:	a1 1d       	adc	r26, r1
    4eaa:	b1 1d       	adc	r27, r1
    4eac:	8c 15       	cp	r24, r12
    4eae:	9d 05       	cpc	r25, r13
    4eb0:	ae 05       	cpc	r26, r14
    4eb2:	bf 05       	cpc	r27, r15
    4eb4:	08 f0       	brcs	.+2      	; 0x4eb8 <run_tasks+0x106>
    4eb6:	87 cf       	rjmp	.-242    	; 0x4dc6 <run_tasks+0x14>
			scheduler_free(cur_task);
			cur_task = NULL;
			num_tasks--;
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4eb8:	e0 91 02 2c 	lds	r30, 0x2C02
    4ebc:	f0 91 03 2c 	lds	r31, 0x2C03
    4ec0:	30 97       	sbiw	r30, 0x00	; 0
    4ec2:	39 f1       	breq	.+78     	; 0x4f12 <run_tasks+0x160>
    4ec4:	80 81       	ld	r24, Z
    4ec6:	91 81       	ldd	r25, Z+1	; 0x01
    4ec8:	a2 81       	ldd	r26, Z+2	; 0x02
    4eca:	b3 81       	ldd	r27, Z+3	; 0x03
    4ecc:	40 91 8d 27 	lds	r20, 0x278D
    4ed0:	50 91 8e 27 	lds	r21, 0x278E
    4ed4:	e0 e0       	ldi	r30, 0x00	; 0
    4ed6:	f4 e0       	ldi	r31, 0x04	; 4
    4ed8:	c2 84       	ldd	r12, Z+10	; 0x0a
    4eda:	d3 84       	ldd	r13, Z+11	; 0x0b
    4edc:	60 e0       	ldi	r22, 0x00	; 0
    4ede:	70 e0       	ldi	r23, 0x00	; 0
    4ee0:	ba 01       	movw	r22, r20
    4ee2:	55 27       	eor	r21, r21
    4ee4:	44 27       	eor	r20, r20
    4ee6:	e1 2c       	mov	r14, r1
    4ee8:	f1 2c       	mov	r15, r1
    4eea:	4c 29       	or	r20, r12
    4eec:	5d 29       	or	r21, r13
    4eee:	6e 29       	or	r22, r14
    4ef0:	7f 29       	or	r23, r15
    4ef2:	48 17       	cp	r20, r24
    4ef4:	59 07       	cpc	r21, r25
    4ef6:	6a 07       	cpc	r22, r26
    4ef8:	7b 07       	cpc	r23, r27
    4efa:	58 f0       	brcs	.+22     	; 0x4f12 <run_tasks+0x160>
		{
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4efc:	21 81       	ldd	r18, Z+1	; 0x01
    4efe:	20 fd       	sbrc	r18, 0
    4f00:	fd cf       	rjmp	.-6      	; 0x4efc <run_tasks+0x14a>
			RTC.COMP = (uint16_t)(task_list->scheduled_time);
    4f02:	e0 e0       	ldi	r30, 0x00	; 0
    4f04:	f4 e0       	ldi	r31, 0x04	; 4
    4f06:	84 87       	std	Z+12, r24	; 0x0c
    4f08:	95 87       	std	Z+13, r25	; 0x0d
			RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    4f0a:	82 81       	ldd	r24, Z+2	; 0x02
    4f0c:	84 60       	ori	r24, 0x04	; 4
    4f0e:	82 83       	std	Z+2, r24	; 0x02
    4f10:	05 c0       	rjmp	.+10     	; 0x4f1c <run_tasks+0x16a>
		}
		else
		{
			RTC.INTCTRL &= ~RTC_COMPINTLVL_LO_gc;
    4f12:	e0 e0       	ldi	r30, 0x00	; 0
    4f14:	f4 e0       	ldi	r31, 0x04	; 4
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	8b 7f       	andi	r24, 0xFB	; 251
    4f1a:	82 83       	std	Z+2, r24	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4f1c:	1f bf       	out	0x3f, r17	; 63
	}
	
	// Jump to the code that restores the registers to the state they were in
	// before the RTC interrupt.  Program control will return to where it was before the interrupt
	// on return from restore_registers
	asm("jmp restore_registers");	 // must include scheduler_asm.c in the project
    4f1e:	0c 94 09 02 	jmp	0x412	; 0x412 <restore_registers>

00004f22 <__vector_10>:
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect )
{
    4f22:	1f 92       	push	r1
    4f24:	0f 92       	push	r0
    4f26:	0f b6       	in	r0, 0x3f	; 63
    4f28:	0f 92       	push	r0
    4f2a:	11 24       	eor	r1, r1
    4f2c:	0b b6       	in	r0, 0x3b	; 59
    4f2e:	0f 92       	push	r0
    4f30:	cf 92       	push	r12
    4f32:	df 92       	push	r13
    4f34:	ef 92       	push	r14
    4f36:	ff 92       	push	r15
    4f38:	2f 93       	push	r18
    4f3a:	3f 93       	push	r19
    4f3c:	4f 93       	push	r20
    4f3e:	5f 93       	push	r21
    4f40:	6f 93       	push	r22
    4f42:	7f 93       	push	r23
    4f44:	8f 93       	push	r24
    4f46:	9f 93       	push	r25
    4f48:	af 93       	push	r26
    4f4a:	bf 93       	push	r27
    4f4c:	cf 93       	push	r28
    4f4e:	ef 93       	push	r30
    4f50:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    4f52:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4f54:	f8 94       	cli
	{
		rtc_epoch++;
    4f56:	80 91 8d 27 	lds	r24, 0x278D
    4f5a:	90 91 8e 27 	lds	r25, 0x278E
    4f5e:	01 96       	adiw	r24, 0x01	; 1
    4f60:	80 93 8d 27 	sts	0x278D, r24
    4f64:	90 93 8e 27 	sts	0x278E, r25
		//printf("RTC Overflow. Current time %u\n", get_time());
		//print_task_queue();

		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4f68:	e0 91 02 2c 	lds	r30, 0x2C02
    4f6c:	f0 91 03 2c 	lds	r31, 0x2C03
    4f70:	30 97       	sbiw	r30, 0x00	; 0
    4f72:	09 f4       	brne	.+2      	; 0x4f76 <__vector_10+0x54>
    4f74:	3f c0       	rjmp	.+126    	; 0x4ff4 <__vector_10+0xd2>
    4f76:	c0 80       	ld	r12, Z
    4f78:	d1 80       	ldd	r13, Z+1	; 0x01
    4f7a:	e2 80       	ldd	r14, Z+2	; 0x02
    4f7c:	f3 80       	ldd	r15, Z+3	; 0x03
    4f7e:	80 91 8d 27 	lds	r24, 0x278D
    4f82:	90 91 8e 27 	lds	r25, 0x278E
    4f86:	e0 e0       	ldi	r30, 0x00	; 0
    4f88:	f4 e0       	ldi	r31, 0x04	; 4
    4f8a:	42 85       	ldd	r20, Z+10	; 0x0a
    4f8c:	53 85       	ldd	r21, Z+11	; 0x0b
    4f8e:	a0 e0       	ldi	r26, 0x00	; 0
    4f90:	b0 e0       	ldi	r27, 0x00	; 0
    4f92:	dc 01       	movw	r26, r24
    4f94:	99 27       	eor	r25, r25
    4f96:	88 27       	eor	r24, r24
    4f98:	60 e0       	ldi	r22, 0x00	; 0
    4f9a:	70 e0       	ldi	r23, 0x00	; 0
    4f9c:	84 2b       	or	r24, r20
    4f9e:	95 2b       	or	r25, r21
    4fa0:	a6 2b       	or	r26, r22
    4fa2:	b7 2b       	or	r27, r23
    4fa4:	c8 16       	cp	r12, r24
    4fa6:	d9 06       	cpc	r13, r25
    4fa8:	ea 06       	cpc	r14, r26
    4faa:	fb 06       	cpc	r15, r27
    4fac:	18 f5       	brcc	.+70     	; 0x4ff4 <__vector_10+0xd2>
		{
			// updating RTC.COMP takes 2 RTC clock cycles, so only update the compare value and
			// interrupt if the scheduled_time is more than 2ms away
			if (task_list->scheduled_time > get_time() + 2)
    4fae:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4fb2:	dc 01       	movw	r26, r24
    4fb4:	cb 01       	movw	r24, r22
    4fb6:	02 96       	adiw	r24, 0x02	; 2
    4fb8:	a1 1d       	adc	r26, r1
    4fba:	b1 1d       	adc	r27, r1
    4fbc:	8c 15       	cp	r24, r12
    4fbe:	9d 05       	cpc	r25, r13
    4fc0:	ae 05       	cpc	r26, r14
    4fc2:	bf 05       	cpc	r27, r15
    4fc4:	98 f4       	brcc	.+38     	; 0x4fec <__vector_10+0xca>
			{
				while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4fc6:	e0 e0       	ldi	r30, 0x00	; 0
    4fc8:	f4 e0       	ldi	r31, 0x04	; 4
    4fca:	81 81       	ldd	r24, Z+1	; 0x01
    4fcc:	80 fd       	sbrc	r24, 0
    4fce:	fd cf       	rjmp	.-6      	; 0x4fca <__vector_10+0xa8>
				RTC.COMP = (uint16_t)(task_list->scheduled_time);
    4fd0:	e0 91 02 2c 	lds	r30, 0x2C02
    4fd4:	f0 91 03 2c 	lds	r31, 0x2C03
    4fd8:	80 81       	ld	r24, Z
    4fda:	91 81       	ldd	r25, Z+1	; 0x01
    4fdc:	e0 e0       	ldi	r30, 0x00	; 0
    4fde:	f4 e0       	ldi	r31, 0x04	; 4
    4fe0:	84 87       	std	Z+12, r24	; 0x0c
    4fe2:	95 87       	std	Z+13, r25	; 0x0d
				RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    4fe4:	82 81       	ldd	r24, Z+2	; 0x02
    4fe6:	84 60       	ori	r24, 0x04	; 4
    4fe8:	82 83       	std	Z+2, r24	; 0x02
				return; // return from ISR
    4fea:	02 c0       	rjmp	.+4      	; 0x4ff0 <__vector_10+0xce>
			// If we get here, that means there's a task to execute in less than 2ms.  Jump to the ISR
			// to handle that.
			else
			{
				//RTC.INTFLAGS |= RTC_COMPIF_bm;
				asm("jmp rtc_compare_isr"); // must include scheduler_asm.S in the project
    4fec:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_11>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4ff0:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
    4ff2:	01 c0       	rjmp	.+2      	; 0x4ff6 <__vector_10+0xd4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4ff4:	cf bf       	out	0x3f, r28	; 63
				return;
			}
		}
	}
    4ff6:	ff 91       	pop	r31
    4ff8:	ef 91       	pop	r30
    4ffa:	cf 91       	pop	r28
    4ffc:	bf 91       	pop	r27
    4ffe:	af 91       	pop	r26
    5000:	9f 91       	pop	r25
    5002:	8f 91       	pop	r24
    5004:	7f 91       	pop	r23
    5006:	6f 91       	pop	r22
    5008:	5f 91       	pop	r21
    500a:	4f 91       	pop	r20
    500c:	3f 91       	pop	r19
    500e:	2f 91       	pop	r18
    5010:	ff 90       	pop	r15
    5012:	ef 90       	pop	r14
    5014:	df 90       	pop	r13
    5016:	cf 90       	pop	r12
    5018:	0f 90       	pop	r0
    501a:	0b be       	out	0x3b, r0	; 59
    501c:	0f 90       	pop	r0
    501e:	0f be       	out	0x3f, r0	; 63
    5020:	0f 90       	pop	r0
    5022:	1f 90       	pop	r1
    5024:	18 95       	reti

00005026 <send_id>:
{
	printf("My ID is: %04X\r\n",get_droplet_id());
}

void send_id()
{
    5026:	08 95       	ret

00005028 <collect_rnb_data_wrapper>:

// This function is used so we can make a transparent call to collect_rnb_data with 
// multiple arguments, but still leave the interrupt handler.
void collect_rnb_data_wrapper(void* arg)
{
	uint32_t wrapper_arg = *((uint32_t*)arg);
    5028:	fc 01       	movw	r30, r24
    502a:	80 81       	ld	r24, Z
    502c:	91 81       	ldd	r25, Z+1	; 0x01
    502e:	a2 81       	ldd	r26, Z+2	; 0x02
    5030:	b3 81       	ldd	r27, Z+3	; 0x03
	uint16_t id_val = (wrapper_arg&0xFFFF);
	uint8_t power_val = ((wrapper_arg>>16)&0xFF);
    5032:	ad 01       	movw	r20, r26
    5034:	66 27       	eor	r22, r22
    5036:	77 27       	eor	r23, r23
	collect_rnb_data(id_val, power_val);
    5038:	64 2f       	mov	r22, r20
    503a:	f0 c8       	rjmp	.-3616   	; 0x421c <collect_rnb_data>
    503c:	08 95       	ret

0000503e <handle_check_collisions>:
		}
	}
}

void handle_check_collisions()
{
    503e:	ef 92       	push	r14
    5040:	ff 92       	push	r15
    5042:	0f 93       	push	r16
    5044:	1f 93       	push	r17
    5046:	cf 93       	push	r28
    5048:	df 93       	push	r29
	uint8_t dirs = check_collisions();
    504a:	0e 94 6f 11 	call	0x22de	; 0x22de <check_collisions>
    504e:	c0 e0       	ldi	r28, 0x00	; 0
    5050:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t found=0;
    5052:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    5054:	08 2f       	mov	r16, r24
    5056:	10 e0       	ldi	r17, 0x00	; 0
			found=1;
			printf("%hhu",i);
    5058:	0f 2e       	mov	r0, r31
    505a:	f4 e7       	ldi	r31, 0x74	; 116
    505c:	ef 2e       	mov	r14, r31
    505e:	f3 e2       	ldi	r31, 0x23	; 35
    5060:	ff 2e       	mov	r15, r31
    5062:	f0 2d       	mov	r31, r0
void handle_check_collisions()
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    5064:	98 01       	movw	r18, r16
    5066:	0c 2e       	mov	r0, r28
    5068:	02 c0       	rjmp	.+4      	; 0x506e <handle_check_collisions+0x30>
    506a:	35 95       	asr	r19
    506c:	27 95       	ror	r18
    506e:	0a 94       	dec	r0
    5070:	e2 f7       	brpl	.-8      	; 0x506a <handle_check_collisions+0x2c>
    5072:	20 ff       	sbrs	r18, 0
    5074:	0b c0       	rjmp	.+22     	; 0x508c <handle_check_collisions+0x4e>
			found=1;
			printf("%hhu",i);
    5076:	df 93       	push	r29
    5078:	cf 93       	push	r28
    507a:	ff 92       	push	r15
    507c:	ef 92       	push	r14
    507e:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    5082:	0f 90       	pop	r0
    5084:	0f 90       	pop	r0
    5086:	0f 90       	pop	r0
    5088:	0f 90       	pop	r0
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    508a:	91 e0       	ldi	r25, 0x01	; 1
    508c:	21 96       	adiw	r28, 0x01	; 1

void handle_check_collisions()
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    508e:	c6 30       	cpi	r28, 0x06	; 6
    5090:	d1 05       	cpc	r29, r1
    5092:	41 f7       	brne	.-48     	; 0x5064 <handle_check_collisions+0x26>
		if(dirs&(1<<i)){
			found=1;
			printf("%hhu",i);
		}
	}
	if(!found) printf("None");
    5094:	91 11       	cpse	r25, r1
    5096:	08 c0       	rjmp	.+16     	; 0x50a8 <handle_check_collisions+0x6a>
    5098:	89 e7       	ldi	r24, 0x79	; 121
    509a:	93 e2       	ldi	r25, 0x23	; 35
    509c:	9f 93       	push	r25
    509e:	8f 93       	push	r24
    50a0:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    50a4:	0f 90       	pop	r0
    50a6:	0f 90       	pop	r0
	printf("\r\n");
    50a8:	8d e7       	ldi	r24, 0x7D	; 125
    50aa:	95 e2       	ldi	r25, 0x25	; 37
    50ac:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
}
    50b0:	df 91       	pop	r29
    50b2:	cf 91       	pop	r28
    50b4:	1f 91       	pop	r17
    50b6:	0f 91       	pop	r16
    50b8:	ff 90       	pop	r15
    50ba:	ef 90       	pop	r14
    50bc:	08 95       	ret

000050be <handle_move_steps>:

void handle_move_steps(char* command_args)
{
    50be:	ff 92       	push	r15
    50c0:	0f 93       	push	r16
    50c2:	1f 93       	push	r17
    50c4:	cf 93       	push	r28
    50c6:	df 93       	push	r29
    50c8:	1f 92       	push	r1
    50ca:	1f 92       	push	r1
    50cc:	cd b7       	in	r28, 0x3d	; 61
    50ce:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    50d0:	20 e2       	ldi	r18, 0x20	; 32
    50d2:	30 e0       	ldi	r19, 0x00	; 0
    50d4:	29 83       	std	Y+1, r18	; 0x01
    50d6:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    50d8:	be 01       	movw	r22, r28
    50da:	6f 5f       	subi	r22, 0xFF	; 255
    50dc:	7f 4f       	sbci	r23, 0xFF	; 255
    50de:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	uint8_t direction = token[0]-'0';
    50e2:	fc 01       	movw	r30, r24
    50e4:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    50e6:	be 01       	movw	r22, r28
    50e8:	6f 5f       	subi	r22, 0xFF	; 255
    50ea:	7f 4f       	sbci	r23, 0xFF	; 255
    50ec:	80 e0       	ldi	r24, 0x00	; 0
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    50f4:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    50f8:	8c 01       	movw	r16, r24
	if (num_steps > 0)
    50fa:	00 97       	sbiw	r24, 0x00	; 0
    50fc:	f1 f0       	breq	.+60     	; 0x513a <handle_move_steps+0x7c>
void handle_move_steps(char* command_args)
{
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    50fe:	f0 ed       	ldi	r31, 0xD0	; 208
    5100:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0)
	{
		set_rgb(0,0,200);		
    5102:	48 ec       	ldi	r20, 0xC8	; 200
    5104:	60 e0       	ldi	r22, 0x00	; 0
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	01 d9       	rcall	.-3582   	; 0x430c <set_rgb>
		printf("walk direction %u, num_steps %u\r\n", direction, num_steps);	
    510a:	1f 93       	push	r17
    510c:	0f 93       	push	r16
    510e:	1f 92       	push	r1
    5110:	ff 92       	push	r15
    5112:	2e e7       	ldi	r18, 0x7E	; 126
    5114:	33 e2       	ldi	r19, 0x23	; 35
    5116:	3f 93       	push	r19
    5118:	2f 93       	push	r18
    511a:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
		move_steps(direction, num_steps);
    511e:	b8 01       	movw	r22, r16
    5120:	8f 2d       	mov	r24, r15
    5122:	0e 94 79 12 	call	0x24f2	; 0x24f2 <move_steps>
		set_rgb(0,0,0);
    5126:	40 e0       	ldi	r20, 0x00	; 0
    5128:	60 e0       	ldi	r22, 0x00	; 0
    512a:	80 e0       	ldi	r24, 0x00	; 0
    512c:	ef d8       	rcall	.-3618   	; 0x430c <set_rgb>
    512e:	0f 90       	pop	r0
    5130:	0f 90       	pop	r0
    5132:	0f 90       	pop	r0
    5134:	0f 90       	pop	r0
    5136:	0f 90       	pop	r0
    5138:	0f 90       	pop	r0
	}	
}	
    513a:	0f 90       	pop	r0
    513c:	0f 90       	pop	r0
    513e:	df 91       	pop	r29
    5140:	cf 91       	pop	r28
    5142:	1f 91       	pop	r17
    5144:	0f 91       	pop	r16
    5146:	ff 90       	pop	r15
    5148:	08 95       	ret

0000514a <handle_walk>:

void handle_walk(char* command_args)
{	
    514a:	1f 93       	push	r17
    514c:	cf 93       	push	r28
    514e:	df 93       	push	r29
    5150:	1f 92       	push	r1
    5152:	1f 92       	push	r1
    5154:	cd b7       	in	r28, 0x3d	; 61
    5156:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5158:	20 e2       	ldi	r18, 0x20	; 32
    515a:	30 e0       	ldi	r19, 0x00	; 0
    515c:	29 83       	std	Y+1, r18	; 0x01
    515e:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5160:	be 01       	movw	r22, r28
    5162:	6f 5f       	subi	r22, 0xFF	; 255
    5164:	7f 4f       	sbci	r23, 0xFF	; 255
    5166:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	uint8_t direction = token[0]-'0';
    516a:	fc 01       	movw	r30, r24
    516c:	10 81       	ld	r17, Z
    516e:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    5170:	be 01       	movw	r22, r28
    5172:	6f 5f       	subi	r22, 0xFF	; 255
    5174:	7f 4f       	sbci	r23, 0xFF	; 255
    5176:	80 e0       	ldi	r24, 0x00	; 0
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    517e:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    5182:	bc 01       	movw	r22, r24
	
	walk(direction, distance_mm);
    5184:	81 2f       	mov	r24, r17
    5186:	0e 94 34 14 	call	0x2868	; 0x2868 <walk>
}
    518a:	0f 90       	pop	r0
    518c:	0f 90       	pop	r0
    518e:	df 91       	pop	r29
    5190:	cf 91       	pop	r28
    5192:	1f 91       	pop	r17
    5194:	08 95       	ret

00005196 <handle_get_rgb>:

void handle_get_rgb()
{
    5196:	cf 93       	push	r28
    5198:	df 93       	push	r29
    519a:	00 d0       	rcall	.+0      	; 0x519c <handle_get_rgb+0x6>
    519c:	cd b7       	in	r28, 0x3d	; 61
    519e:	de b7       	in	r29, 0x3e	; 62
	int8_t r, g, b;
	get_rgb_sensors(&r, &g, &b);
    51a0:	ae 01       	movw	r20, r28
    51a2:	4d 5f       	subi	r20, 0xFD	; 253
    51a4:	5f 4f       	sbci	r21, 0xFF	; 255
    51a6:	be 01       	movw	r22, r28
    51a8:	6e 5f       	subi	r22, 0xFE	; 254
    51aa:	7f 4f       	sbci	r23, 0xFF	; 255
    51ac:	ce 01       	movw	r24, r28
    51ae:	01 96       	adiw	r24, 0x01	; 1
    51b0:	02 db       	rcall	.-2556   	; 0x47b6 <get_rgb_sensors>
	printf("r: %hhd, g: %hhd, b: %hhd\r\n", r, g, b);
    51b2:	2b 81       	ldd	r18, Y+3	; 0x03
    51b4:	82 2f       	mov	r24, r18
    51b6:	99 27       	eor	r25, r25
    51b8:	87 fd       	sbrc	r24, 7
    51ba:	90 95       	com	r25
    51bc:	9f 93       	push	r25
    51be:	2f 93       	push	r18
    51c0:	2a 81       	ldd	r18, Y+2	; 0x02
    51c2:	82 2f       	mov	r24, r18
    51c4:	99 27       	eor	r25, r25
    51c6:	87 fd       	sbrc	r24, 7
    51c8:	90 95       	com	r25
    51ca:	9f 93       	push	r25
    51cc:	2f 93       	push	r18
    51ce:	29 81       	ldd	r18, Y+1	; 0x01
    51d0:	82 2f       	mov	r24, r18
    51d2:	99 27       	eor	r25, r25
    51d4:	87 fd       	sbrc	r24, 7
    51d6:	90 95       	com	r25
    51d8:	9f 93       	push	r25
    51da:	2f 93       	push	r18
    51dc:	80 ea       	ldi	r24, 0xA0	; 160
    51de:	93 e2       	ldi	r25, 0x23	; 35
    51e0:	9f 93       	push	r25
    51e2:	8f 93       	push	r24
    51e4:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    51e8:	cd bf       	out	0x3d, r28	; 61
    51ea:	de bf       	out	0x3e, r29	; 62
}
    51ec:	23 96       	adiw	r28, 0x03	; 3
    51ee:	cd bf       	out	0x3d, r28	; 61
    51f0:	de bf       	out	0x3e, r29	; 62
    51f2:	df 91       	pop	r29
    51f4:	cf 91       	pop	r28
    51f6:	08 95       	ret

000051f8 <handle_set_ir>:

void handle_set_ir(char* command_args)
{
    51f8:	cf 93       	push	r28
    51fa:	df 93       	push	r29
    51fc:	1f 92       	push	r1
    51fe:	1f 92       	push	r1
    5200:	cd b7       	in	r28, 0x3d	; 61
    5202:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5204:	20 e2       	ldi	r18, 0x20	; 32
    5206:	30 e0       	ldi	r19, 0x00	; 0
    5208:	29 83       	std	Y+1, r18	; 0x01
    520a:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    520c:	be 01       	movw	r22, r28
    520e:	6f 5f       	subi	r22, 0xFF	; 255
    5210:	7f 4f       	sbci	r23, 0xFF	; 255
    5212:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    5216:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
	
	set_all_ir_powers(ir_val);
    521a:	0e 94 4b 04 	call	0x896	; 0x896 <set_all_ir_powers>
}
    521e:	0f 90       	pop	r0
    5220:	0f 90       	pop	r0
    5222:	df 91       	pop	r29
    5224:	cf 91       	pop	r28
    5226:	08 95       	ret

00005228 <handle_stop_walk>:

void handle_stop_walk()
{
	set_rgb(180,0,0);
    5228:	40 e0       	ldi	r20, 0x00	; 0
    522a:	60 e0       	ldi	r22, 0x00	; 0
    522c:	84 eb       	ldi	r24, 0xB4	; 180
    522e:	6e d8       	rcall	.-3876   	; 0x430c <set_rgb>
	stop(0);
    5230:	80 e0       	ldi	r24, 0x00	; 0
    5232:	90 e0       	ldi	r25, 0x00	; 0
    5234:	0e 94 4a 12 	call	0x2494	; 0x2494 <stop>
	set_rgb(0,0,0);
    5238:	40 e0       	ldi	r20, 0x00	; 0
    523a:	60 e0       	ldi	r22, 0x00	; 0
    523c:	80 e0       	ldi	r24, 0x00	; 0
    523e:	66 c8       	rjmp	.-3892   	; 0x430c <set_rgb>
    5240:	08 95       	ret

00005242 <handle_set_motors>:
	//
	//theta = val;
//}

void handle_set_motors(char* command_args)
{	
    5242:	0f 93       	push	r16
    5244:	1f 93       	push	r17
    5246:	cf 93       	push	r28
    5248:	df 93       	push	r29
    524a:	1f 92       	push	r1
    524c:	1f 92       	push	r1
    524e:	cd b7       	in	r28, 0x3d	; 61
    5250:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5252:	20 e2       	ldi	r18, 0x20	; 32
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	29 83       	std	Y+1, r18	; 0x01
    5258:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    525a:	be 01       	movw	r22, r28
    525c:	6f 5f       	subi	r22, 0xFF	; 255
    525e:	7f 4f       	sbci	r23, 0xFF	; 255
    5260:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	if(token==NULL){ printf("strtok returned NULL on direction.\r\n"); return;}
    5264:	00 97       	sbiw	r24, 0x00	; 0
    5266:	29 f4       	brne	.+10     	; 0x5272 <handle_set_motors+0x30>
    5268:	8c eb       	ldi	r24, 0xBC	; 188
    526a:	93 e2       	ldi	r25, 0x23	; 35
    526c:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    5270:	79 c0       	rjmp	.+242    	; 0x5364 <handle_set_motors+0x122>
	uint8_t direction = atoi(token);
    5272:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    5276:	8c 01       	movw	r16, r24
	if(direction> 7){ printf("Bad direction. Got: %hhu.\r\n", direction); return;}
    5278:	88 30       	cpi	r24, 0x08	; 8
    527a:	70 f0       	brcs	.+28     	; 0x5298 <handle_set_motors+0x56>
    527c:	11 27       	eor	r17, r17
    527e:	1f 93       	push	r17
    5280:	0f 93       	push	r16
    5282:	80 ee       	ldi	r24, 0xE0	; 224
    5284:	93 e2       	ldi	r25, 0x23	; 35
    5286:	9f 93       	push	r25
    5288:	8f 93       	push	r24
    528a:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    528e:	0f 90       	pop	r0
    5290:	0f 90       	pop	r0
    5292:	0f 90       	pop	r0
    5294:	0f 90       	pop	r0
    5296:	66 c0       	rjmp	.+204    	; 0x5364 <handle_set_motors+0x122>

	token = strtok(NULL,delim);
    5298:	be 01       	movw	r22, r28
    529a:	6f 5f       	subi	r22, 0xFF	; 255
    529c:	7f 4f       	sbci	r23, 0xFF	; 255
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	90 e0       	ldi	r25, 0x00	; 0
    52a2:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	if(token==NULL){ printf("strtok returned NULL on first val.\r\n"); return;}	
    52a6:	00 97       	sbiw	r24, 0x00	; 0
    52a8:	29 f4       	brne	.+10     	; 0x52b4 <handle_set_motors+0x72>
    52aa:	8c ef       	ldi	r24, 0xFC	; 252
    52ac:	93 e2       	ldi	r25, 0x23	; 35
    52ae:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    52b2:	58 c0       	rjmp	.+176    	; 0x5364 <handle_set_motors+0x122>
	motor_adjusts[direction][0] = atoi(token);
    52b4:	11 27       	eor	r17, r17
    52b6:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    52ba:	f8 01       	movw	r30, r16
    52bc:	ee 0f       	add	r30, r30
    52be:	ff 1f       	adc	r31, r31
    52c0:	e0 0f       	add	r30, r16
    52c2:	f1 1f       	adc	r31, r17
    52c4:	ee 0f       	add	r30, r30
    52c6:	ff 1f       	adc	r31, r31
    52c8:	e2 53       	subi	r30, 0x32	; 50
    52ca:	f4 4d       	sbci	r31, 0xD4	; 212
    52cc:	80 83       	st	Z, r24
    52ce:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    52d0:	be 01       	movw	r22, r28
    52d2:	6f 5f       	subi	r22, 0xFF	; 255
    52d4:	7f 4f       	sbci	r23, 0xFF	; 255
    52d6:	80 e0       	ldi	r24, 0x00	; 0
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	if(token==NULL){ printf("strtok returned NULL on second val.\r\n"); return;}
    52de:	00 97       	sbiw	r24, 0x00	; 0
    52e0:	29 f4       	brne	.+10     	; 0x52ec <handle_set_motors+0xaa>
    52e2:	80 e2       	ldi	r24, 0x20	; 32
    52e4:	94 e2       	ldi	r25, 0x24	; 36
    52e6:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    52ea:	3c c0       	rjmp	.+120    	; 0x5364 <handle_set_motors+0x122>
	motor_adjusts[direction][1] = atoi(token);
    52ec:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    52f0:	f8 01       	movw	r30, r16
    52f2:	ee 0f       	add	r30, r30
    52f4:	ff 1f       	adc	r31, r31
    52f6:	e0 0f       	add	r30, r16
    52f8:	f1 1f       	adc	r31, r17
    52fa:	ee 0f       	add	r30, r30
    52fc:	ff 1f       	adc	r31, r31
    52fe:	e2 53       	subi	r30, 0x32	; 50
    5300:	f4 4d       	sbci	r31, 0xD4	; 212
    5302:	82 83       	std	Z+2, r24	; 0x02
    5304:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    5306:	be 01       	movw	r22, r28
    5308:	6f 5f       	subi	r22, 0xFF	; 255
    530a:	7f 4f       	sbci	r23, 0xFF	; 255
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	if(token==NULL){ printf("strtok returned NULL on third val.\r\n"); return;}
    5314:	00 97       	sbiw	r24, 0x00	; 0
    5316:	29 f4       	brne	.+10     	; 0x5322 <handle_set_motors+0xe0>
    5318:	85 e4       	ldi	r24, 0x45	; 69
    531a:	94 e2       	ldi	r25, 0x24	; 36
    531c:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    5320:	21 c0       	rjmp	.+66     	; 0x5364 <handle_set_motors+0x122>
	motor_adjusts[direction][2] = atoi(token);	
    5322:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    5326:	f8 01       	movw	r30, r16
    5328:	ee 0f       	add	r30, r30
    532a:	ff 1f       	adc	r31, r31
    532c:	e0 0f       	add	r30, r16
    532e:	f1 1f       	adc	r31, r17
    5330:	ee 0f       	add	r30, r30
    5332:	ff 1f       	adc	r31, r31
    5334:	e2 53       	subi	r30, 0x32	; 50
    5336:	f4 4d       	sbci	r31, 0xD4	; 212
    5338:	84 83       	std	Z+4, r24	; 0x04
    533a:	95 83       	std	Z+5, r25	; 0x05

	printf("Got set_motors command. direction: %hhu, vals: (%d, %d, %d)\r\n", direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    533c:	9f 93       	push	r25
    533e:	8f 93       	push	r24
    5340:	83 81       	ldd	r24, Z+3	; 0x03
    5342:	8f 93       	push	r24
    5344:	82 81       	ldd	r24, Z+2	; 0x02
    5346:	8f 93       	push	r24
    5348:	81 81       	ldd	r24, Z+1	; 0x01
    534a:	8f 93       	push	r24
    534c:	80 81       	ld	r24, Z
    534e:	8f 93       	push	r24
    5350:	1f 93       	push	r17
    5352:	0f 93       	push	r16
    5354:	89 e6       	ldi	r24, 0x69	; 105
    5356:	94 e2       	ldi	r25, 0x24	; 36
    5358:	9f 93       	push	r25
    535a:	8f 93       	push	r24
    535c:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    5360:	cd bf       	out	0x3d, r28	; 61
    5362:	de bf       	out	0x3e, r29	; 62
}
    5364:	0f 90       	pop	r0
    5366:	0f 90       	pop	r0
    5368:	df 91       	pop	r29
    536a:	cf 91       	pop	r28
    536c:	1f 91       	pop	r17
    536e:	0f 91       	pop	r16
    5370:	08 95       	ret

00005372 <handle_set_mm_per_kilostep>:

void handle_set_mm_per_kilostep(char* command_args)
{
    5372:	1f 93       	push	r17
    5374:	cf 93       	push	r28
    5376:	df 93       	push	r29
    5378:	1f 92       	push	r1
    537a:	1f 92       	push	r1
    537c:	cd b7       	in	r28, 0x3d	; 61
    537e:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5380:	20 e2       	ldi	r18, 0x20	; 32
    5382:	30 e0       	ldi	r19, 0x00	; 0
    5384:	29 83       	std	Y+1, r18	; 0x01
    5386:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5388:	be 01       	movw	r22, r28
    538a:	6f 5f       	subi	r22, 0xFF	; 255
    538c:	7f 4f       	sbci	r23, 0xFF	; 255
    538e:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	uint8_t direction = token[0]-'0';
    5392:	fc 01       	movw	r30, r24
    5394:	10 81       	ld	r17, Z
    5396:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    5398:	be 01       	movw	r22, r28
    539a:	6f 5f       	subi	r22, 0xFF	; 255
    539c:	7f 4f       	sbci	r23, 0xFF	; 255
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    53a6:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    53aa:	bc 01       	movw	r22, r24

	set_mm_per_kilostep(direction, mm_per_kilostep);
    53ac:	81 2f       	mov	r24, r17
    53ae:	0e 94 81 14 	call	0x2902	; 0x2902 <set_mm_per_kilostep>
	
}
    53b2:	0f 90       	pop	r0
    53b4:	0f 90       	pop	r0
    53b6:	df 91       	pop	r29
    53b8:	cf 91       	pop	r28
    53ba:	1f 91       	pop	r17
    53bc:	08 95       	ret

000053be <handle_rnb_broadcast>:
/* This tells the droplet that it should tell other droplets nearby their rnb to it.
 * In other words, this tells nearby droplets to listen, and then performs an ir_range_blast.
 */
void handle_rnb_broadcast()
{
	schedule_task(5,broadcast_rnb_data,NULL);
    53be:	20 e0       	ldi	r18, 0x00	; 0
    53c0:	30 e0       	ldi	r19, 0x00	; 0
    53c2:	49 ec       	ldi	r20, 0xC9	; 201
    53c4:	5a e1       	ldi	r21, 0x1A	; 26
    53c6:	65 e0       	ldi	r22, 0x05	; 5
    53c8:	70 e0       	ldi	r23, 0x00	; 0
    53ca:	80 e0       	ldi	r24, 0x00	; 0
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	ca ca       	rjmp	.-2668   	; 0x4964 <schedule_task>
    53d0:	08 95       	ret

000053d2 <handle_rnb_collect>:

/* This tells the droplet that it should ask nearby droplets to do an 
 * ir_range_blast so it can learn their rnb.
 */
void handle_rnb_collect(char* command_args)
{
    53d2:	0f 93       	push	r16
    53d4:	1f 93       	push	r17
    53d6:	cf 93       	push	r28
    53d8:	df 93       	push	r29
    53da:	00 d0       	rcall	.+0      	; 0x53dc <handle_rnb_collect+0xa>
    53dc:	00 d0       	rcall	.+0      	; 0x53de <handle_rnb_collect+0xc>
    53de:	cd b7       	in	r28, 0x3d	; 61
    53e0:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    53e2:	20 e2       	ldi	r18, 0x20	; 32
    53e4:	30 e0       	ldi	r19, 0x00	; 0
    53e6:	29 83       	std	Y+1, r18	; 0x01
    53e8:	3a 83       	std	Y+2, r19	; 0x02
		
	uint16_t id_val = atoi(strtok(command_args, delim));
    53ea:	be 01       	movw	r22, r28
    53ec:	6f 5f       	subi	r22, 0xFF	; 255
    53ee:	7f 4f       	sbci	r23, 0xFF	; 255
    53f0:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
    53f4:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    53f8:	8c 01       	movw	r16, r24
	uint8_t power_val = atoi(strtok(NULL, delim));
    53fa:	be 01       	movw	r22, r28
    53fc:	6f 5f       	subi	r22, 0xFF	; 255
    53fe:	7f 4f       	sbci	r23, 0xFF	; 255
    5400:	80 e0       	ldi	r24, 0x00	; 0
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
    5408:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
	
	uint32_t wrapper_arg = (((uint32_t)id_val)|(((uint32_t)power_val)<<16));
    540c:	a8 01       	movw	r20, r16
    540e:	60 e0       	ldi	r22, 0x00	; 0
    5410:	70 e0       	ldi	r23, 0x00	; 0
    5412:	68 2b       	or	r22, r24
    5414:	4b 83       	std	Y+3, r20	; 0x03
    5416:	5c 83       	std	Y+4, r21	; 0x04
    5418:	6d 83       	std	Y+5, r22	; 0x05
    541a:	7e 83       	std	Y+6, r23	; 0x06
	schedule_task(5,collect_rnb_data_wrapper, (void*)&wrapper_arg);
    541c:	9e 01       	movw	r18, r28
    541e:	2d 5f       	subi	r18, 0xFD	; 253
    5420:	3f 4f       	sbci	r19, 0xFF	; 255
    5422:	44 e1       	ldi	r20, 0x14	; 20
    5424:	58 e2       	ldi	r21, 0x28	; 40
    5426:	65 e0       	ldi	r22, 0x05	; 5
    5428:	70 e0       	ldi	r23, 0x00	; 0
    542a:	80 e0       	ldi	r24, 0x00	; 0
    542c:	90 e0       	ldi	r25, 0x00	; 0
    542e:	9a da       	rcall	.-2764   	; 0x4964 <schedule_task>
}
    5430:	26 96       	adiw	r28, 0x06	; 6
    5432:	cd bf       	out	0x3d, r28	; 61
    5434:	de bf       	out	0x3e, r29	; 62
    5436:	df 91       	pop	r29
    5438:	cf 91       	pop	r28
    543a:	1f 91       	pop	r17
    543c:	0f 91       	pop	r16
    543e:	08 95       	ret

00005440 <handle_rnb_transmit>:

/* This should only be called when another droplet asks this droplet 
 * to do an ir_range_blast (ie., by using handle_rnb_collect).
 */
void handle_rnb_transmit(char* command_args)
{
    5440:	0f 93       	push	r16
    5442:	1f 93       	push	r17
    5444:	cf 93       	push	r28
    5446:	df 93       	push	r29
    5448:	ec 01       	movw	r28, r24
	uint32_t time_since_arrival = (get_time()-cmd_arrival_time+6);
    544a:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    544e:	00 91 fe 2b 	lds	r16, 0x2BFE
    5452:	10 91 ff 2b 	lds	r17, 0x2BFF
    5456:	20 91 00 2c 	lds	r18, 0x2C00
    545a:	30 91 01 2c 	lds	r19, 0x2C01
    545e:	ab 01       	movw	r20, r22
    5460:	bc 01       	movw	r22, r24
    5462:	40 1b       	sub	r20, r16
    5464:	51 0b       	sbc	r21, r17
    5466:	62 0b       	sbc	r22, r18
    5468:	73 0b       	sbc	r23, r19
    546a:	4a 5f       	subi	r20, 0xFA	; 250
    546c:	5f 4f       	sbci	r21, 0xFF	; 255
    546e:	6f 4f       	sbci	r22, 0xFF	; 255
    5470:	7f 4f       	sbci	r23, 0xFF	; 255
	if(time_since_arrival<POST_MESSAGE_DELAY) delay_ms(POST_MESSAGE_DELAY - time_since_arrival);
    5472:	4b 34       	cpi	r20, 0x4B	; 75
    5474:	51 05       	cpc	r21, r1
    5476:	61 05       	cpc	r22, r1
    5478:	71 05       	cpc	r23, r1
    547a:	28 f4       	brcc	.+10     	; 0x5486 <handle_rnb_transmit+0x46>
    547c:	8b e4       	ldi	r24, 0x4B	; 75
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	84 1b       	sub	r24, r20
    5482:	95 0b       	sbc	r25, r21
    5484:	49 da       	rcall	.-2926   	; 0x4918 <delay_ms>
	uint16_t power = (uint16_t)command_args[0] + 2;
    5486:	88 81       	ld	r24, Y
	ir_range_blast(power);
    5488:	8e 5f       	subi	r24, 0xFE	; 254
    548a:	0e 94 8a 1a 	call	0x3514	; 0x3514 <ir_range_blast>
}
    548e:	df 91       	pop	r29
    5490:	cf 91       	pop	r28
    5492:	1f 91       	pop	r17
    5494:	0f 91       	pop	r16
    5496:	08 95       	ret

00005498 <handle_rnb_receive>:

/* This should only be called when another droplet is about to 
 * broadcast its rnb_data (ie., by using handle_rnb_broadcast()).
 */
void handle_rnb_receive()
{
    5498:	0f 93       	push	r16
    549a:	1f 93       	push	r17
	uint32_t time_since_arrival = (get_time()-cmd_arrival_time+5);
    549c:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    54a0:	00 91 fe 2b 	lds	r16, 0x2BFE
    54a4:	10 91 ff 2b 	lds	r17, 0x2BFF
    54a8:	20 91 00 2c 	lds	r18, 0x2C00
    54ac:	30 91 01 2c 	lds	r19, 0x2C01
    54b0:	ab 01       	movw	r20, r22
    54b2:	bc 01       	movw	r22, r24
    54b4:	40 1b       	sub	r20, r16
    54b6:	51 0b       	sbc	r21, r17
    54b8:	62 0b       	sbc	r22, r18
    54ba:	73 0b       	sbc	r23, r19
    54bc:	4b 5f       	subi	r20, 0xFB	; 251
    54be:	5f 4f       	sbci	r21, 0xFF	; 255
    54c0:	6f 4f       	sbci	r22, 0xFF	; 255
    54c2:	7f 4f       	sbci	r23, 0xFF	; 255
	if(time_since_arrival<POST_MESSAGE_DELAY) delay_ms(POST_MESSAGE_DELAY - time_since_arrival);	
    54c4:	4b 34       	cpi	r20, 0x4B	; 75
    54c6:	51 05       	cpc	r21, r1
    54c8:	61 05       	cpc	r22, r1
    54ca:	71 05       	cpc	r23, r1
    54cc:	28 f4       	brcc	.+10     	; 0x54d8 <handle_rnb_receive+0x40>
    54ce:	8b e4       	ldi	r24, 0x4B	; 75
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	84 1b       	sub	r24, r20
    54d4:	95 0b       	sbc	r25, r21
    54d6:	20 da       	rcall	.-3008   	; 0x4918 <delay_ms>
	receive_rnb_data();
    54d8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <receive_rnb_data>
	rnb_updated = 0;
    54dc:	10 92 9c 29 	sts	0x299C, r1
	//last_good_rnb.id_number = (uint16_t)last_command_source_id; TODO: re-add this.
}
    54e0:	1f 91       	pop	r17
    54e2:	0f 91       	pop	r16
    54e4:	08 95       	ret

000054e6 <handle_set_led>:

void handle_set_led(char* command_args)
{
    54e6:	6f 92       	push	r6
    54e8:	7f 92       	push	r7
    54ea:	8f 92       	push	r8
    54ec:	9f 92       	push	r9
    54ee:	af 92       	push	r10
    54f0:	bf 92       	push	r11
    54f2:	cf 92       	push	r12
    54f4:	df 92       	push	r13
    54f6:	ef 92       	push	r14
    54f8:	ff 92       	push	r15
    54fa:	0f 93       	push	r16
    54fc:	1f 93       	push	r17
    54fe:	cf 93       	push	r28
    5500:	df 93       	push	r29
    5502:	1f 92       	push	r1
    5504:	1f 92       	push	r1
    5506:	cd b7       	in	r28, 0x3d	; 61
    5508:	de b7       	in	r29, 0x3e	; 62
    550a:	78 2e       	mov	r7, r24
    550c:	69 2e       	mov	r6, r25
	const char delim[2] = " ";
    550e:	80 e2       	ldi	r24, 0x20	; 32
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	89 83       	std	Y+1, r24	; 0x01
    5514:	9a 83       	std	Y+2, r25	; 0x02
	char* token;

	uint8_t successful_read = 0;
	
	char* colors = strtok(command_args,delim);
    5516:	be 01       	movw	r22, r28
    5518:	6f 5f       	subi	r22, 0xFF	; 255
    551a:	7f 4f       	sbci	r23, 0xFF	; 255
    551c:	87 2d       	mov	r24, r7
    551e:	96 2d       	mov	r25, r6
    5520:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
    5524:	7c 01       	movw	r14, r24
	
	int length = strlen(colors);
    5526:	fc 01       	movw	r30, r24
    5528:	01 90       	ld	r0, Z+
    552a:	00 20       	and	r0, r0
    552c:	e9 f7       	brne	.-6      	; 0x5528 <handle_set_led+0x42>
    552e:	31 97       	sbiw	r30, 0x01	; 1
    5530:	6f 01       	movw	r12, r30
    5532:	c8 1a       	sub	r12, r24
    5534:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0)
    5536:	67 ea       	ldi	r22, 0xA7	; 167
    5538:	74 e2       	ldi	r23, 0x24	; 36
    553a:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    553e:	89 2b       	or	r24, r25
    5540:	21 f0       	breq	.+8      	; 0x554a <handle_set_led+0x64>
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    5542:	1c 14       	cp	r1, r12
    5544:	1d 04       	cpc	r1, r13
    5546:	1c f1       	brlt	.+70     	; 0x558e <handle_set_led+0xa8>
    5548:	5b c0       	rjmp	.+182    	; 0x5600 <handle_set_led+0x11a>

	if(strcmp(colors,"hsv")==0)
	{
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    554a:	be 01       	movw	r22, r28
    554c:	6f 5f       	subi	r22, 0xFF	; 255
    554e:	7f 4f       	sbci	r23, 0xFF	; 255
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	90 e0       	ldi	r25, 0x00	; 0
    5554:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
		hVal = atoi(token);
    5558:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    555c:	8c 01       	movw	r16, r24
		token = strtok(NULL,delim);
    555e:	be 01       	movw	r22, r28
    5560:	6f 5f       	subi	r22, 0xFF	; 255
    5562:	7f 4f       	sbci	r23, 0xFF	; 255
    5564:	80 e0       	ldi	r24, 0x00	; 0
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
		sVal = atoi(token);
    556c:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    5570:	f8 2e       	mov	r15, r24
		token = strtok(NULL,delim);	
    5572:	be 01       	movw	r22, r28
    5574:	6f 5f       	subi	r22, 0xFF	; 255
    5576:	7f 4f       	sbci	r23, 0xFF	; 255
    5578:	80 e0       	ldi	r24, 0x00	; 0
    557a:	90 e0       	ldi	r25, 0x00	; 0
    557c:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
		vVal = atoi(token);
    5580:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
		set_hsv(hVal,sVal,vVal);
    5584:	48 2f       	mov	r20, r24
    5586:	6f 2d       	mov	r22, r15
    5588:	c8 01       	movw	r24, r16
    558a:	52 d8       	rcall	.-3932   	; 0x4630 <set_hsv>
    558c:	51 c0       	rjmp	.+162    	; 0x5630 <handle_set_led+0x14a>
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    558e:	00 e0       	ldi	r16, 0x00	; 0
    5590:	10 e0       	ldi	r17, 0x00	; 0
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    5592:	0f 2e       	mov	r0, r31
    5594:	f0 e4       	ldi	r31, 0x40	; 64
    5596:	af 2e       	mov	r10, r31
    5598:	f9 e0       	ldi	r31, 0x09	; 9
    559a:	bf 2e       	mov	r11, r31
    559c:	f0 2d       	mov	r31, r0
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    559e:	0f 2e       	mov	r0, r31
    55a0:	f0 e4       	ldi	r31, 0x40	; 64
    55a2:	8f 2e       	mov	r8, r31
    55a4:	fa e0       	ldi	r31, 0x0A	; 10
    55a6:	9f 2e       	mov	r9, r31
    55a8:	f0 2d       	mov	r31, r0
		{
			token = strtok(NULL,delim);
    55aa:	be 01       	movw	r22, r28
    55ac:	6f 5f       	subi	r22, 0xFF	; 255
    55ae:	7f 4f       	sbci	r23, 0xFF	; 255
    55b0:	80 e0       	ldi	r24, 0x00	; 0
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <strtok>
			if(colors[i]=='r')
    55b8:	f7 01       	movw	r30, r14
    55ba:	21 91       	ld	r18, Z+
    55bc:	7f 01       	movw	r14, r30
    55be:	22 37       	cpi	r18, 0x72	; 114
    55c0:	39 f4       	brne	.+14     	; 0x55d0 <handle_set_led+0xea>
			{
				set_red_led(atoi(token));
    55c2:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    55c6:	99 27       	eor	r25, r25

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    55c8:	f4 01       	movw	r30, r8
    55ca:	82 af       	std	Z+58, r24	; 0x3a
    55cc:	93 af       	std	Z+59, r25	; 0x3b
    55ce:	12 c0       	rjmp	.+36     	; 0x55f4 <handle_set_led+0x10e>
				successful_read=1;
			}
			else if(colors[i]=='g')
    55d0:	27 36       	cpi	r18, 0x67	; 103
    55d2:	39 f4       	brne	.+14     	; 0x55e2 <handle_set_led+0xfc>
			{
				set_green_led(atoi(token));
    55d4:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    55d8:	99 27       	eor	r25, r25

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    55da:	f4 01       	movw	r30, r8
    55dc:	80 af       	std	Z+56, r24	; 0x38
    55de:	91 af       	std	Z+57, r25	; 0x39
    55e0:	09 c0       	rjmp	.+18     	; 0x55f4 <handle_set_led+0x10e>
				successful_read=1;
			}
			else if(colors[i]=='b')
    55e2:	22 36       	cpi	r18, 0x62	; 98
    55e4:	69 f4       	brne	.+26     	; 0x5600 <handle_set_led+0x11a>
			{
				set_blue_led(atoi(token));
    55e6:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <atoi>
    55ea:	9c 01       	movw	r18, r24
    55ec:	33 27       	eor	r19, r19
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    55ee:	f5 01       	movw	r30, r10
    55f0:	20 af       	std	Z+56, r18	; 0x38
    55f2:	31 af       	std	Z+57, r19	; 0x39
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    55f4:	0f 5f       	subi	r16, 0xFF	; 255
    55f6:	1f 4f       	sbci	r17, 0xFF	; 255
    55f8:	c0 16       	cp	r12, r16
    55fa:	d1 06       	cpc	r13, r17
    55fc:	b1 f6       	brne	.-84     	; 0x55aa <handle_set_led+0xc4>
    55fe:	18 c0       	rjmp	.+48     	; 0x5630 <handle_set_led+0x14a>
		}
	}

	if(successful_read!=1)
	{
		printf("\tGot command set_led, but arguments (%s) were invalid. Format should be:\r\n",command_args);
    5600:	6f 92       	push	r6
    5602:	7f 92       	push	r7
    5604:	8b ea       	ldi	r24, 0xAB	; 171
    5606:	94 e2       	ldi	r25, 0x24	; 36
    5608:	9f 93       	push	r25
    560a:	8f 93       	push	r24
    560c:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
		printf("\t Letters r,g,b, in any order, followed by values 0-255, in same \r\n");
    5610:	86 ef       	ldi	r24, 0xF6	; 246
    5612:	94 e2       	ldi	r25, 0x24	; 36
    5614:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
		printf("\t order, indicating the brightness of the associated LEDs. Example: \r\n");
    5618:	89 e3       	ldi	r24, 0x39	; 57
    561a:	95 e2       	ldi	r25, 0x25	; 37
    561c:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
		printf("\t \"set_led bgr 5 30 0\" gives a bluish green.\r\n");
    5620:	8f e7       	ldi	r24, 0x7F	; 127
    5622:	95 e2       	ldi	r25, 0x25	; 37
    5624:	0e 94 71 38 	call	0x70e2	; 0x70e2 <puts>
    5628:	0f 90       	pop	r0
    562a:	0f 90       	pop	r0
    562c:	0f 90       	pop	r0
    562e:	0f 90       	pop	r0
	}
}
    5630:	0f 90       	pop	r0
    5632:	0f 90       	pop	r0
    5634:	df 91       	pop	r29
    5636:	cf 91       	pop	r28
    5638:	1f 91       	pop	r17
    563a:	0f 91       	pop	r16
    563c:	ff 90       	pop	r15
    563e:	ef 90       	pop	r14
    5640:	df 90       	pop	r13
    5642:	cf 90       	pop	r12
    5644:	bf 90       	pop	r11
    5646:	af 90       	pop	r10
    5648:	9f 90       	pop	r9
    564a:	8f 90       	pop	r8
    564c:	7f 90       	pop	r7
    564e:	6f 90       	pop	r6
    5650:	08 95       	ret

00005652 <handle_broadcast_id>:
void handle_broadcast_id()
{
	schedule_task(5,send_id, NULL);
    5652:	20 e0       	ldi	r18, 0x00	; 0
    5654:	30 e0       	ldi	r19, 0x00	; 0
    5656:	43 e1       	ldi	r20, 0x13	; 19
    5658:	58 e2       	ldi	r21, 0x28	; 40
    565a:	65 e0       	ldi	r22, 0x05	; 5
    565c:	70 e0       	ldi	r23, 0x00	; 0
    565e:	80 e0       	ldi	r24, 0x00	; 0
    5660:	90 e0       	ldi	r25, 0x00	; 0
    5662:	80 c9       	rjmp	.-3328   	; 0x4964 <schedule_task>
    5664:	08 95       	ret

00005666 <handle_get_id>:
}

void handle_get_id()
{
	printf("My ID is: %04X\r\n",get_droplet_id());
    5666:	80 91 87 27 	lds	r24, 0x2787
    566a:	8f 93       	push	r24
    566c:	80 91 86 27 	lds	r24, 0x2786
    5670:	8f 93       	push	r24
    5672:	8d ea       	ldi	r24, 0xAD	; 173
    5674:	95 e2       	ldi	r25, 0x25	; 37
    5676:	9f 93       	push	r25
    5678:	8f 93       	push	r24
    567a:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	0f 90       	pop	r0
    5686:	08 95       	ret

00005688 <handle_cmd>:
		//set_rgb(0,0,0);
	//}
}

void handle_cmd(char* command_args)
{
    5688:	cf 93       	push	r28
    568a:	df 93       	push	r29
    568c:	d8 2f       	mov	r29, r24
    568e:	c9 2f       	mov	r28, r25
	printf("Broadcasting command: \"%s\", of length %i.\r\n",(uint8_t*)command_args, strlen(command_args));
    5690:	e8 2f       	mov	r30, r24
    5692:	f9 2f       	mov	r31, r25
    5694:	df 01       	movw	r26, r30
    5696:	0d 90       	ld	r0, X+
    5698:	00 20       	and	r0, r0
    569a:	e9 f7       	brne	.-6      	; 0x5696 <handle_cmd+0xe>
    569c:	11 97       	sbiw	r26, 0x01	; 1
    569e:	ae 1b       	sub	r26, r30
    56a0:	bf 0b       	sbc	r27, r31
    56a2:	bf 93       	push	r27
    56a4:	af 93       	push	r26
    56a6:	9f 93       	push	r25
    56a8:	8f 93       	push	r24
    56aa:	2e eb       	ldi	r18, 0xBE	; 190
    56ac:	35 e2       	ldi	r19, 0x25	; 37
    56ae:	3f 93       	push	r19
    56b0:	2f 93       	push	r18
    56b2:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
	ir_cmd(ALL_DIRS, command_args,strlen(command_args));
    56b6:	ed 2f       	mov	r30, r29
    56b8:	fc 2f       	mov	r31, r28
    56ba:	df 01       	movw	r26, r30
    56bc:	0d 90       	ld	r0, X+
    56be:	00 20       	and	r0, r0
    56c0:	e9 f7       	brne	.-6      	; 0x56bc <handle_cmd+0x34>
    56c2:	11 97       	sbiw	r26, 0x01	; 1
    56c4:	ad 01       	movw	r20, r26
    56c6:	4e 1b       	sub	r20, r30
    56c8:	5f 0b       	sbc	r21, r31
    56ca:	6d 2f       	mov	r22, r29
    56cc:	7c 2f       	mov	r23, r28
    56ce:	8f e3       	ldi	r24, 0x3F	; 63
    56d0:	0e 94 a2 0b 	call	0x1744	; 0x1744 <ir_cmd>
    56d4:	0f 90       	pop	r0
    56d6:	0f 90       	pop	r0
    56d8:	0f 90       	pop	r0
    56da:	0f 90       	pop	r0
    56dc:	0f 90       	pop	r0
    56de:	0f 90       	pop	r0
	//
	//else
	//{
		//printf("\tIt wasn't OK to send command\r\n");
	//}
}
    56e0:	df 91       	pop	r29
    56e2:	cf 91       	pop	r28
    56e4:	08 95       	ret

000056e6 <handle_targeted_cmd>:

void handle_targeted_cmd(char* command_args)
{
    56e6:	cf 92       	push	r12
    56e8:	df 92       	push	r13
    56ea:	ef 92       	push	r14
    56ec:	ff 92       	push	r15
    56ee:	0f 93       	push	r16
    56f0:	1f 93       	push	r17
    56f2:	cf 93       	push	r28
    56f4:	df 93       	push	r29
    56f6:	cd b7       	in	r28, 0x3d	; 61
    56f8:	de b7       	in	r29, 0x3e	; 62
    56fa:	a5 97       	sbiw	r28, 0x25	; 37
    56fc:	cd bf       	out	0x3d, r28	; 61
    56fe:	de bf       	out	0x3e, r29	; 62
    5700:	8c 01       	movw	r16, r24
	uint8_t loc = strcspn(command_args, " ");
    5702:	66 ee       	ldi	r22, 0xE6	; 230
    5704:	72 e2       	ldi	r23, 0x22	; 34
    5706:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <strcspn>
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    570a:	7c 01       	movw	r14, r24
    570c:	ff 24       	eor	r15, r15
    570e:	a7 01       	movw	r20, r14
    5710:	b8 01       	movw	r22, r16
    5712:	ce 01       	movw	r24, r28
    5714:	01 96       	adiw	r24, 0x01	; 1
    5716:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <strncpy>
	strcpy(cmdString, command_args+loc+1);
    571a:	8f ef       	ldi	r24, 0xFF	; 255
    571c:	e8 1a       	sub	r14, r24
    571e:	f8 0a       	sbc	r15, r24
    5720:	b8 01       	movw	r22, r16
    5722:	6e 0d       	add	r22, r14
    5724:	7f 1d       	adc	r23, r15
    5726:	8e 01       	movw	r16, r28
    5728:	0a 5f       	subi	r16, 0xFA	; 250
    572a:	1f 4f       	sbci	r17, 0xFF	; 255
    572c:	c8 01       	movw	r24, r16
    572e:	0e 94 ca 37 	call	0x6f94	; 0x6f94 <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    5732:	40 e1       	ldi	r20, 0x10	; 16
    5734:	50 e0       	ldi	r21, 0x00	; 0
    5736:	60 e0       	ldi	r22, 0x00	; 0
    5738:	70 e0       	ldi	r23, 0x00	; 0
    573a:	ce 01       	movw	r24, r28
    573c:	01 96       	adiw	r24, 0x01	; 1
    573e:	0e 94 9c 35 	call	0x6b38	; 0x6b38 <strtoul>
    5742:	6b 01       	movw	r12, r22
    5744:	7c 01       	movw	r14, r24
	printf("command string: %s, length: %d\r\n",cmdString, strlen(cmdString));
    5746:	f8 01       	movw	r30, r16
    5748:	01 90       	ld	r0, Z+
    574a:	00 20       	and	r0, r0
    574c:	e9 f7       	brne	.-6      	; 0x5748 <handle_targeted_cmd+0x62>
    574e:	31 97       	sbiw	r30, 0x01	; 1
    5750:	e0 1b       	sub	r30, r16
    5752:	f1 0b       	sbc	r31, r17
    5754:	ff 93       	push	r31
    5756:	ef 93       	push	r30
    5758:	1f 93       	push	r17
    575a:	0f 93       	push	r16
    575c:	8a ee       	ldi	r24, 0xEA	; 234
    575e:	95 e2       	ldi	r25, 0x25	; 37
    5760:	9f 93       	push	r25
    5762:	8f 93       	push	r24
    5764:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    5768:	f8 01       	movw	r30, r16
    576a:	01 90       	ld	r0, Z+
    576c:	00 20       	and	r0, r0
    576e:	e9 f7       	brne	.-6      	; 0x576a <handle_targeted_cmd+0x84>
    5770:	31 97       	sbiw	r30, 0x01	; 1
    5772:	af 01       	movw	r20, r30
    5774:	40 1b       	sub	r20, r16
    5776:	51 0b       	sbc	r21, r17
    5778:	96 01       	movw	r18, r12
    577a:	b8 01       	movw	r22, r16
    577c:	8f e3       	ldi	r24, 0x3F	; 63
    577e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <ir_targeted_cmd>
    5782:	0f 90       	pop	r0
    5784:	0f 90       	pop	r0
    5786:	0f 90       	pop	r0
    5788:	0f 90       	pop	r0
    578a:	0f 90       	pop	r0
    578c:	0f 90       	pop	r0
}
    578e:	a5 96       	adiw	r28, 0x25	; 37
    5790:	cd bf       	out	0x3d, r28	; 61
    5792:	de bf       	out	0x3e, r29	; 62
    5794:	df 91       	pop	r29
    5796:	cf 91       	pop	r28
    5798:	1f 91       	pop	r17
    579a:	0f 91       	pop	r16
    579c:	ff 90       	pop	r15
    579e:	ef 90       	pop	r14
    57a0:	df 90       	pop	r13
    57a2:	cf 90       	pop	r12
    57a4:	08 95       	ret

000057a6 <handle_shout>:

void handle_shout(char* command_args)
{
    57a6:	fc 01       	movw	r30, r24
	if(strlen(command_args)==0) command_args = "The quick brown fox jumped over the lazy dog. Unique New York.";
    57a8:	80 81       	ld	r24, Z
    57aa:	88 23       	and	r24, r24
    57ac:	e1 f0       	breq	.+56     	; 0x57e6 <handle_shout+0x40>
	else if(strlen(command_args)>IR_BUFFER_SIZE)
    57ae:	df 01       	movw	r26, r30
    57b0:	0d 90       	ld	r0, X+
    57b2:	00 20       	and	r0, r0
    57b4:	e9 f7       	brne	.-6      	; 0x57b0 <handle_shout+0xa>
    57b6:	11 97       	sbiw	r26, 0x01	; 1
    57b8:	ae 1b       	sub	r26, r30
    57ba:	bf 0b       	sbc	r27, r31
    57bc:	a0 34       	cpi	r26, 0x40	; 64
    57be:	b1 05       	cpc	r27, r1
    57c0:	a0 f0       	brcs	.+40     	; 0x57ea <handle_shout+0x44>
	{ 
		printf("Message length was %d chars, which exceeds the maximum of %d", strlen(command_args), IR_BUFFER_SIZE);
    57c2:	1f 92       	push	r1
    57c4:	8f e3       	ldi	r24, 0x3F	; 63
    57c6:	8f 93       	push	r24
    57c8:	bf 93       	push	r27
    57ca:	af 93       	push	r26
    57cc:	8a e4       	ldi	r24, 0x4A	; 74
    57ce:	96 e2       	ldi	r25, 0x26	; 38
    57d0:	9f 93       	push	r25
    57d2:	8f 93       	push	r24
    57d4:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
		return;
    57d8:	0f 90       	pop	r0
    57da:	0f 90       	pop	r0
    57dc:	0f 90       	pop	r0
    57de:	0f 90       	pop	r0
    57e0:	0f 90       	pop	r0
    57e2:	0f 90       	pop	r0
    57e4:	08 95       	ret
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
}

void handle_shout(char* command_args)
{
	if(strlen(command_args)==0) command_args = "The quick brown fox jumped over the lazy dog. Unique New York.";
    57e6:	eb e0       	ldi	r30, 0x0B	; 11
    57e8:	f6 e2       	ldi	r31, 0x26	; 38
	{ 
		printf("Message length was %d chars, which exceeds the maximum of %d", strlen(command_args), IR_BUFFER_SIZE);
		return;
	}

	ir_send(ALL_DIRS, command_args, strlen(command_args));
    57ea:	df 01       	movw	r26, r30
    57ec:	0d 90       	ld	r0, X+
    57ee:	00 20       	and	r0, r0
    57f0:	e9 f7       	brne	.-6      	; 0x57ec <handle_shout+0x46>
    57f2:	11 97       	sbiw	r26, 0x01	; 1
    57f4:	ad 01       	movw	r20, r26
    57f6:	4e 1b       	sub	r20, r30
    57f8:	5f 0b       	sbc	r21, r31
    57fa:	bf 01       	movw	r22, r30
    57fc:	8f e3       	ldi	r24, 0x3F	; 63
    57fe:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <ir_send>
    5802:	08 95       	ret

00005804 <handle_target>:
}

void handle_target(char* command_args)
{
    5804:	ef 92       	push	r14
    5806:	ff 92       	push	r15
    5808:	0f 93       	push	r16
    580a:	1f 93       	push	r17
    580c:	cf 93       	push	r28
    580e:	df 93       	push	r29
    5810:	cd b7       	in	r28, 0x3d	; 61
    5812:	de b7       	in	r29, 0x3e	; 62
    5814:	a5 97       	sbiw	r28, 0x25	; 37
    5816:	cd bf       	out	0x3d, r28	; 61
    5818:	de bf       	out	0x3e, r29	; 62
    581a:	8c 01       	movw	r16, r24
	uint8_t loc = strcspn(command_args, " ");
    581c:	66 ee       	ldi	r22, 0xE6	; 230
    581e:	72 e2       	ldi	r23, 0x22	; 34
    5820:	0e 94 d1 37 	call	0x6fa2	; 0x6fa2 <strcspn>
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    5824:	7c 01       	movw	r14, r24
    5826:	ff 24       	eor	r15, r15
    5828:	a7 01       	movw	r20, r14
    582a:	b8 01       	movw	r22, r16
    582c:	ce 01       	movw	r24, r28
    582e:	01 96       	adiw	r24, 0x01	; 1
    5830:	0e 94 e0 37 	call	0x6fc0	; 0x6fc0 <strncpy>
	strcpy(msgString, command_args+loc);
    5834:	b8 01       	movw	r22, r16
    5836:	6e 0d       	add	r22, r14
    5838:	7f 1d       	adc	r23, r15
    583a:	8e 01       	movw	r16, r28
    583c:	0a 5f       	subi	r16, 0xFA	; 250
    583e:	1f 4f       	sbci	r17, 0xFF	; 255
    5840:	c8 01       	movw	r24, r16
    5842:	0e 94 ca 37 	call	0x6f94	; 0x6f94 <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    5846:	40 e1       	ldi	r20, 0x10	; 16
    5848:	50 e0       	ldi	r21, 0x00	; 0
    584a:	60 e0       	ldi	r22, 0x00	; 0
    584c:	70 e0       	ldi	r23, 0x00	; 0
    584e:	ce 01       	movw	r24, r28
    5850:	01 96       	adiw	r24, 0x01	; 1
    5852:	0e 94 9c 35 	call	0x6b38	; 0x6b38 <strtoul>
	
	//printf("Target: %04X\r\n",target);	
	ir_targeted_send(ALL_DIRS, msgString,strlen(msgString), target);
    5856:	f8 01       	movw	r30, r16
    5858:	01 90       	ld	r0, Z+
    585a:	00 20       	and	r0, r0
    585c:	e9 f7       	brne	.-6      	; 0x5858 <handle_target+0x54>
    585e:	31 97       	sbiw	r30, 0x01	; 1
    5860:	af 01       	movw	r20, r30
    5862:	40 1b       	sub	r20, r16
    5864:	51 0b       	sbc	r21, r17
    5866:	9b 01       	movw	r18, r22
    5868:	b8 01       	movw	r22, r16
    586a:	8f e3       	ldi	r24, 0x3F	; 63
    586c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <ir_targeted_send>
} 
    5870:	a5 96       	adiw	r28, 0x25	; 37
    5872:	cd bf       	out	0x3d, r28	; 61
    5874:	de bf       	out	0x3e, r29	; 62
    5876:	df 91       	pop	r29
    5878:	cf 91       	pop	r28
    587a:	1f 91       	pop	r17
    587c:	0f 91       	pop	r16
    587e:	ff 90       	pop	r15
    5880:	ef 90       	pop	r14
    5882:	08 95       	ret

00005884 <get_command_word_and_args>:


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
    5884:	0f 93       	push	r16
    5886:	1f 93       	push	r17
    5888:	cf 93       	push	r28
    588a:	df 93       	push	r29
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    588c:	61 15       	cp	r22, r1
    588e:	71 05       	cpc	r23, r1
    5890:	79 f1       	breq	.+94     	; 0x58f0 <get_command_word_and_args+0x6c>
	{
		if(command[i]=='\0')
    5892:	fc 01       	movw	r30, r24
    5894:	10 81       	ld	r17, Z
    5896:	11 23       	and	r17, r17
    5898:	71 f1       	breq	.+92     	; 0x58f6 <get_command_word_and_args+0x72>
    589a:	dc 01       	movw	r26, r24
    589c:	11 96       	adiw	r26, 0x01	; 1
    589e:	68 0f       	add	r22, r24
    58a0:	79 1f       	adc	r23, r25


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
    58a2:	01 e0       	ldi	r16, 0x01	; 1
} 


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
    58a4:	e0 e0       	ldi	r30, 0x00	; 0
    58a6:	f0 e0       	ldi	r31, 0x00	; 0
    58a8:	03 c0       	rjmp	.+6      	; 0x58b0 <get_command_word_and_args+0x2c>
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
	{
		if(command[i]=='\0')
    58aa:	1d 91       	ld	r17, X+
    58ac:	11 23       	and	r17, r17
    58ae:	e1 f0       	breq	.+56     	; 0x58e8 <get_command_word_and_args+0x64>
		{
			break;
		}
		else if(command[i]==' ' && writing_word_boole == 1)
    58b0:	10 32       	cpi	r17, 0x20	; 32
    58b2:	49 f4       	brne	.+18     	; 0x58c6 <get_command_word_and_args+0x42>
    58b4:	01 30       	cpi	r16, 0x01	; 1
    58b6:	71 f4       	brne	.+28     	; 0x58d4 <get_command_word_and_args+0x50>
		{
			command_word[write_index]='\0';
    58b8:	e4 0f       	add	r30, r20
    58ba:	f5 1f       	adc	r31, r21
    58bc:	10 82       	st	Z, r1
			write_index = 0;
			writing_word_boole = 0;
    58be:	00 e0       	ldi	r16, 0x00	; 0
			break;
		}
		else if(command[i]==' ' && writing_word_boole == 1)
		{
			command_word[write_index]='\0';
			write_index = 0;
    58c0:	e0 e0       	ldi	r30, 0x00	; 0
    58c2:	f0 e0       	ldi	r31, 0x00	; 0
			writing_word_boole = 0;
    58c4:	0c c0       	rjmp	.+24     	; 0x58de <get_command_word_and_args+0x5a>
		}
		else
		{
			if(writing_word_boole==1)
    58c6:	01 30       	cpi	r16, 0x01	; 1
    58c8:	29 f4       	brne	.+10     	; 0x58d4 <get_command_word_and_args+0x50>
			{
				command_word[write_index] = command[i];
    58ca:	ea 01       	movw	r28, r20
    58cc:	ce 0f       	add	r28, r30
    58ce:	df 1f       	adc	r29, r31
    58d0:	18 83       	st	Y, r17
    58d2:	04 c0       	rjmp	.+8      	; 0x58dc <get_command_word_and_args+0x58>
			}
			else
			{
				command_args[write_index] = command[i];
    58d4:	e9 01       	movw	r28, r18
    58d6:	ce 0f       	add	r28, r30
    58d8:	df 1f       	adc	r29, r31
    58da:	18 83       	st	Y, r17
			}
			write_index++;
    58dc:	31 96       	adiw	r30, 0x01	; 1

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    58de:	a6 17       	cp	r26, r22
    58e0:	b7 07       	cpc	r27, r23
    58e2:	19 f7       	brne	.-58     	; 0x58aa <get_command_word_and_args+0x26>
    58e4:	cf 01       	movw	r24, r30
    58e6:	01 c0       	rjmp	.+2      	; 0x58ea <get_command_word_and_args+0x66>
    58e8:	cf 01       	movw	r24, r30
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1)
    58ea:	01 30       	cpi	r16, 0x01	; 1
    58ec:	61 f4       	brne	.+24     	; 0x5906 <get_command_word_and_args+0x82>
    58ee:	05 c0       	rjmp	.+10     	; 0x58fa <get_command_word_and_args+0x76>

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    58f0:	e0 e0       	ldi	r30, 0x00	; 0
    58f2:	f0 e0       	ldi	r31, 0x00	; 0
    58f4:	02 c0       	rjmp	.+4      	; 0x58fa <get_command_word_and_args+0x76>
	{
		if(command[i]=='\0')
    58f6:	e0 e0       	ldi	r30, 0x00	; 0
    58f8:	f0 e0       	ldi	r31, 0x00	; 0
			write_index++;
		}
	}
	if(writing_word_boole==1)
	{
		command_word[write_index] = '\0';
    58fa:	e4 0f       	add	r30, r20
    58fc:	f5 1f       	adc	r31, r21
    58fe:	10 82       	st	Z, r1
		command_args[0] = '\0';
    5900:	f9 01       	movw	r30, r18
    5902:	10 82       	st	Z, r1
    5904:	04 c0       	rjmp	.+8      	; 0x590e <get_command_word_and_args+0x8a>
	}
	else
	{
		command_args[write_index] = '\0';
    5906:	f9 01       	movw	r30, r18
    5908:	e8 0f       	add	r30, r24
    590a:	f9 1f       	adc	r31, r25
    590c:	10 82       	st	Z, r1
	}
}
    590e:	df 91       	pop	r29
    5910:	cf 91       	pop	r28
    5912:	1f 91       	pop	r17
    5914:	0f 91       	pop	r16
    5916:	08 95       	ret

00005918 <handle_serial_command>:
#include "serial_handler.h"

void handle_serial_command(char* command, uint16_t command_length)
{
    5918:	cf 93       	push	r28
    591a:	df 93       	push	r29
    591c:	cd b7       	in	r28, 0x3d	; 61
    591e:	de b7       	in	r29, 0x3e	; 62
    5920:	c0 58       	subi	r28, 0x80	; 128
    5922:	d1 09       	sbc	r29, r1
    5924:	cd bf       	out	0x3d, r28	; 61
    5926:	de bf       	out	0x3e, r29	; 62
	//last_serial_command_time = command_time;
	//printf("Got command \"%s\".\r\n",command);
	//printf("command_time: %lu | last_command_time: %lu\r\n", command_time, last_serial_command_time);
	if(command[0]!='\0') //Not much to handle if we get an empty string.
    5928:	fc 01       	movw	r30, r24
    592a:	20 81       	ld	r18, Z
    592c:	22 23       	and	r18, r18
    592e:	09 f4       	brne	.+2      	; 0x5932 <handle_serial_command+0x1a>
    5930:	30 c1       	rjmp	.+608    	; 0x5b92 <handle_serial_command+0x27a>
	{
		char command_word[BUFFER_SIZE];
		char command_args[BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
    5932:	9e 01       	movw	r18, r28
    5934:	2f 5f       	subi	r18, 0xFF	; 255
    5936:	3f 4f       	sbci	r19, 0xFF	; 255
    5938:	ae 01       	movw	r20, r28
    593a:	4f 5b       	subi	r20, 0xBF	; 191
    593c:	5f 4f       	sbci	r21, 0xFF	; 255
    593e:	a2 df       	rcall	.-188    	; 0x5884 <get_command_word_and_args>
		if(strcmp(command_word,"move_steps")==0)
    5940:	67 e8       	ldi	r22, 0x87	; 135
    5942:	76 e2       	ldi	r23, 0x26	; 38
    5944:	ce 01       	movw	r24, r28
    5946:	8f 5b       	subi	r24, 0xBF	; 191
    5948:	9f 4f       	sbci	r25, 0xFF	; 255
    594a:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    594e:	89 2b       	or	r24, r25
    5950:	21 f4       	brne	.+8      	; 0x595a <handle_serial_command+0x42>
		{
			handle_move_steps(command_args);
    5952:	ce 01       	movw	r24, r28
    5954:	01 96       	adiw	r24, 0x01	; 1
    5956:	b3 db       	rcall	.-2202   	; 0x50be <handle_move_steps>
    5958:	1c c1       	rjmp	.+568    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"walk")==0)
    595a:	6b ea       	ldi	r22, 0xAB	; 171
    595c:	76 e2       	ldi	r23, 0x26	; 38
    595e:	ce 01       	movw	r24, r28
    5960:	8f 5b       	subi	r24, 0xBF	; 191
    5962:	9f 4f       	sbci	r25, 0xFF	; 255
    5964:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5968:	89 2b       	or	r24, r25
    596a:	21 f4       	brne	.+8      	; 0x5974 <handle_serial_command+0x5c>
		{
			handle_walk(command_args);
    596c:	ce 01       	movw	r24, r28
    596e:	01 96       	adiw	r24, 0x01	; 1
    5970:	ec db       	rcall	.-2088   	; 0x514a <handle_walk>
    5972:	0f c1       	rjmp	.+542    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word, "get_rgb")==0)
    5974:	62 e9       	ldi	r22, 0x92	; 146
    5976:	76 e2       	ldi	r23, 0x26	; 38
    5978:	ce 01       	movw	r24, r28
    597a:	8f 5b       	subi	r24, 0xBF	; 191
    597c:	9f 4f       	sbci	r25, 0xFF	; 255
    597e:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5982:	89 2b       	or	r24, r25
    5984:	11 f4       	brne	.+4      	; 0x598a <handle_serial_command+0x72>
		{
			handle_get_rgb();
    5986:	07 dc       	rcall	.-2034   	; 0x5196 <handle_get_rgb>
    5988:	04 c1       	rjmp	.+520    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"set_ir")==0)
    598a:	6a e9       	ldi	r22, 0x9A	; 154
    598c:	76 e2       	ldi	r23, 0x26	; 38
    598e:	ce 01       	movw	r24, r28
    5990:	8f 5b       	subi	r24, 0xBF	; 191
    5992:	9f 4f       	sbci	r25, 0xFF	; 255
    5994:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5998:	89 2b       	or	r24, r25
    599a:	21 f4       	brne	.+8      	; 0x59a4 <handle_serial_command+0x8c>
		{
			handle_set_ir(command_args);
    599c:	ce 01       	movw	r24, r28
    599e:	01 96       	adiw	r24, 0x01	; 1
    59a0:	2b dc       	rcall	.-1962   	; 0x51f8 <handle_set_ir>
    59a2:	f7 c0       	rjmp	.+494    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"coll")==0)
    59a4:	61 ea       	ldi	r22, 0xA1	; 161
    59a6:	76 e2       	ldi	r23, 0x26	; 38
    59a8:	ce 01       	movw	r24, r28
    59aa:	8f 5b       	subi	r24, 0xBF	; 191
    59ac:	9f 4f       	sbci	r25, 0xFF	; 255
    59ae:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    59b2:	89 2b       	or	r24, r25
    59b4:	11 f4       	brne	.+4      	; 0x59ba <handle_serial_command+0xa2>
		{
			handle_check_collisions();
    59b6:	43 db       	rcall	.-2426   	; 0x503e <handle_check_collisions>
    59b8:	ec c0       	rjmp	.+472    	; 0x5b92 <handle_serial_command+0x27a>
		}		
		else if(strcmp(command_word,"stop_walk")==0)
    59ba:	66 ea       	ldi	r22, 0xA6	; 166
    59bc:	76 e2       	ldi	r23, 0x26	; 38
    59be:	ce 01       	movw	r24, r28
    59c0:	8f 5b       	subi	r24, 0xBF	; 191
    59c2:	9f 4f       	sbci	r25, 0xFF	; 255
    59c4:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    59c8:	89 2b       	or	r24, r25
    59ca:	11 f4       	brne	.+4      	; 0x59d0 <handle_serial_command+0xb8>
		{
			handle_stop_walk();
    59cc:	2d dc       	rcall	.-1958   	; 0x5228 <handle_stop_walk>
    59ce:	e1 c0       	rjmp	.+450    	; 0x5b92 <handle_serial_command+0x27a>
		//}
		//else if(strcmp(command_word,"set_theta")==0)
		//{
			//handle_set_theta(command_args);
		//}
		else if(strcmp(command_word,"set_motors")==0)
    59d0:	60 eb       	ldi	r22, 0xB0	; 176
    59d2:	76 e2       	ldi	r23, 0x26	; 38
    59d4:	ce 01       	movw	r24, r28
    59d6:	8f 5b       	subi	r24, 0xBF	; 191
    59d8:	9f 4f       	sbci	r25, 0xFF	; 255
    59da:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    59de:	89 2b       	or	r24, r25
    59e0:	21 f4       	brne	.+8      	; 0x59ea <handle_serial_command+0xd2>
		{
			handle_set_motors(command_args);
    59e2:	ce 01       	movw	r24, r28
    59e4:	01 96       	adiw	r24, 0x01	; 1
    59e6:	2d dc       	rcall	.-1958   	; 0x5242 <handle_set_motors>
    59e8:	d4 c0       	rjmp	.+424    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"set_dist_per_step")==0)
    59ea:	6b eb       	ldi	r22, 0xBB	; 187
    59ec:	76 e2       	ldi	r23, 0x26	; 38
    59ee:	ce 01       	movw	r24, r28
    59f0:	8f 5b       	subi	r24, 0xBF	; 191
    59f2:	9f 4f       	sbci	r25, 0xFF	; 255
    59f4:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    59f8:	89 2b       	or	r24, r25
    59fa:	21 f4       	brne	.+8      	; 0x5a04 <handle_serial_command+0xec>
		{
			handle_set_mm_per_kilostep(command_args);
    59fc:	ce 01       	movw	r24, r28
    59fe:	01 96       	adiw	r24, 0x01	; 1
    5a00:	b8 dc       	rcall	.-1680   	; 0x5372 <handle_set_mm_per_kilostep>
    5a02:	c7 c0       	rjmp	.+398    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"rnb_b")==0)
    5a04:	6d ec       	ldi	r22, 0xCD	; 205
    5a06:	76 e2       	ldi	r23, 0x26	; 38
    5a08:	ce 01       	movw	r24, r28
    5a0a:	8f 5b       	subi	r24, 0xBF	; 191
    5a0c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a0e:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5a12:	89 2b       	or	r24, r25
    5a14:	11 f4       	brne	.+4      	; 0x5a1a <handle_serial_command+0x102>
		{
			handle_rnb_broadcast();
    5a16:	d3 dc       	rcall	.-1626   	; 0x53be <handle_rnb_broadcast>
    5a18:	bc c0       	rjmp	.+376    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"rnb_c")==0)
    5a1a:	63 ed       	ldi	r22, 0xD3	; 211
    5a1c:	76 e2       	ldi	r23, 0x26	; 38
    5a1e:	ce 01       	movw	r24, r28
    5a20:	8f 5b       	subi	r24, 0xBF	; 191
    5a22:	9f 4f       	sbci	r25, 0xFF	; 255
    5a24:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5a28:	89 2b       	or	r24, r25
    5a2a:	21 f4       	brne	.+8      	; 0x5a34 <handle_serial_command+0x11c>
		{
			handle_rnb_collect(command_args);
    5a2c:	ce 01       	movw	r24, r28
    5a2e:	01 96       	adiw	r24, 0x01	; 1
    5a30:	d0 dc       	rcall	.-1632   	; 0x53d2 <handle_rnb_collect>
    5a32:	af c0       	rjmp	.+350    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word, "rnb_t")==0)
    5a34:	69 ed       	ldi	r22, 0xD9	; 217
    5a36:	76 e2       	ldi	r23, 0x26	; 38
    5a38:	ce 01       	movw	r24, r28
    5a3a:	8f 5b       	subi	r24, 0xBF	; 191
    5a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a3e:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5a42:	89 2b       	or	r24, r25
    5a44:	21 f4       	brne	.+8      	; 0x5a4e <handle_serial_command+0x136>
		{
			handle_rnb_transmit(command_args);
    5a46:	ce 01       	movw	r24, r28
    5a48:	01 96       	adiw	r24, 0x01	; 1
    5a4a:	fa dc       	rcall	.-1548   	; 0x5440 <handle_rnb_transmit>
    5a4c:	a2 c0       	rjmp	.+324    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"rnb_r")==0)
    5a4e:	68 ea       	ldi	r22, 0xA8	; 168
    5a50:	72 e2       	ldi	r23, 0x22	; 34
    5a52:	ce 01       	movw	r24, r28
    5a54:	8f 5b       	subi	r24, 0xBF	; 191
    5a56:	9f 4f       	sbci	r25, 0xFF	; 255
    5a58:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5a5c:	89 2b       	or	r24, r25
    5a5e:	11 f4       	brne	.+4      	; 0x5a64 <handle_serial_command+0x14c>
		{
			handle_rnb_receive();
    5a60:	1b dd       	rcall	.-1482   	; 0x5498 <handle_rnb_receive>
    5a62:	97 c0       	rjmp	.+302    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"set_led")==0)
    5a64:	6f ed       	ldi	r22, 0xDF	; 223
    5a66:	76 e2       	ldi	r23, 0x26	; 38
    5a68:	ce 01       	movw	r24, r28
    5a6a:	8f 5b       	subi	r24, 0xBF	; 191
    5a6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a6e:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5a72:	89 2b       	or	r24, r25
    5a74:	21 f4       	brne	.+8      	; 0x5a7e <handle_serial_command+0x166>
		{
			handle_set_led(command_args);
    5a76:	ce 01       	movw	r24, r28
    5a78:	01 96       	adiw	r24, 0x01	; 1
    5a7a:	35 dd       	rcall	.-1430   	; 0x54e6 <handle_set_led>
    5a7c:	8a c0       	rjmp	.+276    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"get_id")==0)
    5a7e:	67 ee       	ldi	r22, 0xE7	; 231
    5a80:	76 e2       	ldi	r23, 0x26	; 38
    5a82:	ce 01       	movw	r24, r28
    5a84:	8f 5b       	subi	r24, 0xBF	; 191
    5a86:	9f 4f       	sbci	r25, 0xFF	; 255
    5a88:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5a8c:	89 2b       	or	r24, r25
    5a8e:	11 f4       	brne	.+4      	; 0x5a94 <handle_serial_command+0x17c>
		{
			handle_get_id();
    5a90:	ea dd       	rcall	.-1068   	; 0x5666 <handle_get_id>
    5a92:	7f c0       	rjmp	.+254    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"broadcast_id")==0)
    5a94:	6e ee       	ldi	r22, 0xEE	; 238
    5a96:	76 e2       	ldi	r23, 0x26	; 38
    5a98:	ce 01       	movw	r24, r28
    5a9a:	8f 5b       	subi	r24, 0xBF	; 191
    5a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5a9e:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5aa2:	89 2b       	or	r24, r25
    5aa4:	11 f4       	brne	.+4      	; 0x5aaa <handle_serial_command+0x192>
		{
			handle_broadcast_id();
    5aa6:	d5 dd       	rcall	.-1110   	; 0x5652 <handle_broadcast_id>
    5aa8:	74 c0       	rjmp	.+232    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"cmd")==0)
    5aaa:	6f ef       	ldi	r22, 0xFF	; 255
    5aac:	76 e2       	ldi	r23, 0x26	; 38
    5aae:	ce 01       	movw	r24, r28
    5ab0:	8f 5b       	subi	r24, 0xBF	; 191
    5ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ab4:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5ab8:	89 2b       	or	r24, r25
    5aba:	21 f4       	brne	.+8      	; 0x5ac4 <handle_serial_command+0x1ac>
		{
			handle_cmd(command_args);
    5abc:	ce 01       	movw	r24, r28
    5abe:	01 96       	adiw	r24, 0x01	; 1
    5ac0:	e3 dd       	rcall	.-1082   	; 0x5688 <handle_cmd>
    5ac2:	67 c0       	rjmp	.+206    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"tgt_cmd")==0)
    5ac4:	6b ef       	ldi	r22, 0xFB	; 251
    5ac6:	76 e2       	ldi	r23, 0x26	; 38
    5ac8:	ce 01       	movw	r24, r28
    5aca:	8f 5b       	subi	r24, 0xBF	; 191
    5acc:	9f 4f       	sbci	r25, 0xFF	; 255
    5ace:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5ad2:	89 2b       	or	r24, r25
    5ad4:	21 f4       	brne	.+8      	; 0x5ade <handle_serial_command+0x1c6>
		{
			handle_targeted_cmd(command_args);
    5ad6:	ce 01       	movw	r24, r28
    5ad8:	01 96       	adiw	r24, 0x01	; 1
    5ada:	05 de       	rcall	.-1014   	; 0x56e6 <handle_targeted_cmd>
    5adc:	5a c0       	rjmp	.+180    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"msg")==0)
    5ade:	63 e0       	ldi	r22, 0x03	; 3
    5ae0:	77 e2       	ldi	r23, 0x27	; 39
    5ae2:	ce 01       	movw	r24, r28
    5ae4:	8f 5b       	subi	r24, 0xBF	; 191
    5ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae8:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5aec:	89 2b       	or	r24, r25
    5aee:	21 f4       	brne	.+8      	; 0x5af8 <handle_serial_command+0x1e0>
		{
			handle_shout(command_args);
    5af0:	ce 01       	movw	r24, r28
    5af2:	01 96       	adiw	r24, 0x01	; 1
    5af4:	58 de       	rcall	.-848    	; 0x57a6 <handle_shout>
    5af6:	4d c0       	rjmp	.+154    	; 0x5b92 <handle_serial_command+0x27a>
		}	
		else if(strcmp(command_word,"tgt")==0)
    5af8:	67 e0       	ldi	r22, 0x07	; 7
    5afa:	77 e2       	ldi	r23, 0x27	; 39
    5afc:	ce 01       	movw	r24, r28
    5afe:	8f 5b       	subi	r24, 0xBF	; 191
    5b00:	9f 4f       	sbci	r25, 0xFF	; 255
    5b02:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5b06:	89 2b       	or	r24, r25
    5b08:	21 f4       	brne	.+8      	; 0x5b12 <handle_serial_command+0x1fa>
		{
			handle_target(command_args);
    5b0a:	ce 01       	movw	r24, r28
    5b0c:	01 96       	adiw	r24, 0x01	; 1
    5b0e:	7a de       	rcall	.-780    	; 0x5804 <handle_target>
    5b10:	40 c0       	rjmp	.+128    	; 0x5b92 <handle_serial_command+0x27a>
		}
		else if(strcmp(command_word,"tasks")==0)
    5b12:	6b e0       	ldi	r22, 0x0B	; 11
    5b14:	77 e2       	ldi	r23, 0x27	; 39
    5b16:	ce 01       	movw	r24, r28
    5b18:	8f 5b       	subi	r24, 0xBF	; 191
    5b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b1c:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5b20:	89 2b       	or	r24, r25
    5b22:	11 f4       	brne	.+4      	; 0x5b28 <handle_serial_command+0x210>
		{
			print_task_queue();
    5b24:	fa d8       	rcall	.-3596   	; 0x4d1a <print_task_queue>
    5b26:	35 c0       	rjmp	.+106    	; 0x5b92 <handle_serial_command+0x27a>
		}		
		else if(strcmp(command_word,"reset")==0)
    5b28:	61 e1       	ldi	r22, 0x11	; 17
    5b2a:	77 e2       	ldi	r23, 0x27	; 39
    5b2c:	ce 01       	movw	r24, r28
    5b2e:	8f 5b       	subi	r24, 0xBF	; 191
    5b30:	9f 4f       	sbci	r25, 0xFF	; 255
    5b32:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5b36:	89 2b       	or	r24, r25
    5b38:	19 f4       	brne	.+6      	; 0x5b40 <handle_serial_command+0x228>
	}
}

void handle_reset()
{
	droplet_reboot();
    5b3a:	0e 94 85 03 	call	0x70a	; 0x70a <droplet_reboot>
    5b3e:	29 c0       	rjmp	.+82     	; 0x5b92 <handle_serial_command+0x27a>
		}		
		else if(strcmp(command_word,"reset")==0)
		{
			handle_reset();
		}
		else if(strcmp(command_word,"print_motor_settings")==0)
    5b40:	67 e1       	ldi	r22, 0x17	; 23
    5b42:	77 e2       	ldi	r23, 0x27	; 39
    5b44:	ce 01       	movw	r24, r28
    5b46:	8f 5b       	subi	r24, 0xBF	; 191
    5b48:	9f 4f       	sbci	r25, 0xFF	; 255
    5b4a:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5b4e:	89 2b       	or	r24, r25
    5b50:	29 f4       	brne	.+10     	; 0x5b5c <handle_serial_command+0x244>
		{
			print_motor_values();
    5b52:	0e 94 32 15 	call	0x2a64	; 0x2a64 <print_motor_values>
			print_dist_per_step(); 
    5b56:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <print_dist_per_step>
    5b5a:	1b c0       	rjmp	.+54     	; 0x5b92 <handle_serial_command+0x27a>
		}	
		else if(strcmp(command_word,"write_motor_settings")==0)
    5b5c:	6c e2       	ldi	r22, 0x2C	; 44
    5b5e:	77 e2       	ldi	r23, 0x27	; 39
    5b60:	ce 01       	movw	r24, r28
    5b62:	8f 5b       	subi	r24, 0xBF	; 191
    5b64:	9f 4f       	sbci	r25, 0xFF	; 255
    5b66:	0e 94 c1 37 	call	0x6f82	; 0x6f82 <strcmp>
    5b6a:	89 2b       	or	r24, r25
    5b6c:	19 f4       	brne	.+6      	; 0x5b74 <handle_serial_command+0x25c>
		{
			write_motor_settings();
    5b6e:	0e 94 f5 14 	call	0x29ea	; 0x29ea <write_motor_settings>
    5b72:	0f c0       	rjmp	.+30     	; 0x5b92 <handle_serial_command+0x27a>
		}
		else
		{
			printf("\tCommand ( %s ) not recognized.\r\n",command_word);
    5b74:	ce 01       	movw	r24, r28
    5b76:	8f 5b       	subi	r24, 0xBF	; 191
    5b78:	9f 4f       	sbci	r25, 0xFF	; 255
    5b7a:	9f 93       	push	r25
    5b7c:	8f 93       	push	r24
    5b7e:	81 e4       	ldi	r24, 0x41	; 65
    5b80:	97 e2       	ldi	r25, 0x27	; 39
    5b82:	9f 93       	push	r25
    5b84:	8f 93       	push	r24
    5b86:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    5b8a:	0f 90       	pop	r0
    5b8c:	0f 90       	pop	r0
    5b8e:	0f 90       	pop	r0
    5b90:	0f 90       	pop	r0
		}
	}
}
    5b92:	c0 58       	subi	r28, 0x80	; 128
    5b94:	df 4f       	sbci	r29, 0xFF	; 255
    5b96:	cd bf       	out	0x3d, r28	; 61
    5b98:	de bf       	out	0x3e, r29	; 62
    5b9a:	df 91       	pop	r29
    5b9c:	cf 91       	pop	r28
    5b9e:	08 95       	ret

00005ba0 <getAtomFromAtomicNum>:

void react(vector AllChemIDs)
{
	//recieve the character arrays. Then do stuff!
	
}
    5ba0:	cf 93       	push	r28
    5ba2:	df 93       	push	r29
    5ba4:	ec 01       	movw	r28, r24
    5ba6:	62 30       	cpi	r22, 0x02	; 2
    5ba8:	71 05       	cpc	r23, r1
    5baa:	a9 f0       	breq	.+42     	; 0x5bd6 <getAtomFromAtomicNum+0x36>
    5bac:	24 f4       	brge	.+8      	; 0x5bb6 <getAtomFromAtomicNum+0x16>
    5bae:	61 30       	cpi	r22, 0x01	; 1
    5bb0:	71 05       	cpc	r23, r1
    5bb2:	41 f0       	breq	.+16     	; 0x5bc4 <getAtomFromAtomicNum+0x24>
    5bb4:	2b c0       	rjmp	.+86     	; 0x5c0c <getAtomFromAtomicNum+0x6c>
    5bb6:	63 30       	cpi	r22, 0x03	; 3
    5bb8:	71 05       	cpc	r23, r1
    5bba:	b1 f0       	breq	.+44     	; 0x5be8 <getAtomFromAtomicNum+0x48>
    5bbc:	64 30       	cpi	r22, 0x04	; 4
    5bbe:	71 05       	cpc	r23, r1
    5bc0:	e1 f0       	breq	.+56     	; 0x5bfa <getAtomFromAtomicNum+0x5a>
    5bc2:	24 c0       	rjmp	.+72     	; 0x5c0c <getAtomFromAtomicNum+0x6c>
    5bc4:	83 e2       	ldi	r24, 0x23	; 35
    5bc6:	e1 ed       	ldi	r30, 0xD1	; 209
    5bc8:	f0 e2       	ldi	r31, 0x20	; 32
    5bca:	de 01       	movw	r26, r28
    5bcc:	01 90       	ld	r0, Z+
    5bce:	0d 92       	st	X+, r0
    5bd0:	8a 95       	dec	r24
    5bd2:	e1 f7       	brne	.-8      	; 0x5bcc <getAtomFromAtomicNum+0x2c>
    5bd4:	23 c0       	rjmp	.+70     	; 0x5c1c <getAtomFromAtomicNum+0x7c>
    5bd6:	83 e2       	ldi	r24, 0x23	; 35
    5bd8:	ee ea       	ldi	r30, 0xAE	; 174
    5bda:	f0 e2       	ldi	r31, 0x20	; 32
    5bdc:	de 01       	movw	r26, r28
    5bde:	01 90       	ld	r0, Z+
    5be0:	0d 92       	st	X+, r0
    5be2:	8a 95       	dec	r24
    5be4:	e1 f7       	brne	.-8      	; 0x5bde <getAtomFromAtomicNum+0x3e>
    5be6:	1a c0       	rjmp	.+52     	; 0x5c1c <getAtomFromAtomicNum+0x7c>
    5be8:	83 e2       	ldi	r24, 0x23	; 35
    5bea:	eb e8       	ldi	r30, 0x8B	; 139
    5bec:	f0 e2       	ldi	r31, 0x20	; 32
    5bee:	de 01       	movw	r26, r28
    5bf0:	01 90       	ld	r0, Z+
    5bf2:	0d 92       	st	X+, r0
    5bf4:	8a 95       	dec	r24
    5bf6:	e1 f7       	brne	.-8      	; 0x5bf0 <getAtomFromAtomicNum+0x50>
    5bf8:	11 c0       	rjmp	.+34     	; 0x5c1c <getAtomFromAtomicNum+0x7c>
    5bfa:	83 e2       	ldi	r24, 0x23	; 35
    5bfc:	e8 e6       	ldi	r30, 0x68	; 104
    5bfe:	f0 e2       	ldi	r31, 0x20	; 32
    5c00:	de 01       	movw	r26, r28
    5c02:	01 90       	ld	r0, Z+
    5c04:	0d 92       	st	X+, r0
    5c06:	8a 95       	dec	r24
    5c08:	e1 f7       	brne	.-8      	; 0x5c02 <getAtomFromAtomicNum+0x62>
    5c0a:	08 c0       	rjmp	.+16     	; 0x5c1c <getAtomFromAtomicNum+0x7c>
    5c0c:	83 e6       	ldi	r24, 0x63	; 99
    5c0e:	97 e2       	ldi	r25, 0x27	; 39
    5c10:	9f 93       	push	r25
    5c12:	8f 93       	push	r24
    5c14:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    5c18:	0f 90       	pop	r0
    5c1a:	0f 90       	pop	r0
    5c1c:	ce 01       	movw	r24, r28
    5c1e:	df 91       	pop	r29
    5c20:	cf 91       	pop	r28
    5c22:	08 95       	ret

00005c24 <init>:

/*
 * Any code in this function will be run once, when the robot starts.
 */
void init()
{
    5c24:	cf 93       	push	r28
    5c26:	df 93       	push	r29
    5c28:	cd b7       	in	r28, 0x3d	; 61
    5c2a:	de b7       	in	r29, 0x3e	; 62
    5c2c:	a3 97       	sbiw	r28, 0x23	; 35
    5c2e:	cd bf       	out	0x3d, r28	; 61
    5c30:	de bf       	out	0x3e, r29	; 62

	set_rgb(10, 10, 255); //this is a test line
    5c32:	4f ef       	ldi	r20, 0xFF	; 255
    5c34:	6a e0       	ldi	r22, 0x0A	; 10
    5c36:	8a e0       	ldi	r24, 0x0A	; 10
    5c38:	0e 94 86 21 	call	0x430c	; 0x430c <set_rgb>
	Atom myID = getAtomFromAtomicNum(MY_CHEM_ID);
    5c3c:	60 91 f4 20 	lds	r22, 0x20F4
    5c40:	70 91 f5 20 	lds	r23, 0x20F5
    5c44:	ce 01       	movw	r24, r28
    5c46:	01 96       	adiw	r24, 0x01	; 1
    5c48:	ab df       	rcall	.-170    	; 0x5ba0 <getAtomFromAtomicNum>
	printf("this.name = %s \n", myID.name);
    5c4a:	ce 01       	movw	r24, r28
    5c4c:	43 96       	adiw	r24, 0x13	; 19
    5c4e:	9f 93       	push	r25
    5c50:	8f 93       	push	r24
    5c52:	83 e7       	ldi	r24, 0x73	; 115
    5c54:	97 e2       	ldi	r25, 0x27	; 39
    5c56:	9f 93       	push	r25
    5c58:	8f 93       	push	r24
    5c5a:	0e 94 5b 38 	call	0x70b6	; 0x70b6 <printf>
    5c5e:	0f 90       	pop	r0
    5c60:	0f 90       	pop	r0
    5c62:	0f 90       	pop	r0
    5c64:	0f 90       	pop	r0
}
    5c66:	a3 96       	adiw	r28, 0x23	; 35
    5c68:	cd bf       	out	0x3d, r28	; 61
    5c6a:	de bf       	out	0x3e, r29	; 62
    5c6c:	df 91       	pop	r29
    5c6e:	cf 91       	pop	r28
    5c70:	08 95       	ret

00005c72 <loop>:

/*
 * The code in this function will be called repeatedly, as fast as it can execute.
 */
void loop()
{
    5c72:	08 95       	ret

00005c74 <handle_msg>:
/*
 * After each pass through loop(), the robot checks for all messages it has 
 * received, and calls this function once for each message.
 */
void handle_msg(ir_msg* msg_struct)
{
    5c74:	08 95       	ret

00005c76 <__subsf3>:
    5c76:	50 58       	subi	r21, 0x80	; 128

00005c78 <__addsf3>:
    5c78:	bb 27       	eor	r27, r27
    5c7a:	aa 27       	eor	r26, r26
    5c7c:	0e d0       	rcall	.+28     	; 0x5c9a <__addsf3x>
    5c7e:	83 c2       	rjmp	.+1286   	; 0x6186 <__fp_round>
    5c80:	4c d2       	rcall	.+1176   	; 0x611a <__fp_pscA>
    5c82:	30 f0       	brcs	.+12     	; 0x5c90 <__addsf3+0x18>
    5c84:	51 d2       	rcall	.+1186   	; 0x6128 <__fp_pscB>
    5c86:	20 f0       	brcs	.+8      	; 0x5c90 <__addsf3+0x18>
    5c88:	31 f4       	brne	.+12     	; 0x5c96 <__addsf3+0x1e>
    5c8a:	9f 3f       	cpi	r25, 0xFF	; 255
    5c8c:	11 f4       	brne	.+4      	; 0x5c92 <__addsf3+0x1a>
    5c8e:	1e f4       	brtc	.+6      	; 0x5c96 <__addsf3+0x1e>
    5c90:	1c c2       	rjmp	.+1080   	; 0x60ca <__fp_nan>
    5c92:	0e f4       	brtc	.+2      	; 0x5c96 <__addsf3+0x1e>
    5c94:	e0 95       	com	r30
    5c96:	e7 fb       	bst	r30, 7
    5c98:	04 c2       	rjmp	.+1032   	; 0x60a2 <__fp_inf>

00005c9a <__addsf3x>:
    5c9a:	e9 2f       	mov	r30, r25
    5c9c:	96 d2       	rcall	.+1324   	; 0x61ca <__fp_split3>
    5c9e:	80 f3       	brcs	.-32     	; 0x5c80 <__addsf3+0x8>
    5ca0:	ba 17       	cp	r27, r26
    5ca2:	62 07       	cpc	r22, r18
    5ca4:	73 07       	cpc	r23, r19
    5ca6:	84 07       	cpc	r24, r20
    5ca8:	95 07       	cpc	r25, r21
    5caa:	18 f0       	brcs	.+6      	; 0x5cb2 <__addsf3x+0x18>
    5cac:	71 f4       	brne	.+28     	; 0x5cca <__addsf3x+0x30>
    5cae:	9e f5       	brtc	.+102    	; 0x5d16 <__addsf3x+0x7c>
    5cb0:	ae c2       	rjmp	.+1372   	; 0x620e <__fp_zero>
    5cb2:	0e f4       	brtc	.+2      	; 0x5cb6 <__addsf3x+0x1c>
    5cb4:	e0 95       	com	r30
    5cb6:	0b 2e       	mov	r0, r27
    5cb8:	ba 2f       	mov	r27, r26
    5cba:	a0 2d       	mov	r26, r0
    5cbc:	0b 01       	movw	r0, r22
    5cbe:	b9 01       	movw	r22, r18
    5cc0:	90 01       	movw	r18, r0
    5cc2:	0c 01       	movw	r0, r24
    5cc4:	ca 01       	movw	r24, r20
    5cc6:	a0 01       	movw	r20, r0
    5cc8:	11 24       	eor	r1, r1
    5cca:	ff 27       	eor	r31, r31
    5ccc:	59 1b       	sub	r21, r25
    5cce:	99 f0       	breq	.+38     	; 0x5cf6 <__addsf3x+0x5c>
    5cd0:	59 3f       	cpi	r21, 0xF9	; 249
    5cd2:	50 f4       	brcc	.+20     	; 0x5ce8 <__addsf3x+0x4e>
    5cd4:	50 3e       	cpi	r21, 0xE0	; 224
    5cd6:	68 f1       	brcs	.+90     	; 0x5d32 <__addsf3x+0x98>
    5cd8:	1a 16       	cp	r1, r26
    5cda:	f0 40       	sbci	r31, 0x00	; 0
    5cdc:	a2 2f       	mov	r26, r18
    5cde:	23 2f       	mov	r18, r19
    5ce0:	34 2f       	mov	r19, r20
    5ce2:	44 27       	eor	r20, r20
    5ce4:	58 5f       	subi	r21, 0xF8	; 248
    5ce6:	f3 cf       	rjmp	.-26     	; 0x5cce <__addsf3x+0x34>
    5ce8:	46 95       	lsr	r20
    5cea:	37 95       	ror	r19
    5cec:	27 95       	ror	r18
    5cee:	a7 95       	ror	r26
    5cf0:	f0 40       	sbci	r31, 0x00	; 0
    5cf2:	53 95       	inc	r21
    5cf4:	c9 f7       	brne	.-14     	; 0x5ce8 <__addsf3x+0x4e>
    5cf6:	7e f4       	brtc	.+30     	; 0x5d16 <__addsf3x+0x7c>
    5cf8:	1f 16       	cp	r1, r31
    5cfa:	ba 0b       	sbc	r27, r26
    5cfc:	62 0b       	sbc	r22, r18
    5cfe:	73 0b       	sbc	r23, r19
    5d00:	84 0b       	sbc	r24, r20
    5d02:	ba f0       	brmi	.+46     	; 0x5d32 <__addsf3x+0x98>
    5d04:	91 50       	subi	r25, 0x01	; 1
    5d06:	a1 f0       	breq	.+40     	; 0x5d30 <__addsf3x+0x96>
    5d08:	ff 0f       	add	r31, r31
    5d0a:	bb 1f       	adc	r27, r27
    5d0c:	66 1f       	adc	r22, r22
    5d0e:	77 1f       	adc	r23, r23
    5d10:	88 1f       	adc	r24, r24
    5d12:	c2 f7       	brpl	.-16     	; 0x5d04 <__addsf3x+0x6a>
    5d14:	0e c0       	rjmp	.+28     	; 0x5d32 <__addsf3x+0x98>
    5d16:	ba 0f       	add	r27, r26
    5d18:	62 1f       	adc	r22, r18
    5d1a:	73 1f       	adc	r23, r19
    5d1c:	84 1f       	adc	r24, r20
    5d1e:	48 f4       	brcc	.+18     	; 0x5d32 <__addsf3x+0x98>
    5d20:	87 95       	ror	r24
    5d22:	77 95       	ror	r23
    5d24:	67 95       	ror	r22
    5d26:	b7 95       	ror	r27
    5d28:	f7 95       	ror	r31
    5d2a:	9e 3f       	cpi	r25, 0xFE	; 254
    5d2c:	08 f0       	brcs	.+2      	; 0x5d30 <__addsf3x+0x96>
    5d2e:	b3 cf       	rjmp	.-154    	; 0x5c96 <__addsf3+0x1e>
    5d30:	93 95       	inc	r25
    5d32:	88 0f       	add	r24, r24
    5d34:	08 f0       	brcs	.+2      	; 0x5d38 <__addsf3x+0x9e>
    5d36:	99 27       	eor	r25, r25
    5d38:	ee 0f       	add	r30, r30
    5d3a:	97 95       	ror	r25
    5d3c:	87 95       	ror	r24
    5d3e:	08 95       	ret
    5d40:	ec d1       	rcall	.+984    	; 0x611a <__fp_pscA>
    5d42:	58 f0       	brcs	.+22     	; 0x5d5a <__addsf3x+0xc0>
    5d44:	80 e8       	ldi	r24, 0x80	; 128
    5d46:	91 e0       	ldi	r25, 0x01	; 1
    5d48:	09 f4       	brne	.+2      	; 0x5d4c <__addsf3x+0xb2>
    5d4a:	9e ef       	ldi	r25, 0xFE	; 254
    5d4c:	ed d1       	rcall	.+986    	; 0x6128 <__fp_pscB>
    5d4e:	28 f0       	brcs	.+10     	; 0x5d5a <__addsf3x+0xc0>
    5d50:	40 e8       	ldi	r20, 0x80	; 128
    5d52:	51 e0       	ldi	r21, 0x01	; 1
    5d54:	59 f4       	brne	.+22     	; 0x5d6c <atan2+0xe>
    5d56:	5e ef       	ldi	r21, 0xFE	; 254
    5d58:	09 c0       	rjmp	.+18     	; 0x5d6c <atan2+0xe>
    5d5a:	b7 c1       	rjmp	.+878    	; 0x60ca <__fp_nan>
    5d5c:	58 c2       	rjmp	.+1200   	; 0x620e <__fp_zero>

00005d5e <atan2>:
    5d5e:	e9 2f       	mov	r30, r25
    5d60:	e0 78       	andi	r30, 0x80	; 128
    5d62:	33 d2       	rcall	.+1126   	; 0x61ca <__fp_split3>
    5d64:	68 f3       	brcs	.-38     	; 0x5d40 <__addsf3x+0xa6>
    5d66:	09 2e       	mov	r0, r25
    5d68:	05 2a       	or	r0, r21
    5d6a:	c1 f3       	breq	.-16     	; 0x5d5c <__addsf3x+0xc2>
    5d6c:	26 17       	cp	r18, r22
    5d6e:	37 07       	cpc	r19, r23
    5d70:	48 07       	cpc	r20, r24
    5d72:	59 07       	cpc	r21, r25
    5d74:	38 f0       	brcs	.+14     	; 0x5d84 <atan2+0x26>
    5d76:	0e 2e       	mov	r0, r30
    5d78:	07 f8       	bld	r0, 7
    5d7a:	e0 25       	eor	r30, r0
    5d7c:	69 f0       	breq	.+26     	; 0x5d98 <atan2+0x3a>
    5d7e:	e0 25       	eor	r30, r0
    5d80:	e0 64       	ori	r30, 0x40	; 64
    5d82:	0a c0       	rjmp	.+20     	; 0x5d98 <atan2+0x3a>
    5d84:	ef 63       	ori	r30, 0x3F	; 63
    5d86:	07 f8       	bld	r0, 7
    5d88:	00 94       	com	r0
    5d8a:	07 fa       	bst	r0, 7
    5d8c:	db 01       	movw	r26, r22
    5d8e:	b9 01       	movw	r22, r18
    5d90:	9d 01       	movw	r18, r26
    5d92:	dc 01       	movw	r26, r24
    5d94:	ca 01       	movw	r24, r20
    5d96:	ad 01       	movw	r20, r26
    5d98:	ef 93       	push	r30
    5d9a:	4a d0       	rcall	.+148    	; 0x5e30 <__divsf3_pse>
    5d9c:	f4 d1       	rcall	.+1000   	; 0x6186 <__fp_round>
    5d9e:	0a d0       	rcall	.+20     	; 0x5db4 <atan>
    5da0:	5f 91       	pop	r21
    5da2:	55 23       	and	r21, r21
    5da4:	31 f0       	breq	.+12     	; 0x5db2 <atan2+0x54>
    5da6:	2b ed       	ldi	r18, 0xDB	; 219
    5da8:	3f e0       	ldi	r19, 0x0F	; 15
    5daa:	49 e4       	ldi	r20, 0x49	; 73
    5dac:	50 fd       	sbrc	r21, 0
    5dae:	49 ec       	ldi	r20, 0xC9	; 201
    5db0:	63 cf       	rjmp	.-314    	; 0x5c78 <__addsf3>
    5db2:	08 95       	ret

00005db4 <atan>:
    5db4:	df 93       	push	r29
    5db6:	dd 27       	eor	r29, r29
    5db8:	b9 2f       	mov	r27, r25
    5dba:	bf 77       	andi	r27, 0x7F	; 127
    5dbc:	40 e8       	ldi	r20, 0x80	; 128
    5dbe:	5f e3       	ldi	r21, 0x3F	; 63
    5dc0:	16 16       	cp	r1, r22
    5dc2:	17 06       	cpc	r1, r23
    5dc4:	48 07       	cpc	r20, r24
    5dc6:	5b 07       	cpc	r21, r27
    5dc8:	10 f4       	brcc	.+4      	; 0x5dce <atan+0x1a>
    5dca:	d9 2f       	mov	r29, r25
    5dcc:	2b d2       	rcall	.+1110   	; 0x6224 <inverse>
    5dce:	9f 93       	push	r25
    5dd0:	8f 93       	push	r24
    5dd2:	7f 93       	push	r23
    5dd4:	6f 93       	push	r22
    5dd6:	d8 d2       	rcall	.+1456   	; 0x6388 <square>
    5dd8:	e6 e2       	ldi	r30, 0x26	; 38
    5dda:	f2 e0       	ldi	r31, 0x02	; 2
    5ddc:	79 d1       	rcall	.+754    	; 0x60d0 <__fp_powser>
    5dde:	d3 d1       	rcall	.+934    	; 0x6186 <__fp_round>
    5de0:	2f 91       	pop	r18
    5de2:	3f 91       	pop	r19
    5de4:	4f 91       	pop	r20
    5de6:	5f 91       	pop	r21
    5de8:	30 d2       	rcall	.+1120   	; 0x624a <__mulsf3x>
    5dea:	dd 23       	and	r29, r29
    5dec:	49 f0       	breq	.+18     	; 0x5e00 <atan+0x4c>
    5dee:	90 58       	subi	r25, 0x80	; 128
    5df0:	a2 ea       	ldi	r26, 0xA2	; 162
    5df2:	2a ed       	ldi	r18, 0xDA	; 218
    5df4:	3f e0       	ldi	r19, 0x0F	; 15
    5df6:	49 ec       	ldi	r20, 0xC9	; 201
    5df8:	5f e3       	ldi	r21, 0x3F	; 63
    5dfa:	d0 78       	andi	r29, 0x80	; 128
    5dfc:	5d 27       	eor	r21, r29
    5dfe:	4d df       	rcall	.-358    	; 0x5c9a <__addsf3x>
    5e00:	df 91       	pop	r29
    5e02:	c1 c1       	rjmp	.+898    	; 0x6186 <__fp_round>

00005e04 <__cmpsf2>:
    5e04:	2a d1       	rcall	.+596    	; 0x605a <__fp_cmp>
    5e06:	08 f4       	brcc	.+2      	; 0x5e0a <__cmpsf2+0x6>
    5e08:	81 e0       	ldi	r24, 0x01	; 1
    5e0a:	08 95       	ret

00005e0c <cos>:
    5e0c:	95 d1       	rcall	.+810    	; 0x6138 <__fp_rempio2>
    5e0e:	e3 95       	inc	r30
    5e10:	cb c1       	rjmp	.+918    	; 0x61a8 <__fp_sinus>

00005e12 <__divsf3>:
    5e12:	0c d0       	rcall	.+24     	; 0x5e2c <__divsf3x>
    5e14:	b8 c1       	rjmp	.+880    	; 0x6186 <__fp_round>
    5e16:	88 d1       	rcall	.+784    	; 0x6128 <__fp_pscB>
    5e18:	40 f0       	brcs	.+16     	; 0x5e2a <__divsf3+0x18>
    5e1a:	7f d1       	rcall	.+766    	; 0x611a <__fp_pscA>
    5e1c:	30 f0       	brcs	.+12     	; 0x5e2a <__divsf3+0x18>
    5e1e:	21 f4       	brne	.+8      	; 0x5e28 <__divsf3+0x16>
    5e20:	5f 3f       	cpi	r21, 0xFF	; 255
    5e22:	19 f0       	breq	.+6      	; 0x5e2a <__divsf3+0x18>
    5e24:	3e c1       	rjmp	.+636    	; 0x60a2 <__fp_inf>
    5e26:	51 11       	cpse	r21, r1
    5e28:	f3 c1       	rjmp	.+998    	; 0x6210 <__fp_szero>
    5e2a:	4f c1       	rjmp	.+670    	; 0x60ca <__fp_nan>

00005e2c <__divsf3x>:
    5e2c:	ce d1       	rcall	.+924    	; 0x61ca <__fp_split3>
    5e2e:	98 f3       	brcs	.-26     	; 0x5e16 <__divsf3+0x4>

00005e30 <__divsf3_pse>:
    5e30:	99 23       	and	r25, r25
    5e32:	c9 f3       	breq	.-14     	; 0x5e26 <__divsf3+0x14>
    5e34:	55 23       	and	r21, r21
    5e36:	b1 f3       	breq	.-20     	; 0x5e24 <__divsf3+0x12>
    5e38:	95 1b       	sub	r25, r21
    5e3a:	55 0b       	sbc	r21, r21
    5e3c:	bb 27       	eor	r27, r27
    5e3e:	aa 27       	eor	r26, r26
    5e40:	62 17       	cp	r22, r18
    5e42:	73 07       	cpc	r23, r19
    5e44:	84 07       	cpc	r24, r20
    5e46:	38 f0       	brcs	.+14     	; 0x5e56 <__divsf3_pse+0x26>
    5e48:	9f 5f       	subi	r25, 0xFF	; 255
    5e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    5e4c:	22 0f       	add	r18, r18
    5e4e:	33 1f       	adc	r19, r19
    5e50:	44 1f       	adc	r20, r20
    5e52:	aa 1f       	adc	r26, r26
    5e54:	a9 f3       	breq	.-22     	; 0x5e40 <__divsf3_pse+0x10>
    5e56:	33 d0       	rcall	.+102    	; 0x5ebe <__divsf3_pse+0x8e>
    5e58:	0e 2e       	mov	r0, r30
    5e5a:	3a f0       	brmi	.+14     	; 0x5e6a <__divsf3_pse+0x3a>
    5e5c:	e0 e8       	ldi	r30, 0x80	; 128
    5e5e:	30 d0       	rcall	.+96     	; 0x5ec0 <__divsf3_pse+0x90>
    5e60:	91 50       	subi	r25, 0x01	; 1
    5e62:	50 40       	sbci	r21, 0x00	; 0
    5e64:	e6 95       	lsr	r30
    5e66:	00 1c       	adc	r0, r0
    5e68:	ca f7       	brpl	.-14     	; 0x5e5c <__divsf3_pse+0x2c>
    5e6a:	29 d0       	rcall	.+82     	; 0x5ebe <__divsf3_pse+0x8e>
    5e6c:	fe 2f       	mov	r31, r30
    5e6e:	27 d0       	rcall	.+78     	; 0x5ebe <__divsf3_pse+0x8e>
    5e70:	66 0f       	add	r22, r22
    5e72:	77 1f       	adc	r23, r23
    5e74:	88 1f       	adc	r24, r24
    5e76:	bb 1f       	adc	r27, r27
    5e78:	26 17       	cp	r18, r22
    5e7a:	37 07       	cpc	r19, r23
    5e7c:	48 07       	cpc	r20, r24
    5e7e:	ab 07       	cpc	r26, r27
    5e80:	b0 e8       	ldi	r27, 0x80	; 128
    5e82:	09 f0       	breq	.+2      	; 0x5e86 <__divsf3_pse+0x56>
    5e84:	bb 0b       	sbc	r27, r27
    5e86:	80 2d       	mov	r24, r0
    5e88:	bf 01       	movw	r22, r30
    5e8a:	ff 27       	eor	r31, r31
    5e8c:	93 58       	subi	r25, 0x83	; 131
    5e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    5e90:	2a f0       	brmi	.+10     	; 0x5e9c <__divsf3_pse+0x6c>
    5e92:	9e 3f       	cpi	r25, 0xFE	; 254
    5e94:	51 05       	cpc	r21, r1
    5e96:	68 f0       	brcs	.+26     	; 0x5eb2 <__divsf3_pse+0x82>
    5e98:	04 c1       	rjmp	.+520    	; 0x60a2 <__fp_inf>
    5e9a:	ba c1       	rjmp	.+884    	; 0x6210 <__fp_szero>
    5e9c:	5f 3f       	cpi	r21, 0xFF	; 255
    5e9e:	ec f3       	brlt	.-6      	; 0x5e9a <__divsf3_pse+0x6a>
    5ea0:	98 3e       	cpi	r25, 0xE8	; 232
    5ea2:	dc f3       	brlt	.-10     	; 0x5e9a <__divsf3_pse+0x6a>
    5ea4:	86 95       	lsr	r24
    5ea6:	77 95       	ror	r23
    5ea8:	67 95       	ror	r22
    5eaa:	b7 95       	ror	r27
    5eac:	f7 95       	ror	r31
    5eae:	9f 5f       	subi	r25, 0xFF	; 255
    5eb0:	c9 f7       	brne	.-14     	; 0x5ea4 <__divsf3_pse+0x74>
    5eb2:	88 0f       	add	r24, r24
    5eb4:	91 1d       	adc	r25, r1
    5eb6:	96 95       	lsr	r25
    5eb8:	87 95       	ror	r24
    5eba:	97 f9       	bld	r25, 7
    5ebc:	08 95       	ret
    5ebe:	e1 e0       	ldi	r30, 0x01	; 1
    5ec0:	66 0f       	add	r22, r22
    5ec2:	77 1f       	adc	r23, r23
    5ec4:	88 1f       	adc	r24, r24
    5ec6:	bb 1f       	adc	r27, r27
    5ec8:	62 17       	cp	r22, r18
    5eca:	73 07       	cpc	r23, r19
    5ecc:	84 07       	cpc	r24, r20
    5ece:	ba 07       	cpc	r27, r26
    5ed0:	20 f0       	brcs	.+8      	; 0x5eda <__divsf3_pse+0xaa>
    5ed2:	62 1b       	sub	r22, r18
    5ed4:	73 0b       	sbc	r23, r19
    5ed6:	84 0b       	sbc	r24, r20
    5ed8:	ba 0b       	sbc	r27, r26
    5eda:	ee 1f       	adc	r30, r30
    5edc:	88 f7       	brcc	.-30     	; 0x5ec0 <__divsf3_pse+0x90>
    5ede:	e0 95       	com	r30
    5ee0:	08 95       	ret

00005ee2 <__fixsfsi>:
    5ee2:	04 d0       	rcall	.+8      	; 0x5eec <__fixunssfsi>
    5ee4:	68 94       	set
    5ee6:	b1 11       	cpse	r27, r1
    5ee8:	93 c1       	rjmp	.+806    	; 0x6210 <__fp_szero>
    5eea:	08 95       	ret

00005eec <__fixunssfsi>:
    5eec:	76 d1       	rcall	.+748    	; 0x61da <__fp_splitA>
    5eee:	88 f0       	brcs	.+34     	; 0x5f12 <__fixunssfsi+0x26>
    5ef0:	9f 57       	subi	r25, 0x7F	; 127
    5ef2:	90 f0       	brcs	.+36     	; 0x5f18 <__fixunssfsi+0x2c>
    5ef4:	b9 2f       	mov	r27, r25
    5ef6:	99 27       	eor	r25, r25
    5ef8:	b7 51       	subi	r27, 0x17	; 23
    5efa:	a0 f0       	brcs	.+40     	; 0x5f24 <__fixunssfsi+0x38>
    5efc:	d1 f0       	breq	.+52     	; 0x5f32 <__fixunssfsi+0x46>
    5efe:	66 0f       	add	r22, r22
    5f00:	77 1f       	adc	r23, r23
    5f02:	88 1f       	adc	r24, r24
    5f04:	99 1f       	adc	r25, r25
    5f06:	1a f0       	brmi	.+6      	; 0x5f0e <__fixunssfsi+0x22>
    5f08:	ba 95       	dec	r27
    5f0a:	c9 f7       	brne	.-14     	; 0x5efe <__fixunssfsi+0x12>
    5f0c:	12 c0       	rjmp	.+36     	; 0x5f32 <__fixunssfsi+0x46>
    5f0e:	b1 30       	cpi	r27, 0x01	; 1
    5f10:	81 f0       	breq	.+32     	; 0x5f32 <__fixunssfsi+0x46>
    5f12:	7d d1       	rcall	.+762    	; 0x620e <__fp_zero>
    5f14:	b1 e0       	ldi	r27, 0x01	; 1
    5f16:	08 95       	ret
    5f18:	7a c1       	rjmp	.+756    	; 0x620e <__fp_zero>
    5f1a:	67 2f       	mov	r22, r23
    5f1c:	78 2f       	mov	r23, r24
    5f1e:	88 27       	eor	r24, r24
    5f20:	b8 5f       	subi	r27, 0xF8	; 248
    5f22:	39 f0       	breq	.+14     	; 0x5f32 <__fixunssfsi+0x46>
    5f24:	b9 3f       	cpi	r27, 0xF9	; 249
    5f26:	cc f3       	brlt	.-14     	; 0x5f1a <__fixunssfsi+0x2e>
    5f28:	86 95       	lsr	r24
    5f2a:	77 95       	ror	r23
    5f2c:	67 95       	ror	r22
    5f2e:	b3 95       	inc	r27
    5f30:	d9 f7       	brne	.-10     	; 0x5f28 <__fixunssfsi+0x3c>
    5f32:	3e f4       	brtc	.+14     	; 0x5f42 <__fixunssfsi+0x56>
    5f34:	90 95       	com	r25
    5f36:	80 95       	com	r24
    5f38:	70 95       	com	r23
    5f3a:	61 95       	neg	r22
    5f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    5f3e:	8f 4f       	sbci	r24, 0xFF	; 255
    5f40:	9f 4f       	sbci	r25, 0xFF	; 255
    5f42:	08 95       	ret

00005f44 <__floatunsisf>:
    5f44:	e8 94       	clt
    5f46:	09 c0       	rjmp	.+18     	; 0x5f5a <__floatsisf+0x12>

00005f48 <__floatsisf>:
    5f48:	97 fb       	bst	r25, 7
    5f4a:	3e f4       	brtc	.+14     	; 0x5f5a <__floatsisf+0x12>
    5f4c:	90 95       	com	r25
    5f4e:	80 95       	com	r24
    5f50:	70 95       	com	r23
    5f52:	61 95       	neg	r22
    5f54:	7f 4f       	sbci	r23, 0xFF	; 255
    5f56:	8f 4f       	sbci	r24, 0xFF	; 255
    5f58:	9f 4f       	sbci	r25, 0xFF	; 255
    5f5a:	99 23       	and	r25, r25
    5f5c:	a9 f0       	breq	.+42     	; 0x5f88 <__floatsisf+0x40>
    5f5e:	f9 2f       	mov	r31, r25
    5f60:	96 e9       	ldi	r25, 0x96	; 150
    5f62:	bb 27       	eor	r27, r27
    5f64:	93 95       	inc	r25
    5f66:	f6 95       	lsr	r31
    5f68:	87 95       	ror	r24
    5f6a:	77 95       	ror	r23
    5f6c:	67 95       	ror	r22
    5f6e:	b7 95       	ror	r27
    5f70:	f1 11       	cpse	r31, r1
    5f72:	f8 cf       	rjmp	.-16     	; 0x5f64 <__floatsisf+0x1c>
    5f74:	fa f4       	brpl	.+62     	; 0x5fb4 <__floatsisf+0x6c>
    5f76:	bb 0f       	add	r27, r27
    5f78:	11 f4       	brne	.+4      	; 0x5f7e <__floatsisf+0x36>
    5f7a:	60 ff       	sbrs	r22, 0
    5f7c:	1b c0       	rjmp	.+54     	; 0x5fb4 <__floatsisf+0x6c>
    5f7e:	6f 5f       	subi	r22, 0xFF	; 255
    5f80:	7f 4f       	sbci	r23, 0xFF	; 255
    5f82:	8f 4f       	sbci	r24, 0xFF	; 255
    5f84:	9f 4f       	sbci	r25, 0xFF	; 255
    5f86:	16 c0       	rjmp	.+44     	; 0x5fb4 <__floatsisf+0x6c>
    5f88:	88 23       	and	r24, r24
    5f8a:	11 f0       	breq	.+4      	; 0x5f90 <__floatsisf+0x48>
    5f8c:	96 e9       	ldi	r25, 0x96	; 150
    5f8e:	11 c0       	rjmp	.+34     	; 0x5fb2 <__floatsisf+0x6a>
    5f90:	77 23       	and	r23, r23
    5f92:	21 f0       	breq	.+8      	; 0x5f9c <__floatsisf+0x54>
    5f94:	9e e8       	ldi	r25, 0x8E	; 142
    5f96:	87 2f       	mov	r24, r23
    5f98:	76 2f       	mov	r23, r22
    5f9a:	05 c0       	rjmp	.+10     	; 0x5fa6 <__floatsisf+0x5e>
    5f9c:	66 23       	and	r22, r22
    5f9e:	71 f0       	breq	.+28     	; 0x5fbc <__floatsisf+0x74>
    5fa0:	96 e8       	ldi	r25, 0x86	; 134
    5fa2:	86 2f       	mov	r24, r22
    5fa4:	70 e0       	ldi	r23, 0x00	; 0
    5fa6:	60 e0       	ldi	r22, 0x00	; 0
    5fa8:	2a f0       	brmi	.+10     	; 0x5fb4 <__floatsisf+0x6c>
    5faa:	9a 95       	dec	r25
    5fac:	66 0f       	add	r22, r22
    5fae:	77 1f       	adc	r23, r23
    5fb0:	88 1f       	adc	r24, r24
    5fb2:	da f7       	brpl	.-10     	; 0x5faa <__floatsisf+0x62>
    5fb4:	88 0f       	add	r24, r24
    5fb6:	96 95       	lsr	r25
    5fb8:	87 95       	ror	r24
    5fba:	97 f9       	bld	r25, 7
    5fbc:	08 95       	ret
    5fbe:	ad d0       	rcall	.+346    	; 0x611a <__fp_pscA>
    5fc0:	18 f0       	brcs	.+6      	; 0x5fc8 <__floatsisf+0x80>
    5fc2:	11 f0       	breq	.+4      	; 0x5fc8 <__floatsisf+0x80>
    5fc4:	b1 d0       	rcall	.+354    	; 0x6128 <__fp_pscB>
    5fc6:	38 f4       	brcc	.+14     	; 0x5fd6 <fmod+0xa>
    5fc8:	80 c0       	rjmp	.+256    	; 0x60ca <__fp_nan>
    5fca:	22 c1       	rjmp	.+580    	; 0x6210 <__fp_szero>

00005fcc <fmod>:
    5fcc:	e9 2f       	mov	r30, r25
    5fce:	fd d0       	rcall	.+506    	; 0x61ca <__fp_split3>
    5fd0:	b0 f3       	brcs	.-20     	; 0x5fbe <__floatsisf+0x76>
    5fd2:	55 23       	and	r21, r21
    5fd4:	c9 f3       	breq	.-14     	; 0x5fc8 <__floatsisf+0x80>
    5fd6:	e7 fb       	bst	r30, 7
    5fd8:	62 17       	cp	r22, r18
    5fda:	73 07       	cpc	r23, r19
    5fdc:	84 07       	cpc	r24, r20
    5fde:	95 07       	cpc	r25, r21
    5fe0:	a8 f1       	brcs	.+106    	; 0x604c <fmod+0x80>
    5fe2:	99 f3       	breq	.-26     	; 0x5fca <__floatsisf+0x82>
    5fe4:	e9 2f       	mov	r30, r25
    5fe6:	ff 27       	eor	r31, r31
    5fe8:	88 23       	and	r24, r24
    5fea:	2a f0       	brmi	.+10     	; 0x5ff6 <fmod+0x2a>
    5fec:	31 97       	sbiw	r30, 0x01	; 1
    5fee:	66 0f       	add	r22, r22
    5ff0:	77 1f       	adc	r23, r23
    5ff2:	88 1f       	adc	r24, r24
    5ff4:	da f7       	brpl	.-10     	; 0x5fec <fmod+0x20>
    5ff6:	95 2f       	mov	r25, r21
    5ff8:	55 27       	eor	r21, r21
    5ffa:	44 23       	and	r20, r20
    5ffc:	32 f0       	brmi	.+12     	; 0x600a <fmod+0x3e>
    5ffe:	91 50       	subi	r25, 0x01	; 1
    6000:	50 40       	sbci	r21, 0x00	; 0
    6002:	22 0f       	add	r18, r18
    6004:	33 1f       	adc	r19, r19
    6006:	44 1f       	adc	r20, r20
    6008:	d2 f7       	brpl	.-12     	; 0x5ffe <fmod+0x32>
    600a:	bb 27       	eor	r27, r27
    600c:	e9 1b       	sub	r30, r25
    600e:	f5 0b       	sbc	r31, r21
    6010:	62 1b       	sub	r22, r18
    6012:	73 0b       	sbc	r23, r19
    6014:	84 0b       	sbc	r24, r20
    6016:	b1 09       	sbc	r27, r1
    6018:	c1 f2       	breq	.-80     	; 0x5fca <__floatsisf+0x82>
    601a:	22 f4       	brpl	.+8      	; 0x6024 <fmod+0x58>
    601c:	62 0f       	add	r22, r18
    601e:	73 1f       	adc	r23, r19
    6020:	84 1f       	adc	r24, r20
    6022:	b1 1d       	adc	r27, r1
    6024:	31 97       	sbiw	r30, 0x01	; 1
    6026:	2a f0       	brmi	.+10     	; 0x6032 <fmod+0x66>
    6028:	66 0f       	add	r22, r22
    602a:	77 1f       	adc	r23, r23
    602c:	88 1f       	adc	r24, r24
    602e:	bb 1f       	adc	r27, r27
    6030:	ef cf       	rjmp	.-34     	; 0x6010 <fmod+0x44>
    6032:	91 50       	subi	r25, 0x01	; 1
    6034:	50 40       	sbci	r21, 0x00	; 0
    6036:	5a f0       	brmi	.+22     	; 0x604e <fmod+0x82>
    6038:	41 f0       	breq	.+16     	; 0x604a <fmod+0x7e>
    603a:	88 23       	and	r24, r24
    603c:	32 f0       	brmi	.+12     	; 0x604a <fmod+0x7e>
    603e:	66 0f       	add	r22, r22
    6040:	77 1f       	adc	r23, r23
    6042:	88 1f       	adc	r24, r24
    6044:	91 50       	subi	r25, 0x01	; 1
    6046:	50 40       	sbci	r21, 0x00	; 0
    6048:	c1 f7       	brne	.-16     	; 0x603a <fmod+0x6e>
    604a:	93 95       	inc	r25
    604c:	30 c0       	rjmp	.+96     	; 0x60ae <__fp_mpack>
    604e:	86 95       	lsr	r24
    6050:	77 95       	ror	r23
    6052:	67 95       	ror	r22
    6054:	9f 5f       	subi	r25, 0xFF	; 255
    6056:	d9 f7       	brne	.-10     	; 0x604e <fmod+0x82>
    6058:	f8 cf       	rjmp	.-16     	; 0x604a <fmod+0x7e>

0000605a <__fp_cmp>:
    605a:	99 0f       	add	r25, r25
    605c:	00 08       	sbc	r0, r0
    605e:	55 0f       	add	r21, r21
    6060:	aa 0b       	sbc	r26, r26
    6062:	e0 e8       	ldi	r30, 0x80	; 128
    6064:	fe ef       	ldi	r31, 0xFE	; 254
    6066:	16 16       	cp	r1, r22
    6068:	17 06       	cpc	r1, r23
    606a:	e8 07       	cpc	r30, r24
    606c:	f9 07       	cpc	r31, r25
    606e:	c0 f0       	brcs	.+48     	; 0x60a0 <__fp_cmp+0x46>
    6070:	12 16       	cp	r1, r18
    6072:	13 06       	cpc	r1, r19
    6074:	e4 07       	cpc	r30, r20
    6076:	f5 07       	cpc	r31, r21
    6078:	98 f0       	brcs	.+38     	; 0x60a0 <__fp_cmp+0x46>
    607a:	62 1b       	sub	r22, r18
    607c:	73 0b       	sbc	r23, r19
    607e:	84 0b       	sbc	r24, r20
    6080:	95 0b       	sbc	r25, r21
    6082:	39 f4       	brne	.+14     	; 0x6092 <__fp_cmp+0x38>
    6084:	0a 26       	eor	r0, r26
    6086:	61 f0       	breq	.+24     	; 0x60a0 <__fp_cmp+0x46>
    6088:	23 2b       	or	r18, r19
    608a:	24 2b       	or	r18, r20
    608c:	25 2b       	or	r18, r21
    608e:	21 f4       	brne	.+8      	; 0x6098 <__fp_cmp+0x3e>
    6090:	08 95       	ret
    6092:	0a 26       	eor	r0, r26
    6094:	09 f4       	brne	.+2      	; 0x6098 <__fp_cmp+0x3e>
    6096:	a1 40       	sbci	r26, 0x01	; 1
    6098:	a6 95       	lsr	r26
    609a:	8f ef       	ldi	r24, 0xFF	; 255
    609c:	81 1d       	adc	r24, r1
    609e:	81 1d       	adc	r24, r1
    60a0:	08 95       	ret

000060a2 <__fp_inf>:
    60a2:	97 f9       	bld	r25, 7
    60a4:	9f 67       	ori	r25, 0x7F	; 127
    60a6:	80 e8       	ldi	r24, 0x80	; 128
    60a8:	70 e0       	ldi	r23, 0x00	; 0
    60aa:	60 e0       	ldi	r22, 0x00	; 0
    60ac:	08 95       	ret

000060ae <__fp_mpack>:
    60ae:	9f 3f       	cpi	r25, 0xFF	; 255
    60b0:	31 f0       	breq	.+12     	; 0x60be <__fp_mpack_finite+0xc>

000060b2 <__fp_mpack_finite>:
    60b2:	91 50       	subi	r25, 0x01	; 1
    60b4:	20 f4       	brcc	.+8      	; 0x60be <__fp_mpack_finite+0xc>
    60b6:	87 95       	ror	r24
    60b8:	77 95       	ror	r23
    60ba:	67 95       	ror	r22
    60bc:	b7 95       	ror	r27
    60be:	88 0f       	add	r24, r24
    60c0:	91 1d       	adc	r25, r1
    60c2:	96 95       	lsr	r25
    60c4:	87 95       	ror	r24
    60c6:	97 f9       	bld	r25, 7
    60c8:	08 95       	ret

000060ca <__fp_nan>:
    60ca:	9f ef       	ldi	r25, 0xFF	; 255
    60cc:	80 ec       	ldi	r24, 0xC0	; 192
    60ce:	08 95       	ret

000060d0 <__fp_powser>:
    60d0:	df 93       	push	r29
    60d2:	cf 93       	push	r28
    60d4:	1f 93       	push	r17
    60d6:	0f 93       	push	r16
    60d8:	ff 92       	push	r15
    60da:	ef 92       	push	r14
    60dc:	df 92       	push	r13
    60de:	7b 01       	movw	r14, r22
    60e0:	8c 01       	movw	r16, r24
    60e2:	68 94       	set
    60e4:	05 c0       	rjmp	.+10     	; 0x60f0 <__fp_powser+0x20>
    60e6:	da 2e       	mov	r13, r26
    60e8:	ef 01       	movw	r28, r30
    60ea:	af d0       	rcall	.+350    	; 0x624a <__mulsf3x>
    60ec:	fe 01       	movw	r30, r28
    60ee:	e8 94       	clt
    60f0:	a5 91       	lpm	r26, Z+
    60f2:	25 91       	lpm	r18, Z+
    60f4:	35 91       	lpm	r19, Z+
    60f6:	45 91       	lpm	r20, Z+
    60f8:	55 91       	lpm	r21, Z+
    60fa:	ae f3       	brts	.-22     	; 0x60e6 <__fp_powser+0x16>
    60fc:	ef 01       	movw	r28, r30
    60fe:	cd dd       	rcall	.-1126   	; 0x5c9a <__addsf3x>
    6100:	fe 01       	movw	r30, r28
    6102:	97 01       	movw	r18, r14
    6104:	a8 01       	movw	r20, r16
    6106:	da 94       	dec	r13
    6108:	79 f7       	brne	.-34     	; 0x60e8 <__fp_powser+0x18>
    610a:	df 90       	pop	r13
    610c:	ef 90       	pop	r14
    610e:	ff 90       	pop	r15
    6110:	0f 91       	pop	r16
    6112:	1f 91       	pop	r17
    6114:	cf 91       	pop	r28
    6116:	df 91       	pop	r29
    6118:	08 95       	ret

0000611a <__fp_pscA>:
    611a:	00 24       	eor	r0, r0
    611c:	0a 94       	dec	r0
    611e:	16 16       	cp	r1, r22
    6120:	17 06       	cpc	r1, r23
    6122:	18 06       	cpc	r1, r24
    6124:	09 06       	cpc	r0, r25
    6126:	08 95       	ret

00006128 <__fp_pscB>:
    6128:	00 24       	eor	r0, r0
    612a:	0a 94       	dec	r0
    612c:	12 16       	cp	r1, r18
    612e:	13 06       	cpc	r1, r19
    6130:	14 06       	cpc	r1, r20
    6132:	05 06       	cpc	r0, r21
    6134:	08 95       	ret
    6136:	c9 cf       	rjmp	.-110    	; 0x60ca <__fp_nan>

00006138 <__fp_rempio2>:
    6138:	50 d0       	rcall	.+160    	; 0x61da <__fp_splitA>
    613a:	e8 f3       	brcs	.-6      	; 0x6136 <__fp_pscB+0xe>
    613c:	e8 94       	clt
    613e:	e0 e0       	ldi	r30, 0x00	; 0
    6140:	bb 27       	eor	r27, r27
    6142:	9f 57       	subi	r25, 0x7F	; 127
    6144:	f0 f0       	brcs	.+60     	; 0x6182 <__fp_rempio2+0x4a>
    6146:	2a ed       	ldi	r18, 0xDA	; 218
    6148:	3f e0       	ldi	r19, 0x0F	; 15
    614a:	49 ec       	ldi	r20, 0xC9	; 201
    614c:	06 c0       	rjmp	.+12     	; 0x615a <__fp_rempio2+0x22>
    614e:	ee 0f       	add	r30, r30
    6150:	bb 0f       	add	r27, r27
    6152:	66 1f       	adc	r22, r22
    6154:	77 1f       	adc	r23, r23
    6156:	88 1f       	adc	r24, r24
    6158:	28 f0       	brcs	.+10     	; 0x6164 <__fp_rempio2+0x2c>
    615a:	b2 3a       	cpi	r27, 0xA2	; 162
    615c:	62 07       	cpc	r22, r18
    615e:	73 07       	cpc	r23, r19
    6160:	84 07       	cpc	r24, r20
    6162:	28 f0       	brcs	.+10     	; 0x616e <__fp_rempio2+0x36>
    6164:	b2 5a       	subi	r27, 0xA2	; 162
    6166:	62 0b       	sbc	r22, r18
    6168:	73 0b       	sbc	r23, r19
    616a:	84 0b       	sbc	r24, r20
    616c:	e3 95       	inc	r30
    616e:	9a 95       	dec	r25
    6170:	72 f7       	brpl	.-36     	; 0x614e <__fp_rempio2+0x16>
    6172:	80 38       	cpi	r24, 0x80	; 128
    6174:	30 f4       	brcc	.+12     	; 0x6182 <__fp_rempio2+0x4a>
    6176:	9a 95       	dec	r25
    6178:	bb 0f       	add	r27, r27
    617a:	66 1f       	adc	r22, r22
    617c:	77 1f       	adc	r23, r23
    617e:	88 1f       	adc	r24, r24
    6180:	d2 f7       	brpl	.-12     	; 0x6176 <__fp_rempio2+0x3e>
    6182:	90 48       	sbci	r25, 0x80	; 128
    6184:	96 cf       	rjmp	.-212    	; 0x60b2 <__fp_mpack_finite>

00006186 <__fp_round>:
    6186:	09 2e       	mov	r0, r25
    6188:	03 94       	inc	r0
    618a:	00 0c       	add	r0, r0
    618c:	11 f4       	brne	.+4      	; 0x6192 <__fp_round+0xc>
    618e:	88 23       	and	r24, r24
    6190:	52 f0       	brmi	.+20     	; 0x61a6 <__fp_round+0x20>
    6192:	bb 0f       	add	r27, r27
    6194:	40 f4       	brcc	.+16     	; 0x61a6 <__fp_round+0x20>
    6196:	bf 2b       	or	r27, r31
    6198:	11 f4       	brne	.+4      	; 0x619e <__fp_round+0x18>
    619a:	60 ff       	sbrs	r22, 0
    619c:	04 c0       	rjmp	.+8      	; 0x61a6 <__fp_round+0x20>
    619e:	6f 5f       	subi	r22, 0xFF	; 255
    61a0:	7f 4f       	sbci	r23, 0xFF	; 255
    61a2:	8f 4f       	sbci	r24, 0xFF	; 255
    61a4:	9f 4f       	sbci	r25, 0xFF	; 255
    61a6:	08 95       	ret

000061a8 <__fp_sinus>:
    61a8:	ef 93       	push	r30
    61aa:	e0 ff       	sbrs	r30, 0
    61ac:	06 c0       	rjmp	.+12     	; 0x61ba <__fp_sinus+0x12>
    61ae:	a2 ea       	ldi	r26, 0xA2	; 162
    61b0:	2a ed       	ldi	r18, 0xDA	; 218
    61b2:	3f e0       	ldi	r19, 0x0F	; 15
    61b4:	49 ec       	ldi	r20, 0xC9	; 201
    61b6:	5f eb       	ldi	r21, 0xBF	; 191
    61b8:	70 dd       	rcall	.-1312   	; 0x5c9a <__addsf3x>
    61ba:	e5 df       	rcall	.-54     	; 0x6186 <__fp_round>
    61bc:	0f 90       	pop	r0
    61be:	03 94       	inc	r0
    61c0:	01 fc       	sbrc	r0, 1
    61c2:	90 58       	subi	r25, 0x80	; 128
    61c4:	e3 e5       	ldi	r30, 0x53	; 83
    61c6:	f2 e0       	ldi	r31, 0x02	; 2
    61c8:	e9 c0       	rjmp	.+466    	; 0x639c <__fp_powsodd>

000061ca <__fp_split3>:
    61ca:	57 fd       	sbrc	r21, 7
    61cc:	90 58       	subi	r25, 0x80	; 128
    61ce:	44 0f       	add	r20, r20
    61d0:	55 1f       	adc	r21, r21
    61d2:	59 f0       	breq	.+22     	; 0x61ea <__fp_splitA+0x10>
    61d4:	5f 3f       	cpi	r21, 0xFF	; 255
    61d6:	71 f0       	breq	.+28     	; 0x61f4 <__fp_splitA+0x1a>
    61d8:	47 95       	ror	r20

000061da <__fp_splitA>:
    61da:	88 0f       	add	r24, r24
    61dc:	97 fb       	bst	r25, 7
    61de:	99 1f       	adc	r25, r25
    61e0:	61 f0       	breq	.+24     	; 0x61fa <__fp_splitA+0x20>
    61e2:	9f 3f       	cpi	r25, 0xFF	; 255
    61e4:	79 f0       	breq	.+30     	; 0x6204 <__fp_splitA+0x2a>
    61e6:	87 95       	ror	r24
    61e8:	08 95       	ret
    61ea:	12 16       	cp	r1, r18
    61ec:	13 06       	cpc	r1, r19
    61ee:	14 06       	cpc	r1, r20
    61f0:	55 1f       	adc	r21, r21
    61f2:	f2 cf       	rjmp	.-28     	; 0x61d8 <__fp_split3+0xe>
    61f4:	46 95       	lsr	r20
    61f6:	f1 df       	rcall	.-30     	; 0x61da <__fp_splitA>
    61f8:	08 c0       	rjmp	.+16     	; 0x620a <__fp_splitA+0x30>
    61fa:	16 16       	cp	r1, r22
    61fc:	17 06       	cpc	r1, r23
    61fe:	18 06       	cpc	r1, r24
    6200:	99 1f       	adc	r25, r25
    6202:	f1 cf       	rjmp	.-30     	; 0x61e6 <__fp_splitA+0xc>
    6204:	86 95       	lsr	r24
    6206:	71 05       	cpc	r23, r1
    6208:	61 05       	cpc	r22, r1
    620a:	08 94       	sec
    620c:	08 95       	ret

0000620e <__fp_zero>:
    620e:	e8 94       	clt

00006210 <__fp_szero>:
    6210:	bb 27       	eor	r27, r27
    6212:	66 27       	eor	r22, r22
    6214:	77 27       	eor	r23, r23
    6216:	cb 01       	movw	r24, r22
    6218:	97 f9       	bld	r25, 7
    621a:	08 95       	ret

0000621c <__gesf2>:
    621c:	1e df       	rcall	.-452    	; 0x605a <__fp_cmp>
    621e:	08 f4       	brcc	.+2      	; 0x6222 <__gesf2+0x6>
    6220:	8f ef       	ldi	r24, 0xFF	; 255
    6222:	08 95       	ret

00006224 <inverse>:
    6224:	9b 01       	movw	r18, r22
    6226:	ac 01       	movw	r20, r24
    6228:	60 e0       	ldi	r22, 0x00	; 0
    622a:	70 e0       	ldi	r23, 0x00	; 0
    622c:	80 e8       	ldi	r24, 0x80	; 128
    622e:	9f e3       	ldi	r25, 0x3F	; 63
    6230:	f0 cd       	rjmp	.-1056   	; 0x5e12 <__divsf3>

00006232 <__mulsf3>:
    6232:	0b d0       	rcall	.+22     	; 0x624a <__mulsf3x>
    6234:	a8 cf       	rjmp	.-176    	; 0x6186 <__fp_round>
    6236:	71 df       	rcall	.-286    	; 0x611a <__fp_pscA>
    6238:	28 f0       	brcs	.+10     	; 0x6244 <__mulsf3+0x12>
    623a:	76 df       	rcall	.-276    	; 0x6128 <__fp_pscB>
    623c:	18 f0       	brcs	.+6      	; 0x6244 <__mulsf3+0x12>
    623e:	95 23       	and	r25, r21
    6240:	09 f0       	breq	.+2      	; 0x6244 <__mulsf3+0x12>
    6242:	2f cf       	rjmp	.-418    	; 0x60a2 <__fp_inf>
    6244:	42 cf       	rjmp	.-380    	; 0x60ca <__fp_nan>
    6246:	11 24       	eor	r1, r1
    6248:	e3 cf       	rjmp	.-58     	; 0x6210 <__fp_szero>

0000624a <__mulsf3x>:
    624a:	bf df       	rcall	.-130    	; 0x61ca <__fp_split3>
    624c:	a0 f3       	brcs	.-24     	; 0x6236 <__mulsf3+0x4>

0000624e <__mulsf3_pse>:
    624e:	95 9f       	mul	r25, r21
    6250:	d1 f3       	breq	.-12     	; 0x6246 <__mulsf3+0x14>
    6252:	95 0f       	add	r25, r21
    6254:	50 e0       	ldi	r21, 0x00	; 0
    6256:	55 1f       	adc	r21, r21
    6258:	62 9f       	mul	r22, r18
    625a:	f0 01       	movw	r30, r0
    625c:	72 9f       	mul	r23, r18
    625e:	bb 27       	eor	r27, r27
    6260:	f0 0d       	add	r31, r0
    6262:	b1 1d       	adc	r27, r1
    6264:	63 9f       	mul	r22, r19
    6266:	aa 27       	eor	r26, r26
    6268:	f0 0d       	add	r31, r0
    626a:	b1 1d       	adc	r27, r1
    626c:	aa 1f       	adc	r26, r26
    626e:	64 9f       	mul	r22, r20
    6270:	66 27       	eor	r22, r22
    6272:	b0 0d       	add	r27, r0
    6274:	a1 1d       	adc	r26, r1
    6276:	66 1f       	adc	r22, r22
    6278:	82 9f       	mul	r24, r18
    627a:	22 27       	eor	r18, r18
    627c:	b0 0d       	add	r27, r0
    627e:	a1 1d       	adc	r26, r1
    6280:	62 1f       	adc	r22, r18
    6282:	73 9f       	mul	r23, r19
    6284:	b0 0d       	add	r27, r0
    6286:	a1 1d       	adc	r26, r1
    6288:	62 1f       	adc	r22, r18
    628a:	83 9f       	mul	r24, r19
    628c:	a0 0d       	add	r26, r0
    628e:	61 1d       	adc	r22, r1
    6290:	22 1f       	adc	r18, r18
    6292:	74 9f       	mul	r23, r20
    6294:	33 27       	eor	r19, r19
    6296:	a0 0d       	add	r26, r0
    6298:	61 1d       	adc	r22, r1
    629a:	23 1f       	adc	r18, r19
    629c:	84 9f       	mul	r24, r20
    629e:	60 0d       	add	r22, r0
    62a0:	21 1d       	adc	r18, r1
    62a2:	82 2f       	mov	r24, r18
    62a4:	76 2f       	mov	r23, r22
    62a6:	6a 2f       	mov	r22, r26
    62a8:	11 24       	eor	r1, r1
    62aa:	9f 57       	subi	r25, 0x7F	; 127
    62ac:	50 40       	sbci	r21, 0x00	; 0
    62ae:	8a f0       	brmi	.+34     	; 0x62d2 <__mulsf3_pse+0x84>
    62b0:	e1 f0       	breq	.+56     	; 0x62ea <__mulsf3_pse+0x9c>
    62b2:	88 23       	and	r24, r24
    62b4:	4a f0       	brmi	.+18     	; 0x62c8 <__mulsf3_pse+0x7a>
    62b6:	ee 0f       	add	r30, r30
    62b8:	ff 1f       	adc	r31, r31
    62ba:	bb 1f       	adc	r27, r27
    62bc:	66 1f       	adc	r22, r22
    62be:	77 1f       	adc	r23, r23
    62c0:	88 1f       	adc	r24, r24
    62c2:	91 50       	subi	r25, 0x01	; 1
    62c4:	50 40       	sbci	r21, 0x00	; 0
    62c6:	a9 f7       	brne	.-22     	; 0x62b2 <__mulsf3_pse+0x64>
    62c8:	9e 3f       	cpi	r25, 0xFE	; 254
    62ca:	51 05       	cpc	r21, r1
    62cc:	70 f0       	brcs	.+28     	; 0x62ea <__mulsf3_pse+0x9c>
    62ce:	e9 ce       	rjmp	.-558    	; 0x60a2 <__fp_inf>
    62d0:	9f cf       	rjmp	.-194    	; 0x6210 <__fp_szero>
    62d2:	5f 3f       	cpi	r21, 0xFF	; 255
    62d4:	ec f3       	brlt	.-6      	; 0x62d0 <__mulsf3_pse+0x82>
    62d6:	98 3e       	cpi	r25, 0xE8	; 232
    62d8:	dc f3       	brlt	.-10     	; 0x62d0 <__mulsf3_pse+0x82>
    62da:	86 95       	lsr	r24
    62dc:	77 95       	ror	r23
    62de:	67 95       	ror	r22
    62e0:	b7 95       	ror	r27
    62e2:	f7 95       	ror	r31
    62e4:	e7 95       	ror	r30
    62e6:	9f 5f       	subi	r25, 0xFF	; 255
    62e8:	c1 f7       	brne	.-16     	; 0x62da <__mulsf3_pse+0x8c>
    62ea:	fe 2b       	or	r31, r30
    62ec:	88 0f       	add	r24, r24
    62ee:	91 1d       	adc	r25, r1
    62f0:	96 95       	lsr	r25
    62f2:	87 95       	ror	r24
    62f4:	97 f9       	bld	r25, 7
    62f6:	08 95       	ret

000062f8 <sin>:
    62f8:	9f 93       	push	r25
    62fa:	1e df       	rcall	.-452    	; 0x6138 <__fp_rempio2>
    62fc:	0f 90       	pop	r0
    62fe:	07 fc       	sbrc	r0, 7
    6300:	ee 5f       	subi	r30, 0xFE	; 254
    6302:	52 cf       	rjmp	.-348    	; 0x61a8 <__fp_sinus>
    6304:	11 f4       	brne	.+4      	; 0x630a <sin+0x12>
    6306:	0e f4       	brtc	.+2      	; 0x630a <sin+0x12>
    6308:	e0 ce       	rjmp	.-576    	; 0x60ca <__fp_nan>
    630a:	d1 ce       	rjmp	.-606    	; 0x60ae <__fp_mpack>

0000630c <sqrt>:
    630c:	66 df       	rcall	.-308    	; 0x61da <__fp_splitA>
    630e:	d0 f3       	brcs	.-12     	; 0x6304 <sin+0xc>
    6310:	99 23       	and	r25, r25
    6312:	d9 f3       	breq	.-10     	; 0x630a <sin+0x12>
    6314:	ce f3       	brts	.-14     	; 0x6308 <sin+0x10>
    6316:	9f 57       	subi	r25, 0x7F	; 127
    6318:	55 0b       	sbc	r21, r21
    631a:	87 ff       	sbrs	r24, 7
    631c:	38 d0       	rcall	.+112    	; 0x638e <__fp_norm2>
    631e:	00 24       	eor	r0, r0
    6320:	a0 e6       	ldi	r26, 0x60	; 96
    6322:	40 ea       	ldi	r20, 0xA0	; 160
    6324:	90 01       	movw	r18, r0
    6326:	80 58       	subi	r24, 0x80	; 128
    6328:	56 95       	lsr	r21
    632a:	97 95       	ror	r25
    632c:	28 f4       	brcc	.+10     	; 0x6338 <sqrt+0x2c>
    632e:	80 5c       	subi	r24, 0xC0	; 192
    6330:	66 0f       	add	r22, r22
    6332:	77 1f       	adc	r23, r23
    6334:	88 1f       	adc	r24, r24
    6336:	20 f0       	brcs	.+8      	; 0x6340 <sqrt+0x34>
    6338:	26 17       	cp	r18, r22
    633a:	37 07       	cpc	r19, r23
    633c:	48 07       	cpc	r20, r24
    633e:	30 f4       	brcc	.+12     	; 0x634c <sqrt+0x40>
    6340:	62 1b       	sub	r22, r18
    6342:	73 0b       	sbc	r23, r19
    6344:	84 0b       	sbc	r24, r20
    6346:	20 29       	or	r18, r0
    6348:	31 29       	or	r19, r1
    634a:	4a 2b       	or	r20, r26
    634c:	a6 95       	lsr	r26
    634e:	17 94       	ror	r1
    6350:	07 94       	ror	r0
    6352:	20 25       	eor	r18, r0
    6354:	31 25       	eor	r19, r1
    6356:	4a 27       	eor	r20, r26
    6358:	58 f7       	brcc	.-42     	; 0x6330 <sqrt+0x24>
    635a:	66 0f       	add	r22, r22
    635c:	77 1f       	adc	r23, r23
    635e:	88 1f       	adc	r24, r24
    6360:	20 f0       	brcs	.+8      	; 0x636a <sqrt+0x5e>
    6362:	26 17       	cp	r18, r22
    6364:	37 07       	cpc	r19, r23
    6366:	48 07       	cpc	r20, r24
    6368:	30 f4       	brcc	.+12     	; 0x6376 <sqrt+0x6a>
    636a:	62 0b       	sbc	r22, r18
    636c:	73 0b       	sbc	r23, r19
    636e:	84 0b       	sbc	r24, r20
    6370:	20 0d       	add	r18, r0
    6372:	31 1d       	adc	r19, r1
    6374:	41 1d       	adc	r20, r1
    6376:	a0 95       	com	r26
    6378:	81 f7       	brne	.-32     	; 0x635a <sqrt+0x4e>
    637a:	b9 01       	movw	r22, r18
    637c:	84 2f       	mov	r24, r20
    637e:	91 58       	subi	r25, 0x81	; 129
    6380:	88 0f       	add	r24, r24
    6382:	96 95       	lsr	r25
    6384:	87 95       	ror	r24
    6386:	08 95       	ret

00006388 <square>:
    6388:	9b 01       	movw	r18, r22
    638a:	ac 01       	movw	r20, r24
    638c:	52 cf       	rjmp	.-348    	; 0x6232 <__mulsf3>

0000638e <__fp_norm2>:
    638e:	91 50       	subi	r25, 0x01	; 1
    6390:	50 40       	sbci	r21, 0x00	; 0
    6392:	66 0f       	add	r22, r22
    6394:	77 1f       	adc	r23, r23
    6396:	88 1f       	adc	r24, r24
    6398:	d2 f7       	brpl	.-12     	; 0x638e <__fp_norm2>
    639a:	08 95       	ret

0000639c <__fp_powsodd>:
    639c:	9f 93       	push	r25
    639e:	8f 93       	push	r24
    63a0:	7f 93       	push	r23
    63a2:	6f 93       	push	r22
    63a4:	ff 93       	push	r31
    63a6:	ef 93       	push	r30
    63a8:	9b 01       	movw	r18, r22
    63aa:	ac 01       	movw	r20, r24
    63ac:	42 df       	rcall	.-380    	; 0x6232 <__mulsf3>
    63ae:	ef 91       	pop	r30
    63b0:	ff 91       	pop	r31
    63b2:	8e de       	rcall	.-740    	; 0x60d0 <__fp_powser>
    63b4:	2f 91       	pop	r18
    63b6:	3f 91       	pop	r19
    63b8:	4f 91       	pop	r20
    63ba:	5f 91       	pop	r21
    63bc:	3a cf       	rjmp	.-396    	; 0x6232 <__mulsf3>

000063be <vfprintf>:
    63be:	2f 92       	push	r2
    63c0:	3f 92       	push	r3
    63c2:	4f 92       	push	r4
    63c4:	5f 92       	push	r5
    63c6:	6f 92       	push	r6
    63c8:	7f 92       	push	r7
    63ca:	8f 92       	push	r8
    63cc:	9f 92       	push	r9
    63ce:	af 92       	push	r10
    63d0:	bf 92       	push	r11
    63d2:	cf 92       	push	r12
    63d4:	df 92       	push	r13
    63d6:	ef 92       	push	r14
    63d8:	ff 92       	push	r15
    63da:	0f 93       	push	r16
    63dc:	1f 93       	push	r17
    63de:	cf 93       	push	r28
    63e0:	df 93       	push	r29
    63e2:	cd b7       	in	r28, 0x3d	; 61
    63e4:	de b7       	in	r29, 0x3e	; 62
    63e6:	63 97       	sbiw	r28, 0x13	; 19
    63e8:	cd bf       	out	0x3d, r28	; 61
    63ea:	de bf       	out	0x3e, r29	; 62
    63ec:	7c 01       	movw	r14, r24
    63ee:	1b 01       	movw	r2, r22
    63f0:	6a 01       	movw	r12, r20
    63f2:	fc 01       	movw	r30, r24
    63f4:	16 82       	std	Z+6, r1	; 0x06
    63f6:	17 82       	std	Z+7, r1	; 0x07
    63f8:	83 81       	ldd	r24, Z+3	; 0x03
    63fa:	81 ff       	sbrs	r24, 1
    63fc:	49 c3       	rjmp	.+1682   	; 0x6a90 <vfprintf+0x6d2>
    63fe:	be 01       	movw	r22, r28
    6400:	6f 5f       	subi	r22, 0xFF	; 255
    6402:	7f 4f       	sbci	r23, 0xFF	; 255
    6404:	4b 01       	movw	r8, r22
    6406:	f7 01       	movw	r30, r14
    6408:	93 81       	ldd	r25, Z+3	; 0x03
    640a:	f1 01       	movw	r30, r2
    640c:	93 fd       	sbrc	r25, 3
    640e:	85 91       	lpm	r24, Z+
    6410:	93 ff       	sbrs	r25, 3
    6412:	81 91       	ld	r24, Z+
    6414:	1f 01       	movw	r2, r30
    6416:	88 23       	and	r24, r24
    6418:	09 f4       	brne	.+2      	; 0x641c <vfprintf+0x5e>
    641a:	36 c3       	rjmp	.+1644   	; 0x6a88 <vfprintf+0x6ca>
    641c:	85 32       	cpi	r24, 0x25	; 37
    641e:	39 f4       	brne	.+14     	; 0x642e <vfprintf+0x70>
    6420:	93 fd       	sbrc	r25, 3
    6422:	85 91       	lpm	r24, Z+
    6424:	93 ff       	sbrs	r25, 3
    6426:	81 91       	ld	r24, Z+
    6428:	1f 01       	movw	r2, r30
    642a:	85 32       	cpi	r24, 0x25	; 37
    642c:	31 f4       	brne	.+12     	; 0x643a <vfprintf+0x7c>
    642e:	b7 01       	movw	r22, r14
    6430:	90 e0       	ldi	r25, 0x00	; 0
    6432:	0f d6       	rcall	.+3102   	; 0x7052 <fputc>
    6434:	56 01       	movw	r10, r12
    6436:	65 01       	movw	r12, r10
    6438:	e6 cf       	rjmp	.-52     	; 0x6406 <vfprintf+0x48>
    643a:	10 e0       	ldi	r17, 0x00	; 0
    643c:	51 2c       	mov	r5, r1
    643e:	20 e0       	ldi	r18, 0x00	; 0
    6440:	20 32       	cpi	r18, 0x20	; 32
    6442:	a0 f4       	brcc	.+40     	; 0x646c <vfprintf+0xae>
    6444:	8b 32       	cpi	r24, 0x2B	; 43
    6446:	69 f0       	breq	.+26     	; 0x6462 <vfprintf+0xa4>
    6448:	30 f4       	brcc	.+12     	; 0x6456 <vfprintf+0x98>
    644a:	80 32       	cpi	r24, 0x20	; 32
    644c:	59 f0       	breq	.+22     	; 0x6464 <vfprintf+0xa6>
    644e:	83 32       	cpi	r24, 0x23	; 35
    6450:	69 f4       	brne	.+26     	; 0x646c <vfprintf+0xae>
    6452:	20 61       	ori	r18, 0x10	; 16
    6454:	2c c0       	rjmp	.+88     	; 0x64ae <vfprintf+0xf0>
    6456:	8d 32       	cpi	r24, 0x2D	; 45
    6458:	39 f0       	breq	.+14     	; 0x6468 <vfprintf+0xaa>
    645a:	80 33       	cpi	r24, 0x30	; 48
    645c:	39 f4       	brne	.+14     	; 0x646c <vfprintf+0xae>
    645e:	21 60       	ori	r18, 0x01	; 1
    6460:	26 c0       	rjmp	.+76     	; 0x64ae <vfprintf+0xf0>
    6462:	22 60       	ori	r18, 0x02	; 2
    6464:	24 60       	ori	r18, 0x04	; 4
    6466:	23 c0       	rjmp	.+70     	; 0x64ae <vfprintf+0xf0>
    6468:	28 60       	ori	r18, 0x08	; 8
    646a:	21 c0       	rjmp	.+66     	; 0x64ae <vfprintf+0xf0>
    646c:	27 fd       	sbrc	r18, 7
    646e:	27 c0       	rjmp	.+78     	; 0x64be <vfprintf+0x100>
    6470:	30 ed       	ldi	r19, 0xD0	; 208
    6472:	38 0f       	add	r19, r24
    6474:	3a 30       	cpi	r19, 0x0A	; 10
    6476:	78 f4       	brcc	.+30     	; 0x6496 <vfprintf+0xd8>
    6478:	26 ff       	sbrs	r18, 6
    647a:	06 c0       	rjmp	.+12     	; 0x6488 <vfprintf+0xca>
    647c:	fa e0       	ldi	r31, 0x0A	; 10
    647e:	1f 9f       	mul	r17, r31
    6480:	30 0d       	add	r19, r0
    6482:	11 24       	eor	r1, r1
    6484:	13 2f       	mov	r17, r19
    6486:	13 c0       	rjmp	.+38     	; 0x64ae <vfprintf+0xf0>
    6488:	6a e0       	ldi	r22, 0x0A	; 10
    648a:	56 9e       	mul	r5, r22
    648c:	30 0d       	add	r19, r0
    648e:	11 24       	eor	r1, r1
    6490:	53 2e       	mov	r5, r19
    6492:	20 62       	ori	r18, 0x20	; 32
    6494:	0c c0       	rjmp	.+24     	; 0x64ae <vfprintf+0xf0>
    6496:	8e 32       	cpi	r24, 0x2E	; 46
    6498:	21 f4       	brne	.+8      	; 0x64a2 <vfprintf+0xe4>
    649a:	26 fd       	sbrc	r18, 6
    649c:	f5 c2       	rjmp	.+1514   	; 0x6a88 <vfprintf+0x6ca>
    649e:	20 64       	ori	r18, 0x40	; 64
    64a0:	06 c0       	rjmp	.+12     	; 0x64ae <vfprintf+0xf0>
    64a2:	8c 36       	cpi	r24, 0x6C	; 108
    64a4:	11 f4       	brne	.+4      	; 0x64aa <vfprintf+0xec>
    64a6:	20 68       	ori	r18, 0x80	; 128
    64a8:	02 c0       	rjmp	.+4      	; 0x64ae <vfprintf+0xf0>
    64aa:	88 36       	cpi	r24, 0x68	; 104
    64ac:	41 f4       	brne	.+16     	; 0x64be <vfprintf+0x100>
    64ae:	f1 01       	movw	r30, r2
    64b0:	93 fd       	sbrc	r25, 3
    64b2:	85 91       	lpm	r24, Z+
    64b4:	93 ff       	sbrs	r25, 3
    64b6:	81 91       	ld	r24, Z+
    64b8:	1f 01       	movw	r2, r30
    64ba:	81 11       	cpse	r24, r1
    64bc:	c1 cf       	rjmp	.-126    	; 0x6440 <vfprintf+0x82>
    64be:	9b eb       	ldi	r25, 0xBB	; 187
    64c0:	98 0f       	add	r25, r24
    64c2:	93 30       	cpi	r25, 0x03	; 3
    64c4:	18 f4       	brcc	.+6      	; 0x64cc <vfprintf+0x10e>
    64c6:	20 61       	ori	r18, 0x10	; 16
    64c8:	80 5e       	subi	r24, 0xE0	; 224
    64ca:	06 c0       	rjmp	.+12     	; 0x64d8 <vfprintf+0x11a>
    64cc:	9b e9       	ldi	r25, 0x9B	; 155
    64ce:	98 0f       	add	r25, r24
    64d0:	93 30       	cpi	r25, 0x03	; 3
    64d2:	08 f0       	brcs	.+2      	; 0x64d6 <vfprintf+0x118>
    64d4:	9a c1       	rjmp	.+820    	; 0x680a <vfprintf+0x44c>
    64d6:	2f 7e       	andi	r18, 0xEF	; 239
    64d8:	26 ff       	sbrs	r18, 6
    64da:	16 e0       	ldi	r17, 0x06	; 6
    64dc:	2f 73       	andi	r18, 0x3F	; 63
    64de:	72 2e       	mov	r7, r18
    64e0:	85 36       	cpi	r24, 0x65	; 101
    64e2:	21 f4       	brne	.+8      	; 0x64ec <vfprintf+0x12e>
    64e4:	f2 2f       	mov	r31, r18
    64e6:	f0 64       	ori	r31, 0x40	; 64
    64e8:	7f 2e       	mov	r7, r31
    64ea:	08 c0       	rjmp	.+16     	; 0x64fc <vfprintf+0x13e>
    64ec:	86 36       	cpi	r24, 0x66	; 102
    64ee:	21 f4       	brne	.+8      	; 0x64f8 <vfprintf+0x13a>
    64f0:	62 2f       	mov	r22, r18
    64f2:	60 68       	ori	r22, 0x80	; 128
    64f4:	76 2e       	mov	r7, r22
    64f6:	02 c0       	rjmp	.+4      	; 0x64fc <vfprintf+0x13e>
    64f8:	11 11       	cpse	r17, r1
    64fa:	11 50       	subi	r17, 0x01	; 1
    64fc:	77 fe       	sbrs	r7, 7
    64fe:	07 c0       	rjmp	.+14     	; 0x650e <vfprintf+0x150>
    6500:	1c 33       	cpi	r17, 0x3C	; 60
    6502:	48 f4       	brcc	.+18     	; 0x6516 <vfprintf+0x158>
    6504:	44 24       	eor	r4, r4
    6506:	43 94       	inc	r4
    6508:	41 0e       	add	r4, r17
    650a:	27 e0       	ldi	r18, 0x07	; 7
    650c:	0b c0       	rjmp	.+22     	; 0x6524 <vfprintf+0x166>
    650e:	18 30       	cpi	r17, 0x08	; 8
    6510:	30 f4       	brcc	.+12     	; 0x651e <vfprintf+0x160>
    6512:	21 2f       	mov	r18, r17
    6514:	06 c0       	rjmp	.+12     	; 0x6522 <vfprintf+0x164>
    6516:	27 e0       	ldi	r18, 0x07	; 7
    6518:	4c e3       	ldi	r20, 0x3C	; 60
    651a:	44 2e       	mov	r4, r20
    651c:	03 c0       	rjmp	.+6      	; 0x6524 <vfprintf+0x166>
    651e:	27 e0       	ldi	r18, 0x07	; 7
    6520:	17 e0       	ldi	r17, 0x07	; 7
    6522:	41 2c       	mov	r4, r1
    6524:	56 01       	movw	r10, r12
    6526:	74 e0       	ldi	r23, 0x04	; 4
    6528:	a7 0e       	add	r10, r23
    652a:	b1 1c       	adc	r11, r1
    652c:	f6 01       	movw	r30, r12
    652e:	60 81       	ld	r22, Z
    6530:	71 81       	ldd	r23, Z+1	; 0x01
    6532:	82 81       	ldd	r24, Z+2	; 0x02
    6534:	93 81       	ldd	r25, Z+3	; 0x03
    6536:	04 2d       	mov	r16, r4
    6538:	a4 01       	movw	r20, r8
    653a:	2c d4       	rcall	.+2136   	; 0x6d94 <__ftoa_engine>
    653c:	6c 01       	movw	r12, r24
    653e:	09 81       	ldd	r16, Y+1	; 0x01
    6540:	00 ff       	sbrs	r16, 0
    6542:	02 c0       	rjmp	.+4      	; 0x6548 <vfprintf+0x18a>
    6544:	03 ff       	sbrs	r16, 3
    6546:	06 c0       	rjmp	.+12     	; 0x6554 <vfprintf+0x196>
    6548:	71 fc       	sbrc	r7, 1
    654a:	07 c0       	rjmp	.+14     	; 0x655a <vfprintf+0x19c>
    654c:	72 fc       	sbrc	r7, 2
    654e:	08 c0       	rjmp	.+16     	; 0x6560 <vfprintf+0x1a2>
    6550:	61 2c       	mov	r6, r1
    6552:	08 c0       	rjmp	.+16     	; 0x6564 <vfprintf+0x1a6>
    6554:	3d e2       	ldi	r19, 0x2D	; 45
    6556:	63 2e       	mov	r6, r19
    6558:	05 c0       	rjmp	.+10     	; 0x6564 <vfprintf+0x1a6>
    655a:	2b e2       	ldi	r18, 0x2B	; 43
    655c:	62 2e       	mov	r6, r18
    655e:	02 c0       	rjmp	.+4      	; 0x6564 <vfprintf+0x1a6>
    6560:	90 e2       	ldi	r25, 0x20	; 32
    6562:	69 2e       	mov	r6, r25
    6564:	80 2f       	mov	r24, r16
    6566:	8c 70       	andi	r24, 0x0C	; 12
    6568:	81 f1       	breq	.+96     	; 0x65ca <vfprintf+0x20c>
    656a:	66 20       	and	r6, r6
    656c:	11 f0       	breq	.+4      	; 0x6572 <vfprintf+0x1b4>
    656e:	84 e0       	ldi	r24, 0x04	; 4
    6570:	01 c0       	rjmp	.+2      	; 0x6574 <vfprintf+0x1b6>
    6572:	83 e0       	ldi	r24, 0x03	; 3
    6574:	85 15       	cp	r24, r5
    6576:	10 f0       	brcs	.+4      	; 0x657c <vfprintf+0x1be>
    6578:	51 2c       	mov	r5, r1
    657a:	0a c0       	rjmp	.+20     	; 0x6590 <vfprintf+0x1d2>
    657c:	58 1a       	sub	r5, r24
    657e:	73 fc       	sbrc	r7, 3
    6580:	07 c0       	rjmp	.+14     	; 0x6590 <vfprintf+0x1d2>
    6582:	b7 01       	movw	r22, r14
    6584:	80 e2       	ldi	r24, 0x20	; 32
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	64 d5       	rcall	.+2760   	; 0x7052 <fputc>
    658a:	5a 94       	dec	r5
    658c:	d1 f7       	brne	.-12     	; 0x6582 <vfprintf+0x1c4>
    658e:	f4 cf       	rjmp	.-24     	; 0x6578 <vfprintf+0x1ba>
    6590:	66 20       	and	r6, r6
    6592:	21 f0       	breq	.+8      	; 0x659c <vfprintf+0x1de>
    6594:	b7 01       	movw	r22, r14
    6596:	86 2d       	mov	r24, r6
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	5b d5       	rcall	.+2742   	; 0x7052 <fputc>
    659c:	03 fd       	sbrc	r16, 3
    659e:	03 c0       	rjmp	.+6      	; 0x65a6 <vfprintf+0x1e8>
    65a0:	06 e7       	ldi	r16, 0x76	; 118
    65a2:	12 e0       	ldi	r17, 0x02	; 2
    65a4:	02 c0       	rjmp	.+4      	; 0x65aa <vfprintf+0x1ec>
    65a6:	02 e7       	ldi	r16, 0x72	; 114
    65a8:	12 e0       	ldi	r17, 0x02	; 2
    65aa:	f7 2d       	mov	r31, r7
    65ac:	f0 71       	andi	r31, 0x10	; 16
    65ae:	7f 2e       	mov	r7, r31
    65b0:	f8 01       	movw	r30, r16
    65b2:	84 91       	lpm	r24, Z
    65b4:	88 23       	and	r24, r24
    65b6:	09 f4       	brne	.+2      	; 0x65ba <vfprintf+0x1fc>
    65b8:	5e c2       	rjmp	.+1212   	; 0x6a76 <vfprintf+0x6b8>
    65ba:	71 10       	cpse	r7, r1
    65bc:	80 52       	subi	r24, 0x20	; 32
    65be:	b7 01       	movw	r22, r14
    65c0:	90 e0       	ldi	r25, 0x00	; 0
    65c2:	47 d5       	rcall	.+2702   	; 0x7052 <fputc>
    65c4:	0f 5f       	subi	r16, 0xFF	; 255
    65c6:	1f 4f       	sbci	r17, 0xFF	; 255
    65c8:	f3 cf       	rjmp	.-26     	; 0x65b0 <vfprintf+0x1f2>
    65ca:	77 fe       	sbrs	r7, 7
    65cc:	0f c0       	rjmp	.+30     	; 0x65ec <vfprintf+0x22e>
    65ce:	4c 0c       	add	r4, r12
    65d0:	04 ff       	sbrs	r16, 4
    65d2:	04 c0       	rjmp	.+8      	; 0x65dc <vfprintf+0x21e>
    65d4:	8a 81       	ldd	r24, Y+2	; 0x02
    65d6:	81 33       	cpi	r24, 0x31	; 49
    65d8:	09 f4       	brne	.+2      	; 0x65dc <vfprintf+0x21e>
    65da:	4a 94       	dec	r4
    65dc:	14 14       	cp	r1, r4
    65de:	74 f5       	brge	.+92     	; 0x663c <vfprintf+0x27e>
    65e0:	f8 e0       	ldi	r31, 0x08	; 8
    65e2:	f4 15       	cp	r31, r4
    65e4:	78 f5       	brcc	.+94     	; 0x6644 <vfprintf+0x286>
    65e6:	88 e0       	ldi	r24, 0x08	; 8
    65e8:	48 2e       	mov	r4, r24
    65ea:	2c c0       	rjmp	.+88     	; 0x6644 <vfprintf+0x286>
    65ec:	76 fc       	sbrc	r7, 6
    65ee:	2a c0       	rjmp	.+84     	; 0x6644 <vfprintf+0x286>
    65f0:	81 2f       	mov	r24, r17
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	8c 15       	cp	r24, r12
    65f6:	9d 05       	cpc	r25, r13
    65f8:	9c f0       	brlt	.+38     	; 0x6620 <vfprintf+0x262>
    65fa:	6c ef       	ldi	r22, 0xFC	; 252
    65fc:	c6 16       	cp	r12, r22
    65fe:	6f ef       	ldi	r22, 0xFF	; 255
    6600:	d6 06       	cpc	r13, r22
    6602:	74 f0       	brlt	.+28     	; 0x6620 <vfprintf+0x262>
    6604:	77 2d       	mov	r23, r7
    6606:	70 68       	ori	r23, 0x80	; 128
    6608:	77 2e       	mov	r7, r23
    660a:	0a c0       	rjmp	.+20     	; 0x6620 <vfprintf+0x262>
    660c:	e2 e0       	ldi	r30, 0x02	; 2
    660e:	f0 e0       	ldi	r31, 0x00	; 0
    6610:	ec 0f       	add	r30, r28
    6612:	fd 1f       	adc	r31, r29
    6614:	e1 0f       	add	r30, r17
    6616:	f1 1d       	adc	r31, r1
    6618:	80 81       	ld	r24, Z
    661a:	80 33       	cpi	r24, 0x30	; 48
    661c:	19 f4       	brne	.+6      	; 0x6624 <vfprintf+0x266>
    661e:	11 50       	subi	r17, 0x01	; 1
    6620:	11 11       	cpse	r17, r1
    6622:	f4 cf       	rjmp	.-24     	; 0x660c <vfprintf+0x24e>
    6624:	77 fe       	sbrs	r7, 7
    6626:	0e c0       	rjmp	.+28     	; 0x6644 <vfprintf+0x286>
    6628:	44 24       	eor	r4, r4
    662a:	43 94       	inc	r4
    662c:	41 0e       	add	r4, r17
    662e:	81 2f       	mov	r24, r17
    6630:	90 e0       	ldi	r25, 0x00	; 0
    6632:	c8 16       	cp	r12, r24
    6634:	d9 06       	cpc	r13, r25
    6636:	2c f4       	brge	.+10     	; 0x6642 <vfprintf+0x284>
    6638:	1c 19       	sub	r17, r12
    663a:	04 c0       	rjmp	.+8      	; 0x6644 <vfprintf+0x286>
    663c:	44 24       	eor	r4, r4
    663e:	43 94       	inc	r4
    6640:	01 c0       	rjmp	.+2      	; 0x6644 <vfprintf+0x286>
    6642:	10 e0       	ldi	r17, 0x00	; 0
    6644:	77 fe       	sbrs	r7, 7
    6646:	07 c0       	rjmp	.+14     	; 0x6656 <vfprintf+0x298>
    6648:	1c 14       	cp	r1, r12
    664a:	1d 04       	cpc	r1, r13
    664c:	3c f4       	brge	.+14     	; 0x665c <vfprintf+0x29e>
    664e:	96 01       	movw	r18, r12
    6650:	2f 5f       	subi	r18, 0xFF	; 255
    6652:	3f 4f       	sbci	r19, 0xFF	; 255
    6654:	05 c0       	rjmp	.+10     	; 0x6660 <vfprintf+0x2a2>
    6656:	25 e0       	ldi	r18, 0x05	; 5
    6658:	30 e0       	ldi	r19, 0x00	; 0
    665a:	02 c0       	rjmp	.+4      	; 0x6660 <vfprintf+0x2a2>
    665c:	21 e0       	ldi	r18, 0x01	; 1
    665e:	30 e0       	ldi	r19, 0x00	; 0
    6660:	66 20       	and	r6, r6
    6662:	11 f0       	breq	.+4      	; 0x6668 <vfprintf+0x2aa>
    6664:	2f 5f       	subi	r18, 0xFF	; 255
    6666:	3f 4f       	sbci	r19, 0xFF	; 255
    6668:	11 23       	and	r17, r17
    666a:	31 f0       	breq	.+12     	; 0x6678 <vfprintf+0x2ba>
    666c:	41 2f       	mov	r20, r17
    666e:	50 e0       	ldi	r21, 0x00	; 0
    6670:	4f 5f       	subi	r20, 0xFF	; 255
    6672:	5f 4f       	sbci	r21, 0xFF	; 255
    6674:	24 0f       	add	r18, r20
    6676:	35 1f       	adc	r19, r21
    6678:	45 2d       	mov	r20, r5
    667a:	50 e0       	ldi	r21, 0x00	; 0
    667c:	24 17       	cp	r18, r20
    667e:	35 07       	cpc	r19, r21
    6680:	14 f4       	brge	.+4      	; 0x6686 <vfprintf+0x2c8>
    6682:	52 1a       	sub	r5, r18
    6684:	01 c0       	rjmp	.+2      	; 0x6688 <vfprintf+0x2ca>
    6686:	51 2c       	mov	r5, r1
    6688:	87 2d       	mov	r24, r7
    668a:	89 70       	andi	r24, 0x09	; 9
    668c:	41 f4       	brne	.+16     	; 0x669e <vfprintf+0x2e0>
    668e:	55 20       	and	r5, r5
    6690:	31 f0       	breq	.+12     	; 0x669e <vfprintf+0x2e0>
    6692:	b7 01       	movw	r22, r14
    6694:	80 e2       	ldi	r24, 0x20	; 32
    6696:	90 e0       	ldi	r25, 0x00	; 0
    6698:	dc d4       	rcall	.+2488   	; 0x7052 <fputc>
    669a:	5a 94       	dec	r5
    669c:	f8 cf       	rjmp	.-16     	; 0x668e <vfprintf+0x2d0>
    669e:	66 20       	and	r6, r6
    66a0:	21 f0       	breq	.+8      	; 0x66aa <vfprintf+0x2ec>
    66a2:	b7 01       	movw	r22, r14
    66a4:	86 2d       	mov	r24, r6
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	d4 d4       	rcall	.+2472   	; 0x7052 <fputc>
    66aa:	73 fc       	sbrc	r7, 3
    66ac:	08 c0       	rjmp	.+16     	; 0x66be <vfprintf+0x300>
    66ae:	55 20       	and	r5, r5
    66b0:	31 f0       	breq	.+12     	; 0x66be <vfprintf+0x300>
    66b2:	b7 01       	movw	r22, r14
    66b4:	80 e3       	ldi	r24, 0x30	; 48
    66b6:	90 e0       	ldi	r25, 0x00	; 0
    66b8:	cc d4       	rcall	.+2456   	; 0x7052 <fputc>
    66ba:	5a 94       	dec	r5
    66bc:	f8 cf       	rjmp	.-16     	; 0x66ae <vfprintf+0x2f0>
    66be:	77 fe       	sbrs	r7, 7
    66c0:	5d c0       	rjmp	.+186    	; 0x677c <vfprintf+0x3be>
    66c2:	9c 2d       	mov	r25, r12
    66c4:	8d 2d       	mov	r24, r13
    66c6:	d7 fe       	sbrs	r13, 7
    66c8:	02 c0       	rjmp	.+4      	; 0x66ce <vfprintf+0x310>
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	80 e0       	ldi	r24, 0x00	; 0
    66ce:	69 2e       	mov	r6, r25
    66d0:	78 2e       	mov	r7, r24
    66d2:	40 e0       	ldi	r20, 0x00	; 0
    66d4:	50 e0       	ldi	r21, 0x00	; 0
    66d6:	c6 01       	movw	r24, r12
    66d8:	84 19       	sub	r24, r4
    66da:	91 09       	sbc	r25, r1
    66dc:	8c 87       	std	Y+12, r24	; 0x0c
    66de:	9d 87       	std	Y+13, r25	; 0x0d
    66e0:	96 01       	movw	r18, r12
    66e2:	26 19       	sub	r18, r6
    66e4:	37 09       	sbc	r19, r7
    66e6:	28 0d       	add	r18, r8
    66e8:	39 1d       	adc	r19, r9
    66ea:	81 2f       	mov	r24, r17
    66ec:	90 e0       	ldi	r25, 0x00	; 0
    66ee:	ee 27       	eor	r30, r30
    66f0:	ff 27       	eor	r31, r31
    66f2:	e8 1b       	sub	r30, r24
    66f4:	f9 0b       	sbc	r31, r25
    66f6:	ee 87       	std	Y+14, r30	; 0x0e
    66f8:	ff 87       	std	Y+15, r31	; 0x0f
    66fa:	ff ef       	ldi	r31, 0xFF	; 255
    66fc:	6f 16       	cp	r6, r31
    66fe:	7f 06       	cpc	r7, r31
    6700:	61 f4       	brne	.+24     	; 0x671a <vfprintf+0x35c>
    6702:	b7 01       	movw	r22, r14
    6704:	8e e2       	ldi	r24, 0x2E	; 46
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	2b 8b       	std	Y+19, r18	; 0x13
    670a:	3a 8b       	std	Y+18, r19	; 0x12
    670c:	48 8b       	std	Y+16, r20	; 0x10
    670e:	59 8b       	std	Y+17, r21	; 0x11
    6710:	a0 d4       	rcall	.+2368   	; 0x7052 <fputc>
    6712:	59 89       	ldd	r21, Y+17	; 0x11
    6714:	48 89       	ldd	r20, Y+16	; 0x10
    6716:	3a 89       	ldd	r19, Y+18	; 0x12
    6718:	2b 89       	ldd	r18, Y+19	; 0x13
    671a:	c6 14       	cp	r12, r6
    671c:	d7 04       	cpc	r13, r7
    671e:	54 f0       	brlt	.+20     	; 0x6734 <vfprintf+0x376>
    6720:	6c 85       	ldd	r22, Y+12	; 0x0c
    6722:	7d 85       	ldd	r23, Y+13	; 0x0d
    6724:	66 15       	cp	r22, r6
    6726:	77 05       	cpc	r23, r7
    6728:	2c f4       	brge	.+10     	; 0x6734 <vfprintf+0x376>
    672a:	f9 01       	movw	r30, r18
    672c:	e4 0f       	add	r30, r20
    672e:	f5 1f       	adc	r31, r21
    6730:	81 81       	ldd	r24, Z+1	; 0x01
    6732:	01 c0       	rjmp	.+2      	; 0x6736 <vfprintf+0x378>
    6734:	80 e3       	ldi	r24, 0x30	; 48
    6736:	71 e0       	ldi	r23, 0x01	; 1
    6738:	67 1a       	sub	r6, r23
    673a:	71 08       	sbc	r7, r1
    673c:	4f 5f       	subi	r20, 0xFF	; 255
    673e:	5f 4f       	sbci	r21, 0xFF	; 255
    6740:	ee 85       	ldd	r30, Y+14	; 0x0e
    6742:	ff 85       	ldd	r31, Y+15	; 0x0f
    6744:	6e 16       	cp	r6, r30
    6746:	7f 06       	cpc	r7, r31
    6748:	64 f0       	brlt	.+24     	; 0x6762 <vfprintf+0x3a4>
    674a:	b7 01       	movw	r22, r14
    674c:	90 e0       	ldi	r25, 0x00	; 0
    674e:	2b 8b       	std	Y+19, r18	; 0x13
    6750:	3a 8b       	std	Y+18, r19	; 0x12
    6752:	48 8b       	std	Y+16, r20	; 0x10
    6754:	59 8b       	std	Y+17, r21	; 0x11
    6756:	7d d4       	rcall	.+2298   	; 0x7052 <fputc>
    6758:	2b 89       	ldd	r18, Y+19	; 0x13
    675a:	3a 89       	ldd	r19, Y+18	; 0x12
    675c:	48 89       	ldd	r20, Y+16	; 0x10
    675e:	59 89       	ldd	r21, Y+17	; 0x11
    6760:	cc cf       	rjmp	.-104    	; 0x66fa <vfprintf+0x33c>
    6762:	6c 14       	cp	r6, r12
    6764:	7d 04       	cpc	r7, r13
    6766:	39 f4       	brne	.+14     	; 0x6776 <vfprintf+0x3b8>
    6768:	9a 81       	ldd	r25, Y+2	; 0x02
    676a:	96 33       	cpi	r25, 0x36	; 54
    676c:	18 f4       	brcc	.+6      	; 0x6774 <vfprintf+0x3b6>
    676e:	95 33       	cpi	r25, 0x35	; 53
    6770:	11 f4       	brne	.+4      	; 0x6776 <vfprintf+0x3b8>
    6772:	04 ff       	sbrs	r16, 4
    6774:	81 e3       	ldi	r24, 0x31	; 49
    6776:	b7 01       	movw	r22, r14
    6778:	90 e0       	ldi	r25, 0x00	; 0
    677a:	45 c0       	rjmp	.+138    	; 0x6806 <vfprintf+0x448>
    677c:	8a 81       	ldd	r24, Y+2	; 0x02
    677e:	81 33       	cpi	r24, 0x31	; 49
    6780:	09 f0       	breq	.+2      	; 0x6784 <vfprintf+0x3c6>
    6782:	0f 7e       	andi	r16, 0xEF	; 239
    6784:	b7 01       	movw	r22, r14
    6786:	90 e0       	ldi	r25, 0x00	; 0
    6788:	64 d4       	rcall	.+2248   	; 0x7052 <fputc>
    678a:	11 11       	cpse	r17, r1
    678c:	05 c0       	rjmp	.+10     	; 0x6798 <vfprintf+0x3da>
    678e:	74 fe       	sbrs	r7, 4
    6790:	16 c0       	rjmp	.+44     	; 0x67be <vfprintf+0x400>
    6792:	85 e4       	ldi	r24, 0x45	; 69
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	15 c0       	rjmp	.+42     	; 0x67c2 <vfprintf+0x404>
    6798:	b7 01       	movw	r22, r14
    679a:	8e e2       	ldi	r24, 0x2E	; 46
    679c:	90 e0       	ldi	r25, 0x00	; 0
    679e:	59 d4       	rcall	.+2226   	; 0x7052 <fputc>
    67a0:	82 e0       	ldi	r24, 0x02	; 2
    67a2:	66 24       	eor	r6, r6
    67a4:	63 94       	inc	r6
    67a6:	68 0e       	add	r6, r24
    67a8:	f4 01       	movw	r30, r8
    67aa:	e8 0f       	add	r30, r24
    67ac:	f1 1d       	adc	r31, r1
    67ae:	80 81       	ld	r24, Z
    67b0:	b7 01       	movw	r22, r14
    67b2:	90 e0       	ldi	r25, 0x00	; 0
    67b4:	4e d4       	rcall	.+2204   	; 0x7052 <fputc>
    67b6:	11 50       	subi	r17, 0x01	; 1
    67b8:	51 f3       	breq	.-44     	; 0x678e <vfprintf+0x3d0>
    67ba:	86 2d       	mov	r24, r6
    67bc:	f2 cf       	rjmp	.-28     	; 0x67a2 <vfprintf+0x3e4>
    67be:	85 e6       	ldi	r24, 0x65	; 101
    67c0:	90 e0       	ldi	r25, 0x00	; 0
    67c2:	b7 01       	movw	r22, r14
    67c4:	46 d4       	rcall	.+2188   	; 0x7052 <fputc>
    67c6:	d7 fc       	sbrc	r13, 7
    67c8:	05 c0       	rjmp	.+10     	; 0x67d4 <vfprintf+0x416>
    67ca:	c1 14       	cp	r12, r1
    67cc:	d1 04       	cpc	r13, r1
    67ce:	39 f4       	brne	.+14     	; 0x67de <vfprintf+0x420>
    67d0:	04 ff       	sbrs	r16, 4
    67d2:	05 c0       	rjmp	.+10     	; 0x67de <vfprintf+0x420>
    67d4:	d1 94       	neg	r13
    67d6:	c1 94       	neg	r12
    67d8:	d1 08       	sbc	r13, r1
    67da:	8d e2       	ldi	r24, 0x2D	; 45
    67dc:	01 c0       	rjmp	.+2      	; 0x67e0 <vfprintf+0x422>
    67de:	8b e2       	ldi	r24, 0x2B	; 43
    67e0:	b7 01       	movw	r22, r14
    67e2:	90 e0       	ldi	r25, 0x00	; 0
    67e4:	36 d4       	rcall	.+2156   	; 0x7052 <fputc>
    67e6:	80 e3       	ldi	r24, 0x30	; 48
    67e8:	6a e0       	ldi	r22, 0x0A	; 10
    67ea:	c6 16       	cp	r12, r22
    67ec:	d1 04       	cpc	r13, r1
    67ee:	2c f0       	brlt	.+10     	; 0x67fa <vfprintf+0x43c>
    67f0:	8f 5f       	subi	r24, 0xFF	; 255
    67f2:	fa e0       	ldi	r31, 0x0A	; 10
    67f4:	cf 1a       	sub	r12, r31
    67f6:	d1 08       	sbc	r13, r1
    67f8:	f7 cf       	rjmp	.-18     	; 0x67e8 <vfprintf+0x42a>
    67fa:	b7 01       	movw	r22, r14
    67fc:	90 e0       	ldi	r25, 0x00	; 0
    67fe:	29 d4       	rcall	.+2130   	; 0x7052 <fputc>
    6800:	b7 01       	movw	r22, r14
    6802:	c6 01       	movw	r24, r12
    6804:	c0 96       	adiw	r24, 0x30	; 48
    6806:	25 d4       	rcall	.+2122   	; 0x7052 <fputc>
    6808:	36 c1       	rjmp	.+620    	; 0x6a76 <vfprintf+0x6b8>
    680a:	83 36       	cpi	r24, 0x63	; 99
    680c:	31 f0       	breq	.+12     	; 0x681a <vfprintf+0x45c>
    680e:	83 37       	cpi	r24, 0x73	; 115
    6810:	79 f0       	breq	.+30     	; 0x6830 <vfprintf+0x472>
    6812:	83 35       	cpi	r24, 0x53	; 83
    6814:	09 f0       	breq	.+2      	; 0x6818 <vfprintf+0x45a>
    6816:	54 c0       	rjmp	.+168    	; 0x68c0 <vfprintf+0x502>
    6818:	20 c0       	rjmp	.+64     	; 0x685a <vfprintf+0x49c>
    681a:	56 01       	movw	r10, r12
    681c:	72 e0       	ldi	r23, 0x02	; 2
    681e:	a7 0e       	add	r10, r23
    6820:	b1 1c       	adc	r11, r1
    6822:	f6 01       	movw	r30, r12
    6824:	80 81       	ld	r24, Z
    6826:	89 83       	std	Y+1, r24	; 0x01
    6828:	01 e0       	ldi	r16, 0x01	; 1
    682a:	10 e0       	ldi	r17, 0x00	; 0
    682c:	64 01       	movw	r12, r8
    682e:	13 c0       	rjmp	.+38     	; 0x6856 <vfprintf+0x498>
    6830:	56 01       	movw	r10, r12
    6832:	f2 e0       	ldi	r31, 0x02	; 2
    6834:	af 0e       	add	r10, r31
    6836:	b1 1c       	adc	r11, r1
    6838:	f6 01       	movw	r30, r12
    683a:	c0 80       	ld	r12, Z
    683c:	d1 80       	ldd	r13, Z+1	; 0x01
    683e:	26 ff       	sbrs	r18, 6
    6840:	03 c0       	rjmp	.+6      	; 0x6848 <vfprintf+0x48a>
    6842:	61 2f       	mov	r22, r17
    6844:	70 e0       	ldi	r23, 0x00	; 0
    6846:	02 c0       	rjmp	.+4      	; 0x684c <vfprintf+0x48e>
    6848:	6f ef       	ldi	r22, 0xFF	; 255
    684a:	7f ef       	ldi	r23, 0xFF	; 255
    684c:	c6 01       	movw	r24, r12
    684e:	2b 8b       	std	Y+19, r18	; 0x13
    6850:	c6 d3       	rcall	.+1932   	; 0x6fde <strnlen>
    6852:	8c 01       	movw	r16, r24
    6854:	2b 89       	ldd	r18, Y+19	; 0x13
    6856:	2f 77       	andi	r18, 0x7F	; 127
    6858:	14 c0       	rjmp	.+40     	; 0x6882 <vfprintf+0x4c4>
    685a:	56 01       	movw	r10, r12
    685c:	f2 e0       	ldi	r31, 0x02	; 2
    685e:	af 0e       	add	r10, r31
    6860:	b1 1c       	adc	r11, r1
    6862:	f6 01       	movw	r30, r12
    6864:	c0 80       	ld	r12, Z
    6866:	d1 80       	ldd	r13, Z+1	; 0x01
    6868:	26 ff       	sbrs	r18, 6
    686a:	03 c0       	rjmp	.+6      	; 0x6872 <vfprintf+0x4b4>
    686c:	61 2f       	mov	r22, r17
    686e:	70 e0       	ldi	r23, 0x00	; 0
    6870:	02 c0       	rjmp	.+4      	; 0x6876 <vfprintf+0x4b8>
    6872:	6f ef       	ldi	r22, 0xFF	; 255
    6874:	7f ef       	ldi	r23, 0xFF	; 255
    6876:	c6 01       	movw	r24, r12
    6878:	2b 8b       	std	Y+19, r18	; 0x13
    687a:	6c d3       	rcall	.+1752   	; 0x6f54 <strnlen_P>
    687c:	8c 01       	movw	r16, r24
    687e:	2b 89       	ldd	r18, Y+19	; 0x13
    6880:	20 68       	ori	r18, 0x80	; 128
    6882:	72 2e       	mov	r7, r18
    6884:	23 fd       	sbrc	r18, 3
    6886:	18 c0       	rjmp	.+48     	; 0x68b8 <vfprintf+0x4fa>
    6888:	85 2d       	mov	r24, r5
    688a:	90 e0       	ldi	r25, 0x00	; 0
    688c:	08 17       	cp	r16, r24
    688e:	19 07       	cpc	r17, r25
    6890:	98 f4       	brcc	.+38     	; 0x68b8 <vfprintf+0x4fa>
    6892:	b7 01       	movw	r22, r14
    6894:	80 e2       	ldi	r24, 0x20	; 32
    6896:	90 e0       	ldi	r25, 0x00	; 0
    6898:	dc d3       	rcall	.+1976   	; 0x7052 <fputc>
    689a:	5a 94       	dec	r5
    689c:	f5 cf       	rjmp	.-22     	; 0x6888 <vfprintf+0x4ca>
    689e:	f6 01       	movw	r30, r12
    68a0:	77 fc       	sbrc	r7, 7
    68a2:	85 91       	lpm	r24, Z+
    68a4:	77 fe       	sbrs	r7, 7
    68a6:	81 91       	ld	r24, Z+
    68a8:	6f 01       	movw	r12, r30
    68aa:	b7 01       	movw	r22, r14
    68ac:	90 e0       	ldi	r25, 0x00	; 0
    68ae:	d1 d3       	rcall	.+1954   	; 0x7052 <fputc>
    68b0:	51 10       	cpse	r5, r1
    68b2:	5a 94       	dec	r5
    68b4:	01 50       	subi	r16, 0x01	; 1
    68b6:	11 09       	sbc	r17, r1
    68b8:	01 15       	cp	r16, r1
    68ba:	11 05       	cpc	r17, r1
    68bc:	81 f7       	brne	.-32     	; 0x689e <vfprintf+0x4e0>
    68be:	db c0       	rjmp	.+438    	; 0x6a76 <vfprintf+0x6b8>
    68c0:	84 36       	cpi	r24, 0x64	; 100
    68c2:	11 f0       	breq	.+4      	; 0x68c8 <vfprintf+0x50a>
    68c4:	89 36       	cpi	r24, 0x69	; 105
    68c6:	49 f5       	brne	.+82     	; 0x691a <vfprintf+0x55c>
    68c8:	56 01       	movw	r10, r12
    68ca:	27 ff       	sbrs	r18, 7
    68cc:	09 c0       	rjmp	.+18     	; 0x68e0 <vfprintf+0x522>
    68ce:	f4 e0       	ldi	r31, 0x04	; 4
    68d0:	af 0e       	add	r10, r31
    68d2:	b1 1c       	adc	r11, r1
    68d4:	f6 01       	movw	r30, r12
    68d6:	60 81       	ld	r22, Z
    68d8:	71 81       	ldd	r23, Z+1	; 0x01
    68da:	82 81       	ldd	r24, Z+2	; 0x02
    68dc:	93 81       	ldd	r25, Z+3	; 0x03
    68de:	0a c0       	rjmp	.+20     	; 0x68f4 <vfprintf+0x536>
    68e0:	f2 e0       	ldi	r31, 0x02	; 2
    68e2:	af 0e       	add	r10, r31
    68e4:	b1 1c       	adc	r11, r1
    68e6:	f6 01       	movw	r30, r12
    68e8:	60 81       	ld	r22, Z
    68ea:	71 81       	ldd	r23, Z+1	; 0x01
    68ec:	88 27       	eor	r24, r24
    68ee:	77 fd       	sbrc	r23, 7
    68f0:	80 95       	com	r24
    68f2:	98 2f       	mov	r25, r24
    68f4:	02 2f       	mov	r16, r18
    68f6:	0f 76       	andi	r16, 0x6F	; 111
    68f8:	97 ff       	sbrs	r25, 7
    68fa:	08 c0       	rjmp	.+16     	; 0x690c <vfprintf+0x54e>
    68fc:	90 95       	com	r25
    68fe:	80 95       	com	r24
    6900:	70 95       	com	r23
    6902:	61 95       	neg	r22
    6904:	7f 4f       	sbci	r23, 0xFF	; 255
    6906:	8f 4f       	sbci	r24, 0xFF	; 255
    6908:	9f 4f       	sbci	r25, 0xFF	; 255
    690a:	00 68       	ori	r16, 0x80	; 128
    690c:	2a e0       	ldi	r18, 0x0A	; 10
    690e:	30 e0       	ldi	r19, 0x00	; 0
    6910:	a4 01       	movw	r20, r8
    6912:	14 d4       	rcall	.+2088   	; 0x713c <__ultoa_invert>
    6914:	c8 2e       	mov	r12, r24
    6916:	c8 18       	sub	r12, r8
    6918:	3d c0       	rjmp	.+122    	; 0x6994 <vfprintf+0x5d6>
    691a:	02 2f       	mov	r16, r18
    691c:	85 37       	cpi	r24, 0x75	; 117
    691e:	21 f4       	brne	.+8      	; 0x6928 <vfprintf+0x56a>
    6920:	0f 7e       	andi	r16, 0xEF	; 239
    6922:	2a e0       	ldi	r18, 0x0A	; 10
    6924:	30 e0       	ldi	r19, 0x00	; 0
    6926:	1d c0       	rjmp	.+58     	; 0x6962 <vfprintf+0x5a4>
    6928:	09 7f       	andi	r16, 0xF9	; 249
    692a:	8f 36       	cpi	r24, 0x6F	; 111
    692c:	91 f0       	breq	.+36     	; 0x6952 <vfprintf+0x594>
    692e:	18 f4       	brcc	.+6      	; 0x6936 <vfprintf+0x578>
    6930:	88 35       	cpi	r24, 0x58	; 88
    6932:	59 f0       	breq	.+22     	; 0x694a <vfprintf+0x58c>
    6934:	a9 c0       	rjmp	.+338    	; 0x6a88 <vfprintf+0x6ca>
    6936:	80 37       	cpi	r24, 0x70	; 112
    6938:	19 f0       	breq	.+6      	; 0x6940 <vfprintf+0x582>
    693a:	88 37       	cpi	r24, 0x78	; 120
    693c:	11 f0       	breq	.+4      	; 0x6942 <vfprintf+0x584>
    693e:	a4 c0       	rjmp	.+328    	; 0x6a88 <vfprintf+0x6ca>
    6940:	00 61       	ori	r16, 0x10	; 16
    6942:	04 ff       	sbrs	r16, 4
    6944:	09 c0       	rjmp	.+18     	; 0x6958 <vfprintf+0x59a>
    6946:	04 60       	ori	r16, 0x04	; 4
    6948:	07 c0       	rjmp	.+14     	; 0x6958 <vfprintf+0x59a>
    694a:	24 ff       	sbrs	r18, 4
    694c:	08 c0       	rjmp	.+16     	; 0x695e <vfprintf+0x5a0>
    694e:	06 60       	ori	r16, 0x06	; 6
    6950:	06 c0       	rjmp	.+12     	; 0x695e <vfprintf+0x5a0>
    6952:	28 e0       	ldi	r18, 0x08	; 8
    6954:	30 e0       	ldi	r19, 0x00	; 0
    6956:	05 c0       	rjmp	.+10     	; 0x6962 <vfprintf+0x5a4>
    6958:	20 e1       	ldi	r18, 0x10	; 16
    695a:	30 e0       	ldi	r19, 0x00	; 0
    695c:	02 c0       	rjmp	.+4      	; 0x6962 <vfprintf+0x5a4>
    695e:	20 e1       	ldi	r18, 0x10	; 16
    6960:	32 e0       	ldi	r19, 0x02	; 2
    6962:	56 01       	movw	r10, r12
    6964:	07 ff       	sbrs	r16, 7
    6966:	09 c0       	rjmp	.+18     	; 0x697a <vfprintf+0x5bc>
    6968:	f4 e0       	ldi	r31, 0x04	; 4
    696a:	af 0e       	add	r10, r31
    696c:	b1 1c       	adc	r11, r1
    696e:	f6 01       	movw	r30, r12
    6970:	60 81       	ld	r22, Z
    6972:	71 81       	ldd	r23, Z+1	; 0x01
    6974:	82 81       	ldd	r24, Z+2	; 0x02
    6976:	93 81       	ldd	r25, Z+3	; 0x03
    6978:	08 c0       	rjmp	.+16     	; 0x698a <vfprintf+0x5cc>
    697a:	f2 e0       	ldi	r31, 0x02	; 2
    697c:	af 0e       	add	r10, r31
    697e:	b1 1c       	adc	r11, r1
    6980:	f6 01       	movw	r30, r12
    6982:	60 81       	ld	r22, Z
    6984:	71 81       	ldd	r23, Z+1	; 0x01
    6986:	80 e0       	ldi	r24, 0x00	; 0
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	a4 01       	movw	r20, r8
    698c:	d7 d3       	rcall	.+1966   	; 0x713c <__ultoa_invert>
    698e:	c8 2e       	mov	r12, r24
    6990:	c8 18       	sub	r12, r8
    6992:	0f 77       	andi	r16, 0x7F	; 127
    6994:	06 ff       	sbrs	r16, 6
    6996:	0b c0       	rjmp	.+22     	; 0x69ae <vfprintf+0x5f0>
    6998:	20 2f       	mov	r18, r16
    699a:	2e 7f       	andi	r18, 0xFE	; 254
    699c:	c1 16       	cp	r12, r17
    699e:	50 f4       	brcc	.+20     	; 0x69b4 <vfprintf+0x5f6>
    69a0:	04 ff       	sbrs	r16, 4
    69a2:	0a c0       	rjmp	.+20     	; 0x69b8 <vfprintf+0x5fa>
    69a4:	02 fd       	sbrc	r16, 2
    69a6:	08 c0       	rjmp	.+16     	; 0x69b8 <vfprintf+0x5fa>
    69a8:	20 2f       	mov	r18, r16
    69aa:	2e 7e       	andi	r18, 0xEE	; 238
    69ac:	05 c0       	rjmp	.+10     	; 0x69b8 <vfprintf+0x5fa>
    69ae:	dc 2c       	mov	r13, r12
    69b0:	20 2f       	mov	r18, r16
    69b2:	03 c0       	rjmp	.+6      	; 0x69ba <vfprintf+0x5fc>
    69b4:	dc 2c       	mov	r13, r12
    69b6:	01 c0       	rjmp	.+2      	; 0x69ba <vfprintf+0x5fc>
    69b8:	d1 2e       	mov	r13, r17
    69ba:	24 ff       	sbrs	r18, 4
    69bc:	0d c0       	rjmp	.+26     	; 0x69d8 <vfprintf+0x61a>
    69be:	fe 01       	movw	r30, r28
    69c0:	ec 0d       	add	r30, r12
    69c2:	f1 1d       	adc	r31, r1
    69c4:	80 81       	ld	r24, Z
    69c6:	80 33       	cpi	r24, 0x30	; 48
    69c8:	11 f4       	brne	.+4      	; 0x69ce <vfprintf+0x610>
    69ca:	29 7e       	andi	r18, 0xE9	; 233
    69cc:	09 c0       	rjmp	.+18     	; 0x69e0 <vfprintf+0x622>
    69ce:	22 ff       	sbrs	r18, 2
    69d0:	06 c0       	rjmp	.+12     	; 0x69de <vfprintf+0x620>
    69d2:	d3 94       	inc	r13
    69d4:	d3 94       	inc	r13
    69d6:	04 c0       	rjmp	.+8      	; 0x69e0 <vfprintf+0x622>
    69d8:	82 2f       	mov	r24, r18
    69da:	86 78       	andi	r24, 0x86	; 134
    69dc:	09 f0       	breq	.+2      	; 0x69e0 <vfprintf+0x622>
    69de:	d3 94       	inc	r13
    69e0:	23 fd       	sbrc	r18, 3
    69e2:	12 c0       	rjmp	.+36     	; 0x6a08 <vfprintf+0x64a>
    69e4:	20 ff       	sbrs	r18, 0
    69e6:	06 c0       	rjmp	.+12     	; 0x69f4 <vfprintf+0x636>
    69e8:	1c 2d       	mov	r17, r12
    69ea:	d5 14       	cp	r13, r5
    69ec:	18 f4       	brcc	.+6      	; 0x69f4 <vfprintf+0x636>
    69ee:	15 0d       	add	r17, r5
    69f0:	1d 19       	sub	r17, r13
    69f2:	d5 2c       	mov	r13, r5
    69f4:	d5 14       	cp	r13, r5
    69f6:	60 f4       	brcc	.+24     	; 0x6a10 <vfprintf+0x652>
    69f8:	b7 01       	movw	r22, r14
    69fa:	80 e2       	ldi	r24, 0x20	; 32
    69fc:	90 e0       	ldi	r25, 0x00	; 0
    69fe:	2b 8b       	std	Y+19, r18	; 0x13
    6a00:	28 d3       	rcall	.+1616   	; 0x7052 <fputc>
    6a02:	d3 94       	inc	r13
    6a04:	2b 89       	ldd	r18, Y+19	; 0x13
    6a06:	f6 cf       	rjmp	.-20     	; 0x69f4 <vfprintf+0x636>
    6a08:	d5 14       	cp	r13, r5
    6a0a:	10 f4       	brcc	.+4      	; 0x6a10 <vfprintf+0x652>
    6a0c:	5d 18       	sub	r5, r13
    6a0e:	01 c0       	rjmp	.+2      	; 0x6a12 <vfprintf+0x654>
    6a10:	51 2c       	mov	r5, r1
    6a12:	24 ff       	sbrs	r18, 4
    6a14:	11 c0       	rjmp	.+34     	; 0x6a38 <vfprintf+0x67a>
    6a16:	b7 01       	movw	r22, r14
    6a18:	80 e3       	ldi	r24, 0x30	; 48
    6a1a:	90 e0       	ldi	r25, 0x00	; 0
    6a1c:	2b 8b       	std	Y+19, r18	; 0x13
    6a1e:	19 d3       	rcall	.+1586   	; 0x7052 <fputc>
    6a20:	2b 89       	ldd	r18, Y+19	; 0x13
    6a22:	22 ff       	sbrs	r18, 2
    6a24:	16 c0       	rjmp	.+44     	; 0x6a52 <vfprintf+0x694>
    6a26:	21 ff       	sbrs	r18, 1
    6a28:	03 c0       	rjmp	.+6      	; 0x6a30 <vfprintf+0x672>
    6a2a:	88 e5       	ldi	r24, 0x58	; 88
    6a2c:	90 e0       	ldi	r25, 0x00	; 0
    6a2e:	02 c0       	rjmp	.+4      	; 0x6a34 <vfprintf+0x676>
    6a30:	88 e7       	ldi	r24, 0x78	; 120
    6a32:	90 e0       	ldi	r25, 0x00	; 0
    6a34:	b7 01       	movw	r22, r14
    6a36:	0c c0       	rjmp	.+24     	; 0x6a50 <vfprintf+0x692>
    6a38:	82 2f       	mov	r24, r18
    6a3a:	86 78       	andi	r24, 0x86	; 134
    6a3c:	51 f0       	breq	.+20     	; 0x6a52 <vfprintf+0x694>
    6a3e:	21 fd       	sbrc	r18, 1
    6a40:	02 c0       	rjmp	.+4      	; 0x6a46 <vfprintf+0x688>
    6a42:	80 e2       	ldi	r24, 0x20	; 32
    6a44:	01 c0       	rjmp	.+2      	; 0x6a48 <vfprintf+0x68a>
    6a46:	8b e2       	ldi	r24, 0x2B	; 43
    6a48:	27 fd       	sbrc	r18, 7
    6a4a:	8d e2       	ldi	r24, 0x2D	; 45
    6a4c:	b7 01       	movw	r22, r14
    6a4e:	90 e0       	ldi	r25, 0x00	; 0
    6a50:	00 d3       	rcall	.+1536   	; 0x7052 <fputc>
    6a52:	c1 16       	cp	r12, r17
    6a54:	30 f4       	brcc	.+12     	; 0x6a62 <vfprintf+0x6a4>
    6a56:	b7 01       	movw	r22, r14
    6a58:	80 e3       	ldi	r24, 0x30	; 48
    6a5a:	90 e0       	ldi	r25, 0x00	; 0
    6a5c:	fa d2       	rcall	.+1524   	; 0x7052 <fputc>
    6a5e:	11 50       	subi	r17, 0x01	; 1
    6a60:	f8 cf       	rjmp	.-16     	; 0x6a52 <vfprintf+0x694>
    6a62:	ca 94       	dec	r12
    6a64:	f4 01       	movw	r30, r8
    6a66:	ec 0d       	add	r30, r12
    6a68:	f1 1d       	adc	r31, r1
    6a6a:	80 81       	ld	r24, Z
    6a6c:	b7 01       	movw	r22, r14
    6a6e:	90 e0       	ldi	r25, 0x00	; 0
    6a70:	f0 d2       	rcall	.+1504   	; 0x7052 <fputc>
    6a72:	c1 10       	cpse	r12, r1
    6a74:	f6 cf       	rjmp	.-20     	; 0x6a62 <vfprintf+0x6a4>
    6a76:	55 20       	and	r5, r5
    6a78:	09 f4       	brne	.+2      	; 0x6a7c <vfprintf+0x6be>
    6a7a:	dd cc       	rjmp	.-1606   	; 0x6436 <vfprintf+0x78>
    6a7c:	b7 01       	movw	r22, r14
    6a7e:	80 e2       	ldi	r24, 0x20	; 32
    6a80:	90 e0       	ldi	r25, 0x00	; 0
    6a82:	e7 d2       	rcall	.+1486   	; 0x7052 <fputc>
    6a84:	5a 94       	dec	r5
    6a86:	f7 cf       	rjmp	.-18     	; 0x6a76 <vfprintf+0x6b8>
    6a88:	f7 01       	movw	r30, r14
    6a8a:	86 81       	ldd	r24, Z+6	; 0x06
    6a8c:	97 81       	ldd	r25, Z+7	; 0x07
    6a8e:	02 c0       	rjmp	.+4      	; 0x6a94 <vfprintf+0x6d6>
    6a90:	8f ef       	ldi	r24, 0xFF	; 255
    6a92:	9f ef       	ldi	r25, 0xFF	; 255
    6a94:	63 96       	adiw	r28, 0x13	; 19
    6a96:	cd bf       	out	0x3d, r28	; 61
    6a98:	de bf       	out	0x3e, r29	; 62
    6a9a:	df 91       	pop	r29
    6a9c:	cf 91       	pop	r28
    6a9e:	1f 91       	pop	r17
    6aa0:	0f 91       	pop	r16
    6aa2:	ff 90       	pop	r15
    6aa4:	ef 90       	pop	r14
    6aa6:	df 90       	pop	r13
    6aa8:	cf 90       	pop	r12
    6aaa:	bf 90       	pop	r11
    6aac:	af 90       	pop	r10
    6aae:	9f 90       	pop	r9
    6ab0:	8f 90       	pop	r8
    6ab2:	7f 90       	pop	r7
    6ab4:	6f 90       	pop	r6
    6ab6:	5f 90       	pop	r5
    6ab8:	4f 90       	pop	r4
    6aba:	3f 90       	pop	r3
    6abc:	2f 90       	pop	r2
    6abe:	08 95       	ret

00006ac0 <__udivmodhi4>:
    6ac0:	aa 1b       	sub	r26, r26
    6ac2:	bb 1b       	sub	r27, r27
    6ac4:	51 e1       	ldi	r21, 0x11	; 17
    6ac6:	07 c0       	rjmp	.+14     	; 0x6ad6 <__udivmodhi4_ep>

00006ac8 <__udivmodhi4_loop>:
    6ac8:	aa 1f       	adc	r26, r26
    6aca:	bb 1f       	adc	r27, r27
    6acc:	a6 17       	cp	r26, r22
    6ace:	b7 07       	cpc	r27, r23
    6ad0:	10 f0       	brcs	.+4      	; 0x6ad6 <__udivmodhi4_ep>
    6ad2:	a6 1b       	sub	r26, r22
    6ad4:	b7 0b       	sbc	r27, r23

00006ad6 <__udivmodhi4_ep>:
    6ad6:	88 1f       	adc	r24, r24
    6ad8:	99 1f       	adc	r25, r25
    6ada:	5a 95       	dec	r21
    6adc:	a9 f7       	brne	.-22     	; 0x6ac8 <__udivmodhi4_loop>
    6ade:	80 95       	com	r24
    6ae0:	90 95       	com	r25
    6ae2:	bc 01       	movw	r22, r24
    6ae4:	cd 01       	movw	r24, r26
    6ae6:	08 95       	ret

00006ae8 <__divmodhi4>:
    6ae8:	97 fb       	bst	r25, 7
    6aea:	07 2e       	mov	r0, r23
    6aec:	16 f4       	brtc	.+4      	; 0x6af2 <__divmodhi4+0xa>
    6aee:	00 94       	com	r0
    6af0:	06 d0       	rcall	.+12     	; 0x6afe <__divmodhi4_neg1>
    6af2:	77 fd       	sbrc	r23, 7
    6af4:	08 d0       	rcall	.+16     	; 0x6b06 <__divmodhi4_neg2>
    6af6:	e4 df       	rcall	.-56     	; 0x6ac0 <__udivmodhi4>
    6af8:	07 fc       	sbrc	r0, 7
    6afa:	05 d0       	rcall	.+10     	; 0x6b06 <__divmodhi4_neg2>
    6afc:	3e f4       	brtc	.+14     	; 0x6b0c <__divmodhi4_exit>

00006afe <__divmodhi4_neg1>:
    6afe:	90 95       	com	r25
    6b00:	81 95       	neg	r24
    6b02:	9f 4f       	sbci	r25, 0xFF	; 255
    6b04:	08 95       	ret

00006b06 <__divmodhi4_neg2>:
    6b06:	70 95       	com	r23
    6b08:	61 95       	neg	r22
    6b0a:	7f 4f       	sbci	r23, 0xFF	; 255

00006b0c <__divmodhi4_exit>:
    6b0c:	08 95       	ret

00006b0e <__tablejump2__>:
    6b0e:	ee 0f       	add	r30, r30
    6b10:	ff 1f       	adc	r31, r31

00006b12 <__tablejump__>:
    6b12:	05 90       	lpm	r0, Z+
    6b14:	f4 91       	lpm	r31, Z
    6b16:	e0 2d       	mov	r30, r0
    6b18:	19 94       	eijmp

00006b1a <__umulhisi3>:
    6b1a:	a2 9f       	mul	r26, r18
    6b1c:	b0 01       	movw	r22, r0
    6b1e:	b3 9f       	mul	r27, r19
    6b20:	c0 01       	movw	r24, r0
    6b22:	a3 9f       	mul	r26, r19
    6b24:	70 0d       	add	r23, r0
    6b26:	81 1d       	adc	r24, r1
    6b28:	11 24       	eor	r1, r1
    6b2a:	91 1d       	adc	r25, r1
    6b2c:	b2 9f       	mul	r27, r18
    6b2e:	70 0d       	add	r23, r0
    6b30:	81 1d       	adc	r24, r1
    6b32:	11 24       	eor	r1, r1
    6b34:	91 1d       	adc	r25, r1
    6b36:	08 95       	ret

00006b38 <strtoul>:
    6b38:	2f 92       	push	r2
    6b3a:	3f 92       	push	r3
    6b3c:	5f 92       	push	r5
    6b3e:	6f 92       	push	r6
    6b40:	7f 92       	push	r7
    6b42:	8f 92       	push	r8
    6b44:	9f 92       	push	r9
    6b46:	af 92       	push	r10
    6b48:	bf 92       	push	r11
    6b4a:	cf 92       	push	r12
    6b4c:	df 92       	push	r13
    6b4e:	ef 92       	push	r14
    6b50:	ff 92       	push	r15
    6b52:	0f 93       	push	r16
    6b54:	1f 93       	push	r17
    6b56:	cf 93       	push	r28
    6b58:	df 93       	push	r29
    6b5a:	8b 01       	movw	r16, r22
    6b5c:	ea 01       	movw	r28, r20
    6b5e:	61 15       	cp	r22, r1
    6b60:	71 05       	cpc	r23, r1
    6b62:	21 f0       	breq	.+8      	; 0x6b6c <strtoul+0x34>
    6b64:	db 01       	movw	r26, r22
    6b66:	8c 93       	st	X, r24
    6b68:	11 96       	adiw	r26, 0x01	; 1
    6b6a:	9c 93       	st	X, r25
    6b6c:	20 97       	sbiw	r28, 0x00	; 0
    6b6e:	39 f0       	breq	.+14     	; 0x6b7e <strtoul+0x46>
    6b70:	9e 01       	movw	r18, r28
    6b72:	22 50       	subi	r18, 0x02	; 2
    6b74:	31 09       	sbc	r19, r1
    6b76:	23 32       	cpi	r18, 0x23	; 35
    6b78:	31 05       	cpc	r19, r1
    6b7a:	08 f0       	brcs	.+2      	; 0x6b7e <strtoul+0x46>
    6b7c:	d5 c0       	rjmp	.+426    	; 0x6d28 <strtoul+0x1f0>
    6b7e:	7c 01       	movw	r14, r24
    6b80:	67 01       	movw	r12, r14
    6b82:	bf ef       	ldi	r27, 0xFF	; 255
    6b84:	cb 1a       	sub	r12, r27
    6b86:	db 0a       	sbc	r13, r27
    6b88:	56 01       	movw	r10, r12
    6b8a:	f7 01       	movw	r30, r14
    6b8c:	60 80       	ld	r6, Z
    6b8e:	86 2d       	mov	r24, r6
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	d8 d1       	rcall	.+944    	; 0x6f44 <isspace>
    6b94:	89 2b       	or	r24, r25
    6b96:	11 f0       	breq	.+4      	; 0x6b9c <strtoul+0x64>
    6b98:	76 01       	movw	r14, r12
    6b9a:	f2 cf       	rjmp	.-28     	; 0x6b80 <strtoul+0x48>
    6b9c:	fd e2       	ldi	r31, 0x2D	; 45
    6b9e:	6f 12       	cpse	r6, r31
    6ba0:	0a c0       	rjmp	.+20     	; 0x6bb6 <strtoul+0x7e>
    6ba2:	57 01       	movw	r10, r14
    6ba4:	82 e0       	ldi	r24, 0x02	; 2
    6ba6:	a8 0e       	add	r10, r24
    6ba8:	b1 1c       	adc	r11, r1
    6baa:	d7 01       	movw	r26, r14
    6bac:	11 96       	adiw	r26, 0x01	; 1
    6bae:	6c 90       	ld	r6, X
    6bb0:	77 24       	eor	r7, r7
    6bb2:	73 94       	inc	r7
    6bb4:	0b c0       	rjmp	.+22     	; 0x6bcc <strtoul+0x94>
    6bb6:	bb e2       	ldi	r27, 0x2B	; 43
    6bb8:	6b 12       	cpse	r6, r27
    6bba:	07 c0       	rjmp	.+14     	; 0x6bca <strtoul+0x92>
    6bbc:	57 01       	movw	r10, r14
    6bbe:	e2 e0       	ldi	r30, 0x02	; 2
    6bc0:	ae 0e       	add	r10, r30
    6bc2:	b1 1c       	adc	r11, r1
    6bc4:	d7 01       	movw	r26, r14
    6bc6:	11 96       	adiw	r26, 0x01	; 1
    6bc8:	6c 90       	ld	r6, X
    6bca:	71 2c       	mov	r7, r1
    6bcc:	ce 01       	movw	r24, r28
    6bce:	8f 7e       	andi	r24, 0xEF	; 239
    6bd0:	89 2b       	or	r24, r25
    6bd2:	89 f4       	brne	.+34     	; 0x6bf6 <strtoul+0xbe>
    6bd4:	b0 e3       	ldi	r27, 0x30	; 48
    6bd6:	6b 12       	cpse	r6, r27
    6bd8:	36 c0       	rjmp	.+108    	; 0x6c46 <strtoul+0x10e>
    6bda:	f5 01       	movw	r30, r10
    6bdc:	80 81       	ld	r24, Z
    6bde:	8f 7d       	andi	r24, 0xDF	; 223
    6be0:	88 35       	cpi	r24, 0x58	; 88
    6be2:	d1 f4       	brne	.+52     	; 0x6c18 <strtoul+0xe0>
    6be4:	61 80       	ldd	r6, Z+1	; 0x01
    6be6:	f2 e0       	ldi	r31, 0x02	; 2
    6be8:	af 0e       	add	r10, r31
    6bea:	b1 1c       	adc	r11, r1
    6bec:	87 2d       	mov	r24, r7
    6bee:	82 60       	ori	r24, 0x02	; 2
    6bf0:	78 2e       	mov	r7, r24
    6bf2:	c0 e1       	ldi	r28, 0x10	; 16
    6bf4:	d0 e0       	ldi	r29, 0x00	; 0
    6bf6:	ca 30       	cpi	r28, 0x0A	; 10
    6bf8:	d1 05       	cpc	r29, r1
    6bfa:	49 f1       	breq	.+82     	; 0x6c4e <strtoul+0x116>
    6bfc:	c0 31       	cpi	r28, 0x10	; 16
    6bfe:	d1 05       	cpc	r29, r1
    6c00:	21 f0       	breq	.+8      	; 0x6c0a <strtoul+0xd2>
    6c02:	c8 30       	cpi	r28, 0x08	; 8
    6c04:	d1 05       	cpc	r29, r1
    6c06:	99 f4       	brne	.+38     	; 0x6c2e <strtoul+0xf6>
    6c08:	09 c0       	rjmp	.+18     	; 0x6c1c <strtoul+0xe4>
    6c0a:	cc 24       	eor	r12, r12
    6c0c:	ca 94       	dec	r12
    6c0e:	dc 2c       	mov	r13, r12
    6c10:	ec 2c       	mov	r14, r12
    6c12:	af e0       	ldi	r26, 0x0F	; 15
    6c14:	fa 2e       	mov	r15, r26
    6c16:	21 c0       	rjmp	.+66     	; 0x6c5a <strtoul+0x122>
    6c18:	20 97       	sbiw	r28, 0x00	; 0
    6c1a:	69 f7       	brne	.-38     	; 0x6bf6 <strtoul+0xbe>
    6c1c:	c8 e0       	ldi	r28, 0x08	; 8
    6c1e:	d0 e0       	ldi	r29, 0x00	; 0
    6c20:	cc 24       	eor	r12, r12
    6c22:	ca 94       	dec	r12
    6c24:	dc 2c       	mov	r13, r12
    6c26:	ec 2c       	mov	r14, r12
    6c28:	ff e1       	ldi	r31, 0x1F	; 31
    6c2a:	ff 2e       	mov	r15, r31
    6c2c:	16 c0       	rjmp	.+44     	; 0x6c5a <strtoul+0x122>
    6c2e:	6f ef       	ldi	r22, 0xFF	; 255
    6c30:	7f ef       	ldi	r23, 0xFF	; 255
    6c32:	cb 01       	movw	r24, r22
    6c34:	9e 01       	movw	r18, r28
    6c36:	44 27       	eor	r20, r20
    6c38:	37 fd       	sbrc	r19, 7
    6c3a:	40 95       	com	r20
    6c3c:	54 2f       	mov	r21, r20
    6c3e:	ee d2       	rcall	.+1500   	; 0x721c <__udivmodsi4>
    6c40:	69 01       	movw	r12, r18
    6c42:	7a 01       	movw	r14, r20
    6c44:	0a c0       	rjmp	.+20     	; 0x6c5a <strtoul+0x122>
    6c46:	20 97       	sbiw	r28, 0x00	; 0
    6c48:	b1 f6       	brne	.-84     	; 0x6bf6 <strtoul+0xbe>
    6c4a:	ca e0       	ldi	r28, 0x0A	; 10
    6c4c:	d0 e0       	ldi	r29, 0x00	; 0
    6c4e:	e9 e9       	ldi	r30, 0x99	; 153
    6c50:	ce 2e       	mov	r12, r30
    6c52:	dc 2c       	mov	r13, r12
    6c54:	ec 2c       	mov	r14, r12
    6c56:	e9 e1       	ldi	r30, 0x19	; 25
    6c58:	fe 2e       	mov	r15, r30
    6c5a:	f5 01       	movw	r30, r10
    6c5c:	60 e0       	ldi	r22, 0x00	; 0
    6c5e:	20 e0       	ldi	r18, 0x00	; 0
    6c60:	30 e0       	ldi	r19, 0x00	; 0
    6c62:	a9 01       	movw	r20, r18
    6c64:	4e 01       	movw	r8, r28
    6c66:	aa 24       	eor	r10, r10
    6c68:	97 fc       	sbrc	r9, 7
    6c6a:	a0 94       	com	r10
    6c6c:	ba 2c       	mov	r11, r10
    6c6e:	1f 01       	movw	r2, r30
    6c70:	70 ed       	ldi	r23, 0xD0	; 208
    6c72:	57 2e       	mov	r5, r23
    6c74:	56 0c       	add	r5, r6
    6c76:	a9 e0       	ldi	r26, 0x09	; 9
    6c78:	a5 15       	cp	r26, r5
    6c7a:	70 f4       	brcc	.+28     	; 0x6c98 <strtoul+0x160>
    6c7c:	8f eb       	ldi	r24, 0xBF	; 191
    6c7e:	86 0d       	add	r24, r6
    6c80:	8a 31       	cpi	r24, 0x1A	; 26
    6c82:	18 f4       	brcc	.+6      	; 0x6c8a <strtoul+0x152>
    6c84:	99 ec       	ldi	r25, 0xC9	; 201
    6c86:	59 2e       	mov	r5, r25
    6c88:	06 c0       	rjmp	.+12     	; 0x6c96 <strtoul+0x15e>
    6c8a:	8f e9       	ldi	r24, 0x9F	; 159
    6c8c:	86 0d       	add	r24, r6
    6c8e:	8a 31       	cpi	r24, 0x1A	; 26
    6c90:	40 f5       	brcc	.+80     	; 0x6ce2 <strtoul+0x1aa>
    6c92:	89 ea       	ldi	r24, 0xA9	; 169
    6c94:	58 2e       	mov	r5, r24
    6c96:	56 0c       	add	r5, r6
    6c98:	85 2d       	mov	r24, r5
    6c9a:	90 e0       	ldi	r25, 0x00	; 0
    6c9c:	8c 17       	cp	r24, r28
    6c9e:	9d 07       	cpc	r25, r29
    6ca0:	04 f5       	brge	.+64     	; 0x6ce2 <strtoul+0x1aa>
    6ca2:	6f 3f       	cpi	r22, 0xFF	; 255
    6ca4:	d1 f0       	breq	.+52     	; 0x6cda <strtoul+0x1a2>
    6ca6:	c2 16       	cp	r12, r18
    6ca8:	d3 06       	cpc	r13, r19
    6caa:	e4 06       	cpc	r14, r20
    6cac:	f5 06       	cpc	r15, r21
    6cae:	90 f0       	brcs	.+36     	; 0x6cd4 <strtoul+0x19c>
    6cb0:	c5 01       	movw	r24, r10
    6cb2:	b4 01       	movw	r22, r8
    6cb4:	a4 d2       	rcall	.+1352   	; 0x71fe <__mulsi3>
    6cb6:	9b 01       	movw	r18, r22
    6cb8:	ac 01       	movw	r20, r24
    6cba:	85 2d       	mov	r24, r5
    6cbc:	90 e0       	ldi	r25, 0x00	; 0
    6cbe:	a0 e0       	ldi	r26, 0x00	; 0
    6cc0:	b0 e0       	ldi	r27, 0x00	; 0
    6cc2:	28 0f       	add	r18, r24
    6cc4:	39 1f       	adc	r19, r25
    6cc6:	4a 1f       	adc	r20, r26
    6cc8:	5b 1f       	adc	r21, r27
    6cca:	28 17       	cp	r18, r24
    6ccc:	39 07       	cpc	r19, r25
    6cce:	4a 07       	cpc	r20, r26
    6cd0:	5b 07       	cpc	r21, r27
    6cd2:	10 f4       	brcc	.+4      	; 0x6cd8 <strtoul+0x1a0>
    6cd4:	6f ef       	ldi	r22, 0xFF	; 255
    6cd6:	01 c0       	rjmp	.+2      	; 0x6cda <strtoul+0x1a2>
    6cd8:	61 e0       	ldi	r22, 0x01	; 1
    6cda:	31 96       	adiw	r30, 0x01	; 1
    6cdc:	d1 01       	movw	r26, r2
    6cde:	6c 90       	ld	r6, X
    6ce0:	c6 cf       	rjmp	.-116    	; 0x6c6e <strtoul+0x136>
    6ce2:	01 15       	cp	r16, r1
    6ce4:	11 05       	cpc	r17, r1
    6ce6:	51 f0       	breq	.+20     	; 0x6cfc <strtoul+0x1c4>
    6ce8:	66 23       	and	r22, r22
    6cea:	11 f0       	breq	.+4      	; 0x6cf0 <strtoul+0x1b8>
    6cec:	31 97       	sbiw	r30, 0x01	; 1
    6cee:	03 c0       	rjmp	.+6      	; 0x6cf6 <strtoul+0x1be>
    6cf0:	71 fe       	sbrs	r7, 1
    6cf2:	04 c0       	rjmp	.+8      	; 0x6cfc <strtoul+0x1c4>
    6cf4:	32 97       	sbiw	r30, 0x02	; 2
    6cf6:	d8 01       	movw	r26, r16
    6cf8:	ed 93       	st	X+, r30
    6cfa:	fc 93       	st	X, r31
    6cfc:	70 fe       	sbrs	r7, 0
    6cfe:	07 c0       	rjmp	.+14     	; 0x6d0e <strtoul+0x1d6>
    6d00:	50 95       	com	r21
    6d02:	40 95       	com	r20
    6d04:	30 95       	com	r19
    6d06:	21 95       	neg	r18
    6d08:	3f 4f       	sbci	r19, 0xFF	; 255
    6d0a:	4f 4f       	sbci	r20, 0xFF	; 255
    6d0c:	5f 4f       	sbci	r21, 0xFF	; 255
    6d0e:	67 ff       	sbrs	r22, 7
    6d10:	10 c0       	rjmp	.+32     	; 0x6d32 <strtoul+0x1fa>
    6d12:	82 e2       	ldi	r24, 0x22	; 34
    6d14:	90 e0       	ldi	r25, 0x00	; 0
    6d16:	80 93 44 2d 	sts	0x2D44, r24
    6d1a:	90 93 45 2d 	sts	0x2D45, r25
    6d1e:	6f ef       	ldi	r22, 0xFF	; 255
    6d20:	7f ef       	ldi	r23, 0xFF	; 255
    6d22:	8f ef       	ldi	r24, 0xFF	; 255
    6d24:	9f ef       	ldi	r25, 0xFF	; 255
    6d26:	07 c0       	rjmp	.+14     	; 0x6d36 <strtoul+0x1fe>
    6d28:	60 e0       	ldi	r22, 0x00	; 0
    6d2a:	70 e0       	ldi	r23, 0x00	; 0
    6d2c:	80 e0       	ldi	r24, 0x00	; 0
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	02 c0       	rjmp	.+4      	; 0x6d36 <strtoul+0x1fe>
    6d32:	b9 01       	movw	r22, r18
    6d34:	ca 01       	movw	r24, r20
    6d36:	df 91       	pop	r29
    6d38:	cf 91       	pop	r28
    6d3a:	1f 91       	pop	r17
    6d3c:	0f 91       	pop	r16
    6d3e:	ff 90       	pop	r15
    6d40:	ef 90       	pop	r14
    6d42:	df 90       	pop	r13
    6d44:	cf 90       	pop	r12
    6d46:	bf 90       	pop	r11
    6d48:	af 90       	pop	r10
    6d4a:	9f 90       	pop	r9
    6d4c:	8f 90       	pop	r8
    6d4e:	7f 90       	pop	r7
    6d50:	6f 90       	pop	r6
    6d52:	5f 90       	pop	r5
    6d54:	3f 90       	pop	r3
    6d56:	2f 90       	pop	r2
    6d58:	08 95       	ret

00006d5a <atoi>:
    6d5a:	fc 01       	movw	r30, r24
    6d5c:	88 27       	eor	r24, r24
    6d5e:	99 27       	eor	r25, r25
    6d60:	e8 94       	clt
    6d62:	21 91       	ld	r18, Z+
    6d64:	20 32       	cpi	r18, 0x20	; 32
    6d66:	e9 f3       	breq	.-6      	; 0x6d62 <atoi+0x8>
    6d68:	29 30       	cpi	r18, 0x09	; 9
    6d6a:	10 f0       	brcs	.+4      	; 0x6d70 <atoi+0x16>
    6d6c:	2e 30       	cpi	r18, 0x0E	; 14
    6d6e:	c8 f3       	brcs	.-14     	; 0x6d62 <atoi+0x8>
    6d70:	2b 32       	cpi	r18, 0x2B	; 43
    6d72:	39 f0       	breq	.+14     	; 0x6d82 <atoi+0x28>
    6d74:	2d 32       	cpi	r18, 0x2D	; 45
    6d76:	31 f4       	brne	.+12     	; 0x6d84 <atoi+0x2a>
    6d78:	68 94       	set
    6d7a:	03 c0       	rjmp	.+6      	; 0x6d82 <atoi+0x28>
    6d7c:	62 d1       	rcall	.+708    	; 0x7042 <__mulhi_const_10>
    6d7e:	82 0f       	add	r24, r18
    6d80:	91 1d       	adc	r25, r1
    6d82:	21 91       	ld	r18, Z+
    6d84:	20 53       	subi	r18, 0x30	; 48
    6d86:	2a 30       	cpi	r18, 0x0A	; 10
    6d88:	c8 f3       	brcs	.-14     	; 0x6d7c <atoi+0x22>
    6d8a:	1e f4       	brtc	.+6      	; 0x6d92 <atoi+0x38>
    6d8c:	90 95       	com	r25
    6d8e:	81 95       	neg	r24
    6d90:	9f 4f       	sbci	r25, 0xFF	; 255
    6d92:	08 95       	ret

00006d94 <__ftoa_engine>:
    6d94:	28 30       	cpi	r18, 0x08	; 8
    6d96:	08 f0       	brcs	.+2      	; 0x6d9a <__ftoa_engine+0x6>
    6d98:	27 e0       	ldi	r18, 0x07	; 7
    6d9a:	33 27       	eor	r19, r19
    6d9c:	da 01       	movw	r26, r20
    6d9e:	99 0f       	add	r25, r25
    6da0:	31 1d       	adc	r19, r1
    6da2:	87 fd       	sbrc	r24, 7
    6da4:	91 60       	ori	r25, 0x01	; 1
    6da6:	00 96       	adiw	r24, 0x00	; 0
    6da8:	61 05       	cpc	r22, r1
    6daa:	71 05       	cpc	r23, r1
    6dac:	39 f4       	brne	.+14     	; 0x6dbc <__ftoa_engine+0x28>
    6dae:	32 60       	ori	r19, 0x02	; 2
    6db0:	2e 5f       	subi	r18, 0xFE	; 254
    6db2:	3d 93       	st	X+, r19
    6db4:	30 e3       	ldi	r19, 0x30	; 48
    6db6:	2a 95       	dec	r18
    6db8:	e1 f7       	brne	.-8      	; 0x6db2 <__ftoa_engine+0x1e>
    6dba:	08 95       	ret
    6dbc:	9f 3f       	cpi	r25, 0xFF	; 255
    6dbe:	30 f0       	brcs	.+12     	; 0x6dcc <__ftoa_engine+0x38>
    6dc0:	80 38       	cpi	r24, 0x80	; 128
    6dc2:	71 05       	cpc	r23, r1
    6dc4:	61 05       	cpc	r22, r1
    6dc6:	09 f0       	breq	.+2      	; 0x6dca <__ftoa_engine+0x36>
    6dc8:	3c 5f       	subi	r19, 0xFC	; 252
    6dca:	3c 5f       	subi	r19, 0xFC	; 252
    6dcc:	3d 93       	st	X+, r19
    6dce:	91 30       	cpi	r25, 0x01	; 1
    6dd0:	08 f0       	brcs	.+2      	; 0x6dd4 <__ftoa_engine+0x40>
    6dd2:	80 68       	ori	r24, 0x80	; 128
    6dd4:	91 1d       	adc	r25, r1
    6dd6:	df 93       	push	r29
    6dd8:	cf 93       	push	r28
    6dda:	1f 93       	push	r17
    6ddc:	0f 93       	push	r16
    6dde:	ff 92       	push	r15
    6de0:	ef 92       	push	r14
    6de2:	19 2f       	mov	r17, r25
    6de4:	98 7f       	andi	r25, 0xF8	; 248
    6de6:	96 95       	lsr	r25
    6de8:	e9 2f       	mov	r30, r25
    6dea:	96 95       	lsr	r25
    6dec:	96 95       	lsr	r25
    6dee:	e9 0f       	add	r30, r25
    6df0:	ff 27       	eor	r31, r31
    6df2:	ec 52       	subi	r30, 0x2C	; 44
    6df4:	fd 4f       	sbci	r31, 0xFD	; 253
    6df6:	99 27       	eor	r25, r25
    6df8:	33 27       	eor	r19, r19
    6dfa:	ee 24       	eor	r14, r14
    6dfc:	ff 24       	eor	r15, r15
    6dfe:	a7 01       	movw	r20, r14
    6e00:	e7 01       	movw	r28, r14
    6e02:	05 90       	lpm	r0, Z+
    6e04:	08 94       	sec
    6e06:	07 94       	ror	r0
    6e08:	28 f4       	brcc	.+10     	; 0x6e14 <__ftoa_engine+0x80>
    6e0a:	36 0f       	add	r19, r22
    6e0c:	e7 1e       	adc	r14, r23
    6e0e:	f8 1e       	adc	r15, r24
    6e10:	49 1f       	adc	r20, r25
    6e12:	51 1d       	adc	r21, r1
    6e14:	66 0f       	add	r22, r22
    6e16:	77 1f       	adc	r23, r23
    6e18:	88 1f       	adc	r24, r24
    6e1a:	99 1f       	adc	r25, r25
    6e1c:	06 94       	lsr	r0
    6e1e:	a1 f7       	brne	.-24     	; 0x6e08 <__ftoa_engine+0x74>
    6e20:	05 90       	lpm	r0, Z+
    6e22:	07 94       	ror	r0
    6e24:	28 f4       	brcc	.+10     	; 0x6e30 <__ftoa_engine+0x9c>
    6e26:	e7 0e       	add	r14, r23
    6e28:	f8 1e       	adc	r15, r24
    6e2a:	49 1f       	adc	r20, r25
    6e2c:	56 1f       	adc	r21, r22
    6e2e:	c1 1d       	adc	r28, r1
    6e30:	77 0f       	add	r23, r23
    6e32:	88 1f       	adc	r24, r24
    6e34:	99 1f       	adc	r25, r25
    6e36:	66 1f       	adc	r22, r22
    6e38:	06 94       	lsr	r0
    6e3a:	a1 f7       	brne	.-24     	; 0x6e24 <__ftoa_engine+0x90>
    6e3c:	05 90       	lpm	r0, Z+
    6e3e:	07 94       	ror	r0
    6e40:	28 f4       	brcc	.+10     	; 0x6e4c <__ftoa_engine+0xb8>
    6e42:	f8 0e       	add	r15, r24
    6e44:	49 1f       	adc	r20, r25
    6e46:	56 1f       	adc	r21, r22
    6e48:	c7 1f       	adc	r28, r23
    6e4a:	d1 1d       	adc	r29, r1
    6e4c:	88 0f       	add	r24, r24
    6e4e:	99 1f       	adc	r25, r25
    6e50:	66 1f       	adc	r22, r22
    6e52:	77 1f       	adc	r23, r23
    6e54:	06 94       	lsr	r0
    6e56:	a1 f7       	brne	.-24     	; 0x6e40 <__ftoa_engine+0xac>
    6e58:	05 90       	lpm	r0, Z+
    6e5a:	07 94       	ror	r0
    6e5c:	20 f4       	brcc	.+8      	; 0x6e66 <__ftoa_engine+0xd2>
    6e5e:	49 0f       	add	r20, r25
    6e60:	56 1f       	adc	r21, r22
    6e62:	c7 1f       	adc	r28, r23
    6e64:	d8 1f       	adc	r29, r24
    6e66:	99 0f       	add	r25, r25
    6e68:	66 1f       	adc	r22, r22
    6e6a:	77 1f       	adc	r23, r23
    6e6c:	88 1f       	adc	r24, r24
    6e6e:	06 94       	lsr	r0
    6e70:	a9 f7       	brne	.-22     	; 0x6e5c <__ftoa_engine+0xc8>
    6e72:	84 91       	lpm	r24, Z
    6e74:	10 95       	com	r17
    6e76:	17 70       	andi	r17, 0x07	; 7
    6e78:	41 f0       	breq	.+16     	; 0x6e8a <__ftoa_engine+0xf6>
    6e7a:	d6 95       	lsr	r29
    6e7c:	c7 95       	ror	r28
    6e7e:	57 95       	ror	r21
    6e80:	47 95       	ror	r20
    6e82:	f7 94       	ror	r15
    6e84:	e7 94       	ror	r14
    6e86:	1a 95       	dec	r17
    6e88:	c1 f7       	brne	.-16     	; 0x6e7a <__ftoa_engine+0xe6>
    6e8a:	ea e7       	ldi	r30, 0x7A	; 122
    6e8c:	f2 e0       	ldi	r31, 0x02	; 2
    6e8e:	68 94       	set
    6e90:	15 90       	lpm	r1, Z+
    6e92:	15 91       	lpm	r17, Z+
    6e94:	35 91       	lpm	r19, Z+
    6e96:	65 91       	lpm	r22, Z+
    6e98:	95 91       	lpm	r25, Z+
    6e9a:	05 90       	lpm	r0, Z+
    6e9c:	7f e2       	ldi	r23, 0x2F	; 47
    6e9e:	73 95       	inc	r23
    6ea0:	e1 18       	sub	r14, r1
    6ea2:	f1 0a       	sbc	r15, r17
    6ea4:	43 0b       	sbc	r20, r19
    6ea6:	56 0b       	sbc	r21, r22
    6ea8:	c9 0b       	sbc	r28, r25
    6eaa:	d0 09       	sbc	r29, r0
    6eac:	c0 f7       	brcc	.-16     	; 0x6e9e <__ftoa_engine+0x10a>
    6eae:	e1 0c       	add	r14, r1
    6eb0:	f1 1e       	adc	r15, r17
    6eb2:	43 1f       	adc	r20, r19
    6eb4:	56 1f       	adc	r21, r22
    6eb6:	c9 1f       	adc	r28, r25
    6eb8:	d0 1d       	adc	r29, r0
    6eba:	7e f4       	brtc	.+30     	; 0x6eda <__ftoa_engine+0x146>
    6ebc:	70 33       	cpi	r23, 0x30	; 48
    6ebe:	11 f4       	brne	.+4      	; 0x6ec4 <__ftoa_engine+0x130>
    6ec0:	8a 95       	dec	r24
    6ec2:	e6 cf       	rjmp	.-52     	; 0x6e90 <__ftoa_engine+0xfc>
    6ec4:	e8 94       	clt
    6ec6:	01 50       	subi	r16, 0x01	; 1
    6ec8:	30 f0       	brcs	.+12     	; 0x6ed6 <__ftoa_engine+0x142>
    6eca:	08 0f       	add	r16, r24
    6ecc:	0a f4       	brpl	.+2      	; 0x6ed0 <__ftoa_engine+0x13c>
    6ece:	00 27       	eor	r16, r16
    6ed0:	02 17       	cp	r16, r18
    6ed2:	08 f4       	brcc	.+2      	; 0x6ed6 <__ftoa_engine+0x142>
    6ed4:	20 2f       	mov	r18, r16
    6ed6:	23 95       	inc	r18
    6ed8:	02 2f       	mov	r16, r18
    6eda:	7a 33       	cpi	r23, 0x3A	; 58
    6edc:	28 f0       	brcs	.+10     	; 0x6ee8 <__ftoa_engine+0x154>
    6ede:	79 e3       	ldi	r23, 0x39	; 57
    6ee0:	7d 93       	st	X+, r23
    6ee2:	2a 95       	dec	r18
    6ee4:	e9 f7       	brne	.-6      	; 0x6ee0 <__ftoa_engine+0x14c>
    6ee6:	10 c0       	rjmp	.+32     	; 0x6f08 <__ftoa_engine+0x174>
    6ee8:	7d 93       	st	X+, r23
    6eea:	2a 95       	dec	r18
    6eec:	89 f6       	brne	.-94     	; 0x6e90 <__ftoa_engine+0xfc>
    6eee:	06 94       	lsr	r0
    6ef0:	97 95       	ror	r25
    6ef2:	67 95       	ror	r22
    6ef4:	37 95       	ror	r19
    6ef6:	17 95       	ror	r17
    6ef8:	17 94       	ror	r1
    6efa:	e1 18       	sub	r14, r1
    6efc:	f1 0a       	sbc	r15, r17
    6efe:	43 0b       	sbc	r20, r19
    6f00:	56 0b       	sbc	r21, r22
    6f02:	c9 0b       	sbc	r28, r25
    6f04:	d0 09       	sbc	r29, r0
    6f06:	98 f0       	brcs	.+38     	; 0x6f2e <__ftoa_engine+0x19a>
    6f08:	23 95       	inc	r18
    6f0a:	7e 91       	ld	r23, -X
    6f0c:	73 95       	inc	r23
    6f0e:	7a 33       	cpi	r23, 0x3A	; 58
    6f10:	08 f0       	brcs	.+2      	; 0x6f14 <__ftoa_engine+0x180>
    6f12:	70 e3       	ldi	r23, 0x30	; 48
    6f14:	7c 93       	st	X, r23
    6f16:	20 13       	cpse	r18, r16
    6f18:	b8 f7       	brcc	.-18     	; 0x6f08 <__ftoa_engine+0x174>
    6f1a:	7e 91       	ld	r23, -X
    6f1c:	70 61       	ori	r23, 0x10	; 16
    6f1e:	7d 93       	st	X+, r23
    6f20:	30 f0       	brcs	.+12     	; 0x6f2e <__ftoa_engine+0x19a>
    6f22:	83 95       	inc	r24
    6f24:	71 e3       	ldi	r23, 0x31	; 49
    6f26:	7d 93       	st	X+, r23
    6f28:	70 e3       	ldi	r23, 0x30	; 48
    6f2a:	2a 95       	dec	r18
    6f2c:	e1 f7       	brne	.-8      	; 0x6f26 <__ftoa_engine+0x192>
    6f2e:	11 24       	eor	r1, r1
    6f30:	ef 90       	pop	r14
    6f32:	ff 90       	pop	r15
    6f34:	0f 91       	pop	r16
    6f36:	1f 91       	pop	r17
    6f38:	cf 91       	pop	r28
    6f3a:	df 91       	pop	r29
    6f3c:	99 27       	eor	r25, r25
    6f3e:	87 fd       	sbrc	r24, 7
    6f40:	90 95       	com	r25
    6f42:	08 95       	ret

00006f44 <isspace>:
    6f44:	91 11       	cpse	r25, r1
    6f46:	58 c1       	rjmp	.+688    	; 0x71f8 <__ctype_isfalse>
    6f48:	80 32       	cpi	r24, 0x20	; 32
    6f4a:	19 f0       	breq	.+6      	; 0x6f52 <isspace+0xe>
    6f4c:	89 50       	subi	r24, 0x09	; 9
    6f4e:	85 50       	subi	r24, 0x05	; 5
    6f50:	d0 f7       	brcc	.-12     	; 0x6f46 <isspace+0x2>
    6f52:	08 95       	ret

00006f54 <strnlen_P>:
    6f54:	fc 01       	movw	r30, r24
    6f56:	05 90       	lpm	r0, Z+
    6f58:	61 50       	subi	r22, 0x01	; 1
    6f5a:	70 40       	sbci	r23, 0x00	; 0
    6f5c:	01 10       	cpse	r0, r1
    6f5e:	d8 f7       	brcc	.-10     	; 0x6f56 <strnlen_P+0x2>
    6f60:	80 95       	com	r24
    6f62:	90 95       	com	r25
    6f64:	8e 0f       	add	r24, r30
    6f66:	9f 1f       	adc	r25, r31
    6f68:	08 95       	ret

00006f6a <strtok>:
    6f6a:	44 e8       	ldi	r20, 0x84	; 132
    6f6c:	57 e2       	ldi	r21, 0x27	; 39
    6f6e:	42 c0       	rjmp	.+132    	; 0x6ff4 <strtok_r>

00006f70 <memcpy>:
    6f70:	fb 01       	movw	r30, r22
    6f72:	dc 01       	movw	r26, r24
    6f74:	02 c0       	rjmp	.+4      	; 0x6f7a <memcpy+0xa>
    6f76:	01 90       	ld	r0, Z+
    6f78:	0d 92       	st	X+, r0
    6f7a:	41 50       	subi	r20, 0x01	; 1
    6f7c:	50 40       	sbci	r21, 0x00	; 0
    6f7e:	d8 f7       	brcc	.-10     	; 0x6f76 <memcpy+0x6>
    6f80:	08 95       	ret

00006f82 <strcmp>:
    6f82:	fb 01       	movw	r30, r22
    6f84:	dc 01       	movw	r26, r24
    6f86:	8d 91       	ld	r24, X+
    6f88:	01 90       	ld	r0, Z+
    6f8a:	80 19       	sub	r24, r0
    6f8c:	01 10       	cpse	r0, r1
    6f8e:	d9 f3       	breq	.-10     	; 0x6f86 <strcmp+0x4>
    6f90:	99 0b       	sbc	r25, r25
    6f92:	08 95       	ret

00006f94 <strcpy>:
    6f94:	fb 01       	movw	r30, r22
    6f96:	dc 01       	movw	r26, r24
    6f98:	01 90       	ld	r0, Z+
    6f9a:	0d 92       	st	X+, r0
    6f9c:	00 20       	and	r0, r0
    6f9e:	e1 f7       	brne	.-8      	; 0x6f98 <strcpy+0x4>
    6fa0:	08 95       	ret

00006fa2 <strcspn>:
    6fa2:	dc 01       	movw	r26, r24
    6fa4:	5d 91       	ld	r21, X+
    6fa6:	55 23       	and	r21, r21
    6fa8:	31 f0       	breq	.+12     	; 0x6fb6 <strcspn+0x14>
    6faa:	fb 01       	movw	r30, r22
    6fac:	01 90       	ld	r0, Z+
    6fae:	05 16       	cp	r0, r21
    6fb0:	01 10       	cpse	r0, r1
    6fb2:	e1 f7       	brne	.-8      	; 0x6fac <strcspn+0xa>
    6fb4:	b9 f7       	brne	.-18     	; 0x6fa4 <strcspn+0x2>
    6fb6:	80 95       	com	r24
    6fb8:	90 95       	com	r25
    6fba:	8a 0f       	add	r24, r26
    6fbc:	9b 1f       	adc	r25, r27
    6fbe:	08 95       	ret

00006fc0 <strncpy>:
    6fc0:	fb 01       	movw	r30, r22
    6fc2:	dc 01       	movw	r26, r24
    6fc4:	41 50       	subi	r20, 0x01	; 1
    6fc6:	50 40       	sbci	r21, 0x00	; 0
    6fc8:	48 f0       	brcs	.+18     	; 0x6fdc <strncpy+0x1c>
    6fca:	01 90       	ld	r0, Z+
    6fcc:	0d 92       	st	X+, r0
    6fce:	00 20       	and	r0, r0
    6fd0:	c9 f7       	brne	.-14     	; 0x6fc4 <strncpy+0x4>
    6fd2:	01 c0       	rjmp	.+2      	; 0x6fd6 <strncpy+0x16>
    6fd4:	1d 92       	st	X+, r1
    6fd6:	41 50       	subi	r20, 0x01	; 1
    6fd8:	50 40       	sbci	r21, 0x00	; 0
    6fda:	e0 f7       	brcc	.-8      	; 0x6fd4 <strncpy+0x14>
    6fdc:	08 95       	ret

00006fde <strnlen>:
    6fde:	fc 01       	movw	r30, r24
    6fe0:	61 50       	subi	r22, 0x01	; 1
    6fe2:	70 40       	sbci	r23, 0x00	; 0
    6fe4:	01 90       	ld	r0, Z+
    6fe6:	01 10       	cpse	r0, r1
    6fe8:	d8 f7       	brcc	.-10     	; 0x6fe0 <strnlen+0x2>
    6fea:	80 95       	com	r24
    6fec:	90 95       	com	r25
    6fee:	8e 0f       	add	r24, r30
    6ff0:	9f 1f       	adc	r25, r31
    6ff2:	08 95       	ret

00006ff4 <strtok_r>:
    6ff4:	fa 01       	movw	r30, r20
    6ff6:	a1 91       	ld	r26, Z+
    6ff8:	b0 81       	ld	r27, Z
    6ffa:	00 97       	sbiw	r24, 0x00	; 0
    6ffc:	19 f4       	brne	.+6      	; 0x7004 <strtok_r+0x10>
    6ffe:	10 97       	sbiw	r26, 0x00	; 0
    7000:	e1 f0       	breq	.+56     	; 0x703a <strtok_r+0x46>
    7002:	cd 01       	movw	r24, r26
    7004:	dc 01       	movw	r26, r24
    7006:	cd 01       	movw	r24, r26
    7008:	0d 90       	ld	r0, X+
    700a:	00 20       	and	r0, r0
    700c:	11 f4       	brne	.+4      	; 0x7012 <strtok_r+0x1e>
    700e:	c0 01       	movw	r24, r0
    7010:	13 c0       	rjmp	.+38     	; 0x7038 <strtok_r+0x44>
    7012:	fb 01       	movw	r30, r22
    7014:	21 91       	ld	r18, Z+
    7016:	22 23       	and	r18, r18
    7018:	19 f0       	breq	.+6      	; 0x7020 <strtok_r+0x2c>
    701a:	20 15       	cp	r18, r0
    701c:	d9 f7       	brne	.-10     	; 0x7014 <strtok_r+0x20>
    701e:	f3 cf       	rjmp	.-26     	; 0x7006 <strtok_r+0x12>
    7020:	fb 01       	movw	r30, r22
    7022:	21 91       	ld	r18, Z+
    7024:	20 15       	cp	r18, r0
    7026:	19 f4       	brne	.+6      	; 0x702e <strtok_r+0x3a>
    7028:	1e 92       	st	-X, r1
    702a:	11 96       	adiw	r26, 0x01	; 1
    702c:	06 c0       	rjmp	.+12     	; 0x703a <strtok_r+0x46>
    702e:	22 23       	and	r18, r18
    7030:	c1 f7       	brne	.-16     	; 0x7022 <strtok_r+0x2e>
    7032:	0d 90       	ld	r0, X+
    7034:	00 20       	and	r0, r0
    7036:	a1 f7       	brne	.-24     	; 0x7020 <strtok_r+0x2c>
    7038:	d0 01       	movw	r26, r0
    703a:	fa 01       	movw	r30, r20
    703c:	a1 93       	st	Z+, r26
    703e:	b0 83       	st	Z, r27
    7040:	08 95       	ret

00007042 <__mulhi_const_10>:
    7042:	7a e0       	ldi	r23, 0x0A	; 10
    7044:	97 9f       	mul	r25, r23
    7046:	90 2d       	mov	r25, r0
    7048:	87 9f       	mul	r24, r23
    704a:	80 2d       	mov	r24, r0
    704c:	91 0d       	add	r25, r1
    704e:	11 24       	eor	r1, r1
    7050:	08 95       	ret

00007052 <fputc>:
    7052:	0f 93       	push	r16
    7054:	1f 93       	push	r17
    7056:	cf 93       	push	r28
    7058:	df 93       	push	r29
    705a:	18 2f       	mov	r17, r24
    705c:	09 2f       	mov	r16, r25
    705e:	eb 01       	movw	r28, r22
    7060:	8b 81       	ldd	r24, Y+3	; 0x03
    7062:	81 fd       	sbrc	r24, 1
    7064:	03 c0       	rjmp	.+6      	; 0x706c <fputc+0x1a>
    7066:	8f ef       	ldi	r24, 0xFF	; 255
    7068:	9f ef       	ldi	r25, 0xFF	; 255
    706a:	20 c0       	rjmp	.+64     	; 0x70ac <fputc+0x5a>
    706c:	82 ff       	sbrs	r24, 2
    706e:	10 c0       	rjmp	.+32     	; 0x7090 <fputc+0x3e>
    7070:	4e 81       	ldd	r20, Y+6	; 0x06
    7072:	5f 81       	ldd	r21, Y+7	; 0x07
    7074:	2c 81       	ldd	r18, Y+4	; 0x04
    7076:	3d 81       	ldd	r19, Y+5	; 0x05
    7078:	42 17       	cp	r20, r18
    707a:	53 07       	cpc	r21, r19
    707c:	7c f4       	brge	.+30     	; 0x709c <fputc+0x4a>
    707e:	e8 81       	ld	r30, Y
    7080:	f9 81       	ldd	r31, Y+1	; 0x01
    7082:	9f 01       	movw	r18, r30
    7084:	2f 5f       	subi	r18, 0xFF	; 255
    7086:	3f 4f       	sbci	r19, 0xFF	; 255
    7088:	28 83       	st	Y, r18
    708a:	39 83       	std	Y+1, r19	; 0x01
    708c:	10 83       	st	Z, r17
    708e:	06 c0       	rjmp	.+12     	; 0x709c <fputc+0x4a>
    7090:	e8 85       	ldd	r30, Y+8	; 0x08
    7092:	f9 85       	ldd	r31, Y+9	; 0x09
    7094:	81 2f       	mov	r24, r17
    7096:	19 95       	eicall
    7098:	89 2b       	or	r24, r25
    709a:	29 f7       	brne	.-54     	; 0x7066 <fputc+0x14>
    709c:	2e 81       	ldd	r18, Y+6	; 0x06
    709e:	3f 81       	ldd	r19, Y+7	; 0x07
    70a0:	2f 5f       	subi	r18, 0xFF	; 255
    70a2:	3f 4f       	sbci	r19, 0xFF	; 255
    70a4:	2e 83       	std	Y+6, r18	; 0x06
    70a6:	3f 83       	std	Y+7, r19	; 0x07
    70a8:	81 2f       	mov	r24, r17
    70aa:	90 2f       	mov	r25, r16
    70ac:	df 91       	pop	r29
    70ae:	cf 91       	pop	r28
    70b0:	1f 91       	pop	r17
    70b2:	0f 91       	pop	r16
    70b4:	08 95       	ret

000070b6 <printf>:
    70b6:	cf 93       	push	r28
    70b8:	df 93       	push	r29
    70ba:	cd b7       	in	r28, 0x3d	; 61
    70bc:	de b7       	in	r29, 0x3e	; 62
    70be:	fe 01       	movw	r30, r28
    70c0:	36 96       	adiw	r30, 0x06	; 6
    70c2:	61 91       	ld	r22, Z+
    70c4:	71 91       	ld	r23, Z+
    70c6:	af 01       	movw	r20, r30
    70c8:	80 91 40 2d 	lds	r24, 0x2D40
    70cc:	90 91 41 2d 	lds	r25, 0x2D41
    70d0:	76 d9       	rcall	.-3348   	; 0x63be <vfprintf>
    70d2:	df 91       	pop	r29
    70d4:	cf 91       	pop	r28
    70d6:	08 95       	ret

000070d8 <putchar>:
    70d8:	60 91 40 2d 	lds	r22, 0x2D40
    70dc:	70 91 41 2d 	lds	r23, 0x2D41
    70e0:	b8 cf       	rjmp	.-144    	; 0x7052 <fputc>

000070e2 <puts>:
    70e2:	0f 93       	push	r16
    70e4:	1f 93       	push	r17
    70e6:	cf 93       	push	r28
    70e8:	df 93       	push	r29
    70ea:	e0 91 40 2d 	lds	r30, 0x2D40
    70ee:	f0 91 41 2d 	lds	r31, 0x2D41
    70f2:	23 81       	ldd	r18, Z+3	; 0x03
    70f4:	21 ff       	sbrs	r18, 1
    70f6:	1b c0       	rjmp	.+54     	; 0x712e <puts+0x4c>
    70f8:	ec 01       	movw	r28, r24
    70fa:	00 e0       	ldi	r16, 0x00	; 0
    70fc:	10 e0       	ldi	r17, 0x00	; 0
    70fe:	89 91       	ld	r24, Y+
    7100:	60 91 40 2d 	lds	r22, 0x2D40
    7104:	70 91 41 2d 	lds	r23, 0x2D41
    7108:	db 01       	movw	r26, r22
    710a:	18 96       	adiw	r26, 0x08	; 8
    710c:	ed 91       	ld	r30, X+
    710e:	fc 91       	ld	r31, X
    7110:	19 97       	sbiw	r26, 0x09	; 9
    7112:	88 23       	and	r24, r24
    7114:	31 f0       	breq	.+12     	; 0x7122 <puts+0x40>
    7116:	19 95       	eicall
    7118:	89 2b       	or	r24, r25
    711a:	89 f3       	breq	.-30     	; 0x70fe <puts+0x1c>
    711c:	0f ef       	ldi	r16, 0xFF	; 255
    711e:	1f ef       	ldi	r17, 0xFF	; 255
    7120:	ee cf       	rjmp	.-36     	; 0x70fe <puts+0x1c>
    7122:	8a e0       	ldi	r24, 0x0A	; 10
    7124:	19 95       	eicall
    7126:	89 2b       	or	r24, r25
    7128:	11 f4       	brne	.+4      	; 0x712e <puts+0x4c>
    712a:	c8 01       	movw	r24, r16
    712c:	02 c0       	rjmp	.+4      	; 0x7132 <puts+0x50>
    712e:	8f ef       	ldi	r24, 0xFF	; 255
    7130:	9f ef       	ldi	r25, 0xFF	; 255
    7132:	df 91       	pop	r29
    7134:	cf 91       	pop	r28
    7136:	1f 91       	pop	r17
    7138:	0f 91       	pop	r16
    713a:	08 95       	ret

0000713c <__ultoa_invert>:
    713c:	fa 01       	movw	r30, r20
    713e:	aa 27       	eor	r26, r26
    7140:	28 30       	cpi	r18, 0x08	; 8
    7142:	51 f1       	breq	.+84     	; 0x7198 <__ultoa_invert+0x5c>
    7144:	20 31       	cpi	r18, 0x10	; 16
    7146:	81 f1       	breq	.+96     	; 0x71a8 <__ultoa_invert+0x6c>
    7148:	e8 94       	clt
    714a:	6f 93       	push	r22
    714c:	6e 7f       	andi	r22, 0xFE	; 254
    714e:	6e 5f       	subi	r22, 0xFE	; 254
    7150:	7f 4f       	sbci	r23, 0xFF	; 255
    7152:	8f 4f       	sbci	r24, 0xFF	; 255
    7154:	9f 4f       	sbci	r25, 0xFF	; 255
    7156:	af 4f       	sbci	r26, 0xFF	; 255
    7158:	b1 e0       	ldi	r27, 0x01	; 1
    715a:	3e d0       	rcall	.+124    	; 0x71d8 <__ultoa_invert+0x9c>
    715c:	b4 e0       	ldi	r27, 0x04	; 4
    715e:	3c d0       	rcall	.+120    	; 0x71d8 <__ultoa_invert+0x9c>
    7160:	67 0f       	add	r22, r23
    7162:	78 1f       	adc	r23, r24
    7164:	89 1f       	adc	r24, r25
    7166:	9a 1f       	adc	r25, r26
    7168:	a1 1d       	adc	r26, r1
    716a:	68 0f       	add	r22, r24
    716c:	79 1f       	adc	r23, r25
    716e:	8a 1f       	adc	r24, r26
    7170:	91 1d       	adc	r25, r1
    7172:	a1 1d       	adc	r26, r1
    7174:	6a 0f       	add	r22, r26
    7176:	71 1d       	adc	r23, r1
    7178:	81 1d       	adc	r24, r1
    717a:	91 1d       	adc	r25, r1
    717c:	a1 1d       	adc	r26, r1
    717e:	20 d0       	rcall	.+64     	; 0x71c0 <__ultoa_invert+0x84>
    7180:	09 f4       	brne	.+2      	; 0x7184 <__ultoa_invert+0x48>
    7182:	68 94       	set
    7184:	3f 91       	pop	r19
    7186:	2a e0       	ldi	r18, 0x0A	; 10
    7188:	26 9f       	mul	r18, r22
    718a:	11 24       	eor	r1, r1
    718c:	30 19       	sub	r19, r0
    718e:	30 5d       	subi	r19, 0xD0	; 208
    7190:	31 93       	st	Z+, r19
    7192:	de f6       	brtc	.-74     	; 0x714a <__ultoa_invert+0xe>
    7194:	cf 01       	movw	r24, r30
    7196:	08 95       	ret
    7198:	46 2f       	mov	r20, r22
    719a:	47 70       	andi	r20, 0x07	; 7
    719c:	40 5d       	subi	r20, 0xD0	; 208
    719e:	41 93       	st	Z+, r20
    71a0:	b3 e0       	ldi	r27, 0x03	; 3
    71a2:	0f d0       	rcall	.+30     	; 0x71c2 <__ultoa_invert+0x86>
    71a4:	c9 f7       	brne	.-14     	; 0x7198 <__ultoa_invert+0x5c>
    71a6:	f6 cf       	rjmp	.-20     	; 0x7194 <__ultoa_invert+0x58>
    71a8:	46 2f       	mov	r20, r22
    71aa:	4f 70       	andi	r20, 0x0F	; 15
    71ac:	40 5d       	subi	r20, 0xD0	; 208
    71ae:	4a 33       	cpi	r20, 0x3A	; 58
    71b0:	18 f0       	brcs	.+6      	; 0x71b8 <__ultoa_invert+0x7c>
    71b2:	49 5d       	subi	r20, 0xD9	; 217
    71b4:	31 fd       	sbrc	r19, 1
    71b6:	40 52       	subi	r20, 0x20	; 32
    71b8:	41 93       	st	Z+, r20
    71ba:	02 d0       	rcall	.+4      	; 0x71c0 <__ultoa_invert+0x84>
    71bc:	a9 f7       	brne	.-22     	; 0x71a8 <__ultoa_invert+0x6c>
    71be:	ea cf       	rjmp	.-44     	; 0x7194 <__ultoa_invert+0x58>
    71c0:	b4 e0       	ldi	r27, 0x04	; 4
    71c2:	a6 95       	lsr	r26
    71c4:	97 95       	ror	r25
    71c6:	87 95       	ror	r24
    71c8:	77 95       	ror	r23
    71ca:	67 95       	ror	r22
    71cc:	ba 95       	dec	r27
    71ce:	c9 f7       	brne	.-14     	; 0x71c2 <__ultoa_invert+0x86>
    71d0:	00 97       	sbiw	r24, 0x00	; 0
    71d2:	61 05       	cpc	r22, r1
    71d4:	71 05       	cpc	r23, r1
    71d6:	08 95       	ret
    71d8:	9b 01       	movw	r18, r22
    71da:	ac 01       	movw	r20, r24
    71dc:	0a 2e       	mov	r0, r26
    71de:	06 94       	lsr	r0
    71e0:	57 95       	ror	r21
    71e2:	47 95       	ror	r20
    71e4:	37 95       	ror	r19
    71e6:	27 95       	ror	r18
    71e8:	ba 95       	dec	r27
    71ea:	c9 f7       	brne	.-14     	; 0x71de <__ultoa_invert+0xa2>
    71ec:	62 0f       	add	r22, r18
    71ee:	73 1f       	adc	r23, r19
    71f0:	84 1f       	adc	r24, r20
    71f2:	95 1f       	adc	r25, r21
    71f4:	a0 1d       	adc	r26, r0
    71f6:	08 95       	ret

000071f8 <__ctype_isfalse>:
    71f8:	99 27       	eor	r25, r25
    71fa:	88 27       	eor	r24, r24

000071fc <__ctype_istrue>:
    71fc:	08 95       	ret

000071fe <__mulsi3>:
    71fe:	db 01       	movw	r26, r22
    7200:	8f 93       	push	r24
    7202:	9f 93       	push	r25
    7204:	2d d0       	rcall	.+90     	; 0x7260 <__muluhisi3>
    7206:	bf 91       	pop	r27
    7208:	af 91       	pop	r26
    720a:	a2 9f       	mul	r26, r18
    720c:	80 0d       	add	r24, r0
    720e:	91 1d       	adc	r25, r1
    7210:	a3 9f       	mul	r26, r19
    7212:	90 0d       	add	r25, r0
    7214:	b2 9f       	mul	r27, r18
    7216:	90 0d       	add	r25, r0
    7218:	11 24       	eor	r1, r1
    721a:	08 95       	ret

0000721c <__udivmodsi4>:
    721c:	a1 e2       	ldi	r26, 0x21	; 33
    721e:	1a 2e       	mov	r1, r26
    7220:	aa 1b       	sub	r26, r26
    7222:	bb 1b       	sub	r27, r27
    7224:	fd 01       	movw	r30, r26
    7226:	0d c0       	rjmp	.+26     	; 0x7242 <__udivmodsi4_ep>

00007228 <__udivmodsi4_loop>:
    7228:	aa 1f       	adc	r26, r26
    722a:	bb 1f       	adc	r27, r27
    722c:	ee 1f       	adc	r30, r30
    722e:	ff 1f       	adc	r31, r31
    7230:	a2 17       	cp	r26, r18
    7232:	b3 07       	cpc	r27, r19
    7234:	e4 07       	cpc	r30, r20
    7236:	f5 07       	cpc	r31, r21
    7238:	20 f0       	brcs	.+8      	; 0x7242 <__udivmodsi4_ep>
    723a:	a2 1b       	sub	r26, r18
    723c:	b3 0b       	sbc	r27, r19
    723e:	e4 0b       	sbc	r30, r20
    7240:	f5 0b       	sbc	r31, r21

00007242 <__udivmodsi4_ep>:
    7242:	66 1f       	adc	r22, r22
    7244:	77 1f       	adc	r23, r23
    7246:	88 1f       	adc	r24, r24
    7248:	99 1f       	adc	r25, r25
    724a:	1a 94       	dec	r1
    724c:	69 f7       	brne	.-38     	; 0x7228 <__udivmodsi4_loop>
    724e:	60 95       	com	r22
    7250:	70 95       	com	r23
    7252:	80 95       	com	r24
    7254:	90 95       	com	r25
    7256:	9b 01       	movw	r18, r22
    7258:	ac 01       	movw	r20, r24
    725a:	bd 01       	movw	r22, r26
    725c:	cf 01       	movw	r24, r30
    725e:	08 95       	ret

00007260 <__muluhisi3>:
    7260:	5c dc       	rcall	.-1864   	; 0x6b1a <__umulhisi3>
    7262:	a5 9f       	mul	r26, r21
    7264:	90 0d       	add	r25, r0
    7266:	b4 9f       	mul	r27, r20
    7268:	90 0d       	add	r25, r0
    726a:	a4 9f       	mul	r26, r20
    726c:	80 0d       	add	r24, r0
    726e:	91 1d       	adc	r25, r1
    7270:	11 24       	eor	r1, r1
    7272:	08 95       	ret

00007274 <_exit>:
    7274:	f8 94       	cli

00007276 <__stop_program>:
    7276:	ff cf       	rjmp	.-2      	; 0x7276 <__stop_program>
