
Chem_sim_droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000844e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000c72  00802000  0000844e  000084e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000699  00802c72  00802c72  00009154  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00009154  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006f8  00000000  00000000  000091b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00012677  00000000  00000000  000098a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002f0e  00000000  00000000  0001bf1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006a0f  00000000  00000000  0001ee2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000023a4  00000000  00000000  0002583c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000352d  00000000  00000000  00027be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000bedc  00000000  00000000  0002b10d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a90  00000000  00000000  00036fe9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c2       	rjmp	.+1094   	; 0x448 <__ctors_end>
       2:	00 00       	nop
       4:	41 c2       	rjmp	.+1154   	; 0x488 <__bad_interrupt>
       6:	00 00       	nop
       8:	3f c2       	rjmp	.+1150   	; 0x488 <__bad_interrupt>
       a:	00 00       	nop
       c:	3d c2       	rjmp	.+1146   	; 0x488 <__bad_interrupt>
       e:	00 00       	nop
      10:	3b c2       	rjmp	.+1142   	; 0x488 <__bad_interrupt>
      12:	00 00       	nop
      14:	39 c2       	rjmp	.+1138   	; 0x488 <__bad_interrupt>
      16:	00 00       	nop
      18:	37 c2       	rjmp	.+1134   	; 0x488 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	35 c2       	rjmp	.+1130   	; 0x488 <__bad_interrupt>
      1e:	00 00       	nop
      20:	33 c2       	rjmp	.+1126   	; 0x488 <__bad_interrupt>
      22:	00 00       	nop
      24:	31 c2       	rjmp	.+1122   	; 0x488 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 9d 28 	jmp	0x513a	; 0x513a <__vector_10>
      2c:	2e c2       	rjmp	.+1116   	; 0x48a <__vector_11>
      2e:	00 00       	nop
      30:	2b c2       	rjmp	.+1110   	; 0x488 <__bad_interrupt>
      32:	00 00       	nop
      34:	29 c2       	rjmp	.+1106   	; 0x488 <__bad_interrupt>
      36:	00 00       	nop
      38:	27 c2       	rjmp	.+1102   	; 0x488 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	25 c2       	rjmp	.+1098   	; 0x488 <__bad_interrupt>
      3e:	00 00       	nop
      40:	23 c2       	rjmp	.+1094   	; 0x488 <__bad_interrupt>
      42:	00 00       	nop
      44:	21 c2       	rjmp	.+1090   	; 0x488 <__bad_interrupt>
      46:	00 00       	nop
      48:	1f c2       	rjmp	.+1086   	; 0x488 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1d c2       	rjmp	.+1082   	; 0x488 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1b c2       	rjmp	.+1078   	; 0x488 <__bad_interrupt>
      52:	00 00       	nop
      54:	19 c2       	rjmp	.+1074   	; 0x488 <__bad_interrupt>
      56:	00 00       	nop
      58:	17 c2       	rjmp	.+1070   	; 0x488 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	15 c2       	rjmp	.+1066   	; 0x488 <__bad_interrupt>
      5e:	00 00       	nop
      60:	13 c2       	rjmp	.+1062   	; 0x488 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__vector_25>
      68:	0c 94 22 0d 	jmp	0x1a44	; 0x1a44 <__vector_26>
      6c:	0c 94 fa 0c 	jmp	0x19f4	; 0x19f4 <__vector_27>
      70:	0c 94 4a 0d 	jmp	0x1a94	; 0x1a94 <__vector_28>
      74:	0c 94 9a 0d 	jmp	0x1b34	; 0x1b34 <__vector_29>
      78:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__vector_30>
      7c:	05 c2       	rjmp	.+1034   	; 0x488 <__bad_interrupt>
      7e:	00 00       	nop
      80:	03 c2       	rjmp	.+1030   	; 0x488 <__bad_interrupt>
      82:	00 00       	nop
      84:	01 c2       	rjmp	.+1026   	; 0x488 <__bad_interrupt>
      86:	00 00       	nop
      88:	ff c1       	rjmp	.+1022   	; 0x488 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fd c1       	rjmp	.+1018   	; 0x488 <__bad_interrupt>
      8e:	00 00       	nop
      90:	fb c1       	rjmp	.+1014   	; 0x488 <__bad_interrupt>
      92:	00 00       	nop
      94:	f9 c1       	rjmp	.+1010   	; 0x488 <__bad_interrupt>
      96:	00 00       	nop
      98:	f7 c1       	rjmp	.+1006   	; 0x488 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f5 c1       	rjmp	.+1002   	; 0x488 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f3 c1       	rjmp	.+998    	; 0x488 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f1 c1       	rjmp	.+994    	; 0x488 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ef c1       	rjmp	.+990    	; 0x488 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ed c1       	rjmp	.+986    	; 0x488 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	eb c1       	rjmp	.+982    	; 0x488 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e9 c1       	rjmp	.+978    	; 0x488 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	00 c4       	rjmp	.+2048   	; 0x8ba <__vector_46>
      ba:	00 00       	nop
      bc:	e5 c1       	rjmp	.+970    	; 0x488 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e3 c1       	rjmp	.+966    	; 0x488 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e1 c1       	rjmp	.+962    	; 0x488 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	df c1       	rjmp	.+958    	; 0x488 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	dd c1       	rjmp	.+954    	; 0x488 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	db c1       	rjmp	.+950    	; 0x488 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d9 c1       	rjmp	.+946    	; 0x488 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d7 c1       	rjmp	.+942    	; 0x488 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d5 c1       	rjmp	.+938    	; 0x488 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d3 c1       	rjmp	.+934    	; 0x488 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d1 c1       	rjmp	.+930    	; 0x488 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__vector_58>
      ec:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_59>
      f0:	0c 94 62 0e 	jmp	0x1cc4	; 0x1cc4 <__vector_60>
      f4:	0c 94 b2 0e 	jmp	0x1d64	; 0x1d64 <__vector_61>
      f8:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_62>
      fc:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <__vector_63>
     100:	c3 c1       	rjmp	.+902    	; 0x488 <__bad_interrupt>
     102:	00 00       	nop
     104:	c1 c1       	rjmp	.+898    	; 0x488 <__bad_interrupt>
     106:	00 00       	nop
     108:	bf c1       	rjmp	.+894    	; 0x488 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bd c1       	rjmp	.+890    	; 0x488 <__bad_interrupt>
     10e:	00 00       	nop
     110:	bb c1       	rjmp	.+886    	; 0x488 <__bad_interrupt>
     112:	00 00       	nop
     114:	b9 c1       	rjmp	.+882    	; 0x488 <__bad_interrupt>
     116:	00 00       	nop
     118:	b7 c1       	rjmp	.+878    	; 0x488 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b5 c1       	rjmp	.+874    	; 0x488 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b3 c1       	rjmp	.+870    	; 0x488 <__bad_interrupt>
     122:	00 00       	nop
     124:	b1 c1       	rjmp	.+866    	; 0x488 <__bad_interrupt>
     126:	00 00       	nop
     128:	af c1       	rjmp	.+862    	; 0x488 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	ad c1       	rjmp	.+858    	; 0x488 <__bad_interrupt>
     12e:	00 00       	nop
     130:	ab c1       	rjmp	.+854    	; 0x488 <__bad_interrupt>
     132:	00 00       	nop
     134:	a9 c1       	rjmp	.+850    	; 0x488 <__bad_interrupt>
     136:	00 00       	nop
     138:	a7 c1       	rjmp	.+846    	; 0x488 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a5 c1       	rjmp	.+842    	; 0x488 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a3 c1       	rjmp	.+838    	; 0x488 <__bad_interrupt>
     142:	00 00       	nop
     144:	a1 c1       	rjmp	.+834    	; 0x488 <__bad_interrupt>
     146:	00 00       	nop
     148:	9f c1       	rjmp	.+830    	; 0x488 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	9d c1       	rjmp	.+826    	; 0x488 <__bad_interrupt>
     14e:	00 00       	nop
     150:	9b c1       	rjmp	.+822    	; 0x488 <__bad_interrupt>
     152:	00 00       	nop
     154:	99 c1       	rjmp	.+818    	; 0x488 <__bad_interrupt>
     156:	00 00       	nop
     158:	97 c1       	rjmp	.+814    	; 0x488 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	95 c1       	rjmp	.+810    	; 0x488 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 c2 0d 	jmp	0x1b84	; 0x1b84 <__vector_88>
     164:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__vector_89>
     168:	0c 94 ea 0d 	jmp	0x1bd4	; 0x1bd4 <__vector_90>
     16c:	0c 94 f6 15 	jmp	0x2bec	; 0x2bec <__vector_91>
     170:	8b c1       	rjmp	.+790    	; 0x488 <__bad_interrupt>
     172:	00 00       	nop
     174:	89 c1       	rjmp	.+786    	; 0x488 <__bad_interrupt>
     176:	00 00       	nop
     178:	87 c1       	rjmp	.+782    	; 0x488 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	85 c1       	rjmp	.+778    	; 0x488 <__bad_interrupt>
     17e:	00 00       	nop
     180:	83 c1       	rjmp	.+774    	; 0x488 <__bad_interrupt>
     182:	00 00       	nop
     184:	81 c1       	rjmp	.+770    	; 0x488 <__bad_interrupt>
     186:	00 00       	nop
     188:	7f c1       	rjmp	.+766    	; 0x488 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7d c1       	rjmp	.+762    	; 0x488 <__bad_interrupt>
     18e:	00 00       	nop
     190:	7b c1       	rjmp	.+758    	; 0x488 <__bad_interrupt>
     192:	00 00       	nop
     194:	79 c1       	rjmp	.+754    	; 0x488 <__bad_interrupt>
     196:	00 00       	nop
     198:	77 c1       	rjmp	.+750    	; 0x488 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	75 c1       	rjmp	.+746    	; 0x488 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	73 c1       	rjmp	.+742    	; 0x488 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	71 c1       	rjmp	.+738    	; 0x488 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6f c1       	rjmp	.+734    	; 0x488 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6d c1       	rjmp	.+730    	; 0x488 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	6b c1       	rjmp	.+726    	; 0x488 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	69 c1       	rjmp	.+722    	; 0x488 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	67 c1       	rjmp	.+718    	; 0x488 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	65 c1       	rjmp	.+714    	; 0x488 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	63 c1       	rjmp	.+710    	; 0x488 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	61 c1       	rjmp	.+706    	; 0x488 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5f c1       	rjmp	.+702    	; 0x488 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5d c1       	rjmp	.+698    	; 0x488 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	5b c1       	rjmp	.+694    	; 0x488 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	59 c1       	rjmp	.+690    	; 0x488 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	57 c1       	rjmp	.+686    	; 0x488 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 2a 0f 	jmp	0x1e54	; 0x1e54 <__vector_119>
     1e0:	0c 94 7a 0f 	jmp	0x1ef4	; 0x1ef4 <__vector_120>
     1e4:	0c 94 52 0f 	jmp	0x1ea4	; 0x1ea4 <__vector_121>
     1e8:	4f c1       	rjmp	.+670    	; 0x488 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4d c1       	rjmp	.+666    	; 0x488 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	4b c1       	rjmp	.+662    	; 0x488 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	49 c1       	rjmp	.+658    	; 0x488 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	47 c1       	rjmp	.+654    	; 0x488 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	78 04       	cpc	r7, r8
     1fe:	7e 04       	cpc	r7, r14
     200:	83 04       	cpc	r8, r3
     202:	8a 04       	cpc	r8, r10
     204:	8f 04       	cpc	r8, r15
     206:	96 04       	cpc	r9, r6
     208:	9b 04       	cpc	r9, r11
     20a:	5e 08       	sbc	r5, r14
     20c:	6b 08       	sbc	r6, r11
     20e:	7d 08       	sbc	r7, r13
     210:	bb 08       	sbc	r11, r11
     212:	c8 08       	sbc	r12, r8
     214:	d6 08       	sbc	r13, r6
     216:	e3 08       	sbc	r14, r3
     218:	a3 0a       	sbc	r10, r19
     21a:	b0 0a       	sbc	r11, r16
     21c:	75 0a       	sbc	r7, r21
     21e:	89 0a       	sbc	r8, r25
     220:	96 0a       	sbc	r9, r22
     222:	bd 0a       	sbc	r11, r29
     224:	ca 0a       	sbc	r12, r26
     226:	fd 2f       	mov	r31, r29
     228:	0b 30       	cpi	r16, 0x0B	; 11
     22a:	19 30       	cpi	r17, 0x09	; 9
     22c:	27 30       	cpi	r18, 0x07	; 7
     22e:	97 30       	cpi	r25, 0x07	; 7
     230:	35 30       	cpi	r19, 0x05	; 5
     232:	43 30       	cpi	r20, 0x03	; 3
     234:	51 30       	cpi	r21, 0x01	; 1
     236:	5f 30       	cpi	r21, 0x0F	; 15
     238:	97 30       	cpi	r25, 0x07	; 7
     23a:	97 30       	cpi	r25, 0x07	; 7
     23c:	97 30       	cpi	r25, 0x07	; 7
     23e:	97 30       	cpi	r25, 0x07	; 7
     240:	97 30       	cpi	r25, 0x07	; 7
     242:	97 30       	cpi	r25, 0x07	; 7
     244:	97 30       	cpi	r25, 0x07	; 7
     246:	6d 30       	cpi	r22, 0x0D	; 13
     248:	97 30       	cpi	r25, 0x07	; 7
     24a:	97 30       	cpi	r25, 0x07	; 7
     24c:	97 30       	cpi	r25, 0x07	; 7
     24e:	97 30       	cpi	r25, 0x07	; 7
     250:	97 30       	cpi	r25, 0x07	; 7
     252:	97 30       	cpi	r25, 0x07	; 7
     254:	97 30       	cpi	r25, 0x07	; 7
     256:	97 30       	cpi	r25, 0x07	; 7
     258:	97 30       	cpi	r25, 0x07	; 7
     25a:	97 30       	cpi	r25, 0x07	; 7
     25c:	97 30       	cpi	r25, 0x07	; 7
     25e:	97 30       	cpi	r25, 0x07	; 7
     260:	97 30       	cpi	r25, 0x07	; 7
     262:	97 30       	cpi	r25, 0x07	; 7
     264:	97 30       	cpi	r25, 0x07	; 7
     266:	97 30       	cpi	r25, 0x07	; 7
     268:	97 30       	cpi	r25, 0x07	; 7
     26a:	7b 30       	cpi	r23, 0x0B	; 11
     26c:	97 30       	cpi	r25, 0x07	; 7
     26e:	97 30       	cpi	r25, 0x07	; 7
     270:	97 30       	cpi	r25, 0x07	; 7
     272:	97 30       	cpi	r25, 0x07	; 7
     274:	97 30       	cpi	r25, 0x07	; 7
     276:	97 30       	cpi	r25, 0x07	; 7
     278:	97 30       	cpi	r25, 0x07	; 7
     27a:	97 30       	cpi	r25, 0x07	; 7
     27c:	97 30       	cpi	r25, 0x07	; 7
     27e:	97 30       	cpi	r25, 0x07	; 7
     280:	97 30       	cpi	r25, 0x07	; 7
     282:	97 30       	cpi	r25, 0x07	; 7
     284:	97 30       	cpi	r25, 0x07	; 7
     286:	97 30       	cpi	r25, 0x07	; 7
     288:	97 30       	cpi	r25, 0x07	; 7
     28a:	97 30       	cpi	r25, 0x07	; 7
     28c:	97 30       	cpi	r25, 0x07	; 7
     28e:	89 30       	cpi	r24, 0x09	; 9
     290:	b3 30       	cpi	r27, 0x03	; 3
     292:	b9 30       	cpi	r27, 0x09	; 9
     294:	bf 30       	cpi	r27, 0x0F	; 15
     296:	c5 30       	cpi	r28, 0x05	; 5
     298:	f5 30       	cpi	r31, 0x05	; 5
     29a:	cb 30       	cpi	r28, 0x0B	; 11
     29c:	d1 30       	cpi	r29, 0x01	; 1
     29e:	d7 30       	cpi	r29, 0x07	; 7
     2a0:	dd 30       	cpi	r29, 0x0D	; 13
     2a2:	f5 30       	cpi	r31, 0x05	; 5
     2a4:	f5 30       	cpi	r31, 0x05	; 5
     2a6:	f5 30       	cpi	r31, 0x05	; 5
     2a8:	f5 30       	cpi	r31, 0x05	; 5
     2aa:	f5 30       	cpi	r31, 0x05	; 5
     2ac:	f5 30       	cpi	r31, 0x05	; 5
     2ae:	f5 30       	cpi	r31, 0x05	; 5
     2b0:	e3 30       	cpi	r30, 0x03	; 3
     2b2:	f5 30       	cpi	r31, 0x05	; 5
     2b4:	f5 30       	cpi	r31, 0x05	; 5
     2b6:	f5 30       	cpi	r31, 0x05	; 5
     2b8:	f5 30       	cpi	r31, 0x05	; 5
     2ba:	f5 30       	cpi	r31, 0x05	; 5
     2bc:	f5 30       	cpi	r31, 0x05	; 5
     2be:	f5 30       	cpi	r31, 0x05	; 5
     2c0:	f5 30       	cpi	r31, 0x05	; 5
     2c2:	f5 30       	cpi	r31, 0x05	; 5
     2c4:	f5 30       	cpi	r31, 0x05	; 5
     2c6:	f5 30       	cpi	r31, 0x05	; 5
     2c8:	f5 30       	cpi	r31, 0x05	; 5
     2ca:	f5 30       	cpi	r31, 0x05	; 5
     2cc:	f5 30       	cpi	r31, 0x05	; 5
     2ce:	f5 30       	cpi	r31, 0x05	; 5
     2d0:	f5 30       	cpi	r31, 0x05	; 5
     2d2:	f5 30       	cpi	r31, 0x05	; 5
     2d4:	e9 30       	cpi	r30, 0x09	; 9
     2d6:	f5 30       	cpi	r31, 0x05	; 5
     2d8:	f5 30       	cpi	r31, 0x05	; 5
     2da:	f5 30       	cpi	r31, 0x05	; 5
     2dc:	f5 30       	cpi	r31, 0x05	; 5
     2de:	f5 30       	cpi	r31, 0x05	; 5
     2e0:	f5 30       	cpi	r31, 0x05	; 5
     2e2:	f5 30       	cpi	r31, 0x05	; 5
     2e4:	f5 30       	cpi	r31, 0x05	; 5
     2e6:	f5 30       	cpi	r31, 0x05	; 5
     2e8:	f5 30       	cpi	r31, 0x05	; 5
     2ea:	f5 30       	cpi	r31, 0x05	; 5
     2ec:	f5 30       	cpi	r31, 0x05	; 5
     2ee:	f5 30       	cpi	r31, 0x05	; 5
     2f0:	f5 30       	cpi	r31, 0x05	; 5
     2f2:	f5 30       	cpi	r31, 0x05	; 5
     2f4:	f5 30       	cpi	r31, 0x05	; 5
     2f6:	f5 30       	cpi	r31, 0x05	; 5
     2f8:	ef 30       	cpi	r30, 0x0F	; 15
     2fa:	08 4a       	sbci	r16, 0xA8	; 168
     2fc:	d7 3b       	cpi	r29, 0xB7	; 183
     2fe:	3b ce       	rjmp	.-906    	; 0xffffff76 <__eeprom_end+0xff7eff76>
     300:	01 6e       	ori	r16, 0xE1	; 225
     302:	84 bc       	out	0x24, r8	; 36
     304:	bf fd       	.word	0xfdbf	; ????
     306:	c1 2f       	mov	r28, r17
     308:	3d 6c       	ori	r19, 0xCD	; 205
     30a:	74 31       	cpi	r23, 0x14	; 20
     30c:	9a bd       	out	0x2a, r25	; 42
     30e:	56 83       	std	Z+6, r21	; 0x06
     310:	3d da       	rcall	.-2950   	; 0xfffff78c <__eeprom_end+0xff7ef78c>
     312:	3d 00       	.word	0x003d	; ????
     314:	c7 7f       	andi	r28, 0xF7	; 247
     316:	11 be       	out	0x31, r1	; 49
     318:	d9 e4       	ldi	r29, 0x49	; 73
     31a:	bb 4c       	sbci	r27, 0xCB	; 203
     31c:	3e 91       	ld	r19, -X
     31e:	6b aa       	std	Y+51, r6	; 0x33
     320:	aa be       	out	0x3a, r10	; 58
     322:	00 00       	nop
     324:	00 80       	ld	r0, Z
     326:	3f 05       	cpc	r19, r15
     328:	a8 4c       	sbci	r26, 0xC8	; 200
     32a:	cd b2       	in	r12, 0x1d	; 29
     32c:	d4 4e       	sbci	r29, 0xE4	; 228
     32e:	b9 38       	cpi	r27, 0x89	; 137
     330:	36 a9       	ldd	r19, Z+54	; 0x36
     332:	02 0c       	add	r0, r2
     334:	50 b9       	out	0x00, r21	; 0
     336:	91 86       	std	Z+9, r9	; 0x09
     338:	88 08       	sbc	r8, r8
     33a:	3c a6       	std	Y+44, r3	; 0x2c
     33c:	aa aa       	std	Y+50, r10	; 0x32
     33e:	2a be       	out	0x3a, r2	; 58
     340:	00 00       	nop
     342:	00 80       	ld	r0, Z
     344:	3f 00       	.word	0x003f	; ????

00000346 <__trampolines_end>:
     346:	6e 61       	ori	r22, 0x1E	; 30
     348:	6e 00       	.word	0x006e	; ????

0000034a <__c.2159>:
     34a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     35a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     36a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     37a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     38a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     39a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3aa:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     3ba:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3ca:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3da:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3ea:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     3fa:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     40a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     41a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     42a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     43a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000448 <__ctors_end>:
     448:	11 24       	eor	r1, r1
     44a:	1f be       	out	0x3f, r1	; 63
     44c:	cf ef       	ldi	r28, 0xFF	; 255
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df e3       	ldi	r29, 0x3F	; 63
     452:	de bf       	out	0x3e, r29	; 62
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	0c bf       	out	0x3c, r16	; 60

00000458 <__do_copy_data>:
     458:	1c e2       	ldi	r17, 0x2C	; 44
     45a:	a0 e0       	ldi	r26, 0x00	; 0
     45c:	b0 e2       	ldi	r27, 0x20	; 32
     45e:	ee e4       	ldi	r30, 0x4E	; 78
     460:	f4 e8       	ldi	r31, 0x84	; 132
     462:	00 e0       	ldi	r16, 0x00	; 0
     464:	0b bf       	out	0x3b, r16	; 59
     466:	02 c0       	rjmp	.+4      	; 0x46c <__do_copy_data+0x14>
     468:	07 90       	elpm	r0, Z+
     46a:	0d 92       	st	X+, r0
     46c:	a2 37       	cpi	r26, 0x72	; 114
     46e:	b1 07       	cpc	r27, r17
     470:	d9 f7       	brne	.-10     	; 0x468 <__do_copy_data+0x10>

00000472 <__do_clear_bss>:
     472:	23 e3       	ldi	r18, 0x33	; 51
     474:	a2 e7       	ldi	r26, 0x72	; 114
     476:	bc e2       	ldi	r27, 0x2C	; 44
     478:	01 c0       	rjmp	.+2      	; 0x47c <.do_clear_bss_start>

0000047a <.do_clear_bss_loop>:
     47a:	1d 92       	st	X+, r1

0000047c <.do_clear_bss_start>:
     47c:	ab 30       	cpi	r26, 0x0B	; 11
     47e:	b2 07       	cpc	r27, r18
     480:	e1 f7       	brne	.-8      	; 0x47a <.do_clear_bss_loop>
     482:	a9 d1       	rcall	.+850    	; 0x7d6 <main>
     484:	0c 94 25 42 	jmp	0x844a	; 0x844a <_exit>

00000488 <__bad_interrupt>:
     488:	bb cd       	rjmp	.-1162   	; 0x0 <__vectors>

0000048a <__vector_11>:
; * Returns from the interrupt handler
; Since run_tasks is on top of the stack, the IRS returns into the beginning of run_tasks
.global RTC_COMP_vect
RTC_COMP_vect:
rtc_compare_isr:
	push	r0							; Save all the registers on the stack
     48a:	0f 92       	push	r0
	push	r1
     48c:	1f 92       	push	r1
	push	r2
     48e:	2f 92       	push	r2
	push	r3
     490:	3f 92       	push	r3
	push	r4
     492:	4f 92       	push	r4
	push	r5
     494:	5f 92       	push	r5
	push	r6
     496:	6f 92       	push	r6
	push	r7
     498:	7f 92       	push	r7
	push	r8
     49a:	8f 92       	push	r8
	push	r9
     49c:	9f 92       	push	r9
	push	r10
     49e:	af 92       	push	r10
	push	r11
     4a0:	bf 92       	push	r11
	push	r12
     4a2:	cf 92       	push	r12
	push	r13
     4a4:	df 92       	push	r13
	push	r14
     4a6:	ef 92       	push	r14
	push	r15
     4a8:	ff 92       	push	r15
	push	r16
     4aa:	0f 93       	push	r16
	push	r17
     4ac:	1f 93       	push	r17
	push	r18
     4ae:	2f 93       	push	r18
	push	r19
     4b0:	3f 93       	push	r19
	push	r20
     4b2:	4f 93       	push	r20
	push	r21
     4b4:	5f 93       	push	r21
	push	r22
     4b6:	6f 93       	push	r22
	push	r23
     4b8:	7f 93       	push	r23
	push	r24
     4ba:	8f 93       	push	r24
	push	r25
     4bc:	9f 93       	push	r25
	push	r26
     4be:	af 93       	push	r26
	push	r27
     4c0:	bf 93       	push	r27
	push	r28
     4c2:	cf 93       	push	r28
	push	r29
     4c4:	df 93       	push	r29
	push	r30
     4c6:	ef 93       	push	r30
	push	r31
     4c8:	ff 93       	push	r31
	in		r16, _SFR_IO_ADDR(SREG)		; Save the CPU status register
     4ca:	0f b7       	in	r16, 0x3f	; 63
	push	r16
     4cc:	0f 93       	push	r16
	ldi		ZL,	pm_lo8(run_tasks)		; Push the address of run_tasks on the stack
     4ce:	e2 eb       	ldi	r30, 0xB2	; 178
	ldi		ZH, pm_hi8(run_tasks)		; Returning from the ISR will return to this address
     4d0:	f7 e2       	ldi	r31, 0x27	; 39
	ldi		r16, pm_hh8(run_tasks)
     4d2:	00 e0       	ldi	r16, 0x00	; 0
	push	ZL
     4d4:	ef 93       	push	r30
	push	ZH
     4d6:	ff 93       	push	r31
	push	r16
     4d8:	0f 93       	push	r16
	lds		r24, num_executing_tasks	; Increment num_executing_tasks
     4da:	80 91 e1 2d 	lds	r24, 0x2DE1
	inc		r24
     4de:	83 95       	inc	r24
	sts		num_executing_tasks, r24
     4e0:	80 93 e1 2d 	sts	0x2DE1, r24
	reti								; reti returns from the ISR to the beginning of run_tasks
     4e4:	18 95       	reti

000004e6 <restore_registers>:
; the RTC_COMP interrupt had not occurred.  
; Returning from this subroutine returns program control to where it would have been if the RTC_COMP interrupt
; had not occurred
.global restore_registers
restore_registers:
	lds		r24, num_executing_tasks	; Decrement num_executing_tasks
     4e6:	80 91 e1 2d 	lds	r24, 0x2DE1
	dec		r24
     4ea:	8a 95       	dec	r24
	sts		num_executing_tasks, r24
     4ec:	80 93 e1 2d 	sts	0x2DE1, r24
	pop		r16							; Restore CPU status register
     4f0:	0f 91       	pop	r16
	out		_SFR_IO_ADDR(SREG), r16
     4f2:	0f bf       	out	0x3f, r16	; 63
	pop		r31								; Restore all registers
     4f4:	ff 91       	pop	r31
	pop		r30
     4f6:	ef 91       	pop	r30
	pop		r29
     4f8:	df 91       	pop	r29
	pop		r28
     4fa:	cf 91       	pop	r28
	pop		r27
     4fc:	bf 91       	pop	r27
	pop		r26
     4fe:	af 91       	pop	r26
	pop		r25
     500:	9f 91       	pop	r25
	pop		r24
     502:	8f 91       	pop	r24
	pop		r23
     504:	7f 91       	pop	r23
	pop		r22
     506:	6f 91       	pop	r22
	pop		r21
     508:	5f 91       	pop	r21
	pop		r20
     50a:	4f 91       	pop	r20
	pop		r19
     50c:	3f 91       	pop	r19
	pop		r18
     50e:	2f 91       	pop	r18
	pop		r17
     510:	1f 91       	pop	r17
	pop		r16
     512:	0f 91       	pop	r16
	pop		r15
     514:	ff 90       	pop	r15
	pop		r14
     516:	ef 90       	pop	r14
	pop		r13
     518:	df 90       	pop	r13
	pop		r12
     51a:	cf 90       	pop	r12
	pop		r11
     51c:	bf 90       	pop	r11
	pop		r10
     51e:	af 90       	pop	r10
	pop		r9
     520:	9f 90       	pop	r9
	pop		r8
     522:	8f 90       	pop	r8
	pop		r7
     524:	7f 90       	pop	r7
	pop		r6
     526:	6f 90       	pop	r6
	pop		r5
     528:	5f 90       	pop	r5
	pop		r4
     52a:	4f 90       	pop	r4
	pop		r3
     52c:	3f 90       	pop	r3
	pop		r2
     52e:	2f 90       	pop	r2
	pop		r1
     530:	1f 90       	pop	r1
	pop		r0
     532:	0f 90       	pop	r0
	ret									; The top value of the stack was the code address that
     534:	08 95       	ret

00000536 <get_time>:


; Gets the time as an atomic operation
.global get_time
get_time:
	in		r0, _SFR_IO_ADDR(SREG)		; Save the state of the status register
     536:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
     538:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
     53a:	60 91 08 04 	lds	r22, 0x0408
	lds		r23, RTC_CNT+1
     53e:	70 91 09 04 	lds	r23, 0x0409
	lds		r24, rtc_epoch				; epoch 16-bit high word
     542:	80 91 a1 2c 	lds	r24, 0x2CA1
	lds		r25, rtc_epoch+1
     546:	90 91 a2 2c 	lds	r25, 0x2CA2
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
     54a:	0f be       	out	0x3f, r0	; 63
	ret
     54c:	08 95       	ret

0000054e <check_messages>:
	}
	return 0;
}

void check_messages ()
{
     54e:	cf 92       	push	r12
     550:	df 92       	push	r13
     552:	ef 92       	push	r14
     554:	ff 92       	push	r15
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	cd b7       	in	r28, 0x3d	; 61
     560:	de b7       	in	r29, 0x3e	; 62
     562:	ab 97       	sbiw	r28, 0x2b	; 43
     564:	cd bf       	out	0x3d, r28	; 61
     566:	de bf       	out	0x3e, r29	; 62
	ir_msg* msg_struct;	
	char actual_struct[sizeof(ir_msg)]; //It's like malloc, but on the stack.
	char actual_msg[IR_BUFFER_SIZE+1];
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
     568:	ce 01       	movw	r24, r28
     56a:	0b 96       	adiw	r24, 0x0b	; 11
     56c:	8f 83       	std	Y+7, r24	; 0x07
     56e:	98 87       	std	Y+8, r25	; 0x08
	uint8_t i;
	
	if(user_facing_messages_ovf)
     570:	80 91 a0 2c 	lds	r24, 0x2CA0
     574:	88 23       	and	r24, r24
     576:	49 f0       	breq	.+18     	; 0x58a <check_messages+0x3c>
	{
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	80 93 db 2d 	sts	0x2DDB, r24
		user_facing_messages_ovf=0;
     57e:	10 92 a0 2c 	sts	0x2CA0, r1
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
     582:	87 ee       	ldi	r24, 0xE7	; 231
     584:	91 e2       	ldi	r25, 0x21	; 33
     586:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
     58a:	80 91 db 2d 	lds	r24, 0x2DDB
     58e:	88 23       	and	r24, r24
     590:	09 f4       	brne	.+2      	; 0x594 <check_messages+0x46>
     592:	47 c0       	rjmp	.+142    	; 0x622 <check_messages+0xd4>
		i=num_waiting_msgs-1;
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			memcpy(msg_struct->msg, (const void*)msg_node[i].msg, msg_node[i].msg_length);
     594:	0f 2e       	mov	r0, r31
     596:	f8 e2       	ldi	r31, 0x28	; 40
     598:	df 2e       	mov	r13, r31
     59a:	f0 2d       	mov	r31, r0
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
     59c:	e0 90 db 2d 	lds	r14, 0x2DDB
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     5a0:	cf b6       	in	r12, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     5a2:	f8 94       	cli
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
     5a4:	ea 94       	dec	r14
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			memcpy(msg_struct->msg, (const void*)msg_node[i].msg, msg_node[i].msg_length);
     5a6:	f1 2c       	mov	r15, r1
     5a8:	de 9c       	mul	r13, r14
     5aa:	b0 01       	movw	r22, r0
     5ac:	df 9c       	mul	r13, r15
     5ae:	70 0d       	add	r23, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	8b 01       	movw	r16, r22
     5b4:	09 51       	subi	r16, 0x19	; 25
     5b6:	13 4d       	sbci	r17, 0xD3	; 211
     5b8:	f8 01       	movw	r30, r16
     5ba:	47 a1       	ldd	r20, Z+39	; 0x27
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	63 51       	subi	r22, 0x13	; 19
     5c0:	73 4d       	sbci	r23, 0xD3	; 211
     5c2:	8f 81       	ldd	r24, Y+7	; 0x07
     5c4:	98 85       	ldd	r25, Y+8	; 0x08
     5c6:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <memcpy>
			msg_struct->arrival_time					= msg_node[i].arrival_time;
     5ca:	f8 01       	movw	r30, r16
     5cc:	80 81       	ld	r24, Z
     5ce:	91 81       	ldd	r25, Z+1	; 0x01
     5d0:	a2 81       	ldd	r26, Z+2	; 0x02
     5d2:	b3 81       	ldd	r27, Z+3	; 0x03
     5d4:	89 83       	std	Y+1, r24	; 0x01
     5d6:	9a 83       	std	Y+2, r25	; 0x02
     5d8:	ab 83       	std	Y+3, r26	; 0x03
     5da:	bc 83       	std	Y+4, r27	; 0x04
			msg_struct->sender_ID						= msg_node[i].sender_ID;
     5dc:	84 81       	ldd	r24, Z+4	; 0x04
     5de:	95 81       	ldd	r25, Z+5	; 0x05
     5e0:	8d 83       	std	Y+5, r24	; 0x05
     5e2:	9e 83       	std	Y+6, r25	; 0x06
			msg_struct->dir_received					= msg_node[i].arrival_dir;
     5e4:	86 a1       	ldd	r24, Z+38	; 0x26
     5e6:	89 87       	std	Y+9, r24	; 0x09
			msg_struct->length							= msg_node[i].msg_length;
     5e8:	87 a1       	ldd	r24, Z+39	; 0x27
     5ea:	8a 87       	std	Y+10, r24	; 0x0a
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     5ec:	cf be       	out	0x3f, r12	; 63
		}			
		msg_struct->msg[msg_node[i].msg_length]	= '\0';		
     5ee:	de 9c       	mul	r13, r14
     5f0:	f0 01       	movw	r30, r0
     5f2:	df 9c       	mul	r13, r15
     5f4:	f0 0d       	add	r31, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	e9 51       	subi	r30, 0x19	; 25
     5fa:	f3 4d       	sbci	r31, 0xD3	; 211
     5fc:	87 a1       	ldd	r24, Z+39	; 0x27
     5fe:	ef 81       	ldd	r30, Y+7	; 0x07
     600:	f8 85       	ldd	r31, Y+8	; 0x08
     602:	e8 0f       	add	r30, r24
     604:	f1 1d       	adc	r31, r1
     606:	10 82       	st	Z, r1
		num_waiting_msgs--;
     608:	80 91 db 2d 	lds	r24, 0x2DDB
     60c:	81 50       	subi	r24, 0x01	; 1
     60e:	80 93 db 2d 	sts	0x2DDB, r24


		handle_msg(msg_struct);
     612:	ce 01       	movw	r24, r28
     614:	01 96       	adiw	r24, 0x01	; 1
     616:	0e 94 17 35 	call	0x6a2e	; 0x6a2e <handle_msg>
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
		user_facing_messages_ovf=0;
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
     61a:	80 91 db 2d 	lds	r24, 0x2DDB
     61e:	81 11       	cpse	r24, r1
     620:	bd cf       	rjmp	.-134    	; 0x59c <check_messages+0x4e>
		num_waiting_msgs--;


		handle_msg(msg_struct);
	}
}
     622:	ab 96       	adiw	r28, 0x2b	; 43
     624:	cd bf       	out	0x3d, r28	; 61
     626:	de bf       	out	0x3e, r29	; 62
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	08 95       	ret

0000063a <calculate_id_number>:

void calculate_id_number()
{
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	c0 54       	subi	r28, 0x40	; 64
     644:	d1 09       	sbc	r29, r1
     646:	cd bf       	out	0x3d, r28	; 61
     648:	de bf       	out	0x3e, r29	; 62
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     64a:	82 e0       	ldi	r24, 0x02	; 2
     64c:	80 93 ca 01 	sts	0x01CA, r24

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
     650:	80 e4       	ldi	r24, 0x40	; 64
     652:	e7 ea       	ldi	r30, 0xA7	; 167
     654:	f1 e2       	ldi	r31, 0x21	; 33
     656:	de 01       	movw	r26, r28
     658:	11 96       	adiw	r26, 0x01	; 1
     65a:	01 90       	ld	r0, Z+
     65c:	0d 92       	st	X+, r0
     65e:	8a 95       	dec	r24
     660:	e1 f7       	brne	.-8      	; 0x65a <calculate_id_number+0x20>
     662:	ae 01       	movw	r20, r28
     664:	4f 5f       	subi	r20, 0xFF	; 255
     666:	5f 4f       	sbci	r21, 0xFF	; 255
     668:	be 01       	movw	r22, r28
     66a:	6f 5b       	subi	r22, 0xBF	; 191
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
void calculate_id_number()
{
	if(INIT_DEBUG_MODE >= 1)	printf("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
     66e:	20 e0       	ldi	r18, 0x00	; 0
     670:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
     672:	fa 01       	movw	r30, r20
     674:	81 91       	ld	r24, Z+
     676:	91 91       	ld	r25, Z+
     678:	a1 91       	ld	r26, Z+
     67a:	b1 91       	ld	r27, Z+
     67c:	af 01       	movw	r20, r30
     67e:	ab bf       	out	0x3b, r26	; 59
     680:	fc 01       	movw	r30, r24
     682:	87 91       	elpm	r24, Z+
     684:	96 91       	elpm	r25, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     686:	28 27       	eor	r18, r24
     688:	82 2f       	mov	r24, r18
     68a:	82 95       	swap	r24
     68c:	82 27       	eor	r24, r18
     68e:	08 2e       	mov	r0, r24
     690:	86 95       	lsr	r24
     692:	86 95       	lsr	r24
     694:	80 25       	eor	r24, r0
     696:	08 2e       	mov	r0, r24
     698:	86 95       	lsr	r24
     69a:	80 25       	eor	r24, r0
     69c:	87 70       	andi	r24, 0x07	; 7
     69e:	02 2e       	mov	r0, r18
     6a0:	23 2f       	mov	r18, r19
     6a2:	86 95       	lsr	r24
     6a4:	07 94       	ror	r0
     6a6:	87 95       	ror	r24
     6a8:	30 2d       	mov	r19, r0
     6aa:	28 27       	eor	r18, r24
     6ac:	06 94       	lsr	r0
     6ae:	87 95       	ror	r24
     6b0:	30 25       	eor	r19, r0
     6b2:	28 27       	eor	r18, r24
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
     6b4:	46 17       	cp	r20, r22
     6b6:	57 07       	cpc	r21, r23
     6b8:	09 f0       	breq	.+2      	; 0x6bc <calculate_id_number+0x82>
     6ba:	db cf       	rjmp	.-74     	; 0x672 <calculate_id_number+0x38>
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     6bc:	10 92 ca 01 	sts	0x01CA, r1

	droplet_ID = crc;
     6c0:	20 93 74 2c 	sts	0x2C74, r18
     6c4:	30 93 75 2c 	sts	0x2C75, r19
}
     6c8:	c0 5c       	subi	r28, 0xC0	; 192
     6ca:	df 4f       	sbci	r29, 0xFF	; 255
     6cc:	cd bf       	out	0x3d, r28	; 61
     6ce:	de bf       	out	0x3e, r29	; 62
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <enable_interrupts>:

void enable_interrupts()
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
     6d6:	e0 ea       	ldi	r30, 0xA0	; 160
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	82 81       	ldd	r24, Z+2	; 0x02
     6dc:	81 60       	ori	r24, 0x01	; 1
     6de:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
     6e0:	82 81       	ldd	r24, Z+2	; 0x02
     6e2:	82 60       	ori	r24, 0x02	; 2
     6e4:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
     6e6:	82 81       	ldd	r24, Z+2	; 0x02
     6e8:	84 60       	ori	r24, 0x04	; 4
     6ea:	82 83       	std	Z+2, r24	; 0x02
	sei();
     6ec:	78 94       	sei
     6ee:	08 95       	ret

000006f0 <startup_light_sequence>:
}

void startup_light_sequence()
{
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	60 e0       	ldi	r22, 0x00	; 0
     6f4:	84 e6       	ldi	r24, 0x64	; 100
     6f6:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     6fa:	84 e6       	ldi	r24, 0x64	; 100
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     702:	40 e0       	ldi	r20, 0x00	; 0
     704:	64 e6       	ldi	r22, 0x64	; 100
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     70c:	84 e6       	ldi	r24, 0x64	; 100
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     714:	44 e6       	ldi	r20, 0x64	; 100
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     71e:	84 e6       	ldi	r24, 0x64	; 100
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     726:	0e 94 7f 20 	call	0x40fe	; 0x40fe <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     72a:	40 e0       	ldi	r20, 0x00	; 0
     72c:	60 e0       	ldi	r22, 0x00	; 0
     72e:	84 e6       	ldi	r24, 0x64	; 100
     730:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     734:	84 e6       	ldi	r24, 0x64	; 100
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	64 e6       	ldi	r22, 0x64	; 100
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     746:	84 e6       	ldi	r24, 0x64	; 100
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     74e:	44 e6       	ldi	r20, 0x64	; 100
     750:	60 e0       	ldi	r22, 0x00	; 0
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     758:	84 e6       	ldi	r24, 0x64	; 100
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     760:	0e 94 7f 20 	call	0x40fe	; 0x40fe <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     764:	40 e0       	ldi	r20, 0x00	; 0
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	84 e6       	ldi	r24, 0x64	; 100
     76a:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     76e:	84 e6       	ldi	r24, 0x64	; 100
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     776:	40 e0       	ldi	r20, 0x00	; 0
     778:	64 e6       	ldi	r22, 0x64	; 100
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     780:	84 e6       	ldi	r24, 0x64	; 100
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     788:	44 e6       	ldi	r20, 0x64	; 100
     78a:	60 e0       	ldi	r22, 0x00	; 0
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
     792:	84 e6       	ldi	r24, 0x64	; 100
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
     79a:	0c 94 7f 20 	jmp	0x40fe	; 0x40fe <led_off>
     79e:	08 95       	ret

000007a0 <init_all_systems>:

uint16_t droplet_ID = 0;

void init_all_systems()
{
	cli();
     7a0:	f8 94       	cli
	Config32MHzClock();
     7a2:	0e 94 e5 23 	call	0x47ca	; 0x47ca <Config32MHzClock>
	
	calculate_id_number();
     7a6:	49 df       	rcall	.-366    	; 0x63a <calculate_id_number>
	
	scheduler_init();			if(INIT_DEBUG_MODE) printf("SCHEDULER INIT\r\n"); //This will probably never print, since you need pc_com for printf to happen, but pc_com needs the scheduler.
     7a8:	0e 94 b3 23 	call	0x4766	; 0x4766 <scheduler_init>
	pc_comm_init();				if(INIT_DEBUG_MODE) printf("PC COM INIT\r\n");
     7ac:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <pc_comm_init>
	rgb_led_init();				if(INIT_DEBUG_MODE) printf("LED INIT\r\n");
     7b0:	0e 94 48 20 	call	0x4090	; 0x4090 <rgb_led_init>
	rgb_sensor_init();			if(INIT_DEBUG_MODE) printf("RGB SENSE INIT\r\n");
     7b4:	0e 94 df 22 	call	0x45be	; 0x45be <rgb_sensor_init>
	power_init();				if(INIT_DEBUG_MODE) printf("POWER INIT\r\n");
     7b8:	0e 94 41 16 	call	0x2c82	; 0x2c82 <power_init>
	random_init();				if(INIT_DEBUG_MODE) printf("RAND INIT\r\n");
     7bc:	0e 94 44 16 	call	0x2c88	; 0x2c88 <random_init>
	i2c_init();					if(INIT_DEBUG_MODE) printf("I2C INIT\r\n");	
     7c0:	68 d0       	rcall	.+208    	; 0x892 <i2c_init>
	ir_comm_init();				if(INIT_DEBUG_MODE) printf("IR COM INIT\r\n");
     7c2:	78 d2       	rcall	.+1264   	; 0xcb4 <ir_comm_init>
	ir_sensor_init();			if(INIT_DEBUG_MODE) printf("IR SENSE INIT\r\n");
     7c4:	0e 94 4d 10 	call	0x209a	; 0x209a <ir_sensor_init>
	motor_init();				if(INIT_DEBUG_MODE) printf("MOTOR INIT\r\n");
     7c8:	0e 94 3d 14 	call	0x287a	; 0x287a <motor_init>
	range_algs_init();			if(INIT_DEBUG_MODE) printf("RANGE ALGORITHMS INIT\r\n");
     7cc:	0e 94 82 16 	call	0x2d04	; 0x2d04 <range_algs_init>

	enable_interrupts();
     7d0:	82 df       	rcall	.-252    	; 0x6d6 <enable_interrupts>
	startup_light_sequence();
     7d2:	8e cf       	rjmp	.-228    	; 0x6f0 <startup_light_sequence>
     7d4:	08 95       	ret

000007d6 <main>:

}

int main()
{
	init_all_systems();
     7d6:	e4 df       	rcall	.-56     	; 0x7a0 <init_all_systems>
	init();
     7d8:	0e 94 64 34 	call	0x68c8	; 0x68c8 <init>
	while(1)
	{
		loop();
     7dc:	0e 94 ef 34 	call	0x69de	; 0x69de <loop>
		check_messages();
     7e0:	b6 de       	rcall	.-660    	; 0x54e <check_messages>
     7e2:	fc cf       	rjmp	.-8      	; 0x7dc <main+0x6>

000007e4 <droplet_reboot>:
}


void droplet_reboot()
{
	CPU_CCP=CCP_IOREG_gc;
     7e4:	88 ed       	ldi	r24, 0xD8	; 216
     7e6:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	e8 e7       	ldi	r30, 0x78	; 120
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	81 83       	std	Z+1, r24	; 0x01
     7f0:	08 95       	ret

000007f2 <wait_for_nvm>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
     7f2:	e0 ec       	ldi	r30, 0xC0	; 192
     7f4:	f1 e0       	ldi	r31, 0x01	; 1
     7f6:	87 85       	ldd	r24, Z+15	; 0x0f
     7f8:	88 23       	and	r24, r24
     7fa:	ec f3       	brlt	.-6      	; 0x7f6 <wait_for_nvm+0x4>
}
     7fc:	08 95       	ret

000007fe <flush_buffer>:

void flush_buffer(void)
{
        wait_for_nvm();
     7fe:	f9 df       	rcall	.-14     	; 0x7f2 <wait_for_nvm>
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     800:	e0 ec       	ldi	r30, 0xC0	; 192
     802:	f1 e0       	ldi	r31, 0x01	; 1
     804:	87 85       	ldd	r24, Z+15	; 0x0f
     806:	81 ff       	sbrs	r24, 1
     808:	0a c0       	rjmp	.+20     	; 0x81e <flush_buffer+0x20>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     80a:	86 e3       	ldi	r24, 0x36	; 54
     80c:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     80e:	eb ec       	ldi	r30, 0xCB	; 203
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	21 e0       	ldi	r18, 0x01	; 1
     814:	30 e0       	ldi	r19, 0x00	; 0
     816:	88 ed       	ldi	r24, 0xD8	; 216
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	84 bf       	out	0x34, r24	; 52
     81c:	20 83       	st	Z, r18
     81e:	08 95       	ret

00000820 <EEPROM_read_byte>:
        }
}


uint8_t EEPROM_read_byte(uint16_t addr)
{
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	d8 2f       	mov	r29, r24
     826:	c9 2f       	mov	r28, r25
        wait_for_nvm();
     828:	e4 df       	rcall	.-56     	; 0x7f2 <wait_for_nvm>
        
        NVM.ADDR0 = addr & 0xFF;
     82a:	e0 ec       	ldi	r30, 0xC0	; 192
     82c:	f1 e0       	ldi	r31, 0x01	; 1
     82e:	d0 83       	st	Z, r29
        NVM.ADDR1 = (addr >> 8) & 0x1F;
     830:	cf 71       	andi	r28, 0x1F	; 31
     832:	c1 83       	std	Z+1, r28	; 0x01
        NVM.ADDR2 = 0;
     834:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     83a:	eb ec       	ldi	r30, 0xCB	; 203
     83c:	f1 e0       	ldi	r31, 0x01	; 1
     83e:	21 e0       	ldi	r18, 0x01	; 1
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	88 ed       	ldi	r24, 0xD8	; 216
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	84 bf       	out	0x34, r24	; 52
     848:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
     84a:	e0 ec       	ldi	r30, 0xC0	; 192
     84c:	f1 e0       	ldi	r31, 0x01	; 1
     84e:	84 81       	ldd	r24, Z+4	; 0x04
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	08 95       	ret

00000856 <EEPROM_write_byte>:


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
     856:	1f 93       	push	r17
     858:	cf 93       	push	r28
     85a:	df 93       	push	r29
     85c:	18 2f       	mov	r17, r24
     85e:	d9 2f       	mov	r29, r25
     860:	c6 2f       	mov	r28, r22
        flush_buffer();
     862:	cd df       	rcall	.-102    	; 0x7fe <flush_buffer>
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
     864:	e0 ec       	ldi	r30, 0xC0	; 192
     866:	f1 e0       	ldi	r31, 0x01	; 1
     868:	83 e3       	ldi	r24, 0x33	; 51
     86a:	82 87       	std	Z+10, r24	; 0x0a
        
        NVM.ADDR0 = addr & 0xFF;
     86c:	10 83       	st	Z, r17
        NVM.ADDR1 = (addr >> 8) & 0x1F;
     86e:	df 71       	andi	r29, 0x1F	; 31
     870:	d1 83       	std	Z+1, r29	; 0x01
        NVM.ADDR2 = 0;
     872:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.DATA0 = byte;
     874:	c4 83       	std	Z+4, r28	; 0x04
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     876:	85 e3       	ldi	r24, 0x35	; 53
     878:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     87a:	eb ec       	ldi	r30, 0xCB	; 203
     87c:	f1 e0       	ldi	r31, 0x01	; 1
     87e:	21 e0       	ldi	r18, 0x01	; 1
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	88 ed       	ldi	r24, 0xD8	; 216
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	84 bf       	out	0x34, r24	; 52
     888:	20 83       	st	Z, r18
        
        NVM.DATA0 = byte;
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	08 95       	ret

00000892 <i2c_init>:
#include "i2c.h"

void i2c_init()
{
	count=0;
     892:	10 92 01 2e 	sts	0x2E01, r1
	thePower=0;
     896:	10 92 9e 2c 	sts	0x2C9E, r1
     89a:	10 92 9f 2c 	sts	0x2C9F, r1
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     89e:	83 e0       	ldi	r24, 0x03	; 3
     8a0:	e0 e8       	ldi	r30, 0x80	; 128
     8a2:	f6 e0       	ldi	r31, 0x06	; 6
     8a4:	81 83       	std	Z+1, r24	; 0x01
	TWIE_MASTER_CTRLA = TWI_MASTER_INTLVL_MED_gc | TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;
     8a6:	88 eb       	ldi	r24, 0xB8	; 184
     8a8:	80 93 a1 04 	sts	0x04A1, r24
	TWIE_MASTER_BAUD = TWI_BAUD(F_CPU, 400000);
     8ac:	83 e2       	ldi	r24, 0x23	; 35
     8ae:	80 93 a5 04 	sts	0x04A5, r24
	TWIE_MASTER_STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     8b2:	81 e0       	ldi	r24, 0x01	; 1
     8b4:	80 93 a4 04 	sts	0x04A4, r24
     8b8:	08 95       	ret

000008ba <__vector_46>:
}

ISR(TWIE_TWIM_vect)
{
     8ba:	1f 92       	push	r1
     8bc:	0f 92       	push	r0
     8be:	0f b6       	in	r0, 0x3f	; 63
     8c0:	0f 92       	push	r0
     8c2:	11 24       	eor	r1, r1
     8c4:	0b b6       	in	r0, 0x3b	; 59
     8c6:	0f 92       	push	r0
     8c8:	5f 93       	push	r21
     8ca:	6f 93       	push	r22
     8cc:	7f 93       	push	r23
     8ce:	8f 93       	push	r24
     8d0:	9f 93       	push	r25
     8d2:	af 93       	push	r26
     8d4:	bf 93       	push	r27
     8d6:	ef 93       	push	r30
     8d8:	ff 93       	push	r31
	switch(count)
     8da:	80 91 01 2e 	lds	r24, 0x2E01
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	87 30       	cpi	r24, 0x07	; 7
     8e2:	91 05       	cpc	r25, r1
     8e4:	58 f5       	brcc	.+86     	; 0x93c <__vector_46+0x82>
     8e6:	fc 01       	movw	r30, r24
     8e8:	e2 50       	subi	r30, 0x02	; 2
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	0c 94 99 3e 	jmp	0x7d32	; 0x7d32 <__tablejump2__>
	{
		case 0:	TWIE_MASTER_DATA = (0x00 | ((uint8_t)((thePower>>8)&1))); break;
     8f0:	80 91 9f 2c 	lds	r24, 0x2C9F
     8f4:	81 70       	andi	r24, 0x01	; 1
     8f6:	80 93 a7 04 	sts	0x04A7, r24
     8fa:	20 c0       	rjmp	.+64     	; 0x93c <__vector_46+0x82>
		case 1: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;
     8fc:	80 91 9e 2c 	lds	r24, 0x2C9E
     900:	80 93 a7 04 	sts	0x04A7, r24
     904:	1b c0       	rjmp	.+54     	; 0x93c <__vector_46+0x82>
		case 2:	TWIE_MASTER_DATA = (0x10 | ((uint8_t)((thePower>>8)&1))); break;
     906:	80 91 9f 2c 	lds	r24, 0x2C9F
     90a:	81 70       	andi	r24, 0x01	; 1
     90c:	80 61       	ori	r24, 0x10	; 16
     90e:	80 93 a7 04 	sts	0x04A7, r24
     912:	14 c0       	rjmp	.+40     	; 0x93c <__vector_46+0x82>
		case 3: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;	
     914:	80 91 9e 2c 	lds	r24, 0x2C9E
     918:	80 93 a7 04 	sts	0x04A7, r24
     91c:	0f c0       	rjmp	.+30     	; 0x93c <__vector_46+0x82>
		case 4:	TWIE_MASTER_DATA = (0x60 | ((uint8_t)((thePower>>8)&1))); break;
     91e:	80 91 9f 2c 	lds	r24, 0x2C9F
     922:	81 70       	andi	r24, 0x01	; 1
     924:	80 66       	ori	r24, 0x60	; 96
     926:	80 93 a7 04 	sts	0x04A7, r24
     92a:	08 c0       	rjmp	.+16     	; 0x93c <__vector_46+0x82>
		case 5: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;		
     92c:	80 91 9e 2c 	lds	r24, 0x2C9E
     930:	80 93 a7 04 	sts	0x04A7, r24
     934:	03 c0       	rjmp	.+6      	; 0x93c <__vector_46+0x82>
		case 6: TWIE_MASTER_CTRLC = TWI_MASTER_CMD_STOP_gc;
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	80 93 a3 04 	sts	0x04A3, r24
	}
	count = (count+1)%7;
     93c:	80 91 01 2e 	lds	r24, 0x2E01
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	67 e0       	ldi	r22, 0x07	; 7
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <__divmodhi4>
     94c:	80 93 01 2e 	sts	0x2E01, r24
}
     950:	ff 91       	pop	r31
     952:	ef 91       	pop	r30
     954:	bf 91       	pop	r27
     956:	af 91       	pop	r26
     958:	9f 91       	pop	r25
     95a:	8f 91       	pop	r24
     95c:	7f 91       	pop	r23
     95e:	6f 91       	pop	r22
     960:	5f 91       	pop	r21
     962:	0f 90       	pop	r0
     964:	0b be       	out	0x3b, r0	; 59
     966:	0f 90       	pop	r0
     968:	0f be       	out	0x3f, r0	; 63
     96a:	0f 90       	pop	r0
     96c:	1f 90       	pop	r1
     96e:	18 95       	reti

00000970 <set_all_ir_powers>:

void set_all_ir_powers(uint16_t power)
{
	thePower=power;
     970:	80 93 9e 2c 	sts	0x2C9E, r24
     974:	90 93 9f 2c 	sts	0x2C9F, r25
	TWIE_MASTER_ADDR = 0x58;
     978:	88 e5       	ldi	r24, 0x58	; 88
     97a:	80 93 a6 04 	sts	0x04A6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     97e:	8f e7       	ldi	r24, 0x7F	; 127
     980:	95 e2       	ldi	r25, 0x25	; 37
     982:	01 97       	sbiw	r24, 0x01	; 1
     984:	f1 f7       	brne	.-4      	; 0x982 <set_all_ir_powers+0x12>
     986:	00 c0       	rjmp	.+0      	; 0x988 <set_all_ir_powers+0x18>
     988:	00 00       	nop
	delay_us(1200);
	TWIE_MASTER_ADDR = 0x5c;
     98a:	8c e5       	ldi	r24, 0x5C	; 92
     98c:	80 93 a6 04 	sts	0x04A6, r24
     990:	8f e7       	ldi	r24, 0x7F	; 127
     992:	95 e2       	ldi	r25, 0x25	; 37
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	f1 f7       	brne	.-4      	; 0x994 <set_all_ir_powers+0x24>
     998:	00 c0       	rjmp	.+0      	; 0x99a <set_all_ir_powers+0x2a>
     99a:	00 00       	nop
     99c:	08 95       	ret

0000099e <perform_ir_upkeep>:
	channel[dir]->CTRLB |= USART_RXEN_bm;	// this enables receive on the USART
}

void ir_reset_rx(uint8_t dir)
{
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
     99e:	2f 92       	push	r2
     9a0:	3f 92       	push	r3
     9a2:	4f 92       	push	r4
     9a4:	5f 92       	push	r5
     9a6:	6f 92       	push	r6
     9a8:	7f 92       	push	r7
     9aa:	8f 92       	push	r8
     9ac:	9f 92       	push	r9
     9ae:	af 92       	push	r10
     9b0:	bf 92       	push	r11
     9b2:	cf 92       	push	r12
     9b4:	df 92       	push	r13
     9b6:	ef 92       	push	r14
     9b8:	ff 92       	push	r15
     9ba:	0f 93       	push	r16
     9bc:	1f 93       	push	r17
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	2e 97       	sbiw	r28, 0x0e	; 14
     9c8:	cd bf       	out	0x3d, r28	; 61
     9ca:	de bf       	out	0x3e, r29	; 62
     9cc:	fe 01       	movw	r30, r28
     9ce:	31 96       	adiw	r30, 0x01	; 1
     9d0:	8c e0       	ldi	r24, 0x0C	; 12
     9d2:	df 01       	movw	r26, r30
     9d4:	1d 92       	st	X+, r1
     9d6:	8a 95       	dec	r24
     9d8:	e9 f7       	brne	.-6      	; 0x9d4 <perform_ir_upkeep+0x36>
     9da:	0f 2e       	mov	r0, r31
     9dc:	f6 e0       	ldi	r31, 0x06	; 6
     9de:	af 2e       	mov	r10, r31
     9e0:	f0 e2       	ldi	r31, 0x20	; 32
     9e2:	bf 2e       	mov	r11, r31
     9e4:	f0 2d       	mov	r31, r0
     9e6:	0f 2e       	mov	r0, r31
     9e8:	fe e7       	ldi	r31, 0x7E	; 126
     9ea:	8f 2e       	mov	r8, r31
     9ec:	fe e2       	ldi	r31, 0x2E	; 46
     9ee:	9f 2e       	mov	r9, r31
     9f0:	f0 2d       	mov	r31, r0
     9f2:	6f 01       	movw	r12, r30
     9f4:	55 24       	eor	r5, r5
     9f6:	5a 94       	dec	r5
     9f8:	00 e0       	ldi	r16, 0x00	; 0
     9fa:	10 e0       	ldi	r17, 0x00	; 0
     9fc:	0f 2e       	mov	r0, r31
     9fe:	f0 e3       	ldi	r31, 0x30	; 48
     a00:	4f 2e       	mov	r4, r31
     a02:	f0 2d       	mov	r31, r0
     a04:	0f 2e       	mov	r0, r31
     a06:	f8 e2       	ldi	r31, 0x28	; 40
     a08:	2f 2e       	mov	r2, r31
     a0a:	f0 2d       	mov	r31, r0
     a0c:	33 24       	eor	r3, r3
     a0e:	33 94       	inc	r3
     a10:	78 01       	movw	r14, r16
     a12:	40 9e       	mul	r4, r16
     a14:	f0 01       	movw	r30, r0
     a16:	41 9e       	mul	r4, r17
     a18:	f0 0d       	add	r31, r0
     a1a:	11 24       	eor	r1, r1
     a1c:	e6 58       	subi	r30, 0x86	; 134
     a1e:	f1 4d       	sbci	r31, 0xD1	; 209
     a20:	87 a5       	ldd	r24, Z+47	; 0x2f
     a22:	81 ff       	sbrs	r24, 1
     a24:	d7 c0       	rjmp	.+430    	; 0xbd4 <perform_ir_upkeep+0x236>
     a26:	0d 87       	std	Y+13, r16	; 0x0d
     a28:	55 2d       	mov	r21, r5
     a2a:	55 20       	and	r5, r5
     a2c:	0c f4       	brge	.+2      	; 0xa30 <perform_ir_upkeep+0x92>
     a2e:	e2 c0       	rjmp	.+452    	; 0xbf4 <perform_ir_upkeep+0x256>
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	40 9e       	mul	r4, r16
     a34:	d0 01       	movw	r26, r0
     a36:	41 9e       	mul	r4, r17
     a38:	b0 0d       	add	r27, r0
     a3a:	11 24       	eor	r1, r1
     a3c:	a2 56       	subi	r26, 0x62	; 98
     a3e:	b1 4d       	sbci	r27, 0xD1	; 209
     a40:	8d 91       	ld	r24, X+
     a42:	9c 91       	ld	r25, X
     a44:	11 97       	sbiw	r26, 0x01	; 1
     a46:	e5 2f       	mov	r30, r21
     a48:	ee 0f       	add	r30, r30
     a4a:	ff 0b       	sbc	r31, r31
     a4c:	21 e0       	ldi	r18, 0x01	; 1
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	2c 0f       	add	r18, r28
     a52:	3d 1f       	adc	r19, r29
     a54:	e2 0f       	add	r30, r18
     a56:	f3 1f       	adc	r31, r19
     a58:	20 81       	ld	r18, Z
     a5a:	31 81       	ldd	r19, Z+1	; 0x01
     a5c:	28 17       	cp	r18, r24
     a5e:	39 07       	cpc	r19, r25
     a60:	09 f4       	brne	.+2      	; 0xa64 <perform_ir_upkeep+0xc6>
     a62:	43 2d       	mov	r20, r3
     a64:	51 50       	subi	r21, 0x01	; 1
     a66:	62 f7       	brpl	.-40     	; 0xa40 <perform_ir_upkeep+0xa2>
     a68:	4e 9c       	mul	r4, r14
     a6a:	f0 01       	movw	r30, r0
     a6c:	4f 9c       	mul	r4, r15
     a6e:	f0 0d       	add	r31, r0
     a70:	11 24       	eor	r1, r1
     a72:	e6 58       	subi	r30, 0x86	; 134
     a74:	f1 4d       	sbci	r31, 0xD1	; 209
     a76:	84 a1       	ldd	r24, Z+36	; 0x24
     a78:	95 a1       	ldd	r25, Z+37	; 0x25
     a7a:	d6 01       	movw	r26, r12
     a7c:	8d 93       	st	X+, r24
     a7e:	9c 93       	st	X, r25
     a80:	44 23       	and	r20, r20
     a82:	d1 f0       	breq	.+52     	; 0xab8 <perform_ir_upkeep+0x11a>
     a84:	4e 9c       	mul	r4, r14
     a86:	f0 01       	movw	r30, r0
     a88:	4f 9c       	mul	r4, r15
     a8a:	f0 0d       	add	r31, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	e6 58       	subi	r30, 0x86	; 134
     a90:	f1 4d       	sbci	r31, 0xD1	; 209
     a92:	14 a2       	std	Z+36, r1	; 0x24
     a94:	15 a2       	std	Z+37, r1	; 0x25
     a96:	16 a2       	std	Z+38, r1	; 0x26
     a98:	17 a2       	std	Z+39, r1	; 0x27
     a9a:	10 a6       	std	Z+40, r1	; 0x28
     a9c:	11 a6       	std	Z+41, r1	; 0x29
     a9e:	12 a6       	std	Z+42, r1	; 0x2a
     aa0:	13 a6       	std	Z+43, r1	; 0x2b
     aa2:	14 a6       	std	Z+44, r1	; 0x2c
     aa4:	15 a6       	std	Z+45, r1	; 0x2d
     aa6:	16 a6       	std	Z+46, r1	; 0x2e
     aa8:	17 a6       	std	Z+47, r1	; 0x2f
     aaa:	d5 01       	movw	r26, r10
     aac:	ed 91       	ld	r30, X+
     aae:	fc 91       	ld	r31, X
     ab0:	84 81       	ldd	r24, Z+4	; 0x04
     ab2:	80 61       	ori	r24, 0x10	; 16
     ab4:	84 83       	std	Z+4, r24	; 0x04
     ab6:	8e c0       	rjmp	.+284    	; 0xbd4 <perform_ir_upkeep+0x236>
     ab8:	4e 9c       	mul	r4, r14
     aba:	f0 01       	movw	r30, r0
     abc:	4f 9c       	mul	r4, r15
     abe:	f0 0d       	add	r31, r0
     ac0:	11 24       	eor	r1, r1
     ac2:	e6 58       	subi	r30, 0x86	; 134
     ac4:	f1 4d       	sbci	r31, 0xD1	; 209
     ac6:	87 a5       	ldd	r24, Z+47	; 0x2f
     ac8:	83 ff       	sbrs	r24, 3
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <perform_ir_upkeep+0x138>
     acc:	8f e4       	ldi	r24, 0x4F	; 79
     ace:	92 e2       	ldi	r25, 0x22	; 34
     ad0:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
     ad4:	9c c0       	rjmp	.+312    	; 0xc0e <perform_ir_upkeep+0x270>
     ad6:	80 91 db 2d 	lds	r24, 0x2DDB
     ada:	86 30       	cpi	r24, 0x06	; 6
     adc:	20 f0       	brcs	.+8      	; 0xae6 <perform_ir_upkeep+0x148>
     ade:	30 92 a0 2c 	sts	0x2CA0, r3
     ae2:	10 92 db 2d 	sts	0x2DDB, r1
     ae6:	bf b7       	in	r27, 0x3f	; 63
     ae8:	be 87       	std	Y+14, r27	; 0x0e
     aea:	f8 94       	cli
     aec:	4e 9c       	mul	r4, r14
     aee:	c0 01       	movw	r24, r0
     af0:	4f 9c       	mul	r4, r15
     af2:	90 0d       	add	r25, r0
     af4:	11 24       	eor	r1, r1
     af6:	fc 01       	movw	r30, r24
     af8:	e6 58       	subi	r30, 0x86	; 134
     afa:	f1 4d       	sbci	r31, 0xD1	; 209
     afc:	3f 01       	movw	r6, r30
     afe:	46 a5       	ldd	r20, Z+46	; 0x2e
     b00:	80 91 db 2d 	lds	r24, 0x2DDB
     b04:	28 9e       	mul	r2, r24
     b06:	c0 01       	movw	r24, r0
     b08:	11 24       	eor	r1, r1
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	b4 01       	movw	r22, r8
     b0e:	83 51       	subi	r24, 0x13	; 19
     b10:	93 4d       	sbci	r25, 0xD3	; 211
     b12:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <memcpy>
     b16:	e0 91 db 2d 	lds	r30, 0x2DDB
     b1a:	d3 01       	movw	r26, r6
     b1c:	9e 96       	adiw	r26, 0x2e	; 46
     b1e:	8c 91       	ld	r24, X
     b20:	9e 97       	sbiw	r26, 0x2e	; 46
     b22:	2e 9e       	mul	r2, r30
     b24:	f0 01       	movw	r30, r0
     b26:	11 24       	eor	r1, r1
     b28:	e9 51       	subi	r30, 0x19	; 25
     b2a:	f3 4d       	sbci	r31, 0xD3	; 211
     b2c:	e8 0f       	add	r30, r24
     b2e:	f1 1d       	adc	r31, r1
     b30:	16 82       	std	Z+6, r1	; 0x06
     b32:	20 91 db 2d 	lds	r18, 0x2DDB
     b36:	8d 91       	ld	r24, X+
     b38:	9d 91       	ld	r25, X+
     b3a:	0d 90       	ld	r0, X+
     b3c:	bc 91       	ld	r27, X
     b3e:	a0 2d       	mov	r26, r0
     b40:	22 9e       	mul	r2, r18
     b42:	f0 01       	movw	r30, r0
     b44:	11 24       	eor	r1, r1
     b46:	e9 51       	subi	r30, 0x19	; 25
     b48:	f3 4d       	sbci	r31, 0xD3	; 211
     b4a:	80 83       	st	Z, r24
     b4c:	91 83       	std	Z+1, r25	; 0x01
     b4e:	a2 83       	std	Z+2, r26	; 0x02
     b50:	b3 83       	std	Z+3, r27	; 0x03
     b52:	e0 91 db 2d 	lds	r30, 0x2DDB
     b56:	2e 9e       	mul	r2, r30
     b58:	f0 01       	movw	r30, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	e9 51       	subi	r30, 0x19	; 25
     b5e:	f3 4d       	sbci	r31, 0xD3	; 211
     b60:	bd 85       	ldd	r27, Y+13	; 0x0d
     b62:	b6 a3       	std	Z+38, r27	; 0x26
     b64:	e0 91 db 2d 	lds	r30, 0x2DDB
     b68:	d3 01       	movw	r26, r6
     b6a:	96 96       	adiw	r26, 0x26	; 38
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	97 97       	sbiw	r26, 0x27	; 39
     b72:	2e 9e       	mul	r2, r30
     b74:	f0 01       	movw	r30, r0
     b76:	11 24       	eor	r1, r1
     b78:	e9 51       	subi	r30, 0x19	; 25
     b7a:	f3 4d       	sbci	r31, 0xD3	; 211
     b7c:	84 83       	std	Z+4, r24	; 0x04
     b7e:	95 83       	std	Z+5, r25	; 0x05
     b80:	e0 91 db 2d 	lds	r30, 0x2DDB
     b84:	9e 96       	adiw	r26, 0x2e	; 46
     b86:	8c 91       	ld	r24, X
     b88:	2e 9e       	mul	r2, r30
     b8a:	f0 01       	movw	r30, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	e9 51       	subi	r30, 0x19	; 25
     b90:	f3 4d       	sbci	r31, 0xD3	; 211
     b92:	87 a3       	std	Z+39, r24	; 0x27
     b94:	be 85       	ldd	r27, Y+14	; 0x0e
     b96:	bf bf       	out	0x3f, r27	; 63
     b98:	80 91 db 2d 	lds	r24, 0x2DDB
     b9c:	8f 5f       	subi	r24, 0xFF	; 255
     b9e:	80 93 db 2d 	sts	0x2DDB, r24
     ba2:	4e 9c       	mul	r4, r14
     ba4:	f0 01       	movw	r30, r0
     ba6:	4f 9c       	mul	r4, r15
     ba8:	f0 0d       	add	r31, r0
     baa:	11 24       	eor	r1, r1
     bac:	e6 58       	subi	r30, 0x86	; 134
     bae:	f1 4d       	sbci	r31, 0xD1	; 209
     bb0:	14 a2       	std	Z+36, r1	; 0x24
     bb2:	15 a2       	std	Z+37, r1	; 0x25
     bb4:	16 a2       	std	Z+38, r1	; 0x26
     bb6:	17 a2       	std	Z+39, r1	; 0x27
     bb8:	10 a6       	std	Z+40, r1	; 0x28
     bba:	11 a6       	std	Z+41, r1	; 0x29
     bbc:	12 a6       	std	Z+42, r1	; 0x2a
     bbe:	13 a6       	std	Z+43, r1	; 0x2b
     bc0:	14 a6       	std	Z+44, r1	; 0x2c
     bc2:	15 a6       	std	Z+45, r1	; 0x2d
     bc4:	16 a6       	std	Z+46, r1	; 0x2e
     bc6:	17 a6       	std	Z+47, r1	; 0x2f
     bc8:	d5 01       	movw	r26, r10
     bca:	ed 91       	ld	r30, X+
     bcc:	fc 91       	ld	r31, X
     bce:	84 81       	ldd	r24, Z+4	; 0x04
     bd0:	80 61       	ori	r24, 0x10	; 16
     bd2:	84 83       	std	Z+4, r24	; 0x04
     bd4:	0f 5f       	subi	r16, 0xFF	; 255
     bd6:	1f 4f       	sbci	r17, 0xFF	; 255
     bd8:	b2 e0       	ldi	r27, 0x02	; 2
     bda:	ab 0e       	add	r10, r27
     bdc:	b1 1c       	adc	r11, r1
     bde:	e0 e3       	ldi	r30, 0x30	; 48
     be0:	8e 0e       	add	r8, r30
     be2:	91 1c       	adc	r9, r1
     be4:	f2 e0       	ldi	r31, 0x02	; 2
     be6:	cf 0e       	add	r12, r31
     be8:	d1 1c       	adc	r13, r1
     bea:	53 94       	inc	r5
     bec:	25 e0       	ldi	r18, 0x05	; 5
     bee:	52 12       	cpse	r5, r18
     bf0:	0f cf       	rjmp	.-482    	; 0xa10 <perform_ir_upkeep+0x72>
     bf2:	0d c0       	rjmp	.+26     	; 0xc0e <perform_ir_upkeep+0x270>
     bf4:	40 9e       	mul	r4, r16
     bf6:	f0 01       	movw	r30, r0
     bf8:	41 9e       	mul	r4, r17
     bfa:	f0 0d       	add	r31, r0
     bfc:	11 24       	eor	r1, r1
     bfe:	e6 58       	subi	r30, 0x86	; 134
     c00:	f1 4d       	sbci	r31, 0xD1	; 209
     c02:	84 a1       	ldd	r24, Z+36	; 0x24
     c04:	95 a1       	ldd	r25, Z+37	; 0x25
     c06:	d6 01       	movw	r26, r12
     c08:	8d 93       	st	X+, r24
     c0a:	9c 93       	st	X, r25
     c0c:	55 cf       	rjmp	.-342    	; 0xab8 <perform_ir_upkeep+0x11a>
     c0e:	2e 96       	adiw	r28, 0x0e	; 14
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	de bf       	out	0x3e, r29	; 62
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	bf 90       	pop	r11
     c26:	af 90       	pop	r10
     c28:	9f 90       	pop	r9
     c2a:	8f 90       	pop	r8
     c2c:	7f 90       	pop	r7
     c2e:	6f 90       	pop	r6
     c30:	5f 90       	pop	r5
     c32:	4f 90       	pop	r4
     c34:	3f 90       	pop	r3
     c36:	2f 90       	pop	r2
     c38:	08 95       	ret

00000c3a <handle_cmd_wrapper>:
     c3a:	df 92       	push	r13
     c3c:	ef 92       	push	r14
     c3e:	ff 92       	push	r15
     c40:	0f 93       	push	r16
     c42:	1f 93       	push	r17
     c44:	cf 93       	push	r28
     c46:	df 93       	push	r29
     c48:	cd b7       	in	r28, 0x3d	; 61
     c4a:	de b7       	in	r29, 0x3e	; 62
     c4c:	ed b6       	in	r14, 0x3d	; 61
     c4e:	fe b6       	in	r15, 0x3e	; 62
     c50:	80 91 d5 2f 	lds	r24, 0x2FD5
     c54:	90 91 d6 2f 	lds	r25, 0x2FD6
     c58:	01 96       	adiw	r24, 0x01	; 1
     c5a:	2d b7       	in	r18, 0x3d	; 61
     c5c:	3e b7       	in	r19, 0x3e	; 62
     c5e:	28 1b       	sub	r18, r24
     c60:	39 0b       	sbc	r19, r25
     c62:	2d bf       	out	0x3d, r18	; 61
     c64:	3e bf       	out	0x3e, r19	; 62
     c66:	0d b7       	in	r16, 0x3d	; 61
     c68:	1e b7       	in	r17, 0x3e	; 62
     c6a:	0f 5f       	subi	r16, 0xFF	; 255
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	83 e7       	ldi	r24, 0x73	; 115
     c70:	92 e2       	ldi	r25, 0x22	; 34
     c72:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
     c76:	df b6       	in	r13, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	40 91 d5 2f 	lds	r20, 0x2FD5
     c7e:	50 91 d6 2f 	lds	r21, 0x2FD6
     c82:	4f 5f       	subi	r20, 0xFF	; 255
     c84:	5f 4f       	sbci	r21, 0xFF	; 255
     c86:	68 ed       	ldi	r22, 0xD8	; 216
     c88:	7f e2       	ldi	r23, 0x2F	; 47
     c8a:	c8 01       	movw	r24, r16
     c8c:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <memcpy>
     c90:	60 91 d5 2f 	lds	r22, 0x2FD5
     c94:	70 91 d6 2f 	lds	r23, 0x2FD6
     c98:	df be       	out	0x3f, r13	; 63
     c9a:	c8 01       	movw	r24, r16
     c9c:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <handle_serial_command>
     ca0:	ed be       	out	0x3d, r14	; 61
     ca2:	fe be       	out	0x3e, r15	; 62
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	08 95       	ret

00000cb4 <ir_comm_init>:
     cb4:	cf 93       	push	r28
     cb6:	df 93       	push	r29
     cb8:	a0 ea       	ldi	r26, 0xA0	; 160
     cba:	b6 e0       	ldi	r27, 0x06	; 6
     cbc:	83 ef       	ldi	r24, 0xF3	; 243
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	8c 93       	st	X, r24
     cc2:	11 97       	sbiw	r26, 0x01	; 1
     cc4:	e0 e0       	ldi	r30, 0x00	; 0
     cc6:	fb e0       	ldi	r31, 0x0B	; 11
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	84 83       	std	Z+4, r24	; 0x04
     ccc:	80 81       	ld	r24, Z
     cce:	83 60       	ori	r24, 0x03	; 3
     cd0:	80 83       	st	Z, r24
     cd2:	83 ed       	ldi	r24, 0xD3	; 211
     cd4:	87 a3       	std	Z+39, r24	; 0x27
     cd6:	86 a3       	std	Z+38, r24	; 0x26
     cd8:	89 e6       	ldi	r24, 0x69	; 105
     cda:	81 a7       	std	Z+41, r24	; 0x29
     cdc:	83 a7       	std	Z+43, r24	; 0x2b
     cde:	85 a7       	std	Z+45, r24	; 0x2d
     ce0:	87 a7       	std	Z+47, r24	; 0x2f
     ce2:	80 a7       	std	Z+40, r24	; 0x28
     ce4:	82 a7       	std	Z+42, r24	; 0x2a
     ce6:	c0 e4       	ldi	r28, 0x40	; 64
     ce8:	d6 e0       	ldi	r29, 0x06	; 6
     cea:	34 e4       	ldi	r19, 0x44	; 68
     cec:	3a 83       	std	Y+2, r19	; 0x02
     cee:	80 e6       	ldi	r24, 0x60	; 96
     cf0:	96 e0       	ldi	r25, 0x06	; 6
     cf2:	24 e0       	ldi	r18, 0x04	; 4
     cf4:	fc 01       	movw	r30, r24
     cf6:	22 83       	std	Z+2, r18	; 0x02
     cf8:	40 e8       	ldi	r20, 0x80	; 128
     cfa:	56 e0       	ldi	r21, 0x06	; 6
     cfc:	fa 01       	movw	r30, r20
     cfe:	32 83       	std	Z+2, r19	; 0x02
     d00:	12 96       	adiw	r26, 0x02	; 2
     d02:	2c 93       	st	X, r18
     d04:	12 97       	sbiw	r26, 0x02	; 2
     d06:	38 e8       	ldi	r19, 0x88	; 136
     d08:	39 83       	std	Y+1, r19	; 0x01
     d0a:	28 e0       	ldi	r18, 0x08	; 8
     d0c:	fc 01       	movw	r30, r24
     d0e:	21 83       	std	Z+1, r18	; 0x01
     d10:	fa 01       	movw	r30, r20
     d12:	31 83       	std	Z+1, r19	; 0x01
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	2c 93       	st	X, r18
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	20 e4       	ldi	r18, 0x40	; 64
     d1c:	2b 8b       	std	Y+19, r18	; 0x13
     d1e:	2f 8b       	std	Y+23, r18	; 0x17
     d20:	fc 01       	movw	r30, r24
     d22:	23 8b       	std	Z+19, r18	; 0x13
     d24:	fa 01       	movw	r30, r20
     d26:	23 8b       	std	Z+19, r18	; 0x13
     d28:	27 8b       	std	Z+23, r18	; 0x17
     d2a:	53 96       	adiw	r26, 0x13	; 19
     d2c:	2c 93       	st	X, r18
     d2e:	82 e1       	ldi	r24, 0x12	; 18
     d30:	90 e2       	ldi	r25, 0x20	; 32
     d32:	e6 e0       	ldi	r30, 0x06	; 6
     d34:	f0 e2       	ldi	r31, 0x20	; 32
     d36:	68 e2       	ldi	r22, 0x28	; 40
     d38:	53 e0       	ldi	r21, 0x03	; 3
     d3a:	40 e7       	ldi	r20, 0x70	; 112
     d3c:	32 e0       	ldi	r19, 0x02	; 2
     d3e:	a0 81       	ld	r26, Z
     d40:	b1 81       	ldd	r27, Z+1	; 0x01
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	6c 93       	st	X, r22
     d46:	a0 81       	ld	r26, Z
     d48:	b1 81       	ldd	r27, Z+1	; 0x01
     d4a:	15 96       	adiw	r26, 0x05	; 5
     d4c:	5c 93       	st	X, r21
     d4e:	a0 81       	ld	r26, Z
     d50:	b1 81       	ldd	r27, Z+1	; 0x01
     d52:	16 96       	adiw	r26, 0x06	; 6
     d54:	4c 93       	st	X, r20
     d56:	a0 81       	ld	r26, Z
     d58:	b1 81       	ldd	r27, Z+1	; 0x01
     d5a:	17 96       	adiw	r26, 0x07	; 7
     d5c:	3c 93       	st	X, r19
     d5e:	a0 81       	ld	r26, Z
     d60:	b1 81       	ldd	r27, Z+1	; 0x01
     d62:	14 96       	adiw	r26, 0x04	; 4
     d64:	2c 91       	ld	r18, X
     d66:	14 97       	sbiw	r26, 0x04	; 4
     d68:	20 61       	ori	r18, 0x10	; 16
     d6a:	14 96       	adiw	r26, 0x04	; 4
     d6c:	2c 93       	st	X, r18
     d6e:	a1 91       	ld	r26, Z+
     d70:	b1 91       	ld	r27, Z+
     d72:	14 96       	adiw	r26, 0x04	; 4
     d74:	2c 91       	ld	r18, X
     d76:	14 97       	sbiw	r26, 0x04	; 4
     d78:	28 60       	ori	r18, 0x08	; 8
     d7a:	14 96       	adiw	r26, 0x04	; 4
     d7c:	2c 93       	st	X, r18
     d7e:	e8 17       	cp	r30, r24
     d80:	f9 07       	cpc	r31, r25
     d82:	e9 f6       	brne	.-70     	; 0xd3e <ir_comm_init+0x8a>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	f3 dd       	rcall	.-1050   	; 0x970 <set_all_ir_powers>
     d8a:	a6 e0       	ldi	r26, 0x06	; 6
     d8c:	b0 e2       	ldi	r27, 0x20	; 32
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	30 e3       	ldi	r19, 0x30	; 48
     d94:	38 9f       	mul	r19, r24
     d96:	f0 01       	movw	r30, r0
     d98:	39 9f       	mul	r19, r25
     d9a:	f0 0d       	add	r31, r0
     d9c:	11 24       	eor	r1, r1
     d9e:	e6 58       	subi	r30, 0x86	; 134
     da0:	f1 4d       	sbci	r31, 0xD1	; 209
     da2:	14 a2       	std	Z+36, r1	; 0x24
     da4:	15 a2       	std	Z+37, r1	; 0x25
     da6:	16 a2       	std	Z+38, r1	; 0x26
     da8:	17 a2       	std	Z+39, r1	; 0x27
     daa:	10 a6       	std	Z+40, r1	; 0x28
     dac:	11 a6       	std	Z+41, r1	; 0x29
     dae:	12 a6       	std	Z+42, r1	; 0x2a
     db0:	13 a6       	std	Z+43, r1	; 0x2b
     db2:	14 a6       	std	Z+44, r1	; 0x2c
     db4:	15 a6       	std	Z+45, r1	; 0x2d
     db6:	16 a6       	std	Z+46, r1	; 0x2e
     db8:	17 a6       	std	Z+47, r1	; 0x2f
     dba:	ed 91       	ld	r30, X+
     dbc:	fd 91       	ld	r31, X+
     dbe:	24 81       	ldd	r18, Z+4	; 0x04
     dc0:	20 61       	ori	r18, 0x10	; 16
     dc2:	24 83       	std	Z+4, r18	; 0x04
     dc4:	01 96       	adiw	r24, 0x01	; 1
     dc6:	86 30       	cpi	r24, 0x06	; 6
     dc8:	91 05       	cpc	r25, r1
     dca:	21 f7       	brne	.-56     	; 0xd94 <ir_comm_init+0xe0>
     dcc:	10 92 cb 2f 	sts	0x2FCB, r1
     dd0:	10 92 cc 2f 	sts	0x2FCC, r1
     dd4:	10 92 cd 2f 	sts	0x2FCD, r1
     dd8:	10 92 ce 2f 	sts	0x2FCE, r1
     ddc:	10 92 db 2d 	sts	0x2DDB, r1
     de0:	10 92 a0 2c 	sts	0x2CA0, r1
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	4f ec       	ldi	r20, 0xCF	; 207
     dea:	54 e0       	ldi	r21, 0x04	; 4
     dec:	6e e3       	ldi	r22, 0x3E	; 62
     dee:	70 e0       	ldi	r23, 0x00	; 0
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <schedule_periodic_task>
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <send_msg>:
     dfe:	4f 92       	push	r4
     e00:	5f 92       	push	r5
     e02:	6f 92       	push	r6
     e04:	7f 92       	push	r7
     e06:	8f 92       	push	r8
     e08:	9f 92       	push	r9
     e0a:	af 92       	push	r10
     e0c:	bf 92       	push	r11
     e0e:	cf 92       	push	r12
     e10:	df 92       	push	r13
     e12:	ef 92       	push	r14
     e14:	ff 92       	push	r15
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	18 2f       	mov	r17, r24
     e20:	66 2e       	mov	r6, r22
     e22:	57 2e       	mov	r5, r23
     e24:	74 2e       	mov	r7, r20
     e26:	80 e2       	ldi	r24, 0x20	; 32
     e28:	84 17       	cp	r24, r20
     e2a:	20 f4       	brcc	.+8      	; 0xe34 <send_msg+0x36>
     e2c:	8c e8       	ldi	r24, 0x8C	; 140
     e2e:	92 e2       	ldi	r25, 0x22	; 34
     e30:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
     e34:	c0 91 74 2c 	lds	r28, 0x2C74
     e38:	d0 91 75 2c 	lds	r29, 0x2C75
     e3c:	e1 2e       	mov	r14, r17
     e3e:	f1 2c       	mov	r15, r1
     e40:	10 fd       	sbrc	r17, 0
     e42:	0d c0       	rjmp	.+26     	; 0xe5e <send_msg+0x60>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	ac 01       	movw	r20, r24
     e4a:	97 01       	movw	r18, r14
     e4c:	08 2e       	mov	r0, r24
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <send_msg+0x56>
     e50:	35 95       	asr	r19
     e52:	27 95       	ror	r18
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <send_msg+0x52>
     e58:	20 ff       	sbrs	r18, 0
     e5a:	27 c0       	rjmp	.+78     	; 0xeaa <send_msg+0xac>
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <send_msg+0x64>
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	80 e3       	ldi	r24, 0x30	; 48
     e64:	84 9f       	mul	r24, r20
     e66:	f0 01       	movw	r30, r0
     e68:	85 9f       	mul	r24, r21
     e6a:	f0 0d       	add	r31, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	e6 58       	subi	r30, 0x86	; 134
     e70:	f1 4d       	sbci	r31, 0xD1	; 209
     e72:	87 a5       	ldd	r24, Z+47	; 0x2f
     e74:	88 70       	andi	r24, 0x08	; 8
     e76:	c8 27       	eor	r28, r24
     e78:	8c 2f       	mov	r24, r28
     e7a:	82 95       	swap	r24
     e7c:	8c 27       	eor	r24, r28
     e7e:	08 2e       	mov	r0, r24
     e80:	86 95       	lsr	r24
     e82:	86 95       	lsr	r24
     e84:	80 25       	eor	r24, r0
     e86:	08 2e       	mov	r0, r24
     e88:	86 95       	lsr	r24
     e8a:	80 25       	eor	r24, r0
     e8c:	87 70       	andi	r24, 0x07	; 7
     e8e:	0c 2e       	mov	r0, r28
     e90:	cd 2f       	mov	r28, r29
     e92:	86 95       	lsr	r24
     e94:	07 94       	ror	r0
     e96:	87 95       	ror	r24
     e98:	d0 2d       	mov	r29, r0
     e9a:	c8 27       	eor	r28, r24
     e9c:	06 94       	lsr	r0
     e9e:	87 95       	ror	r24
     ea0:	d0 25       	eor	r29, r0
     ea2:	c8 27       	eor	r28, r24
     ea4:	71 10       	cpse	r7, r1
     ea6:	07 c0       	rjmp	.+14     	; 0xeb6 <send_msg+0xb8>
     ea8:	80 c0       	rjmp	.+256    	; 0xfaa <send_msg+0x1ac>
     eaa:	01 96       	adiw	r24, 0x01	; 1
     eac:	86 30       	cpi	r24, 0x06	; 6
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f0       	breq	.+2      	; 0xeb4 <send_msg+0xb6>
     eb2:	ca cf       	rjmp	.-108    	; 0xe48 <send_msg+0x4a>
     eb4:	f7 cf       	rjmp	.-18     	; 0xea4 <send_msg+0xa6>
     eb6:	96 2d       	mov	r25, r6
     eb8:	e6 2d       	mov	r30, r6
     eba:	f5 2d       	mov	r31, r5
     ebc:	81 91       	ld	r24, Z+
     ebe:	c8 27       	eor	r28, r24
     ec0:	8c 2f       	mov	r24, r28
     ec2:	82 95       	swap	r24
     ec4:	8c 27       	eor	r24, r28
     ec6:	08 2e       	mov	r0, r24
     ec8:	86 95       	lsr	r24
     eca:	86 95       	lsr	r24
     ecc:	80 25       	eor	r24, r0
     ece:	08 2e       	mov	r0, r24
     ed0:	86 95       	lsr	r24
     ed2:	80 25       	eor	r24, r0
     ed4:	87 70       	andi	r24, 0x07	; 7
     ed6:	0c 2e       	mov	r0, r28
     ed8:	cd 2f       	mov	r28, r29
     eda:	86 95       	lsr	r24
     edc:	07 94       	ror	r0
     ede:	87 95       	ror	r24
     ee0:	d0 2d       	mov	r29, r0
     ee2:	c8 27       	eor	r28, r24
     ee4:	06 94       	lsr	r0
     ee6:	87 95       	ror	r24
     ee8:	d0 25       	eor	r29, r0
     eea:	c8 27       	eor	r28, r24
     eec:	8e 2f       	mov	r24, r30
     eee:	89 1b       	sub	r24, r25
     ef0:	87 15       	cp	r24, r7
     ef2:	20 f3       	brcs	.-56     	; 0xebc <send_msg+0xbe>
     ef4:	5a c0       	rjmp	.+180    	; 0xfaa <send_msg+0x1ac>
     ef6:	c7 01       	movw	r24, r14
     ef8:	00 2e       	mov	r0, r16
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <send_msg+0x102>
     efc:	95 95       	asr	r25
     efe:	87 95       	ror	r24
     f00:	0a 94       	dec	r0
     f02:	e2 f7       	brpl	.-8      	; 0xefc <send_msg+0xfe>
     f04:	80 ff       	sbrs	r24, 0
     f06:	21 c0       	rjmp	.+66     	; 0xf4a <send_msg+0x14c>
     f08:	40 9e       	mul	r4, r16
     f0a:	f0 01       	movw	r30, r0
     f0c:	41 9e       	mul	r4, r17
     f0e:	f0 0d       	add	r31, r0
     f10:	11 24       	eor	r1, r1
     f12:	e6 58       	subi	r30, 0x86	; 134
     f14:	f1 4d       	sbci	r31, 0xD1	; 209
     f16:	76 a6       	std	Z+46, r7	; 0x2e
     f18:	c4 a3       	std	Z+36, r28	; 0x24
     f1a:	d5 a3       	std	Z+37, r29	; 0x25
     f1c:	12 a6       	std	Z+42, r1	; 0x2a
     f1e:	13 a6       	std	Z+43, r1	; 0x2b
     f20:	80 91 74 2c 	lds	r24, 0x2C74
     f24:	90 91 75 2c 	lds	r25, 0x2C75
     f28:	86 a3       	std	Z+38, r24	; 0x26
     f2a:	97 a3       	std	Z+39, r25	; 0x27
     f2c:	a5 01       	movw	r20, r10
     f2e:	66 2d       	mov	r22, r6
     f30:	75 2d       	mov	r23, r5
     f32:	c4 01       	movw	r24, r8
     f34:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <memcpy>
     f38:	f6 01       	movw	r30, r12
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	f8 01       	movw	r30, r16
     f3e:	e0 50       	subi	r30, 0x00	; 0
     f40:	f0 4e       	sbci	r31, 0xE0	; 224
     f42:	80 81       	ld	r24, Z
     f44:	89 2b       	or	r24, r25
     f46:	f6 01       	movw	r30, r12
     f48:	81 83       	std	Z+1, r24	; 0x01
     f4a:	0f 5f       	subi	r16, 0xFF	; 255
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	f0 e3       	ldi	r31, 0x30	; 48
     f50:	8f 0e       	add	r8, r31
     f52:	91 1c       	adc	r9, r1
     f54:	06 30       	cpi	r16, 0x06	; 6
     f56:	11 05       	cpc	r17, r1
     f58:	71 f6       	brne	.-100    	; 0xef6 <send_msg+0xf8>
     f5a:	e6 e0       	ldi	r30, 0x06	; 6
     f5c:	f0 e2       	ldi	r31, 0x20	; 32
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	40 e3       	ldi	r20, 0x30	; 48
     f64:	97 01       	movw	r18, r14
     f66:	08 2e       	mov	r0, r24
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <send_msg+0x170>
     f6a:	35 95       	asr	r19
     f6c:	27 95       	ror	r18
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <send_msg+0x16c>
     f72:	20 ff       	sbrs	r18, 0
     f74:	14 c0       	rjmp	.+40     	; 0xf9e <send_msg+0x1a0>
     f76:	48 9f       	mul	r20, r24
     f78:	d0 01       	movw	r26, r0
     f7a:	49 9f       	mul	r20, r25
     f7c:	b0 0d       	add	r27, r0
     f7e:	11 24       	eor	r1, r1
     f80:	a6 58       	subi	r26, 0x86	; 134
     f82:	b1 4d       	sbci	r27, 0xD1	; 209
     f84:	1d 92       	st	X+, r1
     f86:	1d 92       	st	X+, r1
     f88:	1d 92       	st	X+, r1
     f8a:	1c 92       	st	X, r1
     f8c:	13 97       	sbiw	r26, 0x03	; 3
     f8e:	a0 81       	ld	r26, Z
     f90:	b1 81       	ldd	r27, Z+1	; 0x01
     f92:	13 96       	adiw	r26, 0x03	; 3
     f94:	2c 91       	ld	r18, X
     f96:	13 97       	sbiw	r26, 0x03	; 3
     f98:	22 60       	ori	r18, 0x02	; 2
     f9a:	13 96       	adiw	r26, 0x03	; 3
     f9c:	2c 93       	st	X, r18
     f9e:	01 96       	adiw	r24, 0x01	; 1
     fa0:	32 96       	adiw	r30, 0x02	; 2
     fa2:	86 30       	cpi	r24, 0x06	; 6
     fa4:	91 05       	cpc	r25, r1
     fa6:	f1 f6       	brne	.-68     	; 0xf64 <send_msg+0x166>
     fa8:	14 c0       	rjmp	.+40     	; 0xfd2 <send_msg+0x1d4>
     faa:	0f 2e       	mov	r0, r31
     fac:	fe e7       	ldi	r31, 0x7E	; 126
     fae:	8f 2e       	mov	r8, r31
     fb0:	fe e2       	ldi	r31, 0x2E	; 46
     fb2:	9f 2e       	mov	r9, r31
     fb4:	f0 2d       	mov	r31, r0
     fb6:	00 e0       	ldi	r16, 0x00	; 0
     fb8:	10 e0       	ldi	r17, 0x00	; 0
     fba:	0f 2e       	mov	r0, r31
     fbc:	f0 e3       	ldi	r31, 0x30	; 48
     fbe:	4f 2e       	mov	r4, r31
     fc0:	f0 2d       	mov	r31, r0
     fc2:	a7 2c       	mov	r10, r7
     fc4:	b1 2c       	mov	r11, r1
     fc6:	0f 2e       	mov	r0, r31
     fc8:	c1 2c       	mov	r12, r1
     fca:	fb e0       	ldi	r31, 0x0B	; 11
     fcc:	df 2e       	mov	r13, r31
     fce:	f0 2d       	mov	r31, r0
     fd0:	92 cf       	rjmp	.-220    	; 0xef6 <send_msg+0xf8>
     fd2:	df 91       	pop	r29
     fd4:	cf 91       	pop	r28
     fd6:	1f 91       	pop	r17
     fd8:	0f 91       	pop	r16
     fda:	ff 90       	pop	r15
     fdc:	ef 90       	pop	r14
     fde:	df 90       	pop	r13
     fe0:	cf 90       	pop	r12
     fe2:	bf 90       	pop	r11
     fe4:	af 90       	pop	r10
     fe6:	9f 90       	pop	r9
     fe8:	8f 90       	pop	r8
     fea:	7f 90       	pop	r7
     fec:	6f 90       	pop	r6
     fee:	5f 90       	pop	r5
     ff0:	4f 90       	pop	r4
     ff2:	08 95       	ret

00000ff4 <ir_receive>:
     ff4:	af 92       	push	r10
     ff6:	bf 92       	push	r11
     ff8:	cf 92       	push	r12
     ffa:	df 92       	push	r13
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	c8 2f       	mov	r28, r24
    1008:	d0 e0       	ldi	r29, 0x00	; 0
    100a:	fe 01       	movw	r30, r28
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	ea 5f       	subi	r30, 0xFA	; 250
    1012:	ff 4d       	sbci	r31, 0xDF	; 223
    1014:	01 90       	ld	r0, Z+
    1016:	f0 81       	ld	r31, Z
    1018:	e0 2d       	mov	r30, r0
    101a:	f0 80       	ld	r15, Z
    101c:	8c da       	rcall	.-2792   	; 0x536 <get_time>
    101e:	20 e3       	ldi	r18, 0x30	; 48
    1020:	2c 9f       	mul	r18, r28
    1022:	f0 01       	movw	r30, r0
    1024:	2d 9f       	mul	r18, r29
    1026:	f0 0d       	add	r31, r0
    1028:	11 24       	eor	r1, r1
    102a:	e6 58       	subi	r30, 0x86	; 134
    102c:	f1 4d       	sbci	r31, 0xD1	; 209
    102e:	00 81       	ld	r16, Z
    1030:	11 81       	ldd	r17, Z+1	; 0x01
    1032:	22 81       	ldd	r18, Z+2	; 0x02
    1034:	33 81       	ldd	r19, Z+3	; 0x03
    1036:	5b 01       	movw	r10, r22
    1038:	6c 01       	movw	r12, r24
    103a:	a0 1a       	sub	r10, r16
    103c:	b1 0a       	sbc	r11, r17
    103e:	c2 0a       	sbc	r12, r18
    1040:	d3 0a       	sbc	r13, r19
    1042:	96 01       	movw	r18, r12
    1044:	85 01       	movw	r16, r10
    1046:	05 31       	cpi	r16, 0x15	; 21
    1048:	11 05       	cpc	r17, r1
    104a:	21 05       	cpc	r18, r1
    104c:	31 05       	cpc	r19, r1
    104e:	f8 f0       	brcs	.+62     	; 0x108e <ir_receive+0x9a>
    1050:	20 e3       	ldi	r18, 0x30	; 48
    1052:	2c 9f       	mul	r18, r28
    1054:	f0 01       	movw	r30, r0
    1056:	2d 9f       	mul	r18, r29
    1058:	f0 0d       	add	r31, r0
    105a:	11 24       	eor	r1, r1
    105c:	e6 58       	subi	r30, 0x86	; 134
    105e:	f1 4d       	sbci	r31, 0xD1	; 209
    1060:	14 a2       	std	Z+36, r1	; 0x24
    1062:	15 a2       	std	Z+37, r1	; 0x25
    1064:	16 a2       	std	Z+38, r1	; 0x26
    1066:	17 a2       	std	Z+39, r1	; 0x27
    1068:	10 a6       	std	Z+40, r1	; 0x28
    106a:	11 a6       	std	Z+41, r1	; 0x29
    106c:	12 a6       	std	Z+42, r1	; 0x2a
    106e:	13 a6       	std	Z+43, r1	; 0x2b
    1070:	14 a6       	std	Z+44, r1	; 0x2c
    1072:	15 a6       	std	Z+45, r1	; 0x2d
    1074:	16 a6       	std	Z+46, r1	; 0x2e
    1076:	17 a6       	std	Z+47, r1	; 0x2f
    1078:	fe 01       	movw	r30, r28
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	ea 5f       	subi	r30, 0xFA	; 250
    1080:	ff 4d       	sbci	r31, 0xDF	; 223
    1082:	01 90       	ld	r0, Z+
    1084:	f0 81       	ld	r31, Z
    1086:	e0 2d       	mov	r30, r0
    1088:	24 81       	ldd	r18, Z+4	; 0x04
    108a:	20 61       	ori	r18, 0x10	; 16
    108c:	24 83       	std	Z+4, r18	; 0x04
    108e:	20 e3       	ldi	r18, 0x30	; 48
    1090:	2c 9f       	mul	r18, r28
    1092:	f0 01       	movw	r30, r0
    1094:	2d 9f       	mul	r18, r29
    1096:	f0 0d       	add	r31, r0
    1098:	11 24       	eor	r1, r1
    109a:	e6 58       	subi	r30, 0x86	; 134
    109c:	f1 4d       	sbci	r31, 0xD1	; 209
    109e:	60 83       	st	Z, r22
    10a0:	71 83       	std	Z+1, r23	; 0x01
    10a2:	82 83       	std	Z+2, r24	; 0x02
    10a4:	93 83       	std	Z+3, r25	; 0x03
    10a6:	82 a5       	ldd	r24, Z+42	; 0x2a
    10a8:	93 a5       	ldd	r25, Z+43	; 0x2b
    10aa:	87 30       	cpi	r24, 0x07	; 7
    10ac:	91 05       	cpc	r25, r1
    10ae:	08 f0       	brcs	.+2      	; 0x10b2 <ir_receive+0xbe>
    10b0:	98 c0       	rjmp	.+304    	; 0x11e2 <ir_receive+0x1ee>
    10b2:	fc 01       	movw	r30, r24
    10b4:	eb 5f       	subi	r30, 0xFB	; 251
    10b6:	fe 4f       	sbci	r31, 0xFE	; 254
    10b8:	0c 94 99 3e 	jmp	0x7d32	; 0x7d32 <__tablejump2__>
    10bc:	8f 2d       	mov	r24, r15
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	20 e3       	ldi	r18, 0x30	; 48
    10c2:	2c 9f       	mul	r18, r28
    10c4:	f0 01       	movw	r30, r0
    10c6:	2d 9f       	mul	r18, r29
    10c8:	f0 0d       	add	r31, r0
    10ca:	11 24       	eor	r1, r1
    10cc:	e6 58       	subi	r30, 0x86	; 134
    10ce:	f1 4d       	sbci	r31, 0xD1	; 209
    10d0:	86 a3       	std	Z+38, r24	; 0x26
    10d2:	97 a3       	std	Z+39, r25	; 0x27
    10d4:	b8 c0       	rjmp	.+368    	; 0x1246 <ir_receive+0x252>
    10d6:	80 e3       	ldi	r24, 0x30	; 48
    10d8:	8c 9f       	mul	r24, r28
    10da:	f0 01       	movw	r30, r0
    10dc:	8d 9f       	mul	r24, r29
    10de:	f0 0d       	add	r31, r0
    10e0:	11 24       	eor	r1, r1
    10e2:	e6 58       	subi	r30, 0x86	; 134
    10e4:	f1 4d       	sbci	r31, 0xD1	; 209
    10e6:	86 a1       	ldd	r24, Z+38	; 0x26
    10e8:	97 a1       	ldd	r25, Z+39	; 0x27
    10ea:	9f 29       	or	r25, r15
    10ec:	86 a3       	std	Z+38, r24	; 0x26
    10ee:	97 a3       	std	Z+39, r25	; 0x27
    10f0:	86 a1       	ldd	r24, Z+38	; 0x26
    10f2:	97 a1       	ldd	r25, Z+39	; 0x27
    10f4:	84 a7       	std	Z+44, r24	; 0x2c
    10f6:	95 a7       	std	Z+45, r25	; 0x2d
    10f8:	a6 c0       	rjmp	.+332    	; 0x1246 <ir_receive+0x252>
    10fa:	ff 20       	and	r15, r15
    10fc:	5c f4       	brge	.+22     	; 0x1114 <ir_receive+0x120>
    10fe:	80 e3       	ldi	r24, 0x30	; 48
    1100:	8c 9f       	mul	r24, r28
    1102:	f0 01       	movw	r30, r0
    1104:	8d 9f       	mul	r24, r29
    1106:	f0 0d       	add	r31, r0
    1108:	11 24       	eor	r1, r1
    110a:	e6 58       	subi	r30, 0x86	; 134
    110c:	f1 4d       	sbci	r31, 0xD1	; 209
    110e:	87 a5       	ldd	r24, Z+47	; 0x2f
    1110:	88 60       	ori	r24, 0x08	; 8
    1112:	87 a7       	std	Z+47, r24	; 0x2f
    1114:	80 e3       	ldi	r24, 0x30	; 48
    1116:	8c 9f       	mul	r24, r28
    1118:	f0 01       	movw	r30, r0
    111a:	8d 9f       	mul	r24, r29
    111c:	f0 0d       	add	r31, r0
    111e:	11 24       	eor	r1, r1
    1120:	e6 58       	subi	r30, 0x86	; 134
    1122:	f1 4d       	sbci	r31, 0xD1	; 209
    1124:	27 a5       	ldd	r18, Z+47	; 0x2f
    1126:	84 a5       	ldd	r24, Z+44	; 0x2c
    1128:	95 a5       	ldd	r25, Z+45	; 0x2d
    112a:	28 70       	andi	r18, 0x08	; 8
    112c:	82 27       	eor	r24, r18
    112e:	28 2f       	mov	r18, r24
    1130:	22 95       	swap	r18
    1132:	28 27       	eor	r18, r24
    1134:	02 2e       	mov	r0, r18
    1136:	26 95       	lsr	r18
    1138:	26 95       	lsr	r18
    113a:	20 25       	eor	r18, r0
    113c:	02 2e       	mov	r0, r18
    113e:	26 95       	lsr	r18
    1140:	20 25       	eor	r18, r0
    1142:	27 70       	andi	r18, 0x07	; 7
    1144:	08 2e       	mov	r0, r24
    1146:	89 2f       	mov	r24, r25
    1148:	26 95       	lsr	r18
    114a:	07 94       	ror	r0
    114c:	27 95       	ror	r18
    114e:	90 2d       	mov	r25, r0
    1150:	82 27       	eor	r24, r18
    1152:	06 94       	lsr	r0
    1154:	27 95       	ror	r18
    1156:	90 25       	eor	r25, r0
    1158:	82 27       	eor	r24, r18
    115a:	20 e3       	ldi	r18, 0x30	; 48
    115c:	2c 9f       	mul	r18, r28
    115e:	f0 01       	movw	r30, r0
    1160:	2d 9f       	mul	r18, r29
    1162:	f0 0d       	add	r31, r0
    1164:	11 24       	eor	r1, r1
    1166:	e6 58       	subi	r30, 0x86	; 134
    1168:	f1 4d       	sbci	r31, 0xD1	; 209
    116a:	84 a7       	std	Z+44, r24	; 0x2c
    116c:	95 a7       	std	Z+45, r25	; 0x2d
    116e:	8f 2d       	mov	r24, r15
    1170:	8f 77       	andi	r24, 0x7F	; 127
    1172:	86 a7       	std	Z+46, r24	; 0x2e
    1174:	68 c0       	rjmp	.+208    	; 0x1246 <ir_receive+0x252>
    1176:	8f 2d       	mov	r24, r15
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	20 e3       	ldi	r18, 0x30	; 48
    117c:	2c 9f       	mul	r18, r28
    117e:	f0 01       	movw	r30, r0
    1180:	2d 9f       	mul	r18, r29
    1182:	f0 0d       	add	r31, r0
    1184:	11 24       	eor	r1, r1
    1186:	e6 58       	subi	r30, 0x86	; 134
    1188:	f1 4d       	sbci	r31, 0xD1	; 209
    118a:	84 a3       	std	Z+36, r24	; 0x24
    118c:	95 a3       	std	Z+37, r25	; 0x25
    118e:	5b c0       	rjmp	.+182    	; 0x1246 <ir_receive+0x252>
    1190:	80 e3       	ldi	r24, 0x30	; 48
    1192:	8c 9f       	mul	r24, r28
    1194:	f0 01       	movw	r30, r0
    1196:	8d 9f       	mul	r24, r29
    1198:	f0 0d       	add	r31, r0
    119a:	11 24       	eor	r1, r1
    119c:	e6 58       	subi	r30, 0x86	; 134
    119e:	f1 4d       	sbci	r31, 0xD1	; 209
    11a0:	84 a1       	ldd	r24, Z+36	; 0x24
    11a2:	95 a1       	ldd	r25, Z+37	; 0x25
    11a4:	9f 29       	or	r25, r15
    11a6:	84 a3       	std	Z+36, r24	; 0x24
    11a8:	95 a3       	std	Z+37, r25	; 0x25
    11aa:	4d c0       	rjmp	.+154    	; 0x1246 <ir_receive+0x252>
    11ac:	8f 2d       	mov	r24, r15
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	20 e3       	ldi	r18, 0x30	; 48
    11b2:	2c 9f       	mul	r18, r28
    11b4:	f0 01       	movw	r30, r0
    11b6:	2d 9f       	mul	r18, r29
    11b8:	f0 0d       	add	r31, r0
    11ba:	11 24       	eor	r1, r1
    11bc:	e6 58       	subi	r30, 0x86	; 134
    11be:	f1 4d       	sbci	r31, 0xD1	; 209
    11c0:	80 a7       	std	Z+40, r24	; 0x28
    11c2:	91 a7       	std	Z+41, r25	; 0x29
    11c4:	40 c0       	rjmp	.+128    	; 0x1246 <ir_receive+0x252>
    11c6:	80 e3       	ldi	r24, 0x30	; 48
    11c8:	8c 9f       	mul	r24, r28
    11ca:	f0 01       	movw	r30, r0
    11cc:	8d 9f       	mul	r24, r29
    11ce:	f0 0d       	add	r31, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	e6 58       	subi	r30, 0x86	; 134
    11d4:	f1 4d       	sbci	r31, 0xD1	; 209
    11d6:	80 a5       	ldd	r24, Z+40	; 0x28
    11d8:	91 a5       	ldd	r25, Z+41	; 0x29
    11da:	9f 29       	or	r25, r15
    11dc:	80 a7       	std	Z+40, r24	; 0x28
    11de:	91 a7       	std	Z+41, r25	; 0x29
    11e0:	32 c0       	rjmp	.+100    	; 0x1246 <ir_receive+0x252>
    11e2:	80 e3       	ldi	r24, 0x30	; 48
    11e4:	8c 9f       	mul	r24, r28
    11e6:	f0 01       	movw	r30, r0
    11e8:	8d 9f       	mul	r24, r29
    11ea:	f0 0d       	add	r31, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	e6 58       	subi	r30, 0x86	; 134
    11f0:	f1 4d       	sbci	r31, 0xD1	; 209
    11f2:	a2 a5       	ldd	r26, Z+42	; 0x2a
    11f4:	b3 a5       	ldd	r27, Z+43	; 0x2b
    11f6:	17 97       	sbiw	r26, 0x07	; 7
    11f8:	ae 0f       	add	r26, r30
    11fa:	bf 1f       	adc	r27, r31
    11fc:	14 96       	adiw	r26, 0x04	; 4
    11fe:	fc 92       	st	X, r15
    1200:	84 a5       	ldd	r24, Z+44	; 0x2c
    1202:	95 a5       	ldd	r25, Z+45	; 0x2d
    1204:	8f 25       	eor	r24, r15
    1206:	28 2f       	mov	r18, r24
    1208:	22 95       	swap	r18
    120a:	28 27       	eor	r18, r24
    120c:	02 2e       	mov	r0, r18
    120e:	26 95       	lsr	r18
    1210:	26 95       	lsr	r18
    1212:	20 25       	eor	r18, r0
    1214:	02 2e       	mov	r0, r18
    1216:	26 95       	lsr	r18
    1218:	20 25       	eor	r18, r0
    121a:	27 70       	andi	r18, 0x07	; 7
    121c:	08 2e       	mov	r0, r24
    121e:	89 2f       	mov	r24, r25
    1220:	26 95       	lsr	r18
    1222:	07 94       	ror	r0
    1224:	27 95       	ror	r18
    1226:	90 2d       	mov	r25, r0
    1228:	82 27       	eor	r24, r18
    122a:	06 94       	lsr	r0
    122c:	27 95       	ror	r18
    122e:	90 25       	eor	r25, r0
    1230:	82 27       	eor	r24, r18
    1232:	20 e3       	ldi	r18, 0x30	; 48
    1234:	2c 9f       	mul	r18, r28
    1236:	f0 01       	movw	r30, r0
    1238:	2d 9f       	mul	r18, r29
    123a:	f0 0d       	add	r31, r0
    123c:	11 24       	eor	r1, r1
    123e:	e6 58       	subi	r30, 0x86	; 134
    1240:	f1 4d       	sbci	r31, 0xD1	; 209
    1242:	84 a7       	std	Z+44, r24	; 0x2c
    1244:	95 a7       	std	Z+45, r25	; 0x2d
    1246:	80 e3       	ldi	r24, 0x30	; 48
    1248:	8c 9f       	mul	r24, r28
    124a:	f0 01       	movw	r30, r0
    124c:	8d 9f       	mul	r24, r29
    124e:	f0 0d       	add	r31, r0
    1250:	11 24       	eor	r1, r1
    1252:	e6 58       	subi	r30, 0x86	; 134
    1254:	f1 4d       	sbci	r31, 0xD1	; 209
    1256:	82 a5       	ldd	r24, Z+42	; 0x2a
    1258:	93 a5       	ldd	r25, Z+43	; 0x2b
    125a:	01 96       	adiw	r24, 0x01	; 1
    125c:	82 a7       	std	Z+42, r24	; 0x2a
    125e:	93 a7       	std	Z+43, r25	; 0x2b
    1260:	22 a5       	ldd	r18, Z+42	; 0x2a
    1262:	33 a5       	ldd	r19, Z+43	; 0x2b
    1264:	86 a5       	ldd	r24, Z+46	; 0x2e
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	07 96       	adiw	r24, 0x07	; 7
    126a:	28 17       	cp	r18, r24
    126c:	39 07       	cpc	r19, r25
    126e:	08 f4       	brcc	.+2      	; 0x1272 <ir_receive+0x27e>
    1270:	1f c1       	rjmp	.+574    	; 0x14b0 <ir_receive+0x4bc>
    1272:	80 e3       	ldi	r24, 0x30	; 48
    1274:	8c 9f       	mul	r24, r28
    1276:	f0 01       	movw	r30, r0
    1278:	8d 9f       	mul	r24, r29
    127a:	f0 0d       	add	r31, r0
    127c:	11 24       	eor	r1, r1
    127e:	e6 58       	subi	r30, 0x86	; 134
    1280:	f1 4d       	sbci	r31, 0xD1	; 209
    1282:	24 a5       	ldd	r18, Z+44	; 0x2c
    1284:	35 a5       	ldd	r19, Z+45	; 0x2d
    1286:	84 a1       	ldd	r24, Z+36	; 0x24
    1288:	95 a1       	ldd	r25, Z+37	; 0x25
    128a:	28 17       	cp	r18, r24
    128c:	39 07       	cpc	r19, r25
    128e:	f1 f0       	breq	.+60     	; 0x12cc <ir_receive+0x2d8>
    1290:	80 e3       	ldi	r24, 0x30	; 48
    1292:	8c 9f       	mul	r24, r28
    1294:	f0 01       	movw	r30, r0
    1296:	8d 9f       	mul	r24, r29
    1298:	f0 0d       	add	r31, r0
    129a:	11 24       	eor	r1, r1
    129c:	e6 58       	subi	r30, 0x86	; 134
    129e:	f1 4d       	sbci	r31, 0xD1	; 209
    12a0:	14 a2       	std	Z+36, r1	; 0x24
    12a2:	15 a2       	std	Z+37, r1	; 0x25
    12a4:	16 a2       	std	Z+38, r1	; 0x26
    12a6:	17 a2       	std	Z+39, r1	; 0x27
    12a8:	10 a6       	std	Z+40, r1	; 0x28
    12aa:	11 a6       	std	Z+41, r1	; 0x29
    12ac:	12 a6       	std	Z+42, r1	; 0x2a
    12ae:	13 a6       	std	Z+43, r1	; 0x2b
    12b0:	14 a6       	std	Z+44, r1	; 0x2c
    12b2:	15 a6       	std	Z+45, r1	; 0x2d
    12b4:	16 a6       	std	Z+46, r1	; 0x2e
    12b6:	17 a6       	std	Z+47, r1	; 0x2f
    12b8:	cc 0f       	add	r28, r28
    12ba:	dd 1f       	adc	r29, r29
    12bc:	ca 5f       	subi	r28, 0xFA	; 250
    12be:	df 4d       	sbci	r29, 0xDF	; 223
    12c0:	e8 81       	ld	r30, Y
    12c2:	f9 81       	ldd	r31, Y+1	; 0x01
    12c4:	84 81       	ldd	r24, Z+4	; 0x04
    12c6:	80 61       	ori	r24, 0x10	; 16
    12c8:	84 83       	std	Z+4, r24	; 0x04
    12ca:	f2 c0       	rjmp	.+484    	; 0x14b0 <ir_receive+0x4bc>
    12cc:	80 e3       	ldi	r24, 0x30	; 48
    12ce:	8c 9f       	mul	r24, r28
    12d0:	f0 01       	movw	r30, r0
    12d2:	8d 9f       	mul	r24, r29
    12d4:	f0 0d       	add	r31, r0
    12d6:	11 24       	eor	r1, r1
    12d8:	e6 58       	subi	r30, 0x86	; 134
    12da:	f1 4d       	sbci	r31, 0xD1	; 209
    12dc:	80 a5       	ldd	r24, Z+40	; 0x28
    12de:	91 a5       	ldd	r25, Z+41	; 0x29
    12e0:	89 2b       	or	r24, r25
    12e2:	79 f1       	breq	.+94     	; 0x1342 <ir_receive+0x34e>
    12e4:	80 e3       	ldi	r24, 0x30	; 48
    12e6:	8c 9f       	mul	r24, r28
    12e8:	f0 01       	movw	r30, r0
    12ea:	8d 9f       	mul	r24, r29
    12ec:	f0 0d       	add	r31, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	e6 58       	subi	r30, 0x86	; 134
    12f2:	f1 4d       	sbci	r31, 0xD1	; 209
    12f4:	20 a5       	ldd	r18, Z+40	; 0x28
    12f6:	31 a5       	ldd	r19, Z+41	; 0x29
    12f8:	80 91 74 2c 	lds	r24, 0x2C74
    12fc:	90 91 75 2c 	lds	r25, 0x2C75
    1300:	28 17       	cp	r18, r24
    1302:	39 07       	cpc	r19, r25
    1304:	f1 f0       	breq	.+60     	; 0x1342 <ir_receive+0x34e>
    1306:	80 e3       	ldi	r24, 0x30	; 48
    1308:	8c 9f       	mul	r24, r28
    130a:	f0 01       	movw	r30, r0
    130c:	8d 9f       	mul	r24, r29
    130e:	f0 0d       	add	r31, r0
    1310:	11 24       	eor	r1, r1
    1312:	e6 58       	subi	r30, 0x86	; 134
    1314:	f1 4d       	sbci	r31, 0xD1	; 209
    1316:	14 a2       	std	Z+36, r1	; 0x24
    1318:	15 a2       	std	Z+37, r1	; 0x25
    131a:	16 a2       	std	Z+38, r1	; 0x26
    131c:	17 a2       	std	Z+39, r1	; 0x27
    131e:	10 a6       	std	Z+40, r1	; 0x28
    1320:	11 a6       	std	Z+41, r1	; 0x29
    1322:	12 a6       	std	Z+42, r1	; 0x2a
    1324:	13 a6       	std	Z+43, r1	; 0x2b
    1326:	14 a6       	std	Z+44, r1	; 0x2c
    1328:	15 a6       	std	Z+45, r1	; 0x2d
    132a:	16 a6       	std	Z+46, r1	; 0x2e
    132c:	17 a6       	std	Z+47, r1	; 0x2f
    132e:	cc 0f       	add	r28, r28
    1330:	dd 1f       	adc	r29, r29
    1332:	ca 5f       	subi	r28, 0xFA	; 250
    1334:	df 4d       	sbci	r29, 0xDF	; 223
    1336:	e8 81       	ld	r30, Y
    1338:	f9 81       	ldd	r31, Y+1	; 0x01
    133a:	84 81       	ldd	r24, Z+4	; 0x04
    133c:	80 61       	ori	r24, 0x10	; 16
    133e:	84 83       	std	Z+4, r24	; 0x04
    1340:	b7 c0       	rjmp	.+366    	; 0x14b0 <ir_receive+0x4bc>
    1342:	80 e3       	ldi	r24, 0x30	; 48
    1344:	8c 9f       	mul	r24, r28
    1346:	f0 01       	movw	r30, r0
    1348:	8d 9f       	mul	r24, r29
    134a:	f0 0d       	add	r31, r0
    134c:	11 24       	eor	r1, r1
    134e:	e6 58       	subi	r30, 0x86	; 134
    1350:	f1 4d       	sbci	r31, 0xD1	; 209
    1352:	26 a1       	ldd	r18, Z+38	; 0x26
    1354:	37 a1       	ldd	r19, Z+39	; 0x27
    1356:	80 91 74 2c 	lds	r24, 0x2C74
    135a:	90 91 75 2c 	lds	r25, 0x2C75
    135e:	28 17       	cp	r18, r24
    1360:	39 07       	cpc	r19, r25
    1362:	f1 f4       	brne	.+60     	; 0x13a0 <ir_receive+0x3ac>
    1364:	80 e3       	ldi	r24, 0x30	; 48
    1366:	8c 9f       	mul	r24, r28
    1368:	f0 01       	movw	r30, r0
    136a:	8d 9f       	mul	r24, r29
    136c:	f0 0d       	add	r31, r0
    136e:	11 24       	eor	r1, r1
    1370:	e6 58       	subi	r30, 0x86	; 134
    1372:	f1 4d       	sbci	r31, 0xD1	; 209
    1374:	14 a2       	std	Z+36, r1	; 0x24
    1376:	15 a2       	std	Z+37, r1	; 0x25
    1378:	16 a2       	std	Z+38, r1	; 0x26
    137a:	17 a2       	std	Z+39, r1	; 0x27
    137c:	10 a6       	std	Z+40, r1	; 0x28
    137e:	11 a6       	std	Z+41, r1	; 0x29
    1380:	12 a6       	std	Z+42, r1	; 0x2a
    1382:	13 a6       	std	Z+43, r1	; 0x2b
    1384:	14 a6       	std	Z+44, r1	; 0x2c
    1386:	15 a6       	std	Z+45, r1	; 0x2d
    1388:	16 a6       	std	Z+46, r1	; 0x2e
    138a:	17 a6       	std	Z+47, r1	; 0x2f
    138c:	cc 0f       	add	r28, r28
    138e:	dd 1f       	adc	r29, r29
    1390:	ca 5f       	subi	r28, 0xFA	; 250
    1392:	df 4d       	sbci	r29, 0xDF	; 223
    1394:	e8 81       	ld	r30, Y
    1396:	f9 81       	ldd	r31, Y+1	; 0x01
    1398:	84 81       	ldd	r24, Z+4	; 0x04
    139a:	80 61       	ori	r24, 0x10	; 16
    139c:	84 83       	std	Z+4, r24	; 0x04
    139e:	88 c0       	rjmp	.+272    	; 0x14b0 <ir_receive+0x4bc>
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	8c 9f       	mul	r24, r28
    13a4:	f0 01       	movw	r30, r0
    13a6:	8d 9f       	mul	r24, r29
    13a8:	f0 0d       	add	r31, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	e6 58       	subi	r30, 0x86	; 134
    13ae:	f1 4d       	sbci	r31, 0xD1	; 209
    13b0:	87 a5       	ldd	r24, Z+47	; 0x2f
    13b2:	83 ff       	sbrs	r24, 3
    13b4:	66 c0       	rjmp	.+204    	; 0x1482 <ir_receive+0x48e>
    13b6:	ff b6       	in	r15, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	80 e3       	ldi	r24, 0x30	; 48
    13bc:	8c 9f       	mul	r24, r28
    13be:	b0 01       	movw	r22, r0
    13c0:	8d 9f       	mul	r24, r29
    13c2:	70 0d       	add	r23, r0
    13c4:	11 24       	eor	r1, r1
    13c6:	8b 01       	movw	r16, r22
    13c8:	06 58       	subi	r16, 0x86	; 134
    13ca:	11 4d       	sbci	r17, 0xD1	; 209
    13cc:	d8 01       	movw	r26, r16
    13ce:	9e 96       	adiw	r26, 0x2e	; 46
    13d0:	4c 91       	ld	r20, X
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	62 58       	subi	r22, 0x82	; 130
    13d6:	71 4d       	sbci	r23, 0xD1	; 209
    13d8:	88 ed       	ldi	r24, 0xD8	; 216
    13da:	9f e2       	ldi	r25, 0x2F	; 47
    13dc:	0e 94 d4 40 	call	0x81a8	; 0x81a8 <memcpy>
    13e0:	d8 01       	movw	r26, r16
    13e2:	9e 96       	adiw	r26, 0x2e	; 46
    13e4:	ec 91       	ld	r30, X
    13e6:	9e 97       	sbiw	r26, 0x2e	; 46
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	e8 52       	subi	r30, 0x28	; 40
    13ec:	f0 4d       	sbci	r31, 0xD0	; 208
    13ee:	10 82       	st	Z, r1
    13f0:	9e 96       	adiw	r26, 0x2e	; 46
    13f2:	8c 91       	ld	r24, X
    13f4:	9e 97       	sbiw	r26, 0x2e	; 46
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	80 93 d5 2f 	sts	0x2FD5, r24
    13fc:	90 93 d6 2f 	sts	0x2FD6, r25
    1400:	4d 91       	ld	r20, X+
    1402:	5d 91       	ld	r21, X+
    1404:	6d 91       	ld	r22, X+
    1406:	7c 91       	ld	r23, X
    1408:	13 97       	sbiw	r26, 0x03	; 3
    140a:	40 93 cb 2f 	sts	0x2FCB, r20
    140e:	50 93 cc 2f 	sts	0x2FCC, r21
    1412:	60 93 cd 2f 	sts	0x2FCD, r22
    1416:	70 93 ce 2f 	sts	0x2FCE, r23
    141a:	96 96       	adiw	r26, 0x26	; 38
    141c:	8d 91       	ld	r24, X+
    141e:	9c 91       	ld	r25, X
    1420:	97 97       	sbiw	r26, 0x27	; 39
    1422:	80 93 d9 2d 	sts	0x2DD9, r24
    1426:	90 93 da 2d 	sts	0x2DDA, r25
    142a:	ff be       	out	0x3f, r15	; 63
    142c:	a6 e0       	ldi	r26, 0x06	; 6
    142e:	b0 e2       	ldi	r27, 0x20	; 32
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	30 e3       	ldi	r19, 0x30	; 48
    1436:	38 9f       	mul	r19, r24
    1438:	f0 01       	movw	r30, r0
    143a:	39 9f       	mul	r19, r25
    143c:	f0 0d       	add	r31, r0
    143e:	11 24       	eor	r1, r1
    1440:	e6 58       	subi	r30, 0x86	; 134
    1442:	f1 4d       	sbci	r31, 0xD1	; 209
    1444:	14 a2       	std	Z+36, r1	; 0x24
    1446:	15 a2       	std	Z+37, r1	; 0x25
    1448:	16 a2       	std	Z+38, r1	; 0x26
    144a:	17 a2       	std	Z+39, r1	; 0x27
    144c:	10 a6       	std	Z+40, r1	; 0x28
    144e:	11 a6       	std	Z+41, r1	; 0x29
    1450:	12 a6       	std	Z+42, r1	; 0x2a
    1452:	13 a6       	std	Z+43, r1	; 0x2b
    1454:	14 a6       	std	Z+44, r1	; 0x2c
    1456:	15 a6       	std	Z+45, r1	; 0x2d
    1458:	16 a6       	std	Z+46, r1	; 0x2e
    145a:	17 a6       	std	Z+47, r1	; 0x2f
    145c:	ed 91       	ld	r30, X+
    145e:	fd 91       	ld	r31, X+
    1460:	24 81       	ldd	r18, Z+4	; 0x04
    1462:	20 61       	ori	r18, 0x10	; 16
    1464:	24 83       	std	Z+4, r18	; 0x04
    1466:	01 96       	adiw	r24, 0x01	; 1
    1468:	86 30       	cpi	r24, 0x06	; 6
    146a:	91 05       	cpc	r25, r1
    146c:	21 f7       	brne	.-56     	; 0x1436 <ir_receive+0x442>
    146e:	20 e0       	ldi	r18, 0x00	; 0
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	4d e1       	ldi	r20, 0x1D	; 29
    1474:	56 e0       	ldi	r21, 0x06	; 6
    1476:	6e e3       	ldi	r22, 0x3E	; 62
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <schedule_task>
    1482:	80 e3       	ldi	r24, 0x30	; 48
    1484:	8c 9f       	mul	r24, r28
    1486:	f0 01       	movw	r30, r0
    1488:	8d 9f       	mul	r24, r29
    148a:	f0 0d       	add	r31, r0
    148c:	11 24       	eor	r1, r1
    148e:	e6 58       	subi	r30, 0x86	; 134
    1490:	f1 4d       	sbci	r31, 0xD1	; 209
    1492:	87 a5       	ldd	r24, Z+47	; 0x2f
    1494:	82 60       	ori	r24, 0x02	; 2
    1496:	87 a7       	std	Z+47, r24	; 0x2f
    1498:	87 a5       	ldd	r24, Z+47	; 0x2f
    149a:	81 60       	ori	r24, 0x01	; 1
    149c:	87 a7       	std	Z+47, r24	; 0x2f
    149e:	cc 0f       	add	r28, r28
    14a0:	dd 1f       	adc	r29, r29
    14a2:	ca 5f       	subi	r28, 0xFA	; 250
    14a4:	df 4d       	sbci	r29, 0xDF	; 223
    14a6:	e8 81       	ld	r30, Y
    14a8:	f9 81       	ldd	r31, Y+1	; 0x01
    14aa:	84 81       	ldd	r24, Z+4	; 0x04
    14ac:	8f 7e       	andi	r24, 0xEF	; 239
    14ae:	84 83       	std	Z+4, r24	; 0x04
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	ff 90       	pop	r15
    14ba:	df 90       	pop	r13
    14bc:	cf 90       	pop	r12
    14be:	bf 90       	pop	r11
    14c0:	af 90       	pop	r10
    14c2:	08 95       	ret

000014c4 <ir_transmit>:
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	90 e3       	ldi	r25, 0x30	; 48
    14ca:	89 9f       	mul	r24, r25
    14cc:	f0 01       	movw	r30, r0
    14ce:	11 24       	eor	r1, r1
    14d0:	e6 58       	subi	r30, 0x86	; 134
    14d2:	f1 4d       	sbci	r31, 0xD1	; 209
    14d4:	82 a5       	ldd	r24, Z+42	; 0x2a
    14d6:	93 a5       	ldd	r25, Z+43	; 0x2b
    14d8:	87 30       	cpi	r24, 0x07	; 7
    14da:	91 05       	cpc	r25, r1
    14dc:	08 f0       	brcs	.+2      	; 0x14e0 <ir_transmit+0x1c>
    14de:	67 c0       	rjmp	.+206    	; 0x15ae <ir_transmit+0xea>
    14e0:	fc 01       	movw	r30, r24
    14e2:	e4 5f       	subi	r30, 0xF4	; 244
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	0c 94 99 3e 	jmp	0x7d32	; 0x7d32 <__tablejump2__>
    14ea:	80 e3       	ldi	r24, 0x30	; 48
    14ec:	82 9f       	mul	r24, r18
    14ee:	f0 01       	movw	r30, r0
    14f0:	83 9f       	mul	r24, r19
    14f2:	f0 0d       	add	r31, r0
    14f4:	11 24       	eor	r1, r1
    14f6:	e6 58       	subi	r30, 0x86	; 134
    14f8:	f1 4d       	sbci	r31, 0xD1	; 209
    14fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    14fc:	80 93 d7 2f 	sts	0x2FD7, r24
    1500:	87 a5       	ldd	r24, Z+47	; 0x2f
    1502:	83 ff       	sbrs	r24, 3
    1504:	64 c0       	rjmp	.+200    	; 0x15ce <ir_transmit+0x10a>
    1506:	80 91 d7 2f 	lds	r24, 0x2FD7
    150a:	80 68       	ori	r24, 0x80	; 128
    150c:	80 93 d7 2f 	sts	0x2FD7, r24
    1510:	5e c0       	rjmp	.+188    	; 0x15ce <ir_transmit+0x10a>
    1512:	80 e3       	ldi	r24, 0x30	; 48
    1514:	82 9f       	mul	r24, r18
    1516:	f0 01       	movw	r30, r0
    1518:	83 9f       	mul	r24, r19
    151a:	f0 0d       	add	r31, r0
    151c:	11 24       	eor	r1, r1
    151e:	e6 58       	subi	r30, 0x86	; 134
    1520:	f1 4d       	sbci	r31, 0xD1	; 209
    1522:	84 a1       	ldd	r24, Z+36	; 0x24
    1524:	95 a1       	ldd	r25, Z+37	; 0x25
    1526:	80 93 d7 2f 	sts	0x2FD7, r24
    152a:	51 c0       	rjmp	.+162    	; 0x15ce <ir_transmit+0x10a>
    152c:	80 e3       	ldi	r24, 0x30	; 48
    152e:	82 9f       	mul	r24, r18
    1530:	f0 01       	movw	r30, r0
    1532:	83 9f       	mul	r24, r19
    1534:	f0 0d       	add	r31, r0
    1536:	11 24       	eor	r1, r1
    1538:	e6 58       	subi	r30, 0x86	; 134
    153a:	f1 4d       	sbci	r31, 0xD1	; 209
    153c:	84 a1       	ldd	r24, Z+36	; 0x24
    153e:	95 a1       	ldd	r25, Z+37	; 0x25
    1540:	90 93 d7 2f 	sts	0x2FD7, r25
    1544:	44 c0       	rjmp	.+136    	; 0x15ce <ir_transmit+0x10a>
    1546:	80 e3       	ldi	r24, 0x30	; 48
    1548:	82 9f       	mul	r24, r18
    154a:	f0 01       	movw	r30, r0
    154c:	83 9f       	mul	r24, r19
    154e:	f0 0d       	add	r31, r0
    1550:	11 24       	eor	r1, r1
    1552:	e6 58       	subi	r30, 0x86	; 134
    1554:	f1 4d       	sbci	r31, 0xD1	; 209
    1556:	86 a1       	ldd	r24, Z+38	; 0x26
    1558:	97 a1       	ldd	r25, Z+39	; 0x27
    155a:	80 93 d7 2f 	sts	0x2FD7, r24
    155e:	37 c0       	rjmp	.+110    	; 0x15ce <ir_transmit+0x10a>
    1560:	80 e3       	ldi	r24, 0x30	; 48
    1562:	82 9f       	mul	r24, r18
    1564:	f0 01       	movw	r30, r0
    1566:	83 9f       	mul	r24, r19
    1568:	f0 0d       	add	r31, r0
    156a:	11 24       	eor	r1, r1
    156c:	e6 58       	subi	r30, 0x86	; 134
    156e:	f1 4d       	sbci	r31, 0xD1	; 209
    1570:	86 a1       	ldd	r24, Z+38	; 0x26
    1572:	97 a1       	ldd	r25, Z+39	; 0x27
    1574:	90 93 d7 2f 	sts	0x2FD7, r25
    1578:	2a c0       	rjmp	.+84     	; 0x15ce <ir_transmit+0x10a>
    157a:	80 e3       	ldi	r24, 0x30	; 48
    157c:	82 9f       	mul	r24, r18
    157e:	f0 01       	movw	r30, r0
    1580:	83 9f       	mul	r24, r19
    1582:	f0 0d       	add	r31, r0
    1584:	11 24       	eor	r1, r1
    1586:	e6 58       	subi	r30, 0x86	; 134
    1588:	f1 4d       	sbci	r31, 0xD1	; 209
    158a:	80 a5       	ldd	r24, Z+40	; 0x28
    158c:	91 a5       	ldd	r25, Z+41	; 0x29
    158e:	80 93 d7 2f 	sts	0x2FD7, r24
    1592:	1d c0       	rjmp	.+58     	; 0x15ce <ir_transmit+0x10a>
    1594:	80 e3       	ldi	r24, 0x30	; 48
    1596:	82 9f       	mul	r24, r18
    1598:	f0 01       	movw	r30, r0
    159a:	83 9f       	mul	r24, r19
    159c:	f0 0d       	add	r31, r0
    159e:	11 24       	eor	r1, r1
    15a0:	e6 58       	subi	r30, 0x86	; 134
    15a2:	f1 4d       	sbci	r31, 0xD1	; 209
    15a4:	80 a5       	ldd	r24, Z+40	; 0x28
    15a6:	91 a5       	ldd	r25, Z+41	; 0x29
    15a8:	90 93 d7 2f 	sts	0x2FD7, r25
    15ac:	10 c0       	rjmp	.+32     	; 0x15ce <ir_transmit+0x10a>
    15ae:	80 e3       	ldi	r24, 0x30	; 48
    15b0:	82 9f       	mul	r24, r18
    15b2:	f0 01       	movw	r30, r0
    15b4:	83 9f       	mul	r24, r19
    15b6:	f0 0d       	add	r31, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	e6 58       	subi	r30, 0x86	; 134
    15bc:	f1 4d       	sbci	r31, 0xD1	; 209
    15be:	82 a5       	ldd	r24, Z+42	; 0x2a
    15c0:	93 a5       	ldd	r25, Z+43	; 0x2b
    15c2:	07 97       	sbiw	r24, 0x07	; 7
    15c4:	e8 0f       	add	r30, r24
    15c6:	f9 1f       	adc	r31, r25
    15c8:	84 81       	ldd	r24, Z+4	; 0x04
    15ca:	80 93 d7 2f 	sts	0x2FD7, r24
    15ce:	f9 01       	movw	r30, r18
    15d0:	ee 0f       	add	r30, r30
    15d2:	ff 1f       	adc	r31, r31
    15d4:	ea 5f       	subi	r30, 0xFA	; 250
    15d6:	ff 4d       	sbci	r31, 0xDF	; 223
    15d8:	01 90       	ld	r0, Z+
    15da:	f0 81       	ld	r31, Z
    15dc:	e0 2d       	mov	r30, r0
    15de:	80 91 d7 2f 	lds	r24, 0x2FD7
    15e2:	80 83       	st	Z, r24
    15e4:	80 e3       	ldi	r24, 0x30	; 48
    15e6:	82 9f       	mul	r24, r18
    15e8:	f0 01       	movw	r30, r0
    15ea:	83 9f       	mul	r24, r19
    15ec:	f0 0d       	add	r31, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	e6 58       	subi	r30, 0x86	; 134
    15f2:	f1 4d       	sbci	r31, 0xD1	; 209
    15f4:	82 a5       	ldd	r24, Z+42	; 0x2a
    15f6:	93 a5       	ldd	r25, Z+43	; 0x2b
    15f8:	01 96       	adiw	r24, 0x01	; 1
    15fa:	82 a7       	std	Z+42, r24	; 0x2a
    15fc:	93 a7       	std	Z+43, r25	; 0x2b
    15fe:	42 a5       	ldd	r20, Z+42	; 0x2a
    1600:	53 a5       	ldd	r21, Z+43	; 0x2b
    1602:	86 a5       	ldd	r24, Z+46	; 0x2e
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	07 96       	adiw	r24, 0x07	; 7
    1608:	48 17       	cp	r20, r24
    160a:	59 07       	cpc	r21, r25
    160c:	38 f1       	brcs	.+78     	; 0x165c <ir_transmit+0x198>
    160e:	80 e3       	ldi	r24, 0x30	; 48
    1610:	82 9f       	mul	r24, r18
    1612:	f0 01       	movw	r30, r0
    1614:	83 9f       	mul	r24, r19
    1616:	f0 0d       	add	r31, r0
    1618:	11 24       	eor	r1, r1
    161a:	e6 58       	subi	r30, 0x86	; 134
    161c:	f1 4d       	sbci	r31, 0xD1	; 209
    161e:	14 a2       	std	Z+36, r1	; 0x24
    1620:	15 a2       	std	Z+37, r1	; 0x25
    1622:	16 a2       	std	Z+38, r1	; 0x26
    1624:	17 a2       	std	Z+39, r1	; 0x27
    1626:	10 a6       	std	Z+40, r1	; 0x28
    1628:	11 a6       	std	Z+41, r1	; 0x29
    162a:	12 a6       	std	Z+42, r1	; 0x2a
    162c:	13 a6       	std	Z+43, r1	; 0x2b
    162e:	14 a6       	std	Z+44, r1	; 0x2c
    1630:	15 a6       	std	Z+45, r1	; 0x2d
    1632:	16 a6       	std	Z+46, r1	; 0x2e
    1634:	17 a6       	std	Z+47, r1	; 0x2f
    1636:	f9 01       	movw	r30, r18
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	ea 5f       	subi	r30, 0xFA	; 250
    163e:	ff 4d       	sbci	r31, 0xDF	; 223
    1640:	a0 81       	ld	r26, Z
    1642:	b1 81       	ldd	r27, Z+1	; 0x01
    1644:	14 96       	adiw	r26, 0x04	; 4
    1646:	8c 91       	ld	r24, X
    1648:	14 97       	sbiw	r26, 0x04	; 4
    164a:	80 61       	ori	r24, 0x10	; 16
    164c:	14 96       	adiw	r26, 0x04	; 4
    164e:	8c 93       	st	X, r24
    1650:	01 90       	ld	r0, Z+
    1652:	f0 81       	ld	r31, Z
    1654:	e0 2d       	mov	r30, r0
    1656:	83 81       	ldd	r24, Z+3	; 0x03
    1658:	8c 7f       	andi	r24, 0xFC	; 252
    165a:	83 83       	std	Z+3, r24	; 0x03
    165c:	08 95       	ret

0000165e <ir_transmit_complete>:
    165e:	e0 e0       	ldi	r30, 0x00	; 0
    1660:	fb e0       	ldi	r31, 0x0B	; 11
    1662:	31 81       	ldd	r19, Z+1	; 0x01
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	dc 01       	movw	r26, r24
    1668:	a0 50       	subi	r26, 0x00	; 0
    166a:	b0 4e       	sbci	r27, 0xE0	; 224
    166c:	2c 91       	ld	r18, X
    166e:	20 95       	com	r18
    1670:	23 23       	and	r18, r19
    1672:	21 83       	std	Z+1, r18	; 0x01
    1674:	20 e3       	ldi	r18, 0x30	; 48
    1676:	28 9f       	mul	r18, r24
    1678:	f0 01       	movw	r30, r0
    167a:	29 9f       	mul	r18, r25
    167c:	f0 0d       	add	r31, r0
    167e:	11 24       	eor	r1, r1
    1680:	e6 58       	subi	r30, 0x86	; 134
    1682:	f1 4d       	sbci	r31, 0xD1	; 209
    1684:	17 a6       	std	Z+47, r1	; 0x2f
    1686:	16 a6       	std	Z+46, r1	; 0x2e
    1688:	12 a6       	std	Z+42, r1	; 0x2a
    168a:	13 a6       	std	Z+43, r1	; 0x2b
    168c:	10 a6       	std	Z+40, r1	; 0x28
    168e:	11 a6       	std	Z+41, r1	; 0x29
    1690:	16 a2       	std	Z+38, r1	; 0x26
    1692:	17 a2       	std	Z+39, r1	; 0x27
    1694:	fc 01       	movw	r30, r24
    1696:	ee 0f       	add	r30, r30
    1698:	ff 1f       	adc	r31, r31
    169a:	ea 5f       	subi	r30, 0xFA	; 250
    169c:	ff 4d       	sbci	r31, 0xDF	; 223
    169e:	a0 81       	ld	r26, Z
    16a0:	b1 81       	ldd	r27, Z+1	; 0x01
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	8c 91       	ld	r24, X
    16a6:	11 97       	sbiw	r26, 0x01	; 1
    16a8:	80 64       	ori	r24, 0x40	; 64
    16aa:	11 96       	adiw	r26, 0x01	; 1
    16ac:	8c 93       	st	X, r24
    16ae:	01 90       	ld	r0, Z+
    16b0:	f0 81       	ld	r31, Z
    16b2:	e0 2d       	mov	r30, r0
    16b4:	84 81       	ldd	r24, Z+4	; 0x04
    16b6:	80 61       	ori	r24, 0x10	; 16
    16b8:	84 83       	std	Z+4, r24	; 0x04
    16ba:	08 95       	ret

000016bc <wait_for_ir>:
}

void wait_for_ir(uint8_t dirs)
{
    16bc:	7f 92       	push	r7
    16be:	8f 92       	push	r8
    16c0:	9f 92       	push	r9
    16c2:	af 92       	push	r10
    16c4:	bf 92       	push	r11
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	c8 2f       	mov	r28, r24
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    16d8:	e0 e4       	ldi	r30, 0x40	; 64
    16da:	fa e0       	ldi	r31, 0x0A	; 10
    16dc:	02 ad       	ldd	r16, Z+58	; 0x3a
    16de:	13 ad       	ldd	r17, Z+59	; 0x3b
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    16e0:	e0 ac       	ldd	r14, Z+56	; 0x38
    16e2:	f1 ac       	ldd	r15, Z+57	; 0x39
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    16e4:	e0 e4       	ldi	r30, 0x40	; 64
    16e6:	f9 e0       	ldi	r31, 0x09	; 9
    16e8:	c0 ac       	ldd	r12, Z+56	; 0x38
    16ea:	d1 ac       	ldd	r13, Z+57	; 0x39
	uint8_t r = get_red_led();
	uint8_t g = get_green_led();
	uint8_t b = get_blue_led();
	set_rgb(255, 0, 255);
    16ec:	4f ef       	ldi	r20, 0xFF	; 255
    16ee:	60 e0       	ldi	r22, 0x00	; 0
    16f0:	8f ef       	ldi	r24, 0xFF	; 255
    16f2:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
		{
			if(dirs&(1<<dir))
    16f6:	d0 e0       	ldi	r29, 0x00	; 0
			{
				if(ir_rxtx[dir].status & IR_STATUS_UNAVAILABLE_bm)
    16f8:	0f 2e       	mov	r0, r31
    16fa:	f0 e3       	ldi	r31, 0x30	; 48
    16fc:	7f 2e       	mov	r7, r31
    16fe:	f0 2d       	mov	r31, r0
{
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
}

void wait_for_ir(uint8_t dirs)
{
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
		{
			if(dirs&(1<<dir))
    1704:	9e 01       	movw	r18, r28
    1706:	08 2e       	mov	r0, r24
    1708:	02 c0       	rjmp	.+4      	; 0x170e <wait_for_ir+0x52>
    170a:	35 95       	asr	r19
    170c:	27 95       	ror	r18
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <wait_for_ir+0x4e>
    1712:	20 ff       	sbrs	r18, 0
    1714:	0a c0       	rjmp	.+20     	; 0x172a <wait_for_ir+0x6e>
			{
				if(ir_rxtx[dir].status & IR_STATUS_UNAVAILABLE_bm)
    1716:	78 9e       	mul	r7, r24
    1718:	f0 01       	movw	r30, r0
    171a:	79 9e       	mul	r7, r25
    171c:	f0 0d       	add	r31, r0
    171e:	11 24       	eor	r1, r1
    1720:	e6 58       	subi	r30, 0x86	; 134
    1722:	f1 4d       	sbci	r31, 0xD1	; 209
    1724:	27 a5       	ldd	r18, Z+47	; 0x2f
    1726:	23 70       	andi	r18, 0x03	; 3
    1728:	41 f4       	brne	.+16     	; 0x173a <wait_for_ir+0x7e>
    172a:	01 96       	adiw	r24, 0x01	; 1
	set_rgb(255, 0, 255);
	uint8_t busy;
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
    172c:	86 30       	cpi	r24, 0x06	; 6
    172e:	91 05       	cpc	r25, r1
    1730:	49 f7       	brne	.-46     	; 0x1704 <wait_for_ir+0x48>
    1732:	19 c0       	rjmp	.+50     	; 0x1766 <wait_for_ir+0xaa>
					break;
				}
			}
		}
		delay_us(100);
		if(busy&&task_list_check()) task_list_cleanup(); //if the scheduled time for the current task is past and we're busy, perform task list cleanup
    1734:	0e 94 44 26 	call	0x4c88	; 0x4c88 <task_list_cleanup>
    1738:	e3 cf       	rjmp	.-58     	; 0x1700 <wait_for_ir+0x44>
    173a:	8f e1       	ldi	r24, 0x1F	; 31
    173c:	93 e0       	ldi	r25, 0x03	; 3
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <wait_for_ir+0x82>
    1742:	00 c0       	rjmp	.+0      	; 0x1744 <wait_for_ir+0x88>
    1744:	00 00       	nop
void scheduler_init();
void Config32MHzClock(void);
void delay_ms(uint16_t ms);
static inline void delay_us(double __us){ _delay_us(__us); }
//Returns '1' if the next task to run is scheduled for the past. If this occurs, call task_list_cleanup.
inline uint8_t task_list_check(){ return task_list->scheduled_time < get_time(); }
    1746:	e0 91 d3 2f 	lds	r30, 0x2FD3
    174a:	f0 91 d4 2f 	lds	r31, 0x2FD4
    174e:	80 80       	ld	r8, Z
    1750:	91 80       	ldd	r9, Z+1	; 0x01
    1752:	a2 80       	ldd	r10, Z+2	; 0x02
    1754:	b3 80       	ldd	r11, Z+3	; 0x03
    1756:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    175a:	86 16       	cp	r8, r22
    175c:	97 06       	cpc	r9, r23
    175e:	a8 06       	cpc	r10, r24
    1760:	b9 06       	cpc	r11, r25
    1762:	70 f6       	brcc	.-100    	; 0x1700 <wait_for_ir+0x44>
    1764:	e7 cf       	rjmp	.-50     	; 0x1734 <wait_for_ir+0x78>
    1766:	8f e1       	ldi	r24, 0x1F	; 31
    1768:	93 e0       	ldi	r25, 0x03	; 3
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <wait_for_ir+0xae>
    176e:	00 c0       	rjmp	.+0      	; 0x1770 <wait_for_ir+0xb4>
    1770:	00 00       	nop
	} while (busy);
	set_rgb(r, g, b);
    1772:	4c 2d       	mov	r20, r12
    1774:	6e 2d       	mov	r22, r14
    1776:	80 2f       	mov	r24, r16
    1778:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
}
    177c:	df 91       	pop	r29
    177e:	cf 91       	pop	r28
    1780:	1f 91       	pop	r17
    1782:	0f 91       	pop	r16
    1784:	ff 90       	pop	r15
    1786:	ef 90       	pop	r14
    1788:	df 90       	pop	r13
    178a:	cf 90       	pop	r12
    178c:	bf 90       	pop	r11
    178e:	af 90       	pop	r10
    1790:	9f 90       	pop	r9
    1792:	8f 90       	pop	r8
    1794:	7f 90       	pop	r7
    1796:	08 95       	ret

00001798 <ir_targeted_cmd>:
}
#endif


void ir_targeted_cmd(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    1798:	cf 92       	push	r12
    179a:	df 92       	push	r13
    179c:	ef 92       	push	r14
    179e:	ff 92       	push	r15
    17a0:	0f 93       	push	r16
    17a2:	1f 93       	push	r17
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	d8 2e       	mov	r13, r24
    17aa:	7b 01       	movw	r14, r22
    17ac:	c4 2e       	mov	r12, r20
    17ae:	89 01       	movw	r16, r18
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
    17b0:	85 df       	rcall	.-246    	; 0x16bc <wait_for_ir>
    17b2:	a6 e0       	ldi	r26, 0x06	; 6
    17b4:	b0 e2       	ldi	r27, 0x20	; 32
    17b6:	e0 e0       	ldi	r30, 0x00	; 0
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    17ba:	2d 2d       	mov	r18, r13
    17bc:	30 e0       	ldi	r19, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    17be:	40 e3       	ldi	r20, 0x30	; 48
    17c0:	91 e0       	ldi	r25, 0x01	; 1
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    17c2:	e9 01       	movw	r28, r18
    17c4:	0e 2e       	mov	r0, r30
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <ir_targeted_cmd+0x34>
    17c8:	d5 95       	asr	r29
    17ca:	c7 95       	ror	r28
    17cc:	0a 94       	dec	r0
    17ce:	e2 f7       	brpl	.-8      	; 0x17c8 <ir_targeted_cmd+0x30>
    17d0:	c0 ff       	sbrs	r28, 0
    17d2:	13 c0       	rjmp	.+38     	; 0x17fa <ir_targeted_cmd+0x62>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    17d4:	cd 91       	ld	r28, X+
    17d6:	dc 91       	ld	r29, X
    17d8:	11 97       	sbiw	r26, 0x01	; 1
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	8f 7e       	andi	r24, 0xEF	; 239
    17de:	8c 83       	std	Y+4, r24	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    17e0:	4e 9f       	mul	r20, r30
    17e2:	e0 01       	movw	r28, r0
    17e4:	4f 9f       	mul	r20, r31
    17e6:	d0 0d       	add	r29, r0
    17e8:	11 24       	eor	r1, r1
    17ea:	c6 58       	subi	r28, 0x86	; 134
    17ec:	d1 4d       	sbci	r29, 0xD1	; 209
    17ee:	9f a7       	std	Y+47, r25	; 0x2f
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    17f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f2:	88 60       	ori	r24, 0x08	; 8
    17f4:	8f a7       	std	Y+47, r24	; 0x2f
			ir_rxtx[dir].target_ID=target;
    17f6:	08 a7       	std	Y+40, r16	; 0x28
    17f8:	19 a7       	std	Y+41, r17	; 0x29
    17fa:	31 96       	adiw	r30, 0x01	; 1
    17fc:	12 96       	adiw	r26, 0x02	; 2
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    17fe:	e6 30       	cpi	r30, 0x06	; 6
    1800:	f1 05       	cpc	r31, r1
    1802:	f9 f6       	brne	.-66     	; 0x17c2 <ir_targeted_cmd+0x2a>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    1804:	4c 2d       	mov	r20, r12
    1806:	b7 01       	movw	r22, r14
    1808:	8d 2d       	mov	r24, r13
    180a:	f9 da       	rcall	.-2574   	; 0xdfe <send_msg>


void ir_targeted_cmd(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
	all_ir_sends(dirs, data, data_length, target, 1);
}
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	ff 90       	pop	r15
    1816:	ef 90       	pop	r14
    1818:	df 90       	pop	r13
    181a:	cf 90       	pop	r12
    181c:	08 95       	ret

0000181e <ir_cmd>:

void ir_cmd(uint8_t dirs, char *data, uint16_t data_length)
{	
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	cf 93       	push	r28
    1824:	df 93       	push	r29
    1826:	18 2f       	mov	r17, r24
    1828:	eb 01       	movw	r28, r22
    182a:	04 2f       	mov	r16, r20
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
    182c:	47 df       	rcall	.-370    	; 0x16bc <wait_for_ir>
    182e:	e6 e0       	ldi	r30, 0x06	; 6
    1830:	f0 e2       	ldi	r31, 0x20	; 32
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1836:	61 2f       	mov	r22, r17
    1838:	70 e0       	ldi	r23, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    183a:	40 e3       	ldi	r20, 0x30	; 48
    183c:	91 e0       	ldi	r25, 0x01	; 1
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    183e:	db 01       	movw	r26, r22
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <ir_cmd+0x2a>
    1844:	b5 95       	asr	r27
    1846:	a7 95       	ror	r26
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <ir_cmd+0x26>
    184c:	a0 ff       	sbrs	r26, 0
    184e:	1d c0       	rjmp	.+58     	; 0x188a <ir_cmd+0x6c>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    1850:	a0 81       	ld	r26, Z
    1852:	b1 81       	ldd	r27, Z+1	; 0x01
    1854:	14 96       	adiw	r26, 0x04	; 4
    1856:	8c 91       	ld	r24, X
    1858:	14 97       	sbiw	r26, 0x04	; 4
    185a:	8f 7e       	andi	r24, 0xEF	; 239
    185c:	14 96       	adiw	r26, 0x04	; 4
    185e:	8c 93       	st	X, r24
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    1860:	42 9f       	mul	r20, r18
    1862:	d0 01       	movw	r26, r0
    1864:	43 9f       	mul	r20, r19
    1866:	b0 0d       	add	r27, r0
    1868:	11 24       	eor	r1, r1
    186a:	a6 58       	subi	r26, 0x86	; 134
    186c:	b1 4d       	sbci	r27, 0xD1	; 209
    186e:	9f 96       	adiw	r26, 0x2f	; 47
    1870:	9c 93       	st	X, r25
    1872:	9f 97       	sbiw	r26, 0x2f	; 47
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    1874:	9f 96       	adiw	r26, 0x2f	; 47
    1876:	8c 91       	ld	r24, X
    1878:	9f 97       	sbiw	r26, 0x2f	; 47
    187a:	88 60       	ori	r24, 0x08	; 8
    187c:	9f 96       	adiw	r26, 0x2f	; 47
    187e:	8c 93       	st	X, r24
    1880:	9f 97       	sbiw	r26, 0x2f	; 47
			ir_rxtx[dir].target_ID=target;
    1882:	98 96       	adiw	r26, 0x28	; 40
    1884:	1d 92       	st	X+, r1
    1886:	1c 92       	st	X, r1
    1888:	99 97       	sbiw	r26, 0x29	; 41
    188a:	2f 5f       	subi	r18, 0xFF	; 255
    188c:	3f 4f       	sbci	r19, 0xFF	; 255
    188e:	32 96       	adiw	r30, 0x02	; 2
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    1890:	26 30       	cpi	r18, 0x06	; 6
    1892:	31 05       	cpc	r19, r1
    1894:	a1 f6       	brne	.-88     	; 0x183e <ir_cmd+0x20>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    1896:	40 2f       	mov	r20, r16
    1898:	be 01       	movw	r22, r28
    189a:	81 2f       	mov	r24, r17
    189c:	b0 da       	rcall	.-2720   	; 0xdfe <send_msg>
}

void ir_cmd(uint8_t dirs, char *data, uint16_t data_length)
{	
	all_ir_sends(dirs, data, data_length, 0, 1);
}
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	1f 91       	pop	r17
    18a4:	0f 91       	pop	r16
    18a6:	08 95       	ret

000018a8 <ir_targeted_send>:

void ir_targeted_send(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    18a8:	cf 92       	push	r12
    18aa:	df 92       	push	r13
    18ac:	ef 92       	push	r14
    18ae:	ff 92       	push	r15
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	d8 2e       	mov	r13, r24
    18ba:	7b 01       	movw	r14, r22
    18bc:	c4 2e       	mov	r12, r20
    18be:	89 01       	movw	r16, r18
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
    18c0:	fd de       	rcall	.-518    	; 0x16bc <wait_for_ir>
    18c2:	a6 e0       	ldi	r26, 0x06	; 6
    18c4:	b0 e2       	ldi	r27, 0x20	; 32
    18c6:	e0 e0       	ldi	r30, 0x00	; 0
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    18ca:	2d 2d       	mov	r18, r13
    18cc:	30 e0       	ldi	r19, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    18ce:	40 e3       	ldi	r20, 0x30	; 48
    18d0:	91 e0       	ldi	r25, 0x01	; 1
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    18d2:	e9 01       	movw	r28, r18
    18d4:	0e 2e       	mov	r0, r30
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <ir_targeted_send+0x34>
    18d8:	d5 95       	asr	r29
    18da:	c7 95       	ror	r28
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <ir_targeted_send+0x30>
    18e0:	c0 ff       	sbrs	r28, 0
    18e2:	10 c0       	rjmp	.+32     	; 0x1904 <ir_targeted_send+0x5c>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    18e4:	cd 91       	ld	r28, X+
    18e6:	dc 91       	ld	r29, X
    18e8:	11 97       	sbiw	r26, 0x01	; 1
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	8f 7e       	andi	r24, 0xEF	; 239
    18ee:	8c 83       	std	Y+4, r24	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    18f0:	4e 9f       	mul	r20, r30
    18f2:	e0 01       	movw	r28, r0
    18f4:	4f 9f       	mul	r20, r31
    18f6:	d0 0d       	add	r29, r0
    18f8:	11 24       	eor	r1, r1
    18fa:	c6 58       	subi	r28, 0x86	; 134
    18fc:	d1 4d       	sbci	r29, 0xD1	; 209
    18fe:	9f a7       	std	Y+47, r25	; 0x2f
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    1900:	08 a7       	std	Y+40, r16	; 0x28
    1902:	19 a7       	std	Y+41, r17	; 0x29
    1904:	31 96       	adiw	r30, 0x01	; 1
    1906:	12 96       	adiw	r26, 0x02	; 2
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    1908:	e6 30       	cpi	r30, 0x06	; 6
    190a:	f1 05       	cpc	r31, r1
    190c:	11 f7       	brne	.-60     	; 0x18d2 <ir_targeted_send+0x2a>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    190e:	4c 2d       	mov	r20, r12
    1910:	b7 01       	movw	r22, r14
    1912:	8d 2d       	mov	r24, r13
    1914:	74 da       	rcall	.-2840   	; 0xdfe <send_msg>
}

void ir_targeted_send(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
	all_ir_sends(dirs, data, data_length, target, 0);
}
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	0f 91       	pop	r16
    191e:	ff 90       	pop	r15
    1920:	ef 90       	pop	r14
    1922:	df 90       	pop	r13
    1924:	cf 90       	pop	r12
    1926:	08 95       	ret

00001928 <ir_send>:

void ir_send(uint8_t dirs, char *data, uint8_t data_length)
{
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	cf 93       	push	r28
    192e:	df 93       	push	r29
    1930:	18 2f       	mov	r17, r24
    1932:	eb 01       	movw	r28, r22
    1934:	04 2f       	mov	r16, r20
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
    1936:	c2 de       	rcall	.-636    	; 0x16bc <wait_for_ir>
    1938:	e6 e0       	ldi	r30, 0x06	; 6
    193a:	f0 e2       	ldi	r31, 0x20	; 32
    193c:	20 e0       	ldi	r18, 0x00	; 0
    193e:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1940:	61 2f       	mov	r22, r17
    1942:	70 e0       	ldi	r23, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    1944:	40 e3       	ldi	r20, 0x30	; 48
    1946:	91 e0       	ldi	r25, 0x01	; 1
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1948:	db 01       	movw	r26, r22
    194a:	02 2e       	mov	r0, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <ir_send+0x2a>
    194e:	b5 95       	asr	r27
    1950:	a7 95       	ror	r26
    1952:	0a 94       	dec	r0
    1954:	e2 f7       	brpl	.-8      	; 0x194e <ir_send+0x26>
    1956:	a0 ff       	sbrs	r26, 0
    1958:	16 c0       	rjmp	.+44     	; 0x1986 <ir_send+0x5e>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    195a:	a0 81       	ld	r26, Z
    195c:	b1 81       	ldd	r27, Z+1	; 0x01
    195e:	14 96       	adiw	r26, 0x04	; 4
    1960:	8c 91       	ld	r24, X
    1962:	14 97       	sbiw	r26, 0x04	; 4
    1964:	8f 7e       	andi	r24, 0xEF	; 239
    1966:	14 96       	adiw	r26, 0x04	; 4
    1968:	8c 93       	st	X, r24
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    196a:	42 9f       	mul	r20, r18
    196c:	d0 01       	movw	r26, r0
    196e:	43 9f       	mul	r20, r19
    1970:	b0 0d       	add	r27, r0
    1972:	11 24       	eor	r1, r1
    1974:	a6 58       	subi	r26, 0x86	; 134
    1976:	b1 4d       	sbci	r27, 0xD1	; 209
    1978:	9f 96       	adiw	r26, 0x2f	; 47
    197a:	9c 93       	st	X, r25
    197c:	9f 97       	sbiw	r26, 0x2f	; 47
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    197e:	98 96       	adiw	r26, 0x28	; 40
    1980:	1d 92       	st	X+, r1
    1982:	1c 92       	st	X, r1
    1984:	99 97       	sbiw	r26, 0x29	; 41
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	3f 4f       	sbci	r19, 0xFF	; 255
    198a:	32 96       	adiw	r30, 0x02	; 2
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    198c:	26 30       	cpi	r18, 0x06	; 6
    198e:	31 05       	cpc	r19, r1
    1990:	d9 f6       	brne	.-74     	; 0x1948 <ir_send+0x20>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    1992:	40 2f       	mov	r20, r16
    1994:	be 01       	movw	r22, r28
    1996:	81 2f       	mov	r24, r17
    1998:	32 da       	rcall	.-2972   	; 0xdfe <send_msg>
}

void ir_send(uint8_t dirs, char *data, uint8_t data_length)
{
	all_ir_sends(dirs, data, data_length, 0, 0);
}
    199a:	df 91       	pop	r29
    199c:	cf 91       	pop	r28
    199e:	1f 91       	pop	r17
    19a0:	0f 91       	pop	r16
    19a2:	08 95       	ret

000019a4 <__vector_25>:
	} while (busy);
	set_rgb(r, g, b);
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { ir_receive(0); }
    19a4:	1f 92       	push	r1
    19a6:	0f 92       	push	r0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	0b b6       	in	r0, 0x3b	; 59
    19b0:	0f 92       	push	r0
    19b2:	2f 93       	push	r18
    19b4:	3f 93       	push	r19
    19b6:	4f 93       	push	r20
    19b8:	5f 93       	push	r21
    19ba:	6f 93       	push	r22
    19bc:	7f 93       	push	r23
    19be:	8f 93       	push	r24
    19c0:	9f 93       	push	r25
    19c2:	af 93       	push	r26
    19c4:	bf 93       	push	r27
    19c6:	ef 93       	push	r30
    19c8:	ff 93       	push	r31
    19ca:	80 e0       	ldi	r24, 0x00	; 0
    19cc:	13 db       	rcall	.-2522   	; 0xff4 <ir_receive>
    19ce:	ff 91       	pop	r31
    19d0:	ef 91       	pop	r30
    19d2:	bf 91       	pop	r27
    19d4:	af 91       	pop	r26
    19d6:	9f 91       	pop	r25
    19d8:	8f 91       	pop	r24
    19da:	7f 91       	pop	r23
    19dc:	6f 91       	pop	r22
    19de:	5f 91       	pop	r21
    19e0:	4f 91       	pop	r20
    19e2:	3f 91       	pop	r19
    19e4:	2f 91       	pop	r18
    19e6:	0f 90       	pop	r0
    19e8:	0b be       	out	0x3b, r0	; 59
    19ea:	0f 90       	pop	r0
    19ec:	0f be       	out	0x3f, r0	; 63
    19ee:	0f 90       	pop	r0
    19f0:	1f 90       	pop	r1
    19f2:	18 95       	reti

000019f4 <__vector_27>:
ISR( USARTC0_TXC_vect ) { ir_transmit_complete(0); }
    19f4:	1f 92       	push	r1
    19f6:	0f 92       	push	r0
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	0f 92       	push	r0
    19fc:	11 24       	eor	r1, r1
    19fe:	0b b6       	in	r0, 0x3b	; 59
    1a00:	0f 92       	push	r0
    1a02:	2f 93       	push	r18
    1a04:	3f 93       	push	r19
    1a06:	4f 93       	push	r20
    1a08:	5f 93       	push	r21
    1a0a:	6f 93       	push	r22
    1a0c:	7f 93       	push	r23
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	af 93       	push	r26
    1a14:	bf 93       	push	r27
    1a16:	ef 93       	push	r30
    1a18:	ff 93       	push	r31
    1a1a:	80 e0       	ldi	r24, 0x00	; 0
    1a1c:	20 de       	rcall	.-960    	; 0x165e <ir_transmit_complete>
    1a1e:	ff 91       	pop	r31
    1a20:	ef 91       	pop	r30
    1a22:	bf 91       	pop	r27
    1a24:	af 91       	pop	r26
    1a26:	9f 91       	pop	r25
    1a28:	8f 91       	pop	r24
    1a2a:	7f 91       	pop	r23
    1a2c:	6f 91       	pop	r22
    1a2e:	5f 91       	pop	r21
    1a30:	4f 91       	pop	r20
    1a32:	3f 91       	pop	r19
    1a34:	2f 91       	pop	r18
    1a36:	0f 90       	pop	r0
    1a38:	0b be       	out	0x3b, r0	; 59
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	1f 90       	pop	r1
    1a42:	18 95       	reti

00001a44 <__vector_26>:
ISR( USARTC0_DRE_vect ) { ir_transmit(0); }
    1a44:	1f 92       	push	r1
    1a46:	0f 92       	push	r0
    1a48:	0f b6       	in	r0, 0x3f	; 63
    1a4a:	0f 92       	push	r0
    1a4c:	11 24       	eor	r1, r1
    1a4e:	0b b6       	in	r0, 0x3b	; 59
    1a50:	0f 92       	push	r0
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	2b dd       	rcall	.-1450   	; 0x14c4 <ir_transmit>
    1a6e:	ff 91       	pop	r31
    1a70:	ef 91       	pop	r30
    1a72:	bf 91       	pop	r27
    1a74:	af 91       	pop	r26
    1a76:	9f 91       	pop	r25
    1a78:	8f 91       	pop	r24
    1a7a:	7f 91       	pop	r23
    1a7c:	6f 91       	pop	r22
    1a7e:	5f 91       	pop	r21
    1a80:	4f 91       	pop	r20
    1a82:	3f 91       	pop	r19
    1a84:	2f 91       	pop	r18
    1a86:	0f 90       	pop	r0
    1a88:	0b be       	out	0x3b, r0	; 59
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	0f 90       	pop	r0
    1a90:	1f 90       	pop	r1
    1a92:	18 95       	reti

00001a94 <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { ir_receive(1); }
    1a94:	1f 92       	push	r1
    1a96:	0f 92       	push	r0
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	0f 92       	push	r0
    1a9c:	11 24       	eor	r1, r1
    1a9e:	0b b6       	in	r0, 0x3b	; 59
    1aa0:	0f 92       	push	r0
    1aa2:	2f 93       	push	r18
    1aa4:	3f 93       	push	r19
    1aa6:	4f 93       	push	r20
    1aa8:	5f 93       	push	r21
    1aaa:	6f 93       	push	r22
    1aac:	7f 93       	push	r23
    1aae:	8f 93       	push	r24
    1ab0:	9f 93       	push	r25
    1ab2:	af 93       	push	r26
    1ab4:	bf 93       	push	r27
    1ab6:	ef 93       	push	r30
    1ab8:	ff 93       	push	r31
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	9b da       	rcall	.-2762   	; 0xff4 <ir_receive>
    1abe:	ff 91       	pop	r31
    1ac0:	ef 91       	pop	r30
    1ac2:	bf 91       	pop	r27
    1ac4:	af 91       	pop	r26
    1ac6:	9f 91       	pop	r25
    1ac8:	8f 91       	pop	r24
    1aca:	7f 91       	pop	r23
    1acc:	6f 91       	pop	r22
    1ace:	5f 91       	pop	r21
    1ad0:	4f 91       	pop	r20
    1ad2:	3f 91       	pop	r19
    1ad4:	2f 91       	pop	r18
    1ad6:	0f 90       	pop	r0
    1ad8:	0b be       	out	0x3b, r0	; 59
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	0f 90       	pop	r0
    1ae0:	1f 90       	pop	r1
    1ae2:	18 95       	reti

00001ae4 <__vector_30>:
ISR( USARTC1_TXC_vect ) { ir_transmit_complete(1); }
    1ae4:	1f 92       	push	r1
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	0b b6       	in	r0, 0x3b	; 59
    1af0:	0f 92       	push	r0
    1af2:	2f 93       	push	r18
    1af4:	3f 93       	push	r19
    1af6:	4f 93       	push	r20
    1af8:	5f 93       	push	r21
    1afa:	6f 93       	push	r22
    1afc:	7f 93       	push	r23
    1afe:	8f 93       	push	r24
    1b00:	9f 93       	push	r25
    1b02:	af 93       	push	r26
    1b04:	bf 93       	push	r27
    1b06:	ef 93       	push	r30
    1b08:	ff 93       	push	r31
    1b0a:	81 e0       	ldi	r24, 0x01	; 1
    1b0c:	a8 dd       	rcall	.-1200   	; 0x165e <ir_transmit_complete>
    1b0e:	ff 91       	pop	r31
    1b10:	ef 91       	pop	r30
    1b12:	bf 91       	pop	r27
    1b14:	af 91       	pop	r26
    1b16:	9f 91       	pop	r25
    1b18:	8f 91       	pop	r24
    1b1a:	7f 91       	pop	r23
    1b1c:	6f 91       	pop	r22
    1b1e:	5f 91       	pop	r21
    1b20:	4f 91       	pop	r20
    1b22:	3f 91       	pop	r19
    1b24:	2f 91       	pop	r18
    1b26:	0f 90       	pop	r0
    1b28:	0b be       	out	0x3b, r0	; 59
    1b2a:	0f 90       	pop	r0
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	0f 90       	pop	r0
    1b30:	1f 90       	pop	r1
    1b32:	18 95       	reti

00001b34 <__vector_29>:
ISR( USARTC1_DRE_vect ) { ir_transmit(1); }
    1b34:	1f 92       	push	r1
    1b36:	0f 92       	push	r0
    1b38:	0f b6       	in	r0, 0x3f	; 63
    1b3a:	0f 92       	push	r0
    1b3c:	11 24       	eor	r1, r1
    1b3e:	0b b6       	in	r0, 0x3b	; 59
    1b40:	0f 92       	push	r0
    1b42:	2f 93       	push	r18
    1b44:	3f 93       	push	r19
    1b46:	4f 93       	push	r20
    1b48:	5f 93       	push	r21
    1b4a:	6f 93       	push	r22
    1b4c:	7f 93       	push	r23
    1b4e:	8f 93       	push	r24
    1b50:	9f 93       	push	r25
    1b52:	af 93       	push	r26
    1b54:	bf 93       	push	r27
    1b56:	ef 93       	push	r30
    1b58:	ff 93       	push	r31
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	b3 dc       	rcall	.-1690   	; 0x14c4 <ir_transmit>
    1b5e:	ff 91       	pop	r31
    1b60:	ef 91       	pop	r30
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	7f 91       	pop	r23
    1b6c:	6f 91       	pop	r22
    1b6e:	5f 91       	pop	r21
    1b70:	4f 91       	pop	r20
    1b72:	3f 91       	pop	r19
    1b74:	2f 91       	pop	r18
    1b76:	0f 90       	pop	r0
    1b78:	0b be       	out	0x3b, r0	; 59
    1b7a:	0f 90       	pop	r0
    1b7c:	0f be       	out	0x3f, r0	; 63
    1b7e:	0f 90       	pop	r0
    1b80:	1f 90       	pop	r1
    1b82:	18 95       	reti

00001b84 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { ir_receive(2); }
    1b84:	1f 92       	push	r1
    1b86:	0f 92       	push	r0
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	0f 92       	push	r0
    1b8c:	11 24       	eor	r1, r1
    1b8e:	0b b6       	in	r0, 0x3b	; 59
    1b90:	0f 92       	push	r0
    1b92:	2f 93       	push	r18
    1b94:	3f 93       	push	r19
    1b96:	4f 93       	push	r20
    1b98:	5f 93       	push	r21
    1b9a:	6f 93       	push	r22
    1b9c:	7f 93       	push	r23
    1b9e:	8f 93       	push	r24
    1ba0:	9f 93       	push	r25
    1ba2:	af 93       	push	r26
    1ba4:	bf 93       	push	r27
    1ba6:	ef 93       	push	r30
    1ba8:	ff 93       	push	r31
    1baa:	82 e0       	ldi	r24, 0x02	; 2
    1bac:	23 da       	rcall	.-3002   	; 0xff4 <ir_receive>
    1bae:	ff 91       	pop	r31
    1bb0:	ef 91       	pop	r30
    1bb2:	bf 91       	pop	r27
    1bb4:	af 91       	pop	r26
    1bb6:	9f 91       	pop	r25
    1bb8:	8f 91       	pop	r24
    1bba:	7f 91       	pop	r23
    1bbc:	6f 91       	pop	r22
    1bbe:	5f 91       	pop	r21
    1bc0:	4f 91       	pop	r20
    1bc2:	3f 91       	pop	r19
    1bc4:	2f 91       	pop	r18
    1bc6:	0f 90       	pop	r0
    1bc8:	0b be       	out	0x3b, r0	; 59
    1bca:	0f 90       	pop	r0
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	0f 90       	pop	r0
    1bd0:	1f 90       	pop	r1
    1bd2:	18 95       	reti

00001bd4 <__vector_90>:
ISR( USARTD0_TXC_vect ) { ir_transmit_complete(2); }
    1bd4:	1f 92       	push	r1
    1bd6:	0f 92       	push	r0
    1bd8:	0f b6       	in	r0, 0x3f	; 63
    1bda:	0f 92       	push	r0
    1bdc:	11 24       	eor	r1, r1
    1bde:	0b b6       	in	r0, 0x3b	; 59
    1be0:	0f 92       	push	r0
    1be2:	2f 93       	push	r18
    1be4:	3f 93       	push	r19
    1be6:	4f 93       	push	r20
    1be8:	5f 93       	push	r21
    1bea:	6f 93       	push	r22
    1bec:	7f 93       	push	r23
    1bee:	8f 93       	push	r24
    1bf0:	9f 93       	push	r25
    1bf2:	af 93       	push	r26
    1bf4:	bf 93       	push	r27
    1bf6:	ef 93       	push	r30
    1bf8:	ff 93       	push	r31
    1bfa:	82 e0       	ldi	r24, 0x02	; 2
    1bfc:	30 dd       	rcall	.-1440   	; 0x165e <ir_transmit_complete>
    1bfe:	ff 91       	pop	r31
    1c00:	ef 91       	pop	r30
    1c02:	bf 91       	pop	r27
    1c04:	af 91       	pop	r26
    1c06:	9f 91       	pop	r25
    1c08:	8f 91       	pop	r24
    1c0a:	7f 91       	pop	r23
    1c0c:	6f 91       	pop	r22
    1c0e:	5f 91       	pop	r21
    1c10:	4f 91       	pop	r20
    1c12:	3f 91       	pop	r19
    1c14:	2f 91       	pop	r18
    1c16:	0f 90       	pop	r0
    1c18:	0b be       	out	0x3b, r0	; 59
    1c1a:	0f 90       	pop	r0
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	0f 90       	pop	r0
    1c20:	1f 90       	pop	r1
    1c22:	18 95       	reti

00001c24 <__vector_89>:
ISR( USARTD0_DRE_vect ) { ir_transmit(2); }
    1c24:	1f 92       	push	r1
    1c26:	0f 92       	push	r0
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	0f 92       	push	r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	0b b6       	in	r0, 0x3b	; 59
    1c30:	0f 92       	push	r0
    1c32:	2f 93       	push	r18
    1c34:	3f 93       	push	r19
    1c36:	4f 93       	push	r20
    1c38:	5f 93       	push	r21
    1c3a:	6f 93       	push	r22
    1c3c:	7f 93       	push	r23
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25
    1c42:	af 93       	push	r26
    1c44:	bf 93       	push	r27
    1c46:	ef 93       	push	r30
    1c48:	ff 93       	push	r31
    1c4a:	82 e0       	ldi	r24, 0x02	; 2
    1c4c:	3b dc       	rcall	.-1930   	; 0x14c4 <ir_transmit>
    1c4e:	ff 91       	pop	r31
    1c50:	ef 91       	pop	r30
    1c52:	bf 91       	pop	r27
    1c54:	af 91       	pop	r26
    1c56:	9f 91       	pop	r25
    1c58:	8f 91       	pop	r24
    1c5a:	7f 91       	pop	r23
    1c5c:	6f 91       	pop	r22
    1c5e:	5f 91       	pop	r21
    1c60:	4f 91       	pop	r20
    1c62:	3f 91       	pop	r19
    1c64:	2f 91       	pop	r18
    1c66:	0f 90       	pop	r0
    1c68:	0b be       	out	0x3b, r0	; 59
    1c6a:	0f 90       	pop	r0
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	0f 90       	pop	r0
    1c70:	1f 90       	pop	r1
    1c72:	18 95       	reti

00001c74 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { ir_receive(3); }
    1c74:	1f 92       	push	r1
    1c76:	0f 92       	push	r0
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	0f 92       	push	r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	0b b6       	in	r0, 0x3b	; 59
    1c80:	0f 92       	push	r0
    1c82:	2f 93       	push	r18
    1c84:	3f 93       	push	r19
    1c86:	4f 93       	push	r20
    1c88:	5f 93       	push	r21
    1c8a:	6f 93       	push	r22
    1c8c:	7f 93       	push	r23
    1c8e:	8f 93       	push	r24
    1c90:	9f 93       	push	r25
    1c92:	af 93       	push	r26
    1c94:	bf 93       	push	r27
    1c96:	ef 93       	push	r30
    1c98:	ff 93       	push	r31
    1c9a:	83 e0       	ldi	r24, 0x03	; 3
    1c9c:	ab d9       	rcall	.-3242   	; 0xff4 <ir_receive>
    1c9e:	ff 91       	pop	r31
    1ca0:	ef 91       	pop	r30
    1ca2:	bf 91       	pop	r27
    1ca4:	af 91       	pop	r26
    1ca6:	9f 91       	pop	r25
    1ca8:	8f 91       	pop	r24
    1caa:	7f 91       	pop	r23
    1cac:	6f 91       	pop	r22
    1cae:	5f 91       	pop	r21
    1cb0:	4f 91       	pop	r20
    1cb2:	3f 91       	pop	r19
    1cb4:	2f 91       	pop	r18
    1cb6:	0f 90       	pop	r0
    1cb8:	0b be       	out	0x3b, r0	; 59
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <__vector_60>:
ISR( USARTE0_TXC_vect ) { ir_transmit_complete(3); }
    1cc4:	1f 92       	push	r1
    1cc6:	0f 92       	push	r0
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	0f 92       	push	r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	0b b6       	in	r0, 0x3b	; 59
    1cd0:	0f 92       	push	r0
    1cd2:	2f 93       	push	r18
    1cd4:	3f 93       	push	r19
    1cd6:	4f 93       	push	r20
    1cd8:	5f 93       	push	r21
    1cda:	6f 93       	push	r22
    1cdc:	7f 93       	push	r23
    1cde:	8f 93       	push	r24
    1ce0:	9f 93       	push	r25
    1ce2:	af 93       	push	r26
    1ce4:	bf 93       	push	r27
    1ce6:	ef 93       	push	r30
    1ce8:	ff 93       	push	r31
    1cea:	83 e0       	ldi	r24, 0x03	; 3
    1cec:	b8 dc       	rcall	.-1680   	; 0x165e <ir_transmit_complete>
    1cee:	ff 91       	pop	r31
    1cf0:	ef 91       	pop	r30
    1cf2:	bf 91       	pop	r27
    1cf4:	af 91       	pop	r26
    1cf6:	9f 91       	pop	r25
    1cf8:	8f 91       	pop	r24
    1cfa:	7f 91       	pop	r23
    1cfc:	6f 91       	pop	r22
    1cfe:	5f 91       	pop	r21
    1d00:	4f 91       	pop	r20
    1d02:	3f 91       	pop	r19
    1d04:	2f 91       	pop	r18
    1d06:	0f 90       	pop	r0
    1d08:	0b be       	out	0x3b, r0	; 59
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f 90       	pop	r0
    1d10:	1f 90       	pop	r1
    1d12:	18 95       	reti

00001d14 <__vector_59>:
ISR( USARTE0_DRE_vect ) { ir_transmit(3); }
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	0b b6       	in	r0, 0x3b	; 59
    1d20:	0f 92       	push	r0
    1d22:	2f 93       	push	r18
    1d24:	3f 93       	push	r19
    1d26:	4f 93       	push	r20
    1d28:	5f 93       	push	r21
    1d2a:	6f 93       	push	r22
    1d2c:	7f 93       	push	r23
    1d2e:	8f 93       	push	r24
    1d30:	9f 93       	push	r25
    1d32:	af 93       	push	r26
    1d34:	bf 93       	push	r27
    1d36:	ef 93       	push	r30
    1d38:	ff 93       	push	r31
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	c3 db       	rcall	.-2170   	; 0x14c4 <ir_transmit>
    1d3e:	ff 91       	pop	r31
    1d40:	ef 91       	pop	r30
    1d42:	bf 91       	pop	r27
    1d44:	af 91       	pop	r26
    1d46:	9f 91       	pop	r25
    1d48:	8f 91       	pop	r24
    1d4a:	7f 91       	pop	r23
    1d4c:	6f 91       	pop	r22
    1d4e:	5f 91       	pop	r21
    1d50:	4f 91       	pop	r20
    1d52:	3f 91       	pop	r19
    1d54:	2f 91       	pop	r18
    1d56:	0f 90       	pop	r0
    1d58:	0b be       	out	0x3b, r0	; 59
    1d5a:	0f 90       	pop	r0
    1d5c:	0f be       	out	0x3f, r0	; 63
    1d5e:	0f 90       	pop	r0
    1d60:	1f 90       	pop	r1
    1d62:	18 95       	reti

00001d64 <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { ir_receive(4); }
    1d64:	1f 92       	push	r1
    1d66:	0f 92       	push	r0
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	0f 92       	push	r0
    1d6c:	11 24       	eor	r1, r1
    1d6e:	0b b6       	in	r0, 0x3b	; 59
    1d70:	0f 92       	push	r0
    1d72:	2f 93       	push	r18
    1d74:	3f 93       	push	r19
    1d76:	4f 93       	push	r20
    1d78:	5f 93       	push	r21
    1d7a:	6f 93       	push	r22
    1d7c:	7f 93       	push	r23
    1d7e:	8f 93       	push	r24
    1d80:	9f 93       	push	r25
    1d82:	af 93       	push	r26
    1d84:	bf 93       	push	r27
    1d86:	ef 93       	push	r30
    1d88:	ff 93       	push	r31
    1d8a:	84 e0       	ldi	r24, 0x04	; 4
    1d8c:	33 d9       	rcall	.-3482   	; 0xff4 <ir_receive>
    1d8e:	ff 91       	pop	r31
    1d90:	ef 91       	pop	r30
    1d92:	bf 91       	pop	r27
    1d94:	af 91       	pop	r26
    1d96:	9f 91       	pop	r25
    1d98:	8f 91       	pop	r24
    1d9a:	7f 91       	pop	r23
    1d9c:	6f 91       	pop	r22
    1d9e:	5f 91       	pop	r21
    1da0:	4f 91       	pop	r20
    1da2:	3f 91       	pop	r19
    1da4:	2f 91       	pop	r18
    1da6:	0f 90       	pop	r0
    1da8:	0b be       	out	0x3b, r0	; 59
    1daa:	0f 90       	pop	r0
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	0f 90       	pop	r0
    1db0:	1f 90       	pop	r1
    1db2:	18 95       	reti

00001db4 <__vector_63>:
ISR( USARTE1_TXC_vect ) { ir_transmit_complete(4); }
    1db4:	1f 92       	push	r1
    1db6:	0f 92       	push	r0
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	0f 92       	push	r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	0b b6       	in	r0, 0x3b	; 59
    1dc0:	0f 92       	push	r0
    1dc2:	2f 93       	push	r18
    1dc4:	3f 93       	push	r19
    1dc6:	4f 93       	push	r20
    1dc8:	5f 93       	push	r21
    1dca:	6f 93       	push	r22
    1dcc:	7f 93       	push	r23
    1dce:	8f 93       	push	r24
    1dd0:	9f 93       	push	r25
    1dd2:	af 93       	push	r26
    1dd4:	bf 93       	push	r27
    1dd6:	ef 93       	push	r30
    1dd8:	ff 93       	push	r31
    1dda:	84 e0       	ldi	r24, 0x04	; 4
    1ddc:	40 dc       	rcall	.-1920   	; 0x165e <ir_transmit_complete>
    1dde:	ff 91       	pop	r31
    1de0:	ef 91       	pop	r30
    1de2:	bf 91       	pop	r27
    1de4:	af 91       	pop	r26
    1de6:	9f 91       	pop	r25
    1de8:	8f 91       	pop	r24
    1dea:	7f 91       	pop	r23
    1dec:	6f 91       	pop	r22
    1dee:	5f 91       	pop	r21
    1df0:	4f 91       	pop	r20
    1df2:	3f 91       	pop	r19
    1df4:	2f 91       	pop	r18
    1df6:	0f 90       	pop	r0
    1df8:	0b be       	out	0x3b, r0	; 59
    1dfa:	0f 90       	pop	r0
    1dfc:	0f be       	out	0x3f, r0	; 63
    1dfe:	0f 90       	pop	r0
    1e00:	1f 90       	pop	r1
    1e02:	18 95       	reti

00001e04 <__vector_62>:
ISR( USARTE1_DRE_vect ) { ir_transmit(4); }
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	0b b6       	in	r0, 0x3b	; 59
    1e10:	0f 92       	push	r0
    1e12:	2f 93       	push	r18
    1e14:	3f 93       	push	r19
    1e16:	4f 93       	push	r20
    1e18:	5f 93       	push	r21
    1e1a:	6f 93       	push	r22
    1e1c:	7f 93       	push	r23
    1e1e:	8f 93       	push	r24
    1e20:	9f 93       	push	r25
    1e22:	af 93       	push	r26
    1e24:	bf 93       	push	r27
    1e26:	ef 93       	push	r30
    1e28:	ff 93       	push	r31
    1e2a:	84 e0       	ldi	r24, 0x04	; 4
    1e2c:	4b db       	rcall	.-2410   	; 0x14c4 <ir_transmit>
    1e2e:	ff 91       	pop	r31
    1e30:	ef 91       	pop	r30
    1e32:	bf 91       	pop	r27
    1e34:	af 91       	pop	r26
    1e36:	9f 91       	pop	r25
    1e38:	8f 91       	pop	r24
    1e3a:	7f 91       	pop	r23
    1e3c:	6f 91       	pop	r22
    1e3e:	5f 91       	pop	r21
    1e40:	4f 91       	pop	r20
    1e42:	3f 91       	pop	r19
    1e44:	2f 91       	pop	r18
    1e46:	0f 90       	pop	r0
    1e48:	0b be       	out	0x3b, r0	; 59
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	0f 90       	pop	r0
    1e50:	1f 90       	pop	r1
    1e52:	18 95       	reti

00001e54 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { ir_receive(5); }
    1e54:	1f 92       	push	r1
    1e56:	0f 92       	push	r0
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	0f 92       	push	r0
    1e5c:	11 24       	eor	r1, r1
    1e5e:	0b b6       	in	r0, 0x3b	; 59
    1e60:	0f 92       	push	r0
    1e62:	2f 93       	push	r18
    1e64:	3f 93       	push	r19
    1e66:	4f 93       	push	r20
    1e68:	5f 93       	push	r21
    1e6a:	6f 93       	push	r22
    1e6c:	7f 93       	push	r23
    1e6e:	8f 93       	push	r24
    1e70:	9f 93       	push	r25
    1e72:	af 93       	push	r26
    1e74:	bf 93       	push	r27
    1e76:	ef 93       	push	r30
    1e78:	ff 93       	push	r31
    1e7a:	85 e0       	ldi	r24, 0x05	; 5
    1e7c:	bb d8       	rcall	.-3722   	; 0xff4 <ir_receive>
    1e7e:	ff 91       	pop	r31
    1e80:	ef 91       	pop	r30
    1e82:	bf 91       	pop	r27
    1e84:	af 91       	pop	r26
    1e86:	9f 91       	pop	r25
    1e88:	8f 91       	pop	r24
    1e8a:	7f 91       	pop	r23
    1e8c:	6f 91       	pop	r22
    1e8e:	5f 91       	pop	r21
    1e90:	4f 91       	pop	r20
    1e92:	3f 91       	pop	r19
    1e94:	2f 91       	pop	r18
    1e96:	0f 90       	pop	r0
    1e98:	0b be       	out	0x3b, r0	; 59
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	0f 90       	pop	r0
    1ea0:	1f 90       	pop	r1
    1ea2:	18 95       	reti

00001ea4 <__vector_121>:
ISR( USARTF0_TXC_vect ) { ir_transmit_complete(5); }
    1ea4:	1f 92       	push	r1
    1ea6:	0f 92       	push	r0
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	0f 92       	push	r0
    1eac:	11 24       	eor	r1, r1
    1eae:	0b b6       	in	r0, 0x3b	; 59
    1eb0:	0f 92       	push	r0
    1eb2:	2f 93       	push	r18
    1eb4:	3f 93       	push	r19
    1eb6:	4f 93       	push	r20
    1eb8:	5f 93       	push	r21
    1eba:	6f 93       	push	r22
    1ebc:	7f 93       	push	r23
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	af 93       	push	r26
    1ec4:	bf 93       	push	r27
    1ec6:	ef 93       	push	r30
    1ec8:	ff 93       	push	r31
    1eca:	85 e0       	ldi	r24, 0x05	; 5
    1ecc:	c8 db       	rcall	.-2160   	; 0x165e <ir_transmit_complete>
    1ece:	ff 91       	pop	r31
    1ed0:	ef 91       	pop	r30
    1ed2:	bf 91       	pop	r27
    1ed4:	af 91       	pop	r26
    1ed6:	9f 91       	pop	r25
    1ed8:	8f 91       	pop	r24
    1eda:	7f 91       	pop	r23
    1edc:	6f 91       	pop	r22
    1ede:	5f 91       	pop	r21
    1ee0:	4f 91       	pop	r20
    1ee2:	3f 91       	pop	r19
    1ee4:	2f 91       	pop	r18
    1ee6:	0f 90       	pop	r0
    1ee8:	0b be       	out	0x3b, r0	; 59
    1eea:	0f 90       	pop	r0
    1eec:	0f be       	out	0x3f, r0	; 63
    1eee:	0f 90       	pop	r0
    1ef0:	1f 90       	pop	r1
    1ef2:	18 95       	reti

00001ef4 <__vector_120>:
    1ef4:	1f 92       	push	r1
    1ef6:	0f 92       	push	r0
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	0f 92       	push	r0
    1efc:	11 24       	eor	r1, r1
    1efe:	0b b6       	in	r0, 0x3b	; 59
    1f00:	0f 92       	push	r0
    1f02:	2f 93       	push	r18
    1f04:	3f 93       	push	r19
    1f06:	4f 93       	push	r20
    1f08:	5f 93       	push	r21
    1f0a:	6f 93       	push	r22
    1f0c:	7f 93       	push	r23
    1f0e:	8f 93       	push	r24
    1f10:	9f 93       	push	r25
    1f12:	af 93       	push	r26
    1f14:	bf 93       	push	r27
    1f16:	ef 93       	push	r30
    1f18:	ff 93       	push	r31
    1f1a:	85 e0       	ldi	r24, 0x05	; 5
    1f1c:	d3 da       	rcall	.-2650   	; 0x14c4 <ir_transmit>
    1f1e:	ff 91       	pop	r31
    1f20:	ef 91       	pop	r30
    1f22:	bf 91       	pop	r27
    1f24:	af 91       	pop	r26
    1f26:	9f 91       	pop	r25
    1f28:	8f 91       	pop	r24
    1f2a:	7f 91       	pop	r23
    1f2c:	6f 91       	pop	r22
    1f2e:	5f 91       	pop	r21
    1f30:	4f 91       	pop	r20
    1f32:	3f 91       	pop	r19
    1f34:	2f 91       	pop	r18
    1f36:	0f 90       	pop	r0
    1f38:	0b be       	out	0x3b, r0	; 59
    1f3a:	0f 90       	pop	r0
    1f3c:	0f be       	out	0x3f, r0	; 63
    1f3e:	0f 90       	pop	r0
    1f40:	1f 90       	pop	r1
    1f42:	18 95       	reti

00001f44 <meas_find_median>:
}	

// Finds the median of 3 numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
	if(arr_len==1) return meas[0];
    1f4a:	61 30       	cpi	r22, 0x01	; 1
    1f4c:	21 f4       	brne	.+8      	; 0x1f56 <meas_find_median+0x12>
    1f4e:	fc 01       	movw	r30, r24
    1f50:	80 81       	ld	r24, Z
    1f52:	91 81       	ldd	r25, Z+1	; 0x01
    1f54:	51 c0       	rjmp	.+162    	; 0x1ff8 <meas_find_median+0xb4>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    1f56:	62 30       	cpi	r22, 0x02	; 2
    1f58:	49 f5       	brne	.+82     	; 0x1fac <meas_find_median+0x68>
    1f5a:	fc 01       	movw	r30, r24
    1f5c:	20 81       	ld	r18, Z
    1f5e:	31 81       	ldd	r19, Z+1	; 0x01
    1f60:	82 81       	ldd	r24, Z+2	; 0x02
    1f62:	93 81       	ldd	r25, Z+3	; 0x03
    1f64:	82 0f       	add	r24, r18
    1f66:	93 1f       	adc	r25, r19
    1f68:	99 23       	and	r25, r25
    1f6a:	0c f4       	brge	.+2      	; 0x1f6e <meas_find_median+0x2a>
    1f6c:	01 96       	adiw	r24, 0x01	; 1
    1f6e:	95 95       	asr	r25
    1f70:	87 95       	ror	r24
    1f72:	42 c0       	rjmp	.+132    	; 0x1ff8 <meas_find_median+0xb4>
    1f74:	12 96       	adiw	r26, 0x02	; 2
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    1f76:	1f 5f       	subi	r17, 0xFF	; 255
    1f78:	16 17       	cp	r17, r22
    1f7a:	e9 f0       	breq	.+58     	; 0x1fb6 <meas_find_median+0x72>
    1f7c:	71 2f       	mov	r23, r17
    1f7e:	ed 01       	movw	r28, r26
		{
			if(meas[j] < meas[i])
    1f80:	e7 2f       	mov	r30, r23
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	e8 0f       	add	r30, r24
    1f8a:	f9 1f       	adc	r31, r25
    1f8c:	40 81       	ld	r20, Z
    1f8e:	51 81       	ldd	r21, Z+1	; 0x01
    1f90:	2d 91       	ld	r18, X+
    1f92:	3c 91       	ld	r19, X
    1f94:	11 97       	sbiw	r26, 0x01	; 1
    1f96:	42 17       	cp	r20, r18
    1f98:	53 07       	cpc	r21, r19
    1f9a:	24 f4       	brge	.+8      	; 0x1fa4 <meas_find_median+0x60>
			{
				int16_t temp = meas[i];
				meas[i] = meas[j];
    1f9c:	48 83       	st	Y, r20
    1f9e:	59 83       	std	Y+1, r21	; 0x01
				meas[j] = temp;
    1fa0:	20 83       	st	Z, r18
    1fa2:	31 83       	std	Z+1, r19	; 0x01
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    1fa4:	7f 5f       	subi	r23, 0xFF	; 255
    1fa6:	76 13       	cpse	r23, r22
    1fa8:	eb cf       	rjmp	.-42     	; 0x1f80 <meas_find_median+0x3c>
    1faa:	e4 cf       	rjmp	.-56     	; 0x1f74 <meas_find_median+0x30>
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
    1fac:	66 23       	and	r22, r22
    1fae:	29 f0       	breq	.+10     	; 0x1fba <meas_find_median+0x76>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	10 e0       	ldi	r17, 0x00	; 0
    1fb4:	e0 cf       	rjmp	.-64     	; 0x1f76 <meas_find_median+0x32>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    1fb6:	60 fd       	sbrc	r22, 0
    1fb8:	15 c0       	rjmp	.+42     	; 0x1fe4 <meas_find_median+0xa0>
    1fba:	66 95       	lsr	r22
    1fbc:	e6 2f       	mov	r30, r22
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	e1 50       	subi	r30, 0x01	; 1
    1fc2:	f0 48       	sbci	r31, 0x80	; 128
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	e8 0f       	add	r30, r24
    1fca:	f9 1f       	adc	r31, r25
    1fcc:	20 81       	ld	r18, Z
    1fce:	31 81       	ldd	r19, Z+1	; 0x01
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	82 0f       	add	r24, r18
    1fd6:	93 1f       	adc	r25, r19
    1fd8:	99 23       	and	r25, r25
    1fda:	0c f4       	brge	.+2      	; 0x1fde <meas_find_median+0x9a>
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	95 95       	asr	r25
    1fe0:	87 95       	ror	r24
    1fe2:	0a c0       	rjmp	.+20     	; 0x1ff8 <meas_find_median+0xb4>
	else return meas[arr_len/2];
    1fe4:	66 95       	lsr	r22
    1fe6:	26 2f       	mov	r18, r22
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	22 0f       	add	r18, r18
    1fec:	33 1f       	adc	r19, r19
    1fee:	fc 01       	movw	r30, r24
    1ff0:	e2 0f       	add	r30, r18
    1ff2:	f3 1f       	adc	r31, r19
    1ff4:	80 81       	ld	r24, Z
    1ff6:	91 81       	ldd	r25, Z+1	; 0x01
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	1f 91       	pop	r17
    1ffe:	08 95       	ret

00002000 <get_ir_sensor>:
/*
* This measurement will always output a number between 0 and about 200. Ambient light levels are typically around 20.
* The range of outputs that could be used for actual measurements will be limited to about 20 to 200 (only 180 significant values)
*/
uint8_t get_ir_sensor(uint8_t sensor_num)
{
    2000:	0f 93       	push	r16
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	2a 97       	sbiw	r28, 0x0a	; 10
    200e:	cd bf       	out	0x3d, r28	; 61
    2010:	de bf       	out	0x3e, r29	; 62
	ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    2012:	e0 e4       	ldi	r30, 0x40	; 64
    2014:	f2 e0       	ldi	r31, 0x02	; 2
    2016:	91 a1       	ldd	r25, Z+33	; 0x21
    2018:	97 70       	andi	r25, 0x07	; 7
    201a:	91 a3       	std	Z+33, r25	; 0x21
	ADCB.CH0.MUXCTRL |= mux_sensor_selectors[sensor_num];
    201c:	91 a1       	ldd	r25, Z+33	; 0x21
    201e:	08 2f       	mov	r16, r24
    2020:	10 e0       	ldi	r17, 0x00	; 0
    2022:	d8 01       	movw	r26, r16
    2024:	ac 54       	subi	r26, 0x4C	; 76
    2026:	bd 4d       	sbci	r27, 0xDD	; 221
    2028:	8c 91       	ld	r24, X
    202a:	89 2b       	or	r24, r25
    202c:	81 a3       	std	Z+33, r24	; 0x21
    202e:	de 01       	movw	r26, r28
    2030:	11 96       	adiw	r26, 0x01	; 1
    2032:	9e 01       	movw	r18, r28
    2034:	25 5f       	subi	r18, 0xF5	; 245
    2036:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			ADCB.CH0.CTRL |= ADC_CH_START_bm;
			while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
		}
		meas[meas_count] = ((((int16_t)ADCB.CH0.RESH)<<8)|((int16_t)ADCB.CH0.RESL))>>2;	
		ADCB.CH0.INTFLAGS=1; // clear the complete flag		
    2038:	51 e0       	ldi	r21, 0x01	; 1
	
	int16_t meas[IR_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    203a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    203c:	f8 94       	cli
		{
			ADCB.CH0.CTRL |= ADC_CH_START_bm;
    203e:	80 a1       	ldd	r24, Z+32	; 0x20
    2040:	80 68       	ori	r24, 0x80	; 128
    2042:	80 a3       	std	Z+32, r24	; 0x20
			while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    2044:	83 a1       	ldd	r24, Z+35	; 0x23
    2046:	88 23       	and	r24, r24
    2048:	e9 f3       	breq	.-6      	; 0x2044 <get_ir_sensor+0x44>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    204a:	9f bf       	out	0x3f, r25	; 63
		}
		meas[meas_count] = ((((int16_t)ADCB.CH0.RESH)<<8)|((int16_t)ADCB.CH0.RESL))>>2;	
    204c:	45 a1       	ldd	r20, Z+37	; 0x25
    204e:	84 a1       	ldd	r24, Z+36	; 0x24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	94 2b       	or	r25, r20
    2054:	95 95       	asr	r25
    2056:	87 95       	ror	r24
    2058:	95 95       	asr	r25
    205a:	87 95       	ror	r24
    205c:	8d 93       	st	X+, r24
    205e:	9d 93       	st	X+, r25
		ADCB.CH0.INTFLAGS=1; // clear the complete flag		
    2060:	53 a3       	std	Z+35, r21	; 0x23
	ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
	ADCB.CH0.MUXCTRL |= mux_sensor_selectors[sensor_num];
	
	int16_t meas[IR_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
    2062:	a2 17       	cp	r26, r18
    2064:	b3 07       	cpc	r27, r19
    2066:	49 f7       	brne	.-46     	; 0x203a <get_ir_sensor+0x3a>
	}
	//printf("Median: %d", median);	
	//printf("\t");
	//for(uint8_t i=0;i<IR_MEAS_COUNT;i++) printf("%u: %3d\t",i, meas[i]);
	//printf("\r\n");
	int16_t median = meas_find_median(&(meas[2]), IR_MEAS_COUNT-2);
    2068:	63 e0       	ldi	r22, 0x03	; 3
    206a:	ce 01       	movw	r24, r28
    206c:	05 96       	adiw	r24, 0x05	; 5
    206e:	6a df       	rcall	.-300    	; 0x1f44 <meas_find_median>
	
	if(median<ir_sense_baseline[sensor_num])	return 0;
    2070:	f8 01       	movw	r30, r16
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	ee 50       	subi	r30, 0x0E	; 14
    2078:	f2 4d       	sbci	r31, 0xD2	; 210
    207a:	20 81       	ld	r18, Z
    207c:	31 81       	ldd	r19, Z+1	; 0x01
    207e:	82 17       	cp	r24, r18
    2080:	93 07       	cpc	r25, r19
    2082:	14 f0       	brlt	.+4      	; 0x2088 <get_ir_sensor+0x88>
	else										return (median-ir_sense_baseline[sensor_num]);
    2084:	82 1b       	sub	r24, r18
    2086:	01 c0       	rjmp	.+2      	; 0x208a <get_ir_sensor+0x8a>
	//printf("\t");
	//for(uint8_t i=0;i<IR_MEAS_COUNT;i++) printf("%u: %3d\t",i, meas[i]);
	//printf("\r\n");
	int16_t median = meas_find_median(&(meas[2]), IR_MEAS_COUNT-2);
	
	if(median<ir_sense_baseline[sensor_num])	return 0;
    2088:	80 e0       	ldi	r24, 0x00	; 0
	else										return (median-ir_sense_baseline[sensor_num]);
}
    208a:	2a 96       	adiw	r28, 0x0a	; 10
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	de bf       	out	0x3e, r29	; 62
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	08 95       	ret

0000209a <ir_sensor_init>:
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    209a:	ef 92       	push	r14
    209c:	ff 92       	push	r15
    209e:	0f 93       	push	r16
    20a0:	1f 93       	push	r17
    20a2:	cf 93       	push	r28
    20a4:	df 93       	push	r29
	/* SET INPUT PINS AS INPUTS */
	IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    20a6:	8c ef       	ldi	r24, 0xFC	; 252
    20a8:	e0 e2       	ldi	r30, 0x20	; 32
    20aa:	f6 e0       	ldi	r31, 0x06	; 6
    20ac:	82 83       	std	Z+2, r24	; 0x02

	ADCB.REFCTRL = ADC_REFSEL_INT1V_gc;
    20ae:	e0 e4       	ldi	r30, 0x40	; 64
    20b0:	f2 e0       	ldi	r31, 0x02	; 2
    20b2:	12 82       	std	Z+2, r1	; 0x02
	ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    20b4:	80 e1       	ldi	r24, 0x10	; 16
    20b6:	81 83       	std	Z+1, r24	; 0x01
	ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    20b8:	87 e0       	ldi	r24, 0x07	; 7
    20ba:	84 83       	std	Z+4, r24	; 0x04
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// differential input. requires signed mode (see sec. 28.6 in manual)
    20bc:	92 e0       	ldi	r25, 0x02	; 2
    20be:	90 a3       	std	Z+32, r25	; 0x20
	ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE3_gc;	// use VREF_IN for the negative input (0.54 V)
    20c0:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    20c2:	84 b5       	in	r24, 0x24	; 36
    20c4:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    20c6:	85 b5       	in	r24, 0x25	; 37
    20c8:	85 87       	std	Z+13, r24	; 0x0d
	ADCB.CTRLA = ADC_ENABLE_bm;	
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	80 83       	st	Z, r24
    20ce:	85 e3       	ldi	r24, 0x35	; 53
    20d0:	8a 95       	dec	r24
    20d2:	f1 f7       	brne	.-4      	; 0x20d0 <ir_sensor_init+0x36>
    20d4:	00 00       	nop

	delay_us(5);
	
	for(uint8_t dir=0; dir<6; dir++) ir_sense_baseline[dir] = 0;
    20d6:	10 92 f2 2d 	sts	0x2DF2, r1
    20da:	10 92 f3 2d 	sts	0x2DF3, r1
    20de:	10 92 f4 2d 	sts	0x2DF4, r1
    20e2:	10 92 f5 2d 	sts	0x2DF5, r1
    20e6:	10 92 f6 2d 	sts	0x2DF6, r1
    20ea:	10 92 f7 2d 	sts	0x2DF7, r1
    20ee:	10 92 f8 2d 	sts	0x2DF8, r1
    20f2:	10 92 f9 2d 	sts	0x2DF9, r1
    20f6:	10 92 fa 2d 	sts	0x2DFA, r1
    20fa:	10 92 fb 2d 	sts	0x2DFB, r1
    20fe:	10 92 fc 2d 	sts	0x2DFC, r1
    2102:	10 92 fd 2d 	sts	0x2DFD, r1
	
	delay_ms(5);
    2106:	85 e0       	ldi	r24, 0x05	; 5
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
	get_ir_sensor(0);
    210e:	80 e0       	ldi	r24, 0x00	; 0
    2110:	77 df       	rcall	.-274    	; 0x2000 <get_ir_sensor>
    2112:	c2 ef       	ldi	r28, 0xF2	; 242
    2114:	dd e2       	ldi	r29, 0x2D	; 45
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
    2116:	f1 2c       	mov	r15, r1
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    2118:	ee 24       	eor	r14, r14
    211a:	ea 94       	dec	r14
    211c:	0f c0       	rjmp	.+30     	; 0x213c <ir_sensor_init+0xa2>
	for(uint8_t dir=0; dir<6; dir++)
	{
		min_val=255;
		for(uint8_t meas_count=0; meas_count<5; meas_count++)
		{
			val = get_ir_sensor(dir);
    211e:	8f 2d       	mov	r24, r15
    2120:	6f df       	rcall	.-290    	; 0x2000 <get_ir_sensor>
    2122:	80 17       	cp	r24, r16
    2124:	08 f4       	brcc	.+2      	; 0x2128 <ir_sensor_init+0x8e>
    2126:	08 2f       	mov	r16, r24
    2128:	11 50       	subi	r17, 0x01	; 1
	get_ir_sensor(0);
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
	{
		min_val=255;
		for(uint8_t meas_count=0; meas_count<5; meas_count++)
    212a:	c9 f7       	brne	.-14     	; 0x211e <ir_sensor_init+0x84>
		{
			val = get_ir_sensor(dir);
			if(val<min_val) min_val = val;
		}
		ir_sense_baseline[dir] = min_val;
    212c:	20 2f       	mov	r18, r16
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	29 93       	st	Y+, r18
    2132:	39 93       	st	Y+, r19
	for(uint8_t dir=0; dir<6; dir++) ir_sense_baseline[dir] = 0;
	
	delay_ms(5);
	get_ir_sensor(0);
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
    2134:	f3 94       	inc	r15
    2136:	86 e0       	ldi	r24, 0x06	; 6
    2138:	f8 16       	cp	r15, r24
    213a:	19 f0       	breq	.+6      	; 0x2142 <ir_sensor_init+0xa8>
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    213c:	15 e0       	ldi	r17, 0x05	; 5
    213e:	0e 2d       	mov	r16, r14
    2140:	ee cf       	rjmp	.-36     	; 0x211e <ir_sensor_init+0x84>
	//PORTC.DIRSET = (PIN3_bm | PIN7_bm);
	//PORTD.DIRCLR =  PIN3_bm;
	//PORTE.DIRSET = (PIN3_bm | PIN7_bm);
	//PORTF.DIRCLR =  PIN3_bm;	
	//PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;	//set carrier wave pins to output.
}
    2142:	df 91       	pop	r29
    2144:	cf 91       	pop	r28
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	ff 90       	pop	r15
    214c:	ef 90       	pop	r14
    214e:	08 95       	ret

00002150 <check_collisions>:
	if(median<ir_sense_baseline[sensor_num])	return 0;
	else										return (median-ir_sense_baseline[sensor_num]);
}

	
uint8_t check_collisions(){
    2150:	5f 92       	push	r5
    2152:	6f 92       	push	r6
    2154:	7f 92       	push	r7
    2156:	8f 92       	push	r8
    2158:	9f 92       	push	r9
    215a:	af 92       	push	r10
    215c:	bf 92       	push	r11
    215e:	cf 92       	push	r12
    2160:	df 92       	push	r13
    2162:	ef 92       	push	r14
    2164:	ff 92       	push	r15
    2166:	0f 93       	push	r16
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	6e 97       	sbiw	r28, 0x1e	; 30
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	de bf       	out	0x3e, r29	; 62
	int16_t baseline_meas[6];
	uint8_t channelCtrlBVals[6];
	volatile int16_t measured_vals[6];
	uint8_t dirs=0;
	//wait_for_ir(ALL_DIRS);
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	80 93 a9 2e 	sts	0x2EA9, r24
    217e:	80 93 d9 2e 	sts	0x2ED9, r24
    2182:	80 93 09 2f 	sts	0x2F09, r24
    2186:	80 93 39 2f 	sts	0x2F39, r24
    218a:	80 93 69 2f 	sts	0x2F69, r24
    218e:	80 93 99 2f 	sts	0x2F99, r24
uint8_t count;
uint16_t thePower;
void i2c_init();

void set_all_ir_powers(uint16_t power);
inline uint16_t get_all_ir_powers(){ return thePower; };
    2192:	60 90 9e 2c 	lds	r6, 0x2C9E
    2196:	70 90 9f 2c 	lds	r7, 0x2C9F
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	0e 94 b8 04 	call	0x970	; 0x970 <set_all_ir_powers>
    21a2:	0f 2e       	mov	r0, r31
    21a4:	f2 e1       	ldi	r31, 0x12	; 18
    21a6:	ef 2e       	mov	r14, r31
    21a8:	f0 e2       	ldi	r31, 0x20	; 32
    21aa:	ff 2e       	mov	r15, r31
    21ac:	f0 2d       	mov	r31, r0
    21ae:	ce 01       	movw	r24, r28
    21b0:	0d 96       	adiw	r24, 0x0d	; 13
    21b2:	e6 e0       	ldi	r30, 0x06	; 6
    21b4:	f0 e2       	ldi	r31, 0x20	; 32
	for(uint8_t i=0;i<6;i++)
	{
		channelCtrlBVals[i] = channel[i]->CTRLB;
    21b6:	41 91       	ld	r20, Z+
    21b8:	51 91       	ld	r21, Z+
    21ba:	da 01       	movw	r26, r20
    21bc:	14 96       	adiw	r26, 0x04	; 4
    21be:	2c 91       	ld	r18, X
    21c0:	dc 01       	movw	r26, r24
    21c2:	2d 93       	st	X+, r18
    21c4:	cd 01       	movw	r24, r26
		channel[i]->CTRLB=0;
    21c6:	da 01       	movw	r26, r20
    21c8:	14 96       	adiw	r26, 0x04	; 4
    21ca:	1c 92       	st	X, r1
	uint8_t dirs=0;
	//wait_for_ir(ALL_DIRS);
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
	for(uint8_t i=0;i<6;i++)
    21cc:	ee 15       	cp	r30, r14
    21ce:	ff 05       	cpc	r31, r15
    21d0:	91 f7       	brne	.-28     	; 0x21b6 <check_collisions+0x66>
    21d2:	8e 01       	movw	r16, r28
    21d4:	0f 5f       	subi	r16, 0xFF	; 255
    21d6:	1f 4f       	sbci	r17, 0xFF	; 255
    21d8:	b1 2c       	mov	r11, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    21da:	0f 2e       	mov	r0, r31
    21dc:	ff e8       	ldi	r31, 0x8F	; 143
    21de:	cf 2e       	mov	r12, r31
    21e0:	dd 24       	eor	r13, r13
    21e2:	d3 94       	inc	r13
    21e4:	f0 2d       	mov	r31, r0
    21e6:	f6 01       	movw	r30, r12
    21e8:	31 97       	sbiw	r30, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <check_collisions+0x98>
    21ec:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    21ee:	00 c0       	rjmp	.+0      	; 0x21f0 <check_collisions+0xa0>
	}
	for(uint8_t i=0;i<6;i++)
	{
		busy_delay_us(50);
		//get_ir_sensor(i);
		baseline_meas[i] = get_ir_sensor(i);
    21f0:	8b 2d       	mov	r24, r11
    21f2:	06 df       	rcall	.-500    	; 0x2000 <get_ir_sensor>
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	f8 01       	movw	r30, r16
    21fa:	21 93       	st	Z+, r18
    21fc:	31 93       	st	Z+, r19
    21fe:	8f 01       	movw	r16, r30
	for(uint8_t i=0;i<6;i++)
	{
		channelCtrlBVals[i] = channel[i]->CTRLB;
		channel[i]->CTRLB=0;
	}
	for(uint8_t i=0;i<6;i++)
    2200:	b3 94       	inc	r11
    2202:	f6 e0       	ldi	r31, 0x06	; 6
    2204:	bf 12       	cpse	r11, r31
    2206:	ef cf       	rjmp	.-34     	; 0x21e6 <check_collisions+0x96>
	{
		busy_delay_us(50);
		//get_ir_sensor(i);
		baseline_meas[i] = get_ir_sensor(i);
	}
	TCF2.CTRLB &= ~ALL_EMITTERS_CARWAV_bm;	//disable carrier wave output
    2208:	e0 e0       	ldi	r30, 0x00	; 0
    220a:	fb e0       	ldi	r31, 0x0B	; 11
    220c:	81 81       	ldd	r24, Z+1	; 0x01
    220e:	8c 70       	andi	r24, 0x0C	; 12
    2210:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = ALL_EMITTERS_CARWAV_bm;	// set carrier wave pins high.		
    2212:	e0 ea       	ldi	r30, 0xA0	; 160
    2214:	f6 e0       	ldi	r31, 0x06	; 6
    2216:	83 ef       	ldi	r24, 0xF3	; 243
    2218:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = (PIN3_bm | PIN7_bm);
    221a:	20 e4       	ldi	r18, 0x40	; 64
    221c:	36 e0       	ldi	r19, 0x06	; 6
    221e:	58 e8       	ldi	r21, 0x88	; 136
    2220:	d9 01       	movw	r26, r18
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	5c 93       	st	X, r21
	PORTD.DIRSET =  PIN3_bm;
    2226:	80 e6       	ldi	r24, 0x60	; 96
    2228:	96 e0       	ldi	r25, 0x06	; 6
    222a:	48 e0       	ldi	r20, 0x08	; 8
    222c:	dc 01       	movw	r26, r24
    222e:	11 96       	adiw	r26, 0x01	; 1
    2230:	4c 93       	st	X, r20
	PORTE.DIRSET = (PIN3_bm | PIN7_bm);
    2232:	60 e8       	ldi	r22, 0x80	; 128
    2234:	76 e0       	ldi	r23, 0x06	; 6
    2236:	db 01       	movw	r26, r22
    2238:	11 96       	adiw	r26, 0x01	; 1
    223a:	5c 93       	st	X, r21
	PORTF.DIRSET =  PIN3_bm;
    223c:	41 83       	std	Z+1, r20	; 0x01

	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    223e:	d9 01       	movw	r26, r18
    2240:	16 96       	adiw	r26, 0x06	; 6
    2242:	5c 93       	st	X, r21
	PORTD.OUTCLR = PIN3_bm;
    2244:	dc 01       	movw	r26, r24
    2246:	16 96       	adiw	r26, 0x06	; 6
    2248:	4c 93       	st	X, r20
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    224a:	db 01       	movw	r26, r22
    224c:	16 96       	adiw	r26, 0x06	; 6
    224e:	5c 93       	st	X, r21
	PORTF.OUTCLR = PIN3_bm;
    2250:	46 83       	std	Z+6, r20	; 0x06
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    2252:	8f ec       	ldi	r24, 0xCF	; 207
    2254:	97 e0       	ldi	r25, 0x07	; 7
    2256:	01 97       	sbiw	r24, 0x01	; 1
    2258:	f1 f7       	brne	.-4      	; 0x2256 <check_collisions+0x106>
    225a:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    225c:	00 c0       	rjmp	.+0      	; 0x225e <check_collisions+0x10e>

	busy_delay_us(250);
	ADCB.CTRLA |= ADC_FLUSH_bm;
    225e:	e0 e4       	ldi	r30, 0x40	; 64
    2260:	f2 e0       	ldi	r31, 0x02	; 2
    2262:	80 81       	ld	r24, Z
    2264:	82 60       	ori	r24, 0x02	; 2
    2266:	80 83       	st	Z, r24
    2268:	fe 01       	movw	r30, r28
    226a:	31 96       	adiw	r30, 0x01	; 1
    226c:	6f 01       	movw	r12, r30
    226e:	00 e0       	ldi	r16, 0x00	; 0
    2270:	10 e0       	ldi	r17, 0x00	; 0
	
uint8_t check_collisions(){
	int16_t baseline_meas[6];
	uint8_t channelCtrlBVals[6];
	volatile int16_t measured_vals[6];
	uint8_t dirs=0;
    2272:	51 2c       	mov	r5, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    2274:	0f 2e       	mov	r0, r31
    2276:	ff ec       	ldi	r31, 0xCF	; 207
    2278:	af 2e       	mov	r10, r31
    227a:	f7 e0       	ldi	r31, 0x07	; 7
    227c:	bf 2e       	mov	r11, r31
    227e:	f0 2d       	mov	r31, r0
		//get_ir_sensor(i);
		measured_vals[i] = get_ir_sensor(i);
		int16_t temp = measured_vals[i]-baseline_meas[i];
		//printf("\t%3d", temp);
		if((measured_vals[i]-baseline_meas[i])>16){
			dirs = dirs|(1<<i);
    2280:	88 24       	eor	r8, r8
    2282:	83 94       	inc	r8
    2284:	91 2c       	mov	r9, r1
    2286:	c5 01       	movw	r24, r10
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <check_collisions+0x138>
    228c:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    228e:	00 c0       	rjmp	.+0      	; 0x2290 <check_collisions+0x140>
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++)
	{
		busy_delay_us(250);
		//get_ir_sensor(i);
		measured_vals[i] = get_ir_sensor(i);
    2290:	80 2f       	mov	r24, r16
    2292:	b6 de       	rcall	.-660    	; 0x2000 <get_ir_sensor>
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	f8 01       	movw	r30, r16
    2298:	ee 0f       	add	r30, r30
    229a:	ff 1f       	adc	r31, r31
    229c:	21 e0       	ldi	r18, 0x01	; 1
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	2c 0f       	add	r18, r28
    22a2:	3d 1f       	adc	r19, r29
    22a4:	e2 0f       	add	r30, r18
    22a6:	f3 1f       	adc	r31, r19
    22a8:	82 8b       	std	Z+18, r24	; 0x12
    22aa:	93 8b       	std	Z+19, r25	; 0x13
		int16_t temp = measured_vals[i]-baseline_meas[i];
    22ac:	82 89       	ldd	r24, Z+18	; 0x12
    22ae:	93 89       	ldd	r25, Z+19	; 0x13
		//printf("\t%3d", temp);
		if((measured_vals[i]-baseline_meas[i])>16){
    22b0:	82 89       	ldd	r24, Z+18	; 0x12
    22b2:	93 89       	ldd	r25, Z+19	; 0x13
    22b4:	d6 01       	movw	r26, r12
    22b6:	2d 91       	ld	r18, X+
    22b8:	3d 91       	ld	r19, X+
    22ba:	6d 01       	movw	r12, r26
    22bc:	82 1b       	sub	r24, r18
    22be:	93 0b       	sbc	r25, r19
    22c0:	41 97       	sbiw	r24, 0x11	; 17
    22c2:	44 f0       	brlt	.+16     	; 0x22d4 <check_collisions+0x184>
			dirs = dirs|(1<<i);
    22c4:	c4 01       	movw	r24, r8
    22c6:	00 2e       	mov	r0, r16
    22c8:	02 c0       	rjmp	.+4      	; 0x22ce <check_collisions+0x17e>
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	0a 94       	dec	r0
    22d0:	e2 f7       	brpl	.-8      	; 0x22ca <check_collisions+0x17a>
    22d2:	58 2a       	or	r5, r24
    22d4:	0f 5f       	subi	r16, 0xFF	; 255
    22d6:	1f 4f       	sbci	r17, 0xFF	; 255
	PORTF.OUTCLR = PIN3_bm;

	busy_delay_us(250);
	ADCB.CTRLA |= ADC_FLUSH_bm;
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++)
    22d8:	06 30       	cpi	r16, 0x06	; 6
    22da:	11 05       	cpc	r17, r1
    22dc:	a1 f6       	brne	.-88     	; 0x2286 <check_collisions+0x136>
		if((measured_vals[i]-baseline_meas[i])>16){
			dirs = dirs|(1<<i);
		}
	}
	//printf("\r\n");
	PORTC.OUTTGL = (PIN3_bm | PIN7_bm);
    22de:	98 e8       	ldi	r25, 0x88	; 136
    22e0:	e0 e4       	ldi	r30, 0x40	; 64
    22e2:	f6 e0       	ldi	r31, 0x06	; 6
    22e4:	97 83       	std	Z+7, r25	; 0x07
	PORTD.OUTTGL =  PIN3_bm;
    22e6:	88 e0       	ldi	r24, 0x08	; 8
    22e8:	e0 e6       	ldi	r30, 0x60	; 96
    22ea:	f6 e0       	ldi	r31, 0x06	; 6
    22ec:	87 83       	std	Z+7, r24	; 0x07
	PORTE.OUTTGL = (PIN3_bm | PIN7_bm);
    22ee:	e0 e8       	ldi	r30, 0x80	; 128
    22f0:	f6 e0       	ldi	r31, 0x06	; 6
    22f2:	97 83       	std	Z+7, r25	; 0x07
	PORTF.OUTTGL =  PIN3_bm;
    22f4:	e0 ea       	ldi	r30, 0xA0	; 160
    22f6:	f6 e0       	ldi	r31, 0x06	; 6
    22f8:	87 83       	std	Z+7, r24	; 0x07
	PORTF.OUTCLR = ALL_EMITTERS_CARWAV_bm;
    22fa:	83 ef       	ldi	r24, 0xF3	; 243
    22fc:	86 83       	std	Z+6, r24	; 0x06
    22fe:	ae 01       	movw	r20, r28
    2300:	43 5f       	subi	r20, 0xF3	; 243
    2302:	5f 4f       	sbci	r21, 0xFF	; 255
    2304:	e6 e0       	ldi	r30, 0x06	; 6
    2306:	f0 e2       	ldi	r31, 0x20	; 32
	for(uint8_t i=0;i<6;i++) channel[i]->CTRLB = channelCtrlBVals[i];
    2308:	81 91       	ld	r24, Z+
    230a:	91 91       	ld	r25, Z+
    230c:	da 01       	movw	r26, r20
    230e:	2d 91       	ld	r18, X+
    2310:	ad 01       	movw	r20, r26
    2312:	dc 01       	movw	r26, r24
    2314:	14 96       	adiw	r26, 0x04	; 4
    2316:	2c 93       	st	X, r18
    2318:	ee 15       	cp	r30, r14
    231a:	ff 05       	cpc	r31, r15
    231c:	a9 f7       	brne	.-22     	; 0x2308 <check_collisions+0x1b8>
	TCF2.CTRLB |= ALL_EMITTERS_CARWAV_bm; //reenable carrier wave output
    231e:	e0 e0       	ldi	r30, 0x00	; 0
    2320:	fb e0       	ldi	r31, 0x0B	; 11
    2322:	81 81       	ldd	r24, Z+1	; 0x01
    2324:	83 6f       	ori	r24, 0xF3	; 243
    2326:	81 83       	std	Z+1, r24	; 0x01
	set_all_ir_powers(curr_power);
    2328:	c3 01       	movw	r24, r6
    232a:	0e 94 b8 04 	call	0x970	; 0x970 <set_all_ir_powers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    232e:	10 92 a9 2e 	sts	0x2EA9, r1
    2332:	10 92 d9 2e 	sts	0x2ED9, r1
    2336:	10 92 09 2f 	sts	0x2F09, r1
    233a:	10 92 39 2f 	sts	0x2F39, r1
    233e:	10 92 69 2f 	sts	0x2F69, r1
    2342:	10 92 99 2f 	sts	0x2F99, r1
	return dirs;
}	
    2346:	85 2d       	mov	r24, r5
    2348:	6e 96       	adiw	r28, 0x1e	; 30
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	de bf       	out	0x3e, r29	; 62
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	bf 90       	pop	r11
    2360:	af 90       	pop	r10
    2362:	9f 90       	pop	r9
    2364:	8f 90       	pop	r8
    2366:	7f 90       	pop	r7
    2368:	6f 90       	pop	r6
    236a:	5f 90       	pop	r5
    236c:	08 95       	ret

0000236e <stop>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcast_motor_adjusts()
{
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	e0 e0       	ldi	r30, 0x00	; 0
    2372:	f8 e0       	ldi	r31, 0x08	; 8
    2374:	81 83       	std	Z+1, r24	; 0x01
    2376:	e0 e4       	ldi	r30, 0x40	; 64
    2378:	f8 e0       	ldi	r31, 0x08	; 8
    237a:	81 83       	std	Z+1, r24	; 0x01
    237c:	e0 e0       	ldi	r30, 0x00	; 0
    237e:	f9 e0       	ldi	r31, 0x09	; 9
    2380:	81 83       	std	Z+1, r24	; 0x01
    2382:	e0 e4       	ldi	r30, 0x40	; 64
    2384:	f6 e0       	ldi	r31, 0x06	; 6
    2386:	93 e3       	ldi	r25, 0x33	; 51
    2388:	96 83       	std	Z+6, r25	; 0x06
    238a:	a0 e6       	ldi	r26, 0x60	; 96
    238c:	b6 e0       	ldi	r27, 0x06	; 6
    238e:	16 96       	adiw	r26, 0x06	; 6
    2390:	8c 93       	st	X, r24
    2392:	16 97       	sbiw	r26, 0x06	; 6
    2394:	10 8a       	std	Z+16, r1	; 0x10
    2396:	11 8a       	std	Z+17, r1	; 0x11
    2398:	14 8a       	std	Z+20, r1	; 0x14
    239a:	15 8a       	std	Z+21, r1	; 0x15
    239c:	50 96       	adiw	r26, 0x10	; 16
    239e:	1c 92       	st	X, r1
    23a0:	50 97       	sbiw	r26, 0x10	; 16
    23a2:	51 96       	adiw	r26, 0x11	; 17
    23a4:	1c 92       	st	X, r1
    23a6:	10 92 e6 2c 	sts	0x2CE6, r1
    23aa:	80 91 9c 2c 	lds	r24, 0x2C9C
    23ae:	90 91 9d 2c 	lds	r25, 0x2C9D
    23b2:	0c 94 32 24 	jmp	0x4864	; 0x4864 <remove_task>
    23b6:	08 95       	ret

000023b8 <is_moving>:
    23b8:	80 91 e6 2c 	lds	r24, 0x2CE6
    23bc:	88 23       	and	r24, r24
    23be:	24 f4       	brge	.+8      	; 0x23c8 <is_moving+0x10>
    23c0:	80 91 e6 2c 	lds	r24, 0x2CE6
    23c4:	87 70       	andi	r24, 0x07	; 7
    23c6:	08 95       	ret
    23c8:	8f ef       	ldi	r24, 0xFF	; 255
    23ca:	08 95       	ret

000023cc <move_steps>:
    23cc:	4f 92       	push	r4
    23ce:	5f 92       	push	r5
    23d0:	6f 92       	push	r6
    23d2:	7f 92       	push	r7
    23d4:	8f 92       	push	r8
    23d6:	9f 92       	push	r9
    23d8:	af 92       	push	r10
    23da:	bf 92       	push	r11
    23dc:	cf 92       	push	r12
    23de:	df 92       	push	r13
    23e0:	ef 92       	push	r14
    23e2:	ff 92       	push	r15
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	cd b7       	in	r28, 0x3d	; 61
    23ee:	de b7       	in	r29, 0x3e	; 62
    23f0:	29 97       	sbiw	r28, 0x09	; 9
    23f2:	cd bf       	out	0x3d, r28	; 61
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	18 2f       	mov	r17, r24
    23f8:	7b 01       	movw	r14, r22
    23fa:	de df       	rcall	.-68     	; 0x23b8 <is_moving>
    23fc:	88 23       	and	r24, r24
    23fe:	0c f0       	brlt	.+2      	; 0x2402 <move_steps+0x36>
    2400:	79 c1       	rjmp	.+754    	; 0x26f4 <move_steps+0x328>
    2402:	81 2f       	mov	r24, r17
    2404:	87 70       	andi	r24, 0x07	; 7
    2406:	80 68       	ori	r24, 0x80	; 128
    2408:	80 93 e6 2c 	sts	0x2CE6, r24
    240c:	a0 90 dd 2d 	lds	r10, 0x2DDD
    2410:	b0 90 de 2d 	lds	r11, 0x2DDE
    2414:	aa 0c       	add	r10, r10
    2416:	bb 1c       	adc	r11, r11
    2418:	aa 0c       	add	r10, r10
    241a:	bb 1c       	adc	r11, r11
    241c:	aa 0c       	add	r10, r10
    241e:	bb 1c       	adc	r11, r11
    2420:	aa 0c       	add	r10, r10
    2422:	bb 1c       	adc	r11, r11
    2424:	aa 0c       	add	r10, r10
    2426:	bb 1c       	adc	r11, r11
    2428:	80 90 ff 2d 	lds	r8, 0x2DFF
    242c:	90 90 00 2e 	lds	r9, 0x2E00
    2430:	88 0c       	add	r8, r8
    2432:	99 1c       	adc	r9, r9
    2434:	88 0c       	add	r8, r8
    2436:	99 1c       	adc	r9, r9
    2438:	88 0c       	add	r8, r8
    243a:	99 1c       	adc	r9, r9
    243c:	88 0c       	add	r8, r8
    243e:	99 1c       	adc	r9, r9
    2440:	88 0c       	add	r8, r8
    2442:	99 1c       	adc	r9, r9
    2444:	81 2f       	mov	r24, r17
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	9c 01       	movw	r18, r24
    244a:	22 0f       	add	r18, r18
    244c:	33 1f       	adc	r19, r19
    244e:	82 0f       	add	r24, r18
    2450:	93 1f       	adc	r25, r19
    2452:	88 0f       	add	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	85 56       	subi	r24, 0x65	; 101
    2458:	90 4d       	sbci	r25, 0xD0	; 208
    245a:	9e 01       	movw	r18, r28
    245c:	29 5f       	subi	r18, 0xF9	; 249
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	69 01       	movw	r12, r18
    2462:	fe 01       	movw	r30, r28
    2464:	31 96       	adiw	r30, 0x01	; 1
    2466:	00 e0       	ldi	r16, 0x00	; 0
    2468:	10 e0       	ldi	r17, 0x00	; 0
    246a:	3c 01       	movw	r6, r24
    246c:	dc 01       	movw	r26, r24
    246e:	4d 91       	ld	r20, X+
    2470:	5c 91       	ld	r21, X
    2472:	41 15       	cp	r20, r1
    2474:	51 05       	cpc	r21, r1
    2476:	29 f4       	brne	.+10     	; 0x2482 <move_steps+0xb6>
    2478:	10 82       	st	Z, r1
    247a:	11 82       	std	Z+1, r1	; 0x01
    247c:	d9 01       	movw	r26, r18
    247e:	1c 92       	st	X, r1
    2480:	18 c0       	rjmp	.+48     	; 0x24b2 <move_steps+0xe6>
    2482:	ba 01       	movw	r22, r20
    2484:	55 23       	and	r21, r21
    2486:	24 f4       	brge	.+8      	; 0x2490 <move_steps+0xc4>
    2488:	66 27       	eor	r22, r22
    248a:	77 27       	eor	r23, r23
    248c:	64 1b       	sub	r22, r20
    248e:	75 0b       	sbc	r23, r21
    2490:	6a 0d       	add	r22, r10
    2492:	7b 1d       	adc	r23, r11
    2494:	60 83       	st	Z, r22
    2496:	71 83       	std	Z+1, r23	; 0x01
    2498:	d3 01       	movw	r26, r6
    249a:	11 96       	adiw	r26, 0x01	; 1
    249c:	4c 91       	ld	r20, X
    249e:	44 0f       	add	r20, r20
    24a0:	44 0b       	sbc	r20, r20
    24a2:	44 0f       	add	r20, r20
    24a4:	4f 5f       	subi	r20, 0xFF	; 255
    24a6:	d9 01       	movw	r26, r18
    24a8:	4c 93       	st	X, r20
    24aa:	08 0d       	add	r16, r8
    24ac:	19 1d       	adc	r17, r9
    24ae:	06 0f       	add	r16, r22
    24b0:	17 1f       	adc	r17, r23
    24b2:	02 96       	adiw	r24, 0x02	; 2
    24b4:	32 96       	adiw	r30, 0x02	; 2
    24b6:	2f 5f       	subi	r18, 0xFF	; 255
    24b8:	3f 4f       	sbci	r19, 0xFF	; 255
    24ba:	ec 15       	cp	r30, r12
    24bc:	fd 05       	cpc	r31, r13
    24be:	a9 f6       	brne	.-86     	; 0x246a <move_steps+0x9e>
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	59 e0       	ldi	r21, 0x09	; 9
    24c4:	fa 01       	movw	r30, r20
    24c6:	06 a3       	std	Z+38, r16	; 0x26
    24c8:	17 a3       	std	Z+39, r17	; 0x27
    24ca:	a0 e4       	ldi	r26, 0x40	; 64
    24cc:	b8 e0       	ldi	r27, 0x08	; 8
    24ce:	96 96       	adiw	r26, 0x26	; 38
    24d0:	0d 93       	st	X+, r16
    24d2:	1c 93       	st	X, r17
    24d4:	97 97       	sbiw	r26, 0x27	; 39
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	98 e0       	ldi	r25, 0x08	; 8
    24da:	fc 01       	movw	r30, r24
    24dc:	06 a3       	std	Z+38, r16	; 0x26
    24de:	17 a3       	std	Z+39, r17	; 0x27
    24e0:	29 81       	ldd	r18, Y+1	; 0x01
    24e2:	3a 81       	ldd	r19, Y+2	; 0x02
    24e4:	22 a7       	std	Z+42, r18	; 0x2a
    24e6:	33 a7       	std	Z+43, r19	; 0x2b
    24e8:	20 a7       	std	Z+40, r18	; 0x28
    24ea:	31 a7       	std	Z+41, r19	; 0x29
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	9a 96       	adiw	r26, 0x2a	; 42
    24f2:	8d 93       	st	X+, r24
    24f4:	9c 93       	st	X, r25
    24f6:	9b 97       	sbiw	r26, 0x2b	; 43
    24f8:	98 96       	adiw	r26, 0x28	; 40
    24fa:	8d 93       	st	X+, r24
    24fc:	9c 93       	st	X, r25
    24fe:	99 97       	sbiw	r26, 0x29	; 41
    2500:	8d 81       	ldd	r24, Y+5	; 0x05
    2502:	9e 81       	ldd	r25, Y+6	; 0x06
    2504:	da 01       	movw	r26, r20
    2506:	9a 96       	adiw	r26, 0x2a	; 42
    2508:	8d 93       	st	X+, r24
    250a:	9c 93       	st	X, r25
    250c:	9b 97       	sbiw	r26, 0x2b	; 43
    250e:	98 96       	adiw	r26, 0x28	; 40
    2510:	8d 93       	st	X+, r24
    2512:	9c 93       	st	X, r25
    2514:	99 97       	sbiw	r26, 0x29	; 41
    2516:	a0 90 ff 2d 	lds	r10, 0x2DFF
    251a:	b0 90 00 2e 	lds	r11, 0x2E00
    251e:	aa 0c       	add	r10, r10
    2520:	bb 1c       	adc	r11, r11
    2522:	aa 0c       	add	r10, r10
    2524:	bb 1c       	adc	r11, r11
    2526:	aa 0c       	add	r10, r10
    2528:	bb 1c       	adc	r11, r11
    252a:	aa 0c       	add	r10, r10
    252c:	bb 1c       	adc	r11, r11
    252e:	aa 0c       	add	r10, r10
    2530:	bb 1c       	adc	r11, r11
    2532:	fe 01       	movw	r30, r28
    2534:	31 96       	adiw	r30, 0x01	; 1
    2536:	6f 01       	movw	r12, r30
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	e0 e0       	ldi	r30, 0x00	; 0
    253c:	f0 e0       	ldi	r31, 0x00	; 0
    253e:	68 94       	set
    2540:	88 24       	eor	r8, r8
    2542:	86 f8       	bld	r8, 6
    2544:	99 24       	eor	r9, r9
    2546:	93 f8       	bld	r9, 3
    2548:	61 2c       	mov	r6, r1
    254a:	68 94       	set
    254c:	77 24       	eor	r7, r7
    254e:	73 f8       	bld	r7, 3
    2550:	0f 2e       	mov	r0, r31
    2552:	41 2c       	mov	r4, r1
    2554:	f9 e0       	ldi	r31, 0x09	; 9
    2556:	5f 2e       	mov	r5, r31
    2558:	f0 2d       	mov	r31, r0
    255a:	d6 01       	movw	r26, r12
    255c:	2d 91       	ld	r18, X+
    255e:	3d 91       	ld	r19, X+
    2560:	6d 01       	movw	r12, r26
    2562:	21 15       	cp	r18, r1
    2564:	31 05       	cpc	r19, r1
    2566:	69 f1       	breq	.+90     	; 0x25c2 <move_steps+0x1f6>
    2568:	41 30       	cpi	r20, 0x01	; 1
    256a:	81 f0       	breq	.+32     	; 0x258c <move_steps+0x1c0>
    256c:	18 f0       	brcs	.+6      	; 0x2574 <move_steps+0x1a8>
    256e:	42 30       	cpi	r20, 0x02	; 2
    2570:	c9 f0       	breq	.+50     	; 0x25a4 <move_steps+0x1d8>
    2572:	23 c0       	rjmp	.+70     	; 0x25ba <move_steps+0x1ee>
    2574:	c8 01       	movw	r24, r16
    2576:	8e 1b       	sub	r24, r30
    2578:	9f 0b       	sbc	r25, r31
    257a:	b8 01       	movw	r22, r16
    257c:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <__udivmodhi4>
    2580:	d3 01       	movw	r26, r6
    2582:	90 96       	adiw	r26, 0x20	; 32
    2584:	8d 93       	st	X+, r24
    2586:	9c 93       	st	X, r25
    2588:	91 97       	sbiw	r26, 0x21	; 33
    258a:	17 c0       	rjmp	.+46     	; 0x25ba <move_steps+0x1ee>
    258c:	c8 01       	movw	r24, r16
    258e:	8e 1b       	sub	r24, r30
    2590:	9f 0b       	sbc	r25, r31
    2592:	b8 01       	movw	r22, r16
    2594:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <__udivmodhi4>
    2598:	d4 01       	movw	r26, r8
    259a:	90 96       	adiw	r26, 0x20	; 32
    259c:	8d 93       	st	X+, r24
    259e:	9c 93       	st	X, r25
    25a0:	91 97       	sbiw	r26, 0x21	; 33
    25a2:	0b c0       	rjmp	.+22     	; 0x25ba <move_steps+0x1ee>
    25a4:	c8 01       	movw	r24, r16
    25a6:	8e 1b       	sub	r24, r30
    25a8:	9f 0b       	sbc	r25, r31
    25aa:	b8 01       	movw	r22, r16
    25ac:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <__udivmodhi4>
    25b0:	d2 01       	movw	r26, r4
    25b2:	90 96       	adiw	r26, 0x20	; 32
    25b4:	8d 93       	st	X+, r24
    25b6:	9c 93       	st	X, r25
    25b8:	91 97       	sbiw	r26, 0x21	; 33
    25ba:	ea 0d       	add	r30, r10
    25bc:	fb 1d       	adc	r31, r11
    25be:	e2 0f       	add	r30, r18
    25c0:	f3 1f       	adc	r31, r19
    25c2:	4f 5f       	subi	r20, 0xFF	; 255
    25c4:	43 30       	cpi	r20, 0x03	; 3
    25c6:	49 f6       	brne	.-110    	; 0x255a <move_steps+0x18e>
    25c8:	0e 17       	cp	r16, r30
    25ca:	1f 07       	cpc	r17, r31
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <move_steps+0x204>
    25ce:	94 c0       	rjmp	.+296    	; 0x26f8 <move_steps+0x32c>
    25d0:	1f 93       	push	r17
    25d2:	0f 93       	push	r16
    25d4:	ff 93       	push	r31
    25d6:	ef 93       	push	r30
    25d8:	8a eb       	ldi	r24, 0xBA	; 186
    25da:	92 e2       	ldi	r25, 0x22	; 34
    25dc:	9f 93       	push	r25
    25de:	8f 93       	push	r24
    25e0:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	83 c0       	rjmp	.+262    	; 0x26f8 <move_steps+0x32c>
    25f2:	5f 5f       	subi	r21, 0xFF	; 255
    25f4:	4f ef       	ldi	r20, 0xFF	; 255
    25f6:	45 0f       	add	r20, r21
    25f8:	e7 e0       	ldi	r30, 0x07	; 7
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	ec 0f       	add	r30, r28
    25fe:	fd 1f       	adc	r31, r29
    2600:	e4 0f       	add	r30, r20
    2602:	f1 1d       	adc	r31, r1
    2604:	60 81       	ld	r22, Z
    2606:	66 23       	and	r22, r22
    2608:	64 f5       	brge	.+88     	; 0x2662 <move_steps+0x296>
    260a:	41 30       	cpi	r20, 0x01	; 1
    260c:	89 f0       	breq	.+34     	; 0x2630 <move_steps+0x264>
    260e:	18 f0       	brcs	.+6      	; 0x2616 <move_steps+0x24a>
    2610:	42 30       	cpi	r20, 0x02	; 2
    2612:	d9 f0       	breq	.+54     	; 0x264a <move_steps+0x27e>
    2614:	54 c0       	rjmp	.+168    	; 0x26be <move_steps+0x2f2>
    2616:	fc 01       	movw	r30, r24
    2618:	c1 82       	std	Z+1, r12	; 0x01
    261a:	50 96       	adiw	r26, 0x10	; 16
    261c:	7c 93       	st	X, r23
    261e:	50 97       	sbiw	r26, 0x10	; 16
    2620:	15 96       	adiw	r26, 0x05	; 5
    2622:	4c 91       	ld	r20, X
    2624:	15 97       	sbiw	r26, 0x05	; 5
    2626:	42 60       	ori	r20, 0x02	; 2
    2628:	15 96       	adiw	r26, 0x05	; 5
    262a:	4c 93       	st	X, r20
    262c:	15 97       	sbiw	r26, 0x05	; 5
    262e:	e1 cf       	rjmp	.-62     	; 0x25f2 <move_steps+0x226>
    2630:	f9 01       	movw	r30, r18
    2632:	c1 82       	std	Z+1, r12	; 0x01
    2634:	54 96       	adiw	r26, 0x14	; 20
    2636:	7c 93       	st	X, r23
    2638:	54 97       	sbiw	r26, 0x14	; 20
    263a:	15 96       	adiw	r26, 0x05	; 5
    263c:	4c 91       	ld	r20, X
    263e:	15 97       	sbiw	r26, 0x05	; 5
    2640:	40 62       	ori	r20, 0x20	; 32
    2642:	15 96       	adiw	r26, 0x05	; 5
    2644:	4c 93       	st	X, r20
    2646:	15 97       	sbiw	r26, 0x05	; 5
    2648:	d4 cf       	rjmp	.-88     	; 0x25f2 <move_steps+0x226>
    264a:	83 e1       	ldi	r24, 0x13	; 19
    264c:	e0 e0       	ldi	r30, 0x00	; 0
    264e:	f9 e0       	ldi	r31, 0x09	; 9
    2650:	81 83       	std	Z+1, r24	; 0x01
    2652:	e0 e6       	ldi	r30, 0x60	; 96
    2654:	f6 e0       	ldi	r31, 0x06	; 6
    2656:	80 e4       	ldi	r24, 0x40	; 64
    2658:	80 8b       	std	Z+16, r24	; 0x10
    265a:	85 81       	ldd	r24, Z+5	; 0x05
    265c:	82 60       	ori	r24, 0x02	; 2
    265e:	85 83       	std	Z+5, r24	; 0x05
    2660:	31 c0       	rjmp	.+98     	; 0x26c4 <move_steps+0x2f8>
    2662:	16 16       	cp	r1, r22
    2664:	64 f5       	brge	.+88     	; 0x26be <move_steps+0x2f2>
    2666:	41 30       	cpi	r20, 0x01	; 1
    2668:	89 f0       	breq	.+34     	; 0x268c <move_steps+0x2c0>
    266a:	18 f0       	brcs	.+6      	; 0x2672 <move_steps+0x2a6>
    266c:	42 30       	cpi	r20, 0x02	; 2
    266e:	d9 f0       	breq	.+54     	; 0x26a6 <move_steps+0x2da>
    2670:	26 c0       	rjmp	.+76     	; 0x26be <move_steps+0x2f2>
    2672:	fc 01       	movw	r30, r24
    2674:	d1 82       	std	Z+1, r13	; 0x01
    2676:	51 96       	adiw	r26, 0x11	; 17
    2678:	7c 93       	st	X, r23
    267a:	51 97       	sbiw	r26, 0x11	; 17
    267c:	15 96       	adiw	r26, 0x05	; 5
    267e:	4c 91       	ld	r20, X
    2680:	15 97       	sbiw	r26, 0x05	; 5
    2682:	41 60       	ori	r20, 0x01	; 1
    2684:	15 96       	adiw	r26, 0x05	; 5
    2686:	4c 93       	st	X, r20
    2688:	15 97       	sbiw	r26, 0x05	; 5
    268a:	b3 cf       	rjmp	.-154    	; 0x25f2 <move_steps+0x226>
    268c:	f9 01       	movw	r30, r18
    268e:	d1 82       	std	Z+1, r13	; 0x01
    2690:	55 96       	adiw	r26, 0x15	; 21
    2692:	7c 93       	st	X, r23
    2694:	55 97       	sbiw	r26, 0x15	; 21
    2696:	15 96       	adiw	r26, 0x05	; 5
    2698:	4c 91       	ld	r20, X
    269a:	15 97       	sbiw	r26, 0x05	; 5
    269c:	40 61       	ori	r20, 0x10	; 16
    269e:	15 96       	adiw	r26, 0x05	; 5
    26a0:	4c 93       	st	X, r20
    26a2:	15 97       	sbiw	r26, 0x05	; 5
    26a4:	a6 cf       	rjmp	.-180    	; 0x25f2 <move_steps+0x226>
    26a6:	83 e2       	ldi	r24, 0x23	; 35
    26a8:	e0 e0       	ldi	r30, 0x00	; 0
    26aa:	f9 e0       	ldi	r31, 0x09	; 9
    26ac:	81 83       	std	Z+1, r24	; 0x01
    26ae:	e0 e6       	ldi	r30, 0x60	; 96
    26b0:	f6 e0       	ldi	r31, 0x06	; 6
    26b2:	80 e4       	ldi	r24, 0x40	; 64
    26b4:	81 8b       	std	Z+17, r24	; 0x11
    26b6:	85 81       	ldd	r24, Z+5	; 0x05
    26b8:	81 60       	ori	r24, 0x01	; 1
    26ba:	85 83       	std	Z+5, r24	; 0x05
    26bc:	03 c0       	rjmp	.+6      	; 0x26c4 <move_steps+0x2f8>
    26be:	53 30       	cpi	r21, 0x03	; 3
    26c0:	08 f4       	brcc	.+2      	; 0x26c4 <move_steps+0x2f8>
    26c2:	97 cf       	rjmp	.-210    	; 0x25f2 <move_steps+0x226>
    26c4:	98 01       	movw	r18, r16
    26c6:	d7 01       	movw	r26, r14
    26c8:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <__umulhisi3>
    26cc:	68 94       	set
    26ce:	14 f8       	bld	r1, 4
    26d0:	96 95       	lsr	r25
    26d2:	87 95       	ror	r24
    26d4:	77 95       	ror	r23
    26d6:	67 95       	ror	r22
    26d8:	16 94       	lsr	r1
    26da:	d1 f7       	brne	.-12     	; 0x26d0 <move_steps+0x304>
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	47 eb       	ldi	r20, 0xB7	; 183
    26e2:	51 e1       	ldi	r21, 0x11	; 17
    26e4:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <schedule_task>
    26e8:	80 93 9c 2c 	sts	0x2C9C, r24
    26ec:	90 93 9d 2c 	sts	0x2C9D, r25
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	13 c0       	rjmp	.+38     	; 0x271a <move_steps+0x34e>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	11 c0       	rjmp	.+34     	; 0x271a <move_steps+0x34e>
    26f8:	51 e0       	ldi	r21, 0x01	; 1
    26fa:	20 e4       	ldi	r18, 0x40	; 64
    26fc:	38 e0       	ldi	r19, 0x08	; 8
    26fe:	0f 2e       	mov	r0, r31
    2700:	f3 e2       	ldi	r31, 0x23	; 35
    2702:	df 2e       	mov	r13, r31
    2704:	f0 2d       	mov	r31, r0
    2706:	a0 e4       	ldi	r26, 0x40	; 64
    2708:	b6 e0       	ldi	r27, 0x06	; 6
    270a:	70 e4       	ldi	r23, 0x40	; 64
    270c:	80 e0       	ldi	r24, 0x00	; 0
    270e:	98 e0       	ldi	r25, 0x08	; 8
    2710:	0f 2e       	mov	r0, r31
    2712:	f3 e1       	ldi	r31, 0x13	; 19
    2714:	cf 2e       	mov	r12, r31
    2716:	f0 2d       	mov	r31, r0
    2718:	6d cf       	rjmp	.-294    	; 0x25f4 <move_steps+0x228>
    271a:	29 96       	adiw	r28, 0x09	; 9
    271c:	cd bf       	out	0x3d, r28	; 61
    271e:	de bf       	out	0x3e, r29	; 62
    2720:	df 91       	pop	r29
    2722:	cf 91       	pop	r28
    2724:	1f 91       	pop	r17
    2726:	0f 91       	pop	r16
    2728:	ff 90       	pop	r15
    272a:	ef 90       	pop	r14
    272c:	df 90       	pop	r13
    272e:	cf 90       	pop	r12
    2730:	bf 90       	pop	r11
    2732:	af 90       	pop	r10
    2734:	9f 90       	pop	r9
    2736:	8f 90       	pop	r8
    2738:	7f 90       	pop	r7
    273a:	6f 90       	pop	r6
    273c:	5f 90       	pop	r5
    273e:	4f 90       	pop	r4
    2740:	08 95       	ret

00002742 <walk>:
    2742:	af 92       	push	r10
    2744:	bf 92       	push	r11
    2746:	cf 92       	push	r12
    2748:	df 92       	push	r13
    274a:	ef 92       	push	r14
    274c:	ff 92       	push	r15
    274e:	1f 93       	push	r17
    2750:	cf 93       	push	r28
    2752:	df 93       	push	r29
    2754:	18 2f       	mov	r17, r24
    2756:	eb 01       	movw	r28, r22
    2758:	a8 2e       	mov	r10, r24
    275a:	b1 2c       	mov	r11, r1
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 92 38 	call	0x7124	; 0x7124 <__floatunsisf>
    2764:	6b 01       	movw	r12, r22
    2766:	7c 01       	movw	r14, r24
    2768:	f5 01       	movw	r30, r10
    276a:	ee 0f       	add	r30, r30
    276c:	ff 1f       	adc	r31, r31
    276e:	e6 59       	subi	r30, 0x96	; 150
    2770:	f1 4d       	sbci	r31, 0xD1	; 209
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 92 38 	call	0x7124	; 0x7124 <__floatunsisf>
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	4a e7       	ldi	r20, 0x7A	; 122
    2784:	54 e4       	ldi	r21, 0x44	; 68
    2786:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    278a:	9b 01       	movw	r18, r22
    278c:	ac 01       	movw	r20, r24
    278e:	c7 01       	movw	r24, r14
    2790:	b6 01       	movw	r22, r12
    2792:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    2796:	0e 94 66 38 	call	0x70cc	; 0x70cc <__fixunssfsi>
    279a:	e6 2e       	mov	r14, r22
    279c:	f7 2e       	mov	r15, r23
    279e:	7f 93       	push	r23
    27a0:	6f 93       	push	r22
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	1f 92       	push	r1
    27a8:	1f 93       	push	r17
    27aa:	80 e0       	ldi	r24, 0x00	; 0
    27ac:	93 e2       	ldi	r25, 0x23	; 35
    27ae:	9f 93       	push	r25
    27b0:	8f 93       	push	r24
    27b2:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    27b6:	6e 2d       	mov	r22, r14
    27b8:	7f 2d       	mov	r23, r15
    27ba:	81 2f       	mov	r24, r17
    27bc:	07 de       	rcall	.-1010   	; 0x23cc <move_steps>
    27be:	8d b7       	in	r24, 0x3d	; 61
    27c0:	9e b7       	in	r25, 0x3e	; 62
    27c2:	08 96       	adiw	r24, 0x08	; 8
    27c4:	8d bf       	out	0x3d, r24	; 61
    27c6:	9e bf       	out	0x3e, r25	; 62
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	ff 90       	pop	r15
    27d0:	ef 90       	pop	r14
    27d2:	df 90       	pop	r13
    27d4:	cf 90       	pop	r12
    27d6:	bf 90       	pop	r11
    27d8:	af 90       	pop	r10
    27da:	08 95       	ret

000027dc <set_mm_per_kilostep>:
    27dc:	e8 2f       	mov	r30, r24
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	ee 0f       	add	r30, r30
    27e2:	ff 1f       	adc	r31, r31
    27e4:	e6 59       	subi	r30, 0x96	; 150
    27e6:	f1 4d       	sbci	r31, 0xD1	; 209
    27e8:	60 83       	st	Z, r22
    27ea:	71 83       	std	Z+1, r23	; 0x01
    27ec:	08 95       	ret

000027ee <read_motor_settings>:
    27ee:	ff 92       	push	r15
    27f0:	0f 93       	push	r16
    27f2:	1f 93       	push	r17
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	c0 e0       	ldi	r28, 0x00	; 0
    27fa:	d0 e0       	ldi	r29, 0x00	; 0
    27fc:	1b c0       	rjmp	.+54     	; 0x2834 <read_motor_settings+0x46>
    27fe:	ce 01       	movw	r24, r28
    2800:	40 96       	adiw	r24, 0x10	; 16
    2802:	0e 94 10 04 	call	0x820	; 0x820 <EEPROM_read_byte>
    2806:	f8 2e       	mov	r15, r24
    2808:	ce 01       	movw	r24, r28
    280a:	41 96       	adiw	r24, 0x11	; 17
    280c:	0e 94 10 04 	call	0x820	; 0x820 <EEPROM_read_byte>
    2810:	fe 01       	movw	r30, r28
    2812:	e5 56       	subi	r30, 0x65	; 101
    2814:	f0 4d       	sbci	r31, 0xD0	; 208
    2816:	2f 2d       	mov	r18, r15
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	32 2f       	mov	r19, r18
    281c:	22 27       	eor	r18, r18
    281e:	28 2b       	or	r18, r24
    2820:	20 83       	st	Z, r18
    2822:	31 83       	std	Z+1, r19	; 0x01
    2824:	22 96       	adiw	r28, 0x02	; 2
    2826:	c0 17       	cp	r28, r16
    2828:	d1 07       	cpc	r29, r17
    282a:	49 f7       	brne	.-46     	; 0x27fe <read_motor_settings+0x10>
    282c:	00 33       	cpi	r16, 0x30	; 48
    282e:	11 05       	cpc	r17, r1
    2830:	29 f0       	breq	.+10     	; 0x283c <read_motor_settings+0x4e>
    2832:	e8 01       	movw	r28, r16
    2834:	8e 01       	movw	r16, r28
    2836:	0a 5f       	subi	r16, 0xFA	; 250
    2838:	1f 4f       	sbci	r17, 0xFF	; 255
    283a:	e1 cf       	rjmp	.-62     	; 0x27fe <read_motor_settings+0x10>
    283c:	0a e6       	ldi	r16, 0x6A	; 106
    283e:	1e e2       	ldi	r17, 0x2E	; 46
    2840:	c0 e4       	ldi	r28, 0x40	; 64
    2842:	d0 e0       	ldi	r29, 0x00	; 0
    2844:	ce 01       	movw	r24, r28
    2846:	0e 94 10 04 	call	0x820	; 0x820 <EEPROM_read_byte>
    284a:	f8 2e       	mov	r15, r24
    284c:	ce 01       	movw	r24, r28
    284e:	01 96       	adiw	r24, 0x01	; 1
    2850:	0e 94 10 04 	call	0x820	; 0x820 <EEPROM_read_byte>
    2854:	2f 2d       	mov	r18, r15
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	32 2f       	mov	r19, r18
    285a:	22 27       	eor	r18, r18
    285c:	28 2b       	or	r18, r24
    285e:	f8 01       	movw	r30, r16
    2860:	21 93       	st	Z+, r18
    2862:	31 93       	st	Z+, r19
    2864:	8f 01       	movw	r16, r30
    2866:	22 96       	adiw	r28, 0x02	; 2
    2868:	c0 35       	cpi	r28, 0x50	; 80
    286a:	d1 05       	cpc	r29, r1
    286c:	59 f7       	brne	.-42     	; 0x2844 <read_motor_settings+0x56>
    286e:	df 91       	pop	r29
    2870:	cf 91       	pop	r28
    2872:	1f 91       	pop	r17
    2874:	0f 91       	pop	r16
    2876:	ff 90       	pop	r15
    2878:	08 95       	ret

0000287a <motor_init>:
    287a:	83 e3       	ldi	r24, 0x33	; 51
    287c:	e0 e4       	ldi	r30, 0x40	; 64
    287e:	f6 e0       	ldi	r31, 0x06	; 6
    2880:	81 83       	std	Z+1, r24	; 0x01
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	e0 e6       	ldi	r30, 0x60	; 96
    2886:	f6 e0       	ldi	r31, 0x06	; 6
    2888:	81 83       	std	Z+1, r24	; 0x01
    288a:	e0 e0       	ldi	r30, 0x00	; 0
    288c:	f8 e0       	ldi	r31, 0x08	; 8
    288e:	97 e0       	ldi	r25, 0x07	; 7
    2890:	90 83       	st	Z, r25
    2892:	81 83       	std	Z+1, r24	; 0x01
    2894:	e0 e4       	ldi	r30, 0x40	; 64
    2896:	f8 e0       	ldi	r31, 0x08	; 8
    2898:	90 83       	st	Z, r25
    289a:	81 83       	std	Z+1, r24	; 0x01
    289c:	e0 e0       	ldi	r30, 0x00	; 0
    289e:	f9 e0       	ldi	r31, 0x09	; 9
    28a0:	90 83       	st	Z, r25
    28a2:	81 83       	std	Z+1, r24	; 0x01
    28a4:	10 92 e6 2c 	sts	0x2CE6, r1
    28a8:	84 e1       	ldi	r24, 0x14	; 20
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	80 93 dd 2d 	sts	0x2DDD, r24
    28b0:	90 93 de 2d 	sts	0x2DDE, r25
    28b4:	8e e1       	ldi	r24, 0x1E	; 30
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	80 93 ff 2d 	sts	0x2DFF, r24
    28bc:	90 93 00 2e 	sts	0x2E00, r25
    28c0:	96 cf       	rjmp	.-212    	; 0x27ee <read_motor_settings>
    28c2:	08 95       	ret

000028c4 <write_motor_settings>:
    28c4:	ff 92       	push	r15
    28c6:	0f 93       	push	r16
    28c8:	1f 93       	push	r17
    28ca:	cf 93       	push	r28
    28cc:	df 93       	push	r29
    28ce:	c0 e0       	ldi	r28, 0x00	; 0
    28d0:	d0 e0       	ldi	r29, 0x00	; 0
    28d2:	16 c0       	rjmp	.+44     	; 0x2900 <write_motor_settings+0x3c>
    28d4:	fe 01       	movw	r30, r28
    28d6:	e5 56       	subi	r30, 0x65	; 101
    28d8:	f0 4d       	sbci	r31, 0xD0	; 208
    28da:	f0 80       	ld	r15, Z
    28dc:	61 81       	ldd	r22, Z+1	; 0x01
    28de:	ce 01       	movw	r24, r28
    28e0:	40 96       	adiw	r24, 0x10	; 16
    28e2:	0e 94 2b 04 	call	0x856	; 0x856 <EEPROM_write_byte>
    28e6:	6f 2d       	mov	r22, r15
    28e8:	ce 01       	movw	r24, r28
    28ea:	41 96       	adiw	r24, 0x11	; 17
    28ec:	0e 94 2b 04 	call	0x856	; 0x856 <EEPROM_write_byte>
    28f0:	22 96       	adiw	r28, 0x02	; 2
    28f2:	c0 17       	cp	r28, r16
    28f4:	d1 07       	cpc	r29, r17
    28f6:	71 f7       	brne	.-36     	; 0x28d4 <write_motor_settings+0x10>
    28f8:	00 33       	cpi	r16, 0x30	; 48
    28fa:	11 05       	cpc	r17, r1
    28fc:	29 f0       	breq	.+10     	; 0x2908 <write_motor_settings+0x44>
    28fe:	e8 01       	movw	r28, r16
    2900:	8e 01       	movw	r16, r28
    2902:	0a 5f       	subi	r16, 0xFA	; 250
    2904:	1f 4f       	sbci	r17, 0xFF	; 255
    2906:	e6 cf       	rjmp	.-52     	; 0x28d4 <write_motor_settings+0x10>
    2908:	0a e6       	ldi	r16, 0x6A	; 106
    290a:	1e e2       	ldi	r17, 0x2E	; 46
    290c:	c0 e4       	ldi	r28, 0x40	; 64
    290e:	d0 e0       	ldi	r29, 0x00	; 0
    2910:	f8 01       	movw	r30, r16
    2912:	f0 80       	ld	r15, Z
    2914:	61 81       	ldd	r22, Z+1	; 0x01
    2916:	0e 5f       	subi	r16, 0xFE	; 254
    2918:	1f 4f       	sbci	r17, 0xFF	; 255
    291a:	ce 01       	movw	r24, r28
    291c:	0e 94 2b 04 	call	0x856	; 0x856 <EEPROM_write_byte>
    2920:	6f 2d       	mov	r22, r15
    2922:	ce 01       	movw	r24, r28
    2924:	01 96       	adiw	r24, 0x01	; 1
    2926:	0e 94 2b 04 	call	0x856	; 0x856 <EEPROM_write_byte>
    292a:	22 96       	adiw	r28, 0x02	; 2
    292c:	c0 35       	cpi	r28, 0x50	; 80
    292e:	d1 05       	cpc	r29, r1
    2930:	79 f7       	brne	.-34     	; 0x2910 <write_motor_settings+0x4c>
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	08 95       	ret

0000293e <print_motor_values>:
    293e:	9f 92       	push	r9
    2940:	af 92       	push	r10
    2942:	bf 92       	push	r11
    2944:	cf 92       	push	r12
    2946:	df 92       	push	r13
    2948:	ef 92       	push	r14
    294a:	ff 92       	push	r15
    294c:	0f 93       	push	r16
    294e:	1f 93       	push	r17
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	8d e3       	ldi	r24, 0x3D	; 61
    2956:	93 e2       	ldi	r25, 0x23	; 35
    2958:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    295c:	0f 2e       	mov	r0, r31
    295e:	fb e9       	ldi	r31, 0x9B	; 155
    2960:	cf 2e       	mov	r12, r31
    2962:	ff e2       	ldi	r31, 0x2F	; 47
    2964:	df 2e       	mov	r13, r31
    2966:	f0 2d       	mov	r31, r0
    2968:	e1 2c       	mov	r14, r1
    296a:	f1 2c       	mov	r15, r1
    296c:	0f 2e       	mov	r0, r31
    296e:	fb e4       	ldi	r31, 0x4B	; 75
    2970:	af 2e       	mov	r10, r31
    2972:	f3 e2       	ldi	r31, 0x23	; 35
    2974:	bf 2e       	mov	r11, r31
    2976:	f0 2d       	mov	r31, r0
    2978:	01 e5       	ldi	r16, 0x51	; 81
    297a:	13 e2       	ldi	r17, 0x23	; 35
    297c:	ff 92       	push	r15
    297e:	ef 92       	push	r14
    2980:	bf 92       	push	r11
    2982:	af 92       	push	r10
    2984:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	e6 01       	movw	r28, r12
    2992:	91 2c       	mov	r9, r1
    2994:	88 81       	ld	r24, Y
    2996:	99 81       	ldd	r25, Y+1	; 0x01
    2998:	22 96       	adiw	r28, 0x02	; 2
    299a:	9f 93       	push	r25
    299c:	8f 93       	push	r24
    299e:	1f 93       	push	r17
    29a0:	0f 93       	push	r16
    29a2:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    29a6:	93 94       	inc	r9
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	83 e0       	ldi	r24, 0x03	; 3
    29b2:	98 12       	cpse	r9, r24
    29b4:	ef cf       	rjmp	.-34     	; 0x2994 <print_motor_values+0x56>
    29b6:	8f e6       	ldi	r24, 0x6F	; 111
    29b8:	9c e2       	ldi	r25, 0x2C	; 44
    29ba:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    29be:	8f ef       	ldi	r24, 0xFF	; 255
    29c0:	e8 1a       	sub	r14, r24
    29c2:	f8 0a       	sbc	r15, r24
    29c4:	86 e0       	ldi	r24, 0x06	; 6
    29c6:	c8 0e       	add	r12, r24
    29c8:	d1 1c       	adc	r13, r1
    29ca:	88 e0       	ldi	r24, 0x08	; 8
    29cc:	e8 16       	cp	r14, r24
    29ce:	f1 04       	cpc	r15, r1
    29d0:	a9 f6       	brne	.-86     	; 0x297c <print_motor_values+0x3e>
    29d2:	8f e6       	ldi	r24, 0x6F	; 111
    29d4:	9c e2       	ldi	r25, 0x2C	; 44
    29d6:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	cf 90       	pop	r12
    29ea:	bf 90       	pop	r11
    29ec:	af 90       	pop	r10
    29ee:	9f 90       	pop	r9
    29f0:	08 95       	ret

000029f2 <print_dist_per_step>:
	// TODO: Deprecated?
}

void print_dist_per_step()
{
    29f2:	ef 92       	push	r14
    29f4:	ff 92       	push	r15
    29f6:	0f 93       	push	r16
    29f8:	1f 93       	push	r17
    29fa:	cf 93       	push	r28
    29fc:	df 93       	push	r29
	printf("Dist (mm) per kilostep\r\n");
    29fe:	85 e5       	ldi	r24, 0x55	; 85
    2a00:	93 e2       	ldi	r25, 0x23	; 35
    2a02:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    2a06:	0a e6       	ldi	r16, 0x6A	; 106
    2a08:	1e e2       	ldi	r17, 0x2E	; 46
    2a0a:	c0 e0       	ldi	r28, 0x00	; 0
    2a0c:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf("\t%i\t%hu\r\n", direction, mm_per_kilostep[direction]);	
    2a0e:	0f 2e       	mov	r0, r31
    2a10:	fd e6       	ldi	r31, 0x6D	; 109
    2a12:	ef 2e       	mov	r14, r31
    2a14:	f3 e2       	ldi	r31, 0x23	; 35
    2a16:	ff 2e       	mov	r15, r31
    2a18:	f0 2d       	mov	r31, r0
    2a1a:	f8 01       	movw	r30, r16
    2a1c:	80 81       	ld	r24, Z
    2a1e:	91 81       	ldd	r25, Z+1	; 0x01
    2a20:	0e 5f       	subi	r16, 0xFE	; 254
    2a22:	1f 4f       	sbci	r17, 0xFF	; 255
    2a24:	9f 93       	push	r25
    2a26:	8f 93       	push	r24
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	ff 92       	push	r15
    2a2e:	ef 92       	push	r14
    2a30:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    2a34:	21 96       	adiw	r28, 0x01	; 1
}

void print_dist_per_step()
{
	printf("Dist (mm) per kilostep\r\n");
	for(uint8_t direction = 0 ; direction<8; direction++)
    2a36:	0f 90       	pop	r0
    2a38:	0f 90       	pop	r0
    2a3a:	0f 90       	pop	r0
    2a3c:	0f 90       	pop	r0
    2a3e:	0f 90       	pop	r0
    2a40:	0f 90       	pop	r0
    2a42:	c8 30       	cpi	r28, 0x08	; 8
    2a44:	d1 05       	cpc	r29, r1
    2a46:	49 f7       	brne	.-46     	; 0x2a1a <print_dist_per_step+0x28>
	{
		printf("\t%i\t%hu\r\n", direction, mm_per_kilostep[direction]);	
	}
    2a48:	df 91       	pop	r29
    2a4a:	cf 91       	pop	r28
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	ff 90       	pop	r15
    2a52:	ef 90       	pop	r14
    2a54:	08 95       	ret

00002a56 <pc_comm_putchar>:
	serial_in_index = temp_index;
}

int pc_comm_putchar(char c, FILE *stream)
{
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    2a56:	e0 eb       	ldi	r30, 0xB0	; 176
    2a58:	f9 e0       	ldi	r31, 0x09	; 9
    2a5a:	91 81       	ldd	r25, Z+1	; 0x01
    2a5c:	95 ff       	sbrs	r25, 5
    2a5e:	fd cf       	rjmp	.-6      	; 0x2a5a <pc_comm_putchar+0x4>
	PC_USART.DATA = c;
    2a60:	80 93 b0 09 	sts	0x09B0, r24
	return 1;
}
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	08 95       	ret

00002a6a <pc_comm_init>:

static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pc_comm_init()
{
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    2a6a:	e0 e6       	ldi	r30, 0x60	; 96
    2a6c:	f6 e0       	ldi	r31, 0x06	; 6
    2a6e:	80 e8       	ldi	r24, 0x80	; 128
    2a70:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    2a72:	80 e4       	ldi	r24, 0x40	; 64
    2a74:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    2a76:	e0 eb       	ldi	r30, 0xB0	; 176
    2a78:	f9 e0       	ldi	r31, 0x09	; 9
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    2a7e:	87 e1       	ldi	r24, 0x17	; 23
    2a80:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    2a82:	84 ea       	ldi	r24, 0xA4	; 164
    2a84:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    2a86:	84 81       	ldd	r24, Z+4	; 0x04
    2a88:	80 61       	ori	r24, 0x10	; 16
    2a8a:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    2a8c:	84 81       	ldd	r24, Z+4	; 0x04
    2a8e:	88 60       	ori	r24, 0x08	; 8
    2a90:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    2a92:	82 e1       	ldi	r24, 0x12	; 18
    2a94:	90 e2       	ldi	r25, 0x20	; 32
    2a96:	80 93 05 33 	sts	0x3305, r24
    2a9a:	90 93 06 33 	sts	0x3306, r25
	serial_in_index = 0;
    2a9e:	10 92 e4 2c 	sts	0x2CE4, r1
    2aa2:	10 92 e5 2c 	sts	0x2CE5, r1
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_LO_gc;
    2aa6:	80 e1       	ldi	r24, 0x10	; 16
    2aa8:	83 83       	std	Z+3, r24	; 0x03
    2aaa:	08 95       	ret

00002aac <handle_up_arrow>:
		putchar(data);
	}
}

void handle_up_arrow()
{
    2aac:	1f 93       	push	r17
    2aae:	cf 93       	push	r28
    2ab0:	df 93       	push	r29
	uint8_t temp_index = serial_in_index;
    2ab2:	80 91 e4 2c 	lds	r24, 0x2CE4
    2ab6:	90 91 e5 2c 	lds	r25, 0x2CE5
    2aba:	18 2f       	mov	r17, r24
    2abc:	fc 01       	movw	r30, r24
    2abe:	ff 27       	eor	r31, r31
			
	while(serial_in_buffer[temp_index] != '\0')
    2ac0:	ec 55       	subi	r30, 0x5C	; 92
    2ac2:	f3 4d       	sbci	r31, 0xD3	; 211
    2ac4:	80 81       	ld	r24, Z
    2ac6:	88 23       	and	r24, r24
    2ac8:	79 f0       	breq	.+30     	; 0x2ae8 <handle_up_arrow+0x3c>
	{
		putchar(serial_in_buffer[temp_index]);
    2aca:	c5 e0       	ldi	r28, 0x05	; 5
    2acc:	d3 e3       	ldi	r29, 0x33	; 51
    2ace:	68 81       	ld	r22, Y
    2ad0:	79 81       	ldd	r23, Y+1	; 0x01
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	0e 94 45 41 	call	0x828a	; 0x828a <fputc>
		temp_index++;
    2ad8:	1f 5f       	subi	r17, 0xFF	; 255

void handle_up_arrow()
{
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0')
    2ada:	e1 2f       	mov	r30, r17
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	ec 55       	subi	r30, 0x5C	; 92
    2ae0:	f3 4d       	sbci	r31, 0xD3	; 211
    2ae2:	80 81       	ld	r24, Z
    2ae4:	81 11       	cpse	r24, r1
    2ae6:	f3 cf       	rjmp	.-26     	; 0x2ace <handle_up_arrow+0x22>
	{
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    2ae8:	81 2f       	mov	r24, r17
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	80 93 e4 2c 	sts	0x2CE4, r24
    2af0:	90 93 e5 2c 	sts	0x2CE5, r25
}
    2af4:	df 91       	pop	r29
    2af6:	cf 91       	pop	r28
    2af8:	1f 91       	pop	r17
    2afa:	08 95       	ret

00002afc <handle_serial_input>:

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }

void handle_serial_input()
{
	char data = PC_USART.DATA;
    2afc:	80 91 b0 09 	lds	r24, 0x09B0
	if(escaped_arrow==1)
    2b00:	90 91 9a 2f 	lds	r25, 0x2F9A
    2b04:	91 30       	cpi	r25, 0x01	; 1
    2b06:	31 f4       	brne	.+12     	; 0x2b14 <handle_serial_input+0x18>
	{
		if(data == 65)
    2b08:	81 34       	cpi	r24, 0x41	; 65
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <handle_serial_input+0x12>
		{
			handle_up_arrow();
    2b0c:	cf df       	rcall	.-98     	; 0x2aac <handle_up_arrow>
		}
		escaped_arrow=0;
    2b0e:	10 92 9a 2f 	sts	0x2F9A, r1
    2b12:	08 95       	ret
	}
	else if(escaped)
    2b14:	90 91 a3 2c 	lds	r25, 0x2CA3
    2b18:	99 23       	and	r25, r25
    2b1a:	41 f0       	breq	.+16     	; 0x2b2c <handle_serial_input+0x30>
	{
		if(data == 91)
    2b1c:	8b 35       	cpi	r24, 0x5B	; 91
    2b1e:	19 f4       	brne	.+6      	; 0x2b26 <handle_serial_input+0x2a>
		{
			escaped_arrow=1;	
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	80 93 9a 2f 	sts	0x2F9A, r24
		}
		escaped=0;
    2b26:	10 92 a3 2c 	sts	0x2CA3, r1
    2b2a:	08 95       	ret
	}
	else if(data == '\r' || data == '\n') //We got the newline character.
    2b2c:	8d 30       	cpi	r24, 0x0D	; 13
    2b2e:	11 f0       	breq	.+4      	; 0x2b34 <handle_serial_input+0x38>
    2b30:	8a 30       	cpi	r24, 0x0A	; 10
    2b32:	a9 f4       	brne	.+42     	; 0x2b5e <handle_serial_input+0x62>
	{
		printf("\r\n");
    2b34:	8f e6       	ldi	r24, 0x6F	; 111
    2b36:	9c e2       	ldi	r25, 0x2C	; 44
    2b38:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		serial_in_buffer[serial_in_index]='\0';
    2b3c:	60 91 e4 2c 	lds	r22, 0x2CE4
    2b40:	70 91 e5 2c 	lds	r23, 0x2CE5
    2b44:	fb 01       	movw	r30, r22
    2b46:	ec 55       	subi	r30, 0x5C	; 92
    2b48:	f3 4d       	sbci	r31, 0xD3	; 211
    2b4a:	10 82       	st	Z, r1
		handle_serial_command(serial_in_buffer,serial_in_index);
    2b4c:	84 ea       	ldi	r24, 0xA4	; 164
    2b4e:	9c e2       	ldi	r25, 0x2C	; 44
    2b50:	0e 94 a3 2d 	call	0x5b46	; 0x5b46 <handle_serial_command>
		serial_in_index = 0;
    2b54:	10 92 e4 2c 	sts	0x2CE4, r1
    2b58:	10 92 e5 2c 	sts	0x2CE5, r1
    2b5c:	08 95       	ret
	}
	else if(data == '\b') //We got the backspace character.
    2b5e:	88 30       	cpi	r24, 0x08	; 8
    2b60:	a1 f4       	brne	.+40     	; 0x2b8a <handle_serial_input+0x8e>
	{
		if(serial_in_index > 0) serial_in_index--;
    2b62:	80 91 e4 2c 	lds	r24, 0x2CE4
    2b66:	90 91 e5 2c 	lds	r25, 0x2CE5
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	29 f0       	breq	.+10     	; 0x2b78 <handle_serial_input+0x7c>
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	80 93 e4 2c 	sts	0x2CE4, r24
    2b74:	90 93 e5 2c 	sts	0x2CE5, r25
		printf("\b \b");
    2b78:	87 e7       	ldi	r24, 0x77	; 119
    2b7a:	93 e2       	ldi	r25, 0x23	; 35
    2b7c:	9f 93       	push	r25
    2b7e:	8f 93       	push	r24
    2b80:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	08 95       	ret
	}
	else if(data == 27) //escape pressed.
    2b8a:	8b 31       	cpi	r24, 0x1B	; 27
    2b8c:	21 f4       	brne	.+8      	; 0x2b96 <handle_serial_input+0x9a>
	{
		escaped = 1;
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	80 93 a3 2c 	sts	0x2CA3, r24
    2b94:	08 95       	ret
	}
	else if(serial_in_index==BUFFER_SIZE) //Buffer overflow
    2b96:	20 91 e4 2c 	lds	r18, 0x2CE4
    2b9a:	30 91 e5 2c 	lds	r19, 0x2CE5
    2b9e:	20 34       	cpi	r18, 0x40	; 64
    2ba0:	31 05       	cpc	r19, r1
    2ba2:	91 f4       	brne	.+36     	; 0x2bc8 <handle_serial_input+0xcc>
	{
		printf("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n",BUFFER_SIZE);
    2ba4:	1f 92       	push	r1
    2ba6:	80 e4       	ldi	r24, 0x40	; 64
    2ba8:	8f 93       	push	r24
    2baa:	8b e7       	ldi	r24, 0x7B	; 123
    2bac:	93 e2       	ldi	r25, 0x23	; 35
    2bae:	9f 93       	push	r25
    2bb0:	8f 93       	push	r24
    2bb2:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
		serial_in_index = 0;
    2bb6:	10 92 e4 2c 	sts	0x2CE4, r1
    2bba:	10 92 e5 2c 	sts	0x2CE5, r1
    2bbe:	0f 90       	pop	r0
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
    2bc4:	0f 90       	pop	r0
    2bc6:	08 95       	ret
	}
	else //Everything is fine. Add the character to the buffer.
	{
		serial_in_buffer[serial_in_index] = data;
    2bc8:	f9 01       	movw	r30, r18
    2bca:	ec 55       	subi	r30, 0x5C	; 92
    2bcc:	f3 4d       	sbci	r31, 0xD3	; 211
    2bce:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    2bd0:	2f 5f       	subi	r18, 0xFF	; 255
    2bd2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd4:	20 93 e4 2c 	sts	0x2CE4, r18
    2bd8:	30 93 e5 2c 	sts	0x2CE5, r19
		putchar(data);
    2bdc:	60 91 05 33 	lds	r22, 0x3305
    2be0:	70 91 06 33 	lds	r23, 0x3306
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0c 94 45 41 	jmp	0x828a	; 0x828a <fputc>
    2bea:	08 95       	ret

00002bec <__vector_91>:
	serial_in_index = 0;
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_LO_gc;
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    2bec:	1f 92       	push	r1
    2bee:	0f 92       	push	r0
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	0f 92       	push	r0
    2bf4:	11 24       	eor	r1, r1
    2bf6:	0b b6       	in	r0, 0x3b	; 59
    2bf8:	0f 92       	push	r0
    2bfa:	2f 93       	push	r18
    2bfc:	3f 93       	push	r19
    2bfe:	4f 93       	push	r20
    2c00:	5f 93       	push	r21
    2c02:	6f 93       	push	r22
    2c04:	7f 93       	push	r23
    2c06:	8f 93       	push	r24
    2c08:	9f 93       	push	r25
    2c0a:	af 93       	push	r26
    2c0c:	bf 93       	push	r27
    2c0e:	ef 93       	push	r30
    2c10:	ff 93       	push	r31
    2c12:	74 df       	rcall	.-280    	; 0x2afc <handle_serial_input>
    2c14:	ff 91       	pop	r31
    2c16:	ef 91       	pop	r30
    2c18:	bf 91       	pop	r27
    2c1a:	af 91       	pop	r26
    2c1c:	9f 91       	pop	r25
    2c1e:	8f 91       	pop	r24
    2c20:	7f 91       	pop	r23
    2c22:	6f 91       	pop	r22
    2c24:	5f 91       	pop	r21
    2c26:	4f 91       	pop	r20
    2c28:	3f 91       	pop	r19
    2c2a:	2f 91       	pop	r18
    2c2c:	0f 90       	pop	r0
    2c2e:	0b be       	out	0x3b, r0	; 59
    2c30:	0f 90       	pop	r0
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	0f 90       	pop	r0
    2c36:	1f 90       	pop	r1
    2c38:	18 95       	reti

00002c3a <cap_monitor_init>:
}


void cap_monitor_init()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    2c3a:	83 e0       	ldi	r24, 0x03	; 3
    2c3c:	e0 e2       	ldi	r30, 0x20	; 32
    2c3e:	f6 e0       	ldi	r31, 0x06	; 6
    2c40:	82 83       	std	Z+2, r24	; 0x02
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    2c42:	e0 e9       	ldi	r30, 0x90	; 144
    2c44:	f3 e0       	ldi	r31, 0x03	; 3
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    2c4a:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc; //Changed the muxneg from bandgap
    2c4c:	88 e0       	ldi	r24, 0x08	; 8
    2c4e:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    2c50:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    2c52:	80 e1       	ldi	r24, 0x10	; 16
    2c54:	86 83       	std	Z+6, r24	; 0x06
    2c56:	08 95       	ret

00002c58 <leg_monitor_init>:
}

void leg_monitor_init()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    2c58:	8f e1       	ldi	r24, 0x1F	; 31
    2c5a:	e0 e0       	ldi	r30, 0x00	; 0
    2c5c:	f6 e0       	ldi	r31, 0x06	; 6
    2c5e:	82 83       	std	Z+2, r24	; 0x02
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    2c60:	e0 e8       	ldi	r30, 0x80	; 128
    2c62:	f3 e0       	ldi	r31, 0x03	; 3
    2c64:	89 e0       	ldi	r24, 0x09	; 9
    2c66:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    2c68:	81 83       	std	Z+1, r24	; 0x01
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc;			// PA0 is VREF_HI
    2c6a:	12 82       	std	Z+2, r1	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc;			// PA1 is VREF_LO
    2c6c:	81 e0       	ldi	r24, 0x01	; 1
    2c6e:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0MUXCTRL |= AC_MUXPOS_PIN2_gc;		// Initially, look at leg1
    2c70:	82 81       	ldd	r24, Z+2	; 0x02
    2c72:	80 61       	ori	r24, 0x10	; 16
    2c74:	82 83       	std	Z+2, r24	; 0x02
	ACA.AC1MUXCTRL |= AC_MUXPOS_PIN2_gc;
    2c76:	83 81       	ldd	r24, Z+3	; 0x03
    2c78:	80 61       	ori	r24, 0x10	; 16
    2c7a:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    2c7c:	80 e1       	ldi	r24, 0x10	; 16
    2c7e:	86 83       	std	Z+6, r24	; 0x06
    2c80:	08 95       	ret

00002c82 <power_init>:
#include "power.h"

void power_init()
{
	cap_monitor_init();
    2c82:	db df       	rcall	.-74     	; 0x2c3a <cap_monitor_init>
	leg_monitor_init();
    2c84:	e9 cf       	rjmp	.-46     	; 0x2c58 <leg_monitor_init>
    2c86:	08 95       	ret

00002c88 <random_init>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    2c88:	e0 ec       	ldi	r30, 0xC0	; 192
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 e2       	ldi	r24, 0x20	; 32
    2c8e:	80 83       	st	Z, r24
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    2c90:	88 b1       	in	r24, 0x08	; 8
    2c92:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    2c94:	89 b1       	in	r24, 0x09	; 9
    2c96:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    2c98:	8a b1       	in	r24, 0x0a	; 10
    2c9a:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    2c9c:	8b b1       	in	r24, 0x0b	; 11
    2c9e:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    2ca0:	8c b1       	in	r24, 0x0c	; 12
    2ca2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    2ca4:	8d b1       	in	r24, 0x0d	; 13
    2ca6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_WAFNUM;
    2ca8:	80 b3       	in	r24, 0x10	; 16
    2caa:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDX0;
    2cac:	82 b3       	in	r24, 0x12	; 18
    2cae:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_COORDX1;
    2cb0:	83 b3       	in	r24, 0x13	; 19
    2cb2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY0;
    2cb4:	84 b3       	in	r24, 0x14	; 20
    2cb6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY1;
    2cb8:	85 b3       	in	r24, 0x15	; 21
    2cba:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH0.RESL;
    2cbc:	a0 e0       	ldi	r26, 0x00	; 0
    2cbe:	b2 e0       	ldi	r27, 0x02	; 2
    2cc0:	94 96       	adiw	r26, 0x24	; 36
    2cc2:	8c 91       	ld	r24, X
    2cc4:	94 97       	sbiw	r26, 0x24	; 36
    2cc6:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = ADCA.CH1.RESL;
    2cc8:	9c 96       	adiw	r26, 0x2c	; 44
    2cca:	8c 91       	ld	r24, X
    2ccc:	9c 97       	sbiw	r26, 0x2c	; 44
    2cce:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH2.RESL;
    2cd0:	d4 96       	adiw	r26, 0x34	; 52
    2cd2:	8c 91       	ld	r24, X
    2cd4:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH0.RESL;
    2cd6:	a0 e4       	ldi	r26, 0x40	; 64
    2cd8:	b2 e0       	ldi	r27, 0x02	; 2
    2cda:	94 96       	adiw	r26, 0x24	; 36
    2cdc:	8c 91       	ld	r24, X
    2cde:	94 97       	sbiw	r26, 0x24	; 36
    2ce0:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH1.RESL;
    2ce2:	9c 96       	adiw	r26, 0x2c	; 44
    2ce4:	8c 91       	ld	r24, X
    2ce6:	83 83       	std	Z+3, r24	; 0x03

	r_round = 1;
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	80 93 18 30 	sts	0x3018, r24
    2cee:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    2cf0:	91 e0       	ldi	r25, 0x01	; 1
    2cf2:	92 83       	std	Z+2, r25	; 0x02
    2cf4:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    2cf6:	e9 f7       	brne	.-6      	; 0x2cf2 <random_init+0x6a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    2cf8:	84 e8       	ldi	r24, 0x84	; 132
    2cfa:	80 93 c0 00 	sts	0x00C0, r24

	r_position = 0;
    2cfe:	10 92 19 30 	sts	0x3019, r1
    2d02:	08 95       	ret

00002d04 <range_algs_init>:
{
	if(power==255)			return 2*(1.36255 + (298.285/((0.691321+r)*(0.691321+r))));
	//else if(power ==250)	return (1100./((r-4.)*(r-4.)))+12.5;
	else					printf("ERROR: Unexpected power: %hhu\r\n",power);
	return 0;
}
    2d04:	8e e2       	ldi	r24, 0x2E	; 46
    2d06:	90 e3       	ldi	r25, 0x30	; 48
    2d08:	22 e3       	ldi	r18, 0x32	; 50
    2d0a:	30 e3       	ldi	r19, 0x30	; 48
    2d0c:	14 c0       	rjmp	.+40     	; 0x2d36 <range_algs_init+0x32>
    2d0e:	df 01       	movw	r26, r30
    2d10:	54 97       	sbiw	r26, 0x14	; 20
    2d12:	1c 92       	st	X, r1
    2d14:	14 96       	adiw	r26, 0x04	; 4
    2d16:	1c 92       	st	X, r1
    2d18:	14 96       	adiw	r26, 0x04	; 4
    2d1a:	1c 92       	st	X, r1
    2d1c:	14 96       	adiw	r26, 0x04	; 4
    2d1e:	1c 92       	st	X, r1
    2d20:	14 96       	adiw	r26, 0x04	; 4
    2d22:	1c 92       	st	X, r1
    2d24:	10 82       	st	Z, r1
    2d26:	4f 5f       	subi	r20, 0xFF	; 255
    2d28:	78 96       	adiw	r30, 0x18	; 24
    2d2a:	46 30       	cpi	r20, 0x06	; 6
    2d2c:	81 f7       	brne	.-32     	; 0x2d0e <range_algs_init+0xa>
    2d2e:	01 96       	adiw	r24, 0x01	; 1
    2d30:	82 17       	cp	r24, r18
    2d32:	93 07       	cpc	r25, r19
    2d34:	19 f0       	breq	.+6      	; 0x2d3c <range_algs_init+0x38>
    2d36:	fc 01       	movw	r30, r24
    2d38:	40 e0       	ldi	r20, 0x00	; 0
    2d3a:	e9 cf       	rjmp	.-46     	; 0x2d0e <range_algs_init+0xa>
    2d3c:	08 95       	ret

00002d3e <get_bearing>:
    2d3e:	2f 92       	push	r2
    2d40:	3f 92       	push	r3
    2d42:	4f 92       	push	r4
    2d44:	5f 92       	push	r5
    2d46:	6f 92       	push	r6
    2d48:	7f 92       	push	r7
    2d4a:	8f 92       	push	r8
    2d4c:	9f 92       	push	r9
    2d4e:	af 92       	push	r10
    2d50:	bf 92       	push	r11
    2d52:	cf 92       	push	r12
    2d54:	df 92       	push	r13
    2d56:	ef 92       	push	r14
    2d58:	ff 92       	push	r15
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	cf 93       	push	r28
    2d60:	df 93       	push	r29
    2d62:	c8 e3       	ldi	r28, 0x38	; 56
    2d64:	d0 e2       	ldi	r29, 0x20	; 32
    2d66:	8c 01       	movw	r16, r24
    2d68:	0f 2e       	mov	r0, r31
    2d6a:	f8 e6       	ldi	r31, 0x68	; 104
    2d6c:	2f 2e       	mov	r2, r31
    2d6e:	f0 e2       	ldi	r31, 0x20	; 32
    2d70:	3f 2e       	mov	r3, r31
    2d72:	f0 2d       	mov	r31, r0
    2d74:	81 2c       	mov	r8, r1
    2d76:	91 2c       	mov	r9, r1
    2d78:	54 01       	movw	r10, r8
    2d7a:	24 01       	movw	r4, r8
    2d7c:	35 01       	movw	r6, r10
    2d7e:	f8 01       	movw	r30, r16
    2d80:	61 91       	ld	r22, Z+
    2d82:	8f 01       	movw	r16, r30
    2d84:	70 e0       	ldi	r23, 0x00	; 0
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	0e 94 94 38 	call	0x7128	; 0x7128 <__floatsisf>
    2d8e:	6b 01       	movw	r12, r22
    2d90:	7c 01       	movw	r14, r24
    2d92:	28 81       	ld	r18, Y
    2d94:	39 81       	ldd	r19, Y+1	; 0x01
    2d96:	4a 81       	ldd	r20, Y+2	; 0x02
    2d98:	5b 81       	ldd	r21, Y+3	; 0x03
    2d9a:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    2d9e:	9b 01       	movw	r18, r22
    2da0:	ac 01       	movw	r20, r24
    2da2:	c3 01       	movw	r24, r6
    2da4:	b2 01       	movw	r22, r4
    2da6:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    2daa:	2b 01       	movw	r4, r22
    2dac:	3c 01       	movw	r6, r24
    2dae:	2c 81       	ldd	r18, Y+4	; 0x04
    2db0:	3d 81       	ldd	r19, Y+5	; 0x05
    2db2:	4e 81       	ldd	r20, Y+6	; 0x06
    2db4:	5f 81       	ldd	r21, Y+7	; 0x07
    2db6:	c7 01       	movw	r24, r14
    2db8:	b6 01       	movw	r22, r12
    2dba:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    2dbe:	9b 01       	movw	r18, r22
    2dc0:	ac 01       	movw	r20, r24
    2dc2:	c5 01       	movw	r24, r10
    2dc4:	b4 01       	movw	r22, r8
    2dc6:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    2dca:	4b 01       	movw	r8, r22
    2dcc:	5c 01       	movw	r10, r24
    2dce:	28 96       	adiw	r28, 0x08	; 8
    2dd0:	c2 15       	cp	r28, r2
    2dd2:	d3 05       	cpc	r29, r3
    2dd4:	a1 f6       	brne	.-88     	; 0x2d7e <get_bearing+0x40>
    2dd6:	a3 01       	movw	r20, r6
    2dd8:	92 01       	movw	r18, r4
    2dda:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <atan2>
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	1f 91       	pop	r17
    2de4:	0f 91       	pop	r16
    2de6:	ff 90       	pop	r15
    2de8:	ef 90       	pop	r14
    2dea:	df 90       	pop	r13
    2dec:	cf 90       	pop	r12
    2dee:	bf 90       	pop	r11
    2df0:	af 90       	pop	r10
    2df2:	9f 90       	pop	r9
    2df4:	8f 90       	pop	r8
    2df6:	7f 90       	pop	r7
    2df8:	6f 90       	pop	r6
    2dfa:	5f 90       	pop	r5
    2dfc:	4f 90       	pop	r4
    2dfe:	3f 90       	pop	r3
    2e00:	2f 90       	pop	r2
    2e02:	08 95       	ret

00002e04 <fill_S_and_T>:
    2e04:	cf 92       	push	r12
    2e06:	df 92       	push	r13
    2e08:	ff 92       	push	r15
    2e0a:	0f 93       	push	r16
    2e0c:	1f 93       	push	r17
    2e0e:	cf 93       	push	r28
    2e10:	df 93       	push	r29
    2e12:	f6 2e       	mov	r15, r22
    2e14:	07 2f       	mov	r16, r23
    2e16:	a6 2f       	mov	r26, r22
    2e18:	b7 2f       	mov	r27, r23
    2e1a:	e4 2f       	mov	r30, r20
    2e1c:	f5 2f       	mov	r31, r21
    2e1e:	26 e0       	ldi	r18, 0x06	; 6
    2e20:	11 92       	st	Z+, r1
    2e22:	1d 92       	st	X+, r1
    2e24:	21 50       	subi	r18, 0x01	; 1
    2e26:	e1 f7       	brne	.-8      	; 0x2e20 <fill_S_and_T+0x1c>
    2e28:	c4 2e       	mov	r12, r20
    2e2a:	d5 2e       	mov	r13, r21
    2e2c:	40 e0       	ldi	r20, 0x00	; 0
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	17 c0       	rjmp	.+46     	; 0x2e60 <fill_S_and_T+0x5c>
    2e32:	9d 01       	movw	r18, r26
    2e34:	10 81       	ld	r17, Z
    2e36:	7d 91       	ld	r23, X+
    2e38:	71 0f       	add	r23, r17
    2e3a:	71 93       	st	Z+, r23
    2e3c:	e6 01       	movw	r28, r12
    2e3e:	78 81       	ld	r23, Y
    2e40:	e9 01       	movw	r28, r18
    2e42:	28 81       	ld	r18, Y
    2e44:	27 0f       	add	r18, r23
    2e46:	e6 01       	movw	r28, r12
    2e48:	28 83       	st	Y, r18
    2e4a:	6f 5f       	subi	r22, 0xFF	; 255
    2e4c:	66 30       	cpi	r22, 0x06	; 6
    2e4e:	89 f7       	brne	.-30     	; 0x2e32 <fill_S_and_T+0x2e>
    2e50:	4a 5f       	subi	r20, 0xFA	; 250
    2e52:	5f 4f       	sbci	r21, 0xFF	; 255
    2e54:	df ef       	ldi	r29, 0xFF	; 255
    2e56:	cd 1a       	sub	r12, r29
    2e58:	dd 0a       	sbc	r13, r29
    2e5a:	44 32       	cpi	r20, 0x24	; 36
    2e5c:	51 05       	cpc	r21, r1
    2e5e:	39 f0       	breq	.+14     	; 0x2e6e <fill_S_and_T+0x6a>
    2e60:	dc 01       	movw	r26, r24
    2e62:	a4 0f       	add	r26, r20
    2e64:	b5 1f       	adc	r27, r21
    2e66:	ef 2d       	mov	r30, r15
    2e68:	f0 2f       	mov	r31, r16
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	e2 cf       	rjmp	.-60     	; 0x2e32 <fill_S_and_T+0x2e>
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	ff 90       	pop	r15
    2e78:	df 90       	pop	r13
    2e7a:	cf 90       	pop	r12
    2e7c:	08 95       	ret

00002e7e <pack_measurements_into_matrix>:
    2e7e:	df 92       	push	r13
    2e80:	ef 92       	push	r14
    2e82:	ff 92       	push	r15
    2e84:	0f 93       	push	r16
    2e86:	1f 93       	push	r17
    2e88:	cf 93       	push	r28
    2e8a:	df 93       	push	r29
    2e8c:	4a e1       	ldi	r20, 0x1A	; 26
    2e8e:	50 e3       	ldi	r21, 0x30	; 48
    2e90:	6a ea       	ldi	r22, 0xAA	; 170
    2e92:	70 e3       	ldi	r23, 0x30	; 48
    2e94:	e1 2c       	mov	r14, r1
    2e96:	dd 24       	eor	r13, r13
    2e98:	da 94       	dec	r13
    2e9a:	1e c0       	rjmp	.+60     	; 0x2ed8 <pack_measurements_into_matrix+0x5a>
    2e9c:	c1 91       	ld	r28, Z+
    2e9e:	c1 17       	cp	r28, r17
    2ea0:	08 f4       	brcc	.+2      	; 0x2ea4 <pack_measurements_into_matrix+0x26>
    2ea2:	1c 2f       	mov	r17, r28
    2ea4:	0c 17       	cp	r16, r28
    2ea6:	08 f4       	brcc	.+2      	; 0x2eaa <pack_measurements_into_matrix+0x2c>
    2ea8:	0c 2f       	mov	r16, r28
    2eaa:	d1 50       	subi	r29, 0x01	; 1
    2eac:	b9 f7       	brne	.-18     	; 0x2e9c <pack_measurements_into_matrix+0x1e>
    2eae:	01 1b       	sub	r16, r17
    2eb0:	e0 16       	cp	r14, r16
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <pack_measurements_into_matrix+0x38>
    2eb4:	e0 2e       	mov	r14, r16
    2eb6:	0d 93       	st	X+, r16
    2eb8:	fa 94       	dec	r15
    2eba:	2c 5f       	subi	r18, 0xFC	; 252
    2ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebe:	ff 20       	and	r15, r15
    2ec0:	29 f0       	breq	.+10     	; 0x2ecc <pack_measurements_into_matrix+0x4e>
    2ec2:	f9 01       	movw	r30, r18
    2ec4:	d4 e0       	ldi	r29, 0x04	; 4
    2ec6:	00 e0       	ldi	r16, 0x00	; 0
    2ec8:	1d 2d       	mov	r17, r13
    2eca:	e8 cf       	rjmp	.-48     	; 0x2e9c <pack_measurements_into_matrix+0x1e>
    2ecc:	06 96       	adiw	r24, 0x06	; 6
    2ece:	48 5e       	subi	r20, 0xE8	; 232
    2ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed2:	46 17       	cp	r20, r22
    2ed4:	57 07       	cpc	r21, r23
    2ed6:	39 f0       	breq	.+14     	; 0x2ee6 <pack_measurements_into_matrix+0x68>
    2ed8:	9a 01       	movw	r18, r20
    2eda:	dc 01       	movw	r26, r24
    2edc:	0f 2e       	mov	r0, r31
    2ede:	f6 e0       	ldi	r31, 0x06	; 6
    2ee0:	ff 2e       	mov	r15, r31
    2ee2:	f0 2d       	mov	r31, r0
    2ee4:	ee cf       	rjmp	.-36     	; 0x2ec2 <pack_measurements_into_matrix+0x44>
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	8e 15       	cp	r24, r14
    2eea:	08 f4       	brcc	.+2      	; 0x2eee <pack_measurements_into_matrix+0x70>
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	ff 90       	pop	r15
    2ef8:	ef 90       	pop	r14
    2efa:	df 90       	pop	r13
    2efc:	08 95       	ret

00002efe <get_baseline_readings>:
    2efe:	df 92       	push	r13
    2f00:	ef 92       	push	r14
    2f02:	ff 92       	push	r15
    2f04:	0f 93       	push	r16
    2f06:	1f 93       	push	r17
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	0a e1       	ldi	r16, 0x1A	; 26
    2f0e:	10 e3       	ldi	r17, 0x30	; 48
    2f10:	0f 2e       	mov	r0, r31
    2f12:	fa ea       	ldi	r31, 0xAA	; 170
    2f14:	ef 2e       	mov	r14, r31
    2f16:	f0 e3       	ldi	r31, 0x30	; 48
    2f18:	ff 2e       	mov	r15, r31
    2f1a:	f0 2d       	mov	r31, r0
    2f1c:	0d c0       	rjmp	.+26     	; 0x2f38 <get_baseline_readings+0x3a>
    2f1e:	8d 2d       	mov	r24, r13
    2f20:	6f d8       	rcall	.-3874   	; 0x2000 <get_ir_sensor>
    2f22:	88 83       	st	Y, r24
    2f24:	d3 94       	inc	r13
    2f26:	24 96       	adiw	r28, 0x04	; 4
    2f28:	86 e0       	ldi	r24, 0x06	; 6
    2f2a:	d8 12       	cpse	r13, r24
    2f2c:	f8 cf       	rjmp	.-16     	; 0x2f1e <get_baseline_readings+0x20>
    2f2e:	08 5e       	subi	r16, 0xE8	; 232
    2f30:	1f 4f       	sbci	r17, 0xFF	; 255
    2f32:	0e 15       	cp	r16, r14
    2f34:	1f 05       	cpc	r17, r15
    2f36:	19 f0       	breq	.+6      	; 0x2f3e <get_baseline_readings+0x40>
    2f38:	e8 01       	movw	r28, r16
    2f3a:	d1 2c       	mov	r13, r1
    2f3c:	f0 cf       	rjmp	.-32     	; 0x2f1e <get_baseline_readings+0x20>
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	1f 91       	pop	r17
    2f44:	0f 91       	pop	r16
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
    2f4a:	df 90       	pop	r13
    2f4c:	08 95       	ret

00002f4e <ir_range_meas>:
    2f4e:	2f 92       	push	r2
    2f50:	3f 92       	push	r3
    2f52:	4f 92       	push	r4
    2f54:	5f 92       	push	r5
    2f56:	6f 92       	push	r6
    2f58:	7f 92       	push	r7
    2f5a:	8f 92       	push	r8
    2f5c:	9f 92       	push	r9
    2f5e:	af 92       	push	r10
    2f60:	bf 92       	push	r11
    2f62:	cf 92       	push	r12
    2f64:	df 92       	push	r13
    2f66:	ef 92       	push	r14
    2f68:	ff 92       	push	r15
    2f6a:	0f 93       	push	r16
    2f6c:	1f 93       	push	r17
    2f6e:	cf 93       	push	r28
    2f70:	df 93       	push	r29
    2f72:	8f e5       	ldi	r24, 0x5F	; 95
    2f74:	9a ee       	ldi	r25, 0xEA	; 234
    2f76:	a0 e0       	ldi	r26, 0x00	; 0
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	a1 09       	sbc	r26, r1
    2f7e:	b1 09       	sbc	r27, r1
    2f80:	00 00       	nop
    2f82:	01 f0       	breq	.+0      	; 0x2f84 <ir_range_meas+0x36>
    2f84:	d1 f7       	brne	.-12     	; 0x2f7a <ir_range_meas+0x2c>
    2f86:	c8 95       	lpm
    2f88:	00 00       	nop
    2f8a:	8f e7       	ldi	r24, 0x7F	; 127
    2f8c:	9e e3       	ldi	r25, 0x3E	; 62
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	f1 f7       	brne	.-4      	; 0x2f8e <ir_range_meas+0x40>
    2f92:	00 00       	nop
    2f94:	00 c0       	rjmp	.+0      	; 0x2f96 <ir_range_meas+0x48>
    2f96:	0f 2e       	mov	r0, r31
    2f98:	fb e1       	ldi	r31, 0x1B	; 27
    2f9a:	6f 2e       	mov	r6, r31
    2f9c:	f0 e3       	ldi	r31, 0x30	; 48
    2f9e:	7f 2e       	mov	r7, r31
    2fa0:	f0 2d       	mov	r31, r0
    2fa2:	0f 2e       	mov	r0, r31
    2fa4:	fb ea       	ldi	r31, 0xAB	; 171
    2fa6:	4f 2e       	mov	r4, r31
    2fa8:	f0 e3       	ldi	r31, 0x30	; 48
    2faa:	5f 2e       	mov	r5, r31
    2fac:	f0 2d       	mov	r31, r0
    2fae:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    2fb2:	4b 01       	movw	r8, r22
    2fb4:	5c 01       	movw	r10, r24
    2fb6:	83 01       	movw	r16, r6
    2fb8:	33 24       	eor	r3, r3
    2fba:	33 94       	inc	r3
    2fbc:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    2fc0:	6b 01       	movw	r12, r22
    2fc2:	7c 01       	movw	r14, r24
    2fc4:	e8 01       	movw	r28, r16
    2fc6:	21 2c       	mov	r2, r1
    2fc8:	82 2d       	mov	r24, r2
    2fca:	1a d8       	rcall	.-4044   	; 0x2000 <get_ir_sensor>
    2fcc:	88 83       	st	Y, r24
    2fce:	23 94       	inc	r2
    2fd0:	24 96       	adiw	r28, 0x04	; 4
    2fd2:	86 e0       	ldi	r24, 0x06	; 6
    2fd4:	28 12       	cpse	r2, r24
    2fd6:	f8 cf       	rjmp	.-16     	; 0x2fc8 <ir_range_meas+0x7a>
    2fd8:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    2fdc:	dc 01       	movw	r26, r24
    2fde:	cb 01       	movw	r24, r22
    2fe0:	8c 19       	sub	r24, r12
    2fe2:	9d 09       	sbc	r25, r13
    2fe4:	ae 09       	sbc	r26, r14
    2fe6:	bf 09       	sbc	r27, r15
    2fe8:	03 97       	sbiw	r24, 0x03	; 3
    2fea:	a1 05       	cpc	r26, r1
    2fec:	b1 05       	cpc	r27, r1
    2fee:	a0 f3       	brcs	.-24     	; 0x2fd8 <ir_range_meas+0x8a>
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	83 15       	cp	r24, r3
    2ff4:	20 f0       	brcs	.+8      	; 0x2ffe <ir_range_meas+0xb0>
    2ff6:	85 e0       	ldi	r24, 0x05	; 5
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    2ffe:	33 94       	inc	r3
    3000:	0f 5f       	subi	r16, 0xFF	; 255
    3002:	1f 4f       	sbci	r17, 0xFF	; 255
    3004:	84 e0       	ldi	r24, 0x04	; 4
    3006:	38 12       	cpse	r3, r24
    3008:	d9 cf       	rjmp	.-78     	; 0x2fbc <ir_range_meas+0x6e>
    300a:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	88 19       	sub	r24, r8
    3014:	99 09       	sbc	r25, r9
    3016:	aa 09       	sbc	r26, r10
    3018:	bb 09       	sbc	r27, r11
    301a:	47 97       	sbiw	r24, 0x17	; 23
    301c:	a1 05       	cpc	r26, r1
    301e:	b1 05       	cpc	r27, r1
    3020:	a0 f3       	brcs	.-24     	; 0x300a <ir_range_meas+0xbc>
    3022:	8f e0       	ldi	r24, 0x0F	; 15
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    302a:	88 e1       	ldi	r24, 0x18	; 24
    302c:	68 0e       	add	r6, r24
    302e:	71 1c       	adc	r7, r1
    3030:	64 14       	cp	r6, r4
    3032:	75 04       	cpc	r7, r5
    3034:	09 f0       	breq	.+2      	; 0x3038 <ir_range_meas+0xea>
    3036:	bb cf       	rjmp	.-138    	; 0x2fae <ir_range_meas+0x60>
    3038:	df 91       	pop	r29
    303a:	cf 91       	pop	r28
    303c:	1f 91       	pop	r17
    303e:	0f 91       	pop	r16
    3040:	ff 90       	pop	r15
    3042:	ef 90       	pop	r14
    3044:	df 90       	pop	r13
    3046:	cf 90       	pop	r12
    3048:	bf 90       	pop	r11
    304a:	af 90       	pop	r10
    304c:	9f 90       	pop	r9
    304e:	8f 90       	pop	r8
    3050:	7f 90       	pop	r7
    3052:	6f 90       	pop	r6
    3054:	5f 90       	pop	r5
    3056:	4f 90       	pop	r4
    3058:	3f 90       	pop	r3
    305a:	2f 90       	pop	r2
    305c:	08 95       	ret

0000305e <receive_rnb_data>:
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	1f 92       	push	r1
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
    3068:	72 df       	rcall	.-284    	; 0x2f4e <ir_range_meas>
    306a:	49 df       	rcall	.-366    	; 0x2efe <get_baseline_readings>
    306c:	89 e1       	ldi	r24, 0x19	; 25
    306e:	89 83       	std	Y+1, r24	; 0x01
    3070:	9e 01       	movw	r18, r28
    3072:	2f 5f       	subi	r18, 0xFF	; 255
    3074:	3f 4f       	sbci	r19, 0xFF	; 255
    3076:	47 e7       	ldi	r20, 0x77	; 119
    3078:	5f e1       	ldi	r21, 0x1F	; 31
    307a:	64 e1       	ldi	r22, 0x14	; 20
    307c:	70 e0       	ldi	r23, 0x00	; 0
    307e:	80 e0       	ldi	r24, 0x00	; 0
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 cb 26 	call	0x4d96	; 0x4d96 <schedule_task>
    3086:	0f 90       	pop	r0
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	08 95       	ret

0000308e <ir_emit>:
    308e:	af 92       	push	r10
    3090:	bf 92       	push	r11
    3092:	cf 92       	push	r12
    3094:	df 92       	push	r13
    3096:	ef 92       	push	r14
    3098:	ff 92       	push	r15
    309a:	0f 93       	push	r16
    309c:	1f 93       	push	r17
    309e:	82 30       	cpi	r24, 0x02	; 2
    30a0:	19 f1       	breq	.+70     	; 0x30e8 <ir_emit+0x5a>
    30a2:	30 f4       	brcc	.+12     	; 0x30b0 <ir_emit+0x22>
    30a4:	88 23       	and	r24, r24
    30a6:	09 f4       	brne	.+2      	; 0x30aa <ir_emit+0x1c>
    30a8:	5b c0       	rjmp	.+182    	; 0x3160 <ir_emit+0xd2>
    30aa:	81 30       	cpi	r24, 0x01	; 1
    30ac:	71 f0       	breq	.+28     	; 0x30ca <ir_emit+0x3c>
    30ae:	06 c0       	rjmp	.+12     	; 0x30bc <ir_emit+0x2e>
    30b0:	84 30       	cpi	r24, 0x04	; 4
    30b2:	c1 f1       	breq	.+112    	; 0x3124 <ir_emit+0x96>
    30b4:	40 f1       	brcs	.+80     	; 0x3106 <ir_emit+0x78>
    30b6:	85 30       	cpi	r24, 0x05	; 5
    30b8:	09 f4       	brne	.+2      	; 0x30bc <ir_emit+0x2e>
    30ba:	43 c0       	rjmp	.+134    	; 0x3142 <ir_emit+0xb4>
    30bc:	e1 2c       	mov	r14, r1
    30be:	f1 2c       	mov	r15, r1
    30c0:	00 e0       	ldi	r16, 0x00	; 0
    30c2:	10 e0       	ldi	r17, 0x00	; 0
    30c4:	c1 2c       	mov	r12, r1
    30c6:	d1 2c       	mov	r13, r1
    30c8:	58 c0       	rjmp	.+176    	; 0x317a <ir_emit+0xec>
    30ca:	0f 2e       	mov	r0, r31
    30cc:	f0 eb       	ldi	r31, 0xB0	; 176
    30ce:	ef 2e       	mov	r14, r31
    30d0:	f8 e0       	ldi	r31, 0x08	; 8
    30d2:	ff 2e       	mov	r15, r31
    30d4:	f0 2d       	mov	r31, r0
    30d6:	00 e4       	ldi	r16, 0x40	; 64
    30d8:	16 e0       	ldi	r17, 0x06	; 6
    30da:	68 94       	set
    30dc:	cc 24       	eor	r12, r12
    30de:	c7 f8       	bld	r12, 7
    30e0:	68 94       	set
    30e2:	dd 24       	eor	r13, r13
    30e4:	d1 f8       	bld	r13, 1
    30e6:	49 c0       	rjmp	.+146    	; 0x317a <ir_emit+0xec>
    30e8:	0f 2e       	mov	r0, r31
    30ea:	f0 ea       	ldi	r31, 0xA0	; 160
    30ec:	ef 2e       	mov	r14, r31
    30ee:	f9 e0       	ldi	r31, 0x09	; 9
    30f0:	ff 2e       	mov	r15, r31
    30f2:	f0 2d       	mov	r31, r0
    30f4:	00 e6       	ldi	r16, 0x60	; 96
    30f6:	16 e0       	ldi	r17, 0x06	; 6
    30f8:	68 94       	set
    30fa:	cc 24       	eor	r12, r12
    30fc:	c3 f8       	bld	r12, 3
    30fe:	68 94       	set
    3100:	dd 24       	eor	r13, r13
    3102:	d4 f8       	bld	r13, 4
    3104:	3a c0       	rjmp	.+116    	; 0x317a <ir_emit+0xec>
    3106:	0f 2e       	mov	r0, r31
    3108:	f0 ea       	ldi	r31, 0xA0	; 160
    310a:	ef 2e       	mov	r14, r31
    310c:	fa e0       	ldi	r31, 0x0A	; 10
    310e:	ff 2e       	mov	r15, r31
    3110:	f0 2d       	mov	r31, r0
    3112:	00 e8       	ldi	r16, 0x80	; 128
    3114:	16 e0       	ldi	r17, 0x06	; 6
    3116:	68 94       	set
    3118:	cc 24       	eor	r12, r12
    311a:	c3 f8       	bld	r12, 3
    311c:	68 94       	set
    311e:	dd 24       	eor	r13, r13
    3120:	d5 f8       	bld	r13, 5
    3122:	2b c0       	rjmp	.+86     	; 0x317a <ir_emit+0xec>
    3124:	0f 2e       	mov	r0, r31
    3126:	f0 eb       	ldi	r31, 0xB0	; 176
    3128:	ef 2e       	mov	r14, r31
    312a:	fa e0       	ldi	r31, 0x0A	; 10
    312c:	ff 2e       	mov	r15, r31
    312e:	f0 2d       	mov	r31, r0
    3130:	00 e8       	ldi	r16, 0x80	; 128
    3132:	16 e0       	ldi	r17, 0x06	; 6
    3134:	68 94       	set
    3136:	cc 24       	eor	r12, r12
    3138:	c7 f8       	bld	r12, 7
    313a:	68 94       	set
    313c:	dd 24       	eor	r13, r13
    313e:	d7 f8       	bld	r13, 7
    3140:	1c c0       	rjmp	.+56     	; 0x317a <ir_emit+0xec>
    3142:	0f 2e       	mov	r0, r31
    3144:	f0 ea       	ldi	r31, 0xA0	; 160
    3146:	ef 2e       	mov	r14, r31
    3148:	fb e0       	ldi	r31, 0x0B	; 11
    314a:	ff 2e       	mov	r15, r31
    314c:	f0 2d       	mov	r31, r0
    314e:	00 ea       	ldi	r16, 0xA0	; 160
    3150:	16 e0       	ldi	r17, 0x06	; 6
    3152:	68 94       	set
    3154:	cc 24       	eor	r12, r12
    3156:	c3 f8       	bld	r12, 3
    3158:	68 94       	set
    315a:	dd 24       	eor	r13, r13
    315c:	d6 f8       	bld	r13, 6
    315e:	0d c0       	rjmp	.+26     	; 0x317a <ir_emit+0xec>
    3160:	0f 2e       	mov	r0, r31
    3162:	f0 ea       	ldi	r31, 0xA0	; 160
    3164:	ef 2e       	mov	r14, r31
    3166:	f8 e0       	ldi	r31, 0x08	; 8
    3168:	ff 2e       	mov	r15, r31
    316a:	f0 2d       	mov	r31, r0
    316c:	00 e4       	ldi	r16, 0x40	; 64
    316e:	16 e0       	ldi	r17, 0x06	; 6
    3170:	68 94       	set
    3172:	cc 24       	eor	r12, r12
    3174:	c3 f8       	bld	r12, 3
    3176:	dd 24       	eor	r13, r13
    3178:	d3 94       	inc	r13
    317a:	f7 01       	movw	r30, r14
    317c:	a4 80       	ldd	r10, Z+4	; 0x04
    317e:	e0 e0       	ldi	r30, 0x00	; 0
    3180:	fb e0       	ldi	r31, 0x0B	; 11
    3182:	81 81       	ldd	r24, Z+1	; 0x01
    3184:	bd 2c       	mov	r11, r13
    3186:	b0 94       	com	r11
    3188:	8b 21       	and	r24, r11
    318a:	81 83       	std	Z+1, r24	; 0x01
    318c:	e0 ea       	ldi	r30, 0xA0	; 160
    318e:	f6 e0       	ldi	r31, 0x06	; 6
    3190:	d1 82       	std	Z+1, r13	; 0x01
    3192:	84 81       	ldd	r24, Z+4	; 0x04
    3194:	8d 29       	or	r24, r13
    3196:	84 83       	std	Z+4, r24	; 0x04
    3198:	f7 01       	movw	r30, r14
    319a:	14 82       	std	Z+4, r1	; 0x04
    319c:	f8 01       	movw	r30, r16
    319e:	c1 82       	std	Z+1, r12	; 0x01
    31a0:	84 81       	ldd	r24, Z+4	; 0x04
    31a2:	9c 2d       	mov	r25, r12
    31a4:	90 95       	com	r25
    31a6:	89 23       	and	r24, r25
    31a8:	84 83       	std	Z+4, r24	; 0x04
    31aa:	70 e0       	ldi	r23, 0x00	; 0
    31ac:	80 e0       	ldi	r24, 0x00	; 0
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	0e 94 92 38 	call	0x7124	; 0x7124 <__floatunsisf>
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	34 e2       	ldi	r19, 0x24	; 36
    31b8:	44 ef       	ldi	r20, 0xF4	; 244
    31ba:	5b e4       	ldi	r21, 0x4B	; 75
    31bc:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	4a e7       	ldi	r20, 0x7A	; 122
    31c6:	54 e4       	ldi	r21, 0x44	; 68
    31c8:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	30 e0       	ldi	r19, 0x00	; 0
    31d0:	40 e0       	ldi	r20, 0x00	; 0
    31d2:	5f e3       	ldi	r21, 0x3F	; 63
    31d4:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    31d8:	0e 94 66 38 	call	0x70cc	; 0x70cc <__fixunssfsi>
    31dc:	ab 01       	movw	r20, r22
    31de:	bc 01       	movw	r22, r24
    31e0:	4d 30       	cpi	r20, 0x0D	; 13
    31e2:	51 05       	cpc	r21, r1
    31e4:	61 05       	cpc	r22, r1
    31e6:	71 05       	cpc	r23, r1
    31e8:	08 f4       	brcc	.+2      	; 0x31ec <ir_emit+0x15e>
    31ea:	5d c0       	rjmp	.+186    	; 0x32a6 <ir_emit+0x218>
    31ec:	41 30       	cpi	r20, 0x01	; 1
    31ee:	f4 e0       	ldi	r31, 0x04	; 4
    31f0:	5f 07       	cpc	r21, r31
    31f2:	61 05       	cpc	r22, r1
    31f4:	71 05       	cpc	r23, r1
    31f6:	d8 f4       	brcc	.+54     	; 0x322e <ir_emit+0x1a0>
    31f8:	41 50       	subi	r20, 0x01	; 1
    31fa:	51 09       	sbc	r21, r1
    31fc:	61 09       	sbc	r22, r1
    31fe:	71 09       	sbc	r23, r1
    3200:	db 01       	movw	r26, r22
    3202:	ca 01       	movw	r24, r20
    3204:	b6 95       	lsr	r27
    3206:	a7 95       	ror	r26
    3208:	97 95       	ror	r25
    320a:	87 95       	ror	r24
    320c:	b6 95       	lsr	r27
    320e:	a7 95       	ror	r26
    3210:	97 95       	ror	r25
    3212:	87 95       	ror	r24
    3214:	43 70       	andi	r20, 0x03	; 3
    3216:	55 27       	eor	r21, r21
    3218:	66 27       	eor	r22, r22
    321a:	77 27       	eor	r23, r23
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	a1 05       	cpc	r26, r1
    3220:	b1 05       	cpc	r27, r1
    3222:	09 f4       	brne	.+2      	; 0x3226 <ir_emit+0x198>
    3224:	40 c0       	rjmp	.+128    	; 0x32a6 <ir_emit+0x218>
    3226:	8a 95       	dec	r24
    3228:	01 f0       	breq	.+0      	; 0x322a <ir_emit+0x19c>
    322a:	e9 f7       	brne	.-6      	; 0x3226 <ir_emit+0x198>
    322c:	3c c0       	rjmp	.+120    	; 0x32a6 <ir_emit+0x218>
    322e:	42 30       	cpi	r20, 0x02	; 2
    3230:	51 05       	cpc	r21, r1
    3232:	84 e0       	ldi	r24, 0x04	; 4
    3234:	68 07       	cpc	r22, r24
    3236:	71 05       	cpc	r23, r1
    3238:	d0 f4       	brcc	.+52     	; 0x326e <ir_emit+0x1e0>
    323a:	42 50       	subi	r20, 0x02	; 2
    323c:	51 09       	sbc	r21, r1
    323e:	61 09       	sbc	r22, r1
    3240:	71 09       	sbc	r23, r1
    3242:	db 01       	movw	r26, r22
    3244:	ca 01       	movw	r24, r20
    3246:	b6 95       	lsr	r27
    3248:	a7 95       	ror	r26
    324a:	97 95       	ror	r25
    324c:	87 95       	ror	r24
    324e:	b6 95       	lsr	r27
    3250:	a7 95       	ror	r26
    3252:	97 95       	ror	r25
    3254:	87 95       	ror	r24
    3256:	43 70       	andi	r20, 0x03	; 3
    3258:	55 27       	eor	r21, r21
    325a:	66 27       	eor	r22, r22
    325c:	77 27       	eor	r23, r23
    325e:	00 97       	sbiw	r24, 0x00	; 0
    3260:	a1 05       	cpc	r26, r1
    3262:	b1 05       	cpc	r27, r1
    3264:	01 f1       	breq	.+64     	; 0x32a6 <ir_emit+0x218>
    3266:	01 97       	sbiw	r24, 0x01	; 1
    3268:	f1 f7       	brne	.-4      	; 0x3266 <ir_emit+0x1d8>
    326a:	00 00       	nop
    326c:	1c c0       	rjmp	.+56     	; 0x32a6 <ir_emit+0x218>
    326e:	44 50       	subi	r20, 0x04	; 4
    3270:	51 09       	sbc	r21, r1
    3272:	61 09       	sbc	r22, r1
    3274:	71 09       	sbc	r23, r1
    3276:	db 01       	movw	r26, r22
    3278:	ca 01       	movw	r24, r20
    327a:	68 94       	set
    327c:	12 f8       	bld	r1, 2
    327e:	b6 95       	lsr	r27
    3280:	a7 95       	ror	r26
    3282:	97 95       	ror	r25
    3284:	87 95       	ror	r24
    3286:	16 94       	lsr	r1
    3288:	d1 f7       	brne	.-12     	; 0x327e <ir_emit+0x1f0>
    328a:	47 70       	andi	r20, 0x07	; 7
    328c:	55 27       	eor	r21, r21
    328e:	66 27       	eor	r22, r22
    3290:	77 27       	eor	r23, r23
    3292:	00 97       	sbiw	r24, 0x00	; 0
    3294:	a1 05       	cpc	r26, r1
    3296:	b1 05       	cpc	r27, r1
    3298:	31 f0       	breq	.+12     	; 0x32a6 <ir_emit+0x218>
    329a:	01 97       	sbiw	r24, 0x01	; 1
    329c:	a1 09       	sbc	r26, r1
    329e:	b1 09       	sbc	r27, r1
    32a0:	00 00       	nop
    32a2:	01 f0       	breq	.+0      	; 0x32a4 <ir_emit+0x216>
    32a4:	d1 f7       	brne	.-12     	; 0x329a <ir_emit+0x20c>
    32a6:	41 30       	cpi	r20, 0x01	; 1
    32a8:	51 05       	cpc	r21, r1
    32aa:	61 05       	cpc	r22, r1
    32ac:	71 05       	cpc	r23, r1
    32ae:	11 f4       	brne	.+4      	; 0x32b4 <ir_emit+0x226>
    32b0:	00 00       	nop
    32b2:	0e c0       	rjmp	.+28     	; 0x32d0 <ir_emit+0x242>
    32b4:	42 30       	cpi	r20, 0x02	; 2
    32b6:	51 05       	cpc	r21, r1
    32b8:	61 05       	cpc	r22, r1
    32ba:	71 05       	cpc	r23, r1
    32bc:	11 f4       	brne	.+4      	; 0x32c2 <ir_emit+0x234>
    32be:	00 c0       	rjmp	.+0      	; 0x32c0 <ir_emit+0x232>
    32c0:	0f c0       	rjmp	.+30     	; 0x32e0 <ir_emit+0x252>
    32c2:	43 30       	cpi	r20, 0x03	; 3
    32c4:	51 05       	cpc	r21, r1
    32c6:	61 05       	cpc	r22, r1
    32c8:	71 05       	cpc	r23, r1
    32ca:	11 f4       	brne	.+4      	; 0x32d0 <ir_emit+0x242>
    32cc:	c8 95       	lpm
    32ce:	10 c0       	rjmp	.+32     	; 0x32f0 <ir_emit+0x262>
    32d0:	44 30       	cpi	r20, 0x04	; 4
    32d2:	51 05       	cpc	r21, r1
    32d4:	61 05       	cpc	r22, r1
    32d6:	71 05       	cpc	r23, r1
    32d8:	19 f4       	brne	.+6      	; 0x32e0 <ir_emit+0x252>
    32da:	c8 95       	lpm
    32dc:	00 00       	nop
    32de:	10 c0       	rjmp	.+32     	; 0x3300 <ir_emit+0x272>
    32e0:	45 30       	cpi	r20, 0x05	; 5
    32e2:	51 05       	cpc	r21, r1
    32e4:	61 05       	cpc	r22, r1
    32e6:	71 05       	cpc	r23, r1
    32e8:	19 f4       	brne	.+6      	; 0x32f0 <ir_emit+0x262>
    32ea:	c8 95       	lpm
    32ec:	00 c0       	rjmp	.+0      	; 0x32ee <ir_emit+0x260>
    32ee:	11 c0       	rjmp	.+34     	; 0x3312 <ir_emit+0x284>
    32f0:	46 30       	cpi	r20, 0x06	; 6
    32f2:	51 05       	cpc	r21, r1
    32f4:	61 05       	cpc	r22, r1
    32f6:	71 05       	cpc	r23, r1
    32f8:	19 f4       	brne	.+6      	; 0x3300 <ir_emit+0x272>
    32fa:	c8 95       	lpm
    32fc:	c8 95       	lpm
    32fe:	12 c0       	rjmp	.+36     	; 0x3324 <ir_emit+0x296>
    3300:	47 30       	cpi	r20, 0x07	; 7
    3302:	51 05       	cpc	r21, r1
    3304:	61 05       	cpc	r22, r1
    3306:	71 05       	cpc	r23, r1
    3308:	21 f4       	brne	.+8      	; 0x3312 <ir_emit+0x284>
    330a:	c8 95       	lpm
    330c:	c8 95       	lpm
    330e:	00 00       	nop
    3310:	12 c0       	rjmp	.+36     	; 0x3336 <ir_emit+0x2a8>
    3312:	48 30       	cpi	r20, 0x08	; 8
    3314:	51 05       	cpc	r21, r1
    3316:	61 05       	cpc	r22, r1
    3318:	71 05       	cpc	r23, r1
    331a:	21 f4       	brne	.+8      	; 0x3324 <ir_emit+0x296>
    331c:	c8 95       	lpm
    331e:	c8 95       	lpm
    3320:	00 c0       	rjmp	.+0      	; 0x3322 <ir_emit+0x294>
    3322:	13 c0       	rjmp	.+38     	; 0x334a <ir_emit+0x2bc>
    3324:	49 30       	cpi	r20, 0x09	; 9
    3326:	51 05       	cpc	r21, r1
    3328:	61 05       	cpc	r22, r1
    332a:	71 05       	cpc	r23, r1
    332c:	21 f4       	brne	.+8      	; 0x3336 <ir_emit+0x2a8>
    332e:	c8 95       	lpm
    3330:	c8 95       	lpm
    3332:	c8 95       	lpm
    3334:	14 c0       	rjmp	.+40     	; 0x335e <ir_emit+0x2d0>
    3336:	4a 30       	cpi	r20, 0x0A	; 10
    3338:	51 05       	cpc	r21, r1
    333a:	61 05       	cpc	r22, r1
    333c:	71 05       	cpc	r23, r1
    333e:	29 f4       	brne	.+10     	; 0x334a <ir_emit+0x2bc>
    3340:	c8 95       	lpm
    3342:	c8 95       	lpm
    3344:	c8 95       	lpm
    3346:	00 00       	nop
    3348:	13 c0       	rjmp	.+38     	; 0x3370 <ir_emit+0x2e2>
    334a:	4b 30       	cpi	r20, 0x0B	; 11
    334c:	51 05       	cpc	r21, r1
    334e:	61 05       	cpc	r22, r1
    3350:	71 05       	cpc	r23, r1
    3352:	29 f4       	brne	.+10     	; 0x335e <ir_emit+0x2d0>
    3354:	c8 95       	lpm
    3356:	c8 95       	lpm
    3358:	c8 95       	lpm
    335a:	00 c0       	rjmp	.+0      	; 0x335c <ir_emit+0x2ce>
    335c:	09 c0       	rjmp	.+18     	; 0x3370 <ir_emit+0x2e2>
    335e:	4c 30       	cpi	r20, 0x0C	; 12
    3360:	51 05       	cpc	r21, r1
    3362:	61 05       	cpc	r22, r1
    3364:	71 05       	cpc	r23, r1
    3366:	21 f4       	brne	.+8      	; 0x3370 <ir_emit+0x2e2>
    3368:	c8 95       	lpm
    336a:	c8 95       	lpm
    336c:	c8 95       	lpm
    336e:	c8 95       	lpm
    3370:	f8 01       	movw	r30, r16
    3372:	84 81       	ldd	r24, Z+4	; 0x04
    3374:	c8 2a       	or	r12, r24
    3376:	c4 82       	std	Z+4, r12	; 0x04
    3378:	f7 01       	movw	r30, r14
    337a:	a4 82       	std	Z+4, r10	; 0x04
    337c:	e0 ea       	ldi	r30, 0xA0	; 160
    337e:	f6 e0       	ldi	r31, 0x06	; 6
    3380:	84 81       	ldd	r24, Z+4	; 0x04
    3382:	b8 22       	and	r11, r24
    3384:	b4 82       	std	Z+4, r11	; 0x04
    3386:	e0 e0       	ldi	r30, 0x00	; 0
    3388:	fb e0       	ldi	r31, 0x0B	; 11
    338a:	81 81       	ldd	r24, Z+1	; 0x01
    338c:	d8 2a       	or	r13, r24
    338e:	d1 82       	std	Z+1, r13	; 0x01
    3390:	1f 91       	pop	r17
    3392:	0f 91       	pop	r16
    3394:	ff 90       	pop	r15
    3396:	ef 90       	pop	r14
    3398:	df 90       	pop	r13
    339a:	cf 90       	pop	r12
    339c:	bf 90       	pop	r11
    339e:	af 90       	pop	r10
    33a0:	08 95       	ret

000033a2 <ir_range_blast>:
    33a2:	cf 92       	push	r12
    33a4:	df 92       	push	r13
    33a6:	ef 92       	push	r14
    33a8:	ff 92       	push	r15
    33aa:	cf 93       	push	r28
    33ac:	8f e0       	ldi	r24, 0x0F	; 15
    33ae:	90 e0       	ldi	r25, 0x00	; 0
    33b0:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    33b4:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    33b8:	6b 01       	movw	r12, r22
    33ba:	7c 01       	movw	r14, r24
    33bc:	80 e0       	ldi	r24, 0x00	; 0
    33be:	91 e0       	ldi	r25, 0x01	; 1
    33c0:	0e 94 b8 04 	call	0x970	; 0x970 <set_all_ir_powers>
    33c4:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    33c8:	dc 01       	movw	r26, r24
    33ca:	cb 01       	movw	r24, r22
    33cc:	8c 19       	sub	r24, r12
    33ce:	9d 09       	sbc	r25, r13
    33d0:	ae 09       	sbc	r26, r14
    33d2:	bf 09       	sbc	r27, r15
    33d4:	02 97       	sbiw	r24, 0x02	; 2
    33d6:	a1 05       	cpc	r26, r1
    33d8:	b1 05       	cpc	r27, r1
    33da:	a0 f3       	brcs	.-24     	; 0x33c4 <ir_range_blast+0x22>
    33dc:	c0 e0       	ldi	r28, 0x00	; 0
    33de:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    33e2:	6b 01       	movw	r12, r22
    33e4:	7c 01       	movw	r14, r24
    33e6:	67 e1       	ldi	r22, 0x17	; 23
    33e8:	8c 2f       	mov	r24, r28
    33ea:	51 de       	rcall	.-862    	; 0x308e <ir_emit>
    33ec:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    33f0:	ab 01       	movw	r20, r22
    33f2:	bc 01       	movw	r22, r24
    33f4:	4c 19       	sub	r20, r12
    33f6:	5d 09       	sbc	r21, r13
    33f8:	6e 09       	sbc	r22, r14
    33fa:	7f 09       	sbc	r23, r15
    33fc:	47 31       	cpi	r20, 0x17	; 23
    33fe:	51 05       	cpc	r21, r1
    3400:	61 05       	cpc	r22, r1
    3402:	71 05       	cpc	r23, r1
    3404:	98 f3       	brcs	.-26     	; 0x33ec <ir_range_blast+0x4a>
    3406:	8f e0       	ldi	r24, 0x0F	; 15
    3408:	90 e0       	ldi	r25, 0x00	; 0
    340a:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    340e:	cf 5f       	subi	r28, 0xFF	; 255
    3410:	c6 30       	cpi	r28, 0x06	; 6
    3412:	29 f7       	brne	.-54     	; 0x33de <ir_range_blast+0x3c>
    3414:	cf 91       	pop	r28
    3416:	ff 90       	pop	r15
    3418:	ef 90       	pop	r14
    341a:	df 90       	pop	r13
    341c:	cf 90       	pop	r12
    341e:	08 95       	ret

00003420 <broadcast_rnb_data>:
    3420:	45 e0       	ldi	r20, 0x05	; 5
    3422:	50 e0       	ldi	r21, 0x00	; 0
    3424:	6e eb       	ldi	r22, 0xBE	; 190
    3426:	73 e2       	ldi	r23, 0x23	; 35
    3428:	8f e3       	ldi	r24, 0x3F	; 63
    342a:	0e 94 0f 0c 	call	0x181e	; 0x181e <ir_cmd>
    342e:	8f e3       	ldi	r24, 0x3F	; 63
    3430:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <wait_for_ir>
    3434:	8d e5       	ldi	r24, 0x5D	; 93
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    343c:	8f ef       	ldi	r24, 0xFF	; 255
    343e:	b1 cf       	rjmp	.-158    	; 0x33a2 <ir_range_blast>
    3440:	08 95       	ret

00003442 <pretty_angle>:
    3442:	cf 92       	push	r12
    3444:	df 92       	push	r13
    3446:	ef 92       	push	r14
    3448:	ff 92       	push	r15
    344a:	6b 01       	movw	r12, r22
    344c:	7c 01       	movw	r14, r24
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	a9 01       	movw	r20, r18
    3454:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__gesf2>
    3458:	88 23       	and	r24, r24
    345a:	ac f0       	brlt	.+42     	; 0x3486 <pretty_angle+0x44>
    345c:	2b ed       	ldi	r18, 0xDB	; 219
    345e:	3f e0       	ldi	r19, 0x0F	; 15
    3460:	49 e4       	ldi	r20, 0x49	; 73
    3462:	50 e4       	ldi	r21, 0x40	; 64
    3464:	c7 01       	movw	r24, r14
    3466:	b6 01       	movw	r22, r12
    3468:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    346c:	2b ed       	ldi	r18, 0xDB	; 219
    346e:	3f e0       	ldi	r19, 0x0F	; 15
    3470:	49 ec       	ldi	r20, 0xC9	; 201
    3472:	50 e4       	ldi	r21, 0x40	; 64
    3474:	0e 94 d6 38 	call	0x71ac	; 0x71ac <fmod>
    3478:	2b ed       	ldi	r18, 0xDB	; 219
    347a:	3f e0       	ldi	r19, 0x0F	; 15
    347c:	49 e4       	ldi	r20, 0x49	; 73
    347e:	50 e4       	ldi	r21, 0x40	; 64
    3480:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3484:	14 c0       	rjmp	.+40     	; 0x34ae <pretty_angle+0x6c>
    3486:	2b ed       	ldi	r18, 0xDB	; 219
    3488:	3f e0       	ldi	r19, 0x0F	; 15
    348a:	49 e4       	ldi	r20, 0x49	; 73
    348c:	50 e4       	ldi	r21, 0x40	; 64
    348e:	c7 01       	movw	r24, r14
    3490:	b6 01       	movw	r22, r12
    3492:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3496:	2b ed       	ldi	r18, 0xDB	; 219
    3498:	3f e0       	ldi	r19, 0x0F	; 15
    349a:	49 ec       	ldi	r20, 0xC9	; 201
    349c:	50 e4       	ldi	r21, 0x40	; 64
    349e:	0e 94 d6 38 	call	0x71ac	; 0x71ac <fmod>
    34a2:	2b ed       	ldi	r18, 0xDB	; 219
    34a4:	3f e0       	ldi	r19, 0x0F	; 15
    34a6:	49 e4       	ldi	r20, 0x49	; 73
    34a8:	50 e4       	ldi	r21, 0x40	; 64
    34aa:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    34ae:	ff 90       	pop	r15
    34b0:	ef 90       	pop	r14
    34b2:	df 90       	pop	r13
    34b4:	cf 90       	pop	r12
    34b6:	08 95       	ret

000034b8 <get_heading>:
    34b8:	2f 92       	push	r2
    34ba:	3f 92       	push	r3
    34bc:	6f 92       	push	r6
    34be:	7f 92       	push	r7
    34c0:	8f 92       	push	r8
    34c2:	9f 92       	push	r9
    34c4:	af 92       	push	r10
    34c6:	bf 92       	push	r11
    34c8:	cf 92       	push	r12
    34ca:	df 92       	push	r13
    34cc:	ef 92       	push	r14
    34ce:	ff 92       	push	r15
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	cf 93       	push	r28
    34d6:	df 93       	push	r29
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	60 97       	sbiw	r28, 0x10	; 16
    34de:	cd bf       	out	0x3d, r28	; 61
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	4d 87       	std	Y+13, r20	; 0x0d
    34e4:	5e 87       	std	Y+14, r21	; 0x0e
    34e6:	6f 87       	std	Y+15, r22	; 0x0f
    34e8:	78 8b       	std	Y+16, r23	; 0x10
    34ea:	19 82       	std	Y+1, r1	; 0x01
    34ec:	1a 82       	std	Y+2, r1	; 0x02
    34ee:	1b 82       	std	Y+3, r1	; 0x03
    34f0:	1c 82       	std	Y+4, r1	; 0x04
    34f2:	1d 82       	std	Y+5, r1	; 0x05
    34f4:	1e 82       	std	Y+6, r1	; 0x06
    34f6:	1f 82       	std	Y+7, r1	; 0x07
    34f8:	18 86       	std	Y+8, r1	; 0x08
    34fa:	08 e3       	ldi	r16, 0x38	; 56
    34fc:	10 e2       	ldi	r17, 0x20	; 32
    34fe:	1c 01       	movw	r2, r24
    3500:	0f 2e       	mov	r0, r31
    3502:	f8 e6       	ldi	r31, 0x68	; 104
    3504:	6f 2e       	mov	r6, r31
    3506:	f0 e2       	ldi	r31, 0x20	; 32
    3508:	7f 2e       	mov	r7, r31
    350a:	f0 2d       	mov	r31, r0
    350c:	f1 01       	movw	r30, r2
    350e:	61 91       	ld	r22, Z+
    3510:	1f 01       	movw	r2, r30
    3512:	70 e0       	ldi	r23, 0x00	; 0
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	0e 94 94 38 	call	0x7128	; 0x7128 <__floatsisf>
    351c:	6b 01       	movw	r12, r22
    351e:	7c 01       	movw	r14, r24
    3520:	89 80       	ldd	r8, Y+1	; 0x01
    3522:	9a 80       	ldd	r9, Y+2	; 0x02
    3524:	ab 80       	ldd	r10, Y+3	; 0x03
    3526:	bc 80       	ldd	r11, Y+4	; 0x04
    3528:	f8 01       	movw	r30, r16
    352a:	20 81       	ld	r18, Z
    352c:	31 81       	ldd	r19, Z+1	; 0x01
    352e:	42 81       	ldd	r20, Z+2	; 0x02
    3530:	53 81       	ldd	r21, Z+3	; 0x03
    3532:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3536:	a5 01       	movw	r20, r10
    3538:	94 01       	movw	r18, r8
    353a:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    353e:	69 83       	std	Y+1, r22	; 0x01
    3540:	7a 83       	std	Y+2, r23	; 0x02
    3542:	8b 83       	std	Y+3, r24	; 0x03
    3544:	9c 83       	std	Y+4, r25	; 0x04
    3546:	8d 80       	ldd	r8, Y+5	; 0x05
    3548:	9e 80       	ldd	r9, Y+6	; 0x06
    354a:	af 80       	ldd	r10, Y+7	; 0x07
    354c:	b8 84       	ldd	r11, Y+8	; 0x08
    354e:	f8 01       	movw	r30, r16
    3550:	24 81       	ldd	r18, Z+4	; 0x04
    3552:	35 81       	ldd	r19, Z+5	; 0x05
    3554:	46 81       	ldd	r20, Z+6	; 0x06
    3556:	57 81       	ldd	r21, Z+7	; 0x07
    3558:	c7 01       	movw	r24, r14
    355a:	b6 01       	movw	r22, r12
    355c:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3560:	a5 01       	movw	r20, r10
    3562:	94 01       	movw	r18, r8
    3564:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    3568:	6d 83       	std	Y+5, r22	; 0x05
    356a:	7e 83       	std	Y+6, r23	; 0x06
    356c:	8f 83       	std	Y+7, r24	; 0x07
    356e:	98 87       	std	Y+8, r25	; 0x08
    3570:	08 5f       	subi	r16, 0xF8	; 248
    3572:	1f 4f       	sbci	r17, 0xFF	; 255
    3574:	06 15       	cp	r16, r6
    3576:	17 05       	cpc	r17, r7
    3578:	49 f6       	brne	.-110    	; 0x350c <get_heading+0x54>
    357a:	29 81       	ldd	r18, Y+1	; 0x01
    357c:	3a 81       	ldd	r19, Y+2	; 0x02
    357e:	4b 81       	ldd	r20, Y+3	; 0x03
    3580:	5c 81       	ldd	r21, Y+4	; 0x04
    3582:	6d 81       	ldd	r22, Y+5	; 0x05
    3584:	7e 81       	ldd	r23, Y+6	; 0x06
    3586:	8f 81       	ldd	r24, Y+7	; 0x07
    3588:	98 85       	ldd	r25, Y+8	; 0x08
    358a:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <atan2>
    358e:	69 87       	std	Y+9, r22	; 0x09
    3590:	7a 87       	std	Y+10, r23	; 0x0a
    3592:	8b 87       	std	Y+11, r24	; 0x0b
    3594:	9c 87       	std	Y+12, r25	; 0x0c
    3596:	c9 84       	ldd	r12, Y+9	; 0x09
    3598:	da 84       	ldd	r13, Y+10	; 0x0a
    359a:	eb 84       	ldd	r14, Y+11	; 0x0b
    359c:	fc 84       	ldd	r15, Y+12	; 0x0c
    359e:	2b ed       	ldi	r18, 0xDB	; 219
    35a0:	3f e0       	ldi	r19, 0x0F	; 15
    35a2:	49 e4       	ldi	r20, 0x49	; 73
    35a4:	50 e4       	ldi	r21, 0x40	; 64
    35a6:	6d 85       	ldd	r22, Y+13	; 0x0d
    35a8:	7e 85       	ldd	r23, Y+14	; 0x0e
    35aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ac:	98 89       	ldd	r25, Y+16	; 0x10
    35ae:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    35b2:	a7 01       	movw	r20, r14
    35b4:	96 01       	movw	r18, r12
    35b6:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    35ba:	43 df       	rcall	.-378    	; 0x3442 <pretty_angle>
    35bc:	60 96       	adiw	r28, 0x10	; 16
    35be:	cd bf       	out	0x3d, r28	; 61
    35c0:	de bf       	out	0x3e, r29	; 62
    35c2:	df 91       	pop	r29
    35c4:	cf 91       	pop	r28
    35c6:	1f 91       	pop	r17
    35c8:	0f 91       	pop	r16
    35ca:	ff 90       	pop	r15
    35cc:	ef 90       	pop	r14
    35ce:	df 90       	pop	r13
    35d0:	cf 90       	pop	r12
    35d2:	bf 90       	pop	r11
    35d4:	af 90       	pop	r10
    35d6:	9f 90       	pop	r9
    35d8:	8f 90       	pop	r8
    35da:	7f 90       	pop	r7
    35dc:	6f 90       	pop	r6
    35de:	3f 90       	pop	r3
    35e0:	2f 90       	pop	r2
    35e2:	08 95       	ret

000035e4 <rad_to_deg>:
    35e4:	2e df       	rcall	.-420    	; 0x3442 <pretty_angle>
    35e6:	2b ed       	ldi	r18, 0xDB	; 219
    35e8:	3f e0       	ldi	r19, 0x0F	; 15
    35ea:	49 e4       	ldi	r20, 0x49	; 73
    35ec:	50 e4       	ldi	r21, 0x40	; 64
    35ee:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    35f2:	20 e0       	ldi	r18, 0x00	; 0
    35f4:	30 e0       	ldi	r19, 0x00	; 0
    35f6:	44 e3       	ldi	r20, 0x34	; 52
    35f8:	53 e4       	ldi	r21, 0x43	; 67
    35fa:	0c 94 09 3a 	jmp	0x7412	; 0x7412 <__mulsf3>
    35fe:	08 95       	ret

00003600 <sensor_model>:
    3600:	cf 92       	push	r12
    3602:	df 92       	push	r13
    3604:	ef 92       	push	r14
    3606:	ff 92       	push	r15
    3608:	6b 01       	movw	r12, r22
    360a:	7c 01       	movw	r14, r24
    360c:	2b ed       	ldi	r18, 0xDB	; 219
    360e:	3f e0       	ldi	r19, 0x0F	; 15
    3610:	49 ec       	ldi	r20, 0xC9	; 201
    3612:	5f eb       	ldi	r21, 0xBF	; 191
    3614:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__gesf2>
    3618:	18 16       	cp	r1, r24
    361a:	7c f4       	brge	.+30     	; 0x363a <sensor_model+0x3a>
    361c:	2b ed       	ldi	r18, 0xDB	; 219
    361e:	3f e0       	ldi	r19, 0x0F	; 15
    3620:	49 ec       	ldi	r20, 0xC9	; 201
    3622:	5f e3       	ldi	r21, 0x3F	; 63
    3624:	c7 01       	movw	r24, r14
    3626:	b6 01       	movw	r22, r12
    3628:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <__cmpsf2>
    362c:	88 23       	and	r24, r24
    362e:	4c f4       	brge	.+18     	; 0x3642 <sensor_model+0x42>
    3630:	c7 01       	movw	r24, r14
    3632:	b6 01       	movw	r22, r12
    3634:	0e 94 f6 37 	call	0x6fec	; 0x6fec <cos>
    3638:	07 c0       	rjmp	.+14     	; 0x3648 <sensor_model+0x48>
    363a:	60 e0       	ldi	r22, 0x00	; 0
    363c:	70 e0       	ldi	r23, 0x00	; 0
    363e:	cb 01       	movw	r24, r22
    3640:	03 c0       	rjmp	.+6      	; 0x3648 <sensor_model+0x48>
    3642:	60 e0       	ldi	r22, 0x00	; 0
    3644:	70 e0       	ldi	r23, 0x00	; 0
    3646:	cb 01       	movw	r24, r22
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	df 90       	pop	r13
    364e:	cf 90       	pop	r12
    3650:	08 95       	ret

00003652 <emitter_model>:
    3652:	cf 92       	push	r12
    3654:	df 92       	push	r13
    3656:	ef 92       	push	r14
    3658:	ff 92       	push	r15
    365a:	6b 01       	movw	r12, r22
    365c:	7c 01       	movw	r14, r24
    365e:	2b ed       	ldi	r18, 0xDB	; 219
    3660:	3f e0       	ldi	r19, 0x0F	; 15
    3662:	49 ec       	ldi	r20, 0xC9	; 201
    3664:	5f eb       	ldi	r21, 0xBF	; 191
    3666:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__gesf2>
    366a:	18 16       	cp	r1, r24
    366c:	7c f4       	brge	.+30     	; 0x368c <emitter_model+0x3a>
    366e:	2b ed       	ldi	r18, 0xDB	; 219
    3670:	3f e0       	ldi	r19, 0x0F	; 15
    3672:	49 ec       	ldi	r20, 0xC9	; 201
    3674:	5f e3       	ldi	r21, 0x3F	; 63
    3676:	c7 01       	movw	r24, r14
    3678:	b6 01       	movw	r22, r12
    367a:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <__cmpsf2>
    367e:	88 23       	and	r24, r24
    3680:	4c f4       	brge	.+18     	; 0x3694 <emitter_model+0x42>
    3682:	c7 01       	movw	r24, r14
    3684:	b6 01       	movw	r22, r12
    3686:	0e 94 f6 37 	call	0x6fec	; 0x6fec <cos>
    368a:	07 c0       	rjmp	.+14     	; 0x369a <emitter_model+0x48>
    368c:	60 e0       	ldi	r22, 0x00	; 0
    368e:	70 e0       	ldi	r23, 0x00	; 0
    3690:	cb 01       	movw	r24, r22
    3692:	03 c0       	rjmp	.+6      	; 0x369a <emitter_model+0x48>
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	70 e0       	ldi	r23, 0x00	; 0
    3698:	cb 01       	movw	r24, r22
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	df 90       	pop	r13
    36a0:	cf 90       	pop	r12
    36a2:	08 95       	ret

000036a4 <inverse_amplitude_model>:

float inverse_amplitude_model(float ADC_val, uint8_t power)
{
	if(power == 255)		return (19.6587/sqrtf(ADC_val/2.-1.36255)) - 1.19672;
    36a4:	4f 3f       	cpi	r20, 0xFF	; 255
    36a6:	e1 f4       	brne	.+56     	; 0x36e0 <inverse_amplitude_model+0x3c>
    36a8:	20 e0       	ldi	r18, 0x00	; 0
    36aa:	30 e0       	ldi	r19, 0x00	; 0
    36ac:	40 e0       	ldi	r20, 0x00	; 0
    36ae:	5f e3       	ldi	r21, 0x3F	; 63
    36b0:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    36b4:	2a e0       	ldi	r18, 0x0A	; 10
    36b6:	38 e6       	ldi	r19, 0x68	; 104
    36b8:	4e ea       	ldi	r20, 0xAE	; 174
    36ba:	5f e3       	ldi	r21, 0x3F	; 63
    36bc:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    36c0:	0e 94 76 3a 	call	0x74ec	; 0x74ec <sqrt>
    36c4:	9b 01       	movw	r18, r22
    36c6:	ac 01       	movw	r20, r24
    36c8:	65 e0       	ldi	r22, 0x05	; 5
    36ca:	75 e4       	ldi	r23, 0x45	; 69
    36cc:	8d e9       	ldi	r24, 0x9D	; 157
    36ce:	91 e4       	ldi	r25, 0x41	; 65
    36d0:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    36d4:	2f e1       	ldi	r18, 0x1F	; 31
    36d6:	3e e2       	ldi	r19, 0x2E	; 46
    36d8:	49 e9       	ldi	r20, 0x99	; 153
    36da:	5f e3       	ldi	r21, 0x3F	; 63
    36dc:	0c 94 2b 37 	jmp	0x6e56	; 0x6e56 <__subsf3>
	//else if(power == 250) return (33.166/sqrtf(ADC_val - 12.5)) + 4;
	else					printf("ERROR: Unexpected power: %hhu\r\n",power);
    36e0:	1f 92       	push	r1
    36e2:	4f 93       	push	r20
    36e4:	84 ec       	ldi	r24, 0xC4	; 196
    36e6:	93 e2       	ldi	r25, 0x23	; 35
    36e8:	9f 93       	push	r25
    36ea:	8f 93       	push	r24
    36ec:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
	return 0;
    36f0:	0f 90       	pop	r0
    36f2:	0f 90       	pop	r0
    36f4:	0f 90       	pop	r0
    36f6:	0f 90       	pop	r0
    36f8:	60 e0       	ldi	r22, 0x00	; 0
    36fa:	70 e0       	ldi	r23, 0x00	; 0
    36fc:	cb 01       	movw	r24, r22
}
    36fe:	08 95       	ret

00003700 <get_initial_range_guess>:
	
	return pretty_angle(heading);
}

float get_initial_range_guess(float bearing, float heading, uint8_t power, uint8_t sensor_total[6], uint8_t emitter_total[6], uint8_t brightness_matrix[6][6])
{
    3700:	4f 92       	push	r4
    3702:	5f 92       	push	r5
    3704:	6f 92       	push	r6
    3706:	7f 92       	push	r7
    3708:	8f 92       	push	r8
    370a:	9f 92       	push	r9
    370c:	af 92       	push	r10
    370e:	bf 92       	push	r11
    3710:	cf 92       	push	r12
    3712:	df 92       	push	r13
    3714:	ef 92       	push	r14
    3716:	ff 92       	push	r15
    3718:	0f 93       	push	r16
    371a:	1f 93       	push	r17
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	00 d0       	rcall	.+0      	; 0x3722 <get_initial_range_guess+0x22>
    3722:	1f 92       	push	r1
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	2b 01       	movw	r4, r22
    372a:	3c 01       	movw	r6, r24
    372c:	29 83       	std	Y+1, r18	; 0x01
    372e:	3a 83       	std	Y+2, r19	; 0x02
    3730:	4b 83       	std	Y+3, r20	; 0x03
    3732:	5c 83       	std	Y+4, r21	; 0x04
    3734:	ac 2d       	mov	r26, r12
    3736:	bd 2d       	mov	r27, r13
    3738:	ee 2d       	mov	r30, r14
    373a:	ff 2d       	mov	r31, r15
	uint8_t best_e=255, best_s=255;
	uint16_t biggest_e_val = 0;
	uint16_t biggest_s_val = 0;

	for(uint8_t i = 0; i < 6; i++)
    373c:	60 e0       	ldi	r22, 0x00	; 0

float get_initial_range_guess(float bearing, float heading, uint8_t power, uint8_t sensor_total[6], uint8_t emitter_total[6], uint8_t brightness_matrix[6][6])
{
	uint8_t best_e=255, best_s=255;
	uint16_t biggest_e_val = 0;
	uint16_t biggest_s_val = 0;
    373e:	40 e0       	ldi	r20, 0x00	; 0
    3740:	50 e0       	ldi	r21, 0x00	; 0
}

float get_initial_range_guess(float bearing, float heading, uint8_t power, uint8_t sensor_total[6], uint8_t emitter_total[6], uint8_t brightness_matrix[6][6])
{
	uint8_t best_e=255, best_s=255;
	uint16_t biggest_e_val = 0;
    3742:	20 e0       	ldi	r18, 0x00	; 0
    3744:	30 e0       	ldi	r19, 0x00	; 0
	return pretty_angle(heading);
}

float get_initial_range_guess(float bearing, float heading, uint8_t power, uint8_t sensor_total[6], uint8_t emitter_total[6], uint8_t brightness_matrix[6][6])
{
	uint8_t best_e=255, best_s=255;
    3746:	7f ef       	ldi	r23, 0xFF	; 255
    3748:	1f ef       	ldi	r17, 0xFF	; 255
	uint16_t biggest_e_val = 0;
	uint16_t biggest_s_val = 0;

	for(uint8_t i = 0; i < 6; i++)
	{
		if(emitter_total[i] > biggest_e_val)
    374a:	8d 91       	ld	r24, X+
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	28 17       	cp	r18, r24
    3750:	39 07       	cpc	r19, r25
    3752:	10 f4       	brcc	.+4      	; 0x3758 <get_initial_range_guess+0x58>
		{
			best_e = i;
			biggest_e_val = emitter_total[best_e];
    3754:	9c 01       	movw	r18, r24
    3756:	16 2f       	mov	r17, r22
		}
		if(sensor_total[i] > biggest_s_val)
    3758:	81 91       	ld	r24, Z+
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	48 17       	cp	r20, r24
    375e:	59 07       	cpc	r21, r25
    3760:	10 f4       	brcc	.+4      	; 0x3766 <get_initial_range_guess+0x66>
		{
			best_s = i;
			biggest_s_val = sensor_total[best_s];
    3762:	ac 01       	movw	r20, r24
    3764:	76 2f       	mov	r23, r22
{
	uint8_t best_e=255, best_s=255;
	uint16_t biggest_e_val = 0;
	uint16_t biggest_s_val = 0;

	for(uint8_t i = 0; i < 6; i++)
    3766:	6f 5f       	subi	r22, 0xFF	; 255
    3768:	66 30       	cpi	r22, 0x06	; 6
    376a:	79 f7       	brne	.-34     	; 0x374a <get_initial_range_guess+0x4a>
	}
	
	float alpha, beta;
	
	// find alpha using infinite approximation
	alpha = bearing - basis_angle[best_s];
    376c:	87 2e       	mov	r8, r23
    376e:	91 2c       	mov	r9, r1
    3770:	f4 01       	movw	r30, r8
    3772:	ee 0f       	add	r30, r30
    3774:	ff 1f       	adc	r31, r31
    3776:	ee 0f       	add	r30, r30
    3778:	ff 1f       	adc	r31, r31
    377a:	e0 5e       	subi	r30, 0xE0	; 224
    377c:	ff 4d       	sbci	r31, 0xDF	; 223
    377e:	20 81       	ld	r18, Z
    3780:	31 81       	ldd	r19, Z+1	; 0x01
    3782:	42 81       	ldd	r20, Z+2	; 0x02
    3784:	53 81       	ldd	r21, Z+3	; 0x03
    3786:	c3 01       	movw	r24, r6
    3788:	b2 01       	movw	r22, r4
    378a:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    378e:	6b 01       	movw	r12, r22
    3790:	7c 01       	movw	r14, r24
	if((alpha > M_PI_2) || (alpha < -M_PI_2))
    3792:	2b ed       	ldi	r18, 0xDB	; 219
    3794:	3f e0       	ldi	r19, 0x0F	; 15
    3796:	49 ec       	ldi	r20, 0xC9	; 201
    3798:	5f e3       	ldi	r21, 0x3F	; 63
    379a:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__gesf2>
    379e:	18 16       	cp	r1, r24
    37a0:	0c f4       	brge	.+2      	; 0x37a4 <get_initial_range_guess+0xa4>
    37a2:	76 c0       	rjmp	.+236    	; 0x3890 <get_initial_range_guess+0x190>
    37a4:	2b ed       	ldi	r18, 0xDB	; 219
    37a6:	3f e0       	ldi	r19, 0x0F	; 15
    37a8:	49 ec       	ldi	r20, 0xC9	; 201
    37aa:	5f eb       	ldi	r21, 0xBF	; 191
    37ac:	c7 01       	movw	r24, r14
    37ae:	b6 01       	movw	r22, r12
    37b0:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <__cmpsf2>
    37b4:	88 23       	and	r24, r24
    37b6:	0c f4       	brge	.+2      	; 0x37ba <get_initial_range_guess+0xba>
    37b8:	6f c0       	rjmp	.+222    	; 0x3898 <get_initial_range_guess+0x198>
		//printf("ERROR: alpha out of range (alpha: %f, sensor %u)\r\n", alpha, best_s); 
		return 0;
	}
	
	// find beta using infinite approximation
	beta = bearing - heading - basis_angle[best_e] - M_PI;
    37ba:	29 81       	ldd	r18, Y+1	; 0x01
    37bc:	3a 81       	ldd	r19, Y+2	; 0x02
    37be:	4b 81       	ldd	r20, Y+3	; 0x03
    37c0:	5c 81       	ldd	r21, Y+4	; 0x04
    37c2:	c3 01       	movw	r24, r6
    37c4:	b2 01       	movw	r22, r4
    37c6:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    37ca:	e1 2f       	mov	r30, r17
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	ee 0f       	add	r30, r30
    37d0:	ff 1f       	adc	r31, r31
    37d2:	ee 0f       	add	r30, r30
    37d4:	ff 1f       	adc	r31, r31
    37d6:	e0 5e       	subi	r30, 0xE0	; 224
    37d8:	ff 4d       	sbci	r31, 0xDF	; 223
    37da:	20 81       	ld	r18, Z
    37dc:	31 81       	ldd	r19, Z+1	; 0x01
    37de:	42 81       	ldd	r20, Z+2	; 0x02
    37e0:	53 81       	ldd	r21, Z+3	; 0x03
    37e2:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    37e6:	2b ed       	ldi	r18, 0xDB	; 219
    37e8:	3f e0       	ldi	r19, 0x0F	; 15
    37ea:	49 e4       	ldi	r20, 0x49	; 73
    37ec:	50 e4       	ldi	r21, 0x40	; 64
    37ee:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
	beta = pretty_angle(beta);
    37f2:	27 de       	rcall	.-946    	; 0x3442 <pretty_angle>
    37f4:	2b 01       	movw	r4, r22
    37f6:	3c 01       	movw	r6, r24
	if((beta > M_PI_2)  || (beta < -M_PI_2))
    37f8:	2b ed       	ldi	r18, 0xDB	; 219
    37fa:	3f e0       	ldi	r19, 0x0F	; 15
    37fc:	49 ec       	ldi	r20, 0xC9	; 201
    37fe:	5f e3       	ldi	r21, 0x3F	; 63
    3800:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__gesf2>
    3804:	18 16       	cp	r1, r24
    3806:	0c f4       	brge	.+2      	; 0x380a <get_initial_range_guess+0x10a>
    3808:	4b c0       	rjmp	.+150    	; 0x38a0 <get_initial_range_guess+0x1a0>
    380a:	2b ed       	ldi	r18, 0xDB	; 219
    380c:	3f e0       	ldi	r19, 0x0F	; 15
    380e:	49 ec       	ldi	r20, 0xC9	; 201
    3810:	5f eb       	ldi	r21, 0xBF	; 191
    3812:	c3 01       	movw	r24, r6
    3814:	b2 01       	movw	r22, r4
    3816:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <__cmpsf2>
    381a:	88 23       	and	r24, r24
    381c:	0c f4       	brge	.+2      	; 0x3820 <get_initial_range_guess+0x120>
    381e:	44 c0       	rjmp	.+136    	; 0x38a8 <get_initial_range_guess+0x1a8>
		return 0;
	}
	
	// expected contribution (using infinite distance approximation)
	float amplitude;
	float exp_con = sensor_model(alpha)*emitter_model(beta);
    3820:	c7 01       	movw	r24, r14
    3822:	b6 01       	movw	r22, r12
    3824:	ed de       	rcall	.-550    	; 0x3600 <sensor_model>
    3826:	6b 01       	movw	r12, r22
    3828:	7c 01       	movw	r14, r24
    382a:	c3 01       	movw	r24, r6
    382c:	b2 01       	movw	r22, r4
    382e:	11 df       	rcall	.-478    	; 0x3652 <emitter_model>
    3830:	9b 01       	movw	r18, r22
    3832:	ac 01       	movw	r20, r24
    3834:	c7 01       	movw	r24, r14
    3836:	b6 01       	movw	r22, r12
    3838:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    383c:	6b 01       	movw	r12, r22
    383e:	7c 01       	movw	r14, r24
	
	if(exp_con > 0)	amplitude = brightness_matrix[best_e][best_s]/exp_con;	
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	a9 01       	movw	r20, r18
    3846:	0e 94 fe 39 	call	0x73fc	; 0x73fc <__gesf2>
    384a:	18 16       	cp	r1, r24
    384c:	8c f5       	brge	.+98     	; 0x38b0 <get_initial_range_guess+0x1b0>
    384e:	81 2f       	mov	r24, r17
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	9c 01       	movw	r18, r24
    3854:	22 0f       	add	r18, r18
    3856:	33 1f       	adc	r19, r19
    3858:	82 0f       	add	r24, r18
    385a:	93 1f       	adc	r25, r19
    385c:	88 0f       	add	r24, r24
    385e:	99 1f       	adc	r25, r25
    3860:	a8 0e       	add	r10, r24
    3862:	b9 1e       	adc	r11, r25
    3864:	f4 01       	movw	r30, r8
    3866:	ea 0d       	add	r30, r10
    3868:	fb 1d       	adc	r31, r11
    386a:	60 81       	ld	r22, Z
    386c:	70 e0       	ldi	r23, 0x00	; 0
    386e:	80 e0       	ldi	r24, 0x00	; 0
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 94 38 	call	0x7128	; 0x7128 <__floatsisf>
    3876:	a7 01       	movw	r20, r14
    3878:	96 01       	movw	r18, r12
    387a:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
	{
		//printf("ERROR: exp_con (%f) is negative (or zero)!\r\n", exp_con); 
		return 0;
	}

	return inverse_amplitude_model(amplitude, power) + 2*DROPLET_RADIUS;
    387e:	40 2f       	mov	r20, r16
    3880:	11 df       	rcall	.-478    	; 0x36a4 <inverse_amplitude_model>
    3882:	28 e9       	ldi	r18, 0x98	; 152
    3884:	3c e4       	ldi	r19, 0x4C	; 76
    3886:	45 e8       	ldi	r20, 0x85	; 133
    3888:	50 e4       	ldi	r21, 0x40	; 64
    388a:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    388e:	13 c0       	rjmp	.+38     	; 0x38b6 <get_initial_range_guess+0x1b6>
	// find alpha using infinite approximation
	alpha = bearing - basis_angle[best_s];
	if((alpha > M_PI_2) || (alpha < -M_PI_2))
	{
		//printf("ERROR: alpha out of range (alpha: %f, sensor %u)\r\n", alpha, best_s); 
		return 0;
    3890:	60 e0       	ldi	r22, 0x00	; 0
    3892:	70 e0       	ldi	r23, 0x00	; 0
    3894:	cb 01       	movw	r24, r22
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <get_initial_range_guess+0x1b6>
    3898:	60 e0       	ldi	r22, 0x00	; 0
    389a:	70 e0       	ldi	r23, 0x00	; 0
    389c:	cb 01       	movw	r24, r22
    389e:	0b c0       	rjmp	.+22     	; 0x38b6 <get_initial_range_guess+0x1b6>
	beta = bearing - heading - basis_angle[best_e] - M_PI;
	beta = pretty_angle(beta);
	if((beta > M_PI_2)  || (beta < -M_PI_2))
	{
		//printf("ERROR: beta out of range (beta: %f, emitter %u)\r\n",  beta, best_e); 
		return 0;
    38a0:	60 e0       	ldi	r22, 0x00	; 0
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	cb 01       	movw	r24, r22
    38a6:	07 c0       	rjmp	.+14     	; 0x38b6 <get_initial_range_guess+0x1b6>
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	70 e0       	ldi	r23, 0x00	; 0
    38ac:	cb 01       	movw	r24, r22
    38ae:	03 c0       	rjmp	.+6      	; 0x38b6 <get_initial_range_guess+0x1b6>
	
	if(exp_con > 0)	amplitude = brightness_matrix[best_e][best_s]/exp_con;	
	else
	{
		//printf("ERROR: exp_con (%f) is negative (or zero)!\r\n", exp_con); 
		return 0;
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	cb 01       	movw	r24, r22
	}

	return inverse_amplitude_model(amplitude, power) + 2*DROPLET_RADIUS;
}
    38b6:	24 96       	adiw	r28, 0x04	; 4
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	ff 90       	pop	r15
    38c6:	ef 90       	pop	r14
    38c8:	df 90       	pop	r13
    38ca:	cf 90       	pop	r12
    38cc:	bf 90       	pop	r11
    38ce:	af 90       	pop	r10
    38d0:	9f 90       	pop	r9
    38d2:	8f 90       	pop	r8
    38d4:	7f 90       	pop	r7
    38d6:	6f 90       	pop	r6
    38d8:	5f 90       	pop	r5
    38da:	4f 90       	pop	r4
    38dc:	08 95       	ret

000038de <range_estimate>:

float range_estimate(float init_range, float bearing, float heading, uint8_t power, uint8_t brightness_matrix[6][6])
{
    38de:	2f 92       	push	r2
    38e0:	3f 92       	push	r3
    38e2:	4f 92       	push	r4
    38e4:	5f 92       	push	r5
    38e6:	6f 92       	push	r6
    38e8:	7f 92       	push	r7
    38ea:	8f 92       	push	r8
    38ec:	9f 92       	push	r9
    38ee:	af 92       	push	r10
    38f0:	bf 92       	push	r11
    38f2:	cf 92       	push	r12
    38f4:	df 92       	push	r13
    38f6:	ef 92       	push	r14
    38f8:	ff 92       	push	r15
    38fa:	0f 93       	push	r16
    38fc:	1f 93       	push	r17
    38fe:	cf 93       	push	r28
    3900:	df 93       	push	r29
    3902:	cd b7       	in	r28, 0x3d	; 61
    3904:	de b7       	in	r29, 0x3e	; 62
    3906:	c7 5b       	subi	r28, 0xB7	; 183
    3908:	d1 09       	sbc	r29, r1
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	de bf       	out	0x3e, r29	; 62
    390e:	cd 55       	subi	r28, 0x5D	; 93
    3910:	df 4f       	sbci	r29, 0xFF	; 255
    3912:	68 83       	st	Y, r22
    3914:	79 83       	std	Y+1, r23	; 0x01
    3916:	8a 83       	std	Y+2, r24	; 0x02
    3918:	9b 83       	std	Y+3, r25	; 0x03
    391a:	c3 5a       	subi	r28, 0xA3	; 163
    391c:	d0 40       	sbci	r29, 0x00	; 0
    391e:	c9 55       	subi	r28, 0x59	; 89
    3920:	df 4f       	sbci	r29, 0xFF	; 255
    3922:	28 83       	st	Y, r18
    3924:	39 83       	std	Y+1, r19	; 0x01
    3926:	4a 83       	std	Y+2, r20	; 0x02
    3928:	5b 83       	std	Y+3, r21	; 0x03
    392a:	c7 5a       	subi	r28, 0xA7	; 167
    392c:	d0 40       	sbci	r29, 0x00	; 0
    392e:	cf 54       	subi	r28, 0x4F	; 79
    3930:	df 4f       	sbci	r29, 0xFF	; 255
    3932:	e8 82       	st	Y, r14
    3934:	f9 82       	std	Y+1, r15	; 0x01
    3936:	0a 83       	std	Y+2, r16	; 0x02
    3938:	1b 83       	std	Y+3, r17	; 0x03
    393a:	c1 5b       	subi	r28, 0xB1	; 177
    393c:	d0 40       	sbci	r29, 0x00	; 0
    393e:	cb 54       	subi	r28, 0x4B	; 75
    3940:	df 4f       	sbci	r29, 0xFF	; 255
    3942:	c8 82       	st	Y, r12
    3944:	c5 5b       	subi	r28, 0xB5	; 181
    3946:	d0 40       	sbci	r29, 0x00	; 0
    3948:	c3 56       	subi	r28, 0x63	; 99
    394a:	df 4f       	sbci	r29, 0xFF	; 255
    394c:	a8 82       	st	Y, r10
    394e:	cd 59       	subi	r28, 0x9D	; 157
    3950:	d0 40       	sbci	r29, 0x00	; 0
    3952:	c2 56       	subi	r28, 0x62	; 98
    3954:	df 4f       	sbci	r29, 0xFF	; 255
    3956:	b8 82       	st	Y, r11
    3958:	ce 59       	subi	r28, 0x9E	; 158
    395a:	d0 40       	sbci	r29, 0x00	; 0
    395c:	ce 01       	movw	r24, r28
    395e:	01 96       	adiw	r24, 0x01	; 1
    3960:	ca 54       	subi	r28, 0x4A	; 74
    3962:	df 4f       	sbci	r29, 0xFF	; 255
    3964:	88 83       	st	Y, r24
    3966:	99 83       	std	Y+1, r25	; 0x01
    3968:	c6 5b       	subi	r28, 0xB6	; 182
    396a:	d0 40       	sbci	r29, 0x00	; 0
	{
		for(uint8_t s = 0; s < 6; s++)
		{
			if(brightness_matrix[e][s]>maxBright)
			{
				maxBright = brightness_matrix[e][s];
    396c:	e0 e2       	ldi	r30, 0x20	; 32
    396e:	f0 e2       	ldi	r31, 0x20	; 32
    3970:	c5 55       	subi	r28, 0x55	; 85
    3972:	df 4f       	sbci	r29, 0xFF	; 255
    3974:	e8 83       	st	Y, r30
    3976:	f9 83       	std	Y+1, r31	; 0x01
    3978:	cb 5a       	subi	r28, 0xAB	; 171
    397a:	d0 40       	sbci	r29, 0x00	; 0
    397c:	88 e3       	ldi	r24, 0x38	; 56
    397e:	90 e2       	ldi	r25, 0x20	; 32
    3980:	c5 56       	subi	r28, 0x65	; 101
    3982:	df 4f       	sbci	r29, 0xFF	; 255
    3984:	88 83       	st	Y, r24
    3986:	99 83       	std	Y+1, r25	; 0x01
    3988:	cb 59       	subi	r28, 0x9B	; 155
    398a:	d0 40       	sbci	r29, 0x00	; 0
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
	uint8_t maxE=255;
	uint8_t maxS=255;
	for(uint8_t e = 0; e < 6; e++)
    398c:	c3 55       	subi	r28, 0x53	; 83
    398e:	df 4f       	sbci	r29, 0xFF	; 255
    3990:	18 82       	st	Y, r1
    3992:	cd 5a       	subi	r28, 0xAD	; 173
    3994:	d0 40       	sbci	r29, 0x00	; 0
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
	uint8_t maxE=255;
	uint8_t maxS=255;
    3996:	9f ef       	ldi	r25, 0xFF	; 255
    3998:	c0 55       	subi	r28, 0x50	; 80
    399a:	df 4f       	sbci	r29, 0xFF	; 255
    399c:	98 83       	st	Y, r25
    399e:	c0 5b       	subi	r28, 0xB0	; 176
    39a0:	d0 40       	sbci	r29, 0x00	; 0
	float sensorRXx, sensorRXy, sensorTXx, sensorTXy;
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
	uint8_t maxE=255;
    39a2:	ef ef       	ldi	r30, 0xFF	; 255
    39a4:	c1 55       	subi	r28, 0x51	; 81
    39a6:	df 4f       	sbci	r29, 0xFF	; 255
    39a8:	e8 83       	st	Y, r30
    39aa:	cf 5a       	subi	r28, 0xAF	; 175
    39ac:	d0 40       	sbci	r29, 0x00	; 0
	
	float sensorRXx, sensorRXy, sensorTXx, sensorTXy;
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
    39ae:	00 e0       	ldi	r16, 0x00	; 0
    39b0:	36 c2       	rjmp	.+1132   	; 0x3e1e <range_estimate+0x540>
    39b2:	cf 56       	subi	r28, 0x6F	; 111
    39b4:	df 4f       	sbci	r29, 0xFF	; 255
    39b6:	88 81       	ld	r24, Y
    39b8:	c1 59       	subi	r28, 0x91	; 145
    39ba:	d0 40       	sbci	r29, 0x00	; 0
    39bc:	c3 56       	subi	r28, 0x63	; 99
    39be:	df 4f       	sbci	r29, 0xFF	; 255
    39c0:	f8 81       	ld	r31, Y
    39c2:	cd 59       	subi	r28, 0x9D	; 157
    39c4:	d0 40       	sbci	r29, 0x00	; 0
    39c6:	8f 1b       	sub	r24, r31
	uint8_t maxS=255;
	for(uint8_t e = 0; e < 6; e++)
	{
		for(uint8_t s = 0; s < 6; s++)
		{
			if(brightness_matrix[e][s]>maxBright)
    39c8:	cf 56       	subi	r28, 0x6F	; 111
    39ca:	df 4f       	sbci	r29, 0xFF	; 255
    39cc:	e8 81       	ld	r30, Y
    39ce:	f9 81       	ldd	r31, Y+1	; 0x01
    39d0:	c1 59       	subi	r28, 0x91	; 145
    39d2:	d0 40       	sbci	r29, 0x00	; 0
    39d4:	11 91       	ld	r17, Z+
    39d6:	cf 56       	subi	r28, 0x6F	; 111
    39d8:	df 4f       	sbci	r29, 0xFF	; 255
    39da:	e8 83       	st	Y, r30
    39dc:	f9 83       	std	Y+1, r31	; 0x01
    39de:	c1 59       	subi	r28, 0x91	; 145
    39e0:	d0 40       	sbci	r29, 0x00	; 0
    39e2:	01 17       	cp	r16, r17
    39e4:	80 f4       	brcc	.+32     	; 0x3a06 <range_estimate+0x128>
    39e6:	c0 55       	subi	r28, 0x50	; 80
    39e8:	df 4f       	sbci	r29, 0xFF	; 255
    39ea:	88 83       	st	Y, r24
    39ec:	c0 5b       	subi	r28, 0xB0	; 176
    39ee:	d0 40       	sbci	r29, 0x00	; 0
    39f0:	c2 55       	subi	r28, 0x52	; 82
    39f2:	df 4f       	sbci	r29, 0xFF	; 255
    39f4:	f8 81       	ld	r31, Y
    39f6:	ce 5a       	subi	r28, 0xAE	; 174
    39f8:	d0 40       	sbci	r29, 0x00	; 0
    39fa:	c1 55       	subi	r28, 0x51	; 81
    39fc:	df 4f       	sbci	r29, 0xFF	; 255
    39fe:	f8 83       	st	Y, r31
    3a00:	cf 5a       	subi	r28, 0xAF	; 175
    3a02:	d0 40       	sbci	r29, 0x00	; 0
			{
				maxBright = brightness_matrix[e][s];
    3a04:	01 2f       	mov	r16, r17
				maxE = e;
				maxS = s;
			}
			
			if(brightness_matrix[e][s] > BASELINE_NOISE_THRESHOLD)
    3a06:	12 30       	cpi	r17, 0x02	; 2
    3a08:	08 f4       	brcc	.+2      	; 0x3a0c <range_estimate+0x12e>
    3a0a:	9b c1       	rjmp	.+822    	; 0x3d42 <range_estimate+0x464>
			{				
				sensorRXx = DROPLET_SENSOR_RADIUS*basis[s][0];
    3a0c:	28 e9       	ldi	r18, 0x98	; 152
    3a0e:	3c e4       	ldi	r19, 0x4C	; 76
    3a10:	45 e0       	ldi	r20, 0x05	; 5
    3a12:	50 e4       	ldi	r21, 0x40	; 64
    3a14:	f1 01       	movw	r30, r2
    3a16:	60 81       	ld	r22, Z
    3a18:	71 81       	ldd	r23, Z+1	; 0x01
    3a1a:	82 81       	ldd	r24, Z+2	; 0x02
    3a1c:	93 81       	ldd	r25, Z+3	; 0x03
    3a1e:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3a22:	c9 56       	subi	r28, 0x69	; 105
    3a24:	df 4f       	sbci	r29, 0xFF	; 255
    3a26:	68 83       	st	Y, r22
    3a28:	79 83       	std	Y+1, r23	; 0x01
    3a2a:	8a 83       	std	Y+2, r24	; 0x02
    3a2c:	9b 83       	std	Y+3, r25	; 0x03
    3a2e:	c7 59       	subi	r28, 0x97	; 151
    3a30:	d0 40       	sbci	r29, 0x00	; 0
				sensorRXy = DROPLET_SENSOR_RADIUS*basis[s][1];
    3a32:	28 e9       	ldi	r18, 0x98	; 152
    3a34:	3c e4       	ldi	r19, 0x4C	; 76
    3a36:	45 e0       	ldi	r20, 0x05	; 5
    3a38:	50 e4       	ldi	r21, 0x40	; 64
    3a3a:	f1 01       	movw	r30, r2
    3a3c:	64 81       	ldd	r22, Z+4	; 0x04
    3a3e:	75 81       	ldd	r23, Z+5	; 0x05
    3a40:	86 81       	ldd	r24, Z+6	; 0x06
    3a42:	97 81       	ldd	r25, Z+7	; 0x07
    3a44:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3a48:	c1 56       	subi	r28, 0x61	; 97
    3a4a:	df 4f       	sbci	r29, 0xFF	; 255
    3a4c:	68 83       	st	Y, r22
    3a4e:	79 83       	std	Y+1, r23	; 0x01
    3a50:	8a 83       	std	Y+2, r24	; 0x02
    3a52:	9b 83       	std	Y+3, r25	; 0x03
    3a54:	cf 59       	subi	r28, 0x9F	; 159
    3a56:	d0 40       	sbci	r29, 0x00	; 0
				sensorTXx = DROPLET_SENSOR_RADIUS*basis[e][0] + init_range*cosf(bearing);
    3a58:	c9 55       	subi	r28, 0x59	; 89
    3a5a:	df 4f       	sbci	r29, 0xFF	; 255
    3a5c:	68 81       	ld	r22, Y
    3a5e:	79 81       	ldd	r23, Y+1	; 0x01
    3a60:	8a 81       	ldd	r24, Y+2	; 0x02
    3a62:	9b 81       	ldd	r25, Y+3	; 0x03
    3a64:	c7 5a       	subi	r28, 0xA7	; 167
    3a66:	d0 40       	sbci	r29, 0x00	; 0
    3a68:	0e 94 f6 37 	call	0x6fec	; 0x6fec <cos>
    3a6c:	4b 01       	movw	r8, r22
    3a6e:	5c 01       	movw	r10, r24
    3a70:	28 e9       	ldi	r18, 0x98	; 152
    3a72:	3c e4       	ldi	r19, 0x4C	; 76
    3a74:	45 e0       	ldi	r20, 0x05	; 5
    3a76:	50 e4       	ldi	r21, 0x40	; 64
    3a78:	c5 56       	subi	r28, 0x65	; 101
    3a7a:	df 4f       	sbci	r29, 0xFF	; 255
    3a7c:	e8 81       	ld	r30, Y
    3a7e:	f9 81       	ldd	r31, Y+1	; 0x01
    3a80:	cb 59       	subi	r28, 0x9B	; 155
    3a82:	d0 40       	sbci	r29, 0x00	; 0
    3a84:	60 81       	ld	r22, Z
    3a86:	71 81       	ldd	r23, Z+1	; 0x01
    3a88:	82 81       	ldd	r24, Z+2	; 0x02
    3a8a:	93 81       	ldd	r25, Z+3	; 0x03
    3a8c:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3a90:	6b 01       	movw	r12, r22
    3a92:	7c 01       	movw	r14, r24
    3a94:	cd 55       	subi	r28, 0x5D	; 93
    3a96:	df 4f       	sbci	r29, 0xFF	; 255
    3a98:	28 81       	ld	r18, Y
    3a9a:	39 81       	ldd	r19, Y+1	; 0x01
    3a9c:	4a 81       	ldd	r20, Y+2	; 0x02
    3a9e:	5b 81       	ldd	r21, Y+3	; 0x03
    3aa0:	c3 5a       	subi	r28, 0xA3	; 163
    3aa2:	d0 40       	sbci	r29, 0x00	; 0
    3aa4:	c5 01       	movw	r24, r10
    3aa6:	b4 01       	movw	r22, r8
    3aa8:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3aac:	9b 01       	movw	r18, r22
    3aae:	ac 01       	movw	r20, r24
    3ab0:	c7 01       	movw	r24, r14
    3ab2:	b6 01       	movw	r22, r12
    3ab4:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    3ab8:	4b 01       	movw	r8, r22
    3aba:	5c 01       	movw	r10, r24
				sensorTXy = DROPLET_SENSOR_RADIUS*basis[e][1] + init_range*sinf(bearing);
    3abc:	c9 55       	subi	r28, 0x59	; 89
    3abe:	df 4f       	sbci	r29, 0xFF	; 255
    3ac0:	68 81       	ld	r22, Y
    3ac2:	79 81       	ldd	r23, Y+1	; 0x01
    3ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ac8:	c7 5a       	subi	r28, 0xA7	; 167
    3aca:	d0 40       	sbci	r29, 0x00	; 0
    3acc:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <sin>
    3ad0:	2b 01       	movw	r4, r22
    3ad2:	3c 01       	movw	r6, r24
    3ad4:	28 e9       	ldi	r18, 0x98	; 152
    3ad6:	3c e4       	ldi	r19, 0x4C	; 76
    3ad8:	45 e0       	ldi	r20, 0x05	; 5
    3ada:	50 e4       	ldi	r21, 0x40	; 64
    3adc:	c5 56       	subi	r28, 0x65	; 101
    3ade:	df 4f       	sbci	r29, 0xFF	; 255
    3ae0:	e8 81       	ld	r30, Y
    3ae2:	f9 81       	ldd	r31, Y+1	; 0x01
    3ae4:	cb 59       	subi	r28, 0x9B	; 155
    3ae6:	d0 40       	sbci	r29, 0x00	; 0
    3ae8:	64 81       	ldd	r22, Z+4	; 0x04
    3aea:	75 81       	ldd	r23, Z+5	; 0x05
    3aec:	86 81       	ldd	r24, Z+6	; 0x06
    3aee:	97 81       	ldd	r25, Z+7	; 0x07
    3af0:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3af4:	6b 01       	movw	r12, r22
    3af6:	7c 01       	movw	r14, r24
    3af8:	cd 55       	subi	r28, 0x5D	; 93
    3afa:	df 4f       	sbci	r29, 0xFF	; 255
    3afc:	28 81       	ld	r18, Y
    3afe:	39 81       	ldd	r19, Y+1	; 0x01
    3b00:	4a 81       	ldd	r20, Y+2	; 0x02
    3b02:	5b 81       	ldd	r21, Y+3	; 0x03
    3b04:	c3 5a       	subi	r28, 0xA3	; 163
    3b06:	d0 40       	sbci	r29, 0x00	; 0
    3b08:	c3 01       	movw	r24, r6
    3b0a:	b2 01       	movw	r22, r4
    3b0c:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3b10:	9b 01       	movw	r18, r22
    3b12:	ac 01       	movw	r20, r24
    3b14:	c7 01       	movw	r24, r14
    3b16:	b6 01       	movw	r22, r12
    3b18:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    3b1c:	6b 01       	movw	r12, r22
    3b1e:	7c 01       	movw	r14, r24

				alpha = atan2f(sensorTXy-sensorRXy,sensorTXx-sensorRXx) - basis_angle[s];
    3b20:	c9 56       	subi	r28, 0x69	; 105
    3b22:	df 4f       	sbci	r29, 0xFF	; 255
    3b24:	28 81       	ld	r18, Y
    3b26:	39 81       	ldd	r19, Y+1	; 0x01
    3b28:	4a 81       	ldd	r20, Y+2	; 0x02
    3b2a:	5b 81       	ldd	r21, Y+3	; 0x03
    3b2c:	c7 59       	subi	r28, 0x97	; 151
    3b2e:	d0 40       	sbci	r29, 0x00	; 0
    3b30:	c5 01       	movw	r24, r10
    3b32:	b4 01       	movw	r22, r8
    3b34:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3b38:	2b 01       	movw	r4, r22
    3b3a:	3c 01       	movw	r6, r24
    3b3c:	c1 56       	subi	r28, 0x61	; 97
    3b3e:	df 4f       	sbci	r29, 0xFF	; 255
    3b40:	28 81       	ld	r18, Y
    3b42:	39 81       	ldd	r19, Y+1	; 0x01
    3b44:	4a 81       	ldd	r20, Y+2	; 0x02
    3b46:	5b 81       	ldd	r21, Y+3	; 0x03
    3b48:	cf 59       	subi	r28, 0x9F	; 159
    3b4a:	d0 40       	sbci	r29, 0x00	; 0
    3b4c:	c7 01       	movw	r24, r14
    3b4e:	b6 01       	movw	r22, r12
    3b50:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3b54:	a3 01       	movw	r20, r6
    3b56:	92 01       	movw	r18, r4
    3b58:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <atan2>
    3b5c:	cb 56       	subi	r28, 0x6B	; 107
    3b5e:	df 4f       	sbci	r29, 0xFF	; 255
    3b60:	e8 81       	ld	r30, Y
    3b62:	f9 81       	ldd	r31, Y+1	; 0x01
    3b64:	c5 59       	subi	r28, 0x95	; 149
    3b66:	d0 40       	sbci	r29, 0x00	; 0
    3b68:	20 81       	ld	r18, Z
    3b6a:	31 81       	ldd	r19, Z+1	; 0x01
    3b6c:	42 81       	ldd	r20, Z+2	; 0x02
    3b6e:	53 81       	ldd	r21, Z+3	; 0x03
    3b70:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3b74:	2b 01       	movw	r4, r22
    3b76:	3c 01       	movw	r6, r24
				beta = atan2f(sensorRXy-sensorTXy,sensorRXx-sensorTXx) - basis_angle[e] - heading;
    3b78:	a5 01       	movw	r20, r10
    3b7a:	94 01       	movw	r18, r8
    3b7c:	c9 56       	subi	r28, 0x69	; 105
    3b7e:	df 4f       	sbci	r29, 0xFF	; 255
    3b80:	68 81       	ld	r22, Y
    3b82:	79 81       	ldd	r23, Y+1	; 0x01
    3b84:	8a 81       	ldd	r24, Y+2	; 0x02
    3b86:	9b 81       	ldd	r25, Y+3	; 0x03
    3b88:	c7 59       	subi	r28, 0x97	; 151
    3b8a:	d0 40       	sbci	r29, 0x00	; 0
    3b8c:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3b90:	4b 01       	movw	r8, r22
    3b92:	5c 01       	movw	r10, r24
    3b94:	a7 01       	movw	r20, r14
    3b96:	96 01       	movw	r18, r12
    3b98:	c1 56       	subi	r28, 0x61	; 97
    3b9a:	df 4f       	sbci	r29, 0xFF	; 255
    3b9c:	68 81       	ld	r22, Y
    3b9e:	79 81       	ldd	r23, Y+1	; 0x01
    3ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba4:	cf 59       	subi	r28, 0x9F	; 159
    3ba6:	d0 40       	sbci	r29, 0x00	; 0
    3ba8:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3bac:	a5 01       	movw	r20, r10
    3bae:	94 01       	movw	r18, r8
    3bb0:	0e 94 9f 37 	call	0x6f3e	; 0x6f3e <atan2>
    3bb4:	c5 55       	subi	r28, 0x55	; 85
    3bb6:	df 4f       	sbci	r29, 0xFF	; 255
    3bb8:	e8 81       	ld	r30, Y
    3bba:	f9 81       	ldd	r31, Y+1	; 0x01
    3bbc:	cb 5a       	subi	r28, 0xAB	; 171
    3bbe:	d0 40       	sbci	r29, 0x00	; 0
    3bc0:	20 81       	ld	r18, Z
    3bc2:	31 81       	ldd	r19, Z+1	; 0x01
    3bc4:	42 81       	ldd	r20, Z+2	; 0x02
    3bc6:	53 81       	ldd	r21, Z+3	; 0x03
    3bc8:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3bcc:	cf 54       	subi	r28, 0x4F	; 79
    3bce:	df 4f       	sbci	r29, 0xFF	; 255
    3bd0:	28 81       	ld	r18, Y
    3bd2:	39 81       	ldd	r19, Y+1	; 0x01
    3bd4:	4a 81       	ldd	r20, Y+2	; 0x02
    3bd6:	5b 81       	ldd	r21, Y+3	; 0x03
    3bd8:	c1 5b       	subi	r28, 0xB1	; 177
    3bda:	d0 40       	sbci	r29, 0x00	; 0
    3bdc:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3be0:	6b 01       	movw	r12, r22
    3be2:	7c 01       	movw	r14, r24

				alpha = pretty_angle(alpha);
    3be4:	c3 01       	movw	r24, r6
    3be6:	b2 01       	movw	r22, r4
    3be8:	2c dc       	rcall	.-1960   	; 0x3442 <pretty_angle>
    3bea:	2b 01       	movw	r4, r22
    3bec:	3c 01       	movw	r6, r24
				beta = pretty_angle(beta);
    3bee:	c7 01       	movw	r24, r14
    3bf0:	b6 01       	movw	r22, r12
    3bf2:	27 dc       	rcall	.-1970   	; 0x3442 <pretty_angle>
    3bf4:	6b 01       	movw	r12, r22
    3bf6:	7c 01       	movw	r14, r24
				
				sense_emit_contr = sensor_model(alpha)*emitter_model(beta);
    3bf8:	c3 01       	movw	r24, r6
    3bfa:	b2 01       	movw	r22, r4
    3bfc:	01 dd       	rcall	.-1534   	; 0x3600 <sensor_model>
    3bfe:	c9 56       	subi	r28, 0x69	; 105
    3c00:	df 4f       	sbci	r29, 0xFF	; 255
    3c02:	68 83       	st	Y, r22
    3c04:	79 83       	std	Y+1, r23	; 0x01
    3c06:	8a 83       	std	Y+2, r24	; 0x02
    3c08:	9b 83       	std	Y+3, r25	; 0x03
    3c0a:	c7 59       	subi	r28, 0x97	; 151
    3c0c:	d0 40       	sbci	r29, 0x00	; 0
    3c0e:	c7 01       	movw	r24, r14
    3c10:	b6 01       	movw	r22, r12
    3c12:	1f dd       	rcall	.-1474   	; 0x3652 <emitter_model>
    3c14:	6b 01       	movw	r12, r22
    3c16:	7c 01       	movw	r14, r24

				calcRIJmag = inverse_amplitude_model(brightness_matrix[e][s]/sense_emit_contr, power);
    3c18:	61 2f       	mov	r22, r17
    3c1a:	70 e0       	ldi	r23, 0x00	; 0
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	0e 94 94 38 	call	0x7128	; 0x7128 <__floatsisf>
    3c24:	4b 01       	movw	r8, r22
    3c26:	5c 01       	movw	r10, r24
				beta = atan2f(sensorRXy-sensorTXy,sensorRXx-sensorTXx) - basis_angle[e] - heading;

				alpha = pretty_angle(alpha);
				beta = pretty_angle(beta);
				
				sense_emit_contr = sensor_model(alpha)*emitter_model(beta);
    3c28:	a7 01       	movw	r20, r14
    3c2a:	96 01       	movw	r18, r12
    3c2c:	c9 56       	subi	r28, 0x69	; 105
    3c2e:	df 4f       	sbci	r29, 0xFF	; 255
    3c30:	68 81       	ld	r22, Y
    3c32:	79 81       	ldd	r23, Y+1	; 0x01
    3c34:	8a 81       	ldd	r24, Y+2	; 0x02
    3c36:	9b 81       	ldd	r25, Y+3	; 0x03
    3c38:	c7 59       	subi	r28, 0x97	; 151
    3c3a:	d0 40       	sbci	r29, 0x00	; 0
    3c3c:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3c40:	9b 01       	movw	r18, r22
    3c42:	ac 01       	movw	r20, r24

				calcRIJmag = inverse_amplitude_model(brightness_matrix[e][s]/sense_emit_contr, power);
    3c44:	c5 01       	movw	r24, r10
    3c46:	b4 01       	movw	r22, r8
    3c48:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    3c4c:	cb 54       	subi	r28, 0x4B	; 75
    3c4e:	df 4f       	sbci	r29, 0xFF	; 255
    3c50:	48 81       	ld	r20, Y
    3c52:	c5 5b       	subi	r28, 0xB5	; 181
    3c54:	d0 40       	sbci	r29, 0x00	; 0
    3c56:	26 dd       	rcall	.-1460   	; 0x36a4 <inverse_amplitude_model>
    3c58:	4b 01       	movw	r8, r22
    3c5a:	5c 01       	movw	r10, r24
				calcRx = calcRIJmag*cosf(alpha) + DROPLET_SENSOR_RADIUS*(basis[s][0] - basis[e][0]);
    3c5c:	c3 01       	movw	r24, r6
    3c5e:	b2 01       	movw	r22, r4
    3c60:	0e 94 f6 37 	call	0x6fec	; 0x6fec <cos>
    3c64:	a5 01       	movw	r20, r10
    3c66:	94 01       	movw	r18, r8
    3c68:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3c6c:	6b 01       	movw	r12, r22
    3c6e:	7c 01       	movw	r14, r24
    3c70:	c5 56       	subi	r28, 0x65	; 101
    3c72:	df 4f       	sbci	r29, 0xFF	; 255
    3c74:	e8 81       	ld	r30, Y
    3c76:	f9 81       	ldd	r31, Y+1	; 0x01
    3c78:	cb 59       	subi	r28, 0x9B	; 155
    3c7a:	d0 40       	sbci	r29, 0x00	; 0
    3c7c:	20 81       	ld	r18, Z
    3c7e:	31 81       	ldd	r19, Z+1	; 0x01
    3c80:	42 81       	ldd	r20, Z+2	; 0x02
    3c82:	53 81       	ldd	r21, Z+3	; 0x03
    3c84:	f1 01       	movw	r30, r2
    3c86:	60 81       	ld	r22, Z
    3c88:	71 81       	ldd	r23, Z+1	; 0x01
    3c8a:	82 81       	ldd	r24, Z+2	; 0x02
    3c8c:	93 81       	ldd	r25, Z+3	; 0x03
    3c8e:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3c92:	28 e9       	ldi	r18, 0x98	; 152
    3c94:	3c e4       	ldi	r19, 0x4C	; 76
    3c96:	45 e0       	ldi	r20, 0x05	; 5
    3c98:	50 e4       	ldi	r21, 0x40	; 64
    3c9a:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3c9e:	9b 01       	movw	r18, r22
    3ca0:	ac 01       	movw	r20, r24
    3ca2:	c7 01       	movw	r24, r14
    3ca4:	b6 01       	movw	r22, r12
    3ca6:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    3caa:	6b 01       	movw	r12, r22
    3cac:	7c 01       	movw	r14, r24
				calcRy = calcRIJmag*sinf(alpha) + DROPLET_SENSOR_RADIUS*(basis[s][1] - basis[e][1]);
    3cae:	c3 01       	movw	r24, r6
    3cb0:	b2 01       	movw	r22, r4
    3cb2:	0e 94 6c 3a 	call	0x74d8	; 0x74d8 <sin>
    3cb6:	a5 01       	movw	r20, r10
    3cb8:	94 01       	movw	r18, r8
    3cba:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3cbe:	4b 01       	movw	r8, r22
    3cc0:	5c 01       	movw	r10, r24
    3cc2:	c5 56       	subi	r28, 0x65	; 101
    3cc4:	df 4f       	sbci	r29, 0xFF	; 255
    3cc6:	e8 81       	ld	r30, Y
    3cc8:	f9 81       	ldd	r31, Y+1	; 0x01
    3cca:	cb 59       	subi	r28, 0x9B	; 155
    3ccc:	d0 40       	sbci	r29, 0x00	; 0
    3cce:	24 81       	ldd	r18, Z+4	; 0x04
    3cd0:	35 81       	ldd	r19, Z+5	; 0x05
    3cd2:	46 81       	ldd	r20, Z+6	; 0x06
    3cd4:	57 81       	ldd	r21, Z+7	; 0x07
    3cd6:	f1 01       	movw	r30, r2
    3cd8:	64 81       	ldd	r22, Z+4	; 0x04
    3cda:	75 81       	ldd	r23, Z+5	; 0x05
    3cdc:	86 81       	ldd	r24, Z+6	; 0x06
    3cde:	97 81       	ldd	r25, Z+7	; 0x07
    3ce0:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    3ce4:	28 e9       	ldi	r18, 0x98	; 152
    3ce6:	3c e4       	ldi	r19, 0x4C	; 76
    3ce8:	45 e0       	ldi	r20, 0x05	; 5
    3cea:	50 e4       	ldi	r21, 0x40	; 64
    3cec:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3cf0:	9b 01       	movw	r18, r22
    3cf2:	ac 01       	movw	r20, r24
    3cf4:	c5 01       	movw	r24, r10
    3cf6:	b4 01       	movw	r22, r8
    3cf8:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    3cfc:	4b 01       	movw	r8, r22
    3cfe:	5c 01       	movw	r10, r24
				range_matrix[e][s] = sqrt(calcRx*calcRx + calcRy*calcRy);
    3d00:	a7 01       	movw	r20, r14
    3d02:	96 01       	movw	r18, r12
    3d04:	c7 01       	movw	r24, r14
    3d06:	b6 01       	movw	r22, r12
    3d08:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3d0c:	6b 01       	movw	r12, r22
    3d0e:	7c 01       	movw	r14, r24
    3d10:	a5 01       	movw	r20, r10
    3d12:	94 01       	movw	r18, r8
    3d14:	c5 01       	movw	r24, r10
    3d16:	b4 01       	movw	r22, r8
    3d18:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    3d1c:	9b 01       	movw	r18, r22
    3d1e:	ac 01       	movw	r20, r24
    3d20:	c7 01       	movw	r24, r14
    3d22:	b6 01       	movw	r22, r12
    3d24:	0e 94 2c 37 	call	0x6e58	; 0x6e58 <__addsf3>
    3d28:	0e 94 76 3a 	call	0x74ec	; 0x74ec <sqrt>
    3d2c:	cd 56       	subi	r28, 0x6D	; 109
    3d2e:	df 4f       	sbci	r29, 0xFF	; 255
    3d30:	e8 81       	ld	r30, Y
    3d32:	f9 81       	ldd	r31, Y+1	; 0x01
    3d34:	c3 59       	subi	r28, 0x93	; 147
    3d36:	d0 40       	sbci	r29, 0x00	; 0
    3d38:	60 83       	st	Z, r22
    3d3a:	71 83       	std	Z+1, r23	; 0x01
    3d3c:	82 83       	std	Z+2, r24	; 0x02
    3d3e:	93 83       	std	Z+3, r25	; 0x03
				continue;
    3d40:	0a c0       	rjmp	.+20     	; 0x3d56 <range_estimate+0x478>
			}
			range_matrix[e][s]=0;
    3d42:	cd 56       	subi	r28, 0x6D	; 109
    3d44:	df 4f       	sbci	r29, 0xFF	; 255
    3d46:	e8 81       	ld	r30, Y
    3d48:	f9 81       	ldd	r31, Y+1	; 0x01
    3d4a:	c3 59       	subi	r28, 0x93	; 147
    3d4c:	d0 40       	sbci	r29, 0x00	; 0
    3d4e:	10 82       	st	Z, r1
    3d50:	11 82       	std	Z+1, r1	; 0x01
    3d52:	12 82       	std	Z+2, r1	; 0x02
    3d54:	13 82       	std	Z+3, r1	; 0x03
    3d56:	f8 e0       	ldi	r31, 0x08	; 8
    3d58:	2f 0e       	add	r2, r31
    3d5a:	31 1c       	adc	r3, r1
    3d5c:	cb 56       	subi	r28, 0x6B	; 107
    3d5e:	df 4f       	sbci	r29, 0xFF	; 255
    3d60:	88 81       	ld	r24, Y
    3d62:	99 81       	ldd	r25, Y+1	; 0x01
    3d64:	c5 59       	subi	r28, 0x95	; 149
    3d66:	d0 40       	sbci	r29, 0x00	; 0
    3d68:	04 96       	adiw	r24, 0x04	; 4
    3d6a:	cb 56       	subi	r28, 0x6B	; 107
    3d6c:	df 4f       	sbci	r29, 0xFF	; 255
    3d6e:	88 83       	st	Y, r24
    3d70:	99 83       	std	Y+1, r25	; 0x01
    3d72:	c5 59       	subi	r28, 0x95	; 149
    3d74:	d0 40       	sbci	r29, 0x00	; 0
    3d76:	cd 56       	subi	r28, 0x6D	; 109
    3d78:	df 4f       	sbci	r29, 0xFF	; 255
    3d7a:	e8 81       	ld	r30, Y
    3d7c:	f9 81       	ldd	r31, Y+1	; 0x01
    3d7e:	c3 59       	subi	r28, 0x93	; 147
    3d80:	d0 40       	sbci	r29, 0x00	; 0
    3d82:	34 96       	adiw	r30, 0x04	; 4
    3d84:	cd 56       	subi	r28, 0x6D	; 109
    3d86:	df 4f       	sbci	r29, 0xFF	; 255
    3d88:	e8 83       	st	Y, r30
    3d8a:	f9 83       	std	Y+1, r31	; 0x01
    3d8c:	c3 59       	subi	r28, 0x93	; 147
    3d8e:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t maxBright = 0;
	uint8_t maxE=255;
	uint8_t maxS=255;
	for(uint8_t e = 0; e < 6; e++)
	{
		for(uint8_t s = 0; s < 6; s++)
    3d90:	f8 e6       	ldi	r31, 0x68	; 104
    3d92:	2f 16       	cp	r2, r31
    3d94:	f0 e2       	ldi	r31, 0x20	; 32
    3d96:	3f 06       	cpc	r3, r31
    3d98:	09 f0       	breq	.+2      	; 0x3d9c <range_estimate+0x4be>
    3d9a:	0b ce       	rjmp	.-1002   	; 0x39b2 <range_estimate+0xd4>
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
	uint8_t maxE=255;
	uint8_t maxS=255;
	for(uint8_t e = 0; e < 6; e++)
    3d9c:	c3 55       	subi	r28, 0x53	; 83
    3d9e:	df 4f       	sbci	r29, 0xFF	; 255
    3da0:	28 81       	ld	r18, Y
    3da2:	cd 5a       	subi	r28, 0xAD	; 173
    3da4:	d0 40       	sbci	r29, 0x00	; 0
    3da6:	2f 5f       	subi	r18, 0xFF	; 255
    3da8:	c3 55       	subi	r28, 0x53	; 83
    3daa:	df 4f       	sbci	r29, 0xFF	; 255
    3dac:	28 83       	st	Y, r18
    3dae:	cd 5a       	subi	r28, 0xAD	; 173
    3db0:	d0 40       	sbci	r29, 0x00	; 0
    3db2:	c5 56       	subi	r28, 0x65	; 101
    3db4:	df 4f       	sbci	r29, 0xFF	; 255
    3db6:	88 81       	ld	r24, Y
    3db8:	99 81       	ldd	r25, Y+1	; 0x01
    3dba:	cb 59       	subi	r28, 0x9B	; 155
    3dbc:	d0 40       	sbci	r29, 0x00	; 0
    3dbe:	08 96       	adiw	r24, 0x08	; 8
    3dc0:	c5 56       	subi	r28, 0x65	; 101
    3dc2:	df 4f       	sbci	r29, 0xFF	; 255
    3dc4:	88 83       	st	Y, r24
    3dc6:	99 83       	std	Y+1, r25	; 0x01
    3dc8:	cb 59       	subi	r28, 0x9B	; 155
    3dca:	d0 40       	sbci	r29, 0x00	; 0
    3dcc:	c5 55       	subi	r28, 0x55	; 85
    3dce:	df 4f       	sbci	r29, 0xFF	; 255
    3dd0:	e8 81       	ld	r30, Y
    3dd2:	f9 81       	ldd	r31, Y+1	; 0x01
    3dd4:	cb 5a       	subi	r28, 0xAB	; 171
    3dd6:	d0 40       	sbci	r29, 0x00	; 0
    3dd8:	34 96       	adiw	r30, 0x04	; 4
    3dda:	c5 55       	subi	r28, 0x55	; 85
    3ddc:	df 4f       	sbci	r29, 0xFF	; 255
    3dde:	e8 83       	st	Y, r30
    3de0:	f9 83       	std	Y+1, r31	; 0x01
    3de2:	cb 5a       	subi	r28, 0xAB	; 171
    3de4:	d0 40       	sbci	r29, 0x00	; 0
    3de6:	c3 56       	subi	r28, 0x63	; 99
    3de8:	df 4f       	sbci	r29, 0xFF	; 255
    3dea:	88 81       	ld	r24, Y
    3dec:	99 81       	ldd	r25, Y+1	; 0x01
    3dee:	cd 59       	subi	r28, 0x9D	; 157
    3df0:	d0 40       	sbci	r29, 0x00	; 0
    3df2:	06 96       	adiw	r24, 0x06	; 6
    3df4:	c3 56       	subi	r28, 0x63	; 99
    3df6:	df 4f       	sbci	r29, 0xFF	; 255
    3df8:	88 83       	st	Y, r24
    3dfa:	99 83       	std	Y+1, r25	; 0x01
    3dfc:	cd 59       	subi	r28, 0x9D	; 157
    3dfe:	d0 40       	sbci	r29, 0x00	; 0
    3e00:	ca 54       	subi	r28, 0x4A	; 74
    3e02:	df 4f       	sbci	r29, 0xFF	; 255
    3e04:	e8 81       	ld	r30, Y
    3e06:	f9 81       	ldd	r31, Y+1	; 0x01
    3e08:	c6 5b       	subi	r28, 0xB6	; 182
    3e0a:	d0 40       	sbci	r29, 0x00	; 0
    3e0c:	78 96       	adiw	r30, 0x18	; 24
    3e0e:	ca 54       	subi	r28, 0x4A	; 74
    3e10:	df 4f       	sbci	r29, 0xFF	; 255
    3e12:	e8 83       	st	Y, r30
    3e14:	f9 83       	std	Y+1, r31	; 0x01
    3e16:	c6 5b       	subi	r28, 0xB6	; 182
    3e18:	d0 40       	sbci	r29, 0x00	; 0
    3e1a:	26 30       	cpi	r18, 0x06	; 6
    3e1c:	89 f1       	breq	.+98     	; 0x3e80 <range_estimate+0x5a2>

	return inverse_amplitude_model(amplitude, power) + 2*DROPLET_RADIUS;
}

float range_estimate(float init_range, float bearing, float heading, uint8_t power, uint8_t brightness_matrix[6][6])
{
    3e1e:	ca 54       	subi	r28, 0x4A	; 74
    3e20:	df 4f       	sbci	r29, 0xFF	; 255
    3e22:	88 81       	ld	r24, Y
    3e24:	99 81       	ldd	r25, Y+1	; 0x01
    3e26:	c6 5b       	subi	r28, 0xB6	; 182
    3e28:	d0 40       	sbci	r29, 0x00	; 0
    3e2a:	cd 56       	subi	r28, 0x6D	; 109
    3e2c:	df 4f       	sbci	r29, 0xFF	; 255
    3e2e:	88 83       	st	Y, r24
    3e30:	99 83       	std	Y+1, r25	; 0x01
    3e32:	c3 59       	subi	r28, 0x93	; 147
    3e34:	d0 40       	sbci	r29, 0x00	; 0
    3e36:	e0 e2       	ldi	r30, 0x20	; 32
    3e38:	f0 e2       	ldi	r31, 0x20	; 32
    3e3a:	cb 56       	subi	r28, 0x6B	; 107
    3e3c:	df 4f       	sbci	r29, 0xFF	; 255
    3e3e:	e8 83       	st	Y, r30
    3e40:	f9 83       	std	Y+1, r31	; 0x01
    3e42:	c5 59       	subi	r28, 0x95	; 149
    3e44:	d0 40       	sbci	r29, 0x00	; 0
    3e46:	0f 2e       	mov	r0, r31
    3e48:	f8 e3       	ldi	r31, 0x38	; 56
    3e4a:	2f 2e       	mov	r2, r31
    3e4c:	f0 e2       	ldi	r31, 0x20	; 32
    3e4e:	3f 2e       	mov	r3, r31
    3e50:	f0 2d       	mov	r31, r0
    3e52:	c3 56       	subi	r28, 0x63	; 99
    3e54:	df 4f       	sbci	r29, 0xFF	; 255
    3e56:	88 81       	ld	r24, Y
    3e58:	99 81       	ldd	r25, Y+1	; 0x01
    3e5a:	cd 59       	subi	r28, 0x9D	; 157
    3e5c:	d0 40       	sbci	r29, 0x00	; 0
    3e5e:	cf 56       	subi	r28, 0x6F	; 111
    3e60:	df 4f       	sbci	r29, 0xFF	; 255
    3e62:	88 83       	st	Y, r24
    3e64:	99 83       	std	Y+1, r25	; 0x01
    3e66:	c1 59       	subi	r28, 0x91	; 145
    3e68:	d0 40       	sbci	r29, 0x00	; 0
    3e6a:	c3 55       	subi	r28, 0x53	; 83
    3e6c:	df 4f       	sbci	r29, 0xFF	; 255
    3e6e:	98 81       	ld	r25, Y
    3e70:	cd 5a       	subi	r28, 0xAD	; 173
    3e72:	d0 40       	sbci	r29, 0x00	; 0
    3e74:	c2 55       	subi	r28, 0x52	; 82
    3e76:	df 4f       	sbci	r29, 0xFF	; 255
    3e78:	98 83       	st	Y, r25
    3e7a:	ce 5a       	subi	r28, 0xAE	; 174
    3e7c:	d0 40       	sbci	r29, 0x00	; 0
    3e7e:	99 cd       	rjmp	.-1230   	; 0x39b2 <range_estimate+0xd4>
			}
			range_matrix[e][s]=0;
		}
	}
	
	float range = range_matrix[maxE][maxS];
    3e80:	c1 55       	subi	r28, 0x51	; 81
    3e82:	df 4f       	sbci	r29, 0xFF	; 255
    3e84:	e8 81       	ld	r30, Y
    3e86:	cf 5a       	subi	r28, 0xAF	; 175
    3e88:	d0 40       	sbci	r29, 0x00	; 0
    3e8a:	8e 2f       	mov	r24, r30
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	fc 01       	movw	r30, r24
    3e90:	ee 0f       	add	r30, r30
    3e92:	ff 1f       	adc	r31, r31
    3e94:	8e 0f       	add	r24, r30
    3e96:	9f 1f       	adc	r25, r31
    3e98:	fc 01       	movw	r30, r24
    3e9a:	ee 0f       	add	r30, r30
    3e9c:	ff 1f       	adc	r31, r31
    3e9e:	c0 55       	subi	r28, 0x50	; 80
    3ea0:	df 4f       	sbci	r29, 0xFF	; 255
    3ea2:	28 81       	ld	r18, Y
    3ea4:	c0 5b       	subi	r28, 0xB0	; 176
    3ea6:	d0 40       	sbci	r29, 0x00	; 0
    3ea8:	e2 0f       	add	r30, r18
    3eaa:	f1 1d       	adc	r31, r1
    3eac:	ee 0f       	add	r30, r30
    3eae:	ff 1f       	adc	r31, r31
    3eb0:	ee 0f       	add	r30, r30
    3eb2:	ff 1f       	adc	r31, r31
    3eb4:	ec 0f       	add	r30, r28
    3eb6:	fd 1f       	adc	r31, r29
    3eb8:	61 81       	ldd	r22, Z+1	; 0x01
    3eba:	72 81       	ldd	r23, Z+2	; 0x02
    3ebc:	83 81       	ldd	r24, Z+3	; 0x03
    3ebe:	94 81       	ldd	r25, Z+4	; 0x04
	return range;
}
    3ec0:	c9 54       	subi	r28, 0x49	; 73
    3ec2:	df 4f       	sbci	r29, 0xFF	; 255
    3ec4:	cd bf       	out	0x3d, r28	; 61
    3ec6:	de bf       	out	0x3e, r29	; 62
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	1f 91       	pop	r17
    3ece:	0f 91       	pop	r16
    3ed0:	ff 90       	pop	r15
    3ed2:	ef 90       	pop	r14
    3ed4:	df 90       	pop	r13
    3ed6:	cf 90       	pop	r12
    3ed8:	bf 90       	pop	r11
    3eda:	af 90       	pop	r10
    3edc:	9f 90       	pop	r9
    3ede:	8f 90       	pop	r8
    3ee0:	7f 90       	pop	r7
    3ee2:	6f 90       	pop	r6
    3ee4:	5f 90       	pop	r5
    3ee6:	4f 90       	pop	r4
    3ee8:	3f 90       	pop	r3
    3eea:	2f 90       	pop	r2
    3eec:	08 95       	ret

00003eee <use_rnb_data>:
	//schedule_task(10,brightness_meas_printout_mathematica,NULL);
	schedule_task(20, use_rnb_data, (void*)(&power));
}

void use_rnb_data(uint8_t power)
{
    3eee:	4f 92       	push	r4
    3ef0:	5f 92       	push	r5
    3ef2:	6f 92       	push	r6
    3ef4:	7f 92       	push	r7
    3ef6:	8f 92       	push	r8
    3ef8:	9f 92       	push	r9
    3efa:	af 92       	push	r10
    3efc:	bf 92       	push	r11
    3efe:	cf 92       	push	r12
    3f00:	df 92       	push	r13
    3f02:	ef 92       	push	r14
    3f04:	ff 92       	push	r15
    3f06:	0f 93       	push	r16
    3f08:	1f 93       	push	r17
    3f0a:	cf 93       	push	r28
    3f0c:	df 93       	push	r29
    3f0e:	cd b7       	in	r28, 0x3d	; 61
    3f10:	de b7       	in	r29, 0x3e	; 62
    3f12:	e8 97       	sbiw	r28, 0x38	; 56
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	de bf       	out	0x3e, r29	; 62
	power = 255;
	uint8_t brightness_matrix[6][6];
	uint8_t error = pack_measurements_into_matrix(brightness_matrix);
    3f18:	ce 01       	movw	r24, r28
    3f1a:	01 96       	adiw	r24, 0x01	; 1
    3f1c:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <pack_measurements_into_matrix>
	if(error) return;
    3f20:	81 11       	cpse	r24, r1
    3f22:	6c c0       	rjmp	.+216    	; 0x3ffc <use_rnb_data+0x10e>
	*/
	//print_brightness_matrix(brightness_matrix);
	
	uint8_t emitter_total[6];
	uint8_t sensor_total[6];
	fill_S_and_T(brightness_matrix, sensor_total, emitter_total);
    3f24:	ae 01       	movw	r20, r28
    3f26:	4b 5d       	subi	r20, 0xDB	; 219
    3f28:	5f 4f       	sbci	r21, 0xFF	; 255
    3f2a:	be 01       	movw	r22, r28
    3f2c:	65 5d       	subi	r22, 0xD5	; 213
    3f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f30:	ce 01       	movw	r24, r28
    3f32:	01 96       	adiw	r24, 0x01	; 1
    3f34:	0e 94 02 17 	call	0x2e04	; 0x2e04 <fill_S_and_T>
	
	float bearing = get_bearing(sensor_total);
    3f38:	ce 01       	movw	r24, r28
    3f3a:	8b 96       	adiw	r24, 0x2b	; 43
    3f3c:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <get_bearing>
    3f40:	2b 01       	movw	r4, r22
    3f42:	3c 01       	movw	r6, r24
	float heading = get_heading(emitter_total, bearing);
    3f44:	ab 01       	movw	r20, r22
    3f46:	bc 01       	movw	r22, r24
    3f48:	ce 01       	movw	r24, r28
    3f4a:	85 96       	adiw	r24, 0x25	; 37
    3f4c:	b5 da       	rcall	.-2710   	; 0x34b8 <get_heading>
    3f4e:	69 ab       	std	Y+49, r22	; 0x31
    3f50:	7a ab       	std	Y+50, r23	; 0x32
    3f52:	8b ab       	std	Y+51, r24	; 0x33
    3f54:	9c ab       	std	Y+52, r25	; 0x34
	
	float initial_range = get_initial_range_guess(bearing, heading, power, sensor_total, emitter_total, brightness_matrix);
    3f56:	ce 01       	movw	r24, r28
    3f58:	01 96       	adiw	r24, 0x01	; 1
    3f5a:	5c 01       	movw	r10, r24
    3f5c:	de 01       	movw	r26, r28
    3f5e:	95 96       	adiw	r26, 0x25	; 37
    3f60:	6d 01       	movw	r12, r26
    3f62:	8a 96       	adiw	r24, 0x2a	; 42
    3f64:	7c 01       	movw	r14, r24
    3f66:	0f ef       	ldi	r16, 0xFF	; 255
    3f68:	29 a9       	ldd	r18, Y+49	; 0x31
    3f6a:	3a a9       	ldd	r19, Y+50	; 0x32
    3f6c:	4b a9       	ldd	r20, Y+51	; 0x33
    3f6e:	5c a9       	ldd	r21, Y+52	; 0x34
    3f70:	c3 01       	movw	r24, r6
    3f72:	b2 01       	movw	r22, r4
    3f74:	c5 db       	rcall	.-2166   	; 0x3700 <get_initial_range_guess>
    3f76:	6d ab       	std	Y+53, r22	; 0x35
    3f78:	7e ab       	std	Y+54, r23	; 0x36
    3f7a:	8f ab       	std	Y+55, r24	; 0x37
    3f7c:	98 af       	std	Y+56, r25	; 0x38
	if(initial_range==0) return; //Some error occurred.
    3f7e:	20 e0       	ldi	r18, 0x00	; 0
    3f80:	30 e0       	ldi	r19, 0x00	; 0
    3f82:	a9 01       	movw	r20, r18
    3f84:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <__cmpsf2>
    3f88:	88 23       	and	r24, r24
    3f8a:	c1 f1       	breq	.+112    	; 0x3ffc <use_rnb_data+0x10e>
	float range = range_estimate(initial_range, bearing, heading, power, brightness_matrix);
    3f8c:	cc 24       	eor	r12, r12
    3f8e:	ca 94       	dec	r12
    3f90:	e9 a8       	ldd	r14, Y+49	; 0x31
    3f92:	fa a8       	ldd	r15, Y+50	; 0x32
    3f94:	0b a9       	ldd	r16, Y+51	; 0x33
    3f96:	1c a9       	ldd	r17, Y+52	; 0x34
    3f98:	a3 01       	movw	r20, r6
    3f9a:	92 01       	movw	r18, r4
    3f9c:	6d a9       	ldd	r22, Y+53	; 0x35
    3f9e:	7e a9       	ldd	r23, Y+54	; 0x36
    3fa0:	8f a9       	ldd	r24, Y+55	; 0x37
    3fa2:	98 ad       	ldd	r25, Y+56	; 0x38
    3fa4:	9c dc       	rcall	.-1736   	; 0x38de <range_estimate>
	
	last_good_rnb.range = range;
    3fa6:	60 93 e2 2d 	sts	0x2DE2, r22
    3faa:	70 93 e3 2d 	sts	0x2DE3, r23
    3fae:	80 93 e4 2d 	sts	0x2DE4, r24
    3fb2:	90 93 e5 2d 	sts	0x2DE5, r25
	last_good_rnb.bearing = bearing;
    3fb6:	40 92 e6 2d 	sts	0x2DE6, r4
    3fba:	50 92 e7 2d 	sts	0x2DE7, r5
    3fbe:	60 92 e8 2d 	sts	0x2DE8, r6
    3fc2:	70 92 e9 2d 	sts	0x2DE9, r7
	last_good_rnb.heading = heading;
    3fc6:	89 a9       	ldd	r24, Y+49	; 0x31
    3fc8:	9a a9       	ldd	r25, Y+50	; 0x32
    3fca:	ab a9       	ldd	r26, Y+51	; 0x33
    3fcc:	bc a9       	ldd	r27, Y+52	; 0x34
    3fce:	80 93 ea 2d 	sts	0x2DEA, r24
    3fd2:	90 93 eb 2d 	sts	0x2DEB, r25
    3fd6:	a0 93 ec 2d 	sts	0x2DEC, r26
    3fda:	b0 93 ed 2d 	sts	0x2DED, r27
	last_good_rnb.brightness_matrix_ptr = brightness_matrix;
    3fde:	a0 92 ee 2d 	sts	0x2DEE, r10
    3fe2:	b0 92 ef 2d 	sts	0x2DEF, r11
	last_good_rnb.id_number = cmd_sender_id;
    3fe6:	80 91 d9 2d 	lds	r24, 0x2DD9
    3fea:	90 91 da 2d 	lds	r25, 0x2DDA
    3fee:	80 93 f0 2d 	sts	0x2DF0, r24
    3ff2:	90 93 f1 2d 	sts	0x2DF1, r25
	
	rnb_updated=1;
    3ff6:	81 e0       	ldi	r24, 0x01	; 1
    3ff8:	80 93 fe 2d 	sts	0x2DFE, r24
}
    3ffc:	e8 96       	adiw	r28, 0x38	; 56
    3ffe:	cd bf       	out	0x3d, r28	; 61
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	ff 90       	pop	r15
    400c:	ef 90       	pop	r14
    400e:	df 90       	pop	r13
    4010:	cf 90       	pop	r12
    4012:	bf 90       	pop	r11
    4014:	af 90       	pop	r10
    4016:	9f 90       	pop	r9
    4018:	8f 90       	pop	r8
    401a:	7f 90       	pop	r7
    401c:	6f 90       	pop	r6
    401e:	5f 90       	pop	r5
    4020:	4f 90       	pop	r4
    4022:	08 95       	ret

00004024 <collect_rnb_data>:
		}
	}
}

void collect_rnb_data(uint16_t target_id, uint8_t power)
{	
    4024:	ff 92       	push	r15
    4026:	0f 93       	push	r16
    4028:	1f 93       	push	r17
    402a:	cf 93       	push	r28
    402c:	df 93       	push	r29
    402e:	cd b7       	in	r28, 0x3d	; 61
    4030:	de b7       	in	r29, 0x3e	; 62
    4032:	27 97       	sbiw	r28, 0x07	; 7
    4034:	cd bf       	out	0x3d, r28	; 61
    4036:	de bf       	out	0x3e, r29	; 62
    4038:	8c 01       	movw	r16, r24
    403a:	f6 2e       	mov	r15, r22
	char cmd[7] = "rnb_t ";
    403c:	87 e0       	ldi	r24, 0x07	; 7
    403e:	e4 ee       	ldi	r30, 0xE4	; 228
    4040:	f3 e2       	ldi	r31, 0x23	; 35
    4042:	de 01       	movw	r26, r28
    4044:	11 96       	adiw	r26, 0x01	; 1
    4046:	01 90       	ld	r0, Z+
    4048:	0d 92       	st	X+, r0
    404a:	8a 95       	dec	r24
    404c:	e1 f7       	brne	.-8      	; 0x4046 <collect_rnb_data+0x22>
	cmd[6] = power;
    404e:	6f 83       	std	Y+7, r22	; 0x07
	get_baseline_readings(bright_meas);
    4050:	8a e1       	ldi	r24, 0x1A	; 26
    4052:	90 e3       	ldi	r25, 0x30	; 48
    4054:	0e 94 7f 17 	call	0x2efe	; 0x2efe <get_baseline_readings>
	
	ir_targeted_cmd(ALL_DIRS, cmd, 7, target_id);
    4058:	98 01       	movw	r18, r16
    405a:	47 e0       	ldi	r20, 0x07	; 7
    405c:	50 e0       	ldi	r21, 0x00	; 0
    405e:	be 01       	movw	r22, r28
    4060:	6f 5f       	subi	r22, 0xFF	; 255
    4062:	7f 4f       	sbci	r23, 0xFF	; 255
    4064:	8f e3       	ldi	r24, 0x3F	; 63
    4066:	0e 94 cc 0b 	call	0x1798	; 0x1798 <ir_targeted_cmd>
	wait_for_ir(ALL_DIRS);
    406a:	8f e3       	ldi	r24, 0x3F	; 63
    406c:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <wait_for_ir>
	delay_ms(POST_MESSAGE_DELAY);
    4070:	8d e5       	ldi	r24, 0x5D	; 93
    4072:	90 e0       	ldi	r25, 0x00	; 0
    4074:	d1 d3       	rcall	.+1954   	; 0x4818 <delay_ms>
	ir_range_meas();
    4076:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <ir_range_meas>
	//brightness_meas_printout_mathematica();
	use_rnb_data(power);
    407a:	8f 2d       	mov	r24, r15
    407c:	38 df       	rcall	.-400    	; 0x3eee <use_rnb_data>
}
    407e:	27 96       	adiw	r28, 0x07	; 7
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	de bf       	out	0x3e, r29	; 62
    4084:	df 91       	pop	r29
    4086:	cf 91       	pop	r28
    4088:	1f 91       	pop	r17
    408a:	0f 91       	pop	r16
    408c:	ff 90       	pop	r15
    408e:	08 95       	ret

00004090 <rgb_led_init>:
#include "rgb_led.h"

void rgb_led_init()
{
	// LED Pins as output
	LED_R_PORT.DIRSET = LED_R_PIN_bm;
    4090:	e0 e8       	ldi	r30, 0x80	; 128
    4092:	f6 e0       	ldi	r31, 0x06	; 6
    4094:	80 e2       	ldi	r24, 0x20	; 32
    4096:	81 83       	std	Z+1, r24	; 0x01
	LED_G_PORT.DIRSET = LED_G_PIN_bm;
    4098:	80 e1       	ldi	r24, 0x10	; 16
    409a:	81 83       	std	Z+1, r24	; 0x01
	LED_B_PORT.DIRSET = LED_B_PIN_bm;
    409c:	e0 e6       	ldi	r30, 0x60	; 96
    409e:	f6 e0       	ldi	r31, 0x06	; 6
    40a0:	81 83       	std	Z+1, r24	; 0x01
	
	//---------RED-----------
	LED_R_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    40a2:	e0 e4       	ldi	r30, 0x40	; 64
    40a4:	fa e0       	ldi	r31, 0x0A	; 10
    40a6:	8f ef       	ldi	r24, 0xFF	; 255
    40a8:	90 e0       	ldi	r25, 0x00	; 0
    40aa:	86 a3       	std	Z+38, r24	; 0x26
    40ac:	97 a3       	std	Z+39, r25	; 0x27
	LED_R_TC.CCB = 0;							// initially fill the CCB register with a value
    40ae:	12 a6       	std	Z+42, r1	; 0x2a
    40b0:	13 a6       	std	Z+43, r1	; 0x2b
	LED_R_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    40b2:	20 81       	ld	r18, Z
    40b4:	21 60       	ori	r18, 0x01	; 1
    40b6:	20 83       	st	Z, r18
	LED_R_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    40b8:	21 81       	ldd	r18, Z+1	; 0x01
    40ba:	23 60       	ori	r18, 0x03	; 3
    40bc:	21 83       	std	Z+1, r18	; 0x01
	LED_R_TC.CTRLB |= TC1_CCBEN_bm;				// enable waveform output on OCnB (setting WGM operation overrides the port output register for this output pin)
    40be:	21 81       	ldd	r18, Z+1	; 0x01
    40c0:	20 62       	ori	r18, 0x20	; 32
    40c2:	21 83       	std	Z+1, r18	; 0x01
	
	//---------GREEN-----------
	// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
	LED_G_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    40c4:	86 a3       	std	Z+38, r24	; 0x26
    40c6:	97 a3       	std	Z+39, r25	; 0x27
	LED_G_TC.CCA = 0;							// initially fill the CCB register with a value
    40c8:	10 a6       	std	Z+40, r1	; 0x28
    40ca:	11 a6       	std	Z+41, r1	; 0x29
	LED_G_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    40cc:	20 81       	ld	r18, Z
    40ce:	21 60       	ori	r18, 0x01	; 1
    40d0:	20 83       	st	Z, r18
	LED_G_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    40d2:	21 81       	ldd	r18, Z+1	; 0x01
    40d4:	23 60       	ori	r18, 0x03	; 3
    40d6:	21 83       	std	Z+1, r18	; 0x01
	LED_G_TC.CTRLB |= TC1_CCAEN_bm;				// enable waveform output on OCnA (setting WGM operation overrides the port output register for this output pin)
    40d8:	21 81       	ldd	r18, Z+1	; 0x01
    40da:	20 61       	ori	r18, 0x10	; 16
    40dc:	21 83       	std	Z+1, r18	; 0x01
	
	//---------BLUE-----------
	// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
	LED_B_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    40de:	e0 e4       	ldi	r30, 0x40	; 64
    40e0:	f9 e0       	ldi	r31, 0x09	; 9
    40e2:	86 a3       	std	Z+38, r24	; 0x26
    40e4:	97 a3       	std	Z+39, r25	; 0x27
	LED_B_TC.CCA = 0;							// initially fill the CCB register with a value
    40e6:	10 a6       	std	Z+40, r1	; 0x28
    40e8:	11 a6       	std	Z+41, r1	; 0x29
	LED_B_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    40ea:	80 81       	ld	r24, Z
    40ec:	81 60       	ori	r24, 0x01	; 1
    40ee:	80 83       	st	Z, r24
	LED_B_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    40f0:	81 81       	ldd	r24, Z+1	; 0x01
    40f2:	83 60       	ori	r24, 0x03	; 3
    40f4:	81 83       	std	Z+1, r24	; 0x01
	LED_B_TC.CTRLB |= TC1_CCAEN_bm;				// enable waveform output on OCnA (setting WGM operation overrides the port output register for this output pin)
    40f6:	81 81       	ldd	r24, Z+1	; 0x01
    40f8:	80 61       	ori	r24, 0x10	; 16
    40fa:	81 83       	std	Z+1, r24	; 0x01
    40fc:	08 95       	ret

000040fe <led_off>:
}

void led_off()
{ 
	LED_B_TC.CCABUF = 0;
    40fe:	e0 e4       	ldi	r30, 0x40	; 64
    4100:	f9 e0       	ldi	r31, 0x09	; 9
    4102:	10 ae       	std	Z+56, r1	; 0x38
    4104:	11 ae       	std	Z+57, r1	; 0x39
	LED_G_TC.CCABUF = 0;
    4106:	e0 e4       	ldi	r30, 0x40	; 64
    4108:	fa e0       	ldi	r31, 0x0A	; 10
    410a:	10 ae       	std	Z+56, r1	; 0x38
    410c:	11 ae       	std	Z+57, r1	; 0x39
	LED_R_TC.CCBBUF = 0; 
    410e:	12 ae       	std	Z+58, r1	; 0x3a
    4110:	13 ae       	std	Z+59, r1	; 0x3b
    4112:	08 95       	ret

00004114 <set_rgb>:

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    4114:	90 e0       	ldi	r25, 0x00	; 0
    4116:	e0 e4       	ldi	r30, 0x40	; 64
    4118:	fa e0       	ldi	r31, 0x0A	; 10
    411a:	82 af       	std	Z+58, r24	; 0x3a
    411c:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    411e:	70 e0       	ldi	r23, 0x00	; 0
    4120:	60 af       	std	Z+56, r22	; 0x38
    4122:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    4124:	50 e0       	ldi	r21, 0x00	; 0
    4126:	e0 e4       	ldi	r30, 0x40	; 64
    4128:	f9 e0       	ldi	r31, 0x09	; 9
    412a:	40 af       	std	Z+56, r20	; 0x38
    412c:	51 af       	std	Z+57, r21	; 0x39
    412e:	08 95       	ret

00004130 <hsv_to_rgb>:
	set_rgb(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    4130:	2f 92       	push	r2
    4132:	3f 92       	push	r3
    4134:	4f 92       	push	r4
    4136:	5f 92       	push	r5
    4138:	6f 92       	push	r6
    413a:	7f 92       	push	r7
    413c:	8f 92       	push	r8
    413e:	9f 92       	push	r9
    4140:	af 92       	push	r10
    4142:	bf 92       	push	r11
    4144:	cf 92       	push	r12
    4146:	df 92       	push	r13
    4148:	ef 92       	push	r14
    414a:	ff 92       	push	r15
    414c:	0f 93       	push	r16
    414e:	1f 93       	push	r17
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	cd b7       	in	r28, 0x3d	; 61
    4156:	de b7       	in	r29, 0x3e	; 62
    4158:	2b 97       	sbiw	r28, 0x0b	; 11
    415a:	cd bf       	out	0x3d, r28	; 61
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	fc 01       	movw	r30, r24
    4160:	d6 2e       	mov	r13, r22
    4162:	b4 2e       	mov	r11, r20
    4164:	2c 83       	std	Y+4, r18	; 0x04
    4166:	3d 83       	std	Y+5, r19	; 0x05
    4168:	18 01       	movw	r2, r16
    416a:	ea 82       	std	Y+2, r14	; 0x02
    416c:	fb 82       	std	Y+3, r15	; 0x03
	float h = (hue%360)*1.0;
    416e:	9c 01       	movw	r18, r24
    4170:	a3 e8       	ldi	r26, 0x83	; 131
    4172:	bd e2       	ldi	r27, 0x2D	; 45
    4174:	0e 94 9f 3e 	call	0x7d3e	; 0x7d3e <__umulhisi3>
    4178:	00 24       	eor	r0, r0
    417a:	88 0f       	add	r24, r24
    417c:	99 1f       	adc	r25, r25
    417e:	00 1c       	adc	r0, r0
    4180:	88 0f       	add	r24, r24
    4182:	99 1f       	adc	r25, r25
    4184:	00 1c       	adc	r0, r0
    4186:	89 2f       	mov	r24, r25
    4188:	90 2d       	mov	r25, r0
    418a:	48 e6       	ldi	r20, 0x68	; 104
    418c:	51 e0       	ldi	r21, 0x01	; 1
    418e:	84 9f       	mul	r24, r20
    4190:	90 01       	movw	r18, r0
    4192:	85 9f       	mul	r24, r21
    4194:	30 0d       	add	r19, r0
    4196:	94 9f       	mul	r25, r20
    4198:	30 0d       	add	r19, r0
    419a:	11 24       	eor	r1, r1
    419c:	bf 01       	movw	r22, r30
    419e:	62 1b       	sub	r22, r18
    41a0:	73 0b       	sbc	r23, r19
    41a2:	80 e0       	ldi	r24, 0x00	; 0
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	0e 94 92 38 	call	0x7124	; 0x7124 <__floatunsisf>
    41aa:	2b 01       	movw	r4, r22
    41ac:	3c 01       	movw	r6, r24
	float s = saturation/255.0;
    41ae:	6d 2d       	mov	r22, r13
    41b0:	70 e0       	ldi	r23, 0x00	; 0
    41b2:	80 e0       	ldi	r24, 0x00	; 0
    41b4:	90 e0       	ldi	r25, 0x00	; 0
    41b6:	0e 94 94 38 	call	0x7128	; 0x7128 <__floatsisf>
    41ba:	20 e0       	ldi	r18, 0x00	; 0
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	4f e7       	ldi	r20, 0x7F	; 127
    41c0:	53 e4       	ldi	r21, 0x43	; 67
    41c2:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    41c6:	6b 01       	movw	r12, r22
    41c8:	7c 01       	movw	r14, r24
	float v = val/255.0;
    41ca:	6b 2d       	mov	r22, r11
    41cc:	70 e0       	ldi	r23, 0x00	; 0
    41ce:	80 e0       	ldi	r24, 0x00	; 0
    41d0:	90 e0       	ldi	r25, 0x00	; 0
    41d2:	0e 94 94 38 	call	0x7128	; 0x7128 <__floatsisf>
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	4f e7       	ldi	r20, 0x7F	; 127
    41dc:	53 e4       	ldi	r21, 0x43	; 67
    41de:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    41e2:	06 2f       	mov	r16, r22
    41e4:	17 2f       	mov	r17, r23
    41e6:	8b 87       	std	Y+11, r24	; 0x0b
    41e8:	9a 87       	std	Y+10, r25	; 0x0a
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (abs(s)<0.00001)
    41ea:	c7 01       	movw	r24, r14
    41ec:	b6 01       	movw	r22, r12
    41ee:	0e 94 61 38 	call	0x70c2	; 0x70c2 <__fixsfsi>
    41f2:	9b 01       	movw	r18, r22
    41f4:	77 23       	and	r23, r23
    41f6:	24 f4       	brge	.+8      	; 0x4200 <hsv_to_rgb+0xd0>
    41f8:	22 27       	eor	r18, r18
    41fa:	33 27       	eor	r19, r19
    41fc:	26 1b       	sub	r18, r22
    41fe:	37 0b       	sbc	r19, r23
    4200:	b9 01       	movw	r22, r18
    4202:	88 27       	eor	r24, r24
    4204:	77 fd       	sbrc	r23, 7
    4206:	80 95       	com	r24
    4208:	98 2f       	mov	r25, r24
    420a:	0e 94 94 38 	call	0x7128	; 0x7128 <__floatsisf>
    420e:	2c ea       	ldi	r18, 0xAC	; 172
    4210:	35 ec       	ldi	r19, 0xC5	; 197
    4212:	47 e2       	ldi	r20, 0x27	; 39
    4214:	57 e3       	ldi	r21, 0x37	; 55
    4216:	0e 94 f2 37 	call	0x6fe4	; 0x6fe4 <__cmpsf2>
    421a:	88 23       	and	r24, r24
    421c:	2c f4       	brge	.+10     	; 0x4228 <hsv_to_rgb+0xf8>
	{
		*red = *green = *blue = val;
    421e:	aa 81       	ldd	r26, Y+2	; 0x02
    4220:	bb 81       	ldd	r27, Y+3	; 0x03
    4222:	bc 92       	st	X, r11
    4224:	f1 01       	movw	r30, r2
    4226:	b0 82       	st	Z, r11
	}
	
	h = h / 60.0;
    4228:	20 e0       	ldi	r18, 0x00	; 0
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	40 e7       	ldi	r20, 0x70	; 112
    422e:	52 e4       	ldi	r21, 0x42	; 66
    4230:	c3 01       	movw	r24, r6
    4232:	b2 01       	movw	r22, r4
    4234:	0e 94 f9 37 	call	0x6ff2	; 0x6ff2 <__divsf3>
    4238:	4b 01       	movw	r8, r22
    423a:	5c 01       	movw	r10, r24
	uint8_t i = (uint8_t)h;
    423c:	0e 94 66 38 	call	0x70cc	; 0x70cc <__fixunssfsi>
    4240:	69 83       	std	Y+1, r22	; 0x01
	f = h - i;
    4242:	70 e0       	ldi	r23, 0x00	; 0
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	0e 94 94 38 	call	0x7128	; 0x7128 <__floatsisf>
    424c:	9b 01       	movw	r18, r22
    424e:	ac 01       	movw	r20, r24
    4250:	c5 01       	movw	r24, r10
    4252:	b4 01       	movw	r22, r8
    4254:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    4258:	4b 01       	movw	r8, r22
    425a:	5c 01       	movw	r10, r24
	
	p = v*(1-s);
    425c:	a7 01       	movw	r20, r14
    425e:	96 01       	movw	r18, r12
    4260:	60 e0       	ldi	r22, 0x00	; 0
    4262:	70 e0       	ldi	r23, 0x00	; 0
    4264:	80 e8       	ldi	r24, 0x80	; 128
    4266:	9f e3       	ldi	r25, 0x3F	; 63
    4268:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    426c:	20 2f       	mov	r18, r16
    426e:	31 2f       	mov	r19, r17
    4270:	4b 85       	ldd	r20, Y+11	; 0x0b
    4272:	5a 85       	ldd	r21, Y+10	; 0x0a
    4274:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    4278:	66 2e       	mov	r6, r22
    427a:	77 2e       	mov	r7, r23
    427c:	48 2e       	mov	r4, r24
    427e:	59 2e       	mov	r5, r25
	q = v*(1-s*f);
    4280:	a5 01       	movw	r20, r10
    4282:	94 01       	movw	r18, r8
    4284:	c7 01       	movw	r24, r14
    4286:	b6 01       	movw	r22, r12
    4288:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    428c:	9b 01       	movw	r18, r22
    428e:	ac 01       	movw	r20, r24
    4290:	60 e0       	ldi	r22, 0x00	; 0
    4292:	70 e0       	ldi	r23, 0x00	; 0
    4294:	80 e8       	ldi	r24, 0x80	; 128
    4296:	9f e3       	ldi	r25, 0x3F	; 63
    4298:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    429c:	20 2f       	mov	r18, r16
    429e:	31 2f       	mov	r19, r17
    42a0:	4b 85       	ldd	r20, Y+11	; 0x0b
    42a2:	5a 85       	ldd	r21, Y+10	; 0x0a
    42a4:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    42a8:	6e 83       	std	Y+6, r22	; 0x06
    42aa:	7f 83       	std	Y+7, r23	; 0x07
    42ac:	88 87       	std	Y+8, r24	; 0x08
    42ae:	99 87       	std	Y+9, r25	; 0x09
	t = v*(1-s*(1-f));
    42b0:	a5 01       	movw	r20, r10
    42b2:	94 01       	movw	r18, r8
    42b4:	60 e0       	ldi	r22, 0x00	; 0
    42b6:	70 e0       	ldi	r23, 0x00	; 0
    42b8:	80 e8       	ldi	r24, 0x80	; 128
    42ba:	9f e3       	ldi	r25, 0x3F	; 63
    42bc:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    42c0:	a7 01       	movw	r20, r14
    42c2:	96 01       	movw	r18, r12
    42c4:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    42c8:	9b 01       	movw	r18, r22
    42ca:	ac 01       	movw	r20, r24
    42cc:	60 e0       	ldi	r22, 0x00	; 0
    42ce:	70 e0       	ldi	r23, 0x00	; 0
    42d0:	80 e8       	ldi	r24, 0x80	; 128
    42d2:	9f e3       	ldi	r25, 0x3F	; 63
    42d4:	0e 94 2b 37 	call	0x6e56	; 0x6e56 <__subsf3>
    42d8:	20 2f       	mov	r18, r16
    42da:	31 2f       	mov	r19, r17
    42dc:	4b 85       	ldd	r20, Y+11	; 0x0b
    42de:	5a 85       	ldd	r21, Y+10	; 0x0a
    42e0:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    42e4:	c6 2e       	mov	r12, r22
    42e6:	d7 2e       	mov	r13, r23
    42e8:	e8 2e       	mov	r14, r24
    42ea:	f9 2e       	mov	r15, r25
	
	switch(i)
    42ec:	f9 81       	ldd	r31, Y+1	; 0x01
    42ee:	f2 30       	cpi	r31, 0x02	; 2
    42f0:	31 f1       	breq	.+76     	; 0x433e <hsv_to_rgb+0x20e>
    42f2:	30 f4       	brcc	.+12     	; 0x4300 <hsv_to_rgb+0x1d0>
    42f4:	ff 23       	and	r31, r31
    42f6:	09 f4       	brne	.+2      	; 0x42fa <hsv_to_rgb+0x1ca>
    42f8:	5d c0       	rjmp	.+186    	; 0x43b4 <hsv_to_rgb+0x284>
    42fa:	f1 30       	cpi	r31, 0x01	; 1
    42fc:	a9 f0       	breq	.+42     	; 0x4328 <hsv_to_rgb+0x1f8>
    42fe:	07 c0       	rjmp	.+14     	; 0x430e <hsv_to_rgb+0x1de>
    4300:	29 81       	ldd	r18, Y+1	; 0x01
    4302:	24 30       	cpi	r18, 0x04	; 4
    4304:	f1 f1       	breq	.+124    	; 0x4382 <hsv_to_rgb+0x252>
    4306:	60 f1       	brcs	.+88     	; 0x4360 <hsv_to_rgb+0x230>
    4308:	25 30       	cpi	r18, 0x05	; 5
    430a:	09 f4       	brne	.+2      	; 0x430e <hsv_to_rgb+0x1de>
    430c:	4b c0       	rjmp	.+150    	; 0x43a4 <hsv_to_rgb+0x274>
{
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
	float v = val/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
    430e:	61 2c       	mov	r6, r1
    4310:	71 2c       	mov	r7, r1
    4312:	41 2c       	mov	r4, r1
    4314:	51 2c       	mov	r5, r1
    4316:	c1 2c       	mov	r12, r1
    4318:	d1 2c       	mov	r13, r1
    431a:	e1 2c       	mov	r14, r1
    431c:	f1 2c       	mov	r15, r1
    431e:	00 e0       	ldi	r16, 0x00	; 0
    4320:	10 e0       	ldi	r17, 0x00	; 0
    4322:	1b 86       	std	Y+11, r1	; 0x0b
    4324:	1a 86       	std	Y+10, r1	; 0x0a
    4326:	46 c0       	rjmp	.+140    	; 0x43b4 <hsv_to_rgb+0x284>
			g = t;
			b = p;
			break;
		case 1:
			r = q;
			g = v;
    4328:	c0 2e       	mov	r12, r16
    432a:	d1 2e       	mov	r13, r17
    432c:	eb 84       	ldd	r14, Y+11	; 0x0b
    432e:	fa 84       	ldd	r15, Y+10	; 0x0a
			r = v;
			g = t;
			b = p;
			break;
		case 1:
			r = q;
    4330:	0e 81       	ldd	r16, Y+6	; 0x06
    4332:	1f 81       	ldd	r17, Y+7	; 0x07
    4334:	88 85       	ldd	r24, Y+8	; 0x08
    4336:	8b 87       	std	Y+11, r24	; 0x0b
    4338:	a9 85       	ldd	r26, Y+9	; 0x09
    433a:	aa 87       	std	Y+10, r26	; 0x0a
			g = v;
			b = p;
			break;
    433c:	3b c0       	rjmp	.+118    	; 0x43b4 <hsv_to_rgb+0x284>
		case 2:
			r = p;
			g = v;
			b = t;
			break;
    433e:	30 2f       	mov	r19, r16
    4340:	21 2f       	mov	r18, r17
    4342:	9b 85       	ldd	r25, Y+11	; 0x0b
    4344:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = q;
			g = v;
			b = p;
			break;
		case 2:
			r = p;
    4346:	06 2d       	mov	r16, r6
    4348:	17 2d       	mov	r17, r7
    434a:	4b 86       	std	Y+11, r4	; 0x0b
    434c:	5a 86       	std	Y+10, r5	; 0x0a
			g = v;
			b = t;
    434e:	6c 2c       	mov	r6, r12
    4350:	7d 2c       	mov	r7, r13
    4352:	4e 2c       	mov	r4, r14
    4354:	5f 2c       	mov	r5, r15
			g = v;
			b = p;
			break;
		case 2:
			r = p;
			g = v;
    4356:	c3 2e       	mov	r12, r19
    4358:	d2 2e       	mov	r13, r18
    435a:	e9 2e       	mov	r14, r25
    435c:	f8 2e       	mov	r15, r24
			b = t;
			break;
    435e:	2a c0       	rjmp	.+84     	; 0x43b4 <hsv_to_rgb+0x284>
		case 3:
			r = p;
			g = q;
    4360:	ce 80       	ldd	r12, Y+6	; 0x06
    4362:	df 80       	ldd	r13, Y+7	; 0x07
    4364:	e8 84       	ldd	r14, Y+8	; 0x08
    4366:	f9 84       	ldd	r15, Y+9	; 0x09
			b = v;
			break;
    4368:	30 2f       	mov	r19, r16
    436a:	21 2f       	mov	r18, r17
    436c:	9b 85       	ldd	r25, Y+11	; 0x0b
    436e:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = p;
			g = v;
			b = t;
			break;
		case 3:
			r = p;
    4370:	06 2d       	mov	r16, r6
    4372:	17 2d       	mov	r17, r7
    4374:	4b 86       	std	Y+11, r4	; 0x0b
    4376:	5a 86       	std	Y+10, r5	; 0x0a
			g = q;
			b = v;
    4378:	63 2e       	mov	r6, r19
    437a:	72 2e       	mov	r7, r18
    437c:	49 2e       	mov	r4, r25
    437e:	58 2e       	mov	r5, r24
			break;
    4380:	19 c0       	rjmp	.+50     	; 0x43b4 <hsv_to_rgb+0x284>
		case 4:
			r = t;
			g = p;
			b = v;
			break;
    4382:	30 2f       	mov	r19, r16
    4384:	21 2f       	mov	r18, r17
    4386:	9b 85       	ldd	r25, Y+11	; 0x0b
    4388:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = p;
			g = q;
			b = v;
			break;
		case 4:
			r = t;
    438a:	0c 2d       	mov	r16, r12
    438c:	1d 2d       	mov	r17, r13
    438e:	eb 86       	std	Y+11, r14	; 0x0b
    4390:	fa 86       	std	Y+10, r15	; 0x0a
			g = p;
    4392:	c6 2c       	mov	r12, r6
    4394:	d7 2c       	mov	r13, r7
    4396:	e4 2c       	mov	r14, r4
    4398:	f5 2c       	mov	r15, r5
			b = v;
    439a:	63 2e       	mov	r6, r19
    439c:	72 2e       	mov	r7, r18
    439e:	49 2e       	mov	r4, r25
    43a0:	58 2e       	mov	r5, r24
			break;
    43a2:	08 c0       	rjmp	.+16     	; 0x43b4 <hsv_to_rgb+0x284>
		case 5:
			r = v;
			g = p;
    43a4:	c6 2c       	mov	r12, r6
    43a6:	d7 2c       	mov	r13, r7
    43a8:	e4 2c       	mov	r14, r4
    43aa:	f5 2c       	mov	r15, r5
			b = q;
    43ac:	6e 80       	ldd	r6, Y+6	; 0x06
    43ae:	7f 80       	ldd	r7, Y+7	; 0x07
    43b0:	48 84       	ldd	r4, Y+8	; 0x08
    43b2:	59 84       	ldd	r5, Y+9	; 0x09
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	30 e0       	ldi	r19, 0x00	; 0
    43b8:	4f e7       	ldi	r20, 0x7F	; 127
    43ba:	53 e4       	ldi	r21, 0x43	; 67
    43bc:	60 2f       	mov	r22, r16
    43be:	71 2f       	mov	r23, r17
    43c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    43c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    43c4:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    43c8:	0e 94 66 38 	call	0x70cc	; 0x70cc <__fixunssfsi>
    43cc:	ec 81       	ldd	r30, Y+4	; 0x04
    43ce:	fd 81       	ldd	r31, Y+5	; 0x05
    43d0:	60 83       	st	Z, r22
	*blue = (uint8_t)(b*255);
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	4f e7       	ldi	r20, 0x7F	; 127
    43d8:	53 e4       	ldi	r21, 0x43	; 67
    43da:	66 2d       	mov	r22, r6
    43dc:	77 2d       	mov	r23, r7
    43de:	84 2d       	mov	r24, r4
    43e0:	95 2d       	mov	r25, r5
    43e2:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    43e6:	0e 94 66 38 	call	0x70cc	; 0x70cc <__fixunssfsi>
    43ea:	aa 81       	ldd	r26, Y+2	; 0x02
    43ec:	bb 81       	ldd	r27, Y+3	; 0x03
    43ee:	6c 93       	st	X, r22
	*green = (uint8_t)(g*255);
    43f0:	20 e0       	ldi	r18, 0x00	; 0
    43f2:	30 e0       	ldi	r19, 0x00	; 0
    43f4:	4f e7       	ldi	r20, 0x7F	; 127
    43f6:	53 e4       	ldi	r21, 0x43	; 67
    43f8:	6c 2d       	mov	r22, r12
    43fa:	7d 2d       	mov	r23, r13
    43fc:	8e 2d       	mov	r24, r14
    43fe:	9f 2d       	mov	r25, r15
    4400:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    4404:	0e 94 66 38 	call	0x70cc	; 0x70cc <__fixunssfsi>
    4408:	f1 01       	movw	r30, r2
    440a:	60 83       	st	Z, r22
    440c:	2b 96       	adiw	r28, 0x0b	; 11
    440e:	cd bf       	out	0x3d, r28	; 61
    4410:	de bf       	out	0x3e, r29	; 62
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	1f 91       	pop	r17
    4418:	0f 91       	pop	r16
    441a:	ff 90       	pop	r15
    441c:	ef 90       	pop	r14
    441e:	df 90       	pop	r13
    4420:	cf 90       	pop	r12
    4422:	bf 90       	pop	r11
    4424:	af 90       	pop	r10
    4426:	9f 90       	pop	r9
    4428:	8f 90       	pop	r8
    442a:	7f 90       	pop	r7
    442c:	6f 90       	pop	r6
    442e:	5f 90       	pop	r5
    4430:	4f 90       	pop	r4
    4432:	3f 90       	pop	r3
    4434:	2f 90       	pop	r2
    4436:	08 95       	ret

00004438 <set_hsv>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void set_hsv(uint16_t h, uint8_t s, uint8_t v)
{
    4438:	ef 92       	push	r14
    443a:	ff 92       	push	r15
    443c:	0f 93       	push	r16
    443e:	1f 93       	push	r17
    4440:	cf 93       	push	r28
    4442:	df 93       	push	r29
    4444:	00 d0       	rcall	.+0      	; 0x4446 <set_hsv+0xe>
    4446:	cd b7       	in	r28, 0x3d	; 61
    4448:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsv_to_rgb(h,s,v,&r,&g,&b);
    444a:	9e 01       	movw	r18, r28
    444c:	2d 5f       	subi	r18, 0xFD	; 253
    444e:	3f 4f       	sbci	r19, 0xFF	; 255
    4450:	79 01       	movw	r14, r18
    4452:	8e 01       	movw	r16, r28
    4454:	0e 5f       	subi	r16, 0xFE	; 254
    4456:	1f 4f       	sbci	r17, 0xFF	; 255
    4458:	22 50       	subi	r18, 0x02	; 2
    445a:	31 09       	sbc	r19, r1
    445c:	69 de       	rcall	.-814    	; 0x4130 <hsv_to_rgb>
	set_rgb(r,g,b);
    445e:	8b 81       	ldd	r24, Y+3	; 0x03
    4460:	2a 81       	ldd	r18, Y+2	; 0x02

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    4462:	49 81       	ldd	r20, Y+1	; 0x01
    4464:	50 e0       	ldi	r21, 0x00	; 0
    4466:	e0 e4       	ldi	r30, 0x40	; 64
    4468:	fa e0       	ldi	r31, 0x0A	; 10
    446a:	42 af       	std	Z+58, r20	; 0x3a
    446c:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    446e:	30 e0       	ldi	r19, 0x00	; 0
    4470:	20 af       	std	Z+56, r18	; 0x38
    4472:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    4474:	90 e0       	ldi	r25, 0x00	; 0
    4476:	e0 e4       	ldi	r30, 0x40	; 64
    4478:	f9 e0       	ldi	r31, 0x09	; 9
    447a:	80 af       	std	Z+56, r24	; 0x38
    447c:	91 af       	std	Z+57, r25	; 0x39
}
    447e:	23 96       	adiw	r28, 0x03	; 3
    4480:	cd bf       	out	0x3d, r28	; 61
    4482:	de bf       	out	0x3e, r29	; 62
    4484:	df 91       	pop	r29
    4486:	cf 91       	pop	r28
    4488:	1f 91       	pop	r17
    448a:	0f 91       	pop	r16
    448c:	ff 90       	pop	r15
    448e:	ef 90       	pop	r14
    4490:	08 95       	ret

00004492 <get_red_sensor>:
	//
	////printf("%3hu %3hu %3hu\t->\t%3hu %3hu %3hu\r\n",tmpR,tmpG,tmpB,*r,*g,*b);
//}

int16_t get_red_sensor()
{
    4492:	cf 93       	push	r28
    4494:	df 93       	push	r29
    4496:	cd b7       	in	r28, 0x3d	; 61
    4498:	de b7       	in	r29, 0x3e	; 62
    449a:	2a 97       	sbiw	r28, 0x0a	; 10
    449c:	cd bf       	out	0x3d, r28	; 61
    449e:	de bf       	out	0x3e, r29	; 62
    44a0:	de 01       	movw	r26, r28
    44a2:	11 96       	adiw	r26, 0x01	; 1
    44a4:	9e 01       	movw	r18, r28
    44a6:	25 5f       	subi	r18, 0xF5	; 245
    44a8:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    44aa:	e0 e0       	ldi	r30, 0x00	; 0
    44ac:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    44ae:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    44b0:	80 a1       	ldd	r24, Z+32	; 0x20
    44b2:	80 68       	ori	r24, 0x80	; 128
    44b4:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    44b6:	83 a1       	ldd	r24, Z+35	; 0x23
    44b8:	88 23       	and	r24, r24
    44ba:	e9 f3       	breq	.-6      	; 0x44b6 <get_red_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
    44bc:	45 a1       	ldd	r20, Z+37	; 0x25
    44be:	84 a1       	ldd	r24, Z+36	; 0x24
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	94 2b       	or	r25, r20
    44c4:	95 95       	asr	r25
    44c6:	87 95       	ror	r24
    44c8:	95 95       	asr	r25
    44ca:	87 95       	ror	r24
    44cc:	95 95       	asr	r25
    44ce:	87 95       	ror	r24
    44d0:	95 95       	asr	r25
    44d2:	87 95       	ror	r24
    44d4:	8d 93       	st	X+, r24
    44d6:	9d 93       	st	X+, r25
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    44d8:	53 a3       	std	Z+35, r21	; 0x23

int16_t get_red_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    44da:	a2 17       	cp	r26, r18
    44dc:	b3 07       	cpc	r27, r19
    44de:	41 f7       	brne	.-48     	; 0x44b0 <get_red_sensor+0x1e>
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
	}
	red_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    44e0:	63 e0       	ldi	r22, 0x03	; 3
    44e2:	ce 01       	movw	r24, r28
    44e4:	05 96       	adiw	r24, 0x05	; 5
    44e6:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <meas_find_median>
	//printf("%d\t", red_val);
	return red_val;
}
    44ea:	2a 96       	adiw	r28, 0x0a	; 10
    44ec:	cd bf       	out	0x3d, r28	; 61
    44ee:	de bf       	out	0x3e, r29	; 62
    44f0:	df 91       	pop	r29
    44f2:	cf 91       	pop	r28
    44f4:	08 95       	ret

000044f6 <get_green_sensor>:

int16_t get_green_sensor()
{
    44f6:	cf 93       	push	r28
    44f8:	df 93       	push	r29
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
    44fe:	2a 97       	sbiw	r28, 0x0a	; 10
    4500:	cd bf       	out	0x3d, r28	; 61
    4502:	de bf       	out	0x3e, r29	; 62
    4504:	de 01       	movw	r26, r28
    4506:	11 96       	adiw	r26, 0x01	; 1
    4508:	9e 01       	movw	r18, r28
    450a:	25 5f       	subi	r18, 0xF5	; 245
    450c:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    450e:	e0 e0       	ldi	r30, 0x00	; 0
    4510:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
    4512:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    4514:	80 a5       	ldd	r24, Z+40	; 0x28
    4516:	80 68       	ori	r24, 0x80	; 128
    4518:	80 a7       	std	Z+40, r24	; 0x28
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    451a:	83 a5       	ldd	r24, Z+43	; 0x2b
    451c:	88 23       	and	r24, r24
    451e:	e9 f3       	breq	.-6      	; 0x451a <get_green_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
    4520:	45 a5       	ldd	r20, Z+45	; 0x2d
    4522:	84 a5       	ldd	r24, Z+44	; 0x2c
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	94 2b       	or	r25, r20
    4528:	95 95       	asr	r25
    452a:	87 95       	ror	r24
    452c:	95 95       	asr	r25
    452e:	87 95       	ror	r24
    4530:	95 95       	asr	r25
    4532:	87 95       	ror	r24
    4534:	95 95       	asr	r25
    4536:	87 95       	ror	r24
    4538:	8d 93       	st	X+, r24
    453a:	9d 93       	st	X+, r25
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
    453c:	53 a7       	std	Z+43, r21	; 0x2b

int16_t get_green_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    453e:	a2 17       	cp	r26, r18
    4540:	b3 07       	cpc	r27, r19
    4542:	41 f7       	brne	.-48     	; 0x4514 <get_green_sensor+0x1e>
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
	}
	green_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    4544:	63 e0       	ldi	r22, 0x03	; 3
    4546:	ce 01       	movw	r24, r28
    4548:	05 96       	adiw	r24, 0x05	; 5
    454a:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <meas_find_median>
	//printf("%d\t", green_val);
	return green_val;
}
    454e:	2a 96       	adiw	r28, 0x0a	; 10
    4550:	cd bf       	out	0x3d, r28	; 61
    4552:	de bf       	out	0x3e, r29	; 62
    4554:	df 91       	pop	r29
    4556:	cf 91       	pop	r28
    4558:	08 95       	ret

0000455a <get_blue_sensor>:

int16_t get_blue_sensor()
{
    455a:	cf 93       	push	r28
    455c:	df 93       	push	r29
    455e:	cd b7       	in	r28, 0x3d	; 61
    4560:	de b7       	in	r29, 0x3e	; 62
    4562:	2a 97       	sbiw	r28, 0x0a	; 10
    4564:	cd bf       	out	0x3d, r28	; 61
    4566:	de bf       	out	0x3e, r29	; 62
    4568:	de 01       	movw	r26, r28
    456a:	11 96       	adiw	r26, 0x01	; 1
    456c:	9e 01       	movw	r18, r28
    456e:	25 5f       	subi	r18, 0xF5	; 245
    4570:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    4572:	e0 e0       	ldi	r30, 0x00	; 0
    4574:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    4576:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    4578:	80 a9       	ldd	r24, Z+48	; 0x30
    457a:	80 68       	ori	r24, 0x80	; 128
    457c:	80 ab       	std	Z+48, r24	; 0x30
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    457e:	83 a9       	ldd	r24, Z+51	; 0x33
    4580:	88 23       	and	r24, r24
    4582:	e9 f3       	breq	.-6      	; 0x457e <get_blue_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
    4584:	45 a9       	ldd	r20, Z+53	; 0x35
    4586:	84 a9       	ldd	r24, Z+52	; 0x34
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	94 2b       	or	r25, r20
    458c:	95 95       	asr	r25
    458e:	87 95       	ror	r24
    4590:	95 95       	asr	r25
    4592:	87 95       	ror	r24
    4594:	95 95       	asr	r25
    4596:	87 95       	ror	r24
    4598:	95 95       	asr	r25
    459a:	87 95       	ror	r24
    459c:	8d 93       	st	X+, r24
    459e:	9d 93       	st	X+, r25
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    45a0:	53 ab       	std	Z+51, r21	; 0x33

int16_t get_blue_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    45a2:	a2 17       	cp	r26, r18
    45a4:	b3 07       	cpc	r27, r19
    45a6:	41 f7       	brne	.-48     	; 0x4578 <get_blue_sensor+0x1e>
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
	}		
	blue_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    45a8:	63 e0       	ldi	r22, 0x03	; 3
    45aa:	ce 01       	movw	r24, r28
    45ac:	05 96       	adiw	r24, 0x05	; 5
    45ae:	0e 94 a2 0f 	call	0x1f44	; 0x1f44 <meas_find_median>
	//printf("%d\t", blue_val);	
	return blue_val;
}
    45b2:	2a 96       	adiw	r28, 0x0a	; 10
    45b4:	cd bf       	out	0x3d, r28	; 61
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	df 91       	pop	r29
    45ba:	cf 91       	pop	r28
    45bc:	08 95       	ret

000045be <rgb_sensor_init>:
#include "rgb_sensor.h"

void rgb_sensor_init()
{
    45be:	df 92       	push	r13
    45c0:	ef 92       	push	r14
    45c2:	ff 92       	push	r15
    45c4:	0f 93       	push	r16
    45c6:	1f 93       	push	r17
    45c8:	cf 93       	push	r28
    45ca:	df 93       	push	r29
	RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    45cc:	80 ee       	ldi	r24, 0xE0	; 224
    45ce:	e0 e0       	ldi	r30, 0x00	; 0
    45d0:	f6 e0       	ldi	r31, 0x06	; 6
    45d2:	82 83       	std	Z+2, r24	; 0x02

	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    45d4:	e0 e0       	ldi	r30, 0x00	; 0
    45d6:	f2 e0       	ldi	r31, 0x02	; 2
    45d8:	80 e2       	ldi	r24, 0x20	; 32
    45da:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = ADC_RESOLUTION_LEFT12BIT_gc | ADC_CONMODE_bm;
    45dc:	86 e1       	ldi	r24, 0x16	; 22
    45de:	81 83       	std	Z+1, r24	; 0x01
	ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
    45e0:	86 e0       	ldi	r24, 0x06	; 6
    45e2:	84 83       	std	Z+4, r24	; 0x04
	/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */

	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    45e4:	83 e0       	ldi	r24, 0x03	; 3
    45e6:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    45e8:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_2X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    45ea:	87 e0       	ldi	r24, 0x07	; 7
    45ec:	80 ab       	std	Z+48, r24	; 0x30
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Red sensor on ADC A channel 0
    45ee:	8c e2       	ldi	r24, 0x2C	; 44
    45f0:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Green sensor on ADC A channel 1
    45f2:	84 e3       	ldi	r24, 0x34	; 52
    45f4:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Blue sensor on ADC A channel 2
    45f6:	8c e3       	ldi	r24, 0x3C	; 60
    45f8:	81 ab       	std	Z+49, r24	; 0x31
	
	ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    45fa:	80 b5       	in	r24, 0x20	; 32
    45fc:	84 87       	std	Z+12, r24	; 0x0c
	ADCA.CALH = PRODSIGNATURES_ADCACAL1;	
    45fe:	81 b5       	in	r24, 0x21	; 33
    4600:	85 87       	std	Z+13, r24	; 0x0d

	ADCA.CTRLA = ADC_ENABLE_bm;
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	80 83       	st	Z, r24
    4606:	8f e8       	ldi	r24, 0x8F	; 143
    4608:	91 e0       	ldi	r25, 0x01	; 1
    460a:	01 97       	sbiw	r24, 0x01	; 1
    460c:	f1 f7       	brne	.-4      	; 0x460a <rgb_sensor_init+0x4c>
    460e:	00 c0       	rjmp	.+0      	; 0x4610 <rgb_sensor_init+0x52>
    4610:	00 00       	nop
	
	//read_color_settings();
	
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
    4612:	3f df       	rcall	.-386    	; 0x4492 <get_red_sensor>
    4614:	a2 df       	rcall	.-188    	; 0x455a <get_blue_sensor>
    4616:	6f df       	rcall	.-290    	; 0x44f6 <get_green_sensor>
	delay_ms(10);
    4618:	8a e0       	ldi	r24, 0x0A	; 10
    461a:	90 e0       	ldi	r25, 0x00	; 0
    461c:	fd d0       	rcall	.+506    	; 0x4818 <delay_ms>
	int16_t r_avg=0, g_avg=0, b_avg=0;
	for(uint8_t i=0; i<num_samples; i++)
    461e:	d1 2c       	mov	r13, r1
	
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
	delay_ms(10);
	int16_t r_avg=0, g_avg=0, b_avg=0;
    4620:	c0 e0       	ldi	r28, 0x00	; 0
    4622:	d0 e0       	ldi	r29, 0x00	; 0
    4624:	00 e0       	ldi	r16, 0x00	; 0
    4626:	10 e0       	ldi	r17, 0x00	; 0
    4628:	e1 2c       	mov	r14, r1
    462a:	f1 2c       	mov	r15, r1
	for(uint8_t i=0; i<num_samples; i++)
	{
		r_avg+=get_red_sensor();
    462c:	32 df       	rcall	.-412    	; 0x4492 <get_red_sensor>
    462e:	e8 0e       	add	r14, r24
    4630:	f9 1e       	adc	r15, r25
		g_avg+=get_green_sensor();
    4632:	61 df       	rcall	.-318    	; 0x44f6 <get_green_sensor>
    4634:	08 0f       	add	r16, r24
    4636:	19 1f       	adc	r17, r25
		b_avg+=get_blue_sensor();
    4638:	90 df       	rcall	.-224    	; 0x455a <get_blue_sensor>
    463a:	c8 0f       	add	r28, r24
    463c:	d9 1f       	adc	r29, r25
		delay_ms(10);
    463e:	8a e0       	ldi	r24, 0x0A	; 10
    4640:	90 e0       	ldi	r25, 0x00	; 0
    4642:	ea d0       	rcall	.+468    	; 0x4818 <delay_ms>
		printf("\r\n");
    4644:	8f e6       	ldi	r24, 0x6F	; 111
    4646:	9c e2       	ldi	r25, 0x2C	; 44
    4648:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
	delay_ms(10);
	int16_t r_avg=0, g_avg=0, b_avg=0;
	for(uint8_t i=0; i<num_samples; i++)
    464c:	d3 94       	inc	r13
    464e:	93 e0       	ldi	r25, 0x03	; 3
    4650:	d9 12       	cpse	r13, r25
    4652:	ec cf       	rjmp	.-40     	; 0x462c <rgb_sensor_init+0x6e>
		g_avg+=get_green_sensor();
		b_avg+=get_blue_sensor();
		delay_ms(10);
		printf("\r\n");
	}
	r_baseline= r_avg/num_samples;
    4654:	23 e0       	ldi	r18, 0x03	; 3
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	c7 01       	movw	r24, r14
    465a:	b9 01       	movw	r22, r18
    465c:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <__divmodhi4>
    4660:	60 93 68 2e 	sts	0x2E68, r22
    4664:	70 93 69 2e 	sts	0x2E69, r23
	g_baseline= g_avg/num_samples;
    4668:	c8 01       	movw	r24, r16
    466a:	b9 01       	movw	r22, r18
    466c:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <__divmodhi4>
    4670:	60 93 df 2d 	sts	0x2DDF, r22
    4674:	70 93 e0 2d 	sts	0x2DE0, r23
	b_baseline= b_avg/num_samples;
    4678:	ce 01       	movw	r24, r28
    467a:	b9 01       	movw	r22, r18
    467c:	0e 94 64 3e 	call	0x7cc8	; 0x7cc8 <__divmodhi4>
    4680:	60 93 d7 2d 	sts	0x2DD7, r22
    4684:	70 93 d8 2d 	sts	0x2DD8, r23
	//printf("Baselines:\r\n%3d  %3d  %3d\r\n", r_baseline, g_baseline, b_baseline);
}
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	1f 91       	pop	r17
    468e:	0f 91       	pop	r16
    4690:	ff 90       	pop	r15
    4692:	ef 90       	pop	r14
    4694:	df 90       	pop	r13
    4696:	08 95       	ret

00004698 <get_rgb_sensors>:

// Still not convinced that we should have the conditional, instead of just telling people
// that if their lights are on they won't get good values, here.
void get_rgb_sensors(int8_t* r, int8_t* g, int8_t* b)
{
    4698:	3f 92       	push	r3
    469a:	4f 92       	push	r4
    469c:	5f 92       	push	r5
    469e:	6f 92       	push	r6
    46a0:	7f 92       	push	r7
    46a2:	8f 92       	push	r8
    46a4:	9f 92       	push	r9
    46a6:	af 92       	push	r10
    46a8:	bf 92       	push	r11
    46aa:	cf 92       	push	r12
    46ac:	df 92       	push	r13
    46ae:	ef 92       	push	r14
    46b0:	ff 92       	push	r15
    46b2:	0f 93       	push	r16
    46b4:	1f 93       	push	r17
    46b6:	cf 93       	push	r28
    46b8:	df 93       	push	r29
    46ba:	5c 01       	movw	r10, r24
    46bc:	6b 01       	movw	r12, r22
    46be:	7a 01       	movw	r14, r20
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    46c0:	e0 e4       	ldi	r30, 0x40	; 64
    46c2:	fa e0       	ldi	r31, 0x0A	; 10
    46c4:	82 ac       	ldd	r8, Z+58	; 0x3a
    46c6:	93 ac       	ldd	r9, Z+59	; 0x3b
    46c8:	78 2c       	mov	r7, r8
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    46ca:	c0 ad       	ldd	r28, Z+56	; 0x38
    46cc:	d1 ad       	ldd	r29, Z+57	; 0x39
    46ce:	6c 2e       	mov	r6, r28
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    46d0:	e0 e4       	ldi	r30, 0x40	; 64
    46d2:	f9 e0       	ldi	r31, 0x09	; 9
    46d4:	00 ad       	ldd	r16, Z+56	; 0x38
    46d6:	11 ad       	ldd	r17, Z+57	; 0x39
    46d8:	30 2e       	mov	r3, r16
	uint8_t led_r = get_red_led();
	uint8_t led_g = get_green_led();
	uint8_t led_b = get_blue_led();
	
	if(led_r || led_g || led_b)
    46da:	81 10       	cpse	r8, r1
    46dc:	04 c0       	rjmp	.+8      	; 0x46e6 <get_rgb_sensors+0x4e>
    46de:	c1 11       	cpse	r28, r1
    46e0:	02 c0       	rjmp	.+4      	; 0x46e6 <get_rgb_sensors+0x4e>
    46e2:	00 23       	and	r16, r16
    46e4:	39 f0       	breq	.+14     	; 0x46f4 <get_rgb_sensors+0x5c>
	{
		set_rgb(0,0,0);
    46e6:	40 e0       	ldi	r20, 0x00	; 0
    46e8:	60 e0       	ldi	r22, 0x00	; 0
    46ea:	80 e0       	ldi	r24, 0x00	; 0
    46ec:	13 dd       	rcall	.-1498   	; 0x4114 <set_rgb>
		delay_ms(LED_OFF_DELAY_MS);
    46ee:	86 e9       	ldi	r24, 0x96	; 150
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	92 d0       	rcall	.+292    	; 0x4818 <delay_ms>
	//*g = (int8_t)((((gResH&0x08)<<4)|((gResH&0x01)<<6))|((gResL&0xFC)>>2));	
	//*b = (int8_t)((((bResH&0x08)<<4)|((bResH&0x01)<<6))|((bResL&0xFC)>>2));	

	int8_t rTemp,gTemp,bTemp;
	
	rTemp = get_red_sensor();
    46f4:	ce de       	rcall	.-612    	; 0x4492 <get_red_sensor>
    46f6:	48 2e       	mov	r4, r24
	gTemp = get_green_sensor();		
    46f8:	fe de       	rcall	.-516    	; 0x44f6 <get_green_sensor>
    46fa:	58 2e       	mov	r5, r24
	bTemp = get_blue_sensor();	
    46fc:	2e df       	rcall	.-420    	; 0x455a <get_blue_sensor>

	rTemp=rTemp-r_baseline;
    46fe:	90 91 68 2e 	lds	r25, 0x2E68
    4702:	49 1a       	sub	r4, r25
	gTemp=gTemp-g_baseline;
    4704:	90 91 df 2d 	lds	r25, 0x2DDF
    4708:	59 1a       	sub	r5, r25
	bTemp=bTemp-b_baseline;
    470a:	90 91 d7 2d 	lds	r25, 0x2DD7
    470e:	89 1b       	sub	r24, r25
	else if(rTemp<=-128)	rTemp=-128;
	if(gTemp>=127)			gTemp=127;
	else if(gTemp<=-128)	gTemp=-128;
	if(bTemp>=127)			bTemp=127;
	else if(bTemp<=-128)	bTemp=-128;		
	if(r!=NULL) *r=(int8_t)rTemp;
    4710:	a1 14       	cp	r10, r1
    4712:	b1 04       	cpc	r11, r1
    4714:	11 f0       	breq	.+4      	; 0x471a <get_rgb_sensors+0x82>
    4716:	f5 01       	movw	r30, r10
    4718:	40 82       	st	Z, r4
	if(g!=NULL) *g=(int8_t)gTemp;
    471a:	c1 14       	cp	r12, r1
    471c:	d1 04       	cpc	r13, r1
    471e:	11 f0       	breq	.+4      	; 0x4724 <get_rgb_sensors+0x8c>
    4720:	f6 01       	movw	r30, r12
    4722:	50 82       	st	Z, r5
	if(b!=NULL) *b=(int8_t)bTemp;	
    4724:	e1 14       	cp	r14, r1
    4726:	f1 04       	cpc	r15, r1
    4728:	11 f0       	breq	.+4      	; 0x472e <get_rgb_sensors+0x96>
    472a:	f7 01       	movw	r30, r14
    472c:	80 83       	st	Z, r24
		
	if(led_r || led_g || led_b) set_rgb(led_r, led_g, led_b);
    472e:	71 10       	cpse	r7, r1
    4730:	04 c0       	rjmp	.+8      	; 0x473a <get_rgb_sensors+0xa2>
    4732:	61 10       	cpse	r6, r1
    4734:	02 c0       	rjmp	.+4      	; 0x473a <get_rgb_sensors+0xa2>
    4736:	33 20       	and	r3, r3
    4738:	21 f0       	breq	.+8      	; 0x4742 <get_rgb_sensors+0xaa>
    473a:	40 2f       	mov	r20, r16
    473c:	6c 2f       	mov	r22, r28
    473e:	88 2d       	mov	r24, r8
    4740:	e9 dc       	rcall	.-1582   	; 0x4114 <set_rgb>
}
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	1f 91       	pop	r17
    4748:	0f 91       	pop	r16
    474a:	ff 90       	pop	r15
    474c:	ef 90       	pop	r14
    474e:	df 90       	pop	r13
    4750:	cf 90       	pop	r12
    4752:	bf 90       	pop	r11
    4754:	af 90       	pop	r10
    4756:	9f 90       	pop	r9
    4758:	8f 90       	pop	r8
    475a:	7f 90       	pop	r7
    475c:	6f 90       	pop	r6
    475e:	5f 90       	pop	r5
    4760:	4f 90       	pop	r4
    4762:	3f 90       	pop	r3
    4764:	08 95       	ret

00004766 <scheduler_init>:
	}
}

void scheduler_init()
{
	task_list = NULL;
    4766:	10 92 d3 2f 	sts	0x2FD3, r1
    476a:	10 92 d4 2f 	sts	0x2FD4, r1
	num_tasks = 0;
    476e:	10 92 dc 2d 	sts	0x2DDC, r1
	num_executing_tasks = 0;
    4772:	10 92 e1 2d 	sts	0x2DE1, r1
	curr_pointer = 0;
    4776:	10 92 aa 30 	sts	0x30AA, r1
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during initialization
    477a:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    477c:	f8 94       	cli
	{
		// Clear current task list, if necessary
		// (Should only be necessary if scheduler is re-initialized at runtime)
		
		// Set up real-time clock
		rtc_epoch = 0;
    477e:	10 92 a1 2c 	sts	0x2CA1, r1
    4782:	10 92 a2 2c 	sts	0x2CA2, r1
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    4786:	85 e0       	ldi	r24, 0x05	; 5
    4788:	e0 e4       	ldi	r30, 0x40	; 64
    478a:	f0 e0       	ldi	r31, 0x00	; 0
    478c:	83 83       	std	Z+3, r24	; 0x03
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    478e:	83 e0       	ldi	r24, 0x03	; 3
    4790:	e0 e0       	ldi	r30, 0x00	; 0
    4792:	f4 e0       	ldi	r31, 0x04	; 4
    4794:	82 83       	std	Z+2, r24	; 0x02
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4796:	81 81       	ldd	r24, Z+1	; 0x01
    4798:	80 fd       	sbrc	r24, 0
    479a:	fd cf       	rjmp	.-6      	; 0x4796 <scheduler_init+0x30>
		RTC.PER = 0xFFFF;
    479c:	8f ef       	ldi	r24, 0xFF	; 255
    479e:	9f ef       	ldi	r25, 0xFF	; 255
    47a0:	e0 e0       	ldi	r30, 0x00	; 0
    47a2:	f4 e0       	ldi	r31, 0x04	; 4
    47a4:	82 87       	std	Z+10, r24	; 0x0a
    47a6:	93 87       	std	Z+11, r25	; 0x0b
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    47a8:	81 81       	ldd	r24, Z+1	; 0x01
    47aa:	80 fd       	sbrc	r24, 0
    47ac:	fd cf       	rjmp	.-6      	; 0x47a8 <scheduler_init+0x42>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	80 93 00 04 	sts	0x0400, r24
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    47b4:	e0 e0       	ldi	r30, 0x00	; 0
    47b6:	f4 e0       	ldi	r31, 0x04	; 4
    47b8:	81 81       	ldd	r24, Z+1	; 0x01
    47ba:	80 fd       	sbrc	r24, 0
    47bc:	fd cf       	rjmp	.-6      	; 0x47b8 <scheduler_init+0x52>
		RTC.CNT = 0;
    47be:	e0 e0       	ldi	r30, 0x00	; 0
    47c0:	f4 e0       	ldi	r31, 0x04	; 4
    47c2:	10 86       	std	Z+8, r1	; 0x08
    47c4:	11 86       	std	Z+9, r1	; 0x09
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    47c6:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    47c8:	08 95       	ret

000047ca <Config32MHzClock>:
}

void Config32MHzClock(void)
{
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    47ca:	88 ed       	ldi	r24, 0xD8	; 216
    47cc:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    47ce:	82 e0       	ldi	r24, 0x02	; 2
    47d0:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    47d4:	e0 e5       	ldi	r30, 0x50	; 80
    47d6:	f0 e0       	ldi	r31, 0x00	; 0
    47d8:	81 81       	ldd	r24, Z+1	; 0x01
    47da:	81 ff       	sbrs	r24, 1
    47dc:	fd cf       	rjmp	.-6      	; 0x47d8 <Config32MHzClock+0xe>
	CCP = CCP_IOREG_gc;
    47de:	88 ed       	ldi	r24, 0xD8	; 216
    47e0:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    47e2:	e0 e4       	ldi	r30, 0x40	; 64
    47e4:	f0 e0       	ldi	r31, 0x00	; 0
    47e6:	81 e0       	ldi	r24, 0x01	; 1
    47e8:	80 83       	st	Z, r24
	
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;	// per Dustin: RTCSRC is a 1 kHz oscillator, needs to be verified
    47ea:	85 e0       	ldi	r24, 0x05	; 5
    47ec:	83 83       	std	Z+3, r24	; 0x03
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    47ee:	e0 e0       	ldi	r30, 0x00	; 0
    47f0:	f4 e0       	ldi	r31, 0x04	; 4
    47f2:	81 81       	ldd	r24, Z+1	; 0x01
    47f4:	80 fd       	sbrc	r24, 0
    47f6:	fd cf       	rjmp	.-6      	; 0x47f2 <Config32MHzClock+0x28>
	
	RTC.PER = 0xFFFF;		//	0xFFFF == 0b1111111111111111 = (2^16)-1
    47f8:	e0 e0       	ldi	r30, 0x00	; 0
    47fa:	f4 e0       	ldi	r31, 0x04	; 4
    47fc:	8f ef       	ldi	r24, 0xFF	; 255
    47fe:	9f ef       	ldi	r25, 0xFF	; 255
    4800:	82 87       	std	Z+10, r24	; 0x0a
    4802:	93 87       	std	Z+11, r25	; 0x0b
	// (2^16)-1 milliseconds is 65.535 seconds

	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    4804:	81 e0       	ldi	r24, 0x01	; 1
    4806:	80 83       	st	Z, r24

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    4808:	81 81       	ldd	r24, Z+1	; 0x01
    480a:	80 fd       	sbrc	r24, 0
    480c:	fd cf       	rjmp	.-6      	; 0x4808 <Config32MHzClock+0x3e>
	
	RTC.CNT = 0;
    480e:	e0 e0       	ldi	r30, 0x00	; 0
    4810:	f4 e0       	ldi	r31, 0x04	; 4
    4812:	10 86       	std	Z+8, r1	; 0x08
    4814:	11 86       	std	Z+9, r1	; 0x09
    4816:	08 95       	ret

00004818 <delay_ms>:
}

// Delay ms milliseconds
// (the built-in _delay_ms only takes constant arguments, not variables)
void delay_ms(uint16_t ms)
{
    4818:	cf 92       	push	r12
    481a:	df 92       	push	r13
    481c:	ef 92       	push	r14
    481e:	ff 92       	push	r15
    4820:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = get_time(); sei();
    4822:	f8 94       	cli
    4824:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4828:	78 94       	sei
	end_time = cur_time + ms;
    482a:	9b 01       	movw	r18, r22
    482c:	ac 01       	movw	r20, r24
    482e:	2e 0d       	add	r18, r14
    4830:	3f 1d       	adc	r19, r15
    4832:	41 1d       	adc	r20, r1
    4834:	51 1d       	adc	r21, r1
    4836:	69 01       	movw	r12, r18
    4838:	7a 01       	movw	r14, r20
	while (1)
	{
		cli();
    483a:	f8 94       	cli
		if (get_time() >= end_time)
    483c:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4840:	6c 15       	cp	r22, r12
    4842:	7d 05       	cpc	r23, r13
    4844:	8e 05       	cpc	r24, r14
    4846:	9f 05       	cpc	r25, r15
    4848:	10 f0       	brcs	.+4      	; 0x484e <delay_ms+0x36>
		{
			sei();
    484a:	78 94       	sei
    484c:	06 c0       	rjmp	.+12     	; 0x485a <delay_ms+0x42>
			return;
		}
		sei();
    484e:	78 94       	sei
    4850:	3a e6       	ldi	r19, 0x6A	; 106
    4852:	3a 95       	dec	r19
    4854:	f1 f7       	brne	.-4      	; 0x4852 <delay_ms+0x3a>
    4856:	00 c0       	rjmp	.+0      	; 0x4858 <delay_ms+0x40>
    4858:	f0 cf       	rjmp	.-32     	; 0x483a <delay_ms+0x22>
		delay_us(10);
	}
}
    485a:	ff 90       	pop	r15
    485c:	ef 90       	pop	r14
    485e:	df 90       	pop	r13
    4860:	cf 90       	pop	r12
    4862:	08 95       	ret

00004864 <remove_task>:
	}
}

// Remove a task from the task queue
void remove_task(Task_t* task)
{
    4864:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4866:	6f b7       	in	r22, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4868:	f8 94       	cli
	{
		if(task_list==NULL) return;
    486a:	a0 91 d3 2f 	lds	r26, 0x2FD3
    486e:	b0 91 d4 2f 	lds	r27, 0x2FD4
    4872:	10 97       	sbiw	r26, 0x00	; 0
    4874:	09 f4       	brne	.+2      	; 0x4878 <remove_task+0x14>
    4876:	cb c0       	rjmp	.+406    	; 0x4a0e <remove_task+0x1aa>
		if(task_list==task)
    4878:	8a 17       	cp	r24, r26
    487a:	9b 07       	cpc	r25, r27
    487c:	09 f0       	breq	.+2      	; 0x4880 <remove_task+0x1c>
    487e:	5b c0       	rjmp	.+182    	; 0x4936 <remove_task+0xd2>
		{
			task_list=task->next;
    4880:	84 85       	ldd	r24, Z+12	; 0x0c
    4882:	95 85       	ldd	r25, Z+13	; 0x0d
    4884:	80 93 d3 2f 	sts	0x2FD3, r24
    4888:	90 93 d4 2f 	sts	0x2FD4, r25

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    488c:	80 91 aa 30 	lds	r24, 0x30AA
    4890:	90 e0       	ldi	r25, 0x00	; 0
    4892:	9c 01       	movw	r18, r24
    4894:	22 0f       	add	r18, r18
    4896:	33 1f       	adc	r19, r19
    4898:	a9 01       	movw	r20, r18
    489a:	44 0f       	add	r20, r20
    489c:	55 1f       	adc	r21, r21
    489e:	44 0f       	add	r20, r20
    48a0:	55 1f       	adc	r21, r21
    48a2:	44 0f       	add	r20, r20
    48a4:	55 1f       	adc	r21, r21
    48a6:	da 01       	movw	r26, r20
    48a8:	a2 1b       	sub	r26, r18
    48aa:	b3 0b       	sbc	r27, r19
    48ac:	9d 01       	movw	r18, r26
    48ae:	25 55       	subi	r18, 0x55	; 85
    48b0:	3f 4c       	sbci	r19, 0xCF	; 207
    48b2:	e2 17       	cp	r30, r18
    48b4:	f3 07       	cpc	r31, r19
    48b6:	09 f5       	brne	.+66     	; 0x48fa <remove_task+0x96>
		{
			task_storage_arr[tmp].task_function = NULL;
    48b8:	9c 01       	movw	r18, r24
    48ba:	22 0f       	add	r18, r18
    48bc:	33 1f       	adc	r19, r19
    48be:	f9 01       	movw	r30, r18
    48c0:	ee 0f       	add	r30, r30
    48c2:	ff 1f       	adc	r31, r31
    48c4:	ee 0f       	add	r30, r30
    48c6:	ff 1f       	adc	r31, r31
    48c8:	ee 0f       	add	r30, r30
    48ca:	ff 1f       	adc	r31, r31
    48cc:	e2 1b       	sub	r30, r18
    48ce:	f3 0b       	sbc	r31, r19
    48d0:	e5 55       	subi	r30, 0x55	; 85
    48d2:	ff 4c       	sbci	r31, 0xCF	; 207
    48d4:	10 86       	std	Z+8, r1	; 0x08
    48d6:	11 86       	std	Z+9, r1	; 0x09
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    48d8:	07 96       	adiw	r24, 0x07	; 7
    48da:	87 70       	andi	r24, 0x07	; 7
    48dc:	90 78       	andi	r25, 0x80	; 128
    48de:	99 23       	and	r25, r25
    48e0:	24 f4       	brge	.+8      	; 0x48ea <remove_task+0x86>
    48e2:	01 97       	sbiw	r24, 0x01	; 1
    48e4:	88 6f       	ori	r24, 0xF8	; 248
    48e6:	9f 6f       	ori	r25, 0xFF	; 255
    48e8:	01 96       	adiw	r24, 0x01	; 1
    48ea:	80 93 aa 30 	sts	0x30AA, r24
		if(task_list==task)
		{
			task_list=task->next;
			scheduler_free(task);
			task = NULL;
			num_tasks--;
    48ee:	80 91 dc 2d 	lds	r24, 0x2DDC
    48f2:	81 50       	subi	r24, 0x01	; 1
    48f4:	80 93 dc 2d 	sts	0x2DDC, r24
    48f8:	8c c0       	rjmp	.+280    	; 0x4a12 <remove_task+0x1ae>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    48fa:	07 96       	adiw	r24, 0x07	; 7
    48fc:	87 70       	andi	r24, 0x07	; 7
    48fe:	90 78       	andi	r25, 0x80	; 128
    4900:	99 23       	and	r25, r25
    4902:	24 f4       	brge	.+8      	; 0x490c <remove_task+0xa8>
    4904:	01 97       	sbiw	r24, 0x01	; 1
    4906:	88 6f       	ori	r24, 0xF8	; 248
    4908:	9f 6f       	ori	r25, 0xFF	; 255
    490a:	01 96       	adiw	r24, 0x01	; 1
	{
		if(&(task_storage_arr[tmp])==tgt)
    490c:	99 27       	eor	r25, r25
    490e:	9c 01       	movw	r18, r24
    4910:	22 0f       	add	r18, r18
    4912:	33 1f       	adc	r19, r19
    4914:	a9 01       	movw	r20, r18
    4916:	44 0f       	add	r20, r20
    4918:	55 1f       	adc	r21, r21
    491a:	44 0f       	add	r20, r20
    491c:	55 1f       	adc	r21, r21
    491e:	44 0f       	add	r20, r20
    4920:	55 1f       	adc	r21, r21
    4922:	da 01       	movw	r26, r20
    4924:	a2 1b       	sub	r26, r18
    4926:	b3 0b       	sbc	r27, r19
    4928:	9d 01       	movw	r18, r26
    492a:	25 55       	subi	r18, 0x55	; 85
    492c:	3f 4c       	sbci	r19, 0xCF	; 207
    492e:	e2 17       	cp	r30, r18
    4930:	f3 07       	cpc	r31, r19
    4932:	19 f7       	brne	.-58     	; 0x48fa <remove_task+0x96>
    4934:	c1 cf       	rjmp	.-126    	; 0x48b8 <remove_task+0x54>
			num_tasks--;
		}
		else
		{
			Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    4936:	1c 96       	adiw	r26, 0x0c	; 12
    4938:	2d 91       	ld	r18, X+
    493a:	3c 91       	ld	r19, X
    493c:	1d 97       	sbiw	r26, 0x0d	; 13
    493e:	21 15       	cp	r18, r1
    4940:	31 05       	cpc	r19, r1
    4942:	09 f4       	brne	.+2      	; 0x4946 <remove_task+0xe2>
    4944:	66 c0       	rjmp	.+204    	; 0x4a12 <remove_task+0x1ae>
    4946:	e2 17       	cp	r30, r18
    4948:	f3 07       	cpc	r31, r19
    494a:	11 f0       	breq	.+4      	; 0x4950 <remove_task+0xec>
    494c:	d9 01       	movw	r26, r18
    494e:	f3 cf       	rjmp	.-26     	; 0x4936 <remove_task+0xd2>
			if (tmp_task->next != NULL)
			{
				tmp_task->next = task->next;
    4950:	84 85       	ldd	r24, Z+12	; 0x0c
    4952:	95 85       	ldd	r25, Z+13	; 0x0d
    4954:	1c 96       	adiw	r26, 0x0c	; 12
    4956:	8d 93       	st	X+, r24
    4958:	9c 93       	st	X, r25
    495a:	1d 97       	sbiw	r26, 0x0d	; 13

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    495c:	20 91 aa 30 	lds	r18, 0x30AA
    4960:	30 e0       	ldi	r19, 0x00	; 0
    4962:	c9 01       	movw	r24, r18
    4964:	88 0f       	add	r24, r24
    4966:	99 1f       	adc	r25, r25
    4968:	ac 01       	movw	r20, r24
    496a:	44 0f       	add	r20, r20
    496c:	55 1f       	adc	r21, r21
    496e:	44 0f       	add	r20, r20
    4970:	55 1f       	adc	r21, r21
    4972:	44 0f       	add	r20, r20
    4974:	55 1f       	adc	r21, r21
    4976:	da 01       	movw	r26, r20
    4978:	a8 1b       	sub	r26, r24
    497a:	b9 0b       	sbc	r27, r25
    497c:	cd 01       	movw	r24, r26
    497e:	85 55       	subi	r24, 0x55	; 85
    4980:	9f 4c       	sbci	r25, 0xCF	; 207
    4982:	e8 17       	cp	r30, r24
    4984:	f9 07       	cpc	r31, r25
    4986:	21 f5       	brne	.+72     	; 0x49d0 <remove_task+0x16c>
		{
			task_storage_arr[tmp].task_function = NULL;
    4988:	c9 01       	movw	r24, r18
    498a:	88 0f       	add	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	fc 01       	movw	r30, r24
    4990:	ee 0f       	add	r30, r30
    4992:	ff 1f       	adc	r31, r31
    4994:	ee 0f       	add	r30, r30
    4996:	ff 1f       	adc	r31, r31
    4998:	ee 0f       	add	r30, r30
    499a:	ff 1f       	adc	r31, r31
    499c:	e8 1b       	sub	r30, r24
    499e:	f9 0b       	sbc	r31, r25
    49a0:	e5 55       	subi	r30, 0x55	; 85
    49a2:	ff 4c       	sbci	r31, 0xCF	; 207
    49a4:	10 86       	std	Z+8, r1	; 0x08
    49a6:	11 86       	std	Z+9, r1	; 0x09
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    49a8:	29 5f       	subi	r18, 0xF9	; 249
    49aa:	3f 4f       	sbci	r19, 0xFF	; 255
    49ac:	27 70       	andi	r18, 0x07	; 7
    49ae:	30 78       	andi	r19, 0x80	; 128
    49b0:	33 23       	and	r19, r19
    49b2:	34 f4       	brge	.+12     	; 0x49c0 <remove_task+0x15c>
    49b4:	21 50       	subi	r18, 0x01	; 1
    49b6:	31 09       	sbc	r19, r1
    49b8:	28 6f       	ori	r18, 0xF8	; 248
    49ba:	3f 6f       	ori	r19, 0xFF	; 255
    49bc:	2f 5f       	subi	r18, 0xFF	; 255
    49be:	3f 4f       	sbci	r19, 0xFF	; 255
    49c0:	20 93 aa 30 	sts	0x30AA, r18
			if (tmp_task->next != NULL)
			{
				tmp_task->next = task->next;
				scheduler_free(task);
				task = NULL;
				num_tasks--;
    49c4:	80 91 dc 2d 	lds	r24, 0x2DDC
    49c8:	81 50       	subi	r24, 0x01	; 1
    49ca:	80 93 dc 2d 	sts	0x2DDC, r24
    49ce:	21 c0       	rjmp	.+66     	; 0x4a12 <remove_task+0x1ae>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    49d0:	29 5f       	subi	r18, 0xF9	; 249
    49d2:	3f 4f       	sbci	r19, 0xFF	; 255
    49d4:	27 70       	andi	r18, 0x07	; 7
    49d6:	30 78       	andi	r19, 0x80	; 128
    49d8:	33 23       	and	r19, r19
    49da:	34 f4       	brge	.+12     	; 0x49e8 <remove_task+0x184>
    49dc:	21 50       	subi	r18, 0x01	; 1
    49de:	31 09       	sbc	r19, r1
    49e0:	28 6f       	ori	r18, 0xF8	; 248
    49e2:	3f 6f       	ori	r19, 0xFF	; 255
    49e4:	2f 5f       	subi	r18, 0xFF	; 255
    49e6:	3f 4f       	sbci	r19, 0xFF	; 255
	{
		if(&(task_storage_arr[tmp])==tgt)
    49e8:	33 27       	eor	r19, r19
    49ea:	a9 01       	movw	r20, r18
    49ec:	44 0f       	add	r20, r20
    49ee:	55 1f       	adc	r21, r21
    49f0:	ca 01       	movw	r24, r20
    49f2:	88 0f       	add	r24, r24
    49f4:	99 1f       	adc	r25, r25
    49f6:	88 0f       	add	r24, r24
    49f8:	99 1f       	adc	r25, r25
    49fa:	88 0f       	add	r24, r24
    49fc:	99 1f       	adc	r25, r25
    49fe:	84 1b       	sub	r24, r20
    4a00:	95 0b       	sbc	r25, r21
    4a02:	85 55       	subi	r24, 0x55	; 85
    4a04:	9f 4c       	sbci	r25, 0xCF	; 207
    4a06:	e8 17       	cp	r30, r24
    4a08:	f9 07       	cpc	r31, r25
    4a0a:	11 f7       	brne	.-60     	; 0x49d0 <remove_task+0x16c>
    4a0c:	bd cf       	rjmp	.-134    	; 0x4988 <remove_task+0x124>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a0e:	6f bf       	out	0x3f, r22	; 63
    __asm__ volatile ("" ::: "memory");
    4a10:	08 95       	ret
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4a12:	6f bf       	out	0x3f, r22	; 63
    __asm__ volatile ("" ::: "memory");
    4a14:	08 95       	ret

00004a16 <print_task_queue>:
	}

}

void print_task_queue()
{
    4a16:	ff 92       	push	r15
    4a18:	0f 93       	push	r16
    4a1a:	1f 93       	push	r17
    4a1c:	cf 93       	push	r28
    4a1e:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during printing
    4a20:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a22:	f8 94       	cli
	{
		Task_t* cur_task = task_list;
    4a24:	c0 91 d3 2f 	lds	r28, 0x2FD3
    4a28:	d0 91 d4 2f 	lds	r29, 0x2FD4
		
		printf("Task Queue (%hhu tasks, %hhu executing):\r\n", num_tasks, num_executing_tasks);
    4a2c:	90 91 e1 2d 	lds	r25, 0x2DE1
    4a30:	80 91 dc 2d 	lds	r24, 0x2DDC
    4a34:	1f 92       	push	r1
    4a36:	9f 93       	push	r25
    4a38:	1f 92       	push	r1
    4a3a:	8f 93       	push	r24
    4a3c:	83 e5       	ldi	r24, 0x53	; 83
    4a3e:	94 e2       	ldi	r25, 0x24	; 36
    4a40:	9f 93       	push	r25
    4a42:	8f 93       	push	r24
    4a44:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    4a48:	0f 90       	pop	r0
    4a4a:	0f 90       	pop	r0
    4a4c:	0f 90       	pop	r0
    4a4e:	0f 90       	pop	r0
    4a50:	0f 90       	pop	r0
    4a52:	0f 90       	pop	r0
    4a54:	20 97       	sbiw	r28, 0x00	; 0
    4a56:	89 f1       	breq	.+98     	; 0x4aba <print_task_queue+0xa4>
		{
			printf("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n", cur_task, cur_task->task_function, cur_task->period, cur_task->scheduled_time, get_time());
    4a58:	0e e7       	ldi	r16, 0x7E	; 126
    4a5a:	14 e2       	ldi	r17, 0x24	; 36
    4a5c:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4a60:	9f 93       	push	r25
    4a62:	8f 93       	push	r24
    4a64:	7f 93       	push	r23
    4a66:	6f 93       	push	r22
    4a68:	8b 81       	ldd	r24, Y+3	; 0x03
    4a6a:	8f 93       	push	r24
    4a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6e:	8f 93       	push	r24
    4a70:	89 81       	ldd	r24, Y+1	; 0x01
    4a72:	8f 93       	push	r24
    4a74:	88 81       	ld	r24, Y
    4a76:	8f 93       	push	r24
    4a78:	8f 81       	ldd	r24, Y+7	; 0x07
    4a7a:	8f 93       	push	r24
    4a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    4a7e:	8f 93       	push	r24
    4a80:	8d 81       	ldd	r24, Y+5	; 0x05
    4a82:	8f 93       	push	r24
    4a84:	8c 81       	ldd	r24, Y+4	; 0x04
    4a86:	8f 93       	push	r24
    4a88:	89 85       	ldd	r24, Y+9	; 0x09
    4a8a:	8f 93       	push	r24
    4a8c:	88 85       	ldd	r24, Y+8	; 0x08
    4a8e:	8f 93       	push	r24
    4a90:	df 93       	push	r29
    4a92:	cf 93       	push	r28
    4a94:	1f 93       	push	r17
    4a96:	0f 93       	push	r16
    4a98:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
			if(cur_task==cur_task->next) break;
    4a9c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a9e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4aa0:	2d b7       	in	r18, 0x3d	; 61
    4aa2:	3e b7       	in	r19, 0x3e	; 62
    4aa4:	2e 5e       	subi	r18, 0xEE	; 238
    4aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    4aa8:	2d bf       	out	0x3d, r18	; 61
    4aaa:	3e bf       	out	0x3e, r19	; 62
    4aac:	8c 17       	cp	r24, r28
    4aae:	9d 07       	cpc	r25, r29
    4ab0:	21 f0       	breq	.+8      	; 0x4aba <print_task_queue+0xa4>
		Task_t* cur_task = task_list;
		
		printf("Task Queue (%hhu tasks, %hhu executing):\r\n", num_tasks, num_executing_tasks);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    4ab2:	00 97       	sbiw	r24, 0x00	; 0
    4ab4:	11 f0       	breq	.+4      	; 0x4aba <print_task_queue+0xa4>
		{
			printf("\tTask %p (%p) scheduled at %lu with period %lu, %lu current\r\n", cur_task, cur_task->task_function, cur_task->period, cur_task->scheduled_time, get_time());
			if(cur_task==cur_task->next) break;
			cur_task = cur_task->next;
    4ab6:	ec 01       	movw	r28, r24
    4ab8:	d1 cf       	rjmp	.-94     	; 0x4a5c <print_task_queue+0x46>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4aba:	ff be       	out	0x3f, r15	; 63
		}
	}
}
    4abc:	df 91       	pop	r29
    4abe:	cf 91       	pop	r28
    4ac0:	1f 91       	pop	r17
    4ac2:	0f 91       	pop	r16
    4ac4:	ff 90       	pop	r15
    4ac6:	08 95       	ret

00004ac8 <add_task_to_list>:
	new_task->period=period;
	return new_task;
}

void add_task_to_list(Task_t* task)
{
    4ac8:	9f 92       	push	r9
    4aca:	af 92       	push	r10
    4acc:	bf 92       	push	r11
    4ace:	cf 92       	push	r12
    4ad0:	df 92       	push	r13
    4ad2:	ef 92       	push	r14
    4ad4:	ff 92       	push	r15
    4ad6:	0f 93       	push	r16
    4ad8:	1f 93       	push	r17
    4ada:	cf 93       	push	r28
    4adc:	df 93       	push	r29
    4ade:	8c 01       	movw	r16, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4ae0:	9f b6       	in	r9, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4ae2:	f8 94       	cli
	{
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		task->next = task_list;
    4ae4:	e0 91 d3 2f 	lds	r30, 0x2FD3
    4ae8:	f0 91 d4 2f 	lds	r31, 0x2FD4
    4aec:	dc 01       	movw	r26, r24
    4aee:	1c 96       	adiw	r26, 0x0c	; 12
    4af0:	ed 93       	st	X+, r30
    4af2:	fc 93       	st	X, r31
    4af4:	1d 97       	sbiw	r26, 0x0d	; 13
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || task->scheduled_time <= task_list->scheduled_time)
    4af6:	30 97       	sbiw	r30, 0x00	; 0
    4af8:	69 f0       	breq	.+26     	; 0x4b14 <add_task_to_list+0x4c>
    4afa:	4d 91       	ld	r20, X+
    4afc:	5d 91       	ld	r21, X+
    4afe:	6d 91       	ld	r22, X+
    4b00:	7c 91       	ld	r23, X
    4b02:	80 81       	ld	r24, Z
    4b04:	91 81       	ldd	r25, Z+1	; 0x01
    4b06:	a2 81       	ldd	r26, Z+2	; 0x02
    4b08:	b3 81       	ldd	r27, Z+3	; 0x03
    4b0a:	84 17       	cp	r24, r20
    4b0c:	95 07       	cpc	r25, r21
    4b0e:	a6 07       	cpc	r26, r22
    4b10:	b7 07       	cpc	r27, r23
    4b12:	90 f1       	brcs	.+100    	; 0x4b78 <add_task_to_list+0xb0>
		{
			task_list = task;
    4b14:	00 93 d3 2f 	sts	0x2FD3, r16
    4b18:	10 93 d4 2f 	sts	0x2FD4, r17
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if (task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4b1c:	f8 01       	movw	r30, r16
    4b1e:	80 81       	ld	r24, Z
    4b20:	91 81       	ldd	r25, Z+1	; 0x01
    4b22:	a2 81       	ldd	r26, Z+2	; 0x02
    4b24:	b3 81       	ldd	r27, Z+3	; 0x03
    4b26:	40 91 a1 2c 	lds	r20, 0x2CA1
    4b2a:	50 91 a2 2c 	lds	r21, 0x2CA2
    4b2e:	e0 e0       	ldi	r30, 0x00	; 0
    4b30:	f4 e0       	ldi	r31, 0x04	; 4
    4b32:	02 85       	ldd	r16, Z+10	; 0x0a
    4b34:	13 85       	ldd	r17, Z+11	; 0x0b
    4b36:	60 e0       	ldi	r22, 0x00	; 0
    4b38:	70 e0       	ldi	r23, 0x00	; 0
    4b3a:	ba 01       	movw	r22, r20
    4b3c:	55 27       	eor	r21, r21
    4b3e:	44 27       	eor	r20, r20
    4b40:	20 e0       	ldi	r18, 0x00	; 0
    4b42:	30 e0       	ldi	r19, 0x00	; 0
    4b44:	40 2b       	or	r20, r16
    4b46:	51 2b       	or	r21, r17
    4b48:	62 2b       	or	r22, r18
    4b4a:	73 2b       	or	r23, r19
    4b4c:	48 17       	cp	r20, r24
    4b4e:	59 07       	cpc	r21, r25
    4b50:	6a 07       	cpc	r22, r26
    4b52:	7b 07       	cpc	r23, r27
    4b54:	58 f0       	brcs	.+22     	; 0x4b6c <add_task_to_list+0xa4>
			{
				while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4b56:	21 81       	ldd	r18, Z+1	; 0x01
    4b58:	20 fd       	sbrc	r18, 0
    4b5a:	fd cf       	rjmp	.-6      	; 0x4b56 <add_task_to_list+0x8e>
				RTC.COMP = (uint16_t)(0xFFFF&task->scheduled_time);
    4b5c:	e0 e0       	ldi	r30, 0x00	; 0
    4b5e:	f4 e0       	ldi	r31, 0x04	; 4
    4b60:	84 87       	std	Z+12, r24	; 0x0c
    4b62:	95 87       	std	Z+13, r25	; 0x0d
				RTC.INTCTRL |= RTC_COMPINTLVL_MED_gc;
    4b64:	82 81       	ldd	r24, Z+2	; 0x02
    4b66:	88 60       	ori	r24, 0x08	; 8
    4b68:	82 83       	std	Z+2, r24	; 0x02
    4b6a:	7c c0       	rjmp	.+248    	; 0x4c64 <add_task_to_list+0x19c>
			}
			else
			{
				RTC.INTCTRL &= ~RTC_COMPINTLVL_MED_gc;
    4b6c:	e0 e0       	ldi	r30, 0x00	; 0
    4b6e:	f4 e0       	ldi	r31, 0x04	; 4
    4b70:	82 81       	ldd	r24, Z+2	; 0x02
    4b72:	87 7f       	andi	r24, 0xF7	; 247
    4b74:	82 83       	std	Z+2, r24	; 0x02
    4b76:	76 c0       	rjmp	.+236    	; 0x4c64 <add_task_to_list+0x19c>
// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    4b78:	e0 e4       	ldi	r30, 0x40	; 64
    4b7a:	fa e0       	ldi	r31, 0x0A	; 10
    4b7c:	c0 ac       	ldd	r12, Z+56	; 0x38
    4b7e:	d1 ac       	ldd	r13, Z+57	; 0x39
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    4b80:	e2 ac       	ldd	r14, Z+58	; 0x3a
    4b82:	f3 ac       	ldd	r15, Z+59	; 0x3b
// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    4b84:	e0 e4       	ldi	r30, 0x40	; 64
    4b86:	f9 e0       	ldi	r31, 0x09	; 9
    4b88:	a0 ac       	ldd	r10, Z+56	; 0x38
    4b8a:	b1 ac       	ldd	r11, Z+57	; 0x39
		else
		{
			uint8_t g = get_green_led();
			uint8_t r = get_red_led();
			uint8_t b = get_blue_led();
			set_rgb(255, 50, 0);
    4b8c:	40 e0       	ldi	r20, 0x00	; 0
    4b8e:	62 e3       	ldi	r22, 0x32	; 50
    4b90:	8f ef       	ldi	r24, 0xFF	; 255
    4b92:	c0 da       	rcall	.-2688   	; 0x4114 <set_rgb>
			Task_t* tmp_task_ptr = task_list;
    4b94:	c0 91 d3 2f 	lds	r28, 0x2FD3
    4b98:	d0 91 d4 2f 	lds	r29, 0x2FD4
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time)
    4b9c:	45 c0       	rjmp	.+138    	; 0x4c28 <add_task_to_list+0x160>
			{
				if(tmp_task_ptr->next==tmp_task_ptr){
    4b9e:	ce 17       	cp	r28, r30
    4ba0:	df 07       	cpc	r29, r31
    4ba2:	09 f0       	breq	.+2      	; 0x4ba6 <add_task_to_list+0xde>
    4ba4:	40 c0       	rjmp	.+128    	; 0x4c26 <add_task_to_list+0x15e>
					printf("ERROR! Task list has self-reference.\r\n");
    4ba6:	8c eb       	ldi	r24, 0xBC	; 188
    4ba8:	94 e2       	ldi	r25, 0x24	; 36
    4baa:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
					printf("New Task %p (%p) scheduled at %lu with period %lu, %lu current\r\n", task, task->task_function, task->period, task->scheduled_time, get_time());
    4bae:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4bb2:	9f 93       	push	r25
    4bb4:	8f 93       	push	r24
    4bb6:	7f 93       	push	r23
    4bb8:	6f 93       	push	r22
    4bba:	d8 01       	movw	r26, r16
    4bbc:	13 96       	adiw	r26, 0x03	; 3
    4bbe:	8c 91       	ld	r24, X
    4bc0:	13 97       	sbiw	r26, 0x03	; 3
    4bc2:	8f 93       	push	r24
    4bc4:	12 96       	adiw	r26, 0x02	; 2
    4bc6:	8c 91       	ld	r24, X
    4bc8:	12 97       	sbiw	r26, 0x02	; 2
    4bca:	8f 93       	push	r24
    4bcc:	11 96       	adiw	r26, 0x01	; 1
    4bce:	8c 91       	ld	r24, X
    4bd0:	11 97       	sbiw	r26, 0x01	; 1
    4bd2:	8f 93       	push	r24
    4bd4:	8c 91       	ld	r24, X
    4bd6:	8f 93       	push	r24
    4bd8:	17 96       	adiw	r26, 0x07	; 7
    4bda:	8c 91       	ld	r24, X
    4bdc:	17 97       	sbiw	r26, 0x07	; 7
    4bde:	8f 93       	push	r24
    4be0:	16 96       	adiw	r26, 0x06	; 6
    4be2:	8c 91       	ld	r24, X
    4be4:	16 97       	sbiw	r26, 0x06	; 6
    4be6:	8f 93       	push	r24
    4be8:	15 96       	adiw	r26, 0x05	; 5
    4bea:	8c 91       	ld	r24, X
    4bec:	15 97       	sbiw	r26, 0x05	; 5
    4bee:	8f 93       	push	r24
    4bf0:	14 96       	adiw	r26, 0x04	; 4
    4bf2:	8c 91       	ld	r24, X
    4bf4:	14 97       	sbiw	r26, 0x04	; 4
    4bf6:	8f 93       	push	r24
    4bf8:	19 96       	adiw	r26, 0x09	; 9
    4bfa:	8c 91       	ld	r24, X
    4bfc:	19 97       	sbiw	r26, 0x09	; 9
    4bfe:	8f 93       	push	r24
    4c00:	18 96       	adiw	r26, 0x08	; 8
    4c02:	8c 91       	ld	r24, X
    4c04:	8f 93       	push	r24
    4c06:	1f 93       	push	r17
    4c08:	0f 93       	push	r16
    4c0a:	82 ee       	ldi	r24, 0xE2	; 226
    4c0c:	94 e2       	ldi	r25, 0x24	; 36
    4c0e:	9f 93       	push	r25
    4c10:	8f 93       	push	r24
    4c12:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
					print_task_queue();
    4c16:	ff de       	rcall	.-514    	; 0x4a16 <print_task_queue>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4c18:	9f be       	out	0x3f, r9	; 63
    __asm__ volatile ("" ::: "memory");
    4c1a:	ed b7       	in	r30, 0x3d	; 61
    4c1c:	fe b7       	in	r31, 0x3e	; 62
    4c1e:	72 96       	adiw	r30, 0x12	; 18
    4c20:	ed bf       	out	0x3d, r30	; 61
    4c22:	fe bf       	out	0x3e, r31	; 62
    4c24:	25 c0       	rjmp	.+74     	; 0x4c70 <add_task_to_list+0x1a8>
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
    4c26:	ef 01       	movw	r28, r30
			uint8_t g = get_green_led();
			uint8_t r = get_red_led();
			uint8_t b = get_blue_led();
			set_rgb(255, 50, 0);
			Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && task->scheduled_time > (tmp_task_ptr->next)->scheduled_time)
    4c28:	ec 85       	ldd	r30, Y+12	; 0x0c
    4c2a:	fd 85       	ldd	r31, Y+13	; 0x0d
    4c2c:	30 97       	sbiw	r30, 0x00	; 0
    4c2e:	79 f0       	breq	.+30     	; 0x4c4e <add_task_to_list+0x186>
    4c30:	d8 01       	movw	r26, r16
    4c32:	4d 91       	ld	r20, X+
    4c34:	5d 91       	ld	r21, X+
    4c36:	6d 91       	ld	r22, X+
    4c38:	7c 91       	ld	r23, X
    4c3a:	80 81       	ld	r24, Z
    4c3c:	91 81       	ldd	r25, Z+1	; 0x01
    4c3e:	a2 81       	ldd	r26, Z+2	; 0x02
    4c40:	b3 81       	ldd	r27, Z+3	; 0x03
    4c42:	84 17       	cp	r24, r20
    4c44:	95 07       	cpc	r25, r21
    4c46:	a6 07       	cpc	r26, r22
    4c48:	b7 07       	cpc	r27, r23
    4c4a:	08 f4       	brcc	.+2      	; 0x4c4e <add_task_to_list+0x186>
    4c4c:	a8 cf       	rjmp	.-176    	; 0x4b9e <add_task_to_list+0xd6>
					print_task_queue();
					return;				
				}
				tmp_task_ptr = tmp_task_ptr->next;
			}
			set_rgb(r, g, b);
    4c4e:	4a 2d       	mov	r20, r10
    4c50:	6c 2d       	mov	r22, r12
    4c52:	8e 2d       	mov	r24, r14
    4c54:	5f da       	rcall	.-2882   	; 0x4114 <set_rgb>
			task->next = tmp_task_ptr->next;
    4c56:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c58:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c5a:	f8 01       	movw	r30, r16
    4c5c:	84 87       	std	Z+12, r24	; 0x0c
    4c5e:	95 87       	std	Z+13, r25	; 0x0d
			tmp_task_ptr->next = task;
    4c60:	0c 87       	std	Y+12, r16	; 0x0c
    4c62:	1d 87       	std	Y+13, r17	; 0x0d
			//while (RTC.STATUS & RTC_SYNCBUSY_bm);
			//RTC.COMP = RTC.CNT+5;
			//RTC.INTCTRL |= RTC_COMPINTLVL_MED_gc;
		//}

		num_tasks++;
    4c64:	80 91 dc 2d 	lds	r24, 0x2DDC
    4c68:	8f 5f       	subi	r24, 0xFF	; 255
    4c6a:	80 93 dc 2d 	sts	0x2DDC, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4c6e:	9f be       	out	0x3f, r9	; 63
	}
}
    4c70:	df 91       	pop	r29
    4c72:	cf 91       	pop	r28
    4c74:	1f 91       	pop	r17
    4c76:	0f 91       	pop	r16
    4c78:	ff 90       	pop	r15
    4c7a:	ef 90       	pop	r14
    4c7c:	df 90       	pop	r13
    4c7e:	cf 90       	pop	r12
    4c80:	bf 90       	pop	r11
    4c82:	af 90       	pop	r10
    4c84:	9f 90       	pop	r9
    4c86:	08 95       	ret

00004c88 <task_list_cleanup>:
	}
}

//This function checks for errors or inconsistencies in the task list, and attempts to correct them.
void task_list_cleanup()
{
    4c88:	8f 92       	push	r8
    4c8a:	9f 92       	push	r9
    4c8c:	af 92       	push	r10
    4c8e:	bf 92       	push	r11
    4c90:	ef 92       	push	r14
    4c92:	ff 92       	push	r15
    4c94:	0f 93       	push	r16
    4c96:	1f 93       	push	r17
    4c98:	cf 93       	push	r28
    4c9a:	df 93       	push	r29
    4c9c:	cd b7       	in	r28, 0x3d	; 61
    4c9e:	de b7       	in	r29, 0x3e	; 62
    4ca0:	60 97       	sbiw	r28, 0x10	; 16
    4ca2:	cd bf       	out	0x3d, r28	; 61
    4ca4:	de bf       	out	0x3e, r29	; 62
	printf("\tPerforming task_list_cleanup!\r\n");
    4ca6:	83 e2       	ldi	r24, 0x23	; 35
    4ca8:	95 e2       	ldi	r25, 0x25	; 37
    4caa:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
	print_task_queue();
    4cae:	b3 de       	rcall	.-666    	; 0x4a16 <print_task_queue>
	Task_t* cur_task = task_list;
    4cb0:	00 91 d3 2f 	lds	r16, 0x2FD3
    4cb4:	10 91 d4 2f 	lds	r17, 0x2FD4
	Task_t* tmp_task_ptr;
	Task_t* task_ptr_arr[MAX_NUM_SCHEDULED_TASKS];
	uint8_t num_periodic_tasks = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4cb8:	ef b6       	in	r14, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4cba:	f8 94       	cli
	{
		while (cur_task != NULL)
    4cbc:	01 15       	cp	r16, r1
    4cbe:	11 05       	cpc	r17, r1
    4cc0:	09 f4       	brne	.+2      	; 0x4cc4 <task_list_cleanup+0x3c>
    4cc2:	56 c0       	rjmp	.+172    	; 0x4d70 <task_list_cleanup+0xe8>
    4cc4:	f1 2c       	mov	r15, r1
		{
			if(cur_task->period==0)
    4cc6:	f8 01       	movw	r30, r16
    4cc8:	44 81       	ldd	r20, Z+4	; 0x04
    4cca:	55 81       	ldd	r21, Z+5	; 0x05
    4ccc:	66 81       	ldd	r22, Z+6	; 0x06
    4cce:	77 81       	ldd	r23, Z+7	; 0x07
    4cd0:	45 2b       	or	r20, r21
    4cd2:	46 2b       	or	r20, r22
    4cd4:	47 2b       	or	r20, r23
    4cd6:	39 f4       	brne	.+14     	; 0x4ce6 <task_list_cleanup+0x5e>
			{
				tmp_task_ptr = cur_task->next;
    4cd8:	a4 84       	ldd	r10, Z+12	; 0x0c
    4cda:	b5 84       	ldd	r11, Z+13	; 0x0d
				remove_task(cur_task);
    4cdc:	c8 01       	movw	r24, r16
    4cde:	c2 dd       	rcall	.-1148   	; 0x4864 <remove_task>
				cur_task = tmp_task_ptr;
    4ce0:	0a 2d       	mov	r16, r10
    4ce2:	1b 2d       	mov	r17, r11
    4ce4:	2b c0       	rjmp	.+86     	; 0x4d3c <task_list_cleanup+0xb4>
			}
			else
			{
				cur_task->scheduled_time=get_time()+cur_task->period+50; //TODO: Maybe remove this +50? We've added it to see if it fixes a bug.
    4ce6:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4cea:	f8 01       	movw	r30, r16
    4cec:	84 80       	ldd	r8, Z+4	; 0x04
    4cee:	95 80       	ldd	r9, Z+5	; 0x05
    4cf0:	a6 80       	ldd	r10, Z+6	; 0x06
    4cf2:	b7 80       	ldd	r11, Z+7	; 0x07
    4cf4:	f2 e3       	ldi	r31, 0x32	; 50
    4cf6:	8f 0e       	add	r8, r31
    4cf8:	91 1c       	adc	r9, r1
    4cfa:	a1 1c       	adc	r10, r1
    4cfc:	b1 1c       	adc	r11, r1
    4cfe:	dc 01       	movw	r26, r24
    4d00:	cb 01       	movw	r24, r22
    4d02:	88 0d       	add	r24, r8
    4d04:	99 1d       	adc	r25, r9
    4d06:	aa 1d       	adc	r26, r10
    4d08:	bb 1d       	adc	r27, r11
    4d0a:	f8 01       	movw	r30, r16
    4d0c:	80 83       	st	Z, r24
    4d0e:	91 83       	std	Z+1, r25	; 0x01
    4d10:	a2 83       	std	Z+2, r26	; 0x02
    4d12:	b3 83       	std	Z+3, r27	; 0x03
				task_ptr_arr[num_periodic_tasks] = cur_task;
    4d14:	ef 2d       	mov	r30, r15
    4d16:	f0 e0       	ldi	r31, 0x00	; 0
    4d18:	ee 0f       	add	r30, r30
    4d1a:	ff 1f       	adc	r31, r31
    4d1c:	81 e0       	ldi	r24, 0x01	; 1
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	8c 0f       	add	r24, r28
    4d22:	9d 1f       	adc	r25, r29
    4d24:	e8 0f       	add	r30, r24
    4d26:	f9 1f       	adc	r31, r25
    4d28:	00 83       	st	Z, r16
    4d2a:	11 83       	std	Z+1, r17	; 0x01
				cur_task = cur_task->next;
    4d2c:	f8 01       	movw	r30, r16
    4d2e:	94 85       	ldd	r25, Z+12	; 0x0c
    4d30:	85 85       	ldd	r24, Z+13	; 0x0d
				task_ptr_arr[num_periodic_tasks]->next=NULL;
    4d32:	14 86       	std	Z+12, r1	; 0x0c
    4d34:	15 86       	std	Z+13, r1	; 0x0d
				num_periodic_tasks++;					
    4d36:	f3 94       	inc	r15
			}
			else
			{
				cur_task->scheduled_time=get_time()+cur_task->period+50; //TODO: Maybe remove this +50? We've added it to see if it fixes a bug.
				task_ptr_arr[num_periodic_tasks] = cur_task;
				cur_task = cur_task->next;
    4d38:	09 2f       	mov	r16, r25
    4d3a:	18 2f       	mov	r17, r24
				task_ptr_arr[num_periodic_tasks]->next=NULL;
				num_periodic_tasks++;					
			}
			num_tasks=0;
    4d3c:	10 92 dc 2d 	sts	0x2DDC, r1
	Task_t* tmp_task_ptr;
	Task_t* task_ptr_arr[MAX_NUM_SCHEDULED_TASKS];
	uint8_t num_periodic_tasks = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		while (cur_task != NULL)
    4d40:	01 15       	cp	r16, r1
    4d42:	11 05       	cpc	r17, r1
    4d44:	09 f0       	breq	.+2      	; 0x4d48 <task_list_cleanup+0xc0>
    4d46:	bf cf       	rjmp	.-130    	; 0x4cc6 <task_list_cleanup+0x3e>
				task_ptr_arr[num_periodic_tasks]->next=NULL;
				num_periodic_tasks++;					
			}
			num_tasks=0;
		}
		task_list=NULL; //Now, the task list has been cleared out, but only non-periodic tasks have had their memory purged.
    4d48:	10 92 d3 2f 	sts	0x2FD3, r1
    4d4c:	10 92 d4 2f 	sts	0x2FD4, r1
		for(uint8_t i=0;i<num_periodic_tasks;i++)
    4d50:	ff 20       	and	r15, r15
    4d52:	61 f0       	breq	.+24     	; 0x4d6c <task_list_cleanup+0xe4>
    4d54:	8e 01       	movw	r16, r28
    4d56:	0f 5f       	subi	r16, 0xFF	; 255
    4d58:	1f 4f       	sbci	r17, 0xFF	; 255
    4d5a:	b1 2c       	mov	r11, r1
		{
			add_task_to_list(task_ptr_arr[i]);
    4d5c:	f8 01       	movw	r30, r16
    4d5e:	81 91       	ld	r24, Z+
    4d60:	91 91       	ld	r25, Z+
    4d62:	8f 01       	movw	r16, r30
    4d64:	b1 de       	rcall	.-670    	; 0x4ac8 <add_task_to_list>
				num_periodic_tasks++;					
			}
			num_tasks=0;
		}
		task_list=NULL; //Now, the task list has been cleared out, but only non-periodic tasks have had their memory purged.
		for(uint8_t i=0;i<num_periodic_tasks;i++)
    4d66:	b3 94       	inc	r11
    4d68:	bf 10       	cpse	r11, r15
    4d6a:	f8 cf       	rjmp	.-16     	; 0x4d5c <task_list_cleanup+0xd4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4d6c:	ef be       	out	0x3f, r14	; 63
    __asm__ volatile ("" ::: "memory");
    4d6e:	05 c0       	rjmp	.+10     	; 0x4d7a <task_list_cleanup+0xf2>
				task_ptr_arr[num_periodic_tasks]->next=NULL;
				num_periodic_tasks++;					
			}
			num_tasks=0;
		}
		task_list=NULL; //Now, the task list has been cleared out, but only non-periodic tasks have had their memory purged.
    4d70:	10 92 d3 2f 	sts	0x2FD3, r1
    4d74:	10 92 d4 2f 	sts	0x2FD4, r1
    4d78:	f9 cf       	rjmp	.-14     	; 0x4d6c <task_list_cleanup+0xe4>
		for(uint8_t i=0;i<num_periodic_tasks;i++)
		{
			add_task_to_list(task_ptr_arr[i]);
		}
	}
}
    4d7a:	60 96       	adiw	r28, 0x10	; 16
    4d7c:	cd bf       	out	0x3d, r28	; 61
    4d7e:	de bf       	out	0x3e, r29	; 62
    4d80:	df 91       	pop	r29
    4d82:	cf 91       	pop	r28
    4d84:	1f 91       	pop	r17
    4d86:	0f 91       	pop	r16
    4d88:	ff 90       	pop	r15
    4d8a:	ef 90       	pop	r14
    4d8c:	bf 90       	pop	r11
    4d8e:	af 90       	pop	r10
    4d90:	9f 90       	pop	r9
    4d92:	8f 90       	pop	r8
    4d94:	08 95       	ret

00004d96 <schedule_task>:
// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
    4d96:	4f 92       	push	r4
    4d98:	5f 92       	push	r5
    4d9a:	6f 92       	push	r6
    4d9c:	7f 92       	push	r7
    4d9e:	bf 92       	push	r11
    4da0:	cf 92       	push	r12
    4da2:	df 92       	push	r13
    4da4:	ef 92       	push	r14
    4da6:	ff 92       	push	r15
    4da8:	0f 93       	push	r16
    4daa:	1f 93       	push	r17
    4dac:	cf 93       	push	r28
    4dae:	df 93       	push	r29
    4db0:	00 d0       	rcall	.+0      	; 0x4db2 <schedule_task+0x1c>
    4db2:	1f 92       	push	r1
    4db4:	cd b7       	in	r28, 0x3d	; 61
    4db6:	de b7       	in	r29, 0x3e	; 62
    4db8:	69 83       	std	Y+1, r22	; 0x01
    4dba:	7a 83       	std	Y+2, r23	; 0x02
    4dbc:	8b 83       	std	Y+3, r24	; 0x03
    4dbe:	9c 83       	std	Y+4, r25	; 0x04
    4dc0:	6a 01       	movw	r12, r20
    4dc2:	79 01       	movw	r14, r18
	Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4dc4:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4dc6:	f8 94       	cli
Task_t task_storage_arr[MAX_NUM_SCHEDULED_TASKS];
uint8_t curr_pointer;

inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    4dc8:	80 91 dc 2d 	lds	r24, 0x2DDC
    4dcc:	88 30       	cpi	r24, 0x08	; 8
    4dce:	08 f0       	brcs	.+2      	; 0x4dd2 <schedule_task+0x3c>
    4dd0:	51 c0       	rjmp	.+162    	; 0x4e74 <schedule_task+0xde>
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    4dd2:	40 91 aa 30 	lds	r20, 0x30AA
    4dd6:	84 2f       	mov	r24, r20
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	01 96       	adiw	r24, 0x01	; 1
    4ddc:	87 70       	andi	r24, 0x07	; 7
    4dde:	90 78       	andi	r25, 0x80	; 128
    4de0:	58 2f       	mov	r21, r24
    4de2:	48 17       	cp	r20, r24
    4de4:	99 f1       	breq	.+102    	; 0x4e4c <schedule_task+0xb6>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
    4de6:	99 27       	eor	r25, r25
    4de8:	9c 01       	movw	r18, r24
    4dea:	22 0f       	add	r18, r18
    4dec:	33 1f       	adc	r19, r19
    4dee:	f9 01       	movw	r30, r18
    4df0:	ee 0f       	add	r30, r30
    4df2:	ff 1f       	adc	r31, r31
    4df4:	ee 0f       	add	r30, r30
    4df6:	ff 1f       	adc	r31, r31
    4df8:	ee 0f       	add	r30, r30
    4dfa:	ff 1f       	adc	r31, r31
    4dfc:	e2 1b       	sub	r30, r18
    4dfe:	f3 0b       	sbc	r31, r19
    4e00:	e5 55       	subi	r30, 0x55	; 85
    4e02:	ff 4c       	sbci	r31, 0xCF	; 207
    4e04:	20 85       	ldd	r18, Z+8	; 0x08
    4e06:	31 85       	ldd	r19, Z+9	; 0x09
    4e08:	23 2b       	or	r18, r19
    4e0a:	a1 f4       	brne	.+40     	; 0x4e34 <schedule_task+0x9e>
    4e0c:	1f c0       	rjmp	.+62     	; 0x4e4c <schedule_task+0xb6>
    4e0e:	99 27       	eor	r25, r25
    4e10:	9c 01       	movw	r18, r24
    4e12:	22 0f       	add	r18, r18
    4e14:	33 1f       	adc	r19, r19
    4e16:	f9 01       	movw	r30, r18
    4e18:	ee 0f       	add	r30, r30
    4e1a:	ff 1f       	adc	r31, r31
    4e1c:	ee 0f       	add	r30, r30
    4e1e:	ff 1f       	adc	r31, r31
    4e20:	ee 0f       	add	r30, r30
    4e22:	ff 1f       	adc	r31, r31
    4e24:	e2 1b       	sub	r30, r18
    4e26:	f3 0b       	sbc	r31, r19
    4e28:	e5 55       	subi	r30, 0x55	; 85
    4e2a:	ff 4c       	sbci	r31, 0xCF	; 207
    4e2c:	20 85       	ldd	r18, Z+8	; 0x08
    4e2e:	31 85       	ldd	r19, Z+9	; 0x09
    4e30:	23 2b       	or	r18, r19
    4e32:	61 f0       	breq	.+24     	; 0x4e4c <schedule_task+0xb6>
inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    4e34:	01 96       	adiw	r24, 0x01	; 1
    4e36:	87 70       	andi	r24, 0x07	; 7
    4e38:	90 78       	andi	r25, 0x80	; 128
    4e3a:	99 23       	and	r25, r25
    4e3c:	24 f4       	brge	.+8      	; 0x4e46 <schedule_task+0xb0>
    4e3e:	01 97       	sbiw	r24, 0x01	; 1
    4e40:	88 6f       	ori	r24, 0xF8	; 248
    4e42:	9f 6f       	ori	r25, 0xFF	; 255
    4e44:	01 96       	adiw	r24, 0x01	; 1
    4e46:	58 2f       	mov	r21, r24
    4e48:	48 13       	cpse	r20, r24
    4e4a:	e1 cf       	rjmp	.-62     	; 0x4e0e <schedule_task+0x78>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
	}
	curr_pointer = tmp;
    4e4c:	50 93 aa 30 	sts	0x30AA, r21
	return &(task_storage_arr[curr_pointer]);
    4e50:	85 2f       	mov	r24, r21
    4e52:	90 e0       	ldi	r25, 0x00	; 0
    4e54:	88 0f       	add	r24, r24
    4e56:	99 1f       	adc	r25, r25
    4e58:	8c 01       	movw	r16, r24
    4e5a:	00 0f       	add	r16, r16
    4e5c:	11 1f       	adc	r17, r17
    4e5e:	00 0f       	add	r16, r16
    4e60:	11 1f       	adc	r17, r17
    4e62:	00 0f       	add	r16, r16
    4e64:	11 1f       	adc	r17, r17
    4e66:	08 1b       	sub	r16, r24
    4e68:	19 0b       	sbc	r17, r25
    4e6a:	05 55       	subi	r16, 0x55	; 85
    4e6c:	1f 4c       	sbci	r17, 0xCF	; 207
{
	Task_t* new_task;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
	{
		new_task = (Task_t*)scheduler_malloc();
		if (new_task == NULL) return NULL;
    4e6e:	01 15       	cp	r16, r1
    4e70:	11 05       	cpc	r17, r1
    4e72:	21 f4       	brne	.+8      	; 0x4e7c <schedule_task+0xe6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4e74:	bf be       	out	0x3f, r11	; 63
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	40 c0       	rjmp	.+128    	; 0x4efc <schedule_task+0x166>
	
		new_task->scheduled_time = time + get_time();
    4e7c:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4e80:	49 80       	ldd	r4, Y+1	; 0x01
    4e82:	5a 80       	ldd	r5, Y+2	; 0x02
    4e84:	6b 80       	ldd	r6, Y+3	; 0x03
    4e86:	7c 80       	ldd	r7, Y+4	; 0x04
    4e88:	dc 01       	movw	r26, r24
    4e8a:	cb 01       	movw	r24, r22
    4e8c:	84 0d       	add	r24, r4
    4e8e:	95 1d       	adc	r25, r5
    4e90:	a6 1d       	adc	r26, r6
    4e92:	b7 1d       	adc	r27, r7
    4e94:	f8 01       	movw	r30, r16
    4e96:	80 83       	st	Z, r24
    4e98:	91 83       	std	Z+1, r25	; 0x01
    4e9a:	a2 83       	std	Z+2, r26	; 0x02
    4e9c:	b3 83       	std	Z+3, r27	; 0x03
		if(0xFFFF&get_time()<2) new_task->scheduled_time += 10;
    4e9e:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4ea2:	62 30       	cpi	r22, 0x02	; 2
    4ea4:	71 05       	cpc	r23, r1
    4ea6:	81 05       	cpc	r24, r1
    4ea8:	91 05       	cpc	r25, r1
    4eaa:	60 f4       	brcc	.+24     	; 0x4ec4 <schedule_task+0x12e>
    4eac:	f8 01       	movw	r30, r16
    4eae:	80 81       	ld	r24, Z
    4eb0:	91 81       	ldd	r25, Z+1	; 0x01
    4eb2:	a2 81       	ldd	r26, Z+2	; 0x02
    4eb4:	b3 81       	ldd	r27, Z+3	; 0x03
    4eb6:	0a 96       	adiw	r24, 0x0a	; 10
    4eb8:	a1 1d       	adc	r26, r1
    4eba:	b1 1d       	adc	r27, r1
    4ebc:	80 83       	st	Z, r24
    4ebe:	91 83       	std	Z+1, r25	; 0x01
    4ec0:	a2 83       	std	Z+2, r26	; 0x02
    4ec2:	b3 83       	std	Z+3, r27	; 0x03
		new_task->arg = arg;
    4ec4:	f8 01       	movw	r30, r16
    4ec6:	e2 86       	std	Z+10, r14	; 0x0a
    4ec8:	f3 86       	std	Z+11, r15	; 0x0b
		new_task->task_function = function;
    4eca:	c0 86       	std	Z+8, r12	; 0x08
    4ecc:	d1 86       	std	Z+9, r13	; 0x09
		new_task->period = 0;
    4ece:	14 82       	std	Z+4, r1	; 0x04
    4ed0:	15 82       	std	Z+5, r1	; 0x05
    4ed2:	16 82       	std	Z+6, r1	; 0x06
    4ed4:	17 82       	std	Z+7, r1	; 0x07
		new_task->next = NULL; 		
    4ed6:	14 86       	std	Z+12, r1	; 0x0c
    4ed8:	15 86       	std	Z+13, r1	; 0x0d
    4eda:	bf be       	out	0x3f, r11	; 63
	}
	add_task_to_list(new_task);
    4edc:	c8 01       	movw	r24, r16
    4ede:	f4 dd       	rcall	.-1048   	; 0x4ac8 <add_task_to_list>
	if(new_task->next==new_task){
    4ee0:	f8 01       	movw	r30, r16
    4ee2:	84 85       	ldd	r24, Z+12	; 0x0c
    4ee4:	95 85       	ldd	r25, Z+13	; 0x0d
    4ee6:	80 17       	cp	r24, r16
    4ee8:	91 07       	cpc	r25, r17
    4eea:	31 f4       	brne	.+12     	; 0x4ef8 <schedule_task+0x162>
		printf("ERROR! New task has self-reference.\r\n");
    4eec:	83 e4       	ldi	r24, 0x43	; 67
    4eee:	95 e2       	ldi	r25, 0x25	; 37
    4ef0:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		print_task_queue();
    4ef4:	90 dd       	rcall	.-1248   	; 0x4a16 <print_task_queue>
    4ef6:	02 c0       	rjmp	.+4      	; 0x4efc <schedule_task+0x166>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
	}
	curr_pointer = tmp;
	return &(task_storage_arr[curr_pointer]);
    4ef8:	80 2f       	mov	r24, r16
    4efa:	91 2f       	mov	r25, r17
		print_task_queue();
		return;				
	}	

	return new_task;
}
    4efc:	24 96       	adiw	r28, 0x04	; 4
    4efe:	cd bf       	out	0x3d, r28	; 61
    4f00:	de bf       	out	0x3e, r29	; 62
    4f02:	df 91       	pop	r29
    4f04:	cf 91       	pop	r28
    4f06:	1f 91       	pop	r17
    4f08:	0f 91       	pop	r16
    4f0a:	ff 90       	pop	r15
    4f0c:	ef 90       	pop	r14
    4f0e:	df 90       	pop	r13
    4f10:	cf 90       	pop	r12
    4f12:	bf 90       	pop	r11
    4f14:	7f 90       	pop	r7
    4f16:	6f 90       	pop	r6
    4f18:	5f 90       	pop	r5
    4f1a:	4f 90       	pop	r4
    4f1c:	08 95       	ret

00004f1e <schedule_periodic_task>:

Task_t* schedule_periodic_task(uint32_t period, void (*function)(void*), void* arg)
{
    4f1e:	cf 92       	push	r12
    4f20:	df 92       	push	r13
    4f22:	ef 92       	push	r14
    4f24:	ff 92       	push	r15
    4f26:	0f 93       	push	r16
    4f28:	1f 93       	push	r17
    4f2a:	cf 93       	push	r28
    4f2c:	df 93       	push	r29
    4f2e:	6b 01       	movw	r12, r22
    4f30:	7c 01       	movw	r14, r24
    4f32:	8a 01       	movw	r16, r20
    4f34:	e9 01       	movw	r28, r18
	Task_t* new_task = schedule_task(get_time()+period, function, arg);
    4f36:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4f3a:	6c 0d       	add	r22, r12
    4f3c:	7d 1d       	adc	r23, r13
    4f3e:	8e 1d       	adc	r24, r14
    4f40:	9f 1d       	adc	r25, r15
    4f42:	9e 01       	movw	r18, r28
    4f44:	a8 01       	movw	r20, r16
    4f46:	27 df       	rcall	.-434    	; 0x4d96 <schedule_task>
	new_task->period=period;
    4f48:	fc 01       	movw	r30, r24
    4f4a:	c4 82       	std	Z+4, r12	; 0x04
    4f4c:	d5 82       	std	Z+5, r13	; 0x05
    4f4e:	e6 82       	std	Z+6, r14	; 0x06
    4f50:	f7 82       	std	Z+7, r15	; 0x07
	return new_task;
}
    4f52:	df 91       	pop	r29
    4f54:	cf 91       	pop	r28
    4f56:	1f 91       	pop	r17
    4f58:	0f 91       	pop	r16
    4f5a:	ff 90       	pop	r15
    4f5c:	ef 90       	pop	r14
    4f5e:	df 90       	pop	r13
    4f60:	cf 90       	pop	r12
    4f62:	08 95       	ret

00004f64 <run_tasks>:

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
void run_tasks()
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    4f64:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4f66:	f8 94       	cli
    4f68:	88 c0       	rjmp	.+272    	; 0x507a <run_tasks+0x116>
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
		{
			Task_t* cur_task = task_list;
    4f6a:	c0 91 d3 2f 	lds	r28, 0x2FD3
    4f6e:	d0 91 d4 2f 	lds	r29, 0x2FD4
			task_list = cur_task->next;
    4f72:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f74:	9d 85       	ldd	r25, Y+13	; 0x0d
    4f76:	80 93 d3 2f 	sts	0x2FD3, r24
    4f7a:	90 93 d4 2f 	sts	0x2FD4, r25

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    4f7e:	78 94       	sei
			NONATOMIC_BLOCK(NONATOMIC_FORCEOFF) // Enable interrupts during tasks
			{
				cur_task->task_function(cur_task->arg); // run the task
    4f80:	e8 85       	ldd	r30, Y+8	; 0x08
    4f82:	f9 85       	ldd	r31, Y+9	; 0x09
    4f84:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f86:	9b 85       	ldd	r25, Y+11	; 0x0b
    4f88:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
    4f8a:	f8 94       	cli
			}
			if(cur_task->period>0)
    4f8c:	4c 81       	ldd	r20, Y+4	; 0x04
    4f8e:	5d 81       	ldd	r21, Y+5	; 0x05
    4f90:	6e 81       	ldd	r22, Y+6	; 0x06
    4f92:	7f 81       	ldd	r23, Y+7	; 0x07
    4f94:	45 2b       	or	r20, r21
    4f96:	46 2b       	or	r20, r22
    4f98:	47 2b       	or	r20, r23
    4f9a:	d1 f0       	breq	.+52     	; 0x4fd0 <run_tasks+0x6c>
			{
				uint32_t THE_TIME = get_time();
    4f9c:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
				cur_task->scheduled_time=THE_TIME+cur_task->period;
    4fa0:	cc 80       	ldd	r12, Y+4	; 0x04
    4fa2:	dd 80       	ldd	r13, Y+5	; 0x05
    4fa4:	ee 80       	ldd	r14, Y+6	; 0x06
    4fa6:	ff 80       	ldd	r15, Y+7	; 0x07
    4fa8:	dc 01       	movw	r26, r24
    4faa:	cb 01       	movw	r24, r22
    4fac:	8c 0d       	add	r24, r12
    4fae:	9d 1d       	adc	r25, r13
    4fb0:	ae 1d       	adc	r26, r14
    4fb2:	bf 1d       	adc	r27, r15
    4fb4:	88 83       	st	Y, r24
    4fb6:	99 83       	std	Y+1, r25	; 0x01
    4fb8:	aa 83       	std	Y+2, r26	; 0x02
    4fba:	bb 83       	std	Y+3, r27	; 0x03
				//if(cur_task->scheduled_time>0x01000000){
					//print_task_queue();
					//printf("ERROR! Scheduled time waaay in the future.\r\n");
				//}
		
				cur_task->next=NULL;
    4fbc:	1c 86       	std	Y+12, r1	; 0x0c
    4fbe:	1d 86       	std	Y+13, r1	; 0x0d
				num_tasks--;
    4fc0:	80 91 dc 2d 	lds	r24, 0x2DDC
    4fc4:	81 50       	subi	r24, 0x01	; 1
    4fc6:	80 93 dc 2d 	sts	0x2DDC, r24
				add_task_to_list(cur_task);
    4fca:	ce 01       	movw	r24, r28
    4fcc:	7d dd       	rcall	.-1286   	; 0x4ac8 <add_task_to_list>
    4fce:	55 c0       	rjmp	.+170    	; 0x507a <run_tasks+0x116>

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4fd0:	80 91 aa 30 	lds	r24, 0x30AA
    4fd4:	90 e0       	ldi	r25, 0x00	; 0
    4fd6:	9c 01       	movw	r18, r24
    4fd8:	22 0f       	add	r18, r18
    4fda:	33 1f       	adc	r19, r19
    4fdc:	a9 01       	movw	r20, r18
    4fde:	44 0f       	add	r20, r20
    4fe0:	55 1f       	adc	r21, r21
    4fe2:	44 0f       	add	r20, r20
    4fe4:	55 1f       	adc	r21, r21
    4fe6:	44 0f       	add	r20, r20
    4fe8:	55 1f       	adc	r21, r21
    4fea:	ba 01       	movw	r22, r20
    4fec:	62 1b       	sub	r22, r18
    4fee:	73 0b       	sbc	r23, r19
    4ff0:	9b 01       	movw	r18, r22
    4ff2:	25 55       	subi	r18, 0x55	; 85
    4ff4:	3f 4c       	sbci	r19, 0xCF	; 207
    4ff6:	c2 17       	cp	r28, r18
    4ff8:	d3 07       	cpc	r29, r19
    4ffa:	09 f5       	brne	.+66     	; 0x503e <run_tasks+0xda>
		{
			task_storage_arr[tmp].task_function = NULL;
    4ffc:	9c 01       	movw	r18, r24
    4ffe:	22 0f       	add	r18, r18
    5000:	33 1f       	adc	r19, r19
    5002:	f9 01       	movw	r30, r18
    5004:	ee 0f       	add	r30, r30
    5006:	ff 1f       	adc	r31, r31
    5008:	ee 0f       	add	r30, r30
    500a:	ff 1f       	adc	r31, r31
    500c:	ee 0f       	add	r30, r30
    500e:	ff 1f       	adc	r31, r31
    5010:	e2 1b       	sub	r30, r18
    5012:	f3 0b       	sbc	r31, r19
    5014:	e5 55       	subi	r30, 0x55	; 85
    5016:	ff 4c       	sbci	r31, 0xCF	; 207
    5018:	10 86       	std	Z+8, r1	; 0x08
    501a:	11 86       	std	Z+9, r1	; 0x09
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    501c:	07 96       	adiw	r24, 0x07	; 7
    501e:	87 70       	andi	r24, 0x07	; 7
    5020:	90 78       	andi	r25, 0x80	; 128
    5022:	99 23       	and	r25, r25
    5024:	24 f4       	brge	.+8      	; 0x502e <run_tasks+0xca>
    5026:	01 97       	sbiw	r24, 0x01	; 1
    5028:	88 6f       	ori	r24, 0xF8	; 248
    502a:	9f 6f       	ori	r25, 0xFF	; 255
    502c:	01 96       	adiw	r24, 0x01	; 1
    502e:	80 93 aa 30 	sts	0x30AA, r24
			}
			else
			{
				scheduler_free(cur_task);
				cur_task = NULL;
				num_tasks--;
    5032:	80 91 dc 2d 	lds	r24, 0x2DDC
    5036:	81 50       	subi	r24, 0x01	; 1
    5038:	80 93 dc 2d 	sts	0x2DDC, r24
    503c:	1e c0       	rjmp	.+60     	; 0x507a <run_tasks+0x116>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    503e:	07 96       	adiw	r24, 0x07	; 7
    5040:	87 70       	andi	r24, 0x07	; 7
    5042:	90 78       	andi	r25, 0x80	; 128
    5044:	99 23       	and	r25, r25
    5046:	24 f4       	brge	.+8      	; 0x5050 <run_tasks+0xec>
    5048:	01 97       	sbiw	r24, 0x01	; 1
    504a:	88 6f       	ori	r24, 0xF8	; 248
    504c:	9f 6f       	ori	r25, 0xFF	; 255
    504e:	01 96       	adiw	r24, 0x01	; 1
	{
		if(&(task_storage_arr[tmp])==tgt)
    5050:	99 27       	eor	r25, r25
    5052:	9c 01       	movw	r18, r24
    5054:	22 0f       	add	r18, r18
    5056:	33 1f       	adc	r19, r19
    5058:	a9 01       	movw	r20, r18
    505a:	44 0f       	add	r20, r20
    505c:	55 1f       	adc	r21, r21
    505e:	44 0f       	add	r20, r20
    5060:	55 1f       	adc	r21, r21
    5062:	44 0f       	add	r20, r20
    5064:	55 1f       	adc	r21, r21
    5066:	ba 01       	movw	r22, r20
    5068:	62 1b       	sub	r22, r18
    506a:	73 0b       	sbc	r23, r19
    506c:	9b 01       	movw	r18, r22
    506e:	25 55       	subi	r18, 0x55	; 85
    5070:	3f 4c       	sbci	r19, 0xCF	; 207
    5072:	c2 17       	cp	r28, r18
    5074:	d3 07       	cpc	r29, r19
    5076:	19 f7       	brne	.-58     	; 0x503e <run_tasks+0xda>
    5078:	c1 cf       	rjmp	.-126    	; 0x4ffc <run_tasks+0x98>
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    507a:	e0 91 d3 2f 	lds	r30, 0x2FD3
    507e:	f0 91 d4 2f 	lds	r31, 0x2FD4
    5082:	30 97       	sbiw	r30, 0x00	; 0
    5084:	09 f4       	brne	.+2      	; 0x5088 <run_tasks+0x124>
    5086:	51 c0       	rjmp	.+162    	; 0x512a <run_tasks+0x1c6>
    5088:	c0 80       	ld	r12, Z
    508a:	d1 80       	ldd	r13, Z+1	; 0x01
    508c:	e2 80       	ldd	r14, Z+2	; 0x02
    508e:	f3 80       	ldd	r15, Z+3	; 0x03
    5090:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	02 96       	adiw	r24, 0x02	; 2
    509a:	a1 1d       	adc	r26, r1
    509c:	b1 1d       	adc	r27, r1
    509e:	8c 15       	cp	r24, r12
    50a0:	9d 05       	cpc	r25, r13
    50a2:	ae 05       	cpc	r26, r14
    50a4:	bf 05       	cpc	r27, r15
    50a6:	08 f0       	brcs	.+2      	; 0x50aa <run_tasks+0x146>
    50a8:	60 cf       	rjmp	.-320    	; 0x4f6a <run_tasks+0x6>
				cur_task = NULL;
				num_tasks--;
			}
		}
		//If the next task to be executed was in the past, do something???
		if (task_list != NULL && task_list_check()) task_list_cleanup();
    50aa:	e0 91 d3 2f 	lds	r30, 0x2FD3
    50ae:	f0 91 d4 2f 	lds	r31, 0x2FD4
    50b2:	30 97       	sbiw	r30, 0x00	; 0
    50b4:	d1 f1       	breq	.+116    	; 0x512a <run_tasks+0x1c6>
    50b6:	c0 80       	ld	r12, Z
    50b8:	d1 80       	ldd	r13, Z+1	; 0x01
    50ba:	e2 80       	ldd	r14, Z+2	; 0x02
    50bc:	f3 80       	ldd	r15, Z+3	; 0x03
    50be:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    50c2:	c6 16       	cp	r12, r22
    50c4:	d7 06       	cpc	r13, r23
    50c6:	e8 06       	cpc	r14, r24
    50c8:	f9 06       	cpc	r15, r25
    50ca:	10 f4       	brcc	.+4      	; 0x50d0 <run_tasks+0x16c>
    50cc:	dd dd       	rcall	.-1094   	; 0x4c88 <task_list_cleanup>
    50ce:	32 c0       	rjmp	.+100    	; 0x5134 <run_tasks+0x1d0>
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt		
		else if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    50d0:	e0 91 d3 2f 	lds	r30, 0x2FD3
    50d4:	f0 91 d4 2f 	lds	r31, 0x2FD4
    50d8:	30 97       	sbiw	r30, 0x00	; 0
    50da:	39 f1       	breq	.+78     	; 0x512a <run_tasks+0x1c6>
    50dc:	80 81       	ld	r24, Z
    50de:	91 81       	ldd	r25, Z+1	; 0x01
    50e0:	a2 81       	ldd	r26, Z+2	; 0x02
    50e2:	b3 81       	ldd	r27, Z+3	; 0x03
    50e4:	40 91 a1 2c 	lds	r20, 0x2CA1
    50e8:	50 91 a2 2c 	lds	r21, 0x2CA2
    50ec:	e0 e0       	ldi	r30, 0x00	; 0
    50ee:	f4 e0       	ldi	r31, 0x04	; 4
    50f0:	c2 84       	ldd	r12, Z+10	; 0x0a
    50f2:	d3 84       	ldd	r13, Z+11	; 0x0b
    50f4:	60 e0       	ldi	r22, 0x00	; 0
    50f6:	70 e0       	ldi	r23, 0x00	; 0
    50f8:	ba 01       	movw	r22, r20
    50fa:	55 27       	eor	r21, r21
    50fc:	44 27       	eor	r20, r20
    50fe:	e1 2c       	mov	r14, r1
    5100:	f1 2c       	mov	r15, r1
    5102:	4c 29       	or	r20, r12
    5104:	5d 29       	or	r21, r13
    5106:	6e 29       	or	r22, r14
    5108:	7f 29       	or	r23, r15
    510a:	48 17       	cp	r20, r24
    510c:	59 07       	cpc	r21, r25
    510e:	6a 07       	cpc	r22, r26
    5110:	7b 07       	cpc	r23, r27
    5112:	58 f0       	brcs	.+22     	; 0x512a <run_tasks+0x1c6>
		{	
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    5114:	21 81       	ldd	r18, Z+1	; 0x01
    5116:	20 fd       	sbrc	r18, 0
    5118:	fd cf       	rjmp	.-6      	; 0x5114 <run_tasks+0x1b0>
			RTC.COMP = (uint16_t)(task_list->scheduled_time);
    511a:	e0 e0       	ldi	r30, 0x00	; 0
    511c:	f4 e0       	ldi	r31, 0x04	; 4
    511e:	84 87       	std	Z+12, r24	; 0x0c
    5120:	95 87       	std	Z+13, r25	; 0x0d
			RTC.INTCTRL |= RTC_COMPINTLVL_MED_gc;
    5122:	82 81       	ldd	r24, Z+2	; 0x02
    5124:	88 60       	ori	r24, 0x08	; 8
    5126:	82 83       	std	Z+2, r24	; 0x02
    5128:	05 c0       	rjmp	.+10     	; 0x5134 <run_tasks+0x1d0>
		}
		else
		{
			RTC.INTCTRL &= ~RTC_COMPINTLVL_MED_gc;
    512a:	e0 e0       	ldi	r30, 0x00	; 0
    512c:	f4 e0       	ldi	r31, 0x04	; 4
    512e:	82 81       	ldd	r24, Z+2	; 0x02
    5130:	87 7f       	andi	r24, 0xF7	; 247
    5132:	82 83       	std	Z+2, r24	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5134:	1f bf       	out	0x3f, r17	; 63
	}
	
	// Jump to the code that restores the registers to the state they were in
	// before the RTC interrupt.  Program control will return to where it was before the interrupt
	// on return from restore_registers
	asm("jmp restore_registers");	 // must include scheduler_asm.c in the project
    5136:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <restore_registers>

0000513a <__vector_10>:
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect )
{
    513a:	1f 92       	push	r1
    513c:	0f 92       	push	r0
    513e:	0f b6       	in	r0, 0x3f	; 63
    5140:	0f 92       	push	r0
    5142:	11 24       	eor	r1, r1
    5144:	0b b6       	in	r0, 0x3b	; 59
    5146:	0f 92       	push	r0
    5148:	cf 92       	push	r12
    514a:	df 92       	push	r13
    514c:	ef 92       	push	r14
    514e:	ff 92       	push	r15
    5150:	2f 93       	push	r18
    5152:	3f 93       	push	r19
    5154:	4f 93       	push	r20
    5156:	5f 93       	push	r21
    5158:	6f 93       	push	r22
    515a:	7f 93       	push	r23
    515c:	8f 93       	push	r24
    515e:	9f 93       	push	r25
    5160:	af 93       	push	r26
    5162:	bf 93       	push	r27
    5164:	cf 93       	push	r28
    5166:	ef 93       	push	r30
    5168:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    516a:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    516c:	f8 94       	cli
	{
		rtc_epoch++;
    516e:	80 91 a1 2c 	lds	r24, 0x2CA1
    5172:	90 91 a2 2c 	lds	r25, 0x2CA2
    5176:	01 96       	adiw	r24, 0x01	; 1
    5178:	80 93 a1 2c 	sts	0x2CA1, r24
    517c:	90 93 a2 2c 	sts	0x2CA2, r25
		//printf("RTC Overflow. Current time %u\n", get_time());
		//print_task_queue();

		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    5180:	e0 91 d3 2f 	lds	r30, 0x2FD3
    5184:	f0 91 d4 2f 	lds	r31, 0x2FD4
    5188:	30 97       	sbiw	r30, 0x00	; 0
    518a:	09 f4       	brne	.+2      	; 0x518e <__vector_10+0x54>
    518c:	50 c0       	rjmp	.+160    	; 0x522e <__vector_10+0xf4>
    518e:	c0 80       	ld	r12, Z
    5190:	d1 80       	ldd	r13, Z+1	; 0x01
    5192:	e2 80       	ldd	r14, Z+2	; 0x02
    5194:	f3 80       	ldd	r15, Z+3	; 0x03
    5196:	80 91 a1 2c 	lds	r24, 0x2CA1
    519a:	90 91 a2 2c 	lds	r25, 0x2CA2
    519e:	e0 e0       	ldi	r30, 0x00	; 0
    51a0:	f4 e0       	ldi	r31, 0x04	; 4
    51a2:	42 85       	ldd	r20, Z+10	; 0x0a
    51a4:	53 85       	ldd	r21, Z+11	; 0x0b
    51a6:	a0 e0       	ldi	r26, 0x00	; 0
    51a8:	b0 e0       	ldi	r27, 0x00	; 0
    51aa:	dc 01       	movw	r26, r24
    51ac:	99 27       	eor	r25, r25
    51ae:	88 27       	eor	r24, r24
    51b0:	60 e0       	ldi	r22, 0x00	; 0
    51b2:	70 e0       	ldi	r23, 0x00	; 0
    51b4:	84 2b       	or	r24, r20
    51b6:	95 2b       	or	r25, r21
    51b8:	a6 2b       	or	r26, r22
    51ba:	b7 2b       	or	r27, r23
    51bc:	c8 16       	cp	r12, r24
    51be:	d9 06       	cpc	r13, r25
    51c0:	ea 06       	cpc	r14, r26
    51c2:	fb 06       	cpc	r15, r27
    51c4:	a0 f5       	brcc	.+104    	; 0x522e <__vector_10+0xf4>
    51c6:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
		{
			//The next task should have already happened! Lets do it now.
			if(task_list_check()) task_list_cleanup();
    51ca:	c6 16       	cp	r12, r22
    51cc:	d7 06       	cpc	r13, r23
    51ce:	e8 06       	cpc	r14, r24
    51d0:	f9 06       	cpc	r15, r25
    51d2:	10 f4       	brcc	.+4      	; 0x51d8 <__vector_10+0x9e>
    51d4:	59 dd       	rcall	.-1358   	; 0x4c88 <task_list_cleanup>
    51d6:	2b c0       	rjmp	.+86     	; 0x522e <__vector_10+0xf4>
			// updating RTC.COMP takes 2 RTC clock cycles, so only update the compare value and
			// interrupt if the scheduled_time is more than 2ms away
			else if (task_list->scheduled_time > get_time() + 2)
    51d8:	e0 91 d3 2f 	lds	r30, 0x2FD3
    51dc:	f0 91 d4 2f 	lds	r31, 0x2FD4
    51e0:	c0 80       	ld	r12, Z
    51e2:	d1 80       	ldd	r13, Z+1	; 0x01
    51e4:	e2 80       	ldd	r14, Z+2	; 0x02
    51e6:	f3 80       	ldd	r15, Z+3	; 0x03
    51e8:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    51ec:	dc 01       	movw	r26, r24
    51ee:	cb 01       	movw	r24, r22
    51f0:	02 96       	adiw	r24, 0x02	; 2
    51f2:	a1 1d       	adc	r26, r1
    51f4:	b1 1d       	adc	r27, r1
    51f6:	8c 15       	cp	r24, r12
    51f8:	9d 05       	cpc	r25, r13
    51fa:	ae 05       	cpc	r26, r14
    51fc:	bf 05       	cpc	r27, r15
    51fe:	98 f4       	brcc	.+38     	; 0x5226 <__vector_10+0xec>
			{
				while (RTC.STATUS & RTC_SYNCBUSY_bm);
    5200:	e0 e0       	ldi	r30, 0x00	; 0
    5202:	f4 e0       	ldi	r31, 0x04	; 4
    5204:	81 81       	ldd	r24, Z+1	; 0x01
    5206:	80 fd       	sbrc	r24, 0
    5208:	fd cf       	rjmp	.-6      	; 0x5204 <__vector_10+0xca>
				RTC.COMP = (uint16_t)(task_list->scheduled_time);
    520a:	e0 91 d3 2f 	lds	r30, 0x2FD3
    520e:	f0 91 d4 2f 	lds	r31, 0x2FD4
    5212:	80 81       	ld	r24, Z
    5214:	91 81       	ldd	r25, Z+1	; 0x01
    5216:	e0 e0       	ldi	r30, 0x00	; 0
    5218:	f4 e0       	ldi	r31, 0x04	; 4
    521a:	84 87       	std	Z+12, r24	; 0x0c
    521c:	95 87       	std	Z+13, r25	; 0x0d
				RTC.INTCTRL |= RTC_COMPINTLVL_MED_gc;
    521e:	82 81       	ldd	r24, Z+2	; 0x02
    5220:	88 60       	ori	r24, 0x08	; 8
    5222:	82 83       	std	Z+2, r24	; 0x02
				return; // return from ISR
    5224:	02 c0       	rjmp	.+4      	; 0x522a <__vector_10+0xf0>
			// If we get here, that means there's a task to execute in less than 2ms.  Jump to the ISR
			// to handle that.
			else
			{
				//RTC.INTFLAGS |= RTC_COMPIF_bm;
				asm("jmp rtc_compare_isr"); // must include scheduler_asm.S in the project
    5226:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_11>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    522a:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
    522c:	01 c0       	rjmp	.+2      	; 0x5230 <__vector_10+0xf6>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    522e:	cf bf       	out	0x3f, r28	; 63
				return;
			}
		}
	}
    5230:	ff 91       	pop	r31
    5232:	ef 91       	pop	r30
    5234:	cf 91       	pop	r28
    5236:	bf 91       	pop	r27
    5238:	af 91       	pop	r26
    523a:	9f 91       	pop	r25
    523c:	8f 91       	pop	r24
    523e:	7f 91       	pop	r23
    5240:	6f 91       	pop	r22
    5242:	5f 91       	pop	r21
    5244:	4f 91       	pop	r20
    5246:	3f 91       	pop	r19
    5248:	2f 91       	pop	r18
    524a:	ff 90       	pop	r15
    524c:	ef 90       	pop	r14
    524e:	df 90       	pop	r13
    5250:	cf 90       	pop	r12
    5252:	0f 90       	pop	r0
    5254:	0b be       	out	0x3b, r0	; 59
    5256:	0f 90       	pop	r0
    5258:	0f be       	out	0x3f, r0	; 63
    525a:	0f 90       	pop	r0
    525c:	1f 90       	pop	r1
    525e:	18 95       	reti

00005260 <send_id>:
{
	printf("My ID is: %04X\r\n",get_droplet_id());
}

void send_id()
{
    5260:	08 95       	ret

00005262 <collect_rnb_data_wrapper>:

// This function is used so we can make a transparent call to collect_rnb_data with 
// multiple arguments, but still leave the interrupt handler.
void collect_rnb_data_wrapper(void* arg)
{
	uint32_t wrapper_arg = *((uint32_t*)arg);
    5262:	fc 01       	movw	r30, r24
    5264:	80 81       	ld	r24, Z
    5266:	91 81       	ldd	r25, Z+1	; 0x01
    5268:	a2 81       	ldd	r26, Z+2	; 0x02
    526a:	b3 81       	ldd	r27, Z+3	; 0x03
	uint16_t id_val = (wrapper_arg&0xFFFF);
	uint8_t power_val = ((wrapper_arg>>16)&0xFF);
    526c:	ad 01       	movw	r20, r26
    526e:	66 27       	eor	r22, r22
    5270:	77 27       	eor	r23, r23
	collect_rnb_data(id_val, power_val);
    5272:	64 2f       	mov	r22, r20
    5274:	0c 94 12 20 	jmp	0x4024	; 0x4024 <collect_rnb_data>
    5278:	08 95       	ret

0000527a <handle_check_collisions>:
		else														printf("\tCommand ( %s ) not recognized.\r\n",command_word);
	}
}

void handle_check_collisions()
{
    527a:	ef 92       	push	r14
    527c:	ff 92       	push	r15
    527e:	0f 93       	push	r16
    5280:	1f 93       	push	r17
    5282:	cf 93       	push	r28
    5284:	df 93       	push	r29
	uint8_t dirs = check_collisions();
    5286:	0e 94 a8 10 	call	0x2150	; 0x2150 <check_collisions>
    528a:	c0 e0       	ldi	r28, 0x00	; 0
    528c:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t found=0;
    528e:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    5290:	08 2f       	mov	r16, r24
    5292:	10 e0       	ldi	r17, 0x00	; 0
			found=1;
			printf("%hhu",i);
    5294:	0f 2e       	mov	r0, r31
    5296:	f8 e6       	ldi	r31, 0x68	; 104
    5298:	ef 2e       	mov	r14, r31
    529a:	f5 e2       	ldi	r31, 0x25	; 37
    529c:	ff 2e       	mov	r15, r31
    529e:	f0 2d       	mov	r31, r0
void handle_check_collisions()
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    52a0:	98 01       	movw	r18, r16
    52a2:	0c 2e       	mov	r0, r28
    52a4:	02 c0       	rjmp	.+4      	; 0x52aa <handle_check_collisions+0x30>
    52a6:	35 95       	asr	r19
    52a8:	27 95       	ror	r18
    52aa:	0a 94       	dec	r0
    52ac:	e2 f7       	brpl	.-8      	; 0x52a6 <handle_check_collisions+0x2c>
    52ae:	20 ff       	sbrs	r18, 0
    52b0:	0b c0       	rjmp	.+22     	; 0x52c8 <handle_check_collisions+0x4e>
			found=1;
			printf("%hhu",i);
    52b2:	df 93       	push	r29
    52b4:	cf 93       	push	r28
    52b6:	ff 92       	push	r15
    52b8:	ef 92       	push	r14
    52ba:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    52be:	0f 90       	pop	r0
    52c0:	0f 90       	pop	r0
    52c2:	0f 90       	pop	r0
    52c4:	0f 90       	pop	r0
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    52c6:	91 e0       	ldi	r25, 0x01	; 1
    52c8:	21 96       	adiw	r28, 0x01	; 1

void handle_check_collisions()
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    52ca:	c6 30       	cpi	r28, 0x06	; 6
    52cc:	d1 05       	cpc	r29, r1
    52ce:	41 f7       	brne	.-48     	; 0x52a0 <handle_check_collisions+0x26>
		if(dirs&(1<<i)){
			found=1;
			printf("%hhu",i);
		}
	}
	if(!found) printf("None");
    52d0:	91 11       	cpse	r25, r1
    52d2:	08 c0       	rjmp	.+16     	; 0x52e4 <handle_check_collisions+0x6a>
    52d4:	8d e6       	ldi	r24, 0x6D	; 109
    52d6:	95 e2       	ldi	r25, 0x25	; 37
    52d8:	9f 93       	push	r25
    52da:	8f 93       	push	r24
    52dc:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    52e0:	0f 90       	pop	r0
    52e2:	0f 90       	pop	r0
	printf("\r\n");
    52e4:	8f e6       	ldi	r24, 0x6F	; 111
    52e6:	9c e2       	ldi	r25, 0x2C	; 44
    52e8:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
}
    52ec:	df 91       	pop	r29
    52ee:	cf 91       	pop	r28
    52f0:	1f 91       	pop	r17
    52f2:	0f 91       	pop	r16
    52f4:	ff 90       	pop	r15
    52f6:	ef 90       	pop	r14
    52f8:	08 95       	ret

000052fa <handle_move_steps>:

void handle_move_steps(char* command_args)
{
    52fa:	ff 92       	push	r15
    52fc:	0f 93       	push	r16
    52fe:	1f 93       	push	r17
    5300:	cf 93       	push	r28
    5302:	df 93       	push	r29
    5304:	1f 92       	push	r1
    5306:	1f 92       	push	r1
    5308:	cd b7       	in	r28, 0x3d	; 61
    530a:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    530c:	20 e2       	ldi	r18, 0x20	; 32
    530e:	30 e0       	ldi	r19, 0x00	; 0
    5310:	29 83       	std	Y+1, r18	; 0x01
    5312:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5314:	be 01       	movw	r22, r28
    5316:	6f 5f       	subi	r22, 0xFF	; 255
    5318:	7f 4f       	sbci	r23, 0xFF	; 255
    531a:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	uint8_t direction = token[0]-'0';
    531e:	fc 01       	movw	r30, r24
    5320:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    5322:	be 01       	movw	r22, r28
    5324:	6f 5f       	subi	r22, 0xFF	; 255
    5326:	7f 4f       	sbci	r23, 0xFF	; 255
    5328:	80 e0       	ldi	r24, 0x00	; 0
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    5330:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    5334:	8c 01       	movw	r16, r24
	if (num_steps > 0)
    5336:	00 97       	sbiw	r24, 0x00	; 0
    5338:	01 f1       	breq	.+64     	; 0x537a <handle_move_steps+0x80>
void handle_move_steps(char* command_args)
{
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    533a:	f0 ed       	ldi	r31, 0xD0	; 208
    533c:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0)
	{
		set_rgb(0,0,200);		
    533e:	48 ec       	ldi	r20, 0xC8	; 200
    5340:	60 e0       	ldi	r22, 0x00	; 0
    5342:	80 e0       	ldi	r24, 0x00	; 0
    5344:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
		printf("walk direction %u, num_steps %u\r\n", direction, num_steps);	
    5348:	1f 93       	push	r17
    534a:	0f 93       	push	r16
    534c:	1f 92       	push	r1
    534e:	ff 92       	push	r15
    5350:	22 e7       	ldi	r18, 0x72	; 114
    5352:	35 e2       	ldi	r19, 0x25	; 37
    5354:	3f 93       	push	r19
    5356:	2f 93       	push	r18
    5358:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
		move_steps(direction, num_steps);
    535c:	b8 01       	movw	r22, r16
    535e:	8f 2d       	mov	r24, r15
    5360:	0e 94 e6 11 	call	0x23cc	; 0x23cc <move_steps>
		set_rgb(0,0,0);
    5364:	40 e0       	ldi	r20, 0x00	; 0
    5366:	60 e0       	ldi	r22, 0x00	; 0
    5368:	80 e0       	ldi	r24, 0x00	; 0
    536a:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    536e:	0f 90       	pop	r0
    5370:	0f 90       	pop	r0
    5372:	0f 90       	pop	r0
    5374:	0f 90       	pop	r0
    5376:	0f 90       	pop	r0
    5378:	0f 90       	pop	r0
	}	
}	
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	df 91       	pop	r29
    5380:	cf 91       	pop	r28
    5382:	1f 91       	pop	r17
    5384:	0f 91       	pop	r16
    5386:	ff 90       	pop	r15
    5388:	08 95       	ret

0000538a <handle_walk>:

void handle_walk(char* command_args)
{	
    538a:	1f 93       	push	r17
    538c:	cf 93       	push	r28
    538e:	df 93       	push	r29
    5390:	1f 92       	push	r1
    5392:	1f 92       	push	r1
    5394:	cd b7       	in	r28, 0x3d	; 61
    5396:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5398:	20 e2       	ldi	r18, 0x20	; 32
    539a:	30 e0       	ldi	r19, 0x00	; 0
    539c:	29 83       	std	Y+1, r18	; 0x01
    539e:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    53a0:	be 01       	movw	r22, r28
    53a2:	6f 5f       	subi	r22, 0xFF	; 255
    53a4:	7f 4f       	sbci	r23, 0xFF	; 255
    53a6:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	uint8_t direction = token[0]-'0';
    53aa:	fc 01       	movw	r30, r24
    53ac:	10 81       	ld	r17, Z
    53ae:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    53b0:	be 01       	movw	r22, r28
    53b2:	6f 5f       	subi	r22, 0xFF	; 255
    53b4:	7f 4f       	sbci	r23, 0xFF	; 255
    53b6:	80 e0       	ldi	r24, 0x00	; 0
    53b8:	90 e0       	ldi	r25, 0x00	; 0
    53ba:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    53be:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    53c2:	bc 01       	movw	r22, r24
	
	walk(direction, distance_mm);
    53c4:	81 2f       	mov	r24, r17
    53c6:	0e 94 a1 13 	call	0x2742	; 0x2742 <walk>
}
    53ca:	0f 90       	pop	r0
    53cc:	0f 90       	pop	r0
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	1f 91       	pop	r17
    53d4:	08 95       	ret

000053d6 <handle_get_rgb>:

void handle_get_rgb()
{
    53d6:	cf 93       	push	r28
    53d8:	df 93       	push	r29
    53da:	00 d0       	rcall	.+0      	; 0x53dc <handle_get_rgb+0x6>
    53dc:	cd b7       	in	r28, 0x3d	; 61
    53de:	de b7       	in	r29, 0x3e	; 62
	uint8_t r, g, b;
	get_rgb_sensors(&r, &g, &b);
    53e0:	ae 01       	movw	r20, r28
    53e2:	4d 5f       	subi	r20, 0xFD	; 253
    53e4:	5f 4f       	sbci	r21, 0xFF	; 255
    53e6:	be 01       	movw	r22, r28
    53e8:	6e 5f       	subi	r22, 0xFE	; 254
    53ea:	7f 4f       	sbci	r23, 0xFF	; 255
    53ec:	ce 01       	movw	r24, r28
    53ee:	01 96       	adiw	r24, 0x01	; 1
    53f0:	53 d9       	rcall	.-3418   	; 0x4698 <get_rgb_sensors>
	printf("r: %hu, g: %hu, b: %hu\r\n", r, g, b);
    53f2:	8b 81       	ldd	r24, Y+3	; 0x03
    53f4:	1f 92       	push	r1
    53f6:	8f 93       	push	r24
    53f8:	8a 81       	ldd	r24, Y+2	; 0x02
    53fa:	1f 92       	push	r1
    53fc:	8f 93       	push	r24
    53fe:	89 81       	ldd	r24, Y+1	; 0x01
    5400:	1f 92       	push	r1
    5402:	8f 93       	push	r24
    5404:	84 e9       	ldi	r24, 0x94	; 148
    5406:	95 e2       	ldi	r25, 0x25	; 37
    5408:	9f 93       	push	r25
    540a:	8f 93       	push	r24
    540c:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    5410:	cd bf       	out	0x3d, r28	; 61
    5412:	de bf       	out	0x3e, r29	; 62
}
    5414:	23 96       	adiw	r28, 0x03	; 3
    5416:	cd bf       	out	0x3d, r28	; 61
    5418:	de bf       	out	0x3e, r29	; 62
    541a:	df 91       	pop	r29
    541c:	cf 91       	pop	r28
    541e:	08 95       	ret

00005420 <handle_set_ir>:

void handle_set_ir(char* command_args)
{
    5420:	cf 93       	push	r28
    5422:	df 93       	push	r29
    5424:	1f 92       	push	r1
    5426:	1f 92       	push	r1
    5428:	cd b7       	in	r28, 0x3d	; 61
    542a:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    542c:	20 e2       	ldi	r18, 0x20	; 32
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	29 83       	std	Y+1, r18	; 0x01
    5432:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5434:	be 01       	movw	r22, r28
    5436:	6f 5f       	subi	r22, 0xFF	; 255
    5438:	7f 4f       	sbci	r23, 0xFF	; 255
    543a:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    543e:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
	
	set_all_ir_powers(ir_val);
    5442:	0e 94 b8 04 	call	0x970	; 0x970 <set_all_ir_powers>
}
    5446:	0f 90       	pop	r0
    5448:	0f 90       	pop	r0
    544a:	df 91       	pop	r29
    544c:	cf 91       	pop	r28
    544e:	08 95       	ret

00005450 <handle_stop_walk>:

void handle_stop_walk()
{
	set_rgb(180,0,0);
    5450:	40 e0       	ldi	r20, 0x00	; 0
    5452:	60 e0       	ldi	r22, 0x00	; 0
    5454:	84 eb       	ldi	r24, 0xB4	; 180
    5456:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
	stop(0);
    545a:	80 e0       	ldi	r24, 0x00	; 0
    545c:	90 e0       	ldi	r25, 0x00	; 0
    545e:	0e 94 b7 11 	call	0x236e	; 0x236e <stop>
	set_rgb(0,0,0);
    5462:	40 e0       	ldi	r20, 0x00	; 0
    5464:	60 e0       	ldi	r22, 0x00	; 0
    5466:	80 e0       	ldi	r24, 0x00	; 0
    5468:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <set_rgb>
    546c:	08 95       	ret

0000546e <handle_set_motors>:
	//
	//theta = val;
//}

void handle_set_motors(char* command_args)
{	
    546e:	0f 93       	push	r16
    5470:	1f 93       	push	r17
    5472:	cf 93       	push	r28
    5474:	df 93       	push	r29
    5476:	1f 92       	push	r1
    5478:	1f 92       	push	r1
    547a:	cd b7       	in	r28, 0x3d	; 61
    547c:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    547e:	20 e2       	ldi	r18, 0x20	; 32
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	29 83       	std	Y+1, r18	; 0x01
    5484:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5486:	be 01       	movw	r22, r28
    5488:	6f 5f       	subi	r22, 0xFF	; 255
    548a:	7f 4f       	sbci	r23, 0xFF	; 255
    548c:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	if(token==NULL){ printf("strtok returned NULL on direction.\r\n"); return;}
    5490:	00 97       	sbiw	r24, 0x00	; 0
    5492:	29 f4       	brne	.+10     	; 0x549e <handle_set_motors+0x30>
    5494:	8d ea       	ldi	r24, 0xAD	; 173
    5496:	95 e2       	ldi	r25, 0x25	; 37
    5498:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    549c:	79 c0       	rjmp	.+242    	; 0x5590 <handle_set_motors+0x122>
	uint8_t direction = atoi(token);
    549e:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    54a2:	8c 01       	movw	r16, r24
	if(direction> 7){ printf("Bad direction. Got: %hhu.\r\n", direction); return;}
    54a4:	88 30       	cpi	r24, 0x08	; 8
    54a6:	70 f0       	brcs	.+28     	; 0x54c4 <handle_set_motors+0x56>
    54a8:	11 27       	eor	r17, r17
    54aa:	1f 93       	push	r17
    54ac:	0f 93       	push	r16
    54ae:	81 ed       	ldi	r24, 0xD1	; 209
    54b0:	95 e2       	ldi	r25, 0x25	; 37
    54b2:	9f 93       	push	r25
    54b4:	8f 93       	push	r24
    54b6:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    54ba:	0f 90       	pop	r0
    54bc:	0f 90       	pop	r0
    54be:	0f 90       	pop	r0
    54c0:	0f 90       	pop	r0
    54c2:	66 c0       	rjmp	.+204    	; 0x5590 <handle_set_motors+0x122>

	token = strtok(NULL,delim);
    54c4:	be 01       	movw	r22, r28
    54c6:	6f 5f       	subi	r22, 0xFF	; 255
    54c8:	7f 4f       	sbci	r23, 0xFF	; 255
    54ca:	80 e0       	ldi	r24, 0x00	; 0
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	if(token==NULL){ printf("strtok returned NULL on first val.\r\n"); return;}	
    54d2:	00 97       	sbiw	r24, 0x00	; 0
    54d4:	29 f4       	brne	.+10     	; 0x54e0 <handle_set_motors+0x72>
    54d6:	8d ee       	ldi	r24, 0xED	; 237
    54d8:	95 e2       	ldi	r25, 0x25	; 37
    54da:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    54de:	58 c0       	rjmp	.+176    	; 0x5590 <handle_set_motors+0x122>
	motor_adjusts[direction][0] = atoi(token);
    54e0:	11 27       	eor	r17, r17
    54e2:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    54e6:	f8 01       	movw	r30, r16
    54e8:	ee 0f       	add	r30, r30
    54ea:	ff 1f       	adc	r31, r31
    54ec:	e0 0f       	add	r30, r16
    54ee:	f1 1f       	adc	r31, r17
    54f0:	ee 0f       	add	r30, r30
    54f2:	ff 1f       	adc	r31, r31
    54f4:	e5 56       	subi	r30, 0x65	; 101
    54f6:	f0 4d       	sbci	r31, 0xD0	; 208
    54f8:	80 83       	st	Z, r24
    54fa:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    54fc:	be 01       	movw	r22, r28
    54fe:	6f 5f       	subi	r22, 0xFF	; 255
    5500:	7f 4f       	sbci	r23, 0xFF	; 255
    5502:	80 e0       	ldi	r24, 0x00	; 0
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	if(token==NULL){ printf("strtok returned NULL on second val.\r\n"); return;}
    550a:	00 97       	sbiw	r24, 0x00	; 0
    550c:	29 f4       	brne	.+10     	; 0x5518 <handle_set_motors+0xaa>
    550e:	81 e1       	ldi	r24, 0x11	; 17
    5510:	96 e2       	ldi	r25, 0x26	; 38
    5512:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    5516:	3c c0       	rjmp	.+120    	; 0x5590 <handle_set_motors+0x122>
	motor_adjusts[direction][1] = atoi(token);
    5518:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    551c:	f8 01       	movw	r30, r16
    551e:	ee 0f       	add	r30, r30
    5520:	ff 1f       	adc	r31, r31
    5522:	e0 0f       	add	r30, r16
    5524:	f1 1f       	adc	r31, r17
    5526:	ee 0f       	add	r30, r30
    5528:	ff 1f       	adc	r31, r31
    552a:	e5 56       	subi	r30, 0x65	; 101
    552c:	f0 4d       	sbci	r31, 0xD0	; 208
    552e:	82 83       	std	Z+2, r24	; 0x02
    5530:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    5532:	be 01       	movw	r22, r28
    5534:	6f 5f       	subi	r22, 0xFF	; 255
    5536:	7f 4f       	sbci	r23, 0xFF	; 255
    5538:	80 e0       	ldi	r24, 0x00	; 0
    553a:	90 e0       	ldi	r25, 0x00	; 0
    553c:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	if(token==NULL){ printf("strtok returned NULL on third val.\r\n"); return;}
    5540:	00 97       	sbiw	r24, 0x00	; 0
    5542:	29 f4       	brne	.+10     	; 0x554e <handle_set_motors+0xe0>
    5544:	86 e3       	ldi	r24, 0x36	; 54
    5546:	96 e2       	ldi	r25, 0x26	; 38
    5548:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    554c:	21 c0       	rjmp	.+66     	; 0x5590 <handle_set_motors+0x122>
	motor_adjusts[direction][2] = atoi(token);	
    554e:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    5552:	f8 01       	movw	r30, r16
    5554:	ee 0f       	add	r30, r30
    5556:	ff 1f       	adc	r31, r31
    5558:	e0 0f       	add	r30, r16
    555a:	f1 1f       	adc	r31, r17
    555c:	ee 0f       	add	r30, r30
    555e:	ff 1f       	adc	r31, r31
    5560:	e5 56       	subi	r30, 0x65	; 101
    5562:	f0 4d       	sbci	r31, 0xD0	; 208
    5564:	84 83       	std	Z+4, r24	; 0x04
    5566:	95 83       	std	Z+5, r25	; 0x05

	printf("Got set_motors command. direction: %hhu, vals: (%d, %d, %d)\r\n", direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    5568:	9f 93       	push	r25
    556a:	8f 93       	push	r24
    556c:	83 81       	ldd	r24, Z+3	; 0x03
    556e:	8f 93       	push	r24
    5570:	82 81       	ldd	r24, Z+2	; 0x02
    5572:	8f 93       	push	r24
    5574:	81 81       	ldd	r24, Z+1	; 0x01
    5576:	8f 93       	push	r24
    5578:	80 81       	ld	r24, Z
    557a:	8f 93       	push	r24
    557c:	1f 93       	push	r17
    557e:	0f 93       	push	r16
    5580:	8a e5       	ldi	r24, 0x5A	; 90
    5582:	96 e2       	ldi	r25, 0x26	; 38
    5584:	9f 93       	push	r25
    5586:	8f 93       	push	r24
    5588:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    558c:	cd bf       	out	0x3d, r28	; 61
    558e:	de bf       	out	0x3e, r29	; 62
}
    5590:	0f 90       	pop	r0
    5592:	0f 90       	pop	r0
    5594:	df 91       	pop	r29
    5596:	cf 91       	pop	r28
    5598:	1f 91       	pop	r17
    559a:	0f 91       	pop	r16
    559c:	08 95       	ret

0000559e <handle_set_mm_per_kilostep>:

void handle_set_mm_per_kilostep(char* command_args)
{
    559e:	1f 93       	push	r17
    55a0:	cf 93       	push	r28
    55a2:	df 93       	push	r29
    55a4:	1f 92       	push	r1
    55a6:	1f 92       	push	r1
    55a8:	cd b7       	in	r28, 0x3d	; 61
    55aa:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    55ac:	20 e2       	ldi	r18, 0x20	; 32
    55ae:	30 e0       	ldi	r19, 0x00	; 0
    55b0:	29 83       	std	Y+1, r18	; 0x01
    55b2:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    55b4:	be 01       	movw	r22, r28
    55b6:	6f 5f       	subi	r22, 0xFF	; 255
    55b8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ba:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	uint8_t direction = token[0]-'0';
    55be:	fc 01       	movw	r30, r24
    55c0:	10 81       	ld	r17, Z
    55c2:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    55c4:	be 01       	movw	r22, r28
    55c6:	6f 5f       	subi	r22, 0xFF	; 255
    55c8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ca:	80 e0       	ldi	r24, 0x00	; 0
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    55d2:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    55d6:	bc 01       	movw	r22, r24

	set_mm_per_kilostep(direction, mm_per_kilostep);
    55d8:	81 2f       	mov	r24, r17
    55da:	0e 94 ee 13 	call	0x27dc	; 0x27dc <set_mm_per_kilostep>
	
}
    55de:	0f 90       	pop	r0
    55e0:	0f 90       	pop	r0
    55e2:	df 91       	pop	r29
    55e4:	cf 91       	pop	r28
    55e6:	1f 91       	pop	r17
    55e8:	08 95       	ret

000055ea <handle_rnb_broadcast>:
/* This tells the droplet that it should tell other droplets nearby their rnb to it.
 * In other words, this tells nearby droplets to listen, and then performs an ir_range_blast.
 */
void handle_rnb_broadcast()
{
	schedule_task(5,broadcast_rnb_data,NULL);
    55ea:	20 e0       	ldi	r18, 0x00	; 0
    55ec:	30 e0       	ldi	r19, 0x00	; 0
    55ee:	40 e1       	ldi	r20, 0x10	; 16
    55f0:	5a e1       	ldi	r21, 0x1A	; 26
    55f2:	65 e0       	ldi	r22, 0x05	; 5
    55f4:	70 e0       	ldi	r23, 0x00	; 0
    55f6:	80 e0       	ldi	r24, 0x00	; 0
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	cd cb       	rjmp	.-2150   	; 0x4d96 <schedule_task>
    55fc:	08 95       	ret

000055fe <handle_rnb_collect>:

/* This tells the droplet that it should ask nearby droplets to do an 
 * ir_range_blast so it can learn their rnb.
 */
void handle_rnb_collect(char* command_args)
{
    55fe:	0f 93       	push	r16
    5600:	1f 93       	push	r17
    5602:	cf 93       	push	r28
    5604:	df 93       	push	r29
    5606:	00 d0       	rcall	.+0      	; 0x5608 <handle_rnb_collect+0xa>
    5608:	00 d0       	rcall	.+0      	; 0x560a <handle_rnb_collect+0xc>
    560a:	cd b7       	in	r28, 0x3d	; 61
    560c:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    560e:	20 e2       	ldi	r18, 0x20	; 32
    5610:	30 e0       	ldi	r19, 0x00	; 0
    5612:	29 83       	std	Y+1, r18	; 0x01
    5614:	3a 83       	std	Y+2, r19	; 0x02
		
	uint16_t id_val = atoi(strtok(command_args, delim));
    5616:	be 01       	movw	r22, r28
    5618:	6f 5f       	subi	r22, 0xFF	; 255
    561a:	7f 4f       	sbci	r23, 0xFF	; 255
    561c:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
    5620:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    5624:	8c 01       	movw	r16, r24
	uint8_t power_val = atoi(strtok(NULL, delim));
    5626:	be 01       	movw	r22, r28
    5628:	6f 5f       	subi	r22, 0xFF	; 255
    562a:	7f 4f       	sbci	r23, 0xFF	; 255
    562c:	80 e0       	ldi	r24, 0x00	; 0
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
    5634:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
	
	uint32_t wrapper_arg = (((uint32_t)id_val)|(((uint32_t)power_val)<<16));
    5638:	a8 01       	movw	r20, r16
    563a:	60 e0       	ldi	r22, 0x00	; 0
    563c:	70 e0       	ldi	r23, 0x00	; 0
    563e:	68 2b       	or	r22, r24
    5640:	4b 83       	std	Y+3, r20	; 0x03
    5642:	5c 83       	std	Y+4, r21	; 0x04
    5644:	6d 83       	std	Y+5, r22	; 0x05
    5646:	7e 83       	std	Y+6, r23	; 0x06
	schedule_task(5,collect_rnb_data_wrapper, (void*)&wrapper_arg);
    5648:	9e 01       	movw	r18, r28
    564a:	2d 5f       	subi	r18, 0xFD	; 253
    564c:	3f 4f       	sbci	r19, 0xFF	; 255
    564e:	41 e3       	ldi	r20, 0x31	; 49
    5650:	59 e2       	ldi	r21, 0x29	; 41
    5652:	65 e0       	ldi	r22, 0x05	; 5
    5654:	70 e0       	ldi	r23, 0x00	; 0
    5656:	80 e0       	ldi	r24, 0x00	; 0
    5658:	90 e0       	ldi	r25, 0x00	; 0
    565a:	9d db       	rcall	.-2246   	; 0x4d96 <schedule_task>
}
    565c:	26 96       	adiw	r28, 0x06	; 6
    565e:	cd bf       	out	0x3d, r28	; 61
    5660:	de bf       	out	0x3e, r29	; 62
    5662:	df 91       	pop	r29
    5664:	cf 91       	pop	r28
    5666:	1f 91       	pop	r17
    5668:	0f 91       	pop	r16
    566a:	08 95       	ret

0000566c <handle_rnb_transmit>:

/* This should only be called when another droplet asks this droplet 
 * to do an ir_range_blast (ie., by using handle_rnb_collect).
 */
void handle_rnb_transmit(char* command_args)
{
    566c:	0f 93       	push	r16
    566e:	1f 93       	push	r17
    5670:	cf 93       	push	r28
    5672:	df 93       	push	r29
    5674:	ec 01       	movw	r28, r24
	uint32_t time_since_arrival = (get_time()-cmd_arrival_time+6);
    5676:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    567a:	00 91 cb 2f 	lds	r16, 0x2FCB
    567e:	10 91 cc 2f 	lds	r17, 0x2FCC
    5682:	20 91 cd 2f 	lds	r18, 0x2FCD
    5686:	30 91 ce 2f 	lds	r19, 0x2FCE
    568a:	ab 01       	movw	r20, r22
    568c:	bc 01       	movw	r22, r24
    568e:	40 1b       	sub	r20, r16
    5690:	51 0b       	sbc	r21, r17
    5692:	62 0b       	sbc	r22, r18
    5694:	73 0b       	sbc	r23, r19
    5696:	4a 5f       	subi	r20, 0xFA	; 250
    5698:	5f 4f       	sbci	r21, 0xFF	; 255
    569a:	6f 4f       	sbci	r22, 0xFF	; 255
    569c:	7f 4f       	sbci	r23, 0xFF	; 255
	if(time_since_arrival<POST_MESSAGE_DELAY) delay_ms(POST_MESSAGE_DELAY - time_since_arrival);
    569e:	4d 35       	cpi	r20, 0x5D	; 93
    56a0:	51 05       	cpc	r21, r1
    56a2:	61 05       	cpc	r22, r1
    56a4:	71 05       	cpc	r23, r1
    56a6:	28 f4       	brcc	.+10     	; 0x56b2 <handle_rnb_transmit+0x46>
    56a8:	8d e5       	ldi	r24, 0x5D	; 93
    56aa:	90 e0       	ldi	r25, 0x00	; 0
    56ac:	84 1b       	sub	r24, r20
    56ae:	95 0b       	sbc	r25, r21
    56b0:	b3 d8       	rcall	.-3738   	; 0x4818 <delay_ms>
	uint16_t power = (uint16_t)command_args[0] + 2;
    56b2:	88 81       	ld	r24, Y
	ir_range_blast(power);
    56b4:	8e 5f       	subi	r24, 0xFE	; 254
    56b6:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <ir_range_blast>
}
    56ba:	df 91       	pop	r29
    56bc:	cf 91       	pop	r28
    56be:	1f 91       	pop	r17
    56c0:	0f 91       	pop	r16
    56c2:	08 95       	ret

000056c4 <handle_rnb_receive>:

/* This should only be called when another droplet is about to 
 * broadcast its rnb_data (ie., by using handle_rnb_broadcast()).
 */
void handle_rnb_receive()
{
    56c4:	0f 93       	push	r16
    56c6:	1f 93       	push	r17
	uint32_t time_since_arrival = (get_time()-cmd_arrival_time+5);
    56c8:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    56cc:	00 91 cb 2f 	lds	r16, 0x2FCB
    56d0:	10 91 cc 2f 	lds	r17, 0x2FCC
    56d4:	20 91 cd 2f 	lds	r18, 0x2FCD
    56d8:	30 91 ce 2f 	lds	r19, 0x2FCE
    56dc:	ab 01       	movw	r20, r22
    56de:	bc 01       	movw	r22, r24
    56e0:	40 1b       	sub	r20, r16
    56e2:	51 0b       	sbc	r21, r17
    56e4:	62 0b       	sbc	r22, r18
    56e6:	73 0b       	sbc	r23, r19
    56e8:	4b 5f       	subi	r20, 0xFB	; 251
    56ea:	5f 4f       	sbci	r21, 0xFF	; 255
    56ec:	6f 4f       	sbci	r22, 0xFF	; 255
    56ee:	7f 4f       	sbci	r23, 0xFF	; 255
	if(time_since_arrival<POST_MESSAGE_DELAY) delay_ms(POST_MESSAGE_DELAY - time_since_arrival);	
    56f0:	4d 35       	cpi	r20, 0x5D	; 93
    56f2:	51 05       	cpc	r21, r1
    56f4:	61 05       	cpc	r22, r1
    56f6:	71 05       	cpc	r23, r1
    56f8:	28 f4       	brcc	.+10     	; 0x5704 <handle_rnb_receive+0x40>
    56fa:	8d e5       	ldi	r24, 0x5D	; 93
    56fc:	90 e0       	ldi	r25, 0x00	; 0
    56fe:	84 1b       	sub	r24, r20
    5700:	95 0b       	sbc	r25, r21
    5702:	8a d8       	rcall	.-3820   	; 0x4818 <delay_ms>
	receive_rnb_data();
    5704:	0e 94 2f 18 	call	0x305e	; 0x305e <receive_rnb_data>
	rnb_updated = 0;
    5708:	10 92 fe 2d 	sts	0x2DFE, r1
	//last_good_rnb.id_number = (uint16_t)last_command_source_id; TODO: re-add this.
}
    570c:	1f 91       	pop	r17
    570e:	0f 91       	pop	r16
    5710:	08 95       	ret

00005712 <handle_set_led>:

void handle_set_led(char* command_args)
{
    5712:	6f 92       	push	r6
    5714:	7f 92       	push	r7
    5716:	8f 92       	push	r8
    5718:	9f 92       	push	r9
    571a:	af 92       	push	r10
    571c:	bf 92       	push	r11
    571e:	cf 92       	push	r12
    5720:	df 92       	push	r13
    5722:	ef 92       	push	r14
    5724:	ff 92       	push	r15
    5726:	0f 93       	push	r16
    5728:	1f 93       	push	r17
    572a:	cf 93       	push	r28
    572c:	df 93       	push	r29
    572e:	1f 92       	push	r1
    5730:	1f 92       	push	r1
    5732:	cd b7       	in	r28, 0x3d	; 61
    5734:	de b7       	in	r29, 0x3e	; 62
    5736:	78 2e       	mov	r7, r24
    5738:	69 2e       	mov	r6, r25
	const char delim[2] = " ";
    573a:	80 e2       	ldi	r24, 0x20	; 32
    573c:	90 e0       	ldi	r25, 0x00	; 0
    573e:	89 83       	std	Y+1, r24	; 0x01
    5740:	9a 83       	std	Y+2, r25	; 0x02
	char* token;

	uint8_t successful_read = 0;
	
	char* colors = strtok(command_args,delim);
    5742:	be 01       	movw	r22, r28
    5744:	6f 5f       	subi	r22, 0xFF	; 255
    5746:	7f 4f       	sbci	r23, 0xFF	; 255
    5748:	87 2d       	mov	r24, r7
    574a:	96 2d       	mov	r25, r6
    574c:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
    5750:	7c 01       	movw	r14, r24
	
	int length = strlen(colors);
    5752:	fc 01       	movw	r30, r24
    5754:	01 90       	ld	r0, Z+
    5756:	00 20       	and	r0, r0
    5758:	e9 f7       	brne	.-6      	; 0x5754 <handle_set_led+0x42>
    575a:	31 97       	sbiw	r30, 0x01	; 1
    575c:	6f 01       	movw	r12, r30
    575e:	c8 1a       	sub	r12, r24
    5760:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0)
    5762:	68 e9       	ldi	r22, 0x98	; 152
    5764:	76 e2       	ldi	r23, 0x26	; 38
    5766:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    576a:	89 2b       	or	r24, r25
    576c:	21 f0       	breq	.+8      	; 0x5776 <handle_set_led+0x64>
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    576e:	1c 14       	cp	r1, r12
    5770:	1d 04       	cpc	r1, r13
    5772:	24 f1       	brlt	.+72     	; 0x57bc <handle_set_led+0xaa>
    5774:	5c c0       	rjmp	.+184    	; 0x582e <handle_set_led+0x11c>

	if(strcmp(colors,"hsv")==0)
	{
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    5776:	be 01       	movw	r22, r28
    5778:	6f 5f       	subi	r22, 0xFF	; 255
    577a:	7f 4f       	sbci	r23, 0xFF	; 255
    577c:	80 e0       	ldi	r24, 0x00	; 0
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
		hVal = atoi(token);
    5784:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    5788:	8c 01       	movw	r16, r24
		token = strtok(NULL,delim);
    578a:	be 01       	movw	r22, r28
    578c:	6f 5f       	subi	r22, 0xFF	; 255
    578e:	7f 4f       	sbci	r23, 0xFF	; 255
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
		sVal = atoi(token);
    5798:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    579c:	f8 2e       	mov	r15, r24
		token = strtok(NULL,delim);	
    579e:	be 01       	movw	r22, r28
    57a0:	6f 5f       	subi	r22, 0xFF	; 255
    57a2:	7f 4f       	sbci	r23, 0xFF	; 255
    57a4:	80 e0       	ldi	r24, 0x00	; 0
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
		vVal = atoi(token);
    57ac:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
		set_hsv(hVal,sVal,vVal);
    57b0:	48 2f       	mov	r20, r24
    57b2:	6f 2d       	mov	r22, r15
    57b4:	c8 01       	movw	r24, r16
    57b6:	0e 94 1c 22 	call	0x4438	; 0x4438 <set_hsv>
    57ba:	51 c0       	rjmp	.+162    	; 0x585e <handle_set_led+0x14c>
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    57bc:	00 e0       	ldi	r16, 0x00	; 0
    57be:	10 e0       	ldi	r17, 0x00	; 0
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    57c0:	0f 2e       	mov	r0, r31
    57c2:	f0 e4       	ldi	r31, 0x40	; 64
    57c4:	af 2e       	mov	r10, r31
    57c6:	f9 e0       	ldi	r31, 0x09	; 9
    57c8:	bf 2e       	mov	r11, r31
    57ca:	f0 2d       	mov	r31, r0
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    57cc:	0f 2e       	mov	r0, r31
    57ce:	f0 e4       	ldi	r31, 0x40	; 64
    57d0:	8f 2e       	mov	r8, r31
    57d2:	fa e0       	ldi	r31, 0x0A	; 10
    57d4:	9f 2e       	mov	r9, r31
    57d6:	f0 2d       	mov	r31, r0
		{
			token = strtok(NULL,delim);
    57d8:	be 01       	movw	r22, r28
    57da:	6f 5f       	subi	r22, 0xFF	; 255
    57dc:	7f 4f       	sbci	r23, 0xFF	; 255
    57de:	80 e0       	ldi	r24, 0x00	; 0
    57e0:	90 e0       	ldi	r25, 0x00	; 0
    57e2:	0e 94 d1 40 	call	0x81a2	; 0x81a2 <strtok>
			if(colors[i]=='r')
    57e6:	f7 01       	movw	r30, r14
    57e8:	21 91       	ld	r18, Z+
    57ea:	7f 01       	movw	r14, r30
    57ec:	22 37       	cpi	r18, 0x72	; 114
    57ee:	39 f4       	brne	.+14     	; 0x57fe <handle_set_led+0xec>
			{
				set_red_led(atoi(token));
    57f0:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    57f4:	99 27       	eor	r25, r25

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    57f6:	f4 01       	movw	r30, r8
    57f8:	82 af       	std	Z+58, r24	; 0x3a
    57fa:	93 af       	std	Z+59, r25	; 0x3b
    57fc:	12 c0       	rjmp	.+36     	; 0x5822 <handle_set_led+0x110>
				successful_read=1;
			}
			else if(colors[i]=='g')
    57fe:	27 36       	cpi	r18, 0x67	; 103
    5800:	39 f4       	brne	.+14     	; 0x5810 <handle_set_led+0xfe>
			{
				set_green_led(atoi(token));
    5802:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    5806:	99 27       	eor	r25, r25

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    5808:	f4 01       	movw	r30, r8
    580a:	80 af       	std	Z+56, r24	; 0x38
    580c:	91 af       	std	Z+57, r25	; 0x39
    580e:	09 c0       	rjmp	.+18     	; 0x5822 <handle_set_led+0x110>
				successful_read=1;
			}
			else if(colors[i]=='b')
    5810:	22 36       	cpi	r18, 0x62	; 98
    5812:	69 f4       	brne	.+26     	; 0x582e <handle_set_led+0x11c>
			{
				set_blue_led(atoi(token));
    5814:	0e 94 c9 3f 	call	0x7f92	; 0x7f92 <atoi>
    5818:	9c 01       	movw	r18, r24
    581a:	33 27       	eor	r19, r19
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    581c:	f5 01       	movw	r30, r10
    581e:	20 af       	std	Z+56, r18	; 0x38
    5820:	31 af       	std	Z+57, r19	; 0x39
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    5822:	0f 5f       	subi	r16, 0xFF	; 255
    5824:	1f 4f       	sbci	r17, 0xFF	; 255
    5826:	c0 16       	cp	r12, r16
    5828:	d1 06       	cpc	r13, r17
    582a:	b1 f6       	brne	.-84     	; 0x57d8 <handle_set_led+0xc6>
    582c:	18 c0       	rjmp	.+48     	; 0x585e <handle_set_led+0x14c>
		}
	}

	if(successful_read!=1)
	{
		printf("\tGot command set_led, but arguments (%s) were invalid. Format should be:\r\n",command_args);
    582e:	6f 92       	push	r6
    5830:	7f 92       	push	r7
    5832:	8c e9       	ldi	r24, 0x9C	; 156
    5834:	96 e2       	ldi	r25, 0x26	; 38
    5836:	9f 93       	push	r25
    5838:	8f 93       	push	r24
    583a:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
		printf("\t Letters r,g,b, in any order, followed by values 0-255, in same \r\n");
    583e:	87 ee       	ldi	r24, 0xE7	; 231
    5840:	96 e2       	ldi	r25, 0x26	; 38
    5842:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		printf("\t order, indicating the brightness of the associated LEDs. Example: \r\n");
    5846:	8a e2       	ldi	r24, 0x2A	; 42
    5848:	97 e2       	ldi	r25, 0x27	; 39
    584a:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		printf("\t \"set_led bgr 5 30 0\" gives a bluish green.\r\n");
    584e:	80 e7       	ldi	r24, 0x70	; 112
    5850:	97 e2       	ldi	r25, 0x27	; 39
    5852:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    5856:	0f 90       	pop	r0
    5858:	0f 90       	pop	r0
    585a:	0f 90       	pop	r0
    585c:	0f 90       	pop	r0
	}
}
    585e:	0f 90       	pop	r0
    5860:	0f 90       	pop	r0
    5862:	df 91       	pop	r29
    5864:	cf 91       	pop	r28
    5866:	1f 91       	pop	r17
    5868:	0f 91       	pop	r16
    586a:	ff 90       	pop	r15
    586c:	ef 90       	pop	r14
    586e:	df 90       	pop	r13
    5870:	cf 90       	pop	r12
    5872:	bf 90       	pop	r11
    5874:	af 90       	pop	r10
    5876:	9f 90       	pop	r9
    5878:	8f 90       	pop	r8
    587a:	7f 90       	pop	r7
    587c:	6f 90       	pop	r6
    587e:	08 95       	ret

00005880 <handle_broadcast_id>:
void handle_broadcast_id()
{
	schedule_task(5,send_id, NULL);
    5880:	20 e0       	ldi	r18, 0x00	; 0
    5882:	30 e0       	ldi	r19, 0x00	; 0
    5884:	40 e3       	ldi	r20, 0x30	; 48
    5886:	59 e2       	ldi	r21, 0x29	; 41
    5888:	65 e0       	ldi	r22, 0x05	; 5
    588a:	70 e0       	ldi	r23, 0x00	; 0
    588c:	80 e0       	ldi	r24, 0x00	; 0
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	82 ca       	rjmp	.-2812   	; 0x4d96 <schedule_task>
    5892:	08 95       	ret

00005894 <handle_get_id>:
}

void handle_get_id()
{
	printf("My ID is: %04X\r\n",get_droplet_id());
    5894:	80 91 75 2c 	lds	r24, 0x2C75
    5898:	8f 93       	push	r24
    589a:	80 91 74 2c 	lds	r24, 0x2C74
    589e:	8f 93       	push	r24
    58a0:	8e e9       	ldi	r24, 0x9E	; 158
    58a2:	97 e2       	ldi	r25, 0x27	; 39
    58a4:	9f 93       	push	r25
    58a6:	8f 93       	push	r24
    58a8:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    58ac:	0f 90       	pop	r0
    58ae:	0f 90       	pop	r0
    58b0:	0f 90       	pop	r0
    58b2:	0f 90       	pop	r0
    58b4:	08 95       	ret

000058b6 <handle_cmd>:
		//set_rgb(0,0,0);
	//}
}

void handle_cmd(char* command_args)
{
    58b6:	cf 93       	push	r28
    58b8:	df 93       	push	r29
    58ba:	d8 2f       	mov	r29, r24
    58bc:	c9 2f       	mov	r28, r25
	printf("Broadcasting command: \"%s\", of length %i.\r\n",(uint8_t*)command_args, strlen(command_args));
    58be:	e8 2f       	mov	r30, r24
    58c0:	f9 2f       	mov	r31, r25
    58c2:	df 01       	movw	r26, r30
    58c4:	0d 90       	ld	r0, X+
    58c6:	00 20       	and	r0, r0
    58c8:	e9 f7       	brne	.-6      	; 0x58c4 <handle_cmd+0xe>
    58ca:	11 97       	sbiw	r26, 0x01	; 1
    58cc:	ae 1b       	sub	r26, r30
    58ce:	bf 0b       	sbc	r27, r31
    58d0:	bf 93       	push	r27
    58d2:	af 93       	push	r26
    58d4:	9f 93       	push	r25
    58d6:	8f 93       	push	r24
    58d8:	2f ea       	ldi	r18, 0xAF	; 175
    58da:	37 e2       	ldi	r19, 0x27	; 39
    58dc:	3f 93       	push	r19
    58de:	2f 93       	push	r18
    58e0:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
	#ifdef IS_SPECIAL
	ir_cmd(DIR0|DIR1|DIR3|DIR4, command_args,strlen(command_args));
	#else
	ir_cmd(ALL_DIRS, command_args,strlen(command_args));
    58e4:	ed 2f       	mov	r30, r29
    58e6:	fc 2f       	mov	r31, r28
    58e8:	df 01       	movw	r26, r30
    58ea:	0d 90       	ld	r0, X+
    58ec:	00 20       	and	r0, r0
    58ee:	e9 f7       	brne	.-6      	; 0x58ea <handle_cmd+0x34>
    58f0:	11 97       	sbiw	r26, 0x01	; 1
    58f2:	ad 01       	movw	r20, r26
    58f4:	4e 1b       	sub	r20, r30
    58f6:	5f 0b       	sbc	r21, r31
    58f8:	6d 2f       	mov	r22, r29
    58fa:	7c 2f       	mov	r23, r28
    58fc:	8f e3       	ldi	r24, 0x3F	; 63
    58fe:	0e 94 0f 0c 	call	0x181e	; 0x181e <ir_cmd>
    5902:	0f 90       	pop	r0
    5904:	0f 90       	pop	r0
    5906:	0f 90       	pop	r0
    5908:	0f 90       	pop	r0
    590a:	0f 90       	pop	r0
    590c:	0f 90       	pop	r0
	//
	//else
	//{
		//printf("\tIt wasn't OK to send command\r\n");
	//}
}
    590e:	df 91       	pop	r29
    5910:	cf 91       	pop	r28
    5912:	08 95       	ret

00005914 <handle_targeted_cmd>:

void handle_targeted_cmd(char* command_args)
{
    5914:	cf 92       	push	r12
    5916:	df 92       	push	r13
    5918:	ef 92       	push	r14
    591a:	ff 92       	push	r15
    591c:	0f 93       	push	r16
    591e:	1f 93       	push	r17
    5920:	cf 93       	push	r28
    5922:	df 93       	push	r29
    5924:	cd b7       	in	r28, 0x3d	; 61
    5926:	de b7       	in	r29, 0x3e	; 62
    5928:	a5 97       	sbiw	r28, 0x25	; 37
    592a:	cd bf       	out	0x3d, r28	; 61
    592c:	de bf       	out	0x3e, r29	; 62
    592e:	8c 01       	movw	r16, r24
	uint8_t loc = strcspn(command_args, " ");
    5930:	63 ec       	ldi	r22, 0xC3	; 195
    5932:	7a e2       	ldi	r23, 0x2A	; 42
    5934:	0e 94 ed 40 	call	0x81da	; 0x81da <strcspn>
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    5938:	7c 01       	movw	r14, r24
    593a:	ff 24       	eor	r15, r15
    593c:	a7 01       	movw	r20, r14
    593e:	b8 01       	movw	r22, r16
    5940:	ce 01       	movw	r24, r28
    5942:	01 96       	adiw	r24, 0x01	; 1
    5944:	0e 94 fc 40 	call	0x81f8	; 0x81f8 <strncpy>
	strcpy(cmdString, command_args+loc+1);
    5948:	8f ef       	ldi	r24, 0xFF	; 255
    594a:	e8 1a       	sub	r14, r24
    594c:	f8 0a       	sbc	r15, r24
    594e:	b8 01       	movw	r22, r16
    5950:	6e 0d       	add	r22, r14
    5952:	7f 1d       	adc	r23, r15
    5954:	8e 01       	movw	r16, r28
    5956:	0a 5f       	subi	r16, 0xFA	; 250
    5958:	1f 4f       	sbci	r17, 0xFF	; 255
    595a:	c8 01       	movw	r24, r16
    595c:	0e 94 e6 40 	call	0x81cc	; 0x81cc <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    5960:	40 e1       	ldi	r20, 0x10	; 16
    5962:	50 e0       	ldi	r21, 0x00	; 0
    5964:	60 e0       	ldi	r22, 0x00	; 0
    5966:	70 e0       	ldi	r23, 0x00	; 0
    5968:	ce 01       	movw	r24, r28
    596a:	01 96       	adiw	r24, 0x01	; 1
    596c:	0e 94 b8 3e 	call	0x7d70	; 0x7d70 <strtoul>
    5970:	6b 01       	movw	r12, r22
    5972:	7c 01       	movw	r14, r24
	printf("command string: %s, length: %d\r\n",cmdString, strlen(cmdString));
    5974:	f8 01       	movw	r30, r16
    5976:	01 90       	ld	r0, Z+
    5978:	00 20       	and	r0, r0
    597a:	e9 f7       	brne	.-6      	; 0x5976 <handle_targeted_cmd+0x62>
    597c:	31 97       	sbiw	r30, 0x01	; 1
    597e:	e0 1b       	sub	r30, r16
    5980:	f1 0b       	sbc	r31, r17
    5982:	ff 93       	push	r31
    5984:	ef 93       	push	r30
    5986:	1f 93       	push	r17
    5988:	0f 93       	push	r16
    598a:	8b ed       	ldi	r24, 0xDB	; 219
    598c:	97 e2       	ldi	r25, 0x27	; 39
    598e:	9f 93       	push	r25
    5990:	8f 93       	push	r24
    5992:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
	#ifdef IS_SPECIAL
	ir_targeted_cmd(DIR0|DIR1|DIR3|DIR4, cmdString,strlen(cmdString), target);
	#else
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    5996:	f8 01       	movw	r30, r16
    5998:	01 90       	ld	r0, Z+
    599a:	00 20       	and	r0, r0
    599c:	e9 f7       	brne	.-6      	; 0x5998 <handle_targeted_cmd+0x84>
    599e:	31 97       	sbiw	r30, 0x01	; 1
    59a0:	af 01       	movw	r20, r30
    59a2:	40 1b       	sub	r20, r16
    59a4:	51 0b       	sbc	r21, r17
    59a6:	96 01       	movw	r18, r12
    59a8:	b8 01       	movw	r22, r16
    59aa:	8f e3       	ldi	r24, 0x3F	; 63
    59ac:	0e 94 cc 0b 	call	0x1798	; 0x1798 <ir_targeted_cmd>
    59b0:	0f 90       	pop	r0
    59b2:	0f 90       	pop	r0
    59b4:	0f 90       	pop	r0
    59b6:	0f 90       	pop	r0
    59b8:	0f 90       	pop	r0
    59ba:	0f 90       	pop	r0
	#endif	
}
    59bc:	a5 96       	adiw	r28, 0x25	; 37
    59be:	cd bf       	out	0x3d, r28	; 61
    59c0:	de bf       	out	0x3e, r29	; 62
    59c2:	df 91       	pop	r29
    59c4:	cf 91       	pop	r28
    59c6:	1f 91       	pop	r17
    59c8:	0f 91       	pop	r16
    59ca:	ff 90       	pop	r15
    59cc:	ef 90       	pop	r14
    59ce:	df 90       	pop	r13
    59d0:	cf 90       	pop	r12
    59d2:	08 95       	ret

000059d4 <handle_shout>:

void handle_shout(char* command_args)
{
    59d4:	fc 01       	movw	r30, r24
	if(strlen(command_args)==0) command_args = "Unique New York.";
    59d6:	80 81       	ld	r24, Z
    59d8:	88 23       	and	r24, r24
    59da:	e1 f0       	breq	.+56     	; 0x5a14 <handle_shout+0x40>
	else if(strlen(command_args)>IR_BUFFER_SIZE)
    59dc:	df 01       	movw	r26, r30
    59de:	0d 90       	ld	r0, X+
    59e0:	00 20       	and	r0, r0
    59e2:	e9 f7       	brne	.-6      	; 0x59de <handle_shout+0xa>
    59e4:	11 97       	sbiw	r26, 0x01	; 1
    59e6:	ae 1b       	sub	r26, r30
    59e8:	bf 0b       	sbc	r27, r31
    59ea:	a1 32       	cpi	r26, 0x21	; 33
    59ec:	b1 05       	cpc	r27, r1
    59ee:	a0 f0       	brcs	.+40     	; 0x5a18 <handle_shout+0x44>
	{ 
		printf("Message length was %d chars, which exceeds the maximum of %d", strlen(command_args), IR_BUFFER_SIZE);
    59f0:	1f 92       	push	r1
    59f2:	80 e2       	ldi	r24, 0x20	; 32
    59f4:	8f 93       	push	r24
    59f6:	bf 93       	push	r27
    59f8:	af 93       	push	r26
    59fa:	8d e0       	ldi	r24, 0x0D	; 13
    59fc:	98 e2       	ldi	r25, 0x28	; 40
    59fe:	9f 93       	push	r25
    5a00:	8f 93       	push	r24
    5a02:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
		return;
    5a06:	0f 90       	pop	r0
    5a08:	0f 90       	pop	r0
    5a0a:	0f 90       	pop	r0
    5a0c:	0f 90       	pop	r0
    5a0e:	0f 90       	pop	r0
    5a10:	0f 90       	pop	r0
    5a12:	08 95       	ret
	#endif	
}

void handle_shout(char* command_args)
{
	if(strlen(command_args)==0) command_args = "Unique New York.";
    5a14:	ec ef       	ldi	r30, 0xFC	; 252
    5a16:	f7 e2       	ldi	r31, 0x27	; 39
		return;
	}
	#ifdef IS_SPECIAL
	ir_send(DIR0|DIR1|DIR3|DIR4, command_args,strlen(command_args));
	#else
	ir_send(ALL_DIRS, command_args,strlen(command_args));
    5a18:	df 01       	movw	r26, r30
    5a1a:	0d 90       	ld	r0, X+
    5a1c:	00 20       	and	r0, r0
    5a1e:	e9 f7       	brne	.-6      	; 0x5a1a <handle_shout+0x46>
    5a20:	11 97       	sbiw	r26, 0x01	; 1
    5a22:	ad 01       	movw	r20, r26
    5a24:	4e 1b       	sub	r20, r30
    5a26:	5f 0b       	sbc	r21, r31
    5a28:	bf 01       	movw	r22, r30
    5a2a:	8f e3       	ldi	r24, 0x3F	; 63
    5a2c:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <ir_send>
    5a30:	08 95       	ret

00005a32 <handle_target>:
	#endif
}

void handle_target(char* command_args)
{
    5a32:	ef 92       	push	r14
    5a34:	ff 92       	push	r15
    5a36:	0f 93       	push	r16
    5a38:	1f 93       	push	r17
    5a3a:	cf 93       	push	r28
    5a3c:	df 93       	push	r29
    5a3e:	cd b7       	in	r28, 0x3d	; 61
    5a40:	de b7       	in	r29, 0x3e	; 62
    5a42:	a5 97       	sbiw	r28, 0x25	; 37
    5a44:	cd bf       	out	0x3d, r28	; 61
    5a46:	de bf       	out	0x3e, r29	; 62
    5a48:	8c 01       	movw	r16, r24
	uint8_t loc = strcspn(command_args, " ");
    5a4a:	63 ec       	ldi	r22, 0xC3	; 195
    5a4c:	7a e2       	ldi	r23, 0x2A	; 42
    5a4e:	0e 94 ed 40 	call	0x81da	; 0x81da <strcspn>
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    5a52:	7c 01       	movw	r14, r24
    5a54:	ff 24       	eor	r15, r15
    5a56:	a7 01       	movw	r20, r14
    5a58:	b8 01       	movw	r22, r16
    5a5a:	ce 01       	movw	r24, r28
    5a5c:	01 96       	adiw	r24, 0x01	; 1
    5a5e:	0e 94 fc 40 	call	0x81f8	; 0x81f8 <strncpy>
	strcpy(msgString, command_args+loc);
    5a62:	b8 01       	movw	r22, r16
    5a64:	6e 0d       	add	r22, r14
    5a66:	7f 1d       	adc	r23, r15
    5a68:	8e 01       	movw	r16, r28
    5a6a:	0a 5f       	subi	r16, 0xFA	; 250
    5a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a6e:	c8 01       	movw	r24, r16
    5a70:	0e 94 e6 40 	call	0x81cc	; 0x81cc <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    5a74:	40 e1       	ldi	r20, 0x10	; 16
    5a76:	50 e0       	ldi	r21, 0x00	; 0
    5a78:	60 e0       	ldi	r22, 0x00	; 0
    5a7a:	70 e0       	ldi	r23, 0x00	; 0
    5a7c:	ce 01       	movw	r24, r28
    5a7e:	01 96       	adiw	r24, 0x01	; 1
    5a80:	0e 94 b8 3e 	call	0x7d70	; 0x7d70 <strtoul>
	
	//printf("Target: %04X\r\n",target);
	#ifdef IS_SPECIAL
	ir_targeted_send(DIR0|DIR1|DIR3|DIR4, msgString,strlen(msgString), target);
	#else	
	ir_targeted_send(ALL_DIRS, msgString,strlen(msgString), target);
    5a84:	f8 01       	movw	r30, r16
    5a86:	01 90       	ld	r0, Z+
    5a88:	00 20       	and	r0, r0
    5a8a:	e9 f7       	brne	.-6      	; 0x5a86 <handle_target+0x54>
    5a8c:	31 97       	sbiw	r30, 0x01	; 1
    5a8e:	af 01       	movw	r20, r30
    5a90:	40 1b       	sub	r20, r16
    5a92:	51 0b       	sbc	r21, r17
    5a94:	9b 01       	movw	r18, r22
    5a96:	b8 01       	movw	r22, r16
    5a98:	8f e3       	ldi	r24, 0x3F	; 63
    5a9a:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <ir_targeted_send>
	#endif
} 
    5a9e:	a5 96       	adiw	r28, 0x25	; 37
    5aa0:	cd bf       	out	0x3d, r28	; 61
    5aa2:	de bf       	out	0x3e, r29	; 62
    5aa4:	df 91       	pop	r29
    5aa6:	cf 91       	pop	r28
    5aa8:	1f 91       	pop	r17
    5aaa:	0f 91       	pop	r16
    5aac:	ff 90       	pop	r15
    5aae:	ef 90       	pop	r14
    5ab0:	08 95       	ret

00005ab2 <get_command_word_and_args>:


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
    5ab2:	0f 93       	push	r16
    5ab4:	1f 93       	push	r17
    5ab6:	cf 93       	push	r28
    5ab8:	df 93       	push	r29
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    5aba:	61 15       	cp	r22, r1
    5abc:	71 05       	cpc	r23, r1
    5abe:	79 f1       	breq	.+94     	; 0x5b1e <get_command_word_and_args+0x6c>
	{
		if(command[i]=='\0')
    5ac0:	fc 01       	movw	r30, r24
    5ac2:	10 81       	ld	r17, Z
    5ac4:	11 23       	and	r17, r17
    5ac6:	71 f1       	breq	.+92     	; 0x5b24 <get_command_word_and_args+0x72>
    5ac8:	dc 01       	movw	r26, r24
    5aca:	11 96       	adiw	r26, 0x01	; 1
    5acc:	68 0f       	add	r22, r24
    5ace:	79 1f       	adc	r23, r25

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
    5ad0:	01 e0       	ldi	r16, 0x01	; 1


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
    5ad2:	e0 e0       	ldi	r30, 0x00	; 0
    5ad4:	f0 e0       	ldi	r31, 0x00	; 0
    5ad6:	03 c0       	rjmp	.+6      	; 0x5ade <get_command_word_and_args+0x2c>
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
	{
		if(command[i]=='\0')
    5ad8:	1d 91       	ld	r17, X+
    5ada:	11 23       	and	r17, r17
    5adc:	e1 f0       	breq	.+56     	; 0x5b16 <get_command_word_and_args+0x64>
		{
			break;
		}
		else if(command[i]==' ' && writing_word_boole == 1)
    5ade:	10 32       	cpi	r17, 0x20	; 32
    5ae0:	49 f4       	brne	.+18     	; 0x5af4 <get_command_word_and_args+0x42>
    5ae2:	01 30       	cpi	r16, 0x01	; 1
    5ae4:	71 f4       	brne	.+28     	; 0x5b02 <get_command_word_and_args+0x50>
		{
			command_word[write_index]='\0';
    5ae6:	e4 0f       	add	r30, r20
    5ae8:	f5 1f       	adc	r31, r21
    5aea:	10 82       	st	Z, r1
			write_index = 0;
			writing_word_boole = 0;
    5aec:	00 e0       	ldi	r16, 0x00	; 0
			break;
		}
		else if(command[i]==' ' && writing_word_boole == 1)
		{
			command_word[write_index]='\0';
			write_index = 0;
    5aee:	e0 e0       	ldi	r30, 0x00	; 0
    5af0:	f0 e0       	ldi	r31, 0x00	; 0
			writing_word_boole = 0;
    5af2:	0c c0       	rjmp	.+24     	; 0x5b0c <get_command_word_and_args+0x5a>
		}
		else
		{
			if(writing_word_boole==1)
    5af4:	01 30       	cpi	r16, 0x01	; 1
    5af6:	29 f4       	brne	.+10     	; 0x5b02 <get_command_word_and_args+0x50>
			{
				command_word[write_index] = command[i];
    5af8:	ea 01       	movw	r28, r20
    5afa:	ce 0f       	add	r28, r30
    5afc:	df 1f       	adc	r29, r31
    5afe:	18 83       	st	Y, r17
    5b00:	04 c0       	rjmp	.+8      	; 0x5b0a <get_command_word_and_args+0x58>
			}
			else
			{
				command_args[write_index] = command[i];
    5b02:	e9 01       	movw	r28, r18
    5b04:	ce 0f       	add	r28, r30
    5b06:	df 1f       	adc	r29, r31
    5b08:	18 83       	st	Y, r17
			}
			write_index++;
    5b0a:	31 96       	adiw	r30, 0x01	; 1
void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    5b0c:	a6 17       	cp	r26, r22
    5b0e:	b7 07       	cpc	r27, r23
    5b10:	19 f7       	brne	.-58     	; 0x5ad8 <get_command_word_and_args+0x26>
    5b12:	cf 01       	movw	r24, r30
    5b14:	01 c0       	rjmp	.+2      	; 0x5b18 <get_command_word_and_args+0x66>
    5b16:	cf 01       	movw	r24, r30
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1)
    5b18:	01 30       	cpi	r16, 0x01	; 1
    5b1a:	61 f4       	brne	.+24     	; 0x5b34 <get_command_word_and_args+0x82>
    5b1c:	05 c0       	rjmp	.+10     	; 0x5b28 <get_command_word_and_args+0x76>
void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	//printf("\tIn gcwaa.\r\n");
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    5b1e:	e0 e0       	ldi	r30, 0x00	; 0
    5b20:	f0 e0       	ldi	r31, 0x00	; 0
    5b22:	02 c0       	rjmp	.+4      	; 0x5b28 <get_command_word_and_args+0x76>
	{
		if(command[i]=='\0')
    5b24:	e0 e0       	ldi	r30, 0x00	; 0
    5b26:	f0 e0       	ldi	r31, 0x00	; 0
			write_index++;
		}
	}
	if(writing_word_boole==1)
	{
		command_word[write_index] = '\0';
    5b28:	e4 0f       	add	r30, r20
    5b2a:	f5 1f       	adc	r31, r21
    5b2c:	10 82       	st	Z, r1
		command_args[0] = '\0';
    5b2e:	f9 01       	movw	r30, r18
    5b30:	10 82       	st	Z, r1
    5b32:	04 c0       	rjmp	.+8      	; 0x5b3c <get_command_word_and_args+0x8a>
	}
	else
	{
		command_args[write_index] = '\0';
    5b34:	f9 01       	movw	r30, r18
    5b36:	e8 0f       	add	r30, r24
    5b38:	f9 1f       	adc	r31, r25
    5b3a:	10 82       	st	Z, r1
	}
}
    5b3c:	df 91       	pop	r29
    5b3e:	cf 91       	pop	r28
    5b40:	1f 91       	pop	r17
    5b42:	0f 91       	pop	r16
    5b44:	08 95       	ret

00005b46 <handle_serial_command>:
//#define IS_SPECIAL 1

uint8_t user_handle_command(char* command_word, char* command_args) __attribute__((weak));

void handle_serial_command(char* command, uint16_t command_length)
{
    5b46:	cf 93       	push	r28
    5b48:	df 93       	push	r29
    5b4a:	cd b7       	in	r28, 0x3d	; 61
    5b4c:	de b7       	in	r29, 0x3e	; 62
    5b4e:	c0 58       	subi	r28, 0x80	; 128
    5b50:	d1 09       	sbc	r29, r1
    5b52:	cd bf       	out	0x3d, r28	; 61
    5b54:	de bf       	out	0x3e, r29	; 62
    5b56:	fb 01       	movw	r30, r22
	//printf("command_time: %lu | last_command_time: %lu\r\n", cmd_arrival_time, last_serial_command_time);	
	//printf("Got command \"%s\".\r\n",command);
	//printf("\tcommand_time: %lu | last_command_time: %lu\r\n", cmd_arrival_time, last_serial_command_time);
	last_serial_command_time = cmd_arrival_time;	
    5b58:	40 91 cb 2f 	lds	r20, 0x2FCB
    5b5c:	50 91 cc 2f 	lds	r21, 0x2FCC
    5b60:	60 91 cd 2f 	lds	r22, 0x2FCD
    5b64:	70 91 ce 2f 	lds	r23, 0x2FCE
    5b68:	40 93 cf 2f 	sts	0x2FCF, r20
    5b6c:	50 93 d0 2f 	sts	0x2FD0, r21
    5b70:	60 93 d1 2f 	sts	0x2FD1, r22
    5b74:	70 93 d2 2f 	sts	0x2FD2, r23
	if(command[0]!='\0') //Not much to handle if we get an empty string.
    5b78:	dc 01       	movw	r26, r24
    5b7a:	2c 91       	ld	r18, X
    5b7c:	22 23       	and	r18, r18
    5b7e:	09 f4       	brne	.+2      	; 0x5b82 <handle_serial_command+0x3c>
    5b80:	50 c1       	rjmp	.+672    	; 0x5e22 <handle_serial_command+0x2dc>
	{
		char command_word[BUFFER_SIZE];
		char command_args[BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
    5b82:	9e 01       	movw	r18, r28
    5b84:	2f 5f       	subi	r18, 0xFF	; 255
    5b86:	3f 4f       	sbci	r19, 0xFF	; 255
    5b88:	ae 01       	movw	r20, r28
    5b8a:	4f 5b       	subi	r20, 0xBF	; 191
    5b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    5b8e:	bf 01       	movw	r22, r30
    5b90:	90 df       	rcall	.-224    	; 0x5ab2 <get_command_word_and_args>
		if(strcmp(command_word,"move_steps")==0)					handle_move_steps(command_args);
    5b92:	6a e4       	ldi	r22, 0x4A	; 74
    5b94:	78 e2       	ldi	r23, 0x28	; 40
    5b96:	ce 01       	movw	r24, r28
    5b98:	8f 5b       	subi	r24, 0xBF	; 191
    5b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b9c:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5ba0:	89 2b       	or	r24, r25
    5ba2:	21 f4       	brne	.+8      	; 0x5bac <handle_serial_command+0x66>
    5ba4:	ce 01       	movw	r24, r28
    5ba6:	01 96       	adiw	r24, 0x01	; 1
    5ba8:	a8 db       	rcall	.-2224   	; 0x52fa <handle_move_steps>
    5baa:	3b c1       	rjmp	.+630    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"walk")==0)						handle_walk(command_args);
    5bac:	6e e6       	ldi	r22, 0x6E	; 110
    5bae:	78 e2       	ldi	r23, 0x28	; 40
    5bb0:	ce 01       	movw	r24, r28
    5bb2:	8f 5b       	subi	r24, 0xBF	; 191
    5bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb6:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5bba:	89 2b       	or	r24, r25
    5bbc:	21 f4       	brne	.+8      	; 0x5bc6 <handle_serial_command+0x80>
    5bbe:	ce 01       	movw	r24, r28
    5bc0:	01 96       	adiw	r24, 0x01	; 1
    5bc2:	e3 db       	rcall	.-2106   	; 0x538a <handle_walk>
    5bc4:	2e c1       	rjmp	.+604    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word, "get_rgb")==0)					handle_get_rgb();
    5bc6:	65 e5       	ldi	r22, 0x55	; 85
    5bc8:	78 e2       	ldi	r23, 0x28	; 40
    5bca:	ce 01       	movw	r24, r28
    5bcc:	8f 5b       	subi	r24, 0xBF	; 191
    5bce:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd0:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5bd4:	89 2b       	or	r24, r25
    5bd6:	11 f4       	brne	.+4      	; 0x5bdc <handle_serial_command+0x96>
    5bd8:	fe db       	rcall	.-2052   	; 0x53d6 <handle_get_rgb>
    5bda:	23 c1       	rjmp	.+582    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"set_ir")==0)					handle_set_ir(command_args);
    5bdc:	6d e5       	ldi	r22, 0x5D	; 93
    5bde:	78 e2       	ldi	r23, 0x28	; 40
    5be0:	ce 01       	movw	r24, r28
    5be2:	8f 5b       	subi	r24, 0xBF	; 191
    5be4:	9f 4f       	sbci	r25, 0xFF	; 255
    5be6:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5bea:	89 2b       	or	r24, r25
    5bec:	21 f4       	brne	.+8      	; 0x5bf6 <handle_serial_command+0xb0>
    5bee:	ce 01       	movw	r24, r28
    5bf0:	01 96       	adiw	r24, 0x01	; 1
    5bf2:	16 dc       	rcall	.-2004   	; 0x5420 <handle_set_ir>
    5bf4:	16 c1       	rjmp	.+556    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"coll")==0)						handle_check_collisions();
    5bf6:	64 e6       	ldi	r22, 0x64	; 100
    5bf8:	78 e2       	ldi	r23, 0x28	; 40
    5bfa:	ce 01       	movw	r24, r28
    5bfc:	8f 5b       	subi	r24, 0xBF	; 191
    5bfe:	9f 4f       	sbci	r25, 0xFF	; 255
    5c00:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5c04:	89 2b       	or	r24, r25
    5c06:	11 f4       	brne	.+4      	; 0x5c0c <handle_serial_command+0xc6>
    5c08:	38 db       	rcall	.-2448   	; 0x527a <handle_check_collisions>
    5c0a:	0b c1       	rjmp	.+534    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"stop_walk")==0)				handle_stop_walk();
    5c0c:	69 e6       	ldi	r22, 0x69	; 105
    5c0e:	78 e2       	ldi	r23, 0x28	; 40
    5c10:	ce 01       	movw	r24, r28
    5c12:	8f 5b       	subi	r24, 0xBF	; 191
    5c14:	9f 4f       	sbci	r25, 0xFF	; 255
    5c16:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5c1a:	89 2b       	or	r24, r25
    5c1c:	11 f4       	brne	.+4      	; 0x5c22 <handle_serial_command+0xdc>
    5c1e:	18 dc       	rcall	.-2000   	; 0x5450 <handle_stop_walk>
    5c20:	00 c1       	rjmp	.+512    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"set_motors")==0)				handle_set_motors(command_args);
    5c22:	63 e7       	ldi	r22, 0x73	; 115
    5c24:	78 e2       	ldi	r23, 0x28	; 40
    5c26:	ce 01       	movw	r24, r28
    5c28:	8f 5b       	subi	r24, 0xBF	; 191
    5c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5c2c:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5c30:	89 2b       	or	r24, r25
    5c32:	21 f4       	brne	.+8      	; 0x5c3c <handle_serial_command+0xf6>
    5c34:	ce 01       	movw	r24, r28
    5c36:	01 96       	adiw	r24, 0x01	; 1
    5c38:	1a dc       	rcall	.-1996   	; 0x546e <handle_set_motors>
    5c3a:	f3 c0       	rjmp	.+486    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"set_dist_per_step")==0)		handle_set_mm_per_kilostep(command_args);
    5c3c:	6e e7       	ldi	r22, 0x7E	; 126
    5c3e:	78 e2       	ldi	r23, 0x28	; 40
    5c40:	ce 01       	movw	r24, r28
    5c42:	8f 5b       	subi	r24, 0xBF	; 191
    5c44:	9f 4f       	sbci	r25, 0xFF	; 255
    5c46:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5c4a:	89 2b       	or	r24, r25
    5c4c:	21 f4       	brne	.+8      	; 0x5c56 <handle_serial_command+0x110>
    5c4e:	ce 01       	movw	r24, r28
    5c50:	01 96       	adiw	r24, 0x01	; 1
    5c52:	a5 dc       	rcall	.-1718   	; 0x559e <handle_set_mm_per_kilostep>
    5c54:	e6 c0       	rjmp	.+460    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"rnb_b")==0)					handle_rnb_broadcast();
    5c56:	60 e9       	ldi	r22, 0x90	; 144
    5c58:	78 e2       	ldi	r23, 0x28	; 40
    5c5a:	ce 01       	movw	r24, r28
    5c5c:	8f 5b       	subi	r24, 0xBF	; 191
    5c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c60:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5c64:	89 2b       	or	r24, r25
    5c66:	11 f4       	brne	.+4      	; 0x5c6c <handle_serial_command+0x126>
    5c68:	c0 dc       	rcall	.-1664   	; 0x55ea <handle_rnb_broadcast>
    5c6a:	db c0       	rjmp	.+438    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"rnb_c")==0)					handle_rnb_collect(command_args);
    5c6c:	66 e9       	ldi	r22, 0x96	; 150
    5c6e:	78 e2       	ldi	r23, 0x28	; 40
    5c70:	ce 01       	movw	r24, r28
    5c72:	8f 5b       	subi	r24, 0xBF	; 191
    5c74:	9f 4f       	sbci	r25, 0xFF	; 255
    5c76:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5c7a:	89 2b       	or	r24, r25
    5c7c:	21 f4       	brne	.+8      	; 0x5c86 <handle_serial_command+0x140>
    5c7e:	ce 01       	movw	r24, r28
    5c80:	01 96       	adiw	r24, 0x01	; 1
    5c82:	bd dc       	rcall	.-1670   	; 0x55fe <handle_rnb_collect>
    5c84:	ce c0       	rjmp	.+412    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word, "rnb_t")==0)					handle_rnb_transmit(command_args);
    5c86:	6c e9       	ldi	r22, 0x9C	; 156
    5c88:	78 e2       	ldi	r23, 0x28	; 40
    5c8a:	ce 01       	movw	r24, r28
    5c8c:	8f 5b       	subi	r24, 0xBF	; 191
    5c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5c90:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5c94:	89 2b       	or	r24, r25
    5c96:	21 f4       	brne	.+8      	; 0x5ca0 <handle_serial_command+0x15a>
    5c98:	ce 01       	movw	r24, r28
    5c9a:	01 96       	adiw	r24, 0x01	; 1
    5c9c:	e7 dc       	rcall	.-1586   	; 0x566c <handle_rnb_transmit>
    5c9e:	c1 c0       	rjmp	.+386    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"rnb_r")==0)					handle_rnb_receive();
    5ca0:	6e eb       	ldi	r22, 0xBE	; 190
    5ca2:	73 e2       	ldi	r23, 0x23	; 35
    5ca4:	ce 01       	movw	r24, r28
    5ca6:	8f 5b       	subi	r24, 0xBF	; 191
    5ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    5caa:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5cae:	89 2b       	or	r24, r25
    5cb0:	11 f4       	brne	.+4      	; 0x5cb6 <handle_serial_command+0x170>
    5cb2:	08 dd       	rcall	.-1520   	; 0x56c4 <handle_rnb_receive>
    5cb4:	b6 c0       	rjmp	.+364    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"set_led")==0)					handle_set_led(command_args);
    5cb6:	62 ea       	ldi	r22, 0xA2	; 162
    5cb8:	78 e2       	ldi	r23, 0x28	; 40
    5cba:	ce 01       	movw	r24, r28
    5cbc:	8f 5b       	subi	r24, 0xBF	; 191
    5cbe:	9f 4f       	sbci	r25, 0xFF	; 255
    5cc0:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5cc4:	89 2b       	or	r24, r25
    5cc6:	21 f4       	brne	.+8      	; 0x5cd0 <handle_serial_command+0x18a>
    5cc8:	ce 01       	movw	r24, r28
    5cca:	01 96       	adiw	r24, 0x01	; 1
    5ccc:	22 dd       	rcall	.-1468   	; 0x5712 <handle_set_led>
    5cce:	a9 c0       	rjmp	.+338    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"get_id")==0)					handle_get_id();
    5cd0:	6a ea       	ldi	r22, 0xAA	; 170
    5cd2:	78 e2       	ldi	r23, 0x28	; 40
    5cd4:	ce 01       	movw	r24, r28
    5cd6:	8f 5b       	subi	r24, 0xBF	; 191
    5cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5cda:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5cde:	89 2b       	or	r24, r25
    5ce0:	11 f4       	brne	.+4      	; 0x5ce6 <handle_serial_command+0x1a0>
    5ce2:	d8 dd       	rcall	.-1104   	; 0x5894 <handle_get_id>
    5ce4:	9e c0       	rjmp	.+316    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"broadcast_id")==0)				handle_broadcast_id();
    5ce6:	61 eb       	ldi	r22, 0xB1	; 177
    5ce8:	78 e2       	ldi	r23, 0x28	; 40
    5cea:	ce 01       	movw	r24, r28
    5cec:	8f 5b       	subi	r24, 0xBF	; 191
    5cee:	9f 4f       	sbci	r25, 0xFF	; 255
    5cf0:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5cf4:	89 2b       	or	r24, r25
    5cf6:	11 f4       	brne	.+4      	; 0x5cfc <handle_serial_command+0x1b6>
    5cf8:	c3 dd       	rcall	.-1146   	; 0x5880 <handle_broadcast_id>
    5cfa:	93 c0       	rjmp	.+294    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"cmd")==0)						handle_cmd(command_args);
    5cfc:	62 ec       	ldi	r22, 0xC2	; 194
    5cfe:	78 e2       	ldi	r23, 0x28	; 40
    5d00:	ce 01       	movw	r24, r28
    5d02:	8f 5b       	subi	r24, 0xBF	; 191
    5d04:	9f 4f       	sbci	r25, 0xFF	; 255
    5d06:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5d0a:	89 2b       	or	r24, r25
    5d0c:	21 f4       	brne	.+8      	; 0x5d16 <handle_serial_command+0x1d0>
    5d0e:	ce 01       	movw	r24, r28
    5d10:	01 96       	adiw	r24, 0x01	; 1
    5d12:	d1 dd       	rcall	.-1118   	; 0x58b6 <handle_cmd>
    5d14:	86 c0       	rjmp	.+268    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"tgt_cmd")==0)					handle_targeted_cmd(command_args);
    5d16:	6e eb       	ldi	r22, 0xBE	; 190
    5d18:	78 e2       	ldi	r23, 0x28	; 40
    5d1a:	ce 01       	movw	r24, r28
    5d1c:	8f 5b       	subi	r24, 0xBF	; 191
    5d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d20:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5d24:	89 2b       	or	r24, r25
    5d26:	21 f4       	brne	.+8      	; 0x5d30 <handle_serial_command+0x1ea>
    5d28:	ce 01       	movw	r24, r28
    5d2a:	01 96       	adiw	r24, 0x01	; 1
    5d2c:	f3 dd       	rcall	.-1050   	; 0x5914 <handle_targeted_cmd>
    5d2e:	79 c0       	rjmp	.+242    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"msg")==0)						handle_shout(command_args);
    5d30:	66 ec       	ldi	r22, 0xC6	; 198
    5d32:	78 e2       	ldi	r23, 0x28	; 40
    5d34:	ce 01       	movw	r24, r28
    5d36:	8f 5b       	subi	r24, 0xBF	; 191
    5d38:	9f 4f       	sbci	r25, 0xFF	; 255
    5d3a:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5d3e:	89 2b       	or	r24, r25
    5d40:	21 f4       	brne	.+8      	; 0x5d4a <handle_serial_command+0x204>
    5d42:	ce 01       	movw	r24, r28
    5d44:	01 96       	adiw	r24, 0x01	; 1
    5d46:	46 de       	rcall	.-884    	; 0x59d4 <handle_shout>
    5d48:	6c c0       	rjmp	.+216    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"tgt")==0)						handle_target(command_args);
    5d4a:	6a ec       	ldi	r22, 0xCA	; 202
    5d4c:	78 e2       	ldi	r23, 0x28	; 40
    5d4e:	ce 01       	movw	r24, r28
    5d50:	8f 5b       	subi	r24, 0xBF	; 191
    5d52:	9f 4f       	sbci	r25, 0xFF	; 255
    5d54:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5d58:	89 2b       	or	r24, r25
    5d5a:	21 f4       	brne	.+8      	; 0x5d64 <handle_serial_command+0x21e>
    5d5c:	ce 01       	movw	r24, r28
    5d5e:	01 96       	adiw	r24, 0x01	; 1
    5d60:	68 de       	rcall	.-816    	; 0x5a32 <handle_target>
    5d62:	5f c0       	rjmp	.+190    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"tasks")==0)					print_task_queue();
    5d64:	6e ec       	ldi	r22, 0xCE	; 206
    5d66:	78 e2       	ldi	r23, 0x28	; 40
    5d68:	ce 01       	movw	r24, r28
    5d6a:	8f 5b       	subi	r24, 0xBF	; 191
    5d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d6e:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5d72:	89 2b       	or	r24, r25
    5d74:	19 f4       	brne	.+6      	; 0x5d7c <handle_serial_command+0x236>
    5d76:	0e 94 0b 25 	call	0x4a16	; 0x4a16 <print_task_queue>
    5d7a:	53 c0       	rjmp	.+166    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"reset")==0)					handle_reset();
    5d7c:	64 ed       	ldi	r22, 0xD4	; 212
    5d7e:	78 e2       	ldi	r23, 0x28	; 40
    5d80:	ce 01       	movw	r24, r28
    5d82:	8f 5b       	subi	r24, 0xBF	; 191
    5d84:	9f 4f       	sbci	r25, 0xFF	; 255
    5d86:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5d8a:	89 2b       	or	r24, r25
    5d8c:	19 f4       	brne	.+6      	; 0x5d94 <handle_serial_command+0x24e>
	}
}

void handle_reset()
{
	droplet_reboot();
    5d8e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <droplet_reboot>
    5d92:	47 c0       	rjmp	.+142    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"tgt_cmd")==0)					handle_targeted_cmd(command_args);
		else if(strcmp(command_word,"msg")==0)						handle_shout(command_args);
		else if(strcmp(command_word,"tgt")==0)						handle_target(command_args);
		else if(strcmp(command_word,"tasks")==0)					print_task_queue();
		else if(strcmp(command_word,"reset")==0)					handle_reset();
		else if(strcmp(command_word,"write_motor_settings")==0)		write_motor_settings();
    5d94:	6a ed       	ldi	r22, 0xDA	; 218
    5d96:	78 e2       	ldi	r23, 0x28	; 40
    5d98:	ce 01       	movw	r24, r28
    5d9a:	8f 5b       	subi	r24, 0xBF	; 191
    5d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5d9e:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5da2:	89 2b       	or	r24, r25
    5da4:	19 f4       	brne	.+6      	; 0x5dac <handle_serial_command+0x266>
    5da6:	0e 94 62 14 	call	0x28c4	; 0x28c4 <write_motor_settings>
    5daa:	3b c0       	rjmp	.+118    	; 0x5e22 <handle_serial_command+0x2dc>
		else if(strcmp(command_word,"print_motor_settings")==0){
    5dac:	6f ee       	ldi	r22, 0xEF	; 239
    5dae:	78 e2       	ldi	r23, 0x28	; 40
    5db0:	ce 01       	movw	r24, r28
    5db2:	8f 5b       	subi	r24, 0xBF	; 191
    5db4:	9f 4f       	sbci	r25, 0xFF	; 255
    5db6:	0e 94 dd 40 	call	0x81ba	; 0x81ba <strcmp>
    5dba:	89 2b       	or	r24, r25
    5dbc:	29 f4       	brne	.+10     	; 0x5dc8 <handle_serial_command+0x282>
																	print_motor_values();
    5dbe:	0e 94 9f 14 	call	0x293e	; 0x293e <print_motor_values>
																	print_dist_per_step();																	
    5dc2:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <print_dist_per_step>
    5dc6:	2d c0       	rjmp	.+90     	; 0x5e22 <handle_serial_command+0x2dc>
		}else if(user_handle_command) //First, make sure the function is defined
    5dc8:	80 e0       	ldi	r24, 0x00	; 0
    5dca:	90 e0       	ldi	r25, 0x00	; 0
    5dcc:	89 2b       	or	r24, r25
    5dce:	d1 f0       	breq	.+52     	; 0x5e04 <handle_serial_command+0x2be>
		{
			if(!user_handle_command(command_word, command_args))	printf("\tCommand ( %s ) not recognized.\r\n",command_word);
    5dd0:	be 01       	movw	r22, r28
    5dd2:	6f 5f       	subi	r22, 0xFF	; 255
    5dd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5dd6:	ce 01       	movw	r24, r28
    5dd8:	8f 5b       	subi	r24, 0xBF	; 191
    5dda:	9f 4f       	sbci	r25, 0xFF	; 255
    5ddc:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5de0:	81 11       	cpse	r24, r1
    5de2:	1f c0       	rjmp	.+62     	; 0x5e22 <handle_serial_command+0x2dc>
    5de4:	ce 01       	movw	r24, r28
    5de6:	8f 5b       	subi	r24, 0xBF	; 191
    5de8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dea:	9f 93       	push	r25
    5dec:	8f 93       	push	r24
    5dee:	84 e0       	ldi	r24, 0x04	; 4
    5df0:	99 e2       	ldi	r25, 0x29	; 41
    5df2:	9f 93       	push	r25
    5df4:	8f 93       	push	r24
    5df6:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    5dfa:	0f 90       	pop	r0
    5dfc:	0f 90       	pop	r0
    5dfe:	0f 90       	pop	r0
    5e00:	0f 90       	pop	r0
    5e02:	0f c0       	rjmp	.+30     	; 0x5e22 <handle_serial_command+0x2dc>
		}
		else														printf("\tCommand ( %s ) not recognized.\r\n",command_word);
    5e04:	ce 01       	movw	r24, r28
    5e06:	8f 5b       	subi	r24, 0xBF	; 191
    5e08:	9f 4f       	sbci	r25, 0xFF	; 255
    5e0a:	9f 93       	push	r25
    5e0c:	8f 93       	push	r24
    5e0e:	84 e0       	ldi	r24, 0x04	; 4
    5e10:	99 e2       	ldi	r25, 0x29	; 41
    5e12:	9f 93       	push	r25
    5e14:	8f 93       	push	r24
    5e16:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    5e1a:	0f 90       	pop	r0
    5e1c:	0f 90       	pop	r0
    5e1e:	0f 90       	pop	r0
    5e20:	0f 90       	pop	r0
	}
}
    5e22:	c0 58       	subi	r28, 0x80	; 128
    5e24:	df 4f       	sbci	r29, 0xFF	; 255
    5e26:	cd bf       	out	0x3d, r28	; 61
    5e28:	de bf       	out	0x3e, r29	; 62
    5e2a:	df 91       	pop	r29
    5e2c:	cf 91       	pop	r28
    5e2e:	08 95       	ret

00005e30 <update_near_atoms>:
	for(uint8_t i = 0; i < 8; i++)
	{
		if(myID.valence[i] == 0) return 0; //false
	}
	return 1; //true
}
    5e30:	e8 e3       	ldi	r30, 0x38	; 56
    5e32:	f1 e3       	ldi	r31, 0x31	; 49
    5e34:	20 e0       	ldi	r18, 0x00	; 0
    5e36:	33 e3       	ldi	r19, 0x33	; 51
    5e38:	af e3       	ldi	r26, 0x3F	; 63
    5e3a:	b1 e3       	ldi	r27, 0x31	; 49
    5e3c:	80 81       	ld	r24, Z
    5e3e:	91 81       	ldd	r25, Z+1	; 0x01
    5e40:	89 2b       	or	r24, r25
    5e42:	19 f0       	breq	.+6      	; 0x5e4a <update_near_atoms+0x1a>
    5e44:	8c 91       	ld	r24, X
    5e46:	8c 59       	subi	r24, 0x9C	; 156
    5e48:	8c 93       	st	X, r24
    5e4a:	b6 96       	adiw	r30, 0x26	; 38
    5e4c:	e2 17       	cp	r30, r18
    5e4e:	f3 07       	cpc	r31, r19
    5e50:	a9 f7       	brne	.-22     	; 0x5e3c <update_near_atoms+0xc>
    5e52:	08 95       	ret

00005e54 <print_near_atoms>:
    5e54:	cf 92       	push	r12
    5e56:	df 92       	push	r13
    5e58:	ef 92       	push	r14
    5e5a:	ff 92       	push	r15
    5e5c:	0f 93       	push	r16
    5e5e:	1f 93       	push	r17
    5e60:	cf 93       	push	r28
    5e62:	df 93       	push	r29
    5e64:	86 e2       	ldi	r24, 0x26	; 38
    5e66:	99 e2       	ldi	r25, 0x29	; 41
    5e68:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    5e6c:	80 91 38 31 	lds	r24, 0x3138
    5e70:	90 91 39 31 	lds	r25, 0x3139
    5e74:	00 97       	sbiw	r24, 0x00	; 0
    5e76:	09 f0       	breq	.+2      	; 0x5e7a <print_near_atoms+0x26>
    5e78:	43 c0       	rjmp	.+134    	; 0x5f00 <print_near_atoms+0xac>
    5e7a:	1b c0       	rjmp	.+54     	; 0x5eb2 <print_near_atoms+0x5e>
    5e7c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e7e:	9e 81       	ldd	r25, Y+6	; 0x06
    5e80:	00 97       	sbiw	r24, 0x00	; 0
    5e82:	b9 f0       	breq	.+46     	; 0x5eb2 <print_near_atoms+0x5e>
    5e84:	9f 93       	push	r25
    5e86:	8f 93       	push	r24
    5e88:	f8 01       	movw	r30, r16
    5e8a:	80 81       	ld	r24, Z
    5e8c:	1f 92       	push	r1
    5e8e:	8f 93       	push	r24
    5e90:	df 93       	push	r29
    5e92:	cf 93       	push	r28
    5e94:	ff 92       	push	r15
    5e96:	ef 92       	push	r14
    5e98:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    5e9c:	0a 5d       	subi	r16, 0xDA	; 218
    5e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    5ea0:	a6 96       	adiw	r28, 0x26	; 38
    5ea2:	ed b7       	in	r30, 0x3d	; 61
    5ea4:	fe b7       	in	r31, 0x3e	; 62
    5ea6:	38 96       	adiw	r30, 0x08	; 8
    5ea8:	ed bf       	out	0x3d, r30	; 61
    5eaa:	fe bf       	out	0x3e, r31	; 62
    5eac:	cc 15       	cp	r28, r12
    5eae:	dd 05       	cpc	r29, r13
    5eb0:	29 f7       	brne	.-54     	; 0x5e7c <print_near_atoms+0x28>
    5eb2:	8f e6       	ldi	r24, 0x6F	; 111
    5eb4:	9c e2       	ldi	r25, 0x2C	; 44
    5eb6:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    5eba:	8f e6       	ldi	r24, 0x6F	; 111
    5ebc:	9c e2       	ldi	r25, 0x2C	; 44
    5ebe:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    5ec2:	8c e5       	ldi	r24, 0x5C	; 92
    5ec4:	99 e2       	ldi	r25, 0x29	; 41
    5ec6:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    5eca:	cd ee       	ldi	r28, 0xED	; 237
    5ecc:	d2 e3       	ldi	r29, 0x32	; 50
    5ece:	0f 2e       	mov	r0, r31
    5ed0:	f9 ef       	ldi	r31, 0xF9	; 249
    5ed2:	ef 2e       	mov	r14, r31
    5ed4:	f2 e3       	ldi	r31, 0x32	; 50
    5ed6:	ff 2e       	mov	r15, r31
    5ed8:	f0 2d       	mov	r31, r0
    5eda:	01 e7       	ldi	r16, 0x71	; 113
    5edc:	19 e2       	ldi	r17, 0x29	; 41
    5ede:	88 81       	ld	r24, Y
    5ee0:	99 81       	ldd	r25, Y+1	; 0x01
    5ee2:	22 96       	adiw	r28, 0x02	; 2
    5ee4:	9f 93       	push	r25
    5ee6:	8f 93       	push	r24
    5ee8:	1f 93       	push	r17
    5eea:	0f 93       	push	r16
    5eec:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    5ef0:	0f 90       	pop	r0
    5ef2:	0f 90       	pop	r0
    5ef4:	0f 90       	pop	r0
    5ef6:	0f 90       	pop	r0
    5ef8:	ce 15       	cp	r28, r14
    5efa:	df 05       	cpc	r29, r15
    5efc:	81 f7       	brne	.-32     	; 0x5ede <print_near_atoms+0x8a>
    5efe:	26 c0       	rjmp	.+76     	; 0x5f4c <print_near_atoms+0xf8>
    5f00:	9f 93       	push	r25
    5f02:	8f 93       	push	r24
    5f04:	80 91 3a 31 	lds	r24, 0x313A
    5f08:	1f 92       	push	r1
    5f0a:	8f 93       	push	r24
    5f0c:	83 e3       	ldi	r24, 0x33	; 51
    5f0e:	91 e3       	ldi	r25, 0x31	; 49
    5f10:	9f 93       	push	r25
    5f12:	8f 93       	push	r24
    5f14:	8d e3       	ldi	r24, 0x3D	; 61
    5f16:	99 e2       	ldi	r25, 0x29	; 41
    5f18:	9f 93       	push	r25
    5f1a:	8f 93       	push	r24
    5f1c:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    5f20:	00 e6       	ldi	r16, 0x60	; 96
    5f22:	11 e3       	ldi	r17, 0x31	; 49
    5f24:	c9 e5       	ldi	r28, 0x59	; 89
    5f26:	d1 e3       	ldi	r29, 0x31	; 49
    5f28:	0f 2e       	mov	r0, r31
    5f2a:	fb ef       	ldi	r31, 0xFB	; 251
    5f2c:	cf 2e       	mov	r12, r31
    5f2e:	f2 e3       	ldi	r31, 0x32	; 50
    5f30:	df 2e       	mov	r13, r31
    5f32:	f0 2d       	mov	r31, r0
    5f34:	8d b7       	in	r24, 0x3d	; 61
    5f36:	9e b7       	in	r25, 0x3e	; 62
    5f38:	08 96       	adiw	r24, 0x08	; 8
    5f3a:	8d bf       	out	0x3d, r24	; 61
    5f3c:	9e bf       	out	0x3e, r25	; 62
    5f3e:	0f 2e       	mov	r0, r31
    5f40:	fd e3       	ldi	r31, 0x3D	; 61
    5f42:	ef 2e       	mov	r14, r31
    5f44:	f9 e2       	ldi	r31, 0x29	; 41
    5f46:	ff 2e       	mov	r15, r31
    5f48:	f0 2d       	mov	r31, r0
    5f4a:	98 cf       	rjmp	.-208    	; 0x5e7c <print_near_atoms+0x28>
    5f4c:	df 91       	pop	r29
    5f4e:	cf 91       	pop	r28
    5f50:	1f 91       	pop	r17
    5f52:	0f 91       	pop	r16
    5f54:	ff 90       	pop	r15
    5f56:	ef 90       	pop	r14
    5f58:	df 90       	pop	r13
    5f5a:	cf 90       	pop	r12
    5f5c:	08 95       	ret

00005f5e <add_to_near_atoms>:
    5f5e:	cf 93       	push	r28
    5f60:	df 93       	push	r29
    5f62:	cd b7       	in	r28, 0x3d	; 61
    5f64:	de b7       	in	r29, 0x3e	; 62
    5f66:	80 91 38 31 	lds	r24, 0x3138
    5f6a:	90 91 39 31 	lds	r25, 0x3139
    5f6e:	89 2b       	or	r24, r25
    5f70:	51 f0       	breq	.+20     	; 0x5f86 <add_to_near_atoms+0x28>
    5f72:	ee e5       	ldi	r30, 0x5E	; 94
    5f74:	f1 e3       	ldi	r31, 0x31	; 49
    5f76:	81 e0       	ldi	r24, 0x01	; 1
    5f78:	90 e0       	ldi	r25, 0x00	; 0
    5f7a:	ac 01       	movw	r20, r24
    5f7c:	20 81       	ld	r18, Z
    5f7e:	31 81       	ldd	r19, Z+1	; 0x01
    5f80:	23 2b       	or	r18, r19
    5f82:	01 f5       	brne	.+64     	; 0x5fc4 <add_to_near_atoms+0x66>
    5f84:	02 c0       	rjmp	.+4      	; 0x5f8a <add_to_near_atoms+0x2c>
    5f86:	40 e0       	ldi	r20, 0x00	; 0
    5f88:	50 e0       	ldi	r21, 0x00	; 0
    5f8a:	86 e2       	ldi	r24, 0x26	; 38
    5f8c:	84 9f       	mul	r24, r20
    5f8e:	d0 01       	movw	r26, r0
    5f90:	85 9f       	mul	r24, r21
    5f92:	b0 0d       	add	r27, r0
    5f94:	11 24       	eor	r1, r1
    5f96:	a5 5e       	subi	r26, 0xE5	; 229
    5f98:	be 4c       	sbci	r27, 0xCE	; 206
    5f9a:	fe 01       	movw	r30, r28
    5f9c:	36 96       	adiw	r30, 0x06	; 6
    5f9e:	01 90       	ld	r0, Z+
    5fa0:	0d 92       	st	X+, r0
    5fa2:	8a 95       	dec	r24
    5fa4:	e1 f7       	brne	.-8      	; 0x5f9e <add_to_near_atoms+0x40>
    5fa6:	ce 01       	movw	r24, r28
    5fa8:	4e 96       	adiw	r24, 0x1e	; 30
    5faa:	9f 93       	push	r25
    5fac:	8f 93       	push	r24
    5fae:	8b e7       	ldi	r24, 0x7B	; 123
    5fb0:	99 e2       	ldi	r25, 0x29	; 41
    5fb2:	9f 93       	push	r25
    5fb4:	8f 93       	push	r24
    5fb6:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    5fba:	0f 90       	pop	r0
    5fbc:	0f 90       	pop	r0
    5fbe:	0f 90       	pop	r0
    5fc0:	0f 90       	pop	r0
    5fc2:	09 c0       	rjmp	.+18     	; 0x5fd6 <add_to_near_atoms+0x78>
    5fc4:	01 96       	adiw	r24, 0x01	; 1
    5fc6:	b6 96       	adiw	r30, 0x26	; 38
    5fc8:	8c 30       	cpi	r24, 0x0C	; 12
    5fca:	91 05       	cpc	r25, r1
    5fcc:	b1 f6       	brne	.-84     	; 0x5f7a <add_to_near_atoms+0x1c>
    5fce:	88 e8       	ldi	r24, 0x88	; 136
    5fd0:	99 e2       	ldi	r25, 0x29	; 41
    5fd2:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    5fd6:	df 91       	pop	r29
    5fd8:	cf 91       	pop	r28
    5fda:	08 95       	ret

00005fdc <getAtomFromAtomicNum>:
    5fdc:	cf 93       	push	r28
    5fde:	df 93       	push	r29
    5fe0:	ec 01       	movw	r28, r24
    5fe2:	46 2f       	mov	r20, r22
    5fe4:	50 e0       	ldi	r21, 0x00	; 0
    5fe6:	fa 01       	movw	r30, r20
    5fe8:	31 97       	sbiw	r30, 0x01	; 1
    5fea:	e5 33       	cpi	r30, 0x35	; 53
    5fec:	f1 05       	cpc	r31, r1
    5fee:	08 f0       	brcs	.+2      	; 0x5ff2 <getAtomFromAtomicNum+0x16>
    5ff0:	9e c0       	rjmp	.+316    	; 0x612e <getAtomFromAtomicNum+0x152>
    5ff2:	ed 5e       	subi	r30, 0xED	; 237
    5ff4:	fe 4f       	sbci	r31, 0xFE	; 254
    5ff6:	0c 94 99 3e 	jmp	0x7d32	; 0x7d32 <__tablejump2__>
    5ffa:	40 e0       	ldi	r20, 0x00	; 0
    5ffc:	68 ec       	ldi	r22, 0xC8	; 200
    5ffe:	8f ef       	ldi	r24, 0xFF	; 255
    6000:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6004:	8d e1       	ldi	r24, 0x1D	; 29
    6006:	ea e8       	ldi	r30, 0x8A	; 138
    6008:	f1 e2       	ldi	r31, 0x21	; 33
    600a:	de 01       	movw	r26, r28
    600c:	01 90       	ld	r0, Z+
    600e:	0d 92       	st	X+, r0
    6010:	8a 95       	dec	r24
    6012:	e1 f7       	brne	.-8      	; 0x600c <getAtomFromAtomicNum+0x30>
    6014:	94 c0       	rjmp	.+296    	; 0x613e <getAtomFromAtomicNum+0x162>
    6016:	40 e0       	ldi	r20, 0x00	; 0
    6018:	62 e3       	ldi	r22, 0x32	; 50
    601a:	8f ef       	ldi	r24, 0xFF	; 255
    601c:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6020:	8d e1       	ldi	r24, 0x1D	; 29
    6022:	ed e6       	ldi	r30, 0x6D	; 109
    6024:	f1 e2       	ldi	r31, 0x21	; 33
    6026:	de 01       	movw	r26, r28
    6028:	01 90       	ld	r0, Z+
    602a:	0d 92       	st	X+, r0
    602c:	8a 95       	dec	r24
    602e:	e1 f7       	brne	.-8      	; 0x6028 <getAtomFromAtomicNum+0x4c>
    6030:	86 c0       	rjmp	.+268    	; 0x613e <getAtomFromAtomicNum+0x162>
    6032:	4f ef       	ldi	r20, 0xFF	; 255
    6034:	64 e6       	ldi	r22, 0x64	; 100
    6036:	84 e6       	ldi	r24, 0x64	; 100
    6038:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    603c:	8d e1       	ldi	r24, 0x1D	; 29
    603e:	e0 e5       	ldi	r30, 0x50	; 80
    6040:	f1 e2       	ldi	r31, 0x21	; 33
    6042:	de 01       	movw	r26, r28
    6044:	01 90       	ld	r0, Z+
    6046:	0d 92       	st	X+, r0
    6048:	8a 95       	dec	r24
    604a:	e1 f7       	brne	.-8      	; 0x6044 <getAtomFromAtomicNum+0x68>
    604c:	78 c0       	rjmp	.+240    	; 0x613e <getAtomFromAtomicNum+0x162>
    604e:	44 e6       	ldi	r20, 0x64	; 100
    6050:	6f ef       	ldi	r22, 0xFF	; 255
    6052:	84 e6       	ldi	r24, 0x64	; 100
    6054:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6058:	8d e1       	ldi	r24, 0x1D	; 29
    605a:	e3 e3       	ldi	r30, 0x33	; 51
    605c:	f1 e2       	ldi	r31, 0x21	; 33
    605e:	de 01       	movw	r26, r28
    6060:	01 90       	ld	r0, Z+
    6062:	0d 92       	st	X+, r0
    6064:	8a 95       	dec	r24
    6066:	e1 f7       	brne	.-8      	; 0x6060 <getAtomFromAtomicNum+0x84>
    6068:	6a c0       	rjmp	.+212    	; 0x613e <getAtomFromAtomicNum+0x162>
    606a:	4f ef       	ldi	r20, 0xFF	; 255
    606c:	60 e0       	ldi	r22, 0x00	; 0
    606e:	84 e6       	ldi	r24, 0x64	; 100
    6070:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6074:	8d e1       	ldi	r24, 0x1D	; 29
    6076:	e6 e1       	ldi	r30, 0x16	; 22
    6078:	f1 e2       	ldi	r31, 0x21	; 33
    607a:	de 01       	movw	r26, r28
    607c:	01 90       	ld	r0, Z+
    607e:	0d 92       	st	X+, r0
    6080:	8a 95       	dec	r24
    6082:	e1 f7       	brne	.-8      	; 0x607c <getAtomFromAtomicNum+0xa0>
    6084:	5c c0       	rjmp	.+184    	; 0x613e <getAtomFromAtomicNum+0x162>
    6086:	4a e0       	ldi	r20, 0x0A	; 10
    6088:	6a e0       	ldi	r22, 0x0A	; 10
    608a:	88 ec       	ldi	r24, 0xC8	; 200
    608c:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6090:	8d e1       	ldi	r24, 0x1D	; 29
    6092:	e9 ef       	ldi	r30, 0xF9	; 249
    6094:	f0 e2       	ldi	r31, 0x20	; 32
    6096:	de 01       	movw	r26, r28
    6098:	01 90       	ld	r0, Z+
    609a:	0d 92       	st	X+, r0
    609c:	8a 95       	dec	r24
    609e:	e1 f7       	brne	.-8      	; 0x6098 <getAtomFromAtomicNum+0xbc>
    60a0:	4e c0       	rjmp	.+156    	; 0x613e <getAtomFromAtomicNum+0x162>
    60a2:	4f ef       	ldi	r20, 0xFF	; 255
    60a4:	60 e0       	ldi	r22, 0x00	; 0
    60a6:	80 e0       	ldi	r24, 0x00	; 0
    60a8:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    60ac:	8d e1       	ldi	r24, 0x1D	; 29
    60ae:	ec ed       	ldi	r30, 0xDC	; 220
    60b0:	f0 e2       	ldi	r31, 0x20	; 32
    60b2:	de 01       	movw	r26, r28
    60b4:	01 90       	ld	r0, Z+
    60b6:	0d 92       	st	X+, r0
    60b8:	8a 95       	dec	r24
    60ba:	e1 f7       	brne	.-8      	; 0x60b4 <getAtomFromAtomicNum+0xd8>
    60bc:	40 c0       	rjmp	.+128    	; 0x613e <getAtomFromAtomicNum+0x162>
    60be:	40 e0       	ldi	r20, 0x00	; 0
    60c0:	6f ef       	ldi	r22, 0xFF	; 255
    60c2:	80 e0       	ldi	r24, 0x00	; 0
    60c4:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    60c8:	8d e1       	ldi	r24, 0x1D	; 29
    60ca:	ef eb       	ldi	r30, 0xBF	; 191
    60cc:	f0 e2       	ldi	r31, 0x20	; 32
    60ce:	de 01       	movw	r26, r28
    60d0:	01 90       	ld	r0, Z+
    60d2:	0d 92       	st	X+, r0
    60d4:	8a 95       	dec	r24
    60d6:	e1 f7       	brne	.-8      	; 0x60d0 <getAtomFromAtomicNum+0xf4>
    60d8:	32 c0       	rjmp	.+100    	; 0x613e <getAtomFromAtomicNum+0x162>
    60da:	40 e0       	ldi	r20, 0x00	; 0
    60dc:	6f ef       	ldi	r22, 0xFF	; 255
    60de:	80 e0       	ldi	r24, 0x00	; 0
    60e0:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    60e4:	8d e1       	ldi	r24, 0x1D	; 29
    60e6:	e2 ea       	ldi	r30, 0xA2	; 162
    60e8:	f0 e2       	ldi	r31, 0x20	; 32
    60ea:	de 01       	movw	r26, r28
    60ec:	01 90       	ld	r0, Z+
    60ee:	0d 92       	st	X+, r0
    60f0:	8a 95       	dec	r24
    60f2:	e1 f7       	brne	.-8      	; 0x60ec <getAtomFromAtomicNum+0x110>
    60f4:	24 c0       	rjmp	.+72     	; 0x613e <getAtomFromAtomicNum+0x162>
    60f6:	40 e0       	ldi	r20, 0x00	; 0
    60f8:	6f ef       	ldi	r22, 0xFF	; 255
    60fa:	80 e0       	ldi	r24, 0x00	; 0
    60fc:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6100:	8d e1       	ldi	r24, 0x1D	; 29
    6102:	e5 e8       	ldi	r30, 0x85	; 133
    6104:	f0 e2       	ldi	r31, 0x20	; 32
    6106:	de 01       	movw	r26, r28
    6108:	01 90       	ld	r0, Z+
    610a:	0d 92       	st	X+, r0
    610c:	8a 95       	dec	r24
    610e:	e1 f7       	brne	.-8      	; 0x6108 <getAtomFromAtomicNum+0x12c>
    6110:	16 c0       	rjmp	.+44     	; 0x613e <getAtomFromAtomicNum+0x162>
    6112:	40 e0       	ldi	r20, 0x00	; 0
    6114:	6f ef       	ldi	r22, 0xFF	; 255
    6116:	80 e0       	ldi	r24, 0x00	; 0
    6118:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    611c:	8d e1       	ldi	r24, 0x1D	; 29
    611e:	e8 e6       	ldi	r30, 0x68	; 104
    6120:	f0 e2       	ldi	r31, 0x20	; 32
    6122:	de 01       	movw	r26, r28
    6124:	01 90       	ld	r0, Z+
    6126:	0d 92       	st	X+, r0
    6128:	8a 95       	dec	r24
    612a:	e1 f7       	brne	.-8      	; 0x6124 <getAtomFromAtomicNum+0x148>
    612c:	08 c0       	rjmp	.+16     	; 0x613e <getAtomFromAtomicNum+0x162>
    612e:	8a ea       	ldi	r24, 0xAA	; 170
    6130:	99 e2       	ldi	r25, 0x29	; 41
    6132:	9f 93       	push	r25
    6134:	8f 93       	push	r24
    6136:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    613a:	0f 90       	pop	r0
    613c:	0f 90       	pop	r0
    613e:	ce 01       	movw	r24, r28
    6140:	df 91       	pop	r29
    6142:	cf 91       	pop	r28
    6144:	08 95       	ret

00006146 <setAtomColor>:
    6146:	cf 93       	push	r28
    6148:	df 93       	push	r29
    614a:	cd b7       	in	r28, 0x3d	; 61
    614c:	de b7       	in	r29, 0x3e	; 62
    614e:	8a a1       	ldd	r24, Y+34	; 0x22
    6150:	90 e0       	ldi	r25, 0x00	; 0
    6152:	fc 01       	movw	r30, r24
    6154:	31 97       	sbiw	r30, 0x01	; 1
    6156:	e5 33       	cpi	r30, 0x35	; 53
    6158:	f1 05       	cpc	r31, r1
    615a:	08 f0       	brcs	.+2      	; 0x615e <setAtomColor+0x18>
    615c:	46 c0       	rjmp	.+140    	; 0x61ea <setAtomColor+0xa4>
    615e:	e8 5b       	subi	r30, 0xB8	; 184
    6160:	fe 4f       	sbci	r31, 0xFE	; 254
    6162:	0c 94 99 3e 	jmp	0x7d32	; 0x7d32 <__tablejump2__>
    6166:	40 e0       	ldi	r20, 0x00	; 0
    6168:	68 ec       	ldi	r22, 0xC8	; 200
    616a:	8f ef       	ldi	r24, 0xFF	; 255
    616c:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6170:	44 c0       	rjmp	.+136    	; 0x61fa <setAtomColor+0xb4>
    6172:	40 e0       	ldi	r20, 0x00	; 0
    6174:	62 e3       	ldi	r22, 0x32	; 50
    6176:	8f ef       	ldi	r24, 0xFF	; 255
    6178:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    617c:	3e c0       	rjmp	.+124    	; 0x61fa <setAtomColor+0xb4>
    617e:	4f ef       	ldi	r20, 0xFF	; 255
    6180:	64 e6       	ldi	r22, 0x64	; 100
    6182:	84 e6       	ldi	r24, 0x64	; 100
    6184:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6188:	38 c0       	rjmp	.+112    	; 0x61fa <setAtomColor+0xb4>
    618a:	44 e6       	ldi	r20, 0x64	; 100
    618c:	6f ef       	ldi	r22, 0xFF	; 255
    618e:	84 e6       	ldi	r24, 0x64	; 100
    6190:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6194:	32 c0       	rjmp	.+100    	; 0x61fa <setAtomColor+0xb4>
    6196:	4f ef       	ldi	r20, 0xFF	; 255
    6198:	60 e0       	ldi	r22, 0x00	; 0
    619a:	84 e6       	ldi	r24, 0x64	; 100
    619c:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    61a0:	2c c0       	rjmp	.+88     	; 0x61fa <setAtomColor+0xb4>
    61a2:	4a e0       	ldi	r20, 0x0A	; 10
    61a4:	6a e0       	ldi	r22, 0x0A	; 10
    61a6:	88 ec       	ldi	r24, 0xC8	; 200
    61a8:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    61ac:	26 c0       	rjmp	.+76     	; 0x61fa <setAtomColor+0xb4>
    61ae:	4f ef       	ldi	r20, 0xFF	; 255
    61b0:	60 e0       	ldi	r22, 0x00	; 0
    61b2:	80 e0       	ldi	r24, 0x00	; 0
    61b4:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    61b8:	20 c0       	rjmp	.+64     	; 0x61fa <setAtomColor+0xb4>
    61ba:	40 e0       	ldi	r20, 0x00	; 0
    61bc:	6f ef       	ldi	r22, 0xFF	; 255
    61be:	80 e0       	ldi	r24, 0x00	; 0
    61c0:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    61c4:	1a c0       	rjmp	.+52     	; 0x61fa <setAtomColor+0xb4>
    61c6:	40 e0       	ldi	r20, 0x00	; 0
    61c8:	6f ef       	ldi	r22, 0xFF	; 255
    61ca:	80 e0       	ldi	r24, 0x00	; 0
    61cc:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    61d0:	14 c0       	rjmp	.+40     	; 0x61fa <setAtomColor+0xb4>
    61d2:	40 e0       	ldi	r20, 0x00	; 0
    61d4:	6f ef       	ldi	r22, 0xFF	; 255
    61d6:	80 e0       	ldi	r24, 0x00	; 0
    61d8:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    61dc:	0e c0       	rjmp	.+28     	; 0x61fa <setAtomColor+0xb4>
    61de:	40 e0       	ldi	r20, 0x00	; 0
    61e0:	6f ef       	ldi	r22, 0xFF	; 255
    61e2:	80 e0       	ldi	r24, 0x00	; 0
    61e4:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    61e8:	08 c0       	rjmp	.+16     	; 0x61fa <setAtomColor+0xb4>
    61ea:	8a ea       	ldi	r24, 0xAA	; 170
    61ec:	99 e2       	ldi	r25, 0x29	; 41
    61ee:	9f 93       	push	r25
    61f0:	8f 93       	push	r24
    61f2:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    61f6:	0f 90       	pop	r0
    61f8:	0f 90       	pop	r0
    61fa:	df 91       	pop	r29
    61fc:	cf 91       	pop	r28
    61fe:	08 95       	ret

00006200 <found_diatomic_routine>:
    6200:	40 e0       	ldi	r20, 0x00	; 0
    6202:	60 e0       	ldi	r22, 0x00	; 0
    6204:	8f ef       	ldi	r24, 0xFF	; 255
    6206:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    620a:	8c e2       	ldi	r24, 0x2C	; 44
    620c:	91 e0       	ldi	r25, 0x01	; 1
    620e:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    6212:	8d b7       	in	r24, 0x3d	; 61
    6214:	9e b7       	in	r25, 0x3e	; 62
    6216:	4d 97       	sbiw	r24, 0x1d	; 29
    6218:	8d bf       	out	0x3d, r24	; 61
    621a:	9e bf       	out	0x3e, r25	; 62
    621c:	ad b7       	in	r26, 0x3d	; 61
    621e:	be b7       	in	r27, 0x3e	; 62
    6220:	11 96       	adiw	r26, 0x01	; 1
    6222:	8d e1       	ldi	r24, 0x1D	; 29
    6224:	e5 ee       	ldi	r30, 0xE5	; 229
    6226:	f2 e3       	ldi	r31, 0x32	; 50
    6228:	01 90       	ld	r0, Z+
    622a:	0d 92       	st	X+, r0
    622c:	8a 95       	dec	r24
    622e:	e1 f7       	brne	.-8      	; 0x6228 <found_diatomic_routine+0x28>
    6230:	8a df       	rcall	.-236    	; 0x6146 <setAtomColor>
    6232:	8c e2       	ldi	r24, 0x2C	; 44
    6234:	91 e0       	ldi	r25, 0x01	; 1
    6236:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    623a:	40 e0       	ldi	r20, 0x00	; 0
    623c:	60 e0       	ldi	r22, 0x00	; 0
    623e:	8f ef       	ldi	r24, 0xFF	; 255
    6240:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6244:	8c e2       	ldi	r24, 0x2C	; 44
    6246:	91 e0       	ldi	r25, 0x01	; 1
    6248:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    624c:	8d b7       	in	r24, 0x3d	; 61
    624e:	9e b7       	in	r25, 0x3e	; 62
    6250:	4d 97       	sbiw	r24, 0x1d	; 29
    6252:	8d bf       	out	0x3d, r24	; 61
    6254:	9e bf       	out	0x3e, r25	; 62
    6256:	ad b7       	in	r26, 0x3d	; 61
    6258:	be b7       	in	r27, 0x3e	; 62
    625a:	11 96       	adiw	r26, 0x01	; 1
    625c:	8d e1       	ldi	r24, 0x1D	; 29
    625e:	e5 ee       	ldi	r30, 0xE5	; 229
    6260:	f2 e3       	ldi	r31, 0x32	; 50
    6262:	01 90       	ld	r0, Z+
    6264:	0d 92       	st	X+, r0
    6266:	8a 95       	dec	r24
    6268:	e1 f7       	brne	.-8      	; 0x6262 <found_diatomic_routine+0x62>
    626a:	6d df       	rcall	.-294    	; 0x6146 <setAtomColor>
    626c:	8d b7       	in	r24, 0x3d	; 61
    626e:	9e b7       	in	r25, 0x3e	; 62
    6270:	ca 96       	adiw	r24, 0x3a	; 58
    6272:	8d bf       	out	0x3d, r24	; 61
    6274:	9e bf       	out	0x3e, r25	; 62
    6276:	08 95       	ret

00006278 <found_bond_routine>:
    6278:	4f ef       	ldi	r20, 0xFF	; 255
    627a:	60 e0       	ldi	r22, 0x00	; 0
    627c:	8f ef       	ldi	r24, 0xFF	; 255
    627e:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6282:	8c e2       	ldi	r24, 0x2C	; 44
    6284:	91 e0       	ldi	r25, 0x01	; 1
    6286:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    628a:	4f ef       	ldi	r20, 0xFF	; 255
    628c:	6f ef       	ldi	r22, 0xFF	; 255
    628e:	8f ef       	ldi	r24, 0xFF	; 255
    6290:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6294:	8c e2       	ldi	r24, 0x2C	; 44
    6296:	91 e0       	ldi	r25, 0x01	; 1
    6298:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    629c:	4f ef       	ldi	r20, 0xFF	; 255
    629e:	60 e0       	ldi	r22, 0x00	; 0
    62a0:	8f ef       	ldi	r24, 0xFF	; 255
    62a2:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    62a6:	8c e2       	ldi	r24, 0x2C	; 44
    62a8:	91 e0       	ldi	r25, 0x01	; 1
    62aa:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    62ae:	4f ef       	ldi	r20, 0xFF	; 255
    62b0:	6f ef       	ldi	r22, 0xFF	; 255
    62b2:	8f ef       	ldi	r24, 0xFF	; 255
    62b4:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    62b8:	8c e2       	ldi	r24, 0x2C	; 44
    62ba:	91 e0       	ldi	r25, 0x01	; 1
    62bc:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    62c0:	8d b7       	in	r24, 0x3d	; 61
    62c2:	9e b7       	in	r25, 0x3e	; 62
    62c4:	4d 97       	sbiw	r24, 0x1d	; 29
    62c6:	8d bf       	out	0x3d, r24	; 61
    62c8:	9e bf       	out	0x3e, r25	; 62
    62ca:	ad b7       	in	r26, 0x3d	; 61
    62cc:	be b7       	in	r27, 0x3e	; 62
    62ce:	11 96       	adiw	r26, 0x01	; 1
    62d0:	8d e1       	ldi	r24, 0x1D	; 29
    62d2:	e5 ee       	ldi	r30, 0xE5	; 229
    62d4:	f2 e3       	ldi	r31, 0x32	; 50
    62d6:	01 90       	ld	r0, Z+
    62d8:	0d 92       	st	X+, r0
    62da:	8a 95       	dec	r24
    62dc:	e1 f7       	brne	.-8      	; 0x62d6 <found_bond_routine+0x5e>
    62de:	33 df       	rcall	.-410    	; 0x6146 <setAtomColor>
    62e0:	8d b7       	in	r24, 0x3d	; 61
    62e2:	9e b7       	in	r25, 0x3e	; 62
    62e4:	4d 96       	adiw	r24, 0x1d	; 29
    62e6:	8d bf       	out	0x3d, r24	; 61
    62e8:	9e bf       	out	0x3e, r25	; 62
    62ea:	08 95       	ret

000062ec <broadcastChemID>:
    62ec:	cf 92       	push	r12
    62ee:	df 92       	push	r13
    62f0:	ef 92       	push	r14
    62f2:	ff 92       	push	r15
    62f4:	0f 93       	push	r16
    62f6:	1f 93       	push	r17
    62f8:	cf 93       	push	r28
    62fa:	df 93       	push	r29
    62fc:	cd b7       	in	r28, 0x3d	; 61
    62fe:	de b7       	in	r29, 0x3e	; 62
    6300:	88 ed       	ldi	r24, 0xD8	; 216
    6302:	99 e2       	ldi	r25, 0x29	; 41
    6304:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
    6308:	e0 e4       	ldi	r30, 0x40	; 64
    630a:	fa e0       	ldi	r31, 0x0A	; 10
    630c:	02 ad       	ldd	r16, Z+58	; 0x3a
    630e:	13 ad       	ldd	r17, Z+59	; 0x3b
    6310:	e0 ac       	ldd	r14, Z+56	; 0x38
    6312:	f1 ac       	ldd	r15, Z+57	; 0x39
    6314:	e0 e4       	ldi	r30, 0x40	; 64
    6316:	f9 e0       	ldi	r31, 0x09	; 9
    6318:	c0 ac       	ldd	r12, Z+56	; 0x38
    631a:	d1 ac       	ldd	r13, Z+57	; 0x39
    631c:	4f ef       	ldi	r20, 0xFF	; 255
    631e:	6f ef       	ldi	r22, 0xFF	; 255
    6320:	8f ef       	ldi	r24, 0xFF	; 255
    6322:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6326:	4d e1       	ldi	r20, 0x1D	; 29
    6328:	be 01       	movw	r22, r28
    632a:	64 5f       	subi	r22, 0xF4	; 244
    632c:	7f 4f       	sbci	r23, 0xFF	; 255
    632e:	8f e3       	ldi	r24, 0x3F	; 63
    6330:	0e 94 94 0c 	call	0x1928	; 0x1928 <ir_send>
    6334:	84 e6       	ldi	r24, 0x64	; 100
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
    633c:	4c 2d       	mov	r20, r12
    633e:	6e 2d       	mov	r22, r14
    6340:	80 2f       	mov	r24, r16
    6342:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6346:	df 91       	pop	r29
    6348:	cf 91       	pop	r28
    634a:	1f 91       	pop	r17
    634c:	0f 91       	pop	r16
    634e:	ff 90       	pop	r15
    6350:	ef 90       	pop	r14
    6352:	df 90       	pop	r13
    6354:	cf 90       	pop	r12
    6356:	08 95       	ret

00006358 <detectOtherDroplets>:

void detectOtherDroplets()
{
    6358:	2f 92       	push	r2
    635a:	3f 92       	push	r3
    635c:	4f 92       	push	r4
    635e:	5f 92       	push	r5
    6360:	6f 92       	push	r6
    6362:	7f 92       	push	r7
    6364:	8f 92       	push	r8
    6366:	9f 92       	push	r9
    6368:	af 92       	push	r10
    636a:	bf 92       	push	r11
    636c:	cf 92       	push	r12
    636e:	df 92       	push	r13
    6370:	ef 92       	push	r14
    6372:	ff 92       	push	r15
    6374:	0f 93       	push	r16
    6376:	1f 93       	push	r17
    6378:	cf 93       	push	r28
    637a:	df 93       	push	r29
	//printf("detectOtherDroplets called");
	uint16_t received_id;
	float received_range;
	float received_bearing;
	float received_heading;
	uint8_t dir_mask = check_collisions();
    637c:	0e 94 a8 10 	call	0x2150	; 0x2150 <check_collisions>
	//printf("Collisions: %02hX \r\n", dir_mask);
	
	if(rnb_updated)
    6380:	80 91 fe 2d 	lds	r24, 0x2DFE
    6384:	88 23       	and	r24, r24
    6386:	09 f4       	brne	.+2      	; 0x638a <detectOtherDroplets+0x32>
    6388:	7d c0       	rjmp	.+250    	; 0x6484 <detectOtherDroplets+0x12c>
	{
		received_id = last_good_rnb.id_number;
    638a:	00 91 f0 2d 	lds	r16, 0x2DF0
    638e:	10 91 f1 2d 	lds	r17, 0x2DF1
		received_range = last_good_rnb.range;
    6392:	40 90 e2 2d 	lds	r4, 0x2DE2
    6396:	50 90 e3 2d 	lds	r5, 0x2DE3
    639a:	60 90 e4 2d 	lds	r6, 0x2DE4
    639e:	70 90 e5 2d 	lds	r7, 0x2DE5
		received_bearing = last_good_rnb.bearing;
    63a2:	60 91 e6 2d 	lds	r22, 0x2DE6
    63a6:	70 91 e7 2d 	lds	r23, 0x2DE7
    63aa:	80 91 e8 2d 	lds	r24, 0x2DE8
    63ae:	90 91 e9 2d 	lds	r25, 0x2DE9
		received_heading = last_good_rnb.heading;
    63b2:	c0 90 ea 2d 	lds	r12, 0x2DEA
    63b6:	d0 90 eb 2d 	lds	r13, 0x2DEB
    63ba:	e0 90 ec 2d 	lds	r14, 0x2DEC
    63be:	f0 90 ed 2d 	lds	r15, 0x2DED
		//convert to degrees from radians
		received_bearing = rad_to_deg(received_bearing);
    63c2:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <rad_to_deg>
    63c6:	4b 01       	movw	r8, r22
    63c8:	5c 01       	movw	r10, r24
		received_heading = rad_to_deg(received_heading);
    63ca:	c7 01       	movw	r24, r14
    63cc:	b6 01       	movw	r22, r12
    63ce:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <rad_to_deg>
    63d2:	6b 01       	movw	r12, r22
    63d4:	7c 01       	movw	r14, r24
		//scaling the range to mm.
		received_range = received_range*10;
    63d6:	20 e0       	ldi	r18, 0x00	; 0
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	40 e2       	ldi	r20, 0x20	; 32
    63dc:	51 e4       	ldi	r21, 0x41	; 65
    63de:	c3 01       	movw	r24, r6
    63e0:	b2 01       	movw	r22, r4
    63e2:	0e 94 09 3a 	call	0x7412	; 0x7412 <__mulsf3>
    63e6:	46 2e       	mov	r4, r22
    63e8:	57 2e       	mov	r5, r23
    63ea:	38 2e       	mov	r3, r24
    63ec:	29 2e       	mov	r2, r25
		printf("range: %f\r\n", received_range);
    63ee:	9f 93       	push	r25
    63f0:	8f 93       	push	r24
    63f2:	7f 93       	push	r23
    63f4:	6f 93       	push	r22
    63f6:	84 ef       	ldi	r24, 0xF4	; 244
    63f8:	99 e2       	ldi	r25, 0x29	; 41
    63fa:	9f 93       	push	r25
    63fc:	8f 93       	push	r24
    63fe:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    6402:	ca e3       	ldi	r28, 0x3A	; 58
    6404:	d1 e3       	ldi	r29, 0x31	; 49
    6406:	0f 2e       	mov	r0, r31
    6408:	f2 e0       	ldi	r31, 0x02	; 2
    640a:	6f 2e       	mov	r6, r31
    640c:	f3 e3       	ldi	r31, 0x33	; 51
    640e:	7f 2e       	mov	r7, r31
    6410:	f0 2d       	mov	r31, r0
    6412:	0f 90       	pop	r0
    6414:	0f 90       	pop	r0
    6416:	0f 90       	pop	r0
    6418:	0f 90       	pop	r0
    641a:	0f 90       	pop	r0
    641c:	0f 90       	pop	r0
    641e:	fe 01       	movw	r30, r28
    6420:	32 97       	sbiw	r30, 0x02	; 2
		
		for(uint8_t i = 0; i < 12; i++)
		{
			if(near_atoms[i].id == received_id)
    6422:	80 81       	ld	r24, Z
    6424:	91 81       	ldd	r25, Z+1	; 0x01
    6426:	80 17       	cp	r24, r16
    6428:	91 07       	cpc	r25, r17
    642a:	81 f4       	brne	.+32     	; 0x644c <detectOtherDroplets+0xf4>
			{
				near_atoms[i].bearing = (int16_t)received_bearing;
    642c:	c5 01       	movw	r24, r10
    642e:	b4 01       	movw	r22, r8
    6430:	48 d6       	rcall	.+3216   	; 0x70c2 <__fixsfsi>
    6432:	69 83       	std	Y+1, r22	; 0x01
    6434:	7a 83       	std	Y+2, r23	; 0x02
				near_atoms[i].heading = (int16_t)received_heading;
    6436:	c7 01       	movw	r24, r14
    6438:	b6 01       	movw	r22, r12
    643a:	43 d6       	rcall	.+3206   	; 0x70c2 <__fixsfsi>
    643c:	6b 83       	std	Y+3, r22	; 0x03
    643e:	7c 83       	std	Y+4, r23	; 0x04
				near_atoms[i].range = (uint8_t)received_range;
    6440:	64 2d       	mov	r22, r4
    6442:	75 2d       	mov	r23, r5
    6444:	83 2d       	mov	r24, r3
    6446:	92 2d       	mov	r25, r2
    6448:	41 d6       	rcall	.+3202   	; 0x70cc <__fixunssfsi>
    644a:	68 83       	st	Y, r22
    644c:	a6 96       	adiw	r28, 0x26	; 38
		received_heading = rad_to_deg(received_heading);
		//scaling the range to mm.
		received_range = received_range*10;
		printf("range: %f\r\n", received_range);
		
		for(uint8_t i = 0; i < 12; i++)
    644e:	c6 15       	cp	r28, r6
    6450:	d7 05       	cpc	r29, r7
    6452:	29 f7       	brne	.-54     	; 0x641e <detectOtherDroplets+0xc6>
				near_atoms[i].bearing = (int16_t)received_bearing;
				near_atoms[i].heading = (int16_t)received_heading;
				near_atoms[i].range = (uint8_t)received_range;
			}
		}
		print_near_atoms();
    6454:	ff dc       	rcall	.-1538   	; 0x5e54 <print_near_atoms>
		broadcastChemID(myID);
    6456:	8d b7       	in	r24, 0x3d	; 61
    6458:	9e b7       	in	r25, 0x3e	; 62
    645a:	4d 97       	sbiw	r24, 0x1d	; 29
    645c:	8d bf       	out	0x3d, r24	; 61
    645e:	9e bf       	out	0x3e, r25	; 62
    6460:	ad b7       	in	r26, 0x3d	; 61
    6462:	be b7       	in	r27, 0x3e	; 62
    6464:	11 96       	adiw	r26, 0x01	; 1
    6466:	8d e1       	ldi	r24, 0x1D	; 29
    6468:	e5 ee       	ldi	r30, 0xE5	; 229
    646a:	f2 e3       	ldi	r31, 0x32	; 50
    646c:	01 90       	ld	r0, Z+
    646e:	0d 92       	st	X+, r0
    6470:	8a 95       	dec	r24
    6472:	e1 f7       	brne	.-8      	; 0x646c <detectOtherDroplets+0x114>
    6474:	3b df       	rcall	.-394    	; 0x62ec <broadcastChemID>
		rnb_updated=0;
    6476:	10 92 fe 2d 	sts	0x2DFE, r1
    647a:	8d b7       	in	r24, 0x3d	; 61
    647c:	9e b7       	in	r25, 0x3e	; 62
    647e:	4d 96       	adiw	r24, 0x1d	; 29
    6480:	8d bf       	out	0x3d, r24	; 61
    6482:	9e bf       	out	0x3e, r25	; 62
	}
}
    6484:	df 91       	pop	r29
    6486:	cf 91       	pop	r28
    6488:	1f 91       	pop	r17
    648a:	0f 91       	pop	r16
    648c:	ff 90       	pop	r15
    648e:	ef 90       	pop	r14
    6490:	df 90       	pop	r13
    6492:	cf 90       	pop	r12
    6494:	bf 90       	pop	r11
    6496:	af 90       	pop	r10
    6498:	9f 90       	pop	r9
    649a:	8f 90       	pop	r8
    649c:	7f 90       	pop	r7
    649e:	6f 90       	pop	r6
    64a0:	5f 90       	pop	r5
    64a2:	4f 90       	pop	r4
    64a4:	3f 90       	pop	r3
    64a6:	2f 90       	pop	r2
    64a8:	08 95       	ret

000064aa <add_to_bonded_atoms>:
		}
	}
}

void add_to_bonded_atoms(uint16_t ID)
{
    64aa:	bf 92       	push	r11
    64ac:	cf 92       	push	r12
    64ae:	df 92       	push	r13
    64b0:	ef 92       	push	r14
    64b2:	ff 92       	push	r15
    64b4:	0f 93       	push	r16
    64b6:	1f 93       	push	r17
    64b8:	cf 93       	push	r28
    64ba:	df 93       	push	r29
    64bc:	7c 01       	movw	r14, r24
    64be:	cd ee       	ldi	r28, 0xED	; 237
    64c0:	d2 e3       	ldi	r29, 0x32	; 50
    64c2:	09 ef       	ldi	r16, 0xF9	; 249
    64c4:	12 e3       	ldi	r17, 0x32	; 50
	uint8_t slotFound = 0;
    64c6:	b1 2c       	mov	r11, r1
		if(myID.bonded_atoms[i] == 0)
		{
			myID.bonded_atoms[i] = ID;
			slotFound = 1;
		}
		else if(myID.bonded_atoms[i] == ID) printf("ERROR: Tried to add ID to bonded_atoms while it was already there.");
    64c8:	0f 2e       	mov	r0, r31
    64ca:	f0 e0       	ldi	r31, 0x00	; 0
    64cc:	cf 2e       	mov	r12, r31
    64ce:	fa e2       	ldi	r31, 0x2A	; 42
    64d0:	df 2e       	mov	r13, r31
    64d2:	f0 2d       	mov	r31, r0
void add_to_bonded_atoms(uint16_t ID)
{
	uint8_t slotFound = 0;
	for(uint8_t i = 0; i < 6; i++)
	{
		if(myID.bonded_atoms[i] == 0)
    64d4:	28 81       	ld	r18, Y
    64d6:	39 81       	ldd	r19, Y+1	; 0x01
    64d8:	21 15       	cp	r18, r1
    64da:	31 05       	cpc	r19, r1
    64dc:	29 f4       	brne	.+10     	; 0x64e8 <add_to_bonded_atoms+0x3e>
		{
			myID.bonded_atoms[i] = ID;
    64de:	e8 82       	st	Y, r14
    64e0:	f9 82       	std	Y+1, r15	; 0x01
			slotFound = 1;
    64e2:	bb 24       	eor	r11, r11
    64e4:	b3 94       	inc	r11
    64e6:	09 c0       	rjmp	.+18     	; 0x64fa <add_to_bonded_atoms+0x50>
		}
		else if(myID.bonded_atoms[i] == ID) printf("ERROR: Tried to add ID to bonded_atoms while it was already there.");
    64e8:	2e 15       	cp	r18, r14
    64ea:	3f 05       	cpc	r19, r15
    64ec:	31 f4       	brne	.+12     	; 0x64fa <add_to_bonded_atoms+0x50>
    64ee:	df 92       	push	r13
    64f0:	cf 92       	push	r12
    64f2:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    64f6:	0f 90       	pop	r0
    64f8:	0f 90       	pop	r0
    64fa:	22 96       	adiw	r28, 0x02	; 2
}

void add_to_bonded_atoms(uint16_t ID)
{
	uint8_t slotFound = 0;
	for(uint8_t i = 0; i < 6; i++)
    64fc:	c0 17       	cp	r28, r16
    64fe:	d1 07       	cpc	r29, r17
    6500:	49 f7       	brne	.-46     	; 0x64d4 <add_to_bonded_atoms+0x2a>
			myID.bonded_atoms[i] = ID;
			slotFound = 1;
		}
		else if(myID.bonded_atoms[i] == ID) printf("ERROR: Tried to add ID to bonded_atoms while it was already there.");
	}
	if(slotFound == 0) printf("ERROR: Tried to add an ID to bonded_atoms but the array was full.");
    6502:	b1 10       	cpse	r11, r1
    6504:	08 c0       	rjmp	.+16     	; 0x6516 <add_to_bonded_atoms+0x6c>
    6506:	83 e4       	ldi	r24, 0x43	; 67
    6508:	9a e2       	ldi	r25, 0x2A	; 42
    650a:	9f 93       	push	r25
    650c:	8f 93       	push	r24
    650e:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    6512:	0f 90       	pop	r0
    6514:	0f 90       	pop	r0
}
    6516:	df 91       	pop	r29
    6518:	cf 91       	pop	r28
    651a:	1f 91       	pop	r17
    651c:	0f 91       	pop	r16
    651e:	ff 90       	pop	r15
    6520:	ef 90       	pop	r14
    6522:	df 90       	pop	r13
    6524:	cf 90       	pop	r12
    6526:	bf 90       	pop	r11
    6528:	08 95       	ret

0000652a <checkPossibleBonds>:
	}
}

//Checks to see what kind of bonds the newly discovered near_atom can make with me. Returns 1 if a bond was formed, 0 otherwise.
uint8_t checkPossibleBonds(Atom near_atom, uint16_t senderID)
{
    652a:	6f 92       	push	r6
    652c:	7f 92       	push	r7
    652e:	8f 92       	push	r8
    6530:	9f 92       	push	r9
    6532:	af 92       	push	r10
    6534:	bf 92       	push	r11
    6536:	cf 92       	push	r12
    6538:	df 92       	push	r13
    653a:	ef 92       	push	r14
    653c:	ff 92       	push	r15
    653e:	0f 93       	push	r16
    6540:	1f 93       	push	r17
    6542:	cf 93       	push	r28
    6544:	df 93       	push	r29
    6546:	cd b7       	in	r28, 0x3d	; 61
    6548:	de b7       	in	r29, 0x3e	; 62
    654a:	62 97       	sbiw	r28, 0x12	; 18
    654c:	cd bf       	out	0x3d, r28	; 61
    654e:	de bf       	out	0x3e, r29	; 62
    6550:	c8 ac       	ldd	r12, Y+56	; 0x38
    6552:	d9 ac       	ldd	r13, Y+57	; 0x39
    6554:	ea ac       	ldd	r14, Y+58	; 0x3a
    6556:	fb ac       	ldd	r15, Y+59	; 0x3b
	uint8_t otherBonds;
	uint8_t my_empty = 0; //number of empty electron slots in my valence shell
	uint8_t other_empty = 0; //number of empty electron slots in near_atom's valence shell
	
	float deltaChi;
	if(myID.chi > near_atom.chi) deltaChi = myID.chi - near_atom.chi;
    6558:	80 90 f9 32 	lds	r8, 0x32F9
    655c:	90 90 fa 32 	lds	r9, 0x32FA
    6560:	a0 90 fb 32 	lds	r10, 0x32FB
    6564:	b0 90 fc 32 	lds	r11, 0x32FC
    6568:	a7 01       	movw	r20, r14
    656a:	96 01       	movw	r18, r12
    656c:	c5 01       	movw	r24, r10
    656e:	b4 01       	movw	r22, r8
    6570:	45 d7       	rcall	.+3722   	; 0x73fc <__gesf2>
    6572:	18 16       	cp	r1, r24
    6574:	34 f4       	brge	.+12     	; 0x6582 <checkPossibleBonds+0x58>
    6576:	a7 01       	movw	r20, r14
    6578:	96 01       	movw	r18, r12
    657a:	c5 01       	movw	r24, r10
    657c:	b4 01       	movw	r22, r8
    657e:	6b d4       	rcall	.+2262   	; 0x6e56 <__subsf3>
    6580:	05 c0       	rjmp	.+10     	; 0x658c <checkPossibleBonds+0x62>
	else deltaChi = near_atom.chi - myID.chi;
    6582:	a5 01       	movw	r20, r10
    6584:	94 01       	movw	r18, r8
    6586:	c7 01       	movw	r24, r14
    6588:	b6 01       	movw	r22, r12
    658a:	65 d4       	rcall	.+2250   	; 0x6e56 <__subsf3>
    658c:	9e 01       	movw	r18, r28
    658e:	2c 5d       	subi	r18, 0xDC	; 220
    6590:	3f 4f       	sbci	r19, 0xFF	; 255
    6592:	02 2f       	mov	r16, r18
    6594:	83 2e       	mov	r8, r19
    6596:	5e 01       	movw	r10, r28
    6598:	2c e2       	ldi	r18, 0x2C	; 44
    659a:	a2 0e       	add	r10, r18
    659c:	b1 1c       	adc	r11, r1
	}
}

//Checks to see what kind of bonds the newly discovered near_atom can make with me. Returns 1 if a bond was formed, 0 otherwise.
uint8_t checkPossibleBonds(Atom near_atom, uint16_t senderID)
{
    659e:	a5 ee       	ldi	r26, 0xE5	; 229
    65a0:	b2 e3       	ldi	r27, 0x32	; 50
    65a2:	fe 01       	movw	r30, r28
    65a4:	b4 96       	adiw	r30, 0x24	; 36
	unsigned char diatomic[9];
	unsigned char newValence[9];
	uint8_t myBonds = 0;
	uint8_t otherBonds;
	uint8_t my_empty = 0; //number of empty electron slots in my valence shell
	uint8_t other_empty = 0; //number of empty electron slots in near_atom's valence shell
    65a6:	91 2c       	mov	r9, r1
{
	unsigned char diatomic[9];
	unsigned char newValence[9];
	uint8_t myBonds = 0;
	uint8_t otherBonds;
	uint8_t my_empty = 0; //number of empty electron slots in my valence shell
    65a8:	40 e0       	ldi	r20, 0x00	; 0
//Checks to see what kind of bonds the newly discovered near_atom can make with me. Returns 1 if a bond was formed, 0 otherwise.
uint8_t checkPossibleBonds(Atom near_atom, uint16_t senderID)
{
	unsigned char diatomic[9];
	unsigned char newValence[9];
	uint8_t myBonds = 0;
    65aa:	50 e0       	ldi	r21, 0x00	; 0
	if(myID.chi > near_atom.chi) deltaChi = myID.chi - near_atom.chi;
	else deltaChi = near_atom.chi - myID.chi;
	
	for(uint8_t i = 0; i < 8; i++)
	{
		if(near_atom.valence[i] == 0) other_empty++;
    65ac:	31 91       	ld	r19, Z+
    65ae:	31 11       	cpse	r19, r1
    65b0:	01 c0       	rjmp	.+2      	; 0x65b4 <checkPossibleBonds+0x8a>
    65b2:	93 94       	inc	r9
		if(myID.valence[i] == 0) my_empty++;
    65b4:	2d 91       	ld	r18, X+
    65b6:	21 11       	cpse	r18, r1
    65b8:	01 c0       	rjmp	.+2      	; 0x65bc <checkPossibleBonds+0x92>
    65ba:	4f 5f       	subi	r20, 0xFF	; 255
		if(near_atom.valence[i] == 2) otherBonds++;
    65bc:	32 30       	cpi	r19, 0x02	; 2
    65be:	09 f4       	brne	.+2      	; 0x65c2 <checkPossibleBonds+0x98>
    65c0:	1f 5f       	subi	r17, 0xFF	; 255
		if(myID.valence[i] == 2) myBonds++;
    65c2:	22 30       	cpi	r18, 0x02	; 2
    65c4:	09 f4       	brne	.+2      	; 0x65c8 <checkPossibleBonds+0x9e>
    65c6:	5f 5f       	subi	r21, 0xFF	; 255
	
	float deltaChi;
	if(myID.chi > near_atom.chi) deltaChi = myID.chi - near_atom.chi;
	else deltaChi = near_atom.chi - myID.chi;
	
	for(uint8_t i = 0; i < 8; i++)
    65c8:	ea 15       	cp	r30, r10
    65ca:	fb 05       	cpc	r31, r11
    65cc:	79 f7       	brne	.-34     	; 0x65ac <checkPossibleBonds+0x82>
		if(near_atom.valence[i] == 0) other_empty++;
		if(myID.valence[i] == 0) my_empty++;
		if(near_atom.valence[i] == 2) otherBonds++;
		if(myID.valence[i] == 2) myBonds++;
	}
	myBonds/=2;
    65ce:	75 2e       	mov	r7, r21
    65d0:	76 94       	lsr	r7
	otherBonds/=2;
    65d2:	16 95       	lsr	r17
	
	//Diatomic bond?
	if(near_atom.diatomic == 1 && near_atom.atomicNum == myID.atomicNum && other_empty != 0 && my_empty != 0 && otherBonds == 0 && myBonds == 0) 
    65d4:	2f ad       	ldd	r18, Y+63	; 0x3f
    65d6:	21 30       	cpi	r18, 0x01	; 1
    65d8:	09 f0       	breq	.+2      	; 0x65dc <checkPossibleBonds+0xb2>
    65da:	90 c0       	rjmp	.+288    	; 0x66fc <checkPossibleBonds+0x1d2>
    65dc:	21 96       	adiw	r28, 0x01	; 1
    65de:	5f ad       	ldd	r21, Y+63	; 0x3f
    65e0:	21 97       	sbiw	r28, 0x01	; 1
    65e2:	20 91 01 33 	lds	r18, 0x3301
    65e6:	52 13       	cpse	r21, r18
    65e8:	89 c0       	rjmp	.+274    	; 0x66fc <checkPossibleBonds+0x1d2>
    65ea:	99 20       	and	r9, r9
    65ec:	09 f4       	brne	.+2      	; 0x65f0 <checkPossibleBonds+0xc6>
    65ee:	86 c0       	rjmp	.+268    	; 0x66fc <checkPossibleBonds+0x1d2>
    65f0:	44 23       	and	r20, r20
    65f2:	09 f4       	brne	.+2      	; 0x65f6 <checkPossibleBonds+0xcc>
    65f4:	83 c0       	rjmp	.+262    	; 0x66fc <checkPossibleBonds+0x1d2>
    65f6:	11 11       	cpse	r17, r1
    65f8:	81 c0       	rjmp	.+258    	; 0x66fc <checkPossibleBonds+0x1d2>
    65fa:	71 10       	cpse	r7, r1
    65fc:	7f c0       	rjmp	.+254    	; 0x66fc <checkPossibleBonds+0x1d2>
	{
		printf("\tEntered diatomic if statement.\r\n");
    65fe:	85 e8       	ldi	r24, 0x85	; 133
    6600:	9a e2       	ldi	r25, 0x2A	; 42
    6602:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		diatomic[0] = 'd';
    6606:	84 e6       	ldi	r24, 0x64	; 100
    6608:	89 83       	std	Y+1, r24	; 0x01
    660a:	6e 01       	movw	r12, r28
    660c:	32 e0       	ldi	r19, 0x02	; 2
    660e:	c3 0e       	add	r12, r19
    6610:	d1 1c       	adc	r13, r1
    6612:	e0 2e       	mov	r14, r16
    6614:	f8 2c       	mov	r15, r8
    6616:	79 2c       	mov	r7, r9
		uint8_t empty_slot_counter = other_empty;
		uint8_t free_electron_counter = other_empty;
		for(uint8_t i = 1; i < 9; i++)
		{
			printf("near_atom.valence[i] = %hd \r\n ", near_atom.valence[i-1]);
    6618:	06 ea       	ldi	r16, 0xA6	; 166
    661a:	1a e2       	ldi	r17, 0x2A	; 42
				diatomic[i] = 2;
				empty_slot_counter--;
			}
			else if(near_atom.valence[i-1] == 1 && free_electron_counter > 0)
			{
				diatomic[i] = 2;
    661c:	68 94       	set
    661e:	66 24       	eor	r6, r6
    6620:	61 f8       	bld	r6, 1
		diatomic[0] = 'd';
		uint8_t empty_slot_counter = other_empty;
		uint8_t free_electron_counter = other_empty;
		for(uint8_t i = 1; i < 9; i++)
		{
			printf("near_atom.valence[i] = %hd \r\n ", near_atom.valence[i-1]);
    6622:	d7 01       	movw	r26, r14
    6624:	8d 90       	ld	r8, X+
    6626:	7d 01       	movw	r14, r26
    6628:	88 2d       	mov	r24, r8
    662a:	99 27       	eor	r25, r25
    662c:	87 fd       	sbrc	r24, 7
    662e:	90 95       	com	r25
    6630:	9f 93       	push	r25
    6632:	8f 92       	push	r8
    6634:	1f 93       	push	r17
    6636:	0f 93       	push	r16
    6638:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
			if(near_atom.valence[i-1] == 0 && empty_slot_counter > 0)
    663c:	0f 90       	pop	r0
    663e:	0f 90       	pop	r0
    6640:	0f 90       	pop	r0
    6642:	0f 90       	pop	r0
    6644:	81 10       	cpse	r8, r1
    6646:	06 c0       	rjmp	.+12     	; 0x6654 <checkPossibleBonds+0x12a>
    6648:	99 20       	and	r9, r9
    664a:	69 f0       	breq	.+26     	; 0x6666 <checkPossibleBonds+0x13c>
			{
				diatomic[i] = 2;
    664c:	f6 01       	movw	r30, r12
    664e:	60 82       	st	Z, r6
				empty_slot_counter--;
    6650:	9a 94       	dec	r9
    6652:	0b c0       	rjmp	.+22     	; 0x666a <checkPossibleBonds+0x140>
			}
			else if(near_atom.valence[i-1] == 1 && free_electron_counter > 0)
    6654:	f1 e0       	ldi	r31, 0x01	; 1
    6656:	8f 12       	cpse	r8, r31
    6658:	06 c0       	rjmp	.+12     	; 0x6666 <checkPossibleBonds+0x13c>
    665a:	77 20       	and	r7, r7
    665c:	21 f0       	breq	.+8      	; 0x6666 <checkPossibleBonds+0x13c>
			{
				diatomic[i] = 2;
    665e:	d6 01       	movw	r26, r12
    6660:	6c 92       	st	X, r6
				free_electron_counter = free_electron_counter - 1;
    6662:	7a 94       	dec	r7
    6664:	02 c0       	rjmp	.+4      	; 0x666a <checkPossibleBonds+0x140>
			}
			else diatomic[i] = near_atom.valence[i-1];
    6666:	f6 01       	movw	r30, r12
    6668:	80 82       	st	Z, r8
    666a:	ff ef       	ldi	r31, 0xFF	; 255
    666c:	cf 1a       	sub	r12, r31
    666e:	df 0a       	sbc	r13, r31
	{
		printf("\tEntered diatomic if statement.\r\n");
		diatomic[0] = 'd';
		uint8_t empty_slot_counter = other_empty;
		uint8_t free_electron_counter = other_empty;
		for(uint8_t i = 1; i < 9; i++)
    6670:	ae 14       	cp	r10, r14
    6672:	bf 04       	cpc	r11, r15
    6674:	b1 f6       	brne	.-84     	; 0x6622 <checkPossibleBonds+0xf8>
		}
		//printf("At the end of the diatomic statement in checkPossibleBonds, valence is: ");
		//printValence(diatomic);
		//for(uint8_t i=0; i<9; i++) printf(" %hd ", (int8_t)diatomic[i]); 
		//printf("\r\n");
		found_diatomic_routine();
    6676:	c4 dd       	rcall	.-1144   	; 0x6200 <found_diatomic_routine>
		for(uint8_t i = 0; i < 6; i++)
		{
			if(myID.bonded_atoms[i] == 0 || myID.bonded_atoms[i] == senderID)
    6678:	80 91 ed 32 	lds	r24, 0x32ED
    667c:	90 91 ee 32 	lds	r25, 0x32EE
    6680:	00 97       	sbiw	r24, 0x00	; 0
    6682:	c9 f0       	breq	.+50     	; 0x66b6 <checkPossibleBonds+0x18c>
    6684:	23 96       	adiw	r28, 0x03	; 3
    6686:	2e ad       	ldd	r18, Y+62	; 0x3e
    6688:	3f ad       	ldd	r19, Y+63	; 0x3f
    668a:	23 97       	sbiw	r28, 0x03	; 3
    668c:	82 17       	cp	r24, r18
    668e:	93 07       	cpc	r25, r19
    6690:	a9 f0       	breq	.+42     	; 0x66bc <checkPossibleBonds+0x192>
    6692:	ef ee       	ldi	r30, 0xEF	; 239
    6694:	f2 e3       	ldi	r31, 0x32	; 50
    6696:	81 e0       	ldi	r24, 0x01	; 1
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	9c 01       	movw	r18, r24
    669c:	41 91       	ld	r20, Z+
    669e:	51 91       	ld	r21, Z+
    66a0:	41 15       	cp	r20, r1
    66a2:	51 05       	cpc	r21, r1
    66a4:	69 f0       	breq	.+26     	; 0x66c0 <checkPossibleBonds+0x196>
    66a6:	23 96       	adiw	r28, 0x03	; 3
    66a8:	6e ad       	ldd	r22, Y+62	; 0x3e
    66aa:	7f ad       	ldd	r23, Y+63	; 0x3f
    66ac:	23 97       	sbiw	r28, 0x03	; 3
    66ae:	46 17       	cp	r20, r22
    66b0:	57 07       	cpc	r21, r23
    66b2:	91 f4       	brne	.+36     	; 0x66d8 <checkPossibleBonds+0x1ae>
    66b4:	05 c0       	rjmp	.+10     	; 0x66c0 <checkPossibleBonds+0x196>
    66b6:	20 e0       	ldi	r18, 0x00	; 0
    66b8:	30 e0       	ldi	r19, 0x00	; 0
    66ba:	02 c0       	rjmp	.+4      	; 0x66c0 <checkPossibleBonds+0x196>
    66bc:	20 e0       	ldi	r18, 0x00	; 0
    66be:	30 e0       	ldi	r19, 0x00	; 0
			{
				myID.bonded_atoms[i] = senderID;
    66c0:	22 0f       	add	r18, r18
    66c2:	33 1f       	adc	r19, r19
    66c4:	f9 01       	movw	r30, r18
    66c6:	e3 51       	subi	r30, 0x13	; 19
    66c8:	fd 4c       	sbci	r31, 0xCD	; 205
    66ca:	23 96       	adiw	r28, 0x03	; 3
    66cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    66ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    66d0:	23 97       	sbiw	r28, 0x03	; 3
    66d2:	80 83       	st	Z, r24
    66d4:	91 83       	std	Z+1, r25	; 0x01
				break;
    66d6:	04 c0       	rjmp	.+8      	; 0x66e0 <checkPossibleBonds+0x1b6>
    66d8:	01 96       	adiw	r24, 0x01	; 1
		//printf("At the end of the diatomic statement in checkPossibleBonds, valence is: ");
		//printValence(diatomic);
		//for(uint8_t i=0; i<9; i++) printf(" %hd ", (int8_t)diatomic[i]); 
		//printf("\r\n");
		found_diatomic_routine();
		for(uint8_t i = 0; i < 6; i++)
    66da:	86 30       	cpi	r24, 0x06	; 6
    66dc:	91 05       	cpc	r25, r1
    66de:	e9 f6       	brne	.-70     	; 0x669a <checkPossibleBonds+0x170>
			{
				myID.bonded_atoms[i] = senderID;
				break;
			}
		}
		ir_targeted_send(ALL_DIRS, diatomic, 9, senderID);
    66e0:	23 96       	adiw	r28, 0x03	; 3
    66e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    66e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    66e6:	23 97       	sbiw	r28, 0x03	; 3
    66e8:	49 e0       	ldi	r20, 0x09	; 9
    66ea:	50 e0       	ldi	r21, 0x00	; 0
    66ec:	be 01       	movw	r22, r28
    66ee:	6f 5f       	subi	r22, 0xFF	; 255
    66f0:	7f 4f       	sbci	r23, 0xFF	; 255
    66f2:	8f e3       	ldi	r24, 0x3F	; 63
    66f4:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <ir_targeted_send>
		return 1;
    66f8:	81 e0       	ldi	r24, 0x01	; 1
    66fa:	ac c0       	rjmp	.+344    	; 0x6854 <checkPossibleBonds+0x32a>
	}
	
	//Ionic bond?
	else if(deltaChi > 1.5)
    66fc:	20 e0       	ldi	r18, 0x00	; 0
    66fe:	30 e0       	ldi	r19, 0x00	; 0
    6700:	40 ec       	ldi	r20, 0xC0	; 192
    6702:	5f e3       	ldi	r21, 0x3F	; 63
    6704:	7b d6       	rcall	.+3318   	; 0x73fc <__gesf2>
    6706:	18 16       	cp	r1, r24
    6708:	0c f0       	brlt	.+2      	; 0x670c <checkPossibleBonds+0x1e2>
    670a:	a0 c0       	rjmp	.+320    	; 0x684c <checkPossibleBonds+0x322>
	{
		newValence[0] = 'i';
    670c:	89 e6       	ldi	r24, 0x69	; 105
    670e:	8a 87       	std	Y+10, r24	; 0x0a
		if(near_atom.bondType == 2 || myID.bondType == 2) return -1; //near_atom is already bonded covalently, or I am
    6710:	8e ad       	ldd	r24, Y+62	; 0x3e
    6712:	82 30       	cpi	r24, 0x02	; 2
    6714:	09 f4       	brne	.+2      	; 0x6718 <checkPossibleBonds+0x1ee>
    6716:	9b c0       	rjmp	.+310    	; 0x684e <checkPossibleBonds+0x324>
    6718:	80 91 ff 32 	lds	r24, 0x32FF
    671c:	82 30       	cpi	r24, 0x02	; 2
    671e:	09 f4       	brne	.+2      	; 0x6722 <checkPossibleBonds+0x1f8>
    6720:	98 c0       	rjmp	.+304    	; 0x6852 <checkPossibleBonds+0x328>
		//How do I check if there's more than one type of cation to each anion?
		
		if(otherBonds == 0 && myBonds == 0)
    6722:	11 11       	cpse	r17, r1
    6724:	93 c0       	rjmp	.+294    	; 0x684c <checkPossibleBonds+0x322>
    6726:	71 10       	cpse	r7, r1
    6728:	91 c0       	rjmp	.+290    	; 0x684c <checkPossibleBonds+0x322>
		{
			add_to_bonded_atoms(senderID);
    672a:	23 96       	adiw	r28, 0x03	; 3
    672c:	8e ad       	ldd	r24, Y+62	; 0x3e
    672e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6730:	23 97       	sbiw	r28, 0x03	; 3
    6732:	bb de       	rcall	.-650    	; 0x64aa <add_to_bonded_atoms>
			myID.bondType = 1;
    6734:	81 e0       	ldi	r24, 0x01	; 1
    6736:	80 93 ff 32 	sts	0x32FF, r24
			uint8_t zero = 1;
			uint8_t one = 1;
			if(myID.chi > near_atom.chi)
    673a:	20 91 f9 32 	lds	r18, 0x32F9
    673e:	30 91 fa 32 	lds	r19, 0x32FA
    6742:	40 91 fb 32 	lds	r20, 0x32FB
    6746:	50 91 fc 32 	lds	r21, 0x32FC
    674a:	c7 01       	movw	r24, r14
    674c:	b6 01       	movw	r22, r12
    674e:	4a d4       	rcall	.+2196   	; 0x6fe4 <__cmpsf2>
    6750:	88 23       	and	r24, r24
    6752:	0c f0       	brlt	.+2      	; 0x6756 <checkPossibleBonds+0x22c>
    6754:	41 c0       	rjmp	.+130    	; 0x67d8 <checkPossibleBonds+0x2ae>
    6756:	8d ee       	ldi	r24, 0xED	; 237
    6758:	92 e3       	ldi	r25, 0x32	; 50
    675a:	e5 ee       	ldi	r30, 0xE5	; 229
    675c:	f2 e3       	ldi	r31, 0x32	; 50
    675e:	41 e0       	ldi	r20, 0x01	; 1
    6760:	31 e0       	ldi	r19, 0x01	; 1
						myID.valence[i] = 2;
						zero--;
					}
					else if(myID.valence[i] == 1 && one != 0)
					{
						myID.valence[i] = 2;
    6762:	52 e0       	ldi	r21, 0x02	; 2
			if(myID.chi > near_atom.chi)
			{
				//Turn one of my electrons and one of my free slots into bonded electrons, and tell near_atom to remove a free electron
				for(uint8_t i = 0; i < 8; i++)
				{
					if(myID.valence[i] == 0 && zero != 0)
    6764:	20 81       	ld	r18, Z
    6766:	21 11       	cpse	r18, r1
    6768:	05 c0       	rjmp	.+10     	; 0x6774 <checkPossibleBonds+0x24a>
    676a:	33 23       	and	r19, r19
    676c:	49 f0       	breq	.+18     	; 0x6780 <checkPossibleBonds+0x256>
					{
						myID.valence[i] = 2;
    676e:	50 83       	st	Z, r21
						zero--;
    6770:	31 50       	subi	r19, 0x01	; 1
    6772:	06 c0       	rjmp	.+12     	; 0x6780 <checkPossibleBonds+0x256>
					}
					else if(myID.valence[i] == 1 && one != 0)
    6774:	21 30       	cpi	r18, 0x01	; 1
    6776:	21 f4       	brne	.+8      	; 0x6780 <checkPossibleBonds+0x256>
    6778:	44 23       	and	r20, r20
    677a:	11 f0       	breq	.+4      	; 0x6780 <checkPossibleBonds+0x256>
					{
						myID.valence[i] = 2;
    677c:	50 83       	st	Z, r21
						one--;
    677e:	41 50       	subi	r20, 0x01	; 1
    6780:	31 96       	adiw	r30, 0x01	; 1
			uint8_t zero = 1;
			uint8_t one = 1;
			if(myID.chi > near_atom.chi)
			{
				//Turn one of my electrons and one of my free slots into bonded electrons, and tell near_atom to remove a free electron
				for(uint8_t i = 0; i < 8; i++)
    6782:	e8 17       	cp	r30, r24
    6784:	f9 07       	cpc	r31, r25
    6786:	71 f7       	brne	.-36     	; 0x6764 <checkPossibleBonds+0x23a>
						one--;
					}
				}
				//Fill newValence by copying near_atom's current valence shell into newValence and removing one of its free electrons.
				//newValence starts with the char 'c', so index 0 of near_atom.valence is index 1 of newValence
				newValence[1] = near_atom.valence[0];
    6788:	fe 01       	movw	r30, r28
    678a:	b4 96       	adiw	r30, 0x24	; 36
    678c:	81 91       	ld	r24, Z+
    678e:	8b 87       	std	Y+11, r24	; 0x0b
    6790:	ae 01       	movw	r20, r28
    6792:	44 5f       	subi	r20, 0xF4	; 244
    6794:	5f 4f       	sbci	r21, 0xFF	; 255
				for(uint8_t i = 1; i < 8; i++)
				{
					if(near_atom.valence[i] == 0 && near_atom.valence[i-1] == 1) newValence[i+1] = 0;
    6796:	21 91       	ld	r18, Z+
    6798:	21 11       	cpse	r18, r1
    679a:	09 c0       	rjmp	.+18     	; 0x67ae <checkPossibleBonds+0x284>
    679c:	cf 01       	movw	r24, r30
    679e:	02 97       	sbiw	r24, 0x02	; 2
    67a0:	dc 01       	movw	r26, r24
    67a2:	8c 91       	ld	r24, X
    67a4:	81 30       	cpi	r24, 0x01	; 1
    67a6:	19 f4       	brne	.+6      	; 0x67ae <checkPossibleBonds+0x284>
    67a8:	da 01       	movw	r26, r20
    67aa:	1c 92       	st	X, r1
    67ac:	02 c0       	rjmp	.+4      	; 0x67b2 <checkPossibleBonds+0x288>
					else newValence[i+1] = near_atom.valence[i];
    67ae:	da 01       	movw	r26, r20
    67b0:	2c 93       	st	X, r18
    67b2:	4f 5f       	subi	r20, 0xFF	; 255
    67b4:	5f 4f       	sbci	r21, 0xFF	; 255
					}
				}
				//Fill newValence by copying near_atom's current valence shell into newValence and removing one of its free electrons.
				//newValence starts with the char 'c', so index 0 of near_atom.valence is index 1 of newValence
				newValence[1] = near_atom.valence[0];
				for(uint8_t i = 1; i < 8; i++)
    67b6:	ae 16       	cp	r10, r30
    67b8:	bf 06       	cpc	r11, r31
    67ba:	69 f7       	brne	.-38     	; 0x6796 <checkPossibleBonds+0x26c>
				{
					if(near_atom.valence[i] == 0 && near_atom.valence[i-1] == 1) newValence[i+1] = 0;
					else newValence[i+1] = near_atom.valence[i];
				}
				found_bond_routine();
    67bc:	5d dd       	rcall	.-1350   	; 0x6278 <found_bond_routine>
				ir_targeted_send(ALL_DIRS, newValence, 9, senderID);
    67be:	23 96       	adiw	r28, 0x03	; 3
    67c0:	2e ad       	ldd	r18, Y+62	; 0x3e
    67c2:	3f ad       	ldd	r19, Y+63	; 0x3f
    67c4:	23 97       	sbiw	r28, 0x03	; 3
    67c6:	49 e0       	ldi	r20, 0x09	; 9
    67c8:	50 e0       	ldi	r21, 0x00	; 0
    67ca:	be 01       	movw	r22, r28
    67cc:	66 5f       	subi	r22, 0xF6	; 246
    67ce:	7f 4f       	sbci	r23, 0xFF	; 255
    67d0:	8f e3       	ldi	r24, 0x3F	; 63
    67d2:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <ir_targeted_send>
    67d6:	3a c0       	rjmp	.+116    	; 0x684c <checkPossibleBonds+0x322>
    67d8:	de 01       	movw	r26, r28
    67da:	1b 96       	adiw	r26, 0x0b	; 11
		{
			add_to_bonded_atoms(senderID);
			myID.bondType = 1;
			uint8_t zero = 1;
			uint8_t one = 1;
			if(myID.chi > near_atom.chi)
    67dc:	e0 2f       	mov	r30, r16
    67de:	f8 2d       	mov	r31, r8
    67e0:	21 e0       	ldi	r18, 0x01	; 1
    67e2:	91 e0       	ldi	r25, 0x01	; 1
						newValence[i+1] = 2;
						zero--;
					}
					else if(near_atom.valence[i] == 1 && one != 0)
					{
						newValence[i+1] = 2;
    67e4:	32 e0       	ldi	r19, 0x02	; 2
			}
			else
			{
				for(uint8_t i = 0; i < 8; i++)
				{
					if(near_atom.valence[i] == 0 && zero != 0)
    67e6:	81 91       	ld	r24, Z+
    67e8:	81 11       	cpse	r24, r1
    67ea:	05 c0       	rjmp	.+10     	; 0x67f6 <checkPossibleBonds+0x2cc>
    67ec:	99 23       	and	r25, r25
    67ee:	51 f0       	breq	.+20     	; 0x6804 <checkPossibleBonds+0x2da>
					{
						newValence[i+1] = 2;
    67f0:	3c 93       	st	X, r19
						zero--;
    67f2:	91 50       	subi	r25, 0x01	; 1
    67f4:	08 c0       	rjmp	.+16     	; 0x6806 <checkPossibleBonds+0x2dc>
					}
					else if(near_atom.valence[i] == 1 && one != 0)
    67f6:	81 30       	cpi	r24, 0x01	; 1
    67f8:	29 f4       	brne	.+10     	; 0x6804 <checkPossibleBonds+0x2da>
    67fa:	22 23       	and	r18, r18
    67fc:	19 f0       	breq	.+6      	; 0x6804 <checkPossibleBonds+0x2da>
					{
						newValence[i+1] = 2;
    67fe:	3c 93       	st	X, r19
						one--;
    6800:	21 50       	subi	r18, 0x01	; 1
    6802:	01 c0       	rjmp	.+2      	; 0x6806 <checkPossibleBonds+0x2dc>
					}
					else newValence[i+1] = near_atom.valence[i];
    6804:	8c 93       	st	X, r24
    6806:	11 96       	adiw	r26, 0x01	; 1
				found_bond_routine();
				ir_targeted_send(ALL_DIRS, newValence, 9, senderID);
			}
			else
			{
				for(uint8_t i = 0; i < 8; i++)
    6808:	ae 16       	cp	r10, r30
    680a:	bf 06       	cpc	r11, r31
    680c:	61 f7       	brne	.-40     	; 0x67e6 <checkPossibleBonds+0x2bc>
    680e:	e7 ee       	ldi	r30, 0xE7	; 231
    6810:	f2 e3       	ldi	r31, 0x32	; 50
    6812:	81 e0       	ldi	r24, 0x01	; 1
    6814:	90 e0       	ldi	r25, 0x00	; 0
					}
					else newValence[i+1] = near_atom.valence[i];
				}
				for(uint8_t i = 1; i < 8; i++)
				{
					if(myID.valence[i+1] ==0 && myID.valence[i] == 1) 
    6816:	41 91       	ld	r20, Z+
    6818:	41 11       	cpse	r20, r1
    681a:	16 c0       	rjmp	.+44     	; 0x6848 <checkPossibleBonds+0x31e>
    681c:	df 01       	movw	r26, r30
    681e:	12 97       	sbiw	r26, 0x02	; 2
    6820:	4c 91       	ld	r20, X
    6822:	41 30       	cpi	r20, 0x01	; 1
    6824:	89 f4       	brne	.+34     	; 0x6848 <checkPossibleBonds+0x31e>
					{
						myID.valence[i] = 0;
    6826:	fc 01       	movw	r30, r24
    6828:	eb 51       	subi	r30, 0x1B	; 27
    682a:	fd 4c       	sbci	r31, 0xCD	; 205
    682c:	10 82       	st	Z, r1
						break;
					}
				}
				ir_targeted_send(ALL_DIRS, newValence, 9, senderID);
    682e:	23 96       	adiw	r28, 0x03	; 3
    6830:	2e ad       	ldd	r18, Y+62	; 0x3e
    6832:	3f ad       	ldd	r19, Y+63	; 0x3f
    6834:	23 97       	sbiw	r28, 0x03	; 3
    6836:	49 e0       	ldi	r20, 0x09	; 9
    6838:	50 e0       	ldi	r21, 0x00	; 0
    683a:	be 01       	movw	r22, r28
    683c:	66 5f       	subi	r22, 0xF6	; 246
    683e:	7f 4f       	sbci	r23, 0xFF	; 255
    6840:	8f e3       	ldi	r24, 0x3F	; 63
    6842:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <ir_targeted_send>
    6846:	02 c0       	rjmp	.+4      	; 0x684c <checkPossibleBonds+0x322>
    6848:	01 96       	adiw	r24, 0x01	; 1
    684a:	e5 cf       	rjmp	.-54     	; 0x6816 <checkPossibleBonds+0x2ec>
    684c:	03 c0       	rjmp	.+6      	; 0x6854 <checkPossibleBonds+0x32a>
	
	//Ionic bond?
	else if(deltaChi > 1.5)
	{
		newValence[0] = 'i';
		if(near_atom.bondType == 2 || myID.bondType == 2) return -1; //near_atom is already bonded covalently, or I am
    684e:	8f ef       	ldi	r24, 0xFF	; 255
    6850:	01 c0       	rjmp	.+2      	; 0x6854 <checkPossibleBonds+0x32a>
    6852:	8f ef       	ldi	r24, 0xFF	; 255
				}
				ir_targeted_send(ALL_DIRS, newValence, 9, senderID);
			}
		}
	}
}
    6854:	62 96       	adiw	r28, 0x12	; 18
    6856:	cd bf       	out	0x3d, r28	; 61
    6858:	de bf       	out	0x3e, r29	; 62
    685a:	df 91       	pop	r29
    685c:	cf 91       	pop	r28
    685e:	1f 91       	pop	r17
    6860:	0f 91       	pop	r16
    6862:	ff 90       	pop	r15
    6864:	ef 90       	pop	r14
    6866:	df 90       	pop	r13
    6868:	cf 90       	pop	r12
    686a:	bf 90       	pop	r11
    686c:	af 90       	pop	r10
    686e:	9f 90       	pop	r9
    6870:	8f 90       	pop	r8
    6872:	7f 90       	pop	r7
    6874:	6f 90       	pop	r6
    6876:	08 95       	ret

00006878 <printValence>:
	}
	if(slotFound == 0) printf("ERROR: Tried to add an ID to bonded_atoms but the array was full.");
}

void printValence(int8_t valence[])
{
    6878:	ff 92       	push	r15
    687a:	0f 93       	push	r16
    687c:	1f 93       	push	r17
    687e:	cf 93       	push	r28
    6880:	df 93       	push	r29
    6882:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; i < 8; i++)
    6884:	f1 2c       	mov	r15, r1
	{
		printf(" %hd ", valence[i]);
    6886:	c5 ec       	ldi	r28, 0xC5	; 197
    6888:	da e2       	ldi	r29, 0x2A	; 42
    688a:	f8 01       	movw	r30, r16
    688c:	21 91       	ld	r18, Z+
    688e:	8f 01       	movw	r16, r30
    6890:	82 2f       	mov	r24, r18
    6892:	99 27       	eor	r25, r25
    6894:	87 fd       	sbrc	r24, 7
    6896:	90 95       	com	r25
    6898:	9f 93       	push	r25
    689a:	2f 93       	push	r18
    689c:	df 93       	push	r29
    689e:	cf 93       	push	r28
    68a0:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
	if(slotFound == 0) printf("ERROR: Tried to add an ID to bonded_atoms but the array was full.");
}

void printValence(int8_t valence[])
{
	for(uint8_t i = 0; i < 8; i++)
    68a4:	f3 94       	inc	r15
    68a6:	0f 90       	pop	r0
    68a8:	0f 90       	pop	r0
    68aa:	0f 90       	pop	r0
    68ac:	0f 90       	pop	r0
    68ae:	e8 e0       	ldi	r30, 0x08	; 8
    68b0:	fe 12       	cpse	r15, r30
    68b2:	eb cf       	rjmp	.-42     	; 0x688a <printValence+0x12>
	{
		printf(" %hd ", valence[i]);
	}
	printf("\r\n");
    68b4:	8f e6       	ldi	r24, 0x6F	; 111
    68b6:	9c e2       	ldi	r25, 0x2C	; 44
    68b8:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
}
    68bc:	df 91       	pop	r29
    68be:	cf 91       	pop	r28
    68c0:	1f 91       	pop	r17
    68c2:	0f 91       	pop	r16
    68c4:	ff 90       	pop	r15
    68c6:	08 95       	ret

000068c8 <init>:

/*
 * Any code in this function will be run once, when the robot starts.
 */
void init()
{
    68c8:	cf 93       	push	r28
    68ca:	df 93       	push	r29
    68cc:	cd b7       	in	r28, 0x3d	; 61
    68ce:	de b7       	in	r29, 0x3e	; 62
    68d0:	6d 97       	sbiw	r28, 0x1d	; 29
    68d2:	cd bf       	out	0x3d, r28	; 61
    68d4:	de bf       	out	0x3e, r29	; 62
	switch(get_droplet_id()){
    68d6:	80 91 74 2c 	lds	r24, 0x2C74
    68da:	90 91 75 2c 	lds	r25, 0x2C75
    68de:	88 3d       	cpi	r24, 0xD8	; 216
    68e0:	2f ea       	ldi	r18, 0xAF	; 175
    68e2:	92 07       	cpc	r25, r18
    68e4:	19 f1       	breq	.+70     	; 0x692c <init+0x64>
    68e6:	88 f4       	brcc	.+34     	; 0x690a <init+0x42>
    68e8:	81 3a       	cpi	r24, 0xA1	; 161
    68ea:	26 e4       	ldi	r18, 0x46	; 70
    68ec:	92 07       	cpc	r25, r18
    68ee:	f1 f1       	breq	.+124    	; 0x696c <init+0xa4>
    68f0:	20 f4       	brcc	.+8      	; 0x68fa <init+0x32>
    68f2:	82 36       	cpi	r24, 0x62	; 98
    68f4:	90 43       	sbci	r25, 0x30	; 48
    68f6:	f1 f0       	breq	.+60     	; 0x6934 <init+0x6c>
    68f8:	3d c0       	rjmp	.+122    	; 0x6974 <init+0xac>
    68fa:	8f 36       	cpi	r24, 0x6F	; 111
    68fc:	2b e6       	ldi	r18, 0x6B	; 107
    68fe:	92 07       	cpc	r25, r18
    6900:	69 f1       	breq	.+90     	; 0x695c <init+0x94>
    6902:	8f 36       	cpi	r24, 0x6F	; 111
    6904:	9c 46       	sbci	r25, 0x6C	; 108
    6906:	f1 f0       	breq	.+60     	; 0x6944 <init+0x7c>
    6908:	35 c0       	rjmp	.+106    	; 0x6974 <init+0xac>
    690a:	8e 36       	cpi	r24, 0x6E	; 110
    690c:	2c eb       	ldi	r18, 0xBC	; 188
    690e:	92 07       	cpc	r25, r18
    6910:	49 f1       	breq	.+82     	; 0x6964 <init+0x9c>
    6912:	20 f4       	brcc	.+8      	; 0x691c <init+0x54>
    6914:	8f 36       	cpi	r24, 0x6F	; 111
    6916:	93 4b       	sbci	r25, 0xB3	; 179
    6918:	e9 f0       	breq	.+58     	; 0x6954 <init+0x8c>
    691a:	2c c0       	rjmp	.+88     	; 0x6974 <init+0xac>
    691c:	8c 36       	cpi	r24, 0x6C	; 108
    691e:	28 ed       	ldi	r18, 0xD8	; 216
    6920:	92 07       	cpc	r25, r18
    6922:	a1 f0       	breq	.+40     	; 0x694c <init+0x84>
    6924:	8f 36       	cpi	r24, 0x6F	; 111
    6926:	9a 4f       	sbci	r25, 0xFA	; 250
    6928:	49 f0       	breq	.+18     	; 0x693c <init+0x74>
    692a:	24 c0       	rjmp	.+72     	; 0x6974 <init+0xac>
		case 0xAFD8: MY_CHEM_ID = 3; break;
    692c:	83 e0       	ldi	r24, 0x03	; 3
    692e:	80 93 02 33 	sts	0x3302, r24
    6932:	49 c0       	rjmp	.+146    	; 0x69c6 <init+0xfe>
		case 0x3062: MY_CHEM_ID = 17; break;
    6934:	81 e1       	ldi	r24, 0x11	; 17
    6936:	80 93 02 33 	sts	0x3302, r24
    693a:	45 c0       	rjmp	.+138    	; 0x69c6 <init+0xfe>
		case 0xFA6F: MY_CHEM_ID = 6; break;
    693c:	86 e0       	ldi	r24, 0x06	; 6
    693e:	80 93 02 33 	sts	0x3302, r24
    6942:	41 c0       	rjmp	.+130    	; 0x69c6 <init+0xfe>
		case 0x6C6F: MY_CHEM_ID = 3; break;
    6944:	83 e0       	ldi	r24, 0x03	; 3
    6946:	80 93 02 33 	sts	0x3302, r24
    694a:	3d c0       	rjmp	.+122    	; 0x69c6 <init+0xfe>
		case 0xD86C: MY_CHEM_ID = 17; break;
    694c:	81 e1       	ldi	r24, 0x11	; 17
    694e:	80 93 02 33 	sts	0x3302, r24
    6952:	39 c0       	rjmp	.+114    	; 0x69c6 <init+0xfe>
		case 0xB36F: MY_CHEM_ID = 17; break;
    6954:	81 e1       	ldi	r24, 0x11	; 17
    6956:	80 93 02 33 	sts	0x3302, r24
    695a:	35 c0       	rjmp	.+106    	; 0x69c6 <init+0xfe>
		case 0x6B6F: MY_CHEM_ID = 17; break;
    695c:	81 e1       	ldi	r24, 0x11	; 17
    695e:	80 93 02 33 	sts	0x3302, r24
    6962:	31 c0       	rjmp	.+98     	; 0x69c6 <init+0xfe>
		case 0xBC6E: MY_CHEM_ID = 17; break;
    6964:	81 e1       	ldi	r24, 0x11	; 17
    6966:	80 93 02 33 	sts	0x3302, r24
    696a:	2d c0       	rjmp	.+90     	; 0x69c6 <init+0xfe>
		case 0x46A1: MY_CHEM_ID = 3; break;
    696c:	83 e0       	ldi	r24, 0x03	; 3
    696e:	80 93 02 33 	sts	0x3302, r24
    6972:	29 c0       	rjmp	.+82     	; 0x69c6 <init+0xfe>
		default:     MY_CHEM_ID = 3; break;
    6974:	83 e0       	ldi	r24, 0x03	; 3
    6976:	80 93 02 33 	sts	0x3302, r24
    697a:	25 c0       	rjmp	.+74     	; 0x69c6 <init+0xfe>
	}
	

	for(uint8_t i = 0; i < 12; i++)
	{
		near_atoms[i] = NULL_NEAR_ATOM;
    697c:	e6 e7       	ldi	r30, 0x76	; 118
    697e:	fc e2       	ldi	r31, 0x2C	; 44
    6980:	dc 01       	movw	r26, r24
    6982:	54 2f       	mov	r21, r20
    6984:	01 90       	ld	r0, Z+
    6986:	0d 92       	st	X+, r0
    6988:	5a 95       	dec	r21
    698a:	e1 f7       	brne	.-8      	; 0x6984 <init+0xbc>
    698c:	86 96       	adiw	r24, 0x26	; 38
		case 0x46A1: MY_CHEM_ID = 3; break;
		default:     MY_CHEM_ID = 3; break;
	}
	

	for(uint8_t i = 0; i < 12; i++)
    698e:	82 17       	cp	r24, r18
    6990:	93 07       	cpc	r25, r19
    6992:	a1 f7       	brne	.-24     	; 0x697c <init+0xb4>
	{
		near_atoms[i] = NULL_NEAR_ATOM;
	}
	//set_rgb(10, 255, 255); //this is a test line
	myID = getAtomFromAtomicNum(MY_CHEM_ID);
    6994:	60 91 02 33 	lds	r22, 0x3302
    6998:	ce 01       	movw	r24, r28
    699a:	01 96       	adiw	r24, 0x01	; 1
    699c:	1f db       	rcall	.-2498   	; 0x5fdc <getAtomFromAtomicNum>
    699e:	8d e1       	ldi	r24, 0x1D	; 29
    69a0:	fe 01       	movw	r30, r28
    69a2:	31 96       	adiw	r30, 0x01	; 1
    69a4:	a5 ee       	ldi	r26, 0xE5	; 229
    69a6:	b2 e3       	ldi	r27, 0x32	; 50
    69a8:	01 90       	ld	r0, Z+
    69aa:	0d 92       	st	X+, r0
    69ac:	8a 95       	dec	r24
    69ae:	e1 f7       	brne	.-8      	; 0x69a8 <init+0xe0>
	schedule_periodic_task(300, update_near_atoms, NULL);
    69b0:	20 e0       	ldi	r18, 0x00	; 0
    69b2:	30 e0       	ldi	r19, 0x00	; 0
    69b4:	48 e1       	ldi	r20, 0x18	; 24
    69b6:	5f e2       	ldi	r21, 0x2F	; 47
    69b8:	6c e2       	ldi	r22, 0x2C	; 44
    69ba:	71 e0       	ldi	r23, 0x01	; 1
    69bc:	80 e0       	ldi	r24, 0x00	; 0
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	0e 94 8f 27 	call	0x4f1e	; 0x4f1e <schedule_periodic_task>
    69c4:	06 c0       	rjmp	.+12     	; 0x69d2 <init+0x10a>
    69c6:	8b e1       	ldi	r24, 0x1B	; 27
    69c8:	91 e3       	ldi	r25, 0x31	; 49
    69ca:	23 ee       	ldi	r18, 0xE3	; 227
    69cc:	32 e3       	ldi	r19, 0x32	; 50
	}
	

	for(uint8_t i = 0; i < 12; i++)
	{
		near_atoms[i] = NULL_NEAR_ATOM;
    69ce:	46 e2       	ldi	r20, 0x26	; 38
    69d0:	d5 cf       	rjmp	.-86     	; 0x697c <init+0xb4>
	}
	//set_rgb(10, 255, 255); //this is a test line
	myID = getAtomFromAtomicNum(MY_CHEM_ID);
	schedule_periodic_task(300, update_near_atoms, NULL);
}
    69d2:	6d 96       	adiw	r28, 0x1d	; 29
    69d4:	cd bf       	out	0x3d, r28	; 61
    69d6:	de bf       	out	0x3e, r29	; 62
    69d8:	df 91       	pop	r29
    69da:	cf 91       	pop	r28
    69dc:	08 95       	ret

000069de <loop>:
/*
 * The code in this function will be called repeatedly, as fast as it can execute.
 */
void loop()
{
	delay_ms(500);
    69de:	84 ef       	ldi	r24, 0xF4	; 244
    69e0:	91 e0       	ldi	r25, 0x01	; 1
    69e2:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
	//broadcastChemID(myID);
	detectOtherDroplets();
    69e6:	b8 dc       	rcall	.-1680   	; 0x6358 <detectOtherDroplets>
	uint32_t time_floor = ((get_time()/500)*500);
    69e8:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    69ec:	24 ef       	ldi	r18, 0xF4	; 244
    69ee:	31 e0       	ldi	r19, 0x01	; 1
    69f0:	40 e0       	ldi	r20, 0x00	; 0
    69f2:	50 e0       	ldi	r21, 0x00	; 0
    69f4:	0e 94 77 3e 	call	0x7cee	; 0x7cee <__udivmodsi4>
    69f8:	a4 ef       	ldi	r26, 0xF4	; 244
    69fa:	b1 e0       	ldi	r27, 0x01	; 1
    69fc:	0e 94 ae 3e 	call	0x7d5c	; 0x7d5c <__muluhisi3>
	if(time_floor%4000==0){
    6a00:	20 ea       	ldi	r18, 0xA0	; 160
    6a02:	3f e0       	ldi	r19, 0x0F	; 15
    6a04:	40 e0       	ldi	r20, 0x00	; 0
    6a06:	50 e0       	ldi	r21, 0x00	; 0
    6a08:	0e 94 77 3e 	call	0x7cee	; 0x7cee <__udivmodsi4>
    6a0c:	67 2b       	or	r22, r23
    6a0e:	68 2b       	or	r22, r24
    6a10:	69 2b       	or	r22, r25
    6a12:	61 f4       	brne	.+24     	; 0x6a2c <loop+0x4e>
		printf("\r\n sent bonded_atoms\r\n");
    6a14:	8b ec       	ldi	r24, 0xCB	; 203
    6a16:	9a e2       	ldi	r25, 0x2A	; 42
    6a18:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		broadcast_rnb_data();
    6a1c:	0e 94 10 1a 	call	0x3420	; 0x3420 <broadcast_rnb_data>
		ir_send(ALL_DIRS, myID.bonded_atoms, 12); //Should this be here or inside the 5 second loop? Also, do I have the last parameter right? 12 bytes?
    6a20:	4c e0       	ldi	r20, 0x0C	; 12
    6a22:	6d ee       	ldi	r22, 0xED	; 237
    6a24:	72 e3       	ldi	r23, 0x32	; 50
    6a26:	8f e3       	ldi	r24, 0x3F	; 63
    6a28:	0c 94 94 0c 	jmp	0x1928	; 0x1928 <ir_send>
    6a2c:	08 95       	ret

00006a2e <handle_msg>:
/*
 * After each pass through loop(), the robot checks for all messages it has 
 * received, and calls this function once for each message.
 */
void handle_msg(ir_msg* msg_struct)
{
    6a2e:	8f 92       	push	r8
    6a30:	9f 92       	push	r9
    6a32:	af 92       	push	r10
    6a34:	bf 92       	push	r11
    6a36:	cf 92       	push	r12
    6a38:	df 92       	push	r13
    6a3a:	ef 92       	push	r14
    6a3c:	ff 92       	push	r15
    6a3e:	0f 93       	push	r16
    6a40:	1f 93       	push	r17
    6a42:	cf 93       	push	r28
    6a44:	df 93       	push	r29
    6a46:	cd b7       	in	r28, 0x3d	; 61
    6a48:	de b7       	in	r29, 0x3e	; 62
    6a4a:	a6 97       	sbiw	r28, 0x26	; 38
    6a4c:	cd bf       	out	0x3d, r28	; 61
    6a4e:	de bf       	out	0x3e, r29	; 62
    6a50:	8c 01       	movw	r16, r24
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    6a52:	e0 e4       	ldi	r30, 0x40	; 64
    6a54:	fa e0       	ldi	r31, 0x0A	; 10
    6a56:	e2 ac       	ldd	r14, Z+58	; 0x3a
    6a58:	f3 ac       	ldd	r15, Z+59	; 0x3b
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    6a5a:	c0 ac       	ldd	r12, Z+56	; 0x38
    6a5c:	d1 ac       	ldd	r13, Z+57	; 0x39
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    6a5e:	e0 e4       	ldi	r30, 0x40	; 64
    6a60:	f9 e0       	ldi	r31, 0x09	; 9
    6a62:	a0 ac       	ldd	r10, Z+56	; 0x38
    6a64:	b1 ac       	ldd	r11, Z+57	; 0x39
	uint8_t r=get_red_led(), g=get_green_led(), b=get_blue_led();
	set_rgb(0,0,0);
    6a66:	40 e0       	ldi	r20, 0x00	; 0
    6a68:	60 e0       	ldi	r22, 0x00	; 0
    6a6a:	80 e0       	ldi	r24, 0x00	; 0
    6a6c:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
	delay_ms(50);
    6a70:	82 e3       	ldi	r24, 0x32	; 50
    6a72:	90 e0       	ldi	r25, 0x00	; 0
    6a74:	0e 94 0c 24 	call	0x4818	; 0x4818 <delay_ms>
	Atom* near_atom;
	printf("message length: %u and atom length: %u\r\n", msg_struct->length, sizeof(Atom));
    6a78:	1f 92       	push	r1
    6a7a:	8d e1       	ldi	r24, 0x1D	; 29
    6a7c:	8f 93       	push	r24
    6a7e:	d8 01       	movw	r26, r16
    6a80:	19 96       	adiw	r26, 0x09	; 9
    6a82:	8c 91       	ld	r24, X
    6a84:	1f 92       	push	r1
    6a86:	8f 93       	push	r24
    6a88:	81 ee       	ldi	r24, 0xE1	; 225
    6a8a:	9a e2       	ldi	r25, 0x2A	; 42
    6a8c:	9f 93       	push	r25
    6a8e:	8f 93       	push	r24
    6a90:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
	
	if(msg_struct->length==0)
    6a94:	0f 90       	pop	r0
    6a96:	0f 90       	pop	r0
    6a98:	0f 90       	pop	r0
    6a9a:	0f 90       	pop	r0
    6a9c:	0f 90       	pop	r0
    6a9e:	0f 90       	pop	r0
    6aa0:	f8 01       	movw	r30, r16
    6aa2:	81 85       	ldd	r24, Z+9	; 0x09
    6aa4:	81 11       	cpse	r24, r1
    6aa6:	04 c0       	rjmp	.+8      	; 0x6ab0 <handle_msg+0x82>
	{
		printf("ERROR: Message length 0.\r\n");
    6aa8:	8a e0       	ldi	r24, 0x0A	; 10
    6aaa:	9b e2       	ldi	r25, 0x2B	; 43
    6aac:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
	}
	//Message is an Atom struct
	if(msg_struct->length==sizeof(Atom))
    6ab0:	d8 01       	movw	r26, r16
    6ab2:	19 96       	adiw	r26, 0x09	; 9
    6ab4:	8c 91       	ld	r24, X
    6ab6:	8d 31       	cpi	r24, 0x1D	; 29
    6ab8:	09 f0       	breq	.+2      	; 0x6abc <handle_msg+0x8e>
    6aba:	44 c0       	rjmp	.+136    	; 0x6b44 <handle_msg+0x116>
	{
		printf("RECEIVED ATOM STRUCT \r\n");
    6abc:	84 e2       	ldi	r24, 0x24	; 36
    6abe:	9b e2       	ldi	r25, 0x2B	; 43
    6ac0:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		near_atom = (Atom*)(msg_struct->msg); //do some kind of check to make sure this is actually an atom.
    6ac4:	f8 01       	movw	r30, r16
    6ac6:	86 80       	ldd	r8, Z+6	; 0x06
    6ac8:	97 80       	ldd	r9, Z+7	; 0x07
		//If this droplet isn't in our list, add it. If it is, update its last_msg_t to 0.
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
		{
			//printf("near_atoms[i].id = %u and msg_struct.sender_id is %u \r\n", near_atoms[i].id, msg_struct->sender_ID);
			if(near_atoms[i].id ==msg_struct->sender_ID)
    6aca:	44 81       	ldd	r20, Z+4	; 0x04
    6acc:	55 81       	ldd	r21, Z+5	; 0x05
    6ace:	80 91 38 31 	lds	r24, 0x3138
    6ad2:	90 91 39 31 	lds	r25, 0x3139
    6ad6:	84 17       	cp	r24, r20
    6ad8:	95 07       	cpc	r25, r21
    6ada:	59 f0       	breq	.+22     	; 0x6af2 <handle_msg+0xc4>
    6adc:	ee e5       	ldi	r30, 0x5E	; 94
    6ade:	f1 e3       	ldi	r31, 0x31	; 49
    6ae0:	21 e0       	ldi	r18, 0x01	; 1
    6ae2:	30 e0       	ldi	r19, 0x00	; 0
    6ae4:	b9 01       	movw	r22, r18
    6ae6:	80 81       	ld	r24, Z
    6ae8:	91 81       	ldd	r25, Z+1	; 0x01
    6aea:	84 17       	cp	r24, r20
    6aec:	95 07       	cpc	r25, r21
    6aee:	69 f4       	brne	.+26     	; 0x6b0a <handle_msg+0xdc>
    6af0:	02 c0       	rjmp	.+4      	; 0x6af6 <handle_msg+0xc8>
    6af2:	60 e0       	ldi	r22, 0x00	; 0
    6af4:	70 e0       	ldi	r23, 0x00	; 0
			{
				near_atoms[i].last_msg_t = 0;
    6af6:	86 e2       	ldi	r24, 0x26	; 38
    6af8:	86 9f       	mul	r24, r22
    6afa:	f0 01       	movw	r30, r0
    6afc:	87 9f       	mul	r24, r23
    6afe:	f0 0d       	add	r31, r0
    6b00:	11 24       	eor	r1, r1
    6b02:	e5 5e       	subi	r30, 0xE5	; 229
    6b04:	fe 4c       	sbci	r31, 0xCE	; 206
    6b06:	14 a2       	std	Z+36, r1	; 0x24
    6b08:	19 c1       	rjmp	.+562    	; 0x6d3c <handle_msg+0x30e>
    6b0a:	2f 5f       	subi	r18, 0xFF	; 255
    6b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b0e:	b6 96       	adiw	r30, 0x26	; 38
		printf("RECEIVED ATOM STRUCT \r\n");
		near_atom = (Atom*)(msg_struct->msg); //do some kind of check to make sure this is actually an atom.
		
		//If this droplet isn't in our list, add it. If it is, update its last_msg_t to 0.
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
    6b10:	2c 30       	cpi	r18, 0x0C	; 12
    6b12:	31 05       	cpc	r19, r1
    6b14:	39 f7       	brne	.-50     	; 0x6ae4 <handle_msg+0xb6>
    6b16:	18 c1       	rjmp	.+560    	; 0x6d48 <handle_msg+0x31a>
		if (found == 0) //add new droplet to near_atoms
		{
			Near_Atom close_atom = {*near_atom, msg_struct->sender_ID, 0, 0, 0, 0, 0};
			printf("Check_possible_bonds called");
			uint8_t isBonded = checkPossibleBonds(*near_atom, msg_struct->sender_ID);
			if(isBonded) close_atom.bonded = 1;
    6b18:	81 e0       	ldi	r24, 0x01	; 1
    6b1a:	8e a3       	std	Y+38, r24	; 0x26
			add_to_near_atoms(close_atom);
    6b1c:	2d b7       	in	r18, 0x3d	; 61
    6b1e:	3e b7       	in	r19, 0x3e	; 62
    6b20:	26 52       	subi	r18, 0x26	; 38
    6b22:	31 09       	sbc	r19, r1
    6b24:	2d bf       	out	0x3d, r18	; 61
    6b26:	3e bf       	out	0x3e, r19	; 62
    6b28:	ad b7       	in	r26, 0x3d	; 61
    6b2a:	be b7       	in	r27, 0x3e	; 62
    6b2c:	11 96       	adiw	r26, 0x01	; 1
    6b2e:	86 e2       	ldi	r24, 0x26	; 38
    6b30:	fe 01       	movw	r30, r28
    6b32:	31 96       	adiw	r30, 0x01	; 1
    6b34:	01 90       	ld	r0, Z+
    6b36:	0d 92       	st	X+, r0
    6b38:	8a 95       	dec	r24
    6b3a:	e1 f7       	brne	.-8      	; 0x6b34 <handle_msg+0x106>
    6b3c:	10 da       	rcall	.-3040   	; 0x5f5e <add_to_near_atoms>
    6b3e:	cd bf       	out	0x3d, r28	; 61
    6b40:	de bf       	out	0x3e, r29	; 62
    6b42:	fc c0       	rjmp	.+504    	; 0x6d3c <handle_msg+0x30e>
		}
	}
	
	//Message is that a diatomic bond was formed
	else if(msg_struct->msg[0] == 'd')
    6b44:	d8 01       	movw	r26, r16
    6b46:	16 96       	adiw	r26, 0x06	; 6
    6b48:	ed 91       	ld	r30, X+
    6b4a:	fc 91       	ld	r31, X
    6b4c:	17 97       	sbiw	r26, 0x07	; 7
    6b4e:	40 81       	ld	r20, Z
    6b50:	44 36       	cpi	r20, 0x64	; 100
    6b52:	09 f0       	breq	.+2      	; 0x6b56 <handle_msg+0x128>
    6b54:	52 c0       	rjmp	.+164    	; 0x6bfa <handle_msg+0x1cc>
	{
		printf("Got 'diatomic bond made' message.\r\n");
    6b56:	8b e3       	ldi	r24, 0x3B	; 59
    6b58:	9b e2       	ldi	r25, 0x2B	; 43
    6b5a:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		found_diatomic_routine();
    6b5e:	50 db       	rcall	.-2400   	; 0x6200 <found_diatomic_routine>
    6b60:	e5 ee       	ldi	r30, 0xE5	; 229
    6b62:	f2 e3       	ldi	r31, 0x32	; 50
    6b64:	81 e0       	ldi	r24, 0x01	; 1
    6b66:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t i = 0; i < 8; i++)
		{
			myID.valence[i] = msg_struct->msg[i+1];
    6b68:	d8 01       	movw	r26, r16
    6b6a:	16 96       	adiw	r26, 0x06	; 6
    6b6c:	2d 91       	ld	r18, X+
    6b6e:	3c 91       	ld	r19, X
    6b70:	17 97       	sbiw	r26, 0x07	; 7
    6b72:	d9 01       	movw	r26, r18
    6b74:	a8 0f       	add	r26, r24
    6b76:	b9 1f       	adc	r27, r25
    6b78:	2c 91       	ld	r18, X
    6b7a:	21 93       	st	Z+, r18
    6b7c:	01 96       	adiw	r24, 0x01	; 1
	//Message is that a diatomic bond was formed
	else if(msg_struct->msg[0] == 'd')
	{
		printf("Got 'diatomic bond made' message.\r\n");
		found_diatomic_routine();
		for(uint8_t i = 0; i < 8; i++)
    6b7e:	89 30       	cpi	r24, 0x09	; 9
    6b80:	91 05       	cpc	r25, r1
    6b82:	91 f7       	brne	.-28     	; 0x6b68 <handle_msg+0x13a>
		{
			myID.valence[i] = msg_struct->msg[i+1];
		}
		printf("After receiving the 'bond found' message, valence is: ");
    6b84:	8e e5       	ldi	r24, 0x5E	; 94
    6b86:	9b e2       	ldi	r25, 0x2B	; 43
    6b88:	9f 93       	push	r25
    6b8a:	8f 93       	push	r24
    6b8c:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
		printValence(myID.valence);
    6b90:	85 ee       	ldi	r24, 0xE5	; 229
    6b92:	92 e3       	ldi	r25, 0x32	; 50
    6b94:	71 de       	rcall	.-798    	; 0x6878 <printValence>
		add_to_bonded_atoms(msg_struct->sender_ID);
    6b96:	f8 01       	movw	r30, r16
    6b98:	84 81       	ldd	r24, Z+4	; 0x04
    6b9a:	95 81       	ldd	r25, Z+5	; 0x05
    6b9c:	86 dc       	rcall	.-1780   	; 0x64aa <add_to_bonded_atoms>
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
		{
			if(near_atoms[i].id == msg_struct->sender_ID)
    6b9e:	d8 01       	movw	r26, r16
    6ba0:	14 96       	adiw	r26, 0x04	; 4
    6ba2:	4d 91       	ld	r20, X+
    6ba4:	5c 91       	ld	r21, X
    6ba6:	15 97       	sbiw	r26, 0x05	; 5
    6ba8:	0f 90       	pop	r0
    6baa:	0f 90       	pop	r0
    6bac:	80 91 38 31 	lds	r24, 0x3138
    6bb0:	90 91 39 31 	lds	r25, 0x3139
    6bb4:	84 17       	cp	r24, r20
    6bb6:	95 07       	cpc	r25, r21
    6bb8:	59 f0       	breq	.+22     	; 0x6bd0 <handle_msg+0x1a2>
    6bba:	ee e5       	ldi	r30, 0x5E	; 94
    6bbc:	f1 e3       	ldi	r31, 0x31	; 49
    6bbe:	81 e0       	ldi	r24, 0x01	; 1
    6bc0:	90 e0       	ldi	r25, 0x00	; 0
    6bc2:	bc 01       	movw	r22, r24
    6bc4:	20 81       	ld	r18, Z
    6bc6:	31 81       	ldd	r19, Z+1	; 0x01
    6bc8:	24 17       	cp	r18, r20
    6bca:	35 07       	cpc	r19, r21
    6bcc:	71 f4       	brne	.+28     	; 0x6bea <handle_msg+0x1bc>
    6bce:	02 c0       	rjmp	.+4      	; 0x6bd4 <handle_msg+0x1a6>
    6bd0:	60 e0       	ldi	r22, 0x00	; 0
    6bd2:	70 e0       	ldi	r23, 0x00	; 0
			{
				found = 1;
				near_atoms[i].bonded = 1;
    6bd4:	86 e2       	ldi	r24, 0x26	; 38
    6bd6:	86 9f       	mul	r24, r22
    6bd8:	f0 01       	movw	r30, r0
    6bda:	87 9f       	mul	r24, r23
    6bdc:	f0 0d       	add	r31, r0
    6bde:	11 24       	eor	r1, r1
    6be0:	e5 5e       	subi	r30, 0xE5	; 229
    6be2:	fe 4c       	sbci	r31, 0xCE	; 206
    6be4:	81 e0       	ldi	r24, 0x01	; 1
    6be6:	85 a3       	std	Z+37, r24	; 0x25
    6be8:	06 c0       	rjmp	.+12     	; 0x6bf6 <handle_msg+0x1c8>
    6bea:	01 96       	adiw	r24, 0x01	; 1
    6bec:	b6 96       	adiw	r30, 0x26	; 38
		}
		printf("After receiving the 'bond found' message, valence is: ");
		printValence(myID.valence);
		add_to_bonded_atoms(msg_struct->sender_ID);
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
    6bee:	8c 30       	cpi	r24, 0x0C	; 12
    6bf0:	91 05       	cpc	r25, r1
    6bf2:	39 f7       	brne	.-50     	; 0x6bc2 <handle_msg+0x194>
    6bf4:	df c0       	rjmp	.+446    	; 0x6db4 <handle_msg+0x386>
				near_atoms[i].bonded = 1;
				break;
			}
		}
		if(found == 0) printf("ERROR: Someone tried to bond with me who isn't in my near_atoms array.");
		print_near_atoms();
    6bf6:	2e d9       	rcall	.-3492   	; 0x5e54 <print_near_atoms>
    6bf8:	a1 c0       	rjmp	.+322    	; 0x6d3c <handle_msg+0x30e>
	}
	
	//Message is that a bond was formed
	else if(msg_struct->msg[0] == 'c' || msg_struct->msg[0] == 'i')
    6bfa:	43 36       	cpi	r20, 0x63	; 99
    6bfc:	19 f0       	breq	.+6      	; 0x6c04 <handle_msg+0x1d6>
    6bfe:	49 36       	cpi	r20, 0x69	; 105
    6c00:	09 f0       	breq	.+2      	; 0x6c04 <handle_msg+0x1d6>
    6c02:	5e c0       	rjmp	.+188    	; 0x6cc0 <handle_msg+0x292>
	{
		printf("Got 'bond made' message.\r\n");
    6c04:	85 e9       	ldi	r24, 0x95	; 149
    6c06:	9b e2       	ldi	r25, 0x2B	; 43
    6c08:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
		found_bond_routine();
    6c0c:	35 db       	rcall	.-2454   	; 0x6278 <found_bond_routine>
		if(msg_struct->msg[0] == 'c') myID.bondType = 2;
    6c0e:	d8 01       	movw	r26, r16
    6c10:	16 96       	adiw	r26, 0x06	; 6
    6c12:	ed 91       	ld	r30, X+
    6c14:	fc 91       	ld	r31, X
    6c16:	17 97       	sbiw	r26, 0x07	; 7
    6c18:	80 81       	ld	r24, Z
    6c1a:	83 36       	cpi	r24, 0x63	; 99
    6c1c:	21 f4       	brne	.+8      	; 0x6c26 <handle_msg+0x1f8>
    6c1e:	82 e0       	ldi	r24, 0x02	; 2
    6c20:	80 93 ff 32 	sts	0x32FF, r24
    6c24:	d0 c0       	rjmp	.+416    	; 0x6dc6 <handle_msg+0x398>
		else myID.bondType = 1;
    6c26:	81 e0       	ldi	r24, 0x01	; 1
    6c28:	80 93 ff 32 	sts	0x32FF, r24
    6c2c:	cc c0       	rjmp	.+408    	; 0x6dc6 <handle_msg+0x398>
		for(uint8_t i = 0; i < 8; i++)
		{
			myID.valence[i] = msg_struct->msg[i+1];
    6c2e:	d8 01       	movw	r26, r16
    6c30:	16 96       	adiw	r26, 0x06	; 6
    6c32:	2d 91       	ld	r18, X+
    6c34:	3c 91       	ld	r19, X
    6c36:	17 97       	sbiw	r26, 0x07	; 7
    6c38:	d9 01       	movw	r26, r18
    6c3a:	a8 0f       	add	r26, r24
    6c3c:	b9 1f       	adc	r27, r25
    6c3e:	2c 91       	ld	r18, X
    6c40:	21 93       	st	Z+, r18
    6c42:	01 96       	adiw	r24, 0x01	; 1
	{
		printf("Got 'bond made' message.\r\n");
		found_bond_routine();
		if(msg_struct->msg[0] == 'c') myID.bondType = 2;
		else myID.bondType = 1;
		for(uint8_t i = 0; i < 8; i++)
    6c44:	89 30       	cpi	r24, 0x09	; 9
    6c46:	91 05       	cpc	r25, r1
    6c48:	91 f7       	brne	.-28     	; 0x6c2e <handle_msg+0x200>
		{
			myID.valence[i] = msg_struct->msg[i+1];
		}
		printf("After receiving the 'bond found' message, valence is: ");
    6c4a:	8e e5       	ldi	r24, 0x5E	; 94
    6c4c:	9b e2       	ldi	r25, 0x2B	; 43
    6c4e:	9f 93       	push	r25
    6c50:	8f 93       	push	r24
    6c52:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
		printValence(myID.valence);
    6c56:	85 ee       	ldi	r24, 0xE5	; 229
    6c58:	92 e3       	ldi	r25, 0x32	; 50
    6c5a:	0e de       	rcall	.-996    	; 0x6878 <printValence>
		add_to_bonded_atoms(msg_struct->sender_ID);
    6c5c:	f8 01       	movw	r30, r16
    6c5e:	84 81       	ldd	r24, Z+4	; 0x04
    6c60:	95 81       	ldd	r25, Z+5	; 0x05
    6c62:	23 dc       	rcall	.-1978   	; 0x64aa <add_to_bonded_atoms>
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
		{
			if(near_atoms[i].id == msg_struct->sender_ID)
    6c64:	d8 01       	movw	r26, r16
    6c66:	14 96       	adiw	r26, 0x04	; 4
    6c68:	4d 91       	ld	r20, X+
    6c6a:	5c 91       	ld	r21, X
    6c6c:	15 97       	sbiw	r26, 0x05	; 5
    6c6e:	0f 90       	pop	r0
    6c70:	0f 90       	pop	r0
    6c72:	80 91 38 31 	lds	r24, 0x3138
    6c76:	90 91 39 31 	lds	r25, 0x3139
    6c7a:	84 17       	cp	r24, r20
    6c7c:	95 07       	cpc	r25, r21
    6c7e:	59 f0       	breq	.+22     	; 0x6c96 <handle_msg+0x268>
    6c80:	ee e5       	ldi	r30, 0x5E	; 94
    6c82:	f1 e3       	ldi	r31, 0x31	; 49
    6c84:	81 e0       	ldi	r24, 0x01	; 1
    6c86:	90 e0       	ldi	r25, 0x00	; 0
    6c88:	bc 01       	movw	r22, r24
    6c8a:	20 81       	ld	r18, Z
    6c8c:	31 81       	ldd	r19, Z+1	; 0x01
    6c8e:	24 17       	cp	r18, r20
    6c90:	35 07       	cpc	r19, r21
    6c92:	71 f4       	brne	.+28     	; 0x6cb0 <handle_msg+0x282>
    6c94:	02 c0       	rjmp	.+4      	; 0x6c9a <handle_msg+0x26c>
    6c96:	60 e0       	ldi	r22, 0x00	; 0
    6c98:	70 e0       	ldi	r23, 0x00	; 0
			{
				found = 1;
				near_atoms[i].bonded = 1;
    6c9a:	86 e2       	ldi	r24, 0x26	; 38
    6c9c:	86 9f       	mul	r24, r22
    6c9e:	f0 01       	movw	r30, r0
    6ca0:	87 9f       	mul	r24, r23
    6ca2:	f0 0d       	add	r31, r0
    6ca4:	11 24       	eor	r1, r1
    6ca6:	e5 5e       	subi	r30, 0xE5	; 229
    6ca8:	fe 4c       	sbci	r31, 0xCE	; 206
    6caa:	81 e0       	ldi	r24, 0x01	; 1
    6cac:	85 a3       	std	Z+37, r24	; 0x25
    6cae:	06 c0       	rjmp	.+12     	; 0x6cbc <handle_msg+0x28e>
    6cb0:	01 96       	adiw	r24, 0x01	; 1
    6cb2:	b6 96       	adiw	r30, 0x26	; 38
		}
		printf("After receiving the 'bond found' message, valence is: ");
		printValence(myID.valence);
		add_to_bonded_atoms(msg_struct->sender_ID);
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
    6cb4:	8c 30       	cpi	r24, 0x0C	; 12
    6cb6:	91 05       	cpc	r25, r1
    6cb8:	39 f7       	brne	.-50     	; 0x6c88 <handle_msg+0x25a>
    6cba:	8a c0       	rjmp	.+276    	; 0x6dd0 <handle_msg+0x3a2>
				near_atoms[i].bonded = 1;
				break;
			}
		}
		if(found == 0) printf("ERROR: Someone tried to bond with me who isn't in my near_atoms array.");
		print_near_atoms();
    6cbc:	cb d8       	rcall	.-3690   	; 0x5e54 <print_near_atoms>
		print_near_atoms();
	}
	
	//Message is that a bond was formed
	else if(msg_struct->msg[0] == 'c' || msg_struct->msg[0] == 'i')
	{
    6cbe:	3e c0       	rjmp	.+124    	; 0x6d3c <handle_msg+0x30e>
		if(found == 0) printf("ERROR: Someone tried to bond with me who isn't in my near_atoms array.");
		print_near_atoms();
	}
	
	//Message is another Droplet's bonded_atoms array
	else if(msg_struct->length == sizeof(myID.bonded_atoms))
    6cc0:	8c 30       	cpi	r24, 0x0C	; 12
    6cc2:	e1 f5       	brne	.+120    	; 0x6d3c <handle_msg+0x30e>
		//Check to see if I'm bonded to the droplet who just sent me his bonded_atoms array
		uint8_t senderIDFound = 0;
		uint8_t i;
		for(i = 0; i < 6; i++)
		{
			if(myID.bonded_atoms[i] == msg_struct->sender_ID)
    6cc4:	d8 01       	movw	r26, r16
    6cc6:	14 96       	adiw	r26, 0x04	; 4
    6cc8:	2d 91       	ld	r18, X+
    6cca:	3c 91       	ld	r19, X
    6ccc:	15 97       	sbiw	r26, 0x05	; 5
    6cce:	80 91 ed 32 	lds	r24, 0x32ED
    6cd2:	90 91 ee 32 	lds	r25, 0x32EE
    6cd6:	82 17       	cp	r24, r18
    6cd8:	93 07       	cpc	r25, r19
    6cda:	09 f4       	brne	.+2      	; 0x6cde <handle_msg+0x2b0>
    6cdc:	82 c0       	rjmp	.+260    	; 0x6de2 <handle_msg+0x3b4>
    6cde:	af ee       	ldi	r26, 0xEF	; 239
    6ce0:	b2 e3       	ldi	r27, 0x32	; 50
		//printf("Received bonded_atoms \r\n");
		//How does the code know this is an array of uint16_ts? Can I iterate through it like usual?
		//Check to see if I'm bonded to the droplet who just sent me his bonded_atoms array
		uint8_t senderIDFound = 0;
		uint8_t i;
		for(i = 0; i < 6; i++)
    6ce2:	99 24       	eor	r9, r9
    6ce4:	93 94       	inc	r9
		{
			if(myID.bonded_atoms[i] == msg_struct->sender_ID)
    6ce6:	8d 91       	ld	r24, X+
    6ce8:	9d 91       	ld	r25, X+
    6cea:	82 17       	cp	r24, r18
    6cec:	93 07       	cpc	r25, r19
    6cee:	09 f4       	brne	.+2      	; 0x6cf2 <handle_msg+0x2c4>
    6cf0:	79 c0       	rjmp	.+242    	; 0x6de4 <handle_msg+0x3b6>
		//printf("Received bonded_atoms \r\n");
		//How does the code know this is an array of uint16_ts? Can I iterate through it like usual?
		//Check to see if I'm bonded to the droplet who just sent me his bonded_atoms array
		uint8_t senderIDFound = 0;
		uint8_t i;
		for(i = 0; i < 6; i++)
    6cf2:	93 94       	inc	r9
    6cf4:	86 e0       	ldi	r24, 0x06	; 6
    6cf6:	98 12       	cpse	r9, r24
    6cf8:	f6 cf       	rjmp	.-20     	; 0x6ce6 <handle_msg+0x2b8>
    6cfa:	20 c0       	rjmp	.+64     	; 0x6d3c <handle_msg+0x30e>
		if(senderIDFound == 1)
		{
			uint8_t myIdFound = 0;
			for(uint8_t j = 0; j < 6; j++)
			{
				if(msg_struct->msg[j] == get_droplet_id())
    6cfc:	81 91       	ld	r24, Z+
    6cfe:	90 e0       	ldi	r25, 0x00	; 0
    6d00:	82 17       	cp	r24, r18
    6d02:	93 07       	cpc	r25, r19
    6d04:	d9 f0       	breq	.+54     	; 0x6d3c <handle_msg+0x30e>
    6d06:	41 50       	subi	r20, 0x01	; 1
		}
		//If so, check to see if he's bonded to me. If he isn't, break my bond.
		if(senderIDFound == 1)
		{
			uint8_t myIdFound = 0;
			for(uint8_t j = 0; j < 6; j++)
    6d08:	c9 f7       	brne	.-14     	; 0x6cfc <handle_msg+0x2ce>
    6d0a:	79 c0       	rjmp	.+242    	; 0x6dfe <handle_msg+0x3d0>
				printf("I think I'm bonded to a droplet who doesn't think he's bonded to me. I'm breaking that bond. \r\n");
				//Remove other droplet from bonded_atoms and remove the bonded flag from near_atoms
				myID.bonded_atoms[i] = 0;
				for(uint8_t k = 0; k < 12; k++)
				{
					if(near_atoms[k].id == msg_struct->sender_ID) 
    6d0c:	bc 01       	movw	r22, r24
    6d0e:	20 81       	ld	r18, Z
    6d10:	31 81       	ldd	r19, Z+1	; 0x01
    6d12:	24 17       	cp	r18, r20
    6d14:	35 07       	cpc	r19, r21
    6d16:	69 f4       	brne	.+26     	; 0x6d32 <handle_msg+0x304>
    6d18:	02 c0       	rjmp	.+4      	; 0x6d1e <handle_msg+0x2f0>
    6d1a:	60 e0       	ldi	r22, 0x00	; 0
    6d1c:	70 e0       	ldi	r23, 0x00	; 0
					{
						near_atoms[k].bonded = 0;
    6d1e:	86 e2       	ldi	r24, 0x26	; 38
    6d20:	86 9f       	mul	r24, r22
    6d22:	f0 01       	movw	r30, r0
    6d24:	87 9f       	mul	r24, r23
    6d26:	f0 0d       	add	r31, r0
    6d28:	11 24       	eor	r1, r1
    6d2a:	e5 5e       	subi	r30, 0xE5	; 229
    6d2c:	fe 4c       	sbci	r31, 0xCE	; 206
    6d2e:	15 a2       	std	Z+37, r1	; 0x25
						break;
    6d30:	05 c0       	rjmp	.+10     	; 0x6d3c <handle_msg+0x30e>
    6d32:	01 96       	adiw	r24, 0x01	; 1
    6d34:	b6 96       	adiw	r30, 0x26	; 38
			if(myIdFound == 0)
			{
				printf("I think I'm bonded to a droplet who doesn't think he's bonded to me. I'm breaking that bond. \r\n");
				//Remove other droplet from bonded_atoms and remove the bonded flag from near_atoms
				myID.bonded_atoms[i] = 0;
				for(uint8_t k = 0; k < 12; k++)
    6d36:	8c 30       	cpi	r24, 0x0C	; 12
    6d38:	91 05       	cpc	r25, r1
    6d3a:	41 f7       	brne	.-48     	; 0x6d0c <handle_msg+0x2de>
				}
			}
		}
		
	}
	set_rgb(r,g,b);
    6d3c:	4a 2d       	mov	r20, r10
    6d3e:	6c 2d       	mov	r22, r12
    6d40:	8e 2d       	mov	r24, r14
    6d42:	0e 94 8a 20 	call	0x4114	; 0x4114 <set_rgb>
    6d46:	77 c0       	rjmp	.+238    	; 0x6e36 <handle_msg+0x408>
				break;
			}
		}
		if (found == 0) //add new droplet to near_atoms
		{
			Near_Atom close_atom = {*near_atom, msg_struct->sender_ID, 0, 0, 0, 0, 0};
    6d48:	8d e1       	ldi	r24, 0x1D	; 29
    6d4a:	f4 01       	movw	r30, r8
    6d4c:	de 01       	movw	r26, r28
    6d4e:	11 96       	adiw	r26, 0x01	; 1
    6d50:	01 90       	ld	r0, Z+
    6d52:	0d 92       	st	X+, r0
    6d54:	8a 95       	dec	r24
    6d56:	e1 f7       	brne	.-8      	; 0x6d50 <handle_msg+0x322>
    6d58:	d8 01       	movw	r26, r16
    6d5a:	14 96       	adiw	r26, 0x04	; 4
    6d5c:	8d 91       	ld	r24, X+
    6d5e:	9c 91       	ld	r25, X
    6d60:	15 97       	sbiw	r26, 0x05	; 5
    6d62:	8e 8f       	std	Y+30, r24	; 0x1e
    6d64:	9f 8f       	std	Y+31, r25	; 0x1f
    6d66:	18 a2       	std	Y+32, r1	; 0x20
    6d68:	19 a2       	std	Y+33, r1	; 0x21
    6d6a:	1a a2       	std	Y+34, r1	; 0x22
    6d6c:	1b a2       	std	Y+35, r1	; 0x23
    6d6e:	1c a2       	std	Y+36, r1	; 0x24
    6d70:	1d a2       	std	Y+37, r1	; 0x25
    6d72:	1e a2       	std	Y+38, r1	; 0x26
			printf("Check_possible_bonds called");
    6d74:	8f ea       	ldi	r24, 0xAF	; 175
    6d76:	9b e2       	ldi	r25, 0x2B	; 43
    6d78:	9f 93       	push	r25
    6d7a:	8f 93       	push	r24
    6d7c:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
			uint8_t isBonded = checkPossibleBonds(*near_atom, msg_struct->sender_ID);
    6d80:	f8 01       	movw	r30, r16
    6d82:	85 81       	ldd	r24, Z+5	; 0x05
    6d84:	8f 93       	push	r24
    6d86:	84 81       	ldd	r24, Z+4	; 0x04
    6d88:	8f 93       	push	r24
    6d8a:	2d b7       	in	r18, 0x3d	; 61
    6d8c:	3e b7       	in	r19, 0x3e	; 62
    6d8e:	2d 51       	subi	r18, 0x1D	; 29
    6d90:	31 09       	sbc	r19, r1
    6d92:	2d bf       	out	0x3d, r18	; 61
    6d94:	3e bf       	out	0x3e, r19	; 62
    6d96:	ad b7       	in	r26, 0x3d	; 61
    6d98:	be b7       	in	r27, 0x3e	; 62
    6d9a:	11 96       	adiw	r26, 0x01	; 1
    6d9c:	8d e1       	ldi	r24, 0x1D	; 29
    6d9e:	f4 01       	movw	r30, r8
    6da0:	01 90       	ld	r0, Z+
    6da2:	0d 92       	st	X+, r0
    6da4:	8a 95       	dec	r24
    6da6:	e1 f7       	brne	.-8      	; 0x6da0 <handle_msg+0x372>
    6da8:	c0 db       	rcall	.-2176   	; 0x652a <checkPossibleBonds>
			if(isBonded) close_atom.bonded = 1;
    6daa:	cd bf       	out	0x3d, r28	; 61
    6dac:	de bf       	out	0x3e, r29	; 62
    6dae:	81 11       	cpse	r24, r1
    6db0:	b3 ce       	rjmp	.-666    	; 0x6b18 <handle_msg+0xea>
    6db2:	b4 ce       	rjmp	.-664    	; 0x6b1c <handle_msg+0xee>
				found = 1;
				near_atoms[i].bonded = 1;
				break;
			}
		}
		if(found == 0) printf("ERROR: Someone tried to bond with me who isn't in my near_atoms array.");
    6db4:	8b ec       	ldi	r24, 0xCB	; 203
    6db6:	9b e2       	ldi	r25, 0x2B	; 43
    6db8:	9f 93       	push	r25
    6dba:	8f 93       	push	r24
    6dbc:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    6dc0:	0f 90       	pop	r0
    6dc2:	0f 90       	pop	r0
    6dc4:	18 cf       	rjmp	.-464    	; 0x6bf6 <handle_msg+0x1c8>
    6dc6:	e5 ee       	ldi	r30, 0xE5	; 229
    6dc8:	f2 e3       	ldi	r31, 0x32	; 50
		printValence(myID.valence);
		add_to_bonded_atoms(msg_struct->sender_ID);
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
		{
			if(near_atoms[i].id == msg_struct->sender_ID)
    6dca:	81 e0       	ldi	r24, 0x01	; 1
    6dcc:	90 e0       	ldi	r25, 0x00	; 0
    6dce:	2f cf       	rjmp	.-418    	; 0x6c2e <handle_msg+0x200>
				found = 1;
				near_atoms[i].bonded = 1;
				break;
			}
		}
		if(found == 0) printf("ERROR: Someone tried to bond with me who isn't in my near_atoms array.");
    6dd0:	8b ec       	ldi	r24, 0xCB	; 203
    6dd2:	9b e2       	ldi	r25, 0x2B	; 43
    6dd4:	9f 93       	push	r25
    6dd6:	8f 93       	push	r24
    6dd8:	0e 94 77 41 	call	0x82ee	; 0x82ee <printf>
    6ddc:	0f 90       	pop	r0
    6dde:	0f 90       	pop	r0
    6de0:	6d cf       	rjmp	.-294    	; 0x6cbc <handle_msg+0x28e>
		//Check to see if I'm bonded to the droplet who just sent me his bonded_atoms array
		uint8_t senderIDFound = 0;
		uint8_t i;
		for(i = 0; i < 6; i++)
		{
			if(myID.bonded_atoms[i] == msg_struct->sender_ID)
    6de2:	91 2c       	mov	r9, r1
extern uint8_t user_handle_command(char* command_word, char* command_args);

/**
 * \brief Returns this Droplet's unique 16-bit identifier. 0 will never be an identifier.
 */
inline uint16_t get_droplet_id(){ return droplet_ID; }
    6de4:	20 91 74 2c 	lds	r18, 0x2C74
    6de8:	30 91 75 2c 	lds	r19, 0x2C75
		if(senderIDFound == 1)
		{
			uint8_t myIdFound = 0;
			for(uint8_t j = 0; j < 6; j++)
			{
				if(msg_struct->msg[j] == get_droplet_id())
    6dec:	84 2f       	mov	r24, r20
    6dee:	90 e0       	ldi	r25, 0x00	; 0
    6df0:	82 17       	cp	r24, r18
    6df2:	93 07       	cpc	r25, r19
    6df4:	09 f4       	brne	.+2      	; 0x6df8 <handle_msg+0x3ca>
    6df6:	a2 cf       	rjmp	.-188    	; 0x6d3c <handle_msg+0x30e>
    6df8:	31 96       	adiw	r30, 0x01	; 1
    6dfa:	45 e0       	ldi	r20, 0x05	; 5
    6dfc:	7f cf       	rjmp	.-258    	; 0x6cfc <handle_msg+0x2ce>
					break;
				}
			}
			if(myIdFound == 0)
			{
				printf("I think I'm bonded to a droplet who doesn't think he's bonded to me. I'm breaking that bond. \r\n");
    6dfe:	82 e1       	ldi	r24, 0x12	; 18
    6e00:	9c e2       	ldi	r25, 0x2C	; 44
    6e02:	0e 94 88 41 	call	0x8310	; 0x8310 <puts>
				//Remove other droplet from bonded_atoms and remove the bonded flag from near_atoms
				myID.bonded_atoms[i] = 0;
    6e06:	e9 2d       	mov	r30, r9
    6e08:	f0 e0       	ldi	r31, 0x00	; 0
    6e0a:	ee 0f       	add	r30, r30
    6e0c:	ff 1f       	adc	r31, r31
    6e0e:	e3 51       	subi	r30, 0x13	; 19
    6e10:	fd 4c       	sbci	r31, 0xCD	; 205
    6e12:	10 82       	st	Z, r1
    6e14:	11 82       	std	Z+1, r1	; 0x01
				for(uint8_t k = 0; k < 12; k++)
				{
					if(near_atoms[k].id == msg_struct->sender_ID) 
    6e16:	f8 01       	movw	r30, r16
    6e18:	44 81       	ldd	r20, Z+4	; 0x04
    6e1a:	55 81       	ldd	r21, Z+5	; 0x05
    6e1c:	80 91 38 31 	lds	r24, 0x3138
    6e20:	90 91 39 31 	lds	r25, 0x3139
    6e24:	84 17       	cp	r24, r20
    6e26:	95 07       	cpc	r25, r21
    6e28:	09 f4       	brne	.+2      	; 0x6e2c <handle_msg+0x3fe>
    6e2a:	77 cf       	rjmp	.-274    	; 0x6d1a <handle_msg+0x2ec>
    6e2c:	ee e5       	ldi	r30, 0x5E	; 94
    6e2e:	f1 e3       	ldi	r31, 0x31	; 49
    6e30:	81 e0       	ldi	r24, 0x01	; 1
    6e32:	90 e0       	ldi	r25, 0x00	; 0
    6e34:	6b cf       	rjmp	.-298    	; 0x6d0c <handle_msg+0x2de>
			}
		}
		
	}
	set_rgb(r,g,b);
}
    6e36:	a6 96       	adiw	r28, 0x26	; 38
    6e38:	cd bf       	out	0x3d, r28	; 61
    6e3a:	de bf       	out	0x3e, r29	; 62
    6e3c:	df 91       	pop	r29
    6e3e:	cf 91       	pop	r28
    6e40:	1f 91       	pop	r17
    6e42:	0f 91       	pop	r16
    6e44:	ff 90       	pop	r15
    6e46:	ef 90       	pop	r14
    6e48:	df 90       	pop	r13
    6e4a:	cf 90       	pop	r12
    6e4c:	bf 90       	pop	r11
    6e4e:	af 90       	pop	r10
    6e50:	9f 90       	pop	r9
    6e52:	8f 90       	pop	r8
    6e54:	08 95       	ret

00006e56 <__subsf3>:
    6e56:	50 58       	subi	r21, 0x80	; 128

00006e58 <__addsf3>:
    6e58:	bb 27       	eor	r27, r27
    6e5a:	aa 27       	eor	r26, r26
    6e5c:	0e d0       	rcall	.+28     	; 0x6e7a <__addsf3x>
    6e5e:	83 c2       	rjmp	.+1286   	; 0x7366 <__fp_round>
    6e60:	4c d2       	rcall	.+1176   	; 0x72fa <__fp_pscA>
    6e62:	30 f0       	brcs	.+12     	; 0x6e70 <__addsf3+0x18>
    6e64:	51 d2       	rcall	.+1186   	; 0x7308 <__fp_pscB>
    6e66:	20 f0       	brcs	.+8      	; 0x6e70 <__addsf3+0x18>
    6e68:	31 f4       	brne	.+12     	; 0x6e76 <__addsf3+0x1e>
    6e6a:	9f 3f       	cpi	r25, 0xFF	; 255
    6e6c:	11 f4       	brne	.+4      	; 0x6e72 <__addsf3+0x1a>
    6e6e:	1e f4       	brtc	.+6      	; 0x6e76 <__addsf3+0x1e>
    6e70:	1c c2       	rjmp	.+1080   	; 0x72aa <__fp_nan>
    6e72:	0e f4       	brtc	.+2      	; 0x6e76 <__addsf3+0x1e>
    6e74:	e0 95       	com	r30
    6e76:	e7 fb       	bst	r30, 7
    6e78:	04 c2       	rjmp	.+1032   	; 0x7282 <__fp_inf>

00006e7a <__addsf3x>:
    6e7a:	e9 2f       	mov	r30, r25
    6e7c:	96 d2       	rcall	.+1324   	; 0x73aa <__fp_split3>
    6e7e:	80 f3       	brcs	.-32     	; 0x6e60 <__addsf3+0x8>
    6e80:	ba 17       	cp	r27, r26
    6e82:	62 07       	cpc	r22, r18
    6e84:	73 07       	cpc	r23, r19
    6e86:	84 07       	cpc	r24, r20
    6e88:	95 07       	cpc	r25, r21
    6e8a:	18 f0       	brcs	.+6      	; 0x6e92 <__addsf3x+0x18>
    6e8c:	71 f4       	brne	.+28     	; 0x6eaa <__addsf3x+0x30>
    6e8e:	9e f5       	brtc	.+102    	; 0x6ef6 <__addsf3x+0x7c>
    6e90:	ae c2       	rjmp	.+1372   	; 0x73ee <__fp_zero>
    6e92:	0e f4       	brtc	.+2      	; 0x6e96 <__addsf3x+0x1c>
    6e94:	e0 95       	com	r30
    6e96:	0b 2e       	mov	r0, r27
    6e98:	ba 2f       	mov	r27, r26
    6e9a:	a0 2d       	mov	r26, r0
    6e9c:	0b 01       	movw	r0, r22
    6e9e:	b9 01       	movw	r22, r18
    6ea0:	90 01       	movw	r18, r0
    6ea2:	0c 01       	movw	r0, r24
    6ea4:	ca 01       	movw	r24, r20
    6ea6:	a0 01       	movw	r20, r0
    6ea8:	11 24       	eor	r1, r1
    6eaa:	ff 27       	eor	r31, r31
    6eac:	59 1b       	sub	r21, r25
    6eae:	99 f0       	breq	.+38     	; 0x6ed6 <__addsf3x+0x5c>
    6eb0:	59 3f       	cpi	r21, 0xF9	; 249
    6eb2:	50 f4       	brcc	.+20     	; 0x6ec8 <__addsf3x+0x4e>
    6eb4:	50 3e       	cpi	r21, 0xE0	; 224
    6eb6:	68 f1       	brcs	.+90     	; 0x6f12 <__addsf3x+0x98>
    6eb8:	1a 16       	cp	r1, r26
    6eba:	f0 40       	sbci	r31, 0x00	; 0
    6ebc:	a2 2f       	mov	r26, r18
    6ebe:	23 2f       	mov	r18, r19
    6ec0:	34 2f       	mov	r19, r20
    6ec2:	44 27       	eor	r20, r20
    6ec4:	58 5f       	subi	r21, 0xF8	; 248
    6ec6:	f3 cf       	rjmp	.-26     	; 0x6eae <__addsf3x+0x34>
    6ec8:	46 95       	lsr	r20
    6eca:	37 95       	ror	r19
    6ecc:	27 95       	ror	r18
    6ece:	a7 95       	ror	r26
    6ed0:	f0 40       	sbci	r31, 0x00	; 0
    6ed2:	53 95       	inc	r21
    6ed4:	c9 f7       	brne	.-14     	; 0x6ec8 <__addsf3x+0x4e>
    6ed6:	7e f4       	brtc	.+30     	; 0x6ef6 <__addsf3x+0x7c>
    6ed8:	1f 16       	cp	r1, r31
    6eda:	ba 0b       	sbc	r27, r26
    6edc:	62 0b       	sbc	r22, r18
    6ede:	73 0b       	sbc	r23, r19
    6ee0:	84 0b       	sbc	r24, r20
    6ee2:	ba f0       	brmi	.+46     	; 0x6f12 <__addsf3x+0x98>
    6ee4:	91 50       	subi	r25, 0x01	; 1
    6ee6:	a1 f0       	breq	.+40     	; 0x6f10 <__addsf3x+0x96>
    6ee8:	ff 0f       	add	r31, r31
    6eea:	bb 1f       	adc	r27, r27
    6eec:	66 1f       	adc	r22, r22
    6eee:	77 1f       	adc	r23, r23
    6ef0:	88 1f       	adc	r24, r24
    6ef2:	c2 f7       	brpl	.-16     	; 0x6ee4 <__addsf3x+0x6a>
    6ef4:	0e c0       	rjmp	.+28     	; 0x6f12 <__addsf3x+0x98>
    6ef6:	ba 0f       	add	r27, r26
    6ef8:	62 1f       	adc	r22, r18
    6efa:	73 1f       	adc	r23, r19
    6efc:	84 1f       	adc	r24, r20
    6efe:	48 f4       	brcc	.+18     	; 0x6f12 <__addsf3x+0x98>
    6f00:	87 95       	ror	r24
    6f02:	77 95       	ror	r23
    6f04:	67 95       	ror	r22
    6f06:	b7 95       	ror	r27
    6f08:	f7 95       	ror	r31
    6f0a:	9e 3f       	cpi	r25, 0xFE	; 254
    6f0c:	08 f0       	brcs	.+2      	; 0x6f10 <__addsf3x+0x96>
    6f0e:	b3 cf       	rjmp	.-154    	; 0x6e76 <__addsf3+0x1e>
    6f10:	93 95       	inc	r25
    6f12:	88 0f       	add	r24, r24
    6f14:	08 f0       	brcs	.+2      	; 0x6f18 <__addsf3x+0x9e>
    6f16:	99 27       	eor	r25, r25
    6f18:	ee 0f       	add	r30, r30
    6f1a:	97 95       	ror	r25
    6f1c:	87 95       	ror	r24
    6f1e:	08 95       	ret
    6f20:	ec d1       	rcall	.+984    	; 0x72fa <__fp_pscA>
    6f22:	58 f0       	brcs	.+22     	; 0x6f3a <__addsf3x+0xc0>
    6f24:	80 e8       	ldi	r24, 0x80	; 128
    6f26:	91 e0       	ldi	r25, 0x01	; 1
    6f28:	09 f4       	brne	.+2      	; 0x6f2c <__addsf3x+0xb2>
    6f2a:	9e ef       	ldi	r25, 0xFE	; 254
    6f2c:	ed d1       	rcall	.+986    	; 0x7308 <__fp_pscB>
    6f2e:	28 f0       	brcs	.+10     	; 0x6f3a <__addsf3x+0xc0>
    6f30:	40 e8       	ldi	r20, 0x80	; 128
    6f32:	51 e0       	ldi	r21, 0x01	; 1
    6f34:	59 f4       	brne	.+22     	; 0x6f4c <atan2+0xe>
    6f36:	5e ef       	ldi	r21, 0xFE	; 254
    6f38:	09 c0       	rjmp	.+18     	; 0x6f4c <atan2+0xe>
    6f3a:	b7 c1       	rjmp	.+878    	; 0x72aa <__fp_nan>
    6f3c:	58 c2       	rjmp	.+1200   	; 0x73ee <__fp_zero>

00006f3e <atan2>:
    6f3e:	e9 2f       	mov	r30, r25
    6f40:	e0 78       	andi	r30, 0x80	; 128
    6f42:	33 d2       	rcall	.+1126   	; 0x73aa <__fp_split3>
    6f44:	68 f3       	brcs	.-38     	; 0x6f20 <__addsf3x+0xa6>
    6f46:	09 2e       	mov	r0, r25
    6f48:	05 2a       	or	r0, r21
    6f4a:	c1 f3       	breq	.-16     	; 0x6f3c <__addsf3x+0xc2>
    6f4c:	26 17       	cp	r18, r22
    6f4e:	37 07       	cpc	r19, r23
    6f50:	48 07       	cpc	r20, r24
    6f52:	59 07       	cpc	r21, r25
    6f54:	38 f0       	brcs	.+14     	; 0x6f64 <atan2+0x26>
    6f56:	0e 2e       	mov	r0, r30
    6f58:	07 f8       	bld	r0, 7
    6f5a:	e0 25       	eor	r30, r0
    6f5c:	69 f0       	breq	.+26     	; 0x6f78 <atan2+0x3a>
    6f5e:	e0 25       	eor	r30, r0
    6f60:	e0 64       	ori	r30, 0x40	; 64
    6f62:	0a c0       	rjmp	.+20     	; 0x6f78 <atan2+0x3a>
    6f64:	ef 63       	ori	r30, 0x3F	; 63
    6f66:	07 f8       	bld	r0, 7
    6f68:	00 94       	com	r0
    6f6a:	07 fa       	bst	r0, 7
    6f6c:	db 01       	movw	r26, r22
    6f6e:	b9 01       	movw	r22, r18
    6f70:	9d 01       	movw	r18, r26
    6f72:	dc 01       	movw	r26, r24
    6f74:	ca 01       	movw	r24, r20
    6f76:	ad 01       	movw	r20, r26
    6f78:	ef 93       	push	r30
    6f7a:	4a d0       	rcall	.+148    	; 0x7010 <__divsf3_pse>
    6f7c:	f4 d1       	rcall	.+1000   	; 0x7366 <__fp_round>
    6f7e:	0a d0       	rcall	.+20     	; 0x6f94 <atan>
    6f80:	5f 91       	pop	r21
    6f82:	55 23       	and	r21, r21
    6f84:	31 f0       	breq	.+12     	; 0x6f92 <atan2+0x54>
    6f86:	2b ed       	ldi	r18, 0xDB	; 219
    6f88:	3f e0       	ldi	r19, 0x0F	; 15
    6f8a:	49 e4       	ldi	r20, 0x49	; 73
    6f8c:	50 fd       	sbrc	r21, 0
    6f8e:	49 ec       	ldi	r20, 0xC9	; 201
    6f90:	63 cf       	rjmp	.-314    	; 0x6e58 <__addsf3>
    6f92:	08 95       	ret

00006f94 <atan>:
    6f94:	df 93       	push	r29
    6f96:	dd 27       	eor	r29, r29
    6f98:	b9 2f       	mov	r27, r25
    6f9a:	bf 77       	andi	r27, 0x7F	; 127
    6f9c:	40 e8       	ldi	r20, 0x80	; 128
    6f9e:	5f e3       	ldi	r21, 0x3F	; 63
    6fa0:	16 16       	cp	r1, r22
    6fa2:	17 06       	cpc	r1, r23
    6fa4:	48 07       	cpc	r20, r24
    6fa6:	5b 07       	cpc	r21, r27
    6fa8:	10 f4       	brcc	.+4      	; 0x6fae <atan+0x1a>
    6faa:	d9 2f       	mov	r29, r25
    6fac:	2b d2       	rcall	.+1110   	; 0x7404 <inverse>
    6fae:	9f 93       	push	r25
    6fb0:	8f 93       	push	r24
    6fb2:	7f 93       	push	r23
    6fb4:	6f 93       	push	r22
    6fb6:	d8 d2       	rcall	.+1456   	; 0x7568 <square>
    6fb8:	ea ef       	ldi	r30, 0xFA	; 250
    6fba:	f2 e0       	ldi	r31, 0x02	; 2
    6fbc:	79 d1       	rcall	.+754    	; 0x72b0 <__fp_powser>
    6fbe:	d3 d1       	rcall	.+934    	; 0x7366 <__fp_round>
    6fc0:	2f 91       	pop	r18
    6fc2:	3f 91       	pop	r19
    6fc4:	4f 91       	pop	r20
    6fc6:	5f 91       	pop	r21
    6fc8:	30 d2       	rcall	.+1120   	; 0x742a <__mulsf3x>
    6fca:	dd 23       	and	r29, r29
    6fcc:	49 f0       	breq	.+18     	; 0x6fe0 <atan+0x4c>
    6fce:	90 58       	subi	r25, 0x80	; 128
    6fd0:	a2 ea       	ldi	r26, 0xA2	; 162
    6fd2:	2a ed       	ldi	r18, 0xDA	; 218
    6fd4:	3f e0       	ldi	r19, 0x0F	; 15
    6fd6:	49 ec       	ldi	r20, 0xC9	; 201
    6fd8:	5f e3       	ldi	r21, 0x3F	; 63
    6fda:	d0 78       	andi	r29, 0x80	; 128
    6fdc:	5d 27       	eor	r21, r29
    6fde:	4d df       	rcall	.-358    	; 0x6e7a <__addsf3x>
    6fe0:	df 91       	pop	r29
    6fe2:	c1 c1       	rjmp	.+898    	; 0x7366 <__fp_round>

00006fe4 <__cmpsf2>:
    6fe4:	2a d1       	rcall	.+596    	; 0x723a <__fp_cmp>
    6fe6:	08 f4       	brcc	.+2      	; 0x6fea <__cmpsf2+0x6>
    6fe8:	81 e0       	ldi	r24, 0x01	; 1
    6fea:	08 95       	ret

00006fec <cos>:
    6fec:	95 d1       	rcall	.+810    	; 0x7318 <__fp_rempio2>
    6fee:	e3 95       	inc	r30
    6ff0:	cb c1       	rjmp	.+918    	; 0x7388 <__fp_sinus>

00006ff2 <__divsf3>:
    6ff2:	0c d0       	rcall	.+24     	; 0x700c <__divsf3x>
    6ff4:	b8 c1       	rjmp	.+880    	; 0x7366 <__fp_round>
    6ff6:	88 d1       	rcall	.+784    	; 0x7308 <__fp_pscB>
    6ff8:	40 f0       	brcs	.+16     	; 0x700a <__divsf3+0x18>
    6ffa:	7f d1       	rcall	.+766    	; 0x72fa <__fp_pscA>
    6ffc:	30 f0       	brcs	.+12     	; 0x700a <__divsf3+0x18>
    6ffe:	21 f4       	brne	.+8      	; 0x7008 <__divsf3+0x16>
    7000:	5f 3f       	cpi	r21, 0xFF	; 255
    7002:	19 f0       	breq	.+6      	; 0x700a <__divsf3+0x18>
    7004:	3e c1       	rjmp	.+636    	; 0x7282 <__fp_inf>
    7006:	51 11       	cpse	r21, r1
    7008:	f3 c1       	rjmp	.+998    	; 0x73f0 <__fp_szero>
    700a:	4f c1       	rjmp	.+670    	; 0x72aa <__fp_nan>

0000700c <__divsf3x>:
    700c:	ce d1       	rcall	.+924    	; 0x73aa <__fp_split3>
    700e:	98 f3       	brcs	.-26     	; 0x6ff6 <__divsf3+0x4>

00007010 <__divsf3_pse>:
    7010:	99 23       	and	r25, r25
    7012:	c9 f3       	breq	.-14     	; 0x7006 <__divsf3+0x14>
    7014:	55 23       	and	r21, r21
    7016:	b1 f3       	breq	.-20     	; 0x7004 <__divsf3+0x12>
    7018:	95 1b       	sub	r25, r21
    701a:	55 0b       	sbc	r21, r21
    701c:	bb 27       	eor	r27, r27
    701e:	aa 27       	eor	r26, r26
    7020:	62 17       	cp	r22, r18
    7022:	73 07       	cpc	r23, r19
    7024:	84 07       	cpc	r24, r20
    7026:	38 f0       	brcs	.+14     	; 0x7036 <__divsf3_pse+0x26>
    7028:	9f 5f       	subi	r25, 0xFF	; 255
    702a:	5f 4f       	sbci	r21, 0xFF	; 255
    702c:	22 0f       	add	r18, r18
    702e:	33 1f       	adc	r19, r19
    7030:	44 1f       	adc	r20, r20
    7032:	aa 1f       	adc	r26, r26
    7034:	a9 f3       	breq	.-22     	; 0x7020 <__divsf3_pse+0x10>
    7036:	33 d0       	rcall	.+102    	; 0x709e <__divsf3_pse+0x8e>
    7038:	0e 2e       	mov	r0, r30
    703a:	3a f0       	brmi	.+14     	; 0x704a <__divsf3_pse+0x3a>
    703c:	e0 e8       	ldi	r30, 0x80	; 128
    703e:	30 d0       	rcall	.+96     	; 0x70a0 <__divsf3_pse+0x90>
    7040:	91 50       	subi	r25, 0x01	; 1
    7042:	50 40       	sbci	r21, 0x00	; 0
    7044:	e6 95       	lsr	r30
    7046:	00 1c       	adc	r0, r0
    7048:	ca f7       	brpl	.-14     	; 0x703c <__divsf3_pse+0x2c>
    704a:	29 d0       	rcall	.+82     	; 0x709e <__divsf3_pse+0x8e>
    704c:	fe 2f       	mov	r31, r30
    704e:	27 d0       	rcall	.+78     	; 0x709e <__divsf3_pse+0x8e>
    7050:	66 0f       	add	r22, r22
    7052:	77 1f       	adc	r23, r23
    7054:	88 1f       	adc	r24, r24
    7056:	bb 1f       	adc	r27, r27
    7058:	26 17       	cp	r18, r22
    705a:	37 07       	cpc	r19, r23
    705c:	48 07       	cpc	r20, r24
    705e:	ab 07       	cpc	r26, r27
    7060:	b0 e8       	ldi	r27, 0x80	; 128
    7062:	09 f0       	breq	.+2      	; 0x7066 <__divsf3_pse+0x56>
    7064:	bb 0b       	sbc	r27, r27
    7066:	80 2d       	mov	r24, r0
    7068:	bf 01       	movw	r22, r30
    706a:	ff 27       	eor	r31, r31
    706c:	93 58       	subi	r25, 0x83	; 131
    706e:	5f 4f       	sbci	r21, 0xFF	; 255
    7070:	2a f0       	brmi	.+10     	; 0x707c <__divsf3_pse+0x6c>
    7072:	9e 3f       	cpi	r25, 0xFE	; 254
    7074:	51 05       	cpc	r21, r1
    7076:	68 f0       	brcs	.+26     	; 0x7092 <__divsf3_pse+0x82>
    7078:	04 c1       	rjmp	.+520    	; 0x7282 <__fp_inf>
    707a:	ba c1       	rjmp	.+884    	; 0x73f0 <__fp_szero>
    707c:	5f 3f       	cpi	r21, 0xFF	; 255
    707e:	ec f3       	brlt	.-6      	; 0x707a <__divsf3_pse+0x6a>
    7080:	98 3e       	cpi	r25, 0xE8	; 232
    7082:	dc f3       	brlt	.-10     	; 0x707a <__divsf3_pse+0x6a>
    7084:	86 95       	lsr	r24
    7086:	77 95       	ror	r23
    7088:	67 95       	ror	r22
    708a:	b7 95       	ror	r27
    708c:	f7 95       	ror	r31
    708e:	9f 5f       	subi	r25, 0xFF	; 255
    7090:	c9 f7       	brne	.-14     	; 0x7084 <__divsf3_pse+0x74>
    7092:	88 0f       	add	r24, r24
    7094:	91 1d       	adc	r25, r1
    7096:	96 95       	lsr	r25
    7098:	87 95       	ror	r24
    709a:	97 f9       	bld	r25, 7
    709c:	08 95       	ret
    709e:	e1 e0       	ldi	r30, 0x01	; 1
    70a0:	66 0f       	add	r22, r22
    70a2:	77 1f       	adc	r23, r23
    70a4:	88 1f       	adc	r24, r24
    70a6:	bb 1f       	adc	r27, r27
    70a8:	62 17       	cp	r22, r18
    70aa:	73 07       	cpc	r23, r19
    70ac:	84 07       	cpc	r24, r20
    70ae:	ba 07       	cpc	r27, r26
    70b0:	20 f0       	brcs	.+8      	; 0x70ba <__divsf3_pse+0xaa>
    70b2:	62 1b       	sub	r22, r18
    70b4:	73 0b       	sbc	r23, r19
    70b6:	84 0b       	sbc	r24, r20
    70b8:	ba 0b       	sbc	r27, r26
    70ba:	ee 1f       	adc	r30, r30
    70bc:	88 f7       	brcc	.-30     	; 0x70a0 <__divsf3_pse+0x90>
    70be:	e0 95       	com	r30
    70c0:	08 95       	ret

000070c2 <__fixsfsi>:
    70c2:	04 d0       	rcall	.+8      	; 0x70cc <__fixunssfsi>
    70c4:	68 94       	set
    70c6:	b1 11       	cpse	r27, r1
    70c8:	93 c1       	rjmp	.+806    	; 0x73f0 <__fp_szero>
    70ca:	08 95       	ret

000070cc <__fixunssfsi>:
    70cc:	76 d1       	rcall	.+748    	; 0x73ba <__fp_splitA>
    70ce:	88 f0       	brcs	.+34     	; 0x70f2 <__fixunssfsi+0x26>
    70d0:	9f 57       	subi	r25, 0x7F	; 127
    70d2:	90 f0       	brcs	.+36     	; 0x70f8 <__fixunssfsi+0x2c>
    70d4:	b9 2f       	mov	r27, r25
    70d6:	99 27       	eor	r25, r25
    70d8:	b7 51       	subi	r27, 0x17	; 23
    70da:	a0 f0       	brcs	.+40     	; 0x7104 <__fixunssfsi+0x38>
    70dc:	d1 f0       	breq	.+52     	; 0x7112 <__fixunssfsi+0x46>
    70de:	66 0f       	add	r22, r22
    70e0:	77 1f       	adc	r23, r23
    70e2:	88 1f       	adc	r24, r24
    70e4:	99 1f       	adc	r25, r25
    70e6:	1a f0       	brmi	.+6      	; 0x70ee <__fixunssfsi+0x22>
    70e8:	ba 95       	dec	r27
    70ea:	c9 f7       	brne	.-14     	; 0x70de <__fixunssfsi+0x12>
    70ec:	12 c0       	rjmp	.+36     	; 0x7112 <__fixunssfsi+0x46>
    70ee:	b1 30       	cpi	r27, 0x01	; 1
    70f0:	81 f0       	breq	.+32     	; 0x7112 <__fixunssfsi+0x46>
    70f2:	7d d1       	rcall	.+762    	; 0x73ee <__fp_zero>
    70f4:	b1 e0       	ldi	r27, 0x01	; 1
    70f6:	08 95       	ret
    70f8:	7a c1       	rjmp	.+756    	; 0x73ee <__fp_zero>
    70fa:	67 2f       	mov	r22, r23
    70fc:	78 2f       	mov	r23, r24
    70fe:	88 27       	eor	r24, r24
    7100:	b8 5f       	subi	r27, 0xF8	; 248
    7102:	39 f0       	breq	.+14     	; 0x7112 <__fixunssfsi+0x46>
    7104:	b9 3f       	cpi	r27, 0xF9	; 249
    7106:	cc f3       	brlt	.-14     	; 0x70fa <__fixunssfsi+0x2e>
    7108:	86 95       	lsr	r24
    710a:	77 95       	ror	r23
    710c:	67 95       	ror	r22
    710e:	b3 95       	inc	r27
    7110:	d9 f7       	brne	.-10     	; 0x7108 <__fixunssfsi+0x3c>
    7112:	3e f4       	brtc	.+14     	; 0x7122 <__fixunssfsi+0x56>
    7114:	90 95       	com	r25
    7116:	80 95       	com	r24
    7118:	70 95       	com	r23
    711a:	61 95       	neg	r22
    711c:	7f 4f       	sbci	r23, 0xFF	; 255
    711e:	8f 4f       	sbci	r24, 0xFF	; 255
    7120:	9f 4f       	sbci	r25, 0xFF	; 255
    7122:	08 95       	ret

00007124 <__floatunsisf>:
    7124:	e8 94       	clt
    7126:	09 c0       	rjmp	.+18     	; 0x713a <__floatsisf+0x12>

00007128 <__floatsisf>:
    7128:	97 fb       	bst	r25, 7
    712a:	3e f4       	brtc	.+14     	; 0x713a <__floatsisf+0x12>
    712c:	90 95       	com	r25
    712e:	80 95       	com	r24
    7130:	70 95       	com	r23
    7132:	61 95       	neg	r22
    7134:	7f 4f       	sbci	r23, 0xFF	; 255
    7136:	8f 4f       	sbci	r24, 0xFF	; 255
    7138:	9f 4f       	sbci	r25, 0xFF	; 255
    713a:	99 23       	and	r25, r25
    713c:	a9 f0       	breq	.+42     	; 0x7168 <__floatsisf+0x40>
    713e:	f9 2f       	mov	r31, r25
    7140:	96 e9       	ldi	r25, 0x96	; 150
    7142:	bb 27       	eor	r27, r27
    7144:	93 95       	inc	r25
    7146:	f6 95       	lsr	r31
    7148:	87 95       	ror	r24
    714a:	77 95       	ror	r23
    714c:	67 95       	ror	r22
    714e:	b7 95       	ror	r27
    7150:	f1 11       	cpse	r31, r1
    7152:	f8 cf       	rjmp	.-16     	; 0x7144 <__floatsisf+0x1c>
    7154:	fa f4       	brpl	.+62     	; 0x7194 <__floatsisf+0x6c>
    7156:	bb 0f       	add	r27, r27
    7158:	11 f4       	brne	.+4      	; 0x715e <__floatsisf+0x36>
    715a:	60 ff       	sbrs	r22, 0
    715c:	1b c0       	rjmp	.+54     	; 0x7194 <__floatsisf+0x6c>
    715e:	6f 5f       	subi	r22, 0xFF	; 255
    7160:	7f 4f       	sbci	r23, 0xFF	; 255
    7162:	8f 4f       	sbci	r24, 0xFF	; 255
    7164:	9f 4f       	sbci	r25, 0xFF	; 255
    7166:	16 c0       	rjmp	.+44     	; 0x7194 <__floatsisf+0x6c>
    7168:	88 23       	and	r24, r24
    716a:	11 f0       	breq	.+4      	; 0x7170 <__floatsisf+0x48>
    716c:	96 e9       	ldi	r25, 0x96	; 150
    716e:	11 c0       	rjmp	.+34     	; 0x7192 <__floatsisf+0x6a>
    7170:	77 23       	and	r23, r23
    7172:	21 f0       	breq	.+8      	; 0x717c <__floatsisf+0x54>
    7174:	9e e8       	ldi	r25, 0x8E	; 142
    7176:	87 2f       	mov	r24, r23
    7178:	76 2f       	mov	r23, r22
    717a:	05 c0       	rjmp	.+10     	; 0x7186 <__floatsisf+0x5e>
    717c:	66 23       	and	r22, r22
    717e:	71 f0       	breq	.+28     	; 0x719c <__floatsisf+0x74>
    7180:	96 e8       	ldi	r25, 0x86	; 134
    7182:	86 2f       	mov	r24, r22
    7184:	70 e0       	ldi	r23, 0x00	; 0
    7186:	60 e0       	ldi	r22, 0x00	; 0
    7188:	2a f0       	brmi	.+10     	; 0x7194 <__floatsisf+0x6c>
    718a:	9a 95       	dec	r25
    718c:	66 0f       	add	r22, r22
    718e:	77 1f       	adc	r23, r23
    7190:	88 1f       	adc	r24, r24
    7192:	da f7       	brpl	.-10     	; 0x718a <__floatsisf+0x62>
    7194:	88 0f       	add	r24, r24
    7196:	96 95       	lsr	r25
    7198:	87 95       	ror	r24
    719a:	97 f9       	bld	r25, 7
    719c:	08 95       	ret
    719e:	ad d0       	rcall	.+346    	; 0x72fa <__fp_pscA>
    71a0:	18 f0       	brcs	.+6      	; 0x71a8 <__floatsisf+0x80>
    71a2:	11 f0       	breq	.+4      	; 0x71a8 <__floatsisf+0x80>
    71a4:	b1 d0       	rcall	.+354    	; 0x7308 <__fp_pscB>
    71a6:	38 f4       	brcc	.+14     	; 0x71b6 <fmod+0xa>
    71a8:	80 c0       	rjmp	.+256    	; 0x72aa <__fp_nan>
    71aa:	22 c1       	rjmp	.+580    	; 0x73f0 <__fp_szero>

000071ac <fmod>:
    71ac:	e9 2f       	mov	r30, r25
    71ae:	fd d0       	rcall	.+506    	; 0x73aa <__fp_split3>
    71b0:	b0 f3       	brcs	.-20     	; 0x719e <__floatsisf+0x76>
    71b2:	55 23       	and	r21, r21
    71b4:	c9 f3       	breq	.-14     	; 0x71a8 <__floatsisf+0x80>
    71b6:	e7 fb       	bst	r30, 7
    71b8:	62 17       	cp	r22, r18
    71ba:	73 07       	cpc	r23, r19
    71bc:	84 07       	cpc	r24, r20
    71be:	95 07       	cpc	r25, r21
    71c0:	a8 f1       	brcs	.+106    	; 0x722c <fmod+0x80>
    71c2:	99 f3       	breq	.-26     	; 0x71aa <__floatsisf+0x82>
    71c4:	e9 2f       	mov	r30, r25
    71c6:	ff 27       	eor	r31, r31
    71c8:	88 23       	and	r24, r24
    71ca:	2a f0       	brmi	.+10     	; 0x71d6 <fmod+0x2a>
    71cc:	31 97       	sbiw	r30, 0x01	; 1
    71ce:	66 0f       	add	r22, r22
    71d0:	77 1f       	adc	r23, r23
    71d2:	88 1f       	adc	r24, r24
    71d4:	da f7       	brpl	.-10     	; 0x71cc <fmod+0x20>
    71d6:	95 2f       	mov	r25, r21
    71d8:	55 27       	eor	r21, r21
    71da:	44 23       	and	r20, r20
    71dc:	32 f0       	brmi	.+12     	; 0x71ea <fmod+0x3e>
    71de:	91 50       	subi	r25, 0x01	; 1
    71e0:	50 40       	sbci	r21, 0x00	; 0
    71e2:	22 0f       	add	r18, r18
    71e4:	33 1f       	adc	r19, r19
    71e6:	44 1f       	adc	r20, r20
    71e8:	d2 f7       	brpl	.-12     	; 0x71de <fmod+0x32>
    71ea:	bb 27       	eor	r27, r27
    71ec:	e9 1b       	sub	r30, r25
    71ee:	f5 0b       	sbc	r31, r21
    71f0:	62 1b       	sub	r22, r18
    71f2:	73 0b       	sbc	r23, r19
    71f4:	84 0b       	sbc	r24, r20
    71f6:	b1 09       	sbc	r27, r1
    71f8:	c1 f2       	breq	.-80     	; 0x71aa <__floatsisf+0x82>
    71fa:	22 f4       	brpl	.+8      	; 0x7204 <fmod+0x58>
    71fc:	62 0f       	add	r22, r18
    71fe:	73 1f       	adc	r23, r19
    7200:	84 1f       	adc	r24, r20
    7202:	b1 1d       	adc	r27, r1
    7204:	31 97       	sbiw	r30, 0x01	; 1
    7206:	2a f0       	brmi	.+10     	; 0x7212 <fmod+0x66>
    7208:	66 0f       	add	r22, r22
    720a:	77 1f       	adc	r23, r23
    720c:	88 1f       	adc	r24, r24
    720e:	bb 1f       	adc	r27, r27
    7210:	ef cf       	rjmp	.-34     	; 0x71f0 <fmod+0x44>
    7212:	91 50       	subi	r25, 0x01	; 1
    7214:	50 40       	sbci	r21, 0x00	; 0
    7216:	5a f0       	brmi	.+22     	; 0x722e <fmod+0x82>
    7218:	41 f0       	breq	.+16     	; 0x722a <fmod+0x7e>
    721a:	88 23       	and	r24, r24
    721c:	32 f0       	brmi	.+12     	; 0x722a <fmod+0x7e>
    721e:	66 0f       	add	r22, r22
    7220:	77 1f       	adc	r23, r23
    7222:	88 1f       	adc	r24, r24
    7224:	91 50       	subi	r25, 0x01	; 1
    7226:	50 40       	sbci	r21, 0x00	; 0
    7228:	c1 f7       	brne	.-16     	; 0x721a <fmod+0x6e>
    722a:	93 95       	inc	r25
    722c:	30 c0       	rjmp	.+96     	; 0x728e <__fp_mpack>
    722e:	86 95       	lsr	r24
    7230:	77 95       	ror	r23
    7232:	67 95       	ror	r22
    7234:	9f 5f       	subi	r25, 0xFF	; 255
    7236:	d9 f7       	brne	.-10     	; 0x722e <fmod+0x82>
    7238:	f8 cf       	rjmp	.-16     	; 0x722a <fmod+0x7e>

0000723a <__fp_cmp>:
    723a:	99 0f       	add	r25, r25
    723c:	00 08       	sbc	r0, r0
    723e:	55 0f       	add	r21, r21
    7240:	aa 0b       	sbc	r26, r26
    7242:	e0 e8       	ldi	r30, 0x80	; 128
    7244:	fe ef       	ldi	r31, 0xFE	; 254
    7246:	16 16       	cp	r1, r22
    7248:	17 06       	cpc	r1, r23
    724a:	e8 07       	cpc	r30, r24
    724c:	f9 07       	cpc	r31, r25
    724e:	c0 f0       	brcs	.+48     	; 0x7280 <__fp_cmp+0x46>
    7250:	12 16       	cp	r1, r18
    7252:	13 06       	cpc	r1, r19
    7254:	e4 07       	cpc	r30, r20
    7256:	f5 07       	cpc	r31, r21
    7258:	98 f0       	brcs	.+38     	; 0x7280 <__fp_cmp+0x46>
    725a:	62 1b       	sub	r22, r18
    725c:	73 0b       	sbc	r23, r19
    725e:	84 0b       	sbc	r24, r20
    7260:	95 0b       	sbc	r25, r21
    7262:	39 f4       	brne	.+14     	; 0x7272 <__fp_cmp+0x38>
    7264:	0a 26       	eor	r0, r26
    7266:	61 f0       	breq	.+24     	; 0x7280 <__fp_cmp+0x46>
    7268:	23 2b       	or	r18, r19
    726a:	24 2b       	or	r18, r20
    726c:	25 2b       	or	r18, r21
    726e:	21 f4       	brne	.+8      	; 0x7278 <__fp_cmp+0x3e>
    7270:	08 95       	ret
    7272:	0a 26       	eor	r0, r26
    7274:	09 f4       	brne	.+2      	; 0x7278 <__fp_cmp+0x3e>
    7276:	a1 40       	sbci	r26, 0x01	; 1
    7278:	a6 95       	lsr	r26
    727a:	8f ef       	ldi	r24, 0xFF	; 255
    727c:	81 1d       	adc	r24, r1
    727e:	81 1d       	adc	r24, r1
    7280:	08 95       	ret

00007282 <__fp_inf>:
    7282:	97 f9       	bld	r25, 7
    7284:	9f 67       	ori	r25, 0x7F	; 127
    7286:	80 e8       	ldi	r24, 0x80	; 128
    7288:	70 e0       	ldi	r23, 0x00	; 0
    728a:	60 e0       	ldi	r22, 0x00	; 0
    728c:	08 95       	ret

0000728e <__fp_mpack>:
    728e:	9f 3f       	cpi	r25, 0xFF	; 255
    7290:	31 f0       	breq	.+12     	; 0x729e <__fp_mpack_finite+0xc>

00007292 <__fp_mpack_finite>:
    7292:	91 50       	subi	r25, 0x01	; 1
    7294:	20 f4       	brcc	.+8      	; 0x729e <__fp_mpack_finite+0xc>
    7296:	87 95       	ror	r24
    7298:	77 95       	ror	r23
    729a:	67 95       	ror	r22
    729c:	b7 95       	ror	r27
    729e:	88 0f       	add	r24, r24
    72a0:	91 1d       	adc	r25, r1
    72a2:	96 95       	lsr	r25
    72a4:	87 95       	ror	r24
    72a6:	97 f9       	bld	r25, 7
    72a8:	08 95       	ret

000072aa <__fp_nan>:
    72aa:	9f ef       	ldi	r25, 0xFF	; 255
    72ac:	80 ec       	ldi	r24, 0xC0	; 192
    72ae:	08 95       	ret

000072b0 <__fp_powser>:
    72b0:	df 93       	push	r29
    72b2:	cf 93       	push	r28
    72b4:	1f 93       	push	r17
    72b6:	0f 93       	push	r16
    72b8:	ff 92       	push	r15
    72ba:	ef 92       	push	r14
    72bc:	df 92       	push	r13
    72be:	7b 01       	movw	r14, r22
    72c0:	8c 01       	movw	r16, r24
    72c2:	68 94       	set
    72c4:	05 c0       	rjmp	.+10     	; 0x72d0 <__fp_powser+0x20>
    72c6:	da 2e       	mov	r13, r26
    72c8:	ef 01       	movw	r28, r30
    72ca:	af d0       	rcall	.+350    	; 0x742a <__mulsf3x>
    72cc:	fe 01       	movw	r30, r28
    72ce:	e8 94       	clt
    72d0:	a5 91       	lpm	r26, Z+
    72d2:	25 91       	lpm	r18, Z+
    72d4:	35 91       	lpm	r19, Z+
    72d6:	45 91       	lpm	r20, Z+
    72d8:	55 91       	lpm	r21, Z+
    72da:	ae f3       	brts	.-22     	; 0x72c6 <__fp_powser+0x16>
    72dc:	ef 01       	movw	r28, r30
    72de:	cd dd       	rcall	.-1126   	; 0x6e7a <__addsf3x>
    72e0:	fe 01       	movw	r30, r28
    72e2:	97 01       	movw	r18, r14
    72e4:	a8 01       	movw	r20, r16
    72e6:	da 94       	dec	r13
    72e8:	79 f7       	brne	.-34     	; 0x72c8 <__fp_powser+0x18>
    72ea:	df 90       	pop	r13
    72ec:	ef 90       	pop	r14
    72ee:	ff 90       	pop	r15
    72f0:	0f 91       	pop	r16
    72f2:	1f 91       	pop	r17
    72f4:	cf 91       	pop	r28
    72f6:	df 91       	pop	r29
    72f8:	08 95       	ret

000072fa <__fp_pscA>:
    72fa:	00 24       	eor	r0, r0
    72fc:	0a 94       	dec	r0
    72fe:	16 16       	cp	r1, r22
    7300:	17 06       	cpc	r1, r23
    7302:	18 06       	cpc	r1, r24
    7304:	09 06       	cpc	r0, r25
    7306:	08 95       	ret

00007308 <__fp_pscB>:
    7308:	00 24       	eor	r0, r0
    730a:	0a 94       	dec	r0
    730c:	12 16       	cp	r1, r18
    730e:	13 06       	cpc	r1, r19
    7310:	14 06       	cpc	r1, r20
    7312:	05 06       	cpc	r0, r21
    7314:	08 95       	ret
    7316:	c9 cf       	rjmp	.-110    	; 0x72aa <__fp_nan>

00007318 <__fp_rempio2>:
    7318:	50 d0       	rcall	.+160    	; 0x73ba <__fp_splitA>
    731a:	e8 f3       	brcs	.-6      	; 0x7316 <__fp_pscB+0xe>
    731c:	e8 94       	clt
    731e:	e0 e0       	ldi	r30, 0x00	; 0
    7320:	bb 27       	eor	r27, r27
    7322:	9f 57       	subi	r25, 0x7F	; 127
    7324:	f0 f0       	brcs	.+60     	; 0x7362 <__fp_rempio2+0x4a>
    7326:	2a ed       	ldi	r18, 0xDA	; 218
    7328:	3f e0       	ldi	r19, 0x0F	; 15
    732a:	49 ec       	ldi	r20, 0xC9	; 201
    732c:	06 c0       	rjmp	.+12     	; 0x733a <__fp_rempio2+0x22>
    732e:	ee 0f       	add	r30, r30
    7330:	bb 0f       	add	r27, r27
    7332:	66 1f       	adc	r22, r22
    7334:	77 1f       	adc	r23, r23
    7336:	88 1f       	adc	r24, r24
    7338:	28 f0       	brcs	.+10     	; 0x7344 <__fp_rempio2+0x2c>
    733a:	b2 3a       	cpi	r27, 0xA2	; 162
    733c:	62 07       	cpc	r22, r18
    733e:	73 07       	cpc	r23, r19
    7340:	84 07       	cpc	r24, r20
    7342:	28 f0       	brcs	.+10     	; 0x734e <__fp_rempio2+0x36>
    7344:	b2 5a       	subi	r27, 0xA2	; 162
    7346:	62 0b       	sbc	r22, r18
    7348:	73 0b       	sbc	r23, r19
    734a:	84 0b       	sbc	r24, r20
    734c:	e3 95       	inc	r30
    734e:	9a 95       	dec	r25
    7350:	72 f7       	brpl	.-36     	; 0x732e <__fp_rempio2+0x16>
    7352:	80 38       	cpi	r24, 0x80	; 128
    7354:	30 f4       	brcc	.+12     	; 0x7362 <__fp_rempio2+0x4a>
    7356:	9a 95       	dec	r25
    7358:	bb 0f       	add	r27, r27
    735a:	66 1f       	adc	r22, r22
    735c:	77 1f       	adc	r23, r23
    735e:	88 1f       	adc	r24, r24
    7360:	d2 f7       	brpl	.-12     	; 0x7356 <__fp_rempio2+0x3e>
    7362:	90 48       	sbci	r25, 0x80	; 128
    7364:	96 cf       	rjmp	.-212    	; 0x7292 <__fp_mpack_finite>

00007366 <__fp_round>:
    7366:	09 2e       	mov	r0, r25
    7368:	03 94       	inc	r0
    736a:	00 0c       	add	r0, r0
    736c:	11 f4       	brne	.+4      	; 0x7372 <__fp_round+0xc>
    736e:	88 23       	and	r24, r24
    7370:	52 f0       	brmi	.+20     	; 0x7386 <__fp_round+0x20>
    7372:	bb 0f       	add	r27, r27
    7374:	40 f4       	brcc	.+16     	; 0x7386 <__fp_round+0x20>
    7376:	bf 2b       	or	r27, r31
    7378:	11 f4       	brne	.+4      	; 0x737e <__fp_round+0x18>
    737a:	60 ff       	sbrs	r22, 0
    737c:	04 c0       	rjmp	.+8      	; 0x7386 <__fp_round+0x20>
    737e:	6f 5f       	subi	r22, 0xFF	; 255
    7380:	7f 4f       	sbci	r23, 0xFF	; 255
    7382:	8f 4f       	sbci	r24, 0xFF	; 255
    7384:	9f 4f       	sbci	r25, 0xFF	; 255
    7386:	08 95       	ret

00007388 <__fp_sinus>:
    7388:	ef 93       	push	r30
    738a:	e0 ff       	sbrs	r30, 0
    738c:	06 c0       	rjmp	.+12     	; 0x739a <__fp_sinus+0x12>
    738e:	a2 ea       	ldi	r26, 0xA2	; 162
    7390:	2a ed       	ldi	r18, 0xDA	; 218
    7392:	3f e0       	ldi	r19, 0x0F	; 15
    7394:	49 ec       	ldi	r20, 0xC9	; 201
    7396:	5f eb       	ldi	r21, 0xBF	; 191
    7398:	70 dd       	rcall	.-1312   	; 0x6e7a <__addsf3x>
    739a:	e5 df       	rcall	.-54     	; 0x7366 <__fp_round>
    739c:	0f 90       	pop	r0
    739e:	03 94       	inc	r0
    73a0:	01 fc       	sbrc	r0, 1
    73a2:	90 58       	subi	r25, 0x80	; 128
    73a4:	e7 e2       	ldi	r30, 0x27	; 39
    73a6:	f3 e0       	ldi	r31, 0x03	; 3
    73a8:	e9 c0       	rjmp	.+466    	; 0x757c <__fp_powsodd>

000073aa <__fp_split3>:
    73aa:	57 fd       	sbrc	r21, 7
    73ac:	90 58       	subi	r25, 0x80	; 128
    73ae:	44 0f       	add	r20, r20
    73b0:	55 1f       	adc	r21, r21
    73b2:	59 f0       	breq	.+22     	; 0x73ca <__fp_splitA+0x10>
    73b4:	5f 3f       	cpi	r21, 0xFF	; 255
    73b6:	71 f0       	breq	.+28     	; 0x73d4 <__fp_splitA+0x1a>
    73b8:	47 95       	ror	r20

000073ba <__fp_splitA>:
    73ba:	88 0f       	add	r24, r24
    73bc:	97 fb       	bst	r25, 7
    73be:	99 1f       	adc	r25, r25
    73c0:	61 f0       	breq	.+24     	; 0x73da <__fp_splitA+0x20>
    73c2:	9f 3f       	cpi	r25, 0xFF	; 255
    73c4:	79 f0       	breq	.+30     	; 0x73e4 <__fp_splitA+0x2a>
    73c6:	87 95       	ror	r24
    73c8:	08 95       	ret
    73ca:	12 16       	cp	r1, r18
    73cc:	13 06       	cpc	r1, r19
    73ce:	14 06       	cpc	r1, r20
    73d0:	55 1f       	adc	r21, r21
    73d2:	f2 cf       	rjmp	.-28     	; 0x73b8 <__fp_split3+0xe>
    73d4:	46 95       	lsr	r20
    73d6:	f1 df       	rcall	.-30     	; 0x73ba <__fp_splitA>
    73d8:	08 c0       	rjmp	.+16     	; 0x73ea <__fp_splitA+0x30>
    73da:	16 16       	cp	r1, r22
    73dc:	17 06       	cpc	r1, r23
    73de:	18 06       	cpc	r1, r24
    73e0:	99 1f       	adc	r25, r25
    73e2:	f1 cf       	rjmp	.-30     	; 0x73c6 <__fp_splitA+0xc>
    73e4:	86 95       	lsr	r24
    73e6:	71 05       	cpc	r23, r1
    73e8:	61 05       	cpc	r22, r1
    73ea:	08 94       	sec
    73ec:	08 95       	ret

000073ee <__fp_zero>:
    73ee:	e8 94       	clt

000073f0 <__fp_szero>:
    73f0:	bb 27       	eor	r27, r27
    73f2:	66 27       	eor	r22, r22
    73f4:	77 27       	eor	r23, r23
    73f6:	cb 01       	movw	r24, r22
    73f8:	97 f9       	bld	r25, 7
    73fa:	08 95       	ret

000073fc <__gesf2>:
    73fc:	1e df       	rcall	.-452    	; 0x723a <__fp_cmp>
    73fe:	08 f4       	brcc	.+2      	; 0x7402 <__gesf2+0x6>
    7400:	8f ef       	ldi	r24, 0xFF	; 255
    7402:	08 95       	ret

00007404 <inverse>:
    7404:	9b 01       	movw	r18, r22
    7406:	ac 01       	movw	r20, r24
    7408:	60 e0       	ldi	r22, 0x00	; 0
    740a:	70 e0       	ldi	r23, 0x00	; 0
    740c:	80 e8       	ldi	r24, 0x80	; 128
    740e:	9f e3       	ldi	r25, 0x3F	; 63
    7410:	f0 cd       	rjmp	.-1056   	; 0x6ff2 <__divsf3>

00007412 <__mulsf3>:
    7412:	0b d0       	rcall	.+22     	; 0x742a <__mulsf3x>
    7414:	a8 cf       	rjmp	.-176    	; 0x7366 <__fp_round>
    7416:	71 df       	rcall	.-286    	; 0x72fa <__fp_pscA>
    7418:	28 f0       	brcs	.+10     	; 0x7424 <__mulsf3+0x12>
    741a:	76 df       	rcall	.-276    	; 0x7308 <__fp_pscB>
    741c:	18 f0       	brcs	.+6      	; 0x7424 <__mulsf3+0x12>
    741e:	95 23       	and	r25, r21
    7420:	09 f0       	breq	.+2      	; 0x7424 <__mulsf3+0x12>
    7422:	2f cf       	rjmp	.-418    	; 0x7282 <__fp_inf>
    7424:	42 cf       	rjmp	.-380    	; 0x72aa <__fp_nan>
    7426:	11 24       	eor	r1, r1
    7428:	e3 cf       	rjmp	.-58     	; 0x73f0 <__fp_szero>

0000742a <__mulsf3x>:
    742a:	bf df       	rcall	.-130    	; 0x73aa <__fp_split3>
    742c:	a0 f3       	brcs	.-24     	; 0x7416 <__mulsf3+0x4>

0000742e <__mulsf3_pse>:
    742e:	95 9f       	mul	r25, r21
    7430:	d1 f3       	breq	.-12     	; 0x7426 <__mulsf3+0x14>
    7432:	95 0f       	add	r25, r21
    7434:	50 e0       	ldi	r21, 0x00	; 0
    7436:	55 1f       	adc	r21, r21
    7438:	62 9f       	mul	r22, r18
    743a:	f0 01       	movw	r30, r0
    743c:	72 9f       	mul	r23, r18
    743e:	bb 27       	eor	r27, r27
    7440:	f0 0d       	add	r31, r0
    7442:	b1 1d       	adc	r27, r1
    7444:	63 9f       	mul	r22, r19
    7446:	aa 27       	eor	r26, r26
    7448:	f0 0d       	add	r31, r0
    744a:	b1 1d       	adc	r27, r1
    744c:	aa 1f       	adc	r26, r26
    744e:	64 9f       	mul	r22, r20
    7450:	66 27       	eor	r22, r22
    7452:	b0 0d       	add	r27, r0
    7454:	a1 1d       	adc	r26, r1
    7456:	66 1f       	adc	r22, r22
    7458:	82 9f       	mul	r24, r18
    745a:	22 27       	eor	r18, r18
    745c:	b0 0d       	add	r27, r0
    745e:	a1 1d       	adc	r26, r1
    7460:	62 1f       	adc	r22, r18
    7462:	73 9f       	mul	r23, r19
    7464:	b0 0d       	add	r27, r0
    7466:	a1 1d       	adc	r26, r1
    7468:	62 1f       	adc	r22, r18
    746a:	83 9f       	mul	r24, r19
    746c:	a0 0d       	add	r26, r0
    746e:	61 1d       	adc	r22, r1
    7470:	22 1f       	adc	r18, r18
    7472:	74 9f       	mul	r23, r20
    7474:	33 27       	eor	r19, r19
    7476:	a0 0d       	add	r26, r0
    7478:	61 1d       	adc	r22, r1
    747a:	23 1f       	adc	r18, r19
    747c:	84 9f       	mul	r24, r20
    747e:	60 0d       	add	r22, r0
    7480:	21 1d       	adc	r18, r1
    7482:	82 2f       	mov	r24, r18
    7484:	76 2f       	mov	r23, r22
    7486:	6a 2f       	mov	r22, r26
    7488:	11 24       	eor	r1, r1
    748a:	9f 57       	subi	r25, 0x7F	; 127
    748c:	50 40       	sbci	r21, 0x00	; 0
    748e:	8a f0       	brmi	.+34     	; 0x74b2 <__mulsf3_pse+0x84>
    7490:	e1 f0       	breq	.+56     	; 0x74ca <__mulsf3_pse+0x9c>
    7492:	88 23       	and	r24, r24
    7494:	4a f0       	brmi	.+18     	; 0x74a8 <__mulsf3_pse+0x7a>
    7496:	ee 0f       	add	r30, r30
    7498:	ff 1f       	adc	r31, r31
    749a:	bb 1f       	adc	r27, r27
    749c:	66 1f       	adc	r22, r22
    749e:	77 1f       	adc	r23, r23
    74a0:	88 1f       	adc	r24, r24
    74a2:	91 50       	subi	r25, 0x01	; 1
    74a4:	50 40       	sbci	r21, 0x00	; 0
    74a6:	a9 f7       	brne	.-22     	; 0x7492 <__mulsf3_pse+0x64>
    74a8:	9e 3f       	cpi	r25, 0xFE	; 254
    74aa:	51 05       	cpc	r21, r1
    74ac:	70 f0       	brcs	.+28     	; 0x74ca <__mulsf3_pse+0x9c>
    74ae:	e9 ce       	rjmp	.-558    	; 0x7282 <__fp_inf>
    74b0:	9f cf       	rjmp	.-194    	; 0x73f0 <__fp_szero>
    74b2:	5f 3f       	cpi	r21, 0xFF	; 255
    74b4:	ec f3       	brlt	.-6      	; 0x74b0 <__mulsf3_pse+0x82>
    74b6:	98 3e       	cpi	r25, 0xE8	; 232
    74b8:	dc f3       	brlt	.-10     	; 0x74b0 <__mulsf3_pse+0x82>
    74ba:	86 95       	lsr	r24
    74bc:	77 95       	ror	r23
    74be:	67 95       	ror	r22
    74c0:	b7 95       	ror	r27
    74c2:	f7 95       	ror	r31
    74c4:	e7 95       	ror	r30
    74c6:	9f 5f       	subi	r25, 0xFF	; 255
    74c8:	c1 f7       	brne	.-16     	; 0x74ba <__mulsf3_pse+0x8c>
    74ca:	fe 2b       	or	r31, r30
    74cc:	88 0f       	add	r24, r24
    74ce:	91 1d       	adc	r25, r1
    74d0:	96 95       	lsr	r25
    74d2:	87 95       	ror	r24
    74d4:	97 f9       	bld	r25, 7
    74d6:	08 95       	ret

000074d8 <sin>:
    74d8:	9f 93       	push	r25
    74da:	1e df       	rcall	.-452    	; 0x7318 <__fp_rempio2>
    74dc:	0f 90       	pop	r0
    74de:	07 fc       	sbrc	r0, 7
    74e0:	ee 5f       	subi	r30, 0xFE	; 254
    74e2:	52 cf       	rjmp	.-348    	; 0x7388 <__fp_sinus>
    74e4:	11 f4       	brne	.+4      	; 0x74ea <sin+0x12>
    74e6:	0e f4       	brtc	.+2      	; 0x74ea <sin+0x12>
    74e8:	e0 ce       	rjmp	.-576    	; 0x72aa <__fp_nan>
    74ea:	d1 ce       	rjmp	.-606    	; 0x728e <__fp_mpack>

000074ec <sqrt>:
    74ec:	66 df       	rcall	.-308    	; 0x73ba <__fp_splitA>
    74ee:	d0 f3       	brcs	.-12     	; 0x74e4 <sin+0xc>
    74f0:	99 23       	and	r25, r25
    74f2:	d9 f3       	breq	.-10     	; 0x74ea <sin+0x12>
    74f4:	ce f3       	brts	.-14     	; 0x74e8 <sin+0x10>
    74f6:	9f 57       	subi	r25, 0x7F	; 127
    74f8:	55 0b       	sbc	r21, r21
    74fa:	87 ff       	sbrs	r24, 7
    74fc:	38 d0       	rcall	.+112    	; 0x756e <__fp_norm2>
    74fe:	00 24       	eor	r0, r0
    7500:	a0 e6       	ldi	r26, 0x60	; 96
    7502:	40 ea       	ldi	r20, 0xA0	; 160
    7504:	90 01       	movw	r18, r0
    7506:	80 58       	subi	r24, 0x80	; 128
    7508:	56 95       	lsr	r21
    750a:	97 95       	ror	r25
    750c:	28 f4       	brcc	.+10     	; 0x7518 <sqrt+0x2c>
    750e:	80 5c       	subi	r24, 0xC0	; 192
    7510:	66 0f       	add	r22, r22
    7512:	77 1f       	adc	r23, r23
    7514:	88 1f       	adc	r24, r24
    7516:	20 f0       	brcs	.+8      	; 0x7520 <sqrt+0x34>
    7518:	26 17       	cp	r18, r22
    751a:	37 07       	cpc	r19, r23
    751c:	48 07       	cpc	r20, r24
    751e:	30 f4       	brcc	.+12     	; 0x752c <sqrt+0x40>
    7520:	62 1b       	sub	r22, r18
    7522:	73 0b       	sbc	r23, r19
    7524:	84 0b       	sbc	r24, r20
    7526:	20 29       	or	r18, r0
    7528:	31 29       	or	r19, r1
    752a:	4a 2b       	or	r20, r26
    752c:	a6 95       	lsr	r26
    752e:	17 94       	ror	r1
    7530:	07 94       	ror	r0
    7532:	20 25       	eor	r18, r0
    7534:	31 25       	eor	r19, r1
    7536:	4a 27       	eor	r20, r26
    7538:	58 f7       	brcc	.-42     	; 0x7510 <sqrt+0x24>
    753a:	66 0f       	add	r22, r22
    753c:	77 1f       	adc	r23, r23
    753e:	88 1f       	adc	r24, r24
    7540:	20 f0       	brcs	.+8      	; 0x754a <sqrt+0x5e>
    7542:	26 17       	cp	r18, r22
    7544:	37 07       	cpc	r19, r23
    7546:	48 07       	cpc	r20, r24
    7548:	30 f4       	brcc	.+12     	; 0x7556 <sqrt+0x6a>
    754a:	62 0b       	sbc	r22, r18
    754c:	73 0b       	sbc	r23, r19
    754e:	84 0b       	sbc	r24, r20
    7550:	20 0d       	add	r18, r0
    7552:	31 1d       	adc	r19, r1
    7554:	41 1d       	adc	r20, r1
    7556:	a0 95       	com	r26
    7558:	81 f7       	brne	.-32     	; 0x753a <sqrt+0x4e>
    755a:	b9 01       	movw	r22, r18
    755c:	84 2f       	mov	r24, r20
    755e:	91 58       	subi	r25, 0x81	; 129
    7560:	88 0f       	add	r24, r24
    7562:	96 95       	lsr	r25
    7564:	87 95       	ror	r24
    7566:	08 95       	ret

00007568 <square>:
    7568:	9b 01       	movw	r18, r22
    756a:	ac 01       	movw	r20, r24
    756c:	52 cf       	rjmp	.-348    	; 0x7412 <__mulsf3>

0000756e <__fp_norm2>:
    756e:	91 50       	subi	r25, 0x01	; 1
    7570:	50 40       	sbci	r21, 0x00	; 0
    7572:	66 0f       	add	r22, r22
    7574:	77 1f       	adc	r23, r23
    7576:	88 1f       	adc	r24, r24
    7578:	d2 f7       	brpl	.-12     	; 0x756e <__fp_norm2>
    757a:	08 95       	ret

0000757c <__fp_powsodd>:
    757c:	9f 93       	push	r25
    757e:	8f 93       	push	r24
    7580:	7f 93       	push	r23
    7582:	6f 93       	push	r22
    7584:	ff 93       	push	r31
    7586:	ef 93       	push	r30
    7588:	9b 01       	movw	r18, r22
    758a:	ac 01       	movw	r20, r24
    758c:	42 df       	rcall	.-380    	; 0x7412 <__mulsf3>
    758e:	ef 91       	pop	r30
    7590:	ff 91       	pop	r31
    7592:	8e de       	rcall	.-740    	; 0x72b0 <__fp_powser>
    7594:	2f 91       	pop	r18
    7596:	3f 91       	pop	r19
    7598:	4f 91       	pop	r20
    759a:	5f 91       	pop	r21
    759c:	3a cf       	rjmp	.-396    	; 0x7412 <__mulsf3>

0000759e <vfprintf>:
    759e:	2f 92       	push	r2
    75a0:	3f 92       	push	r3
    75a2:	4f 92       	push	r4
    75a4:	5f 92       	push	r5
    75a6:	6f 92       	push	r6
    75a8:	7f 92       	push	r7
    75aa:	8f 92       	push	r8
    75ac:	9f 92       	push	r9
    75ae:	af 92       	push	r10
    75b0:	bf 92       	push	r11
    75b2:	cf 92       	push	r12
    75b4:	df 92       	push	r13
    75b6:	ef 92       	push	r14
    75b8:	ff 92       	push	r15
    75ba:	0f 93       	push	r16
    75bc:	1f 93       	push	r17
    75be:	cf 93       	push	r28
    75c0:	df 93       	push	r29
    75c2:	cd b7       	in	r28, 0x3d	; 61
    75c4:	de b7       	in	r29, 0x3e	; 62
    75c6:	63 97       	sbiw	r28, 0x13	; 19
    75c8:	cd bf       	out	0x3d, r28	; 61
    75ca:	de bf       	out	0x3e, r29	; 62
    75cc:	7c 01       	movw	r14, r24
    75ce:	1b 01       	movw	r2, r22
    75d0:	6a 01       	movw	r12, r20
    75d2:	fc 01       	movw	r30, r24
    75d4:	16 82       	std	Z+6, r1	; 0x06
    75d6:	17 82       	std	Z+7, r1	; 0x07
    75d8:	83 81       	ldd	r24, Z+3	; 0x03
    75da:	81 ff       	sbrs	r24, 1
    75dc:	49 c3       	rjmp	.+1682   	; 0x7c70 <vfprintf+0x6d2>
    75de:	be 01       	movw	r22, r28
    75e0:	6f 5f       	subi	r22, 0xFF	; 255
    75e2:	7f 4f       	sbci	r23, 0xFF	; 255
    75e4:	4b 01       	movw	r8, r22
    75e6:	f7 01       	movw	r30, r14
    75e8:	93 81       	ldd	r25, Z+3	; 0x03
    75ea:	f1 01       	movw	r30, r2
    75ec:	93 fd       	sbrc	r25, 3
    75ee:	85 91       	lpm	r24, Z+
    75f0:	93 ff       	sbrs	r25, 3
    75f2:	81 91       	ld	r24, Z+
    75f4:	1f 01       	movw	r2, r30
    75f6:	88 23       	and	r24, r24
    75f8:	09 f4       	brne	.+2      	; 0x75fc <vfprintf+0x5e>
    75fa:	36 c3       	rjmp	.+1644   	; 0x7c68 <vfprintf+0x6ca>
    75fc:	85 32       	cpi	r24, 0x25	; 37
    75fe:	39 f4       	brne	.+14     	; 0x760e <vfprintf+0x70>
    7600:	93 fd       	sbrc	r25, 3
    7602:	85 91       	lpm	r24, Z+
    7604:	93 ff       	sbrs	r25, 3
    7606:	81 91       	ld	r24, Z+
    7608:	1f 01       	movw	r2, r30
    760a:	85 32       	cpi	r24, 0x25	; 37
    760c:	31 f4       	brne	.+12     	; 0x761a <vfprintf+0x7c>
    760e:	b7 01       	movw	r22, r14
    7610:	90 e0       	ldi	r25, 0x00	; 0
    7612:	3b d6       	rcall	.+3190   	; 0x828a <fputc>
    7614:	56 01       	movw	r10, r12
    7616:	65 01       	movw	r12, r10
    7618:	e6 cf       	rjmp	.-52     	; 0x75e6 <vfprintf+0x48>
    761a:	10 e0       	ldi	r17, 0x00	; 0
    761c:	51 2c       	mov	r5, r1
    761e:	20 e0       	ldi	r18, 0x00	; 0
    7620:	20 32       	cpi	r18, 0x20	; 32
    7622:	a0 f4       	brcc	.+40     	; 0x764c <vfprintf+0xae>
    7624:	8b 32       	cpi	r24, 0x2B	; 43
    7626:	69 f0       	breq	.+26     	; 0x7642 <vfprintf+0xa4>
    7628:	30 f4       	brcc	.+12     	; 0x7636 <vfprintf+0x98>
    762a:	80 32       	cpi	r24, 0x20	; 32
    762c:	59 f0       	breq	.+22     	; 0x7644 <vfprintf+0xa6>
    762e:	83 32       	cpi	r24, 0x23	; 35
    7630:	69 f4       	brne	.+26     	; 0x764c <vfprintf+0xae>
    7632:	20 61       	ori	r18, 0x10	; 16
    7634:	2c c0       	rjmp	.+88     	; 0x768e <vfprintf+0xf0>
    7636:	8d 32       	cpi	r24, 0x2D	; 45
    7638:	39 f0       	breq	.+14     	; 0x7648 <vfprintf+0xaa>
    763a:	80 33       	cpi	r24, 0x30	; 48
    763c:	39 f4       	brne	.+14     	; 0x764c <vfprintf+0xae>
    763e:	21 60       	ori	r18, 0x01	; 1
    7640:	26 c0       	rjmp	.+76     	; 0x768e <vfprintf+0xf0>
    7642:	22 60       	ori	r18, 0x02	; 2
    7644:	24 60       	ori	r18, 0x04	; 4
    7646:	23 c0       	rjmp	.+70     	; 0x768e <vfprintf+0xf0>
    7648:	28 60       	ori	r18, 0x08	; 8
    764a:	21 c0       	rjmp	.+66     	; 0x768e <vfprintf+0xf0>
    764c:	27 fd       	sbrc	r18, 7
    764e:	27 c0       	rjmp	.+78     	; 0x769e <vfprintf+0x100>
    7650:	30 ed       	ldi	r19, 0xD0	; 208
    7652:	38 0f       	add	r19, r24
    7654:	3a 30       	cpi	r19, 0x0A	; 10
    7656:	78 f4       	brcc	.+30     	; 0x7676 <vfprintf+0xd8>
    7658:	26 ff       	sbrs	r18, 6
    765a:	06 c0       	rjmp	.+12     	; 0x7668 <vfprintf+0xca>
    765c:	fa e0       	ldi	r31, 0x0A	; 10
    765e:	1f 9f       	mul	r17, r31
    7660:	30 0d       	add	r19, r0
    7662:	11 24       	eor	r1, r1
    7664:	13 2f       	mov	r17, r19
    7666:	13 c0       	rjmp	.+38     	; 0x768e <vfprintf+0xf0>
    7668:	6a e0       	ldi	r22, 0x0A	; 10
    766a:	56 9e       	mul	r5, r22
    766c:	30 0d       	add	r19, r0
    766e:	11 24       	eor	r1, r1
    7670:	53 2e       	mov	r5, r19
    7672:	20 62       	ori	r18, 0x20	; 32
    7674:	0c c0       	rjmp	.+24     	; 0x768e <vfprintf+0xf0>
    7676:	8e 32       	cpi	r24, 0x2E	; 46
    7678:	21 f4       	brne	.+8      	; 0x7682 <vfprintf+0xe4>
    767a:	26 fd       	sbrc	r18, 6
    767c:	f5 c2       	rjmp	.+1514   	; 0x7c68 <vfprintf+0x6ca>
    767e:	20 64       	ori	r18, 0x40	; 64
    7680:	06 c0       	rjmp	.+12     	; 0x768e <vfprintf+0xf0>
    7682:	8c 36       	cpi	r24, 0x6C	; 108
    7684:	11 f4       	brne	.+4      	; 0x768a <vfprintf+0xec>
    7686:	20 68       	ori	r18, 0x80	; 128
    7688:	02 c0       	rjmp	.+4      	; 0x768e <vfprintf+0xf0>
    768a:	88 36       	cpi	r24, 0x68	; 104
    768c:	41 f4       	brne	.+16     	; 0x769e <vfprintf+0x100>
    768e:	f1 01       	movw	r30, r2
    7690:	93 fd       	sbrc	r25, 3
    7692:	85 91       	lpm	r24, Z+
    7694:	93 ff       	sbrs	r25, 3
    7696:	81 91       	ld	r24, Z+
    7698:	1f 01       	movw	r2, r30
    769a:	81 11       	cpse	r24, r1
    769c:	c1 cf       	rjmp	.-126    	; 0x7620 <vfprintf+0x82>
    769e:	9b eb       	ldi	r25, 0xBB	; 187
    76a0:	98 0f       	add	r25, r24
    76a2:	93 30       	cpi	r25, 0x03	; 3
    76a4:	18 f4       	brcc	.+6      	; 0x76ac <vfprintf+0x10e>
    76a6:	20 61       	ori	r18, 0x10	; 16
    76a8:	80 5e       	subi	r24, 0xE0	; 224
    76aa:	06 c0       	rjmp	.+12     	; 0x76b8 <vfprintf+0x11a>
    76ac:	9b e9       	ldi	r25, 0x9B	; 155
    76ae:	98 0f       	add	r25, r24
    76b0:	93 30       	cpi	r25, 0x03	; 3
    76b2:	08 f0       	brcs	.+2      	; 0x76b6 <vfprintf+0x118>
    76b4:	9a c1       	rjmp	.+820    	; 0x79ea <vfprintf+0x44c>
    76b6:	2f 7e       	andi	r18, 0xEF	; 239
    76b8:	26 ff       	sbrs	r18, 6
    76ba:	16 e0       	ldi	r17, 0x06	; 6
    76bc:	2f 73       	andi	r18, 0x3F	; 63
    76be:	72 2e       	mov	r7, r18
    76c0:	85 36       	cpi	r24, 0x65	; 101
    76c2:	21 f4       	brne	.+8      	; 0x76cc <vfprintf+0x12e>
    76c4:	f2 2f       	mov	r31, r18
    76c6:	f0 64       	ori	r31, 0x40	; 64
    76c8:	7f 2e       	mov	r7, r31
    76ca:	08 c0       	rjmp	.+16     	; 0x76dc <vfprintf+0x13e>
    76cc:	86 36       	cpi	r24, 0x66	; 102
    76ce:	21 f4       	brne	.+8      	; 0x76d8 <vfprintf+0x13a>
    76d0:	62 2f       	mov	r22, r18
    76d2:	60 68       	ori	r22, 0x80	; 128
    76d4:	76 2e       	mov	r7, r22
    76d6:	02 c0       	rjmp	.+4      	; 0x76dc <vfprintf+0x13e>
    76d8:	11 11       	cpse	r17, r1
    76da:	11 50       	subi	r17, 0x01	; 1
    76dc:	77 fe       	sbrs	r7, 7
    76de:	07 c0       	rjmp	.+14     	; 0x76ee <vfprintf+0x150>
    76e0:	1c 33       	cpi	r17, 0x3C	; 60
    76e2:	48 f4       	brcc	.+18     	; 0x76f6 <vfprintf+0x158>
    76e4:	44 24       	eor	r4, r4
    76e6:	43 94       	inc	r4
    76e8:	41 0e       	add	r4, r17
    76ea:	27 e0       	ldi	r18, 0x07	; 7
    76ec:	0b c0       	rjmp	.+22     	; 0x7704 <vfprintf+0x166>
    76ee:	18 30       	cpi	r17, 0x08	; 8
    76f0:	30 f4       	brcc	.+12     	; 0x76fe <vfprintf+0x160>
    76f2:	21 2f       	mov	r18, r17
    76f4:	06 c0       	rjmp	.+12     	; 0x7702 <vfprintf+0x164>
    76f6:	27 e0       	ldi	r18, 0x07	; 7
    76f8:	4c e3       	ldi	r20, 0x3C	; 60
    76fa:	44 2e       	mov	r4, r20
    76fc:	03 c0       	rjmp	.+6      	; 0x7704 <vfprintf+0x166>
    76fe:	27 e0       	ldi	r18, 0x07	; 7
    7700:	17 e0       	ldi	r17, 0x07	; 7
    7702:	41 2c       	mov	r4, r1
    7704:	56 01       	movw	r10, r12
    7706:	74 e0       	ldi	r23, 0x04	; 4
    7708:	a7 0e       	add	r10, r23
    770a:	b1 1c       	adc	r11, r1
    770c:	f6 01       	movw	r30, r12
    770e:	60 81       	ld	r22, Z
    7710:	71 81       	ldd	r23, Z+1	; 0x01
    7712:	82 81       	ldd	r24, Z+2	; 0x02
    7714:	93 81       	ldd	r25, Z+3	; 0x03
    7716:	04 2d       	mov	r16, r4
    7718:	a4 01       	movw	r20, r8
    771a:	58 d4       	rcall	.+2224   	; 0x7fcc <__ftoa_engine>
    771c:	6c 01       	movw	r12, r24
    771e:	09 81       	ldd	r16, Y+1	; 0x01
    7720:	00 ff       	sbrs	r16, 0
    7722:	02 c0       	rjmp	.+4      	; 0x7728 <vfprintf+0x18a>
    7724:	03 ff       	sbrs	r16, 3
    7726:	06 c0       	rjmp	.+12     	; 0x7734 <vfprintf+0x196>
    7728:	71 fc       	sbrc	r7, 1
    772a:	07 c0       	rjmp	.+14     	; 0x773a <vfprintf+0x19c>
    772c:	72 fc       	sbrc	r7, 2
    772e:	08 c0       	rjmp	.+16     	; 0x7740 <vfprintf+0x1a2>
    7730:	61 2c       	mov	r6, r1
    7732:	08 c0       	rjmp	.+16     	; 0x7744 <vfprintf+0x1a6>
    7734:	3d e2       	ldi	r19, 0x2D	; 45
    7736:	63 2e       	mov	r6, r19
    7738:	05 c0       	rjmp	.+10     	; 0x7744 <vfprintf+0x1a6>
    773a:	2b e2       	ldi	r18, 0x2B	; 43
    773c:	62 2e       	mov	r6, r18
    773e:	02 c0       	rjmp	.+4      	; 0x7744 <vfprintf+0x1a6>
    7740:	90 e2       	ldi	r25, 0x20	; 32
    7742:	69 2e       	mov	r6, r25
    7744:	80 2f       	mov	r24, r16
    7746:	8c 70       	andi	r24, 0x0C	; 12
    7748:	81 f1       	breq	.+96     	; 0x77aa <vfprintf+0x20c>
    774a:	66 20       	and	r6, r6
    774c:	11 f0       	breq	.+4      	; 0x7752 <vfprintf+0x1b4>
    774e:	84 e0       	ldi	r24, 0x04	; 4
    7750:	01 c0       	rjmp	.+2      	; 0x7754 <vfprintf+0x1b6>
    7752:	83 e0       	ldi	r24, 0x03	; 3
    7754:	85 15       	cp	r24, r5
    7756:	10 f0       	brcs	.+4      	; 0x775c <vfprintf+0x1be>
    7758:	51 2c       	mov	r5, r1
    775a:	0a c0       	rjmp	.+20     	; 0x7770 <vfprintf+0x1d2>
    775c:	58 1a       	sub	r5, r24
    775e:	73 fc       	sbrc	r7, 3
    7760:	07 c0       	rjmp	.+14     	; 0x7770 <vfprintf+0x1d2>
    7762:	b7 01       	movw	r22, r14
    7764:	80 e2       	ldi	r24, 0x20	; 32
    7766:	90 e0       	ldi	r25, 0x00	; 0
    7768:	90 d5       	rcall	.+2848   	; 0x828a <fputc>
    776a:	5a 94       	dec	r5
    776c:	d1 f7       	brne	.-12     	; 0x7762 <vfprintf+0x1c4>
    776e:	f4 cf       	rjmp	.-24     	; 0x7758 <vfprintf+0x1ba>
    7770:	66 20       	and	r6, r6
    7772:	21 f0       	breq	.+8      	; 0x777c <vfprintf+0x1de>
    7774:	b7 01       	movw	r22, r14
    7776:	86 2d       	mov	r24, r6
    7778:	90 e0       	ldi	r25, 0x00	; 0
    777a:	87 d5       	rcall	.+2830   	; 0x828a <fputc>
    777c:	03 fd       	sbrc	r16, 3
    777e:	03 c0       	rjmp	.+6      	; 0x7786 <vfprintf+0x1e8>
    7780:	0a e4       	ldi	r16, 0x4A	; 74
    7782:	13 e0       	ldi	r17, 0x03	; 3
    7784:	02 c0       	rjmp	.+4      	; 0x778a <vfprintf+0x1ec>
    7786:	06 e4       	ldi	r16, 0x46	; 70
    7788:	13 e0       	ldi	r17, 0x03	; 3
    778a:	f7 2d       	mov	r31, r7
    778c:	f0 71       	andi	r31, 0x10	; 16
    778e:	7f 2e       	mov	r7, r31
    7790:	f8 01       	movw	r30, r16
    7792:	84 91       	lpm	r24, Z
    7794:	88 23       	and	r24, r24
    7796:	09 f4       	brne	.+2      	; 0x779a <vfprintf+0x1fc>
    7798:	5e c2       	rjmp	.+1212   	; 0x7c56 <vfprintf+0x6b8>
    779a:	71 10       	cpse	r7, r1
    779c:	80 52       	subi	r24, 0x20	; 32
    779e:	b7 01       	movw	r22, r14
    77a0:	90 e0       	ldi	r25, 0x00	; 0
    77a2:	73 d5       	rcall	.+2790   	; 0x828a <fputc>
    77a4:	0f 5f       	subi	r16, 0xFF	; 255
    77a6:	1f 4f       	sbci	r17, 0xFF	; 255
    77a8:	f3 cf       	rjmp	.-26     	; 0x7790 <vfprintf+0x1f2>
    77aa:	77 fe       	sbrs	r7, 7
    77ac:	0f c0       	rjmp	.+30     	; 0x77cc <vfprintf+0x22e>
    77ae:	4c 0c       	add	r4, r12
    77b0:	04 ff       	sbrs	r16, 4
    77b2:	04 c0       	rjmp	.+8      	; 0x77bc <vfprintf+0x21e>
    77b4:	8a 81       	ldd	r24, Y+2	; 0x02
    77b6:	81 33       	cpi	r24, 0x31	; 49
    77b8:	09 f4       	brne	.+2      	; 0x77bc <vfprintf+0x21e>
    77ba:	4a 94       	dec	r4
    77bc:	14 14       	cp	r1, r4
    77be:	74 f5       	brge	.+92     	; 0x781c <vfprintf+0x27e>
    77c0:	f8 e0       	ldi	r31, 0x08	; 8
    77c2:	f4 15       	cp	r31, r4
    77c4:	78 f5       	brcc	.+94     	; 0x7824 <vfprintf+0x286>
    77c6:	88 e0       	ldi	r24, 0x08	; 8
    77c8:	48 2e       	mov	r4, r24
    77ca:	2c c0       	rjmp	.+88     	; 0x7824 <vfprintf+0x286>
    77cc:	76 fc       	sbrc	r7, 6
    77ce:	2a c0       	rjmp	.+84     	; 0x7824 <vfprintf+0x286>
    77d0:	81 2f       	mov	r24, r17
    77d2:	90 e0       	ldi	r25, 0x00	; 0
    77d4:	8c 15       	cp	r24, r12
    77d6:	9d 05       	cpc	r25, r13
    77d8:	9c f0       	brlt	.+38     	; 0x7800 <vfprintf+0x262>
    77da:	6c ef       	ldi	r22, 0xFC	; 252
    77dc:	c6 16       	cp	r12, r22
    77de:	6f ef       	ldi	r22, 0xFF	; 255
    77e0:	d6 06       	cpc	r13, r22
    77e2:	74 f0       	brlt	.+28     	; 0x7800 <vfprintf+0x262>
    77e4:	77 2d       	mov	r23, r7
    77e6:	70 68       	ori	r23, 0x80	; 128
    77e8:	77 2e       	mov	r7, r23
    77ea:	0a c0       	rjmp	.+20     	; 0x7800 <vfprintf+0x262>
    77ec:	e2 e0       	ldi	r30, 0x02	; 2
    77ee:	f0 e0       	ldi	r31, 0x00	; 0
    77f0:	ec 0f       	add	r30, r28
    77f2:	fd 1f       	adc	r31, r29
    77f4:	e1 0f       	add	r30, r17
    77f6:	f1 1d       	adc	r31, r1
    77f8:	80 81       	ld	r24, Z
    77fa:	80 33       	cpi	r24, 0x30	; 48
    77fc:	19 f4       	brne	.+6      	; 0x7804 <vfprintf+0x266>
    77fe:	11 50       	subi	r17, 0x01	; 1
    7800:	11 11       	cpse	r17, r1
    7802:	f4 cf       	rjmp	.-24     	; 0x77ec <vfprintf+0x24e>
    7804:	77 fe       	sbrs	r7, 7
    7806:	0e c0       	rjmp	.+28     	; 0x7824 <vfprintf+0x286>
    7808:	44 24       	eor	r4, r4
    780a:	43 94       	inc	r4
    780c:	41 0e       	add	r4, r17
    780e:	81 2f       	mov	r24, r17
    7810:	90 e0       	ldi	r25, 0x00	; 0
    7812:	c8 16       	cp	r12, r24
    7814:	d9 06       	cpc	r13, r25
    7816:	2c f4       	brge	.+10     	; 0x7822 <vfprintf+0x284>
    7818:	1c 19       	sub	r17, r12
    781a:	04 c0       	rjmp	.+8      	; 0x7824 <vfprintf+0x286>
    781c:	44 24       	eor	r4, r4
    781e:	43 94       	inc	r4
    7820:	01 c0       	rjmp	.+2      	; 0x7824 <vfprintf+0x286>
    7822:	10 e0       	ldi	r17, 0x00	; 0
    7824:	77 fe       	sbrs	r7, 7
    7826:	07 c0       	rjmp	.+14     	; 0x7836 <vfprintf+0x298>
    7828:	1c 14       	cp	r1, r12
    782a:	1d 04       	cpc	r1, r13
    782c:	3c f4       	brge	.+14     	; 0x783c <vfprintf+0x29e>
    782e:	96 01       	movw	r18, r12
    7830:	2f 5f       	subi	r18, 0xFF	; 255
    7832:	3f 4f       	sbci	r19, 0xFF	; 255
    7834:	05 c0       	rjmp	.+10     	; 0x7840 <vfprintf+0x2a2>
    7836:	25 e0       	ldi	r18, 0x05	; 5
    7838:	30 e0       	ldi	r19, 0x00	; 0
    783a:	02 c0       	rjmp	.+4      	; 0x7840 <vfprintf+0x2a2>
    783c:	21 e0       	ldi	r18, 0x01	; 1
    783e:	30 e0       	ldi	r19, 0x00	; 0
    7840:	66 20       	and	r6, r6
    7842:	11 f0       	breq	.+4      	; 0x7848 <vfprintf+0x2aa>
    7844:	2f 5f       	subi	r18, 0xFF	; 255
    7846:	3f 4f       	sbci	r19, 0xFF	; 255
    7848:	11 23       	and	r17, r17
    784a:	31 f0       	breq	.+12     	; 0x7858 <vfprintf+0x2ba>
    784c:	41 2f       	mov	r20, r17
    784e:	50 e0       	ldi	r21, 0x00	; 0
    7850:	4f 5f       	subi	r20, 0xFF	; 255
    7852:	5f 4f       	sbci	r21, 0xFF	; 255
    7854:	24 0f       	add	r18, r20
    7856:	35 1f       	adc	r19, r21
    7858:	45 2d       	mov	r20, r5
    785a:	50 e0       	ldi	r21, 0x00	; 0
    785c:	24 17       	cp	r18, r20
    785e:	35 07       	cpc	r19, r21
    7860:	14 f4       	brge	.+4      	; 0x7866 <vfprintf+0x2c8>
    7862:	52 1a       	sub	r5, r18
    7864:	01 c0       	rjmp	.+2      	; 0x7868 <vfprintf+0x2ca>
    7866:	51 2c       	mov	r5, r1
    7868:	87 2d       	mov	r24, r7
    786a:	89 70       	andi	r24, 0x09	; 9
    786c:	41 f4       	brne	.+16     	; 0x787e <vfprintf+0x2e0>
    786e:	55 20       	and	r5, r5
    7870:	31 f0       	breq	.+12     	; 0x787e <vfprintf+0x2e0>
    7872:	b7 01       	movw	r22, r14
    7874:	80 e2       	ldi	r24, 0x20	; 32
    7876:	90 e0       	ldi	r25, 0x00	; 0
    7878:	08 d5       	rcall	.+2576   	; 0x828a <fputc>
    787a:	5a 94       	dec	r5
    787c:	f8 cf       	rjmp	.-16     	; 0x786e <vfprintf+0x2d0>
    787e:	66 20       	and	r6, r6
    7880:	21 f0       	breq	.+8      	; 0x788a <vfprintf+0x2ec>
    7882:	b7 01       	movw	r22, r14
    7884:	86 2d       	mov	r24, r6
    7886:	90 e0       	ldi	r25, 0x00	; 0
    7888:	00 d5       	rcall	.+2560   	; 0x828a <fputc>
    788a:	73 fc       	sbrc	r7, 3
    788c:	08 c0       	rjmp	.+16     	; 0x789e <vfprintf+0x300>
    788e:	55 20       	and	r5, r5
    7890:	31 f0       	breq	.+12     	; 0x789e <vfprintf+0x300>
    7892:	b7 01       	movw	r22, r14
    7894:	80 e3       	ldi	r24, 0x30	; 48
    7896:	90 e0       	ldi	r25, 0x00	; 0
    7898:	f8 d4       	rcall	.+2544   	; 0x828a <fputc>
    789a:	5a 94       	dec	r5
    789c:	f8 cf       	rjmp	.-16     	; 0x788e <vfprintf+0x2f0>
    789e:	77 fe       	sbrs	r7, 7
    78a0:	5d c0       	rjmp	.+186    	; 0x795c <vfprintf+0x3be>
    78a2:	9c 2d       	mov	r25, r12
    78a4:	8d 2d       	mov	r24, r13
    78a6:	d7 fe       	sbrs	r13, 7
    78a8:	02 c0       	rjmp	.+4      	; 0x78ae <vfprintf+0x310>
    78aa:	90 e0       	ldi	r25, 0x00	; 0
    78ac:	80 e0       	ldi	r24, 0x00	; 0
    78ae:	69 2e       	mov	r6, r25
    78b0:	78 2e       	mov	r7, r24
    78b2:	40 e0       	ldi	r20, 0x00	; 0
    78b4:	50 e0       	ldi	r21, 0x00	; 0
    78b6:	c6 01       	movw	r24, r12
    78b8:	84 19       	sub	r24, r4
    78ba:	91 09       	sbc	r25, r1
    78bc:	8c 87       	std	Y+12, r24	; 0x0c
    78be:	9d 87       	std	Y+13, r25	; 0x0d
    78c0:	96 01       	movw	r18, r12
    78c2:	26 19       	sub	r18, r6
    78c4:	37 09       	sbc	r19, r7
    78c6:	28 0d       	add	r18, r8
    78c8:	39 1d       	adc	r19, r9
    78ca:	81 2f       	mov	r24, r17
    78cc:	90 e0       	ldi	r25, 0x00	; 0
    78ce:	ee 27       	eor	r30, r30
    78d0:	ff 27       	eor	r31, r31
    78d2:	e8 1b       	sub	r30, r24
    78d4:	f9 0b       	sbc	r31, r25
    78d6:	ee 87       	std	Y+14, r30	; 0x0e
    78d8:	ff 87       	std	Y+15, r31	; 0x0f
    78da:	ff ef       	ldi	r31, 0xFF	; 255
    78dc:	6f 16       	cp	r6, r31
    78de:	7f 06       	cpc	r7, r31
    78e0:	61 f4       	brne	.+24     	; 0x78fa <vfprintf+0x35c>
    78e2:	b7 01       	movw	r22, r14
    78e4:	8e e2       	ldi	r24, 0x2E	; 46
    78e6:	90 e0       	ldi	r25, 0x00	; 0
    78e8:	2b 8b       	std	Y+19, r18	; 0x13
    78ea:	3a 8b       	std	Y+18, r19	; 0x12
    78ec:	48 8b       	std	Y+16, r20	; 0x10
    78ee:	59 8b       	std	Y+17, r21	; 0x11
    78f0:	cc d4       	rcall	.+2456   	; 0x828a <fputc>
    78f2:	59 89       	ldd	r21, Y+17	; 0x11
    78f4:	48 89       	ldd	r20, Y+16	; 0x10
    78f6:	3a 89       	ldd	r19, Y+18	; 0x12
    78f8:	2b 89       	ldd	r18, Y+19	; 0x13
    78fa:	c6 14       	cp	r12, r6
    78fc:	d7 04       	cpc	r13, r7
    78fe:	54 f0       	brlt	.+20     	; 0x7914 <vfprintf+0x376>
    7900:	6c 85       	ldd	r22, Y+12	; 0x0c
    7902:	7d 85       	ldd	r23, Y+13	; 0x0d
    7904:	66 15       	cp	r22, r6
    7906:	77 05       	cpc	r23, r7
    7908:	2c f4       	brge	.+10     	; 0x7914 <vfprintf+0x376>
    790a:	f9 01       	movw	r30, r18
    790c:	e4 0f       	add	r30, r20
    790e:	f5 1f       	adc	r31, r21
    7910:	81 81       	ldd	r24, Z+1	; 0x01
    7912:	01 c0       	rjmp	.+2      	; 0x7916 <vfprintf+0x378>
    7914:	80 e3       	ldi	r24, 0x30	; 48
    7916:	71 e0       	ldi	r23, 0x01	; 1
    7918:	67 1a       	sub	r6, r23
    791a:	71 08       	sbc	r7, r1
    791c:	4f 5f       	subi	r20, 0xFF	; 255
    791e:	5f 4f       	sbci	r21, 0xFF	; 255
    7920:	ee 85       	ldd	r30, Y+14	; 0x0e
    7922:	ff 85       	ldd	r31, Y+15	; 0x0f
    7924:	6e 16       	cp	r6, r30
    7926:	7f 06       	cpc	r7, r31
    7928:	64 f0       	brlt	.+24     	; 0x7942 <vfprintf+0x3a4>
    792a:	b7 01       	movw	r22, r14
    792c:	90 e0       	ldi	r25, 0x00	; 0
    792e:	2b 8b       	std	Y+19, r18	; 0x13
    7930:	3a 8b       	std	Y+18, r19	; 0x12
    7932:	48 8b       	std	Y+16, r20	; 0x10
    7934:	59 8b       	std	Y+17, r21	; 0x11
    7936:	a9 d4       	rcall	.+2386   	; 0x828a <fputc>
    7938:	2b 89       	ldd	r18, Y+19	; 0x13
    793a:	3a 89       	ldd	r19, Y+18	; 0x12
    793c:	48 89       	ldd	r20, Y+16	; 0x10
    793e:	59 89       	ldd	r21, Y+17	; 0x11
    7940:	cc cf       	rjmp	.-104    	; 0x78da <vfprintf+0x33c>
    7942:	6c 14       	cp	r6, r12
    7944:	7d 04       	cpc	r7, r13
    7946:	39 f4       	brne	.+14     	; 0x7956 <vfprintf+0x3b8>
    7948:	9a 81       	ldd	r25, Y+2	; 0x02
    794a:	96 33       	cpi	r25, 0x36	; 54
    794c:	18 f4       	brcc	.+6      	; 0x7954 <vfprintf+0x3b6>
    794e:	95 33       	cpi	r25, 0x35	; 53
    7950:	11 f4       	brne	.+4      	; 0x7956 <vfprintf+0x3b8>
    7952:	04 ff       	sbrs	r16, 4
    7954:	81 e3       	ldi	r24, 0x31	; 49
    7956:	b7 01       	movw	r22, r14
    7958:	90 e0       	ldi	r25, 0x00	; 0
    795a:	45 c0       	rjmp	.+138    	; 0x79e6 <vfprintf+0x448>
    795c:	8a 81       	ldd	r24, Y+2	; 0x02
    795e:	81 33       	cpi	r24, 0x31	; 49
    7960:	09 f0       	breq	.+2      	; 0x7964 <vfprintf+0x3c6>
    7962:	0f 7e       	andi	r16, 0xEF	; 239
    7964:	b7 01       	movw	r22, r14
    7966:	90 e0       	ldi	r25, 0x00	; 0
    7968:	90 d4       	rcall	.+2336   	; 0x828a <fputc>
    796a:	11 11       	cpse	r17, r1
    796c:	05 c0       	rjmp	.+10     	; 0x7978 <vfprintf+0x3da>
    796e:	74 fe       	sbrs	r7, 4
    7970:	16 c0       	rjmp	.+44     	; 0x799e <vfprintf+0x400>
    7972:	85 e4       	ldi	r24, 0x45	; 69
    7974:	90 e0       	ldi	r25, 0x00	; 0
    7976:	15 c0       	rjmp	.+42     	; 0x79a2 <vfprintf+0x404>
    7978:	b7 01       	movw	r22, r14
    797a:	8e e2       	ldi	r24, 0x2E	; 46
    797c:	90 e0       	ldi	r25, 0x00	; 0
    797e:	85 d4       	rcall	.+2314   	; 0x828a <fputc>
    7980:	82 e0       	ldi	r24, 0x02	; 2
    7982:	66 24       	eor	r6, r6
    7984:	63 94       	inc	r6
    7986:	68 0e       	add	r6, r24
    7988:	f4 01       	movw	r30, r8
    798a:	e8 0f       	add	r30, r24
    798c:	f1 1d       	adc	r31, r1
    798e:	80 81       	ld	r24, Z
    7990:	b7 01       	movw	r22, r14
    7992:	90 e0       	ldi	r25, 0x00	; 0
    7994:	7a d4       	rcall	.+2292   	; 0x828a <fputc>
    7996:	11 50       	subi	r17, 0x01	; 1
    7998:	51 f3       	breq	.-44     	; 0x796e <vfprintf+0x3d0>
    799a:	86 2d       	mov	r24, r6
    799c:	f2 cf       	rjmp	.-28     	; 0x7982 <vfprintf+0x3e4>
    799e:	85 e6       	ldi	r24, 0x65	; 101
    79a0:	90 e0       	ldi	r25, 0x00	; 0
    79a2:	b7 01       	movw	r22, r14
    79a4:	72 d4       	rcall	.+2276   	; 0x828a <fputc>
    79a6:	d7 fc       	sbrc	r13, 7
    79a8:	05 c0       	rjmp	.+10     	; 0x79b4 <vfprintf+0x416>
    79aa:	c1 14       	cp	r12, r1
    79ac:	d1 04       	cpc	r13, r1
    79ae:	39 f4       	brne	.+14     	; 0x79be <vfprintf+0x420>
    79b0:	04 ff       	sbrs	r16, 4
    79b2:	05 c0       	rjmp	.+10     	; 0x79be <vfprintf+0x420>
    79b4:	d1 94       	neg	r13
    79b6:	c1 94       	neg	r12
    79b8:	d1 08       	sbc	r13, r1
    79ba:	8d e2       	ldi	r24, 0x2D	; 45
    79bc:	01 c0       	rjmp	.+2      	; 0x79c0 <vfprintf+0x422>
    79be:	8b e2       	ldi	r24, 0x2B	; 43
    79c0:	b7 01       	movw	r22, r14
    79c2:	90 e0       	ldi	r25, 0x00	; 0
    79c4:	62 d4       	rcall	.+2244   	; 0x828a <fputc>
    79c6:	80 e3       	ldi	r24, 0x30	; 48
    79c8:	6a e0       	ldi	r22, 0x0A	; 10
    79ca:	c6 16       	cp	r12, r22
    79cc:	d1 04       	cpc	r13, r1
    79ce:	2c f0       	brlt	.+10     	; 0x79da <vfprintf+0x43c>
    79d0:	8f 5f       	subi	r24, 0xFF	; 255
    79d2:	fa e0       	ldi	r31, 0x0A	; 10
    79d4:	cf 1a       	sub	r12, r31
    79d6:	d1 08       	sbc	r13, r1
    79d8:	f7 cf       	rjmp	.-18     	; 0x79c8 <vfprintf+0x42a>
    79da:	b7 01       	movw	r22, r14
    79dc:	90 e0       	ldi	r25, 0x00	; 0
    79de:	55 d4       	rcall	.+2218   	; 0x828a <fputc>
    79e0:	b7 01       	movw	r22, r14
    79e2:	c6 01       	movw	r24, r12
    79e4:	c0 96       	adiw	r24, 0x30	; 48
    79e6:	51 d4       	rcall	.+2210   	; 0x828a <fputc>
    79e8:	36 c1       	rjmp	.+620    	; 0x7c56 <vfprintf+0x6b8>
    79ea:	83 36       	cpi	r24, 0x63	; 99
    79ec:	31 f0       	breq	.+12     	; 0x79fa <vfprintf+0x45c>
    79ee:	83 37       	cpi	r24, 0x73	; 115
    79f0:	79 f0       	breq	.+30     	; 0x7a10 <vfprintf+0x472>
    79f2:	83 35       	cpi	r24, 0x53	; 83
    79f4:	09 f0       	breq	.+2      	; 0x79f8 <vfprintf+0x45a>
    79f6:	54 c0       	rjmp	.+168    	; 0x7aa0 <vfprintf+0x502>
    79f8:	20 c0       	rjmp	.+64     	; 0x7a3a <vfprintf+0x49c>
    79fa:	56 01       	movw	r10, r12
    79fc:	72 e0       	ldi	r23, 0x02	; 2
    79fe:	a7 0e       	add	r10, r23
    7a00:	b1 1c       	adc	r11, r1
    7a02:	f6 01       	movw	r30, r12
    7a04:	80 81       	ld	r24, Z
    7a06:	89 83       	std	Y+1, r24	; 0x01
    7a08:	01 e0       	ldi	r16, 0x01	; 1
    7a0a:	10 e0       	ldi	r17, 0x00	; 0
    7a0c:	64 01       	movw	r12, r8
    7a0e:	13 c0       	rjmp	.+38     	; 0x7a36 <vfprintf+0x498>
    7a10:	56 01       	movw	r10, r12
    7a12:	f2 e0       	ldi	r31, 0x02	; 2
    7a14:	af 0e       	add	r10, r31
    7a16:	b1 1c       	adc	r11, r1
    7a18:	f6 01       	movw	r30, r12
    7a1a:	c0 80       	ld	r12, Z
    7a1c:	d1 80       	ldd	r13, Z+1	; 0x01
    7a1e:	26 ff       	sbrs	r18, 6
    7a20:	03 c0       	rjmp	.+6      	; 0x7a28 <vfprintf+0x48a>
    7a22:	61 2f       	mov	r22, r17
    7a24:	70 e0       	ldi	r23, 0x00	; 0
    7a26:	02 c0       	rjmp	.+4      	; 0x7a2c <vfprintf+0x48e>
    7a28:	6f ef       	ldi	r22, 0xFF	; 255
    7a2a:	7f ef       	ldi	r23, 0xFF	; 255
    7a2c:	c6 01       	movw	r24, r12
    7a2e:	2b 8b       	std	Y+19, r18	; 0x13
    7a30:	f2 d3       	rcall	.+2020   	; 0x8216 <strnlen>
    7a32:	8c 01       	movw	r16, r24
    7a34:	2b 89       	ldd	r18, Y+19	; 0x13
    7a36:	2f 77       	andi	r18, 0x7F	; 127
    7a38:	14 c0       	rjmp	.+40     	; 0x7a62 <vfprintf+0x4c4>
    7a3a:	56 01       	movw	r10, r12
    7a3c:	f2 e0       	ldi	r31, 0x02	; 2
    7a3e:	af 0e       	add	r10, r31
    7a40:	b1 1c       	adc	r11, r1
    7a42:	f6 01       	movw	r30, r12
    7a44:	c0 80       	ld	r12, Z
    7a46:	d1 80       	ldd	r13, Z+1	; 0x01
    7a48:	26 ff       	sbrs	r18, 6
    7a4a:	03 c0       	rjmp	.+6      	; 0x7a52 <vfprintf+0x4b4>
    7a4c:	61 2f       	mov	r22, r17
    7a4e:	70 e0       	ldi	r23, 0x00	; 0
    7a50:	02 c0       	rjmp	.+4      	; 0x7a56 <vfprintf+0x4b8>
    7a52:	6f ef       	ldi	r22, 0xFF	; 255
    7a54:	7f ef       	ldi	r23, 0xFF	; 255
    7a56:	c6 01       	movw	r24, r12
    7a58:	2b 8b       	std	Y+19, r18	; 0x13
    7a5a:	98 d3       	rcall	.+1840   	; 0x818c <strnlen_P>
    7a5c:	8c 01       	movw	r16, r24
    7a5e:	2b 89       	ldd	r18, Y+19	; 0x13
    7a60:	20 68       	ori	r18, 0x80	; 128
    7a62:	72 2e       	mov	r7, r18
    7a64:	23 fd       	sbrc	r18, 3
    7a66:	18 c0       	rjmp	.+48     	; 0x7a98 <vfprintf+0x4fa>
    7a68:	85 2d       	mov	r24, r5
    7a6a:	90 e0       	ldi	r25, 0x00	; 0
    7a6c:	08 17       	cp	r16, r24
    7a6e:	19 07       	cpc	r17, r25
    7a70:	98 f4       	brcc	.+38     	; 0x7a98 <vfprintf+0x4fa>
    7a72:	b7 01       	movw	r22, r14
    7a74:	80 e2       	ldi	r24, 0x20	; 32
    7a76:	90 e0       	ldi	r25, 0x00	; 0
    7a78:	08 d4       	rcall	.+2064   	; 0x828a <fputc>
    7a7a:	5a 94       	dec	r5
    7a7c:	f5 cf       	rjmp	.-22     	; 0x7a68 <vfprintf+0x4ca>
    7a7e:	f6 01       	movw	r30, r12
    7a80:	77 fc       	sbrc	r7, 7
    7a82:	85 91       	lpm	r24, Z+
    7a84:	77 fe       	sbrs	r7, 7
    7a86:	81 91       	ld	r24, Z+
    7a88:	6f 01       	movw	r12, r30
    7a8a:	b7 01       	movw	r22, r14
    7a8c:	90 e0       	ldi	r25, 0x00	; 0
    7a8e:	fd d3       	rcall	.+2042   	; 0x828a <fputc>
    7a90:	51 10       	cpse	r5, r1
    7a92:	5a 94       	dec	r5
    7a94:	01 50       	subi	r16, 0x01	; 1
    7a96:	11 09       	sbc	r17, r1
    7a98:	01 15       	cp	r16, r1
    7a9a:	11 05       	cpc	r17, r1
    7a9c:	81 f7       	brne	.-32     	; 0x7a7e <vfprintf+0x4e0>
    7a9e:	db c0       	rjmp	.+438    	; 0x7c56 <vfprintf+0x6b8>
    7aa0:	84 36       	cpi	r24, 0x64	; 100
    7aa2:	11 f0       	breq	.+4      	; 0x7aa8 <vfprintf+0x50a>
    7aa4:	89 36       	cpi	r24, 0x69	; 105
    7aa6:	49 f5       	brne	.+82     	; 0x7afa <vfprintf+0x55c>
    7aa8:	56 01       	movw	r10, r12
    7aaa:	27 ff       	sbrs	r18, 7
    7aac:	09 c0       	rjmp	.+18     	; 0x7ac0 <vfprintf+0x522>
    7aae:	f4 e0       	ldi	r31, 0x04	; 4
    7ab0:	af 0e       	add	r10, r31
    7ab2:	b1 1c       	adc	r11, r1
    7ab4:	f6 01       	movw	r30, r12
    7ab6:	60 81       	ld	r22, Z
    7ab8:	71 81       	ldd	r23, Z+1	; 0x01
    7aba:	82 81       	ldd	r24, Z+2	; 0x02
    7abc:	93 81       	ldd	r25, Z+3	; 0x03
    7abe:	0a c0       	rjmp	.+20     	; 0x7ad4 <vfprintf+0x536>
    7ac0:	f2 e0       	ldi	r31, 0x02	; 2
    7ac2:	af 0e       	add	r10, r31
    7ac4:	b1 1c       	adc	r11, r1
    7ac6:	f6 01       	movw	r30, r12
    7ac8:	60 81       	ld	r22, Z
    7aca:	71 81       	ldd	r23, Z+1	; 0x01
    7acc:	88 27       	eor	r24, r24
    7ace:	77 fd       	sbrc	r23, 7
    7ad0:	80 95       	com	r24
    7ad2:	98 2f       	mov	r25, r24
    7ad4:	02 2f       	mov	r16, r18
    7ad6:	0f 76       	andi	r16, 0x6F	; 111
    7ad8:	97 ff       	sbrs	r25, 7
    7ada:	08 c0       	rjmp	.+16     	; 0x7aec <vfprintf+0x54e>
    7adc:	90 95       	com	r25
    7ade:	80 95       	com	r24
    7ae0:	70 95       	com	r23
    7ae2:	61 95       	neg	r22
    7ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    7ae6:	8f 4f       	sbci	r24, 0xFF	; 255
    7ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    7aea:	00 68       	ori	r16, 0x80	; 128
    7aec:	2a e0       	ldi	r18, 0x0A	; 10
    7aee:	30 e0       	ldi	r19, 0x00	; 0
    7af0:	a4 01       	movw	r20, r8
    7af2:	3b d4       	rcall	.+2166   	; 0x836a <__ultoa_invert>
    7af4:	c8 2e       	mov	r12, r24
    7af6:	c8 18       	sub	r12, r8
    7af8:	3d c0       	rjmp	.+122    	; 0x7b74 <vfprintf+0x5d6>
    7afa:	02 2f       	mov	r16, r18
    7afc:	85 37       	cpi	r24, 0x75	; 117
    7afe:	21 f4       	brne	.+8      	; 0x7b08 <vfprintf+0x56a>
    7b00:	0f 7e       	andi	r16, 0xEF	; 239
    7b02:	2a e0       	ldi	r18, 0x0A	; 10
    7b04:	30 e0       	ldi	r19, 0x00	; 0
    7b06:	1d c0       	rjmp	.+58     	; 0x7b42 <vfprintf+0x5a4>
    7b08:	09 7f       	andi	r16, 0xF9	; 249
    7b0a:	8f 36       	cpi	r24, 0x6F	; 111
    7b0c:	91 f0       	breq	.+36     	; 0x7b32 <vfprintf+0x594>
    7b0e:	18 f4       	brcc	.+6      	; 0x7b16 <vfprintf+0x578>
    7b10:	88 35       	cpi	r24, 0x58	; 88
    7b12:	59 f0       	breq	.+22     	; 0x7b2a <vfprintf+0x58c>
    7b14:	a9 c0       	rjmp	.+338    	; 0x7c68 <vfprintf+0x6ca>
    7b16:	80 37       	cpi	r24, 0x70	; 112
    7b18:	19 f0       	breq	.+6      	; 0x7b20 <vfprintf+0x582>
    7b1a:	88 37       	cpi	r24, 0x78	; 120
    7b1c:	11 f0       	breq	.+4      	; 0x7b22 <vfprintf+0x584>
    7b1e:	a4 c0       	rjmp	.+328    	; 0x7c68 <vfprintf+0x6ca>
    7b20:	00 61       	ori	r16, 0x10	; 16
    7b22:	04 ff       	sbrs	r16, 4
    7b24:	09 c0       	rjmp	.+18     	; 0x7b38 <vfprintf+0x59a>
    7b26:	04 60       	ori	r16, 0x04	; 4
    7b28:	07 c0       	rjmp	.+14     	; 0x7b38 <vfprintf+0x59a>
    7b2a:	24 ff       	sbrs	r18, 4
    7b2c:	08 c0       	rjmp	.+16     	; 0x7b3e <vfprintf+0x5a0>
    7b2e:	06 60       	ori	r16, 0x06	; 6
    7b30:	06 c0       	rjmp	.+12     	; 0x7b3e <vfprintf+0x5a0>
    7b32:	28 e0       	ldi	r18, 0x08	; 8
    7b34:	30 e0       	ldi	r19, 0x00	; 0
    7b36:	05 c0       	rjmp	.+10     	; 0x7b42 <vfprintf+0x5a4>
    7b38:	20 e1       	ldi	r18, 0x10	; 16
    7b3a:	30 e0       	ldi	r19, 0x00	; 0
    7b3c:	02 c0       	rjmp	.+4      	; 0x7b42 <vfprintf+0x5a4>
    7b3e:	20 e1       	ldi	r18, 0x10	; 16
    7b40:	32 e0       	ldi	r19, 0x02	; 2
    7b42:	56 01       	movw	r10, r12
    7b44:	07 ff       	sbrs	r16, 7
    7b46:	09 c0       	rjmp	.+18     	; 0x7b5a <vfprintf+0x5bc>
    7b48:	f4 e0       	ldi	r31, 0x04	; 4
    7b4a:	af 0e       	add	r10, r31
    7b4c:	b1 1c       	adc	r11, r1
    7b4e:	f6 01       	movw	r30, r12
    7b50:	60 81       	ld	r22, Z
    7b52:	71 81       	ldd	r23, Z+1	; 0x01
    7b54:	82 81       	ldd	r24, Z+2	; 0x02
    7b56:	93 81       	ldd	r25, Z+3	; 0x03
    7b58:	08 c0       	rjmp	.+16     	; 0x7b6a <vfprintf+0x5cc>
    7b5a:	f2 e0       	ldi	r31, 0x02	; 2
    7b5c:	af 0e       	add	r10, r31
    7b5e:	b1 1c       	adc	r11, r1
    7b60:	f6 01       	movw	r30, r12
    7b62:	60 81       	ld	r22, Z
    7b64:	71 81       	ldd	r23, Z+1	; 0x01
    7b66:	80 e0       	ldi	r24, 0x00	; 0
    7b68:	90 e0       	ldi	r25, 0x00	; 0
    7b6a:	a4 01       	movw	r20, r8
    7b6c:	fe d3       	rcall	.+2044   	; 0x836a <__ultoa_invert>
    7b6e:	c8 2e       	mov	r12, r24
    7b70:	c8 18       	sub	r12, r8
    7b72:	0f 77       	andi	r16, 0x7F	; 127
    7b74:	06 ff       	sbrs	r16, 6
    7b76:	0b c0       	rjmp	.+22     	; 0x7b8e <vfprintf+0x5f0>
    7b78:	20 2f       	mov	r18, r16
    7b7a:	2e 7f       	andi	r18, 0xFE	; 254
    7b7c:	c1 16       	cp	r12, r17
    7b7e:	50 f4       	brcc	.+20     	; 0x7b94 <vfprintf+0x5f6>
    7b80:	04 ff       	sbrs	r16, 4
    7b82:	0a c0       	rjmp	.+20     	; 0x7b98 <vfprintf+0x5fa>
    7b84:	02 fd       	sbrc	r16, 2
    7b86:	08 c0       	rjmp	.+16     	; 0x7b98 <vfprintf+0x5fa>
    7b88:	20 2f       	mov	r18, r16
    7b8a:	2e 7e       	andi	r18, 0xEE	; 238
    7b8c:	05 c0       	rjmp	.+10     	; 0x7b98 <vfprintf+0x5fa>
    7b8e:	dc 2c       	mov	r13, r12
    7b90:	20 2f       	mov	r18, r16
    7b92:	03 c0       	rjmp	.+6      	; 0x7b9a <vfprintf+0x5fc>
    7b94:	dc 2c       	mov	r13, r12
    7b96:	01 c0       	rjmp	.+2      	; 0x7b9a <vfprintf+0x5fc>
    7b98:	d1 2e       	mov	r13, r17
    7b9a:	24 ff       	sbrs	r18, 4
    7b9c:	0d c0       	rjmp	.+26     	; 0x7bb8 <vfprintf+0x61a>
    7b9e:	fe 01       	movw	r30, r28
    7ba0:	ec 0d       	add	r30, r12
    7ba2:	f1 1d       	adc	r31, r1
    7ba4:	80 81       	ld	r24, Z
    7ba6:	80 33       	cpi	r24, 0x30	; 48
    7ba8:	11 f4       	brne	.+4      	; 0x7bae <vfprintf+0x610>
    7baa:	29 7e       	andi	r18, 0xE9	; 233
    7bac:	09 c0       	rjmp	.+18     	; 0x7bc0 <vfprintf+0x622>
    7bae:	22 ff       	sbrs	r18, 2
    7bb0:	06 c0       	rjmp	.+12     	; 0x7bbe <vfprintf+0x620>
    7bb2:	d3 94       	inc	r13
    7bb4:	d3 94       	inc	r13
    7bb6:	04 c0       	rjmp	.+8      	; 0x7bc0 <vfprintf+0x622>
    7bb8:	82 2f       	mov	r24, r18
    7bba:	86 78       	andi	r24, 0x86	; 134
    7bbc:	09 f0       	breq	.+2      	; 0x7bc0 <vfprintf+0x622>
    7bbe:	d3 94       	inc	r13
    7bc0:	23 fd       	sbrc	r18, 3
    7bc2:	12 c0       	rjmp	.+36     	; 0x7be8 <vfprintf+0x64a>
    7bc4:	20 ff       	sbrs	r18, 0
    7bc6:	06 c0       	rjmp	.+12     	; 0x7bd4 <vfprintf+0x636>
    7bc8:	1c 2d       	mov	r17, r12
    7bca:	d5 14       	cp	r13, r5
    7bcc:	18 f4       	brcc	.+6      	; 0x7bd4 <vfprintf+0x636>
    7bce:	15 0d       	add	r17, r5
    7bd0:	1d 19       	sub	r17, r13
    7bd2:	d5 2c       	mov	r13, r5
    7bd4:	d5 14       	cp	r13, r5
    7bd6:	60 f4       	brcc	.+24     	; 0x7bf0 <vfprintf+0x652>
    7bd8:	b7 01       	movw	r22, r14
    7bda:	80 e2       	ldi	r24, 0x20	; 32
    7bdc:	90 e0       	ldi	r25, 0x00	; 0
    7bde:	2b 8b       	std	Y+19, r18	; 0x13
    7be0:	54 d3       	rcall	.+1704   	; 0x828a <fputc>
    7be2:	d3 94       	inc	r13
    7be4:	2b 89       	ldd	r18, Y+19	; 0x13
    7be6:	f6 cf       	rjmp	.-20     	; 0x7bd4 <vfprintf+0x636>
    7be8:	d5 14       	cp	r13, r5
    7bea:	10 f4       	brcc	.+4      	; 0x7bf0 <vfprintf+0x652>
    7bec:	5d 18       	sub	r5, r13
    7bee:	01 c0       	rjmp	.+2      	; 0x7bf2 <vfprintf+0x654>
    7bf0:	51 2c       	mov	r5, r1
    7bf2:	24 ff       	sbrs	r18, 4
    7bf4:	11 c0       	rjmp	.+34     	; 0x7c18 <vfprintf+0x67a>
    7bf6:	b7 01       	movw	r22, r14
    7bf8:	80 e3       	ldi	r24, 0x30	; 48
    7bfa:	90 e0       	ldi	r25, 0x00	; 0
    7bfc:	2b 8b       	std	Y+19, r18	; 0x13
    7bfe:	45 d3       	rcall	.+1674   	; 0x828a <fputc>
    7c00:	2b 89       	ldd	r18, Y+19	; 0x13
    7c02:	22 ff       	sbrs	r18, 2
    7c04:	16 c0       	rjmp	.+44     	; 0x7c32 <vfprintf+0x694>
    7c06:	21 ff       	sbrs	r18, 1
    7c08:	03 c0       	rjmp	.+6      	; 0x7c10 <vfprintf+0x672>
    7c0a:	88 e5       	ldi	r24, 0x58	; 88
    7c0c:	90 e0       	ldi	r25, 0x00	; 0
    7c0e:	02 c0       	rjmp	.+4      	; 0x7c14 <vfprintf+0x676>
    7c10:	88 e7       	ldi	r24, 0x78	; 120
    7c12:	90 e0       	ldi	r25, 0x00	; 0
    7c14:	b7 01       	movw	r22, r14
    7c16:	0c c0       	rjmp	.+24     	; 0x7c30 <vfprintf+0x692>
    7c18:	82 2f       	mov	r24, r18
    7c1a:	86 78       	andi	r24, 0x86	; 134
    7c1c:	51 f0       	breq	.+20     	; 0x7c32 <vfprintf+0x694>
    7c1e:	21 fd       	sbrc	r18, 1
    7c20:	02 c0       	rjmp	.+4      	; 0x7c26 <vfprintf+0x688>
    7c22:	80 e2       	ldi	r24, 0x20	; 32
    7c24:	01 c0       	rjmp	.+2      	; 0x7c28 <vfprintf+0x68a>
    7c26:	8b e2       	ldi	r24, 0x2B	; 43
    7c28:	27 fd       	sbrc	r18, 7
    7c2a:	8d e2       	ldi	r24, 0x2D	; 45
    7c2c:	b7 01       	movw	r22, r14
    7c2e:	90 e0       	ldi	r25, 0x00	; 0
    7c30:	2c d3       	rcall	.+1624   	; 0x828a <fputc>
    7c32:	c1 16       	cp	r12, r17
    7c34:	30 f4       	brcc	.+12     	; 0x7c42 <vfprintf+0x6a4>
    7c36:	b7 01       	movw	r22, r14
    7c38:	80 e3       	ldi	r24, 0x30	; 48
    7c3a:	90 e0       	ldi	r25, 0x00	; 0
    7c3c:	26 d3       	rcall	.+1612   	; 0x828a <fputc>
    7c3e:	11 50       	subi	r17, 0x01	; 1
    7c40:	f8 cf       	rjmp	.-16     	; 0x7c32 <vfprintf+0x694>
    7c42:	ca 94       	dec	r12
    7c44:	f4 01       	movw	r30, r8
    7c46:	ec 0d       	add	r30, r12
    7c48:	f1 1d       	adc	r31, r1
    7c4a:	80 81       	ld	r24, Z
    7c4c:	b7 01       	movw	r22, r14
    7c4e:	90 e0       	ldi	r25, 0x00	; 0
    7c50:	1c d3       	rcall	.+1592   	; 0x828a <fputc>
    7c52:	c1 10       	cpse	r12, r1
    7c54:	f6 cf       	rjmp	.-20     	; 0x7c42 <vfprintf+0x6a4>
    7c56:	55 20       	and	r5, r5
    7c58:	09 f4       	brne	.+2      	; 0x7c5c <vfprintf+0x6be>
    7c5a:	dd cc       	rjmp	.-1606   	; 0x7616 <vfprintf+0x78>
    7c5c:	b7 01       	movw	r22, r14
    7c5e:	80 e2       	ldi	r24, 0x20	; 32
    7c60:	90 e0       	ldi	r25, 0x00	; 0
    7c62:	13 d3       	rcall	.+1574   	; 0x828a <fputc>
    7c64:	5a 94       	dec	r5
    7c66:	f7 cf       	rjmp	.-18     	; 0x7c56 <vfprintf+0x6b8>
    7c68:	f7 01       	movw	r30, r14
    7c6a:	86 81       	ldd	r24, Z+6	; 0x06
    7c6c:	97 81       	ldd	r25, Z+7	; 0x07
    7c6e:	02 c0       	rjmp	.+4      	; 0x7c74 <vfprintf+0x6d6>
    7c70:	8f ef       	ldi	r24, 0xFF	; 255
    7c72:	9f ef       	ldi	r25, 0xFF	; 255
    7c74:	63 96       	adiw	r28, 0x13	; 19
    7c76:	cd bf       	out	0x3d, r28	; 61
    7c78:	de bf       	out	0x3e, r29	; 62
    7c7a:	df 91       	pop	r29
    7c7c:	cf 91       	pop	r28
    7c7e:	1f 91       	pop	r17
    7c80:	0f 91       	pop	r16
    7c82:	ff 90       	pop	r15
    7c84:	ef 90       	pop	r14
    7c86:	df 90       	pop	r13
    7c88:	cf 90       	pop	r12
    7c8a:	bf 90       	pop	r11
    7c8c:	af 90       	pop	r10
    7c8e:	9f 90       	pop	r9
    7c90:	8f 90       	pop	r8
    7c92:	7f 90       	pop	r7
    7c94:	6f 90       	pop	r6
    7c96:	5f 90       	pop	r5
    7c98:	4f 90       	pop	r4
    7c9a:	3f 90       	pop	r3
    7c9c:	2f 90       	pop	r2
    7c9e:	08 95       	ret

00007ca0 <__udivmodhi4>:
    7ca0:	aa 1b       	sub	r26, r26
    7ca2:	bb 1b       	sub	r27, r27
    7ca4:	51 e1       	ldi	r21, 0x11	; 17
    7ca6:	07 c0       	rjmp	.+14     	; 0x7cb6 <__udivmodhi4_ep>

00007ca8 <__udivmodhi4_loop>:
    7ca8:	aa 1f       	adc	r26, r26
    7caa:	bb 1f       	adc	r27, r27
    7cac:	a6 17       	cp	r26, r22
    7cae:	b7 07       	cpc	r27, r23
    7cb0:	10 f0       	brcs	.+4      	; 0x7cb6 <__udivmodhi4_ep>
    7cb2:	a6 1b       	sub	r26, r22
    7cb4:	b7 0b       	sbc	r27, r23

00007cb6 <__udivmodhi4_ep>:
    7cb6:	88 1f       	adc	r24, r24
    7cb8:	99 1f       	adc	r25, r25
    7cba:	5a 95       	dec	r21
    7cbc:	a9 f7       	brne	.-22     	; 0x7ca8 <__udivmodhi4_loop>
    7cbe:	80 95       	com	r24
    7cc0:	90 95       	com	r25
    7cc2:	bc 01       	movw	r22, r24
    7cc4:	cd 01       	movw	r24, r26
    7cc6:	08 95       	ret

00007cc8 <__divmodhi4>:
    7cc8:	97 fb       	bst	r25, 7
    7cca:	07 2e       	mov	r0, r23
    7ccc:	16 f4       	brtc	.+4      	; 0x7cd2 <__divmodhi4+0xa>
    7cce:	00 94       	com	r0
    7cd0:	06 d0       	rcall	.+12     	; 0x7cde <__divmodhi4_neg1>
    7cd2:	77 fd       	sbrc	r23, 7
    7cd4:	08 d0       	rcall	.+16     	; 0x7ce6 <__divmodhi4_neg2>
    7cd6:	e4 df       	rcall	.-56     	; 0x7ca0 <__udivmodhi4>
    7cd8:	07 fc       	sbrc	r0, 7
    7cda:	05 d0       	rcall	.+10     	; 0x7ce6 <__divmodhi4_neg2>
    7cdc:	3e f4       	brtc	.+14     	; 0x7cec <__divmodhi4_exit>

00007cde <__divmodhi4_neg1>:
    7cde:	90 95       	com	r25
    7ce0:	81 95       	neg	r24
    7ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    7ce4:	08 95       	ret

00007ce6 <__divmodhi4_neg2>:
    7ce6:	70 95       	com	r23
    7ce8:	61 95       	neg	r22
    7cea:	7f 4f       	sbci	r23, 0xFF	; 255

00007cec <__divmodhi4_exit>:
    7cec:	08 95       	ret

00007cee <__udivmodsi4>:
    7cee:	a1 e2       	ldi	r26, 0x21	; 33
    7cf0:	1a 2e       	mov	r1, r26
    7cf2:	aa 1b       	sub	r26, r26
    7cf4:	bb 1b       	sub	r27, r27
    7cf6:	fd 01       	movw	r30, r26
    7cf8:	0d c0       	rjmp	.+26     	; 0x7d14 <__udivmodsi4_ep>

00007cfa <__udivmodsi4_loop>:
    7cfa:	aa 1f       	adc	r26, r26
    7cfc:	bb 1f       	adc	r27, r27
    7cfe:	ee 1f       	adc	r30, r30
    7d00:	ff 1f       	adc	r31, r31
    7d02:	a2 17       	cp	r26, r18
    7d04:	b3 07       	cpc	r27, r19
    7d06:	e4 07       	cpc	r30, r20
    7d08:	f5 07       	cpc	r31, r21
    7d0a:	20 f0       	brcs	.+8      	; 0x7d14 <__udivmodsi4_ep>
    7d0c:	a2 1b       	sub	r26, r18
    7d0e:	b3 0b       	sbc	r27, r19
    7d10:	e4 0b       	sbc	r30, r20
    7d12:	f5 0b       	sbc	r31, r21

00007d14 <__udivmodsi4_ep>:
    7d14:	66 1f       	adc	r22, r22
    7d16:	77 1f       	adc	r23, r23
    7d18:	88 1f       	adc	r24, r24
    7d1a:	99 1f       	adc	r25, r25
    7d1c:	1a 94       	dec	r1
    7d1e:	69 f7       	brne	.-38     	; 0x7cfa <__udivmodsi4_loop>
    7d20:	60 95       	com	r22
    7d22:	70 95       	com	r23
    7d24:	80 95       	com	r24
    7d26:	90 95       	com	r25
    7d28:	9b 01       	movw	r18, r22
    7d2a:	ac 01       	movw	r20, r24
    7d2c:	bd 01       	movw	r22, r26
    7d2e:	cf 01       	movw	r24, r30
    7d30:	08 95       	ret

00007d32 <__tablejump2__>:
    7d32:	ee 0f       	add	r30, r30
    7d34:	ff 1f       	adc	r31, r31

00007d36 <__tablejump__>:
    7d36:	05 90       	lpm	r0, Z+
    7d38:	f4 91       	lpm	r31, Z
    7d3a:	e0 2d       	mov	r30, r0
    7d3c:	19 94       	eijmp

00007d3e <__umulhisi3>:
    7d3e:	a2 9f       	mul	r26, r18
    7d40:	b0 01       	movw	r22, r0
    7d42:	b3 9f       	mul	r27, r19
    7d44:	c0 01       	movw	r24, r0
    7d46:	a3 9f       	mul	r26, r19
    7d48:	70 0d       	add	r23, r0
    7d4a:	81 1d       	adc	r24, r1
    7d4c:	11 24       	eor	r1, r1
    7d4e:	91 1d       	adc	r25, r1
    7d50:	b2 9f       	mul	r27, r18
    7d52:	70 0d       	add	r23, r0
    7d54:	81 1d       	adc	r24, r1
    7d56:	11 24       	eor	r1, r1
    7d58:	91 1d       	adc	r25, r1
    7d5a:	08 95       	ret

00007d5c <__muluhisi3>:
    7d5c:	f0 df       	rcall	.-32     	; 0x7d3e <__umulhisi3>
    7d5e:	a5 9f       	mul	r26, r21
    7d60:	90 0d       	add	r25, r0
    7d62:	b4 9f       	mul	r27, r20
    7d64:	90 0d       	add	r25, r0
    7d66:	a4 9f       	mul	r26, r20
    7d68:	80 0d       	add	r24, r0
    7d6a:	91 1d       	adc	r25, r1
    7d6c:	11 24       	eor	r1, r1
    7d6e:	08 95       	ret

00007d70 <strtoul>:
    7d70:	2f 92       	push	r2
    7d72:	3f 92       	push	r3
    7d74:	5f 92       	push	r5
    7d76:	6f 92       	push	r6
    7d78:	7f 92       	push	r7
    7d7a:	8f 92       	push	r8
    7d7c:	9f 92       	push	r9
    7d7e:	af 92       	push	r10
    7d80:	bf 92       	push	r11
    7d82:	cf 92       	push	r12
    7d84:	df 92       	push	r13
    7d86:	ef 92       	push	r14
    7d88:	ff 92       	push	r15
    7d8a:	0f 93       	push	r16
    7d8c:	1f 93       	push	r17
    7d8e:	cf 93       	push	r28
    7d90:	df 93       	push	r29
    7d92:	8b 01       	movw	r16, r22
    7d94:	ea 01       	movw	r28, r20
    7d96:	61 15       	cp	r22, r1
    7d98:	71 05       	cpc	r23, r1
    7d9a:	21 f0       	breq	.+8      	; 0x7da4 <strtoul+0x34>
    7d9c:	db 01       	movw	r26, r22
    7d9e:	8c 93       	st	X, r24
    7da0:	11 96       	adiw	r26, 0x01	; 1
    7da2:	9c 93       	st	X, r25
    7da4:	20 97       	sbiw	r28, 0x00	; 0
    7da6:	39 f0       	breq	.+14     	; 0x7db6 <strtoul+0x46>
    7da8:	9e 01       	movw	r18, r28
    7daa:	22 50       	subi	r18, 0x02	; 2
    7dac:	31 09       	sbc	r19, r1
    7dae:	23 32       	cpi	r18, 0x23	; 35
    7db0:	31 05       	cpc	r19, r1
    7db2:	08 f0       	brcs	.+2      	; 0x7db6 <strtoul+0x46>
    7db4:	d5 c0       	rjmp	.+426    	; 0x7f60 <strtoul+0x1f0>
    7db6:	7c 01       	movw	r14, r24
    7db8:	67 01       	movw	r12, r14
    7dba:	bf ef       	ldi	r27, 0xFF	; 255
    7dbc:	cb 1a       	sub	r12, r27
    7dbe:	db 0a       	sbc	r13, r27
    7dc0:	56 01       	movw	r10, r12
    7dc2:	f7 01       	movw	r30, r14
    7dc4:	60 80       	ld	r6, Z
    7dc6:	86 2d       	mov	r24, r6
    7dc8:	90 e0       	ldi	r25, 0x00	; 0
    7dca:	d8 d1       	rcall	.+944    	; 0x817c <isspace>
    7dcc:	89 2b       	or	r24, r25
    7dce:	11 f0       	breq	.+4      	; 0x7dd4 <strtoul+0x64>
    7dd0:	76 01       	movw	r14, r12
    7dd2:	f2 cf       	rjmp	.-28     	; 0x7db8 <strtoul+0x48>
    7dd4:	fd e2       	ldi	r31, 0x2D	; 45
    7dd6:	6f 12       	cpse	r6, r31
    7dd8:	0a c0       	rjmp	.+20     	; 0x7dee <strtoul+0x7e>
    7dda:	57 01       	movw	r10, r14
    7ddc:	82 e0       	ldi	r24, 0x02	; 2
    7dde:	a8 0e       	add	r10, r24
    7de0:	b1 1c       	adc	r11, r1
    7de2:	d7 01       	movw	r26, r14
    7de4:	11 96       	adiw	r26, 0x01	; 1
    7de6:	6c 90       	ld	r6, X
    7de8:	77 24       	eor	r7, r7
    7dea:	73 94       	inc	r7
    7dec:	0b c0       	rjmp	.+22     	; 0x7e04 <strtoul+0x94>
    7dee:	bb e2       	ldi	r27, 0x2B	; 43
    7df0:	6b 12       	cpse	r6, r27
    7df2:	07 c0       	rjmp	.+14     	; 0x7e02 <strtoul+0x92>
    7df4:	57 01       	movw	r10, r14
    7df6:	e2 e0       	ldi	r30, 0x02	; 2
    7df8:	ae 0e       	add	r10, r30
    7dfa:	b1 1c       	adc	r11, r1
    7dfc:	d7 01       	movw	r26, r14
    7dfe:	11 96       	adiw	r26, 0x01	; 1
    7e00:	6c 90       	ld	r6, X
    7e02:	71 2c       	mov	r7, r1
    7e04:	ce 01       	movw	r24, r28
    7e06:	8f 7e       	andi	r24, 0xEF	; 239
    7e08:	89 2b       	or	r24, r25
    7e0a:	89 f4       	brne	.+34     	; 0x7e2e <strtoul+0xbe>
    7e0c:	b0 e3       	ldi	r27, 0x30	; 48
    7e0e:	6b 12       	cpse	r6, r27
    7e10:	36 c0       	rjmp	.+108    	; 0x7e7e <strtoul+0x10e>
    7e12:	f5 01       	movw	r30, r10
    7e14:	80 81       	ld	r24, Z
    7e16:	8f 7d       	andi	r24, 0xDF	; 223
    7e18:	88 35       	cpi	r24, 0x58	; 88
    7e1a:	d1 f4       	brne	.+52     	; 0x7e50 <strtoul+0xe0>
    7e1c:	61 80       	ldd	r6, Z+1	; 0x01
    7e1e:	f2 e0       	ldi	r31, 0x02	; 2
    7e20:	af 0e       	add	r10, r31
    7e22:	b1 1c       	adc	r11, r1
    7e24:	87 2d       	mov	r24, r7
    7e26:	82 60       	ori	r24, 0x02	; 2
    7e28:	78 2e       	mov	r7, r24
    7e2a:	c0 e1       	ldi	r28, 0x10	; 16
    7e2c:	d0 e0       	ldi	r29, 0x00	; 0
    7e2e:	ca 30       	cpi	r28, 0x0A	; 10
    7e30:	d1 05       	cpc	r29, r1
    7e32:	49 f1       	breq	.+82     	; 0x7e86 <strtoul+0x116>
    7e34:	c0 31       	cpi	r28, 0x10	; 16
    7e36:	d1 05       	cpc	r29, r1
    7e38:	21 f0       	breq	.+8      	; 0x7e42 <strtoul+0xd2>
    7e3a:	c8 30       	cpi	r28, 0x08	; 8
    7e3c:	d1 05       	cpc	r29, r1
    7e3e:	99 f4       	brne	.+38     	; 0x7e66 <strtoul+0xf6>
    7e40:	09 c0       	rjmp	.+18     	; 0x7e54 <strtoul+0xe4>
    7e42:	cc 24       	eor	r12, r12
    7e44:	ca 94       	dec	r12
    7e46:	dc 2c       	mov	r13, r12
    7e48:	ec 2c       	mov	r14, r12
    7e4a:	af e0       	ldi	r26, 0x0F	; 15
    7e4c:	fa 2e       	mov	r15, r26
    7e4e:	21 c0       	rjmp	.+66     	; 0x7e92 <strtoul+0x122>
    7e50:	20 97       	sbiw	r28, 0x00	; 0
    7e52:	69 f7       	brne	.-38     	; 0x7e2e <strtoul+0xbe>
    7e54:	c8 e0       	ldi	r28, 0x08	; 8
    7e56:	d0 e0       	ldi	r29, 0x00	; 0
    7e58:	cc 24       	eor	r12, r12
    7e5a:	ca 94       	dec	r12
    7e5c:	dc 2c       	mov	r13, r12
    7e5e:	ec 2c       	mov	r14, r12
    7e60:	ff e1       	ldi	r31, 0x1F	; 31
    7e62:	ff 2e       	mov	r15, r31
    7e64:	16 c0       	rjmp	.+44     	; 0x7e92 <strtoul+0x122>
    7e66:	6f ef       	ldi	r22, 0xFF	; 255
    7e68:	7f ef       	ldi	r23, 0xFF	; 255
    7e6a:	cb 01       	movw	r24, r22
    7e6c:	9e 01       	movw	r18, r28
    7e6e:	44 27       	eor	r20, r20
    7e70:	37 fd       	sbrc	r19, 7
    7e72:	40 95       	com	r20
    7e74:	54 2f       	mov	r21, r20
    7e76:	3b df       	rcall	.-394    	; 0x7cee <__udivmodsi4>
    7e78:	69 01       	movw	r12, r18
    7e7a:	7a 01       	movw	r14, r20
    7e7c:	0a c0       	rjmp	.+20     	; 0x7e92 <strtoul+0x122>
    7e7e:	20 97       	sbiw	r28, 0x00	; 0
    7e80:	b1 f6       	brne	.-84     	; 0x7e2e <strtoul+0xbe>
    7e82:	ca e0       	ldi	r28, 0x0A	; 10
    7e84:	d0 e0       	ldi	r29, 0x00	; 0
    7e86:	e9 e9       	ldi	r30, 0x99	; 153
    7e88:	ce 2e       	mov	r12, r30
    7e8a:	dc 2c       	mov	r13, r12
    7e8c:	ec 2c       	mov	r14, r12
    7e8e:	e9 e1       	ldi	r30, 0x19	; 25
    7e90:	fe 2e       	mov	r15, r30
    7e92:	f5 01       	movw	r30, r10
    7e94:	60 e0       	ldi	r22, 0x00	; 0
    7e96:	20 e0       	ldi	r18, 0x00	; 0
    7e98:	30 e0       	ldi	r19, 0x00	; 0
    7e9a:	a9 01       	movw	r20, r18
    7e9c:	4e 01       	movw	r8, r28
    7e9e:	aa 24       	eor	r10, r10
    7ea0:	97 fc       	sbrc	r9, 7
    7ea2:	a0 94       	com	r10
    7ea4:	ba 2c       	mov	r11, r10
    7ea6:	1f 01       	movw	r2, r30
    7ea8:	70 ed       	ldi	r23, 0xD0	; 208
    7eaa:	57 2e       	mov	r5, r23
    7eac:	56 0c       	add	r5, r6
    7eae:	a9 e0       	ldi	r26, 0x09	; 9
    7eb0:	a5 15       	cp	r26, r5
    7eb2:	70 f4       	brcc	.+28     	; 0x7ed0 <strtoul+0x160>
    7eb4:	8f eb       	ldi	r24, 0xBF	; 191
    7eb6:	86 0d       	add	r24, r6
    7eb8:	8a 31       	cpi	r24, 0x1A	; 26
    7eba:	18 f4       	brcc	.+6      	; 0x7ec2 <strtoul+0x152>
    7ebc:	99 ec       	ldi	r25, 0xC9	; 201
    7ebe:	59 2e       	mov	r5, r25
    7ec0:	06 c0       	rjmp	.+12     	; 0x7ece <strtoul+0x15e>
    7ec2:	8f e9       	ldi	r24, 0x9F	; 159
    7ec4:	86 0d       	add	r24, r6
    7ec6:	8a 31       	cpi	r24, 0x1A	; 26
    7ec8:	40 f5       	brcc	.+80     	; 0x7f1a <strtoul+0x1aa>
    7eca:	89 ea       	ldi	r24, 0xA9	; 169
    7ecc:	58 2e       	mov	r5, r24
    7ece:	56 0c       	add	r5, r6
    7ed0:	85 2d       	mov	r24, r5
    7ed2:	90 e0       	ldi	r25, 0x00	; 0
    7ed4:	8c 17       	cp	r24, r28
    7ed6:	9d 07       	cpc	r25, r29
    7ed8:	04 f5       	brge	.+64     	; 0x7f1a <strtoul+0x1aa>
    7eda:	6f 3f       	cpi	r22, 0xFF	; 255
    7edc:	d1 f0       	breq	.+52     	; 0x7f12 <strtoul+0x1a2>
    7ede:	c2 16       	cp	r12, r18
    7ee0:	d3 06       	cpc	r13, r19
    7ee2:	e4 06       	cpc	r14, r20
    7ee4:	f5 06       	cpc	r15, r21
    7ee6:	90 f0       	brcs	.+36     	; 0x7f0c <strtoul+0x19c>
    7ee8:	c5 01       	movw	r24, r10
    7eea:	b4 01       	movw	r22, r8
    7eec:	9f d2       	rcall	.+1342   	; 0x842c <__mulsi3>
    7eee:	9b 01       	movw	r18, r22
    7ef0:	ac 01       	movw	r20, r24
    7ef2:	85 2d       	mov	r24, r5
    7ef4:	90 e0       	ldi	r25, 0x00	; 0
    7ef6:	a0 e0       	ldi	r26, 0x00	; 0
    7ef8:	b0 e0       	ldi	r27, 0x00	; 0
    7efa:	28 0f       	add	r18, r24
    7efc:	39 1f       	adc	r19, r25
    7efe:	4a 1f       	adc	r20, r26
    7f00:	5b 1f       	adc	r21, r27
    7f02:	28 17       	cp	r18, r24
    7f04:	39 07       	cpc	r19, r25
    7f06:	4a 07       	cpc	r20, r26
    7f08:	5b 07       	cpc	r21, r27
    7f0a:	10 f4       	brcc	.+4      	; 0x7f10 <strtoul+0x1a0>
    7f0c:	6f ef       	ldi	r22, 0xFF	; 255
    7f0e:	01 c0       	rjmp	.+2      	; 0x7f12 <strtoul+0x1a2>
    7f10:	61 e0       	ldi	r22, 0x01	; 1
    7f12:	31 96       	adiw	r30, 0x01	; 1
    7f14:	d1 01       	movw	r26, r2
    7f16:	6c 90       	ld	r6, X
    7f18:	c6 cf       	rjmp	.-116    	; 0x7ea6 <strtoul+0x136>
    7f1a:	01 15       	cp	r16, r1
    7f1c:	11 05       	cpc	r17, r1
    7f1e:	51 f0       	breq	.+20     	; 0x7f34 <strtoul+0x1c4>
    7f20:	66 23       	and	r22, r22
    7f22:	11 f0       	breq	.+4      	; 0x7f28 <strtoul+0x1b8>
    7f24:	31 97       	sbiw	r30, 0x01	; 1
    7f26:	03 c0       	rjmp	.+6      	; 0x7f2e <strtoul+0x1be>
    7f28:	71 fe       	sbrs	r7, 1
    7f2a:	04 c0       	rjmp	.+8      	; 0x7f34 <strtoul+0x1c4>
    7f2c:	32 97       	sbiw	r30, 0x02	; 2
    7f2e:	d8 01       	movw	r26, r16
    7f30:	ed 93       	st	X+, r30
    7f32:	fc 93       	st	X, r31
    7f34:	70 fe       	sbrs	r7, 0
    7f36:	07 c0       	rjmp	.+14     	; 0x7f46 <strtoul+0x1d6>
    7f38:	50 95       	com	r21
    7f3a:	40 95       	com	r20
    7f3c:	30 95       	com	r19
    7f3e:	21 95       	neg	r18
    7f40:	3f 4f       	sbci	r19, 0xFF	; 255
    7f42:	4f 4f       	sbci	r20, 0xFF	; 255
    7f44:	5f 4f       	sbci	r21, 0xFF	; 255
    7f46:	67 ff       	sbrs	r22, 7
    7f48:	10 c0       	rjmp	.+32     	; 0x7f6a <strtoul+0x1fa>
    7f4a:	82 e2       	ldi	r24, 0x22	; 34
    7f4c:	90 e0       	ldi	r25, 0x00	; 0
    7f4e:	80 93 09 33 	sts	0x3309, r24
    7f52:	90 93 0a 33 	sts	0x330A, r25
    7f56:	6f ef       	ldi	r22, 0xFF	; 255
    7f58:	7f ef       	ldi	r23, 0xFF	; 255
    7f5a:	8f ef       	ldi	r24, 0xFF	; 255
    7f5c:	9f ef       	ldi	r25, 0xFF	; 255
    7f5e:	07 c0       	rjmp	.+14     	; 0x7f6e <strtoul+0x1fe>
    7f60:	60 e0       	ldi	r22, 0x00	; 0
    7f62:	70 e0       	ldi	r23, 0x00	; 0
    7f64:	80 e0       	ldi	r24, 0x00	; 0
    7f66:	90 e0       	ldi	r25, 0x00	; 0
    7f68:	02 c0       	rjmp	.+4      	; 0x7f6e <strtoul+0x1fe>
    7f6a:	b9 01       	movw	r22, r18
    7f6c:	ca 01       	movw	r24, r20
    7f6e:	df 91       	pop	r29
    7f70:	cf 91       	pop	r28
    7f72:	1f 91       	pop	r17
    7f74:	0f 91       	pop	r16
    7f76:	ff 90       	pop	r15
    7f78:	ef 90       	pop	r14
    7f7a:	df 90       	pop	r13
    7f7c:	cf 90       	pop	r12
    7f7e:	bf 90       	pop	r11
    7f80:	af 90       	pop	r10
    7f82:	9f 90       	pop	r9
    7f84:	8f 90       	pop	r8
    7f86:	7f 90       	pop	r7
    7f88:	6f 90       	pop	r6
    7f8a:	5f 90       	pop	r5
    7f8c:	3f 90       	pop	r3
    7f8e:	2f 90       	pop	r2
    7f90:	08 95       	ret

00007f92 <atoi>:
    7f92:	fc 01       	movw	r30, r24
    7f94:	88 27       	eor	r24, r24
    7f96:	99 27       	eor	r25, r25
    7f98:	e8 94       	clt
    7f9a:	21 91       	ld	r18, Z+
    7f9c:	20 32       	cpi	r18, 0x20	; 32
    7f9e:	e9 f3       	breq	.-6      	; 0x7f9a <atoi+0x8>
    7fa0:	29 30       	cpi	r18, 0x09	; 9
    7fa2:	10 f0       	brcs	.+4      	; 0x7fa8 <atoi+0x16>
    7fa4:	2e 30       	cpi	r18, 0x0E	; 14
    7fa6:	c8 f3       	brcs	.-14     	; 0x7f9a <atoi+0x8>
    7fa8:	2b 32       	cpi	r18, 0x2B	; 43
    7faa:	39 f0       	breq	.+14     	; 0x7fba <atoi+0x28>
    7fac:	2d 32       	cpi	r18, 0x2D	; 45
    7fae:	31 f4       	brne	.+12     	; 0x7fbc <atoi+0x2a>
    7fb0:	68 94       	set
    7fb2:	03 c0       	rjmp	.+6      	; 0x7fba <atoi+0x28>
    7fb4:	62 d1       	rcall	.+708    	; 0x827a <__mulhi_const_10>
    7fb6:	82 0f       	add	r24, r18
    7fb8:	91 1d       	adc	r25, r1
    7fba:	21 91       	ld	r18, Z+
    7fbc:	20 53       	subi	r18, 0x30	; 48
    7fbe:	2a 30       	cpi	r18, 0x0A	; 10
    7fc0:	c8 f3       	brcs	.-14     	; 0x7fb4 <atoi+0x22>
    7fc2:	1e f4       	brtc	.+6      	; 0x7fca <atoi+0x38>
    7fc4:	90 95       	com	r25
    7fc6:	81 95       	neg	r24
    7fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    7fca:	08 95       	ret

00007fcc <__ftoa_engine>:
    7fcc:	28 30       	cpi	r18, 0x08	; 8
    7fce:	08 f0       	brcs	.+2      	; 0x7fd2 <__ftoa_engine+0x6>
    7fd0:	27 e0       	ldi	r18, 0x07	; 7
    7fd2:	33 27       	eor	r19, r19
    7fd4:	da 01       	movw	r26, r20
    7fd6:	99 0f       	add	r25, r25
    7fd8:	31 1d       	adc	r19, r1
    7fda:	87 fd       	sbrc	r24, 7
    7fdc:	91 60       	ori	r25, 0x01	; 1
    7fde:	00 96       	adiw	r24, 0x00	; 0
    7fe0:	61 05       	cpc	r22, r1
    7fe2:	71 05       	cpc	r23, r1
    7fe4:	39 f4       	brne	.+14     	; 0x7ff4 <__ftoa_engine+0x28>
    7fe6:	32 60       	ori	r19, 0x02	; 2
    7fe8:	2e 5f       	subi	r18, 0xFE	; 254
    7fea:	3d 93       	st	X+, r19
    7fec:	30 e3       	ldi	r19, 0x30	; 48
    7fee:	2a 95       	dec	r18
    7ff0:	e1 f7       	brne	.-8      	; 0x7fea <__ftoa_engine+0x1e>
    7ff2:	08 95       	ret
    7ff4:	9f 3f       	cpi	r25, 0xFF	; 255
    7ff6:	30 f0       	brcs	.+12     	; 0x8004 <__ftoa_engine+0x38>
    7ff8:	80 38       	cpi	r24, 0x80	; 128
    7ffa:	71 05       	cpc	r23, r1
    7ffc:	61 05       	cpc	r22, r1
    7ffe:	09 f0       	breq	.+2      	; 0x8002 <__ftoa_engine+0x36>
    8000:	3c 5f       	subi	r19, 0xFC	; 252
    8002:	3c 5f       	subi	r19, 0xFC	; 252
    8004:	3d 93       	st	X+, r19
    8006:	91 30       	cpi	r25, 0x01	; 1
    8008:	08 f0       	brcs	.+2      	; 0x800c <__ftoa_engine+0x40>
    800a:	80 68       	ori	r24, 0x80	; 128
    800c:	91 1d       	adc	r25, r1
    800e:	df 93       	push	r29
    8010:	cf 93       	push	r28
    8012:	1f 93       	push	r17
    8014:	0f 93       	push	r16
    8016:	ff 92       	push	r15
    8018:	ef 92       	push	r14
    801a:	19 2f       	mov	r17, r25
    801c:	98 7f       	andi	r25, 0xF8	; 248
    801e:	96 95       	lsr	r25
    8020:	e9 2f       	mov	r30, r25
    8022:	96 95       	lsr	r25
    8024:	96 95       	lsr	r25
    8026:	e9 0f       	add	r30, r25
    8028:	ff 27       	eor	r31, r31
    802a:	e8 55       	subi	r30, 0x58	; 88
    802c:	fc 4f       	sbci	r31, 0xFC	; 252
    802e:	99 27       	eor	r25, r25
    8030:	33 27       	eor	r19, r19
    8032:	ee 24       	eor	r14, r14
    8034:	ff 24       	eor	r15, r15
    8036:	a7 01       	movw	r20, r14
    8038:	e7 01       	movw	r28, r14
    803a:	05 90       	lpm	r0, Z+
    803c:	08 94       	sec
    803e:	07 94       	ror	r0
    8040:	28 f4       	brcc	.+10     	; 0x804c <__ftoa_engine+0x80>
    8042:	36 0f       	add	r19, r22
    8044:	e7 1e       	adc	r14, r23
    8046:	f8 1e       	adc	r15, r24
    8048:	49 1f       	adc	r20, r25
    804a:	51 1d       	adc	r21, r1
    804c:	66 0f       	add	r22, r22
    804e:	77 1f       	adc	r23, r23
    8050:	88 1f       	adc	r24, r24
    8052:	99 1f       	adc	r25, r25
    8054:	06 94       	lsr	r0
    8056:	a1 f7       	brne	.-24     	; 0x8040 <__ftoa_engine+0x74>
    8058:	05 90       	lpm	r0, Z+
    805a:	07 94       	ror	r0
    805c:	28 f4       	brcc	.+10     	; 0x8068 <__ftoa_engine+0x9c>
    805e:	e7 0e       	add	r14, r23
    8060:	f8 1e       	adc	r15, r24
    8062:	49 1f       	adc	r20, r25
    8064:	56 1f       	adc	r21, r22
    8066:	c1 1d       	adc	r28, r1
    8068:	77 0f       	add	r23, r23
    806a:	88 1f       	adc	r24, r24
    806c:	99 1f       	adc	r25, r25
    806e:	66 1f       	adc	r22, r22
    8070:	06 94       	lsr	r0
    8072:	a1 f7       	brne	.-24     	; 0x805c <__ftoa_engine+0x90>
    8074:	05 90       	lpm	r0, Z+
    8076:	07 94       	ror	r0
    8078:	28 f4       	brcc	.+10     	; 0x8084 <__ftoa_engine+0xb8>
    807a:	f8 0e       	add	r15, r24
    807c:	49 1f       	adc	r20, r25
    807e:	56 1f       	adc	r21, r22
    8080:	c7 1f       	adc	r28, r23
    8082:	d1 1d       	adc	r29, r1
    8084:	88 0f       	add	r24, r24
    8086:	99 1f       	adc	r25, r25
    8088:	66 1f       	adc	r22, r22
    808a:	77 1f       	adc	r23, r23
    808c:	06 94       	lsr	r0
    808e:	a1 f7       	brne	.-24     	; 0x8078 <__ftoa_engine+0xac>
    8090:	05 90       	lpm	r0, Z+
    8092:	07 94       	ror	r0
    8094:	20 f4       	brcc	.+8      	; 0x809e <__ftoa_engine+0xd2>
    8096:	49 0f       	add	r20, r25
    8098:	56 1f       	adc	r21, r22
    809a:	c7 1f       	adc	r28, r23
    809c:	d8 1f       	adc	r29, r24
    809e:	99 0f       	add	r25, r25
    80a0:	66 1f       	adc	r22, r22
    80a2:	77 1f       	adc	r23, r23
    80a4:	88 1f       	adc	r24, r24
    80a6:	06 94       	lsr	r0
    80a8:	a9 f7       	brne	.-22     	; 0x8094 <__ftoa_engine+0xc8>
    80aa:	84 91       	lpm	r24, Z
    80ac:	10 95       	com	r17
    80ae:	17 70       	andi	r17, 0x07	; 7
    80b0:	41 f0       	breq	.+16     	; 0x80c2 <__ftoa_engine+0xf6>
    80b2:	d6 95       	lsr	r29
    80b4:	c7 95       	ror	r28
    80b6:	57 95       	ror	r21
    80b8:	47 95       	ror	r20
    80ba:	f7 94       	ror	r15
    80bc:	e7 94       	ror	r14
    80be:	1a 95       	dec	r17
    80c0:	c1 f7       	brne	.-16     	; 0x80b2 <__ftoa_engine+0xe6>
    80c2:	ee e4       	ldi	r30, 0x4E	; 78
    80c4:	f3 e0       	ldi	r31, 0x03	; 3
    80c6:	68 94       	set
    80c8:	15 90       	lpm	r1, Z+
    80ca:	15 91       	lpm	r17, Z+
    80cc:	35 91       	lpm	r19, Z+
    80ce:	65 91       	lpm	r22, Z+
    80d0:	95 91       	lpm	r25, Z+
    80d2:	05 90       	lpm	r0, Z+
    80d4:	7f e2       	ldi	r23, 0x2F	; 47
    80d6:	73 95       	inc	r23
    80d8:	e1 18       	sub	r14, r1
    80da:	f1 0a       	sbc	r15, r17
    80dc:	43 0b       	sbc	r20, r19
    80de:	56 0b       	sbc	r21, r22
    80e0:	c9 0b       	sbc	r28, r25
    80e2:	d0 09       	sbc	r29, r0
    80e4:	c0 f7       	brcc	.-16     	; 0x80d6 <__ftoa_engine+0x10a>
    80e6:	e1 0c       	add	r14, r1
    80e8:	f1 1e       	adc	r15, r17
    80ea:	43 1f       	adc	r20, r19
    80ec:	56 1f       	adc	r21, r22
    80ee:	c9 1f       	adc	r28, r25
    80f0:	d0 1d       	adc	r29, r0
    80f2:	7e f4       	brtc	.+30     	; 0x8112 <__ftoa_engine+0x146>
    80f4:	70 33       	cpi	r23, 0x30	; 48
    80f6:	11 f4       	brne	.+4      	; 0x80fc <__ftoa_engine+0x130>
    80f8:	8a 95       	dec	r24
    80fa:	e6 cf       	rjmp	.-52     	; 0x80c8 <__ftoa_engine+0xfc>
    80fc:	e8 94       	clt
    80fe:	01 50       	subi	r16, 0x01	; 1
    8100:	30 f0       	brcs	.+12     	; 0x810e <__ftoa_engine+0x142>
    8102:	08 0f       	add	r16, r24
    8104:	0a f4       	brpl	.+2      	; 0x8108 <__ftoa_engine+0x13c>
    8106:	00 27       	eor	r16, r16
    8108:	02 17       	cp	r16, r18
    810a:	08 f4       	brcc	.+2      	; 0x810e <__ftoa_engine+0x142>
    810c:	20 2f       	mov	r18, r16
    810e:	23 95       	inc	r18
    8110:	02 2f       	mov	r16, r18
    8112:	7a 33       	cpi	r23, 0x3A	; 58
    8114:	28 f0       	brcs	.+10     	; 0x8120 <__ftoa_engine+0x154>
    8116:	79 e3       	ldi	r23, 0x39	; 57
    8118:	7d 93       	st	X+, r23
    811a:	2a 95       	dec	r18
    811c:	e9 f7       	brne	.-6      	; 0x8118 <__ftoa_engine+0x14c>
    811e:	10 c0       	rjmp	.+32     	; 0x8140 <__ftoa_engine+0x174>
    8120:	7d 93       	st	X+, r23
    8122:	2a 95       	dec	r18
    8124:	89 f6       	brne	.-94     	; 0x80c8 <__ftoa_engine+0xfc>
    8126:	06 94       	lsr	r0
    8128:	97 95       	ror	r25
    812a:	67 95       	ror	r22
    812c:	37 95       	ror	r19
    812e:	17 95       	ror	r17
    8130:	17 94       	ror	r1
    8132:	e1 18       	sub	r14, r1
    8134:	f1 0a       	sbc	r15, r17
    8136:	43 0b       	sbc	r20, r19
    8138:	56 0b       	sbc	r21, r22
    813a:	c9 0b       	sbc	r28, r25
    813c:	d0 09       	sbc	r29, r0
    813e:	98 f0       	brcs	.+38     	; 0x8166 <__ftoa_engine+0x19a>
    8140:	23 95       	inc	r18
    8142:	7e 91       	ld	r23, -X
    8144:	73 95       	inc	r23
    8146:	7a 33       	cpi	r23, 0x3A	; 58
    8148:	08 f0       	brcs	.+2      	; 0x814c <__ftoa_engine+0x180>
    814a:	70 e3       	ldi	r23, 0x30	; 48
    814c:	7c 93       	st	X, r23
    814e:	20 13       	cpse	r18, r16
    8150:	b8 f7       	brcc	.-18     	; 0x8140 <__ftoa_engine+0x174>
    8152:	7e 91       	ld	r23, -X
    8154:	70 61       	ori	r23, 0x10	; 16
    8156:	7d 93       	st	X+, r23
    8158:	30 f0       	brcs	.+12     	; 0x8166 <__ftoa_engine+0x19a>
    815a:	83 95       	inc	r24
    815c:	71 e3       	ldi	r23, 0x31	; 49
    815e:	7d 93       	st	X+, r23
    8160:	70 e3       	ldi	r23, 0x30	; 48
    8162:	2a 95       	dec	r18
    8164:	e1 f7       	brne	.-8      	; 0x815e <__ftoa_engine+0x192>
    8166:	11 24       	eor	r1, r1
    8168:	ef 90       	pop	r14
    816a:	ff 90       	pop	r15
    816c:	0f 91       	pop	r16
    816e:	1f 91       	pop	r17
    8170:	cf 91       	pop	r28
    8172:	df 91       	pop	r29
    8174:	99 27       	eor	r25, r25
    8176:	87 fd       	sbrc	r24, 7
    8178:	90 95       	com	r25
    817a:	08 95       	ret

0000817c <isspace>:
    817c:	91 11       	cpse	r25, r1
    817e:	53 c1       	rjmp	.+678    	; 0x8426 <__ctype_isfalse>
    8180:	80 32       	cpi	r24, 0x20	; 32
    8182:	19 f0       	breq	.+6      	; 0x818a <isspace+0xe>
    8184:	89 50       	subi	r24, 0x09	; 9
    8186:	85 50       	subi	r24, 0x05	; 5
    8188:	d0 f7       	brcc	.-12     	; 0x817e <isspace+0x2>
    818a:	08 95       	ret

0000818c <strnlen_P>:
    818c:	fc 01       	movw	r30, r24
    818e:	05 90       	lpm	r0, Z+
    8190:	61 50       	subi	r22, 0x01	; 1
    8192:	70 40       	sbci	r23, 0x00	; 0
    8194:	01 10       	cpse	r0, r1
    8196:	d8 f7       	brcc	.-10     	; 0x818e <strnlen_P+0x2>
    8198:	80 95       	com	r24
    819a:	90 95       	com	r25
    819c:	8e 0f       	add	r24, r30
    819e:	9f 1f       	adc	r25, r31
    81a0:	08 95       	ret

000081a2 <strtok>:
    81a2:	42 e7       	ldi	r20, 0x72	; 114
    81a4:	5c e2       	ldi	r21, 0x2C	; 44
    81a6:	42 c0       	rjmp	.+132    	; 0x822c <strtok_r>

000081a8 <memcpy>:
    81a8:	fb 01       	movw	r30, r22
    81aa:	dc 01       	movw	r26, r24
    81ac:	02 c0       	rjmp	.+4      	; 0x81b2 <memcpy+0xa>
    81ae:	01 90       	ld	r0, Z+
    81b0:	0d 92       	st	X+, r0
    81b2:	41 50       	subi	r20, 0x01	; 1
    81b4:	50 40       	sbci	r21, 0x00	; 0
    81b6:	d8 f7       	brcc	.-10     	; 0x81ae <memcpy+0x6>
    81b8:	08 95       	ret

000081ba <strcmp>:
    81ba:	fb 01       	movw	r30, r22
    81bc:	dc 01       	movw	r26, r24
    81be:	8d 91       	ld	r24, X+
    81c0:	01 90       	ld	r0, Z+
    81c2:	80 19       	sub	r24, r0
    81c4:	01 10       	cpse	r0, r1
    81c6:	d9 f3       	breq	.-10     	; 0x81be <strcmp+0x4>
    81c8:	99 0b       	sbc	r25, r25
    81ca:	08 95       	ret

000081cc <strcpy>:
    81cc:	fb 01       	movw	r30, r22
    81ce:	dc 01       	movw	r26, r24
    81d0:	01 90       	ld	r0, Z+
    81d2:	0d 92       	st	X+, r0
    81d4:	00 20       	and	r0, r0
    81d6:	e1 f7       	brne	.-8      	; 0x81d0 <strcpy+0x4>
    81d8:	08 95       	ret

000081da <strcspn>:
    81da:	dc 01       	movw	r26, r24
    81dc:	5d 91       	ld	r21, X+
    81de:	55 23       	and	r21, r21
    81e0:	31 f0       	breq	.+12     	; 0x81ee <strcspn+0x14>
    81e2:	fb 01       	movw	r30, r22
    81e4:	01 90       	ld	r0, Z+
    81e6:	05 16       	cp	r0, r21
    81e8:	01 10       	cpse	r0, r1
    81ea:	e1 f7       	brne	.-8      	; 0x81e4 <strcspn+0xa>
    81ec:	b9 f7       	brne	.-18     	; 0x81dc <strcspn+0x2>
    81ee:	80 95       	com	r24
    81f0:	90 95       	com	r25
    81f2:	8a 0f       	add	r24, r26
    81f4:	9b 1f       	adc	r25, r27
    81f6:	08 95       	ret

000081f8 <strncpy>:
    81f8:	fb 01       	movw	r30, r22
    81fa:	dc 01       	movw	r26, r24
    81fc:	41 50       	subi	r20, 0x01	; 1
    81fe:	50 40       	sbci	r21, 0x00	; 0
    8200:	48 f0       	brcs	.+18     	; 0x8214 <strncpy+0x1c>
    8202:	01 90       	ld	r0, Z+
    8204:	0d 92       	st	X+, r0
    8206:	00 20       	and	r0, r0
    8208:	c9 f7       	brne	.-14     	; 0x81fc <strncpy+0x4>
    820a:	01 c0       	rjmp	.+2      	; 0x820e <strncpy+0x16>
    820c:	1d 92       	st	X+, r1
    820e:	41 50       	subi	r20, 0x01	; 1
    8210:	50 40       	sbci	r21, 0x00	; 0
    8212:	e0 f7       	brcc	.-8      	; 0x820c <strncpy+0x14>
    8214:	08 95       	ret

00008216 <strnlen>:
    8216:	fc 01       	movw	r30, r24
    8218:	61 50       	subi	r22, 0x01	; 1
    821a:	70 40       	sbci	r23, 0x00	; 0
    821c:	01 90       	ld	r0, Z+
    821e:	01 10       	cpse	r0, r1
    8220:	d8 f7       	brcc	.-10     	; 0x8218 <strnlen+0x2>
    8222:	80 95       	com	r24
    8224:	90 95       	com	r25
    8226:	8e 0f       	add	r24, r30
    8228:	9f 1f       	adc	r25, r31
    822a:	08 95       	ret

0000822c <strtok_r>:
    822c:	fa 01       	movw	r30, r20
    822e:	a1 91       	ld	r26, Z+
    8230:	b0 81       	ld	r27, Z
    8232:	00 97       	sbiw	r24, 0x00	; 0
    8234:	19 f4       	brne	.+6      	; 0x823c <strtok_r+0x10>
    8236:	10 97       	sbiw	r26, 0x00	; 0
    8238:	e1 f0       	breq	.+56     	; 0x8272 <strtok_r+0x46>
    823a:	cd 01       	movw	r24, r26
    823c:	dc 01       	movw	r26, r24
    823e:	cd 01       	movw	r24, r26
    8240:	0d 90       	ld	r0, X+
    8242:	00 20       	and	r0, r0
    8244:	11 f4       	brne	.+4      	; 0x824a <strtok_r+0x1e>
    8246:	c0 01       	movw	r24, r0
    8248:	13 c0       	rjmp	.+38     	; 0x8270 <strtok_r+0x44>
    824a:	fb 01       	movw	r30, r22
    824c:	21 91       	ld	r18, Z+
    824e:	22 23       	and	r18, r18
    8250:	19 f0       	breq	.+6      	; 0x8258 <strtok_r+0x2c>
    8252:	20 15       	cp	r18, r0
    8254:	d9 f7       	brne	.-10     	; 0x824c <strtok_r+0x20>
    8256:	f3 cf       	rjmp	.-26     	; 0x823e <strtok_r+0x12>
    8258:	fb 01       	movw	r30, r22
    825a:	21 91       	ld	r18, Z+
    825c:	20 15       	cp	r18, r0
    825e:	19 f4       	brne	.+6      	; 0x8266 <strtok_r+0x3a>
    8260:	1e 92       	st	-X, r1
    8262:	11 96       	adiw	r26, 0x01	; 1
    8264:	06 c0       	rjmp	.+12     	; 0x8272 <strtok_r+0x46>
    8266:	22 23       	and	r18, r18
    8268:	c1 f7       	brne	.-16     	; 0x825a <strtok_r+0x2e>
    826a:	0d 90       	ld	r0, X+
    826c:	00 20       	and	r0, r0
    826e:	a1 f7       	brne	.-24     	; 0x8258 <strtok_r+0x2c>
    8270:	d0 01       	movw	r26, r0
    8272:	fa 01       	movw	r30, r20
    8274:	a1 93       	st	Z+, r26
    8276:	b0 83       	st	Z, r27
    8278:	08 95       	ret

0000827a <__mulhi_const_10>:
    827a:	7a e0       	ldi	r23, 0x0A	; 10
    827c:	97 9f       	mul	r25, r23
    827e:	90 2d       	mov	r25, r0
    8280:	87 9f       	mul	r24, r23
    8282:	80 2d       	mov	r24, r0
    8284:	91 0d       	add	r25, r1
    8286:	11 24       	eor	r1, r1
    8288:	08 95       	ret

0000828a <fputc>:
    828a:	0f 93       	push	r16
    828c:	1f 93       	push	r17
    828e:	cf 93       	push	r28
    8290:	df 93       	push	r29
    8292:	18 2f       	mov	r17, r24
    8294:	09 2f       	mov	r16, r25
    8296:	eb 01       	movw	r28, r22
    8298:	8b 81       	ldd	r24, Y+3	; 0x03
    829a:	81 fd       	sbrc	r24, 1
    829c:	03 c0       	rjmp	.+6      	; 0x82a4 <fputc+0x1a>
    829e:	8f ef       	ldi	r24, 0xFF	; 255
    82a0:	9f ef       	ldi	r25, 0xFF	; 255
    82a2:	20 c0       	rjmp	.+64     	; 0x82e4 <fputc+0x5a>
    82a4:	82 ff       	sbrs	r24, 2
    82a6:	10 c0       	rjmp	.+32     	; 0x82c8 <fputc+0x3e>
    82a8:	4e 81       	ldd	r20, Y+6	; 0x06
    82aa:	5f 81       	ldd	r21, Y+7	; 0x07
    82ac:	2c 81       	ldd	r18, Y+4	; 0x04
    82ae:	3d 81       	ldd	r19, Y+5	; 0x05
    82b0:	42 17       	cp	r20, r18
    82b2:	53 07       	cpc	r21, r19
    82b4:	7c f4       	brge	.+30     	; 0x82d4 <fputc+0x4a>
    82b6:	e8 81       	ld	r30, Y
    82b8:	f9 81       	ldd	r31, Y+1	; 0x01
    82ba:	9f 01       	movw	r18, r30
    82bc:	2f 5f       	subi	r18, 0xFF	; 255
    82be:	3f 4f       	sbci	r19, 0xFF	; 255
    82c0:	28 83       	st	Y, r18
    82c2:	39 83       	std	Y+1, r19	; 0x01
    82c4:	10 83       	st	Z, r17
    82c6:	06 c0       	rjmp	.+12     	; 0x82d4 <fputc+0x4a>
    82c8:	e8 85       	ldd	r30, Y+8	; 0x08
    82ca:	f9 85       	ldd	r31, Y+9	; 0x09
    82cc:	81 2f       	mov	r24, r17
    82ce:	19 95       	eicall
    82d0:	89 2b       	or	r24, r25
    82d2:	29 f7       	brne	.-54     	; 0x829e <fputc+0x14>
    82d4:	2e 81       	ldd	r18, Y+6	; 0x06
    82d6:	3f 81       	ldd	r19, Y+7	; 0x07
    82d8:	2f 5f       	subi	r18, 0xFF	; 255
    82da:	3f 4f       	sbci	r19, 0xFF	; 255
    82dc:	2e 83       	std	Y+6, r18	; 0x06
    82de:	3f 83       	std	Y+7, r19	; 0x07
    82e0:	81 2f       	mov	r24, r17
    82e2:	90 2f       	mov	r25, r16
    82e4:	df 91       	pop	r29
    82e6:	cf 91       	pop	r28
    82e8:	1f 91       	pop	r17
    82ea:	0f 91       	pop	r16
    82ec:	08 95       	ret

000082ee <printf>:
    82ee:	cf 93       	push	r28
    82f0:	df 93       	push	r29
    82f2:	cd b7       	in	r28, 0x3d	; 61
    82f4:	de b7       	in	r29, 0x3e	; 62
    82f6:	fe 01       	movw	r30, r28
    82f8:	36 96       	adiw	r30, 0x06	; 6
    82fa:	61 91       	ld	r22, Z+
    82fc:	71 91       	ld	r23, Z+
    82fe:	af 01       	movw	r20, r30
    8300:	80 91 05 33 	lds	r24, 0x3305
    8304:	90 91 06 33 	lds	r25, 0x3306
    8308:	4a d9       	rcall	.-3436   	; 0x759e <vfprintf>
    830a:	df 91       	pop	r29
    830c:	cf 91       	pop	r28
    830e:	08 95       	ret

00008310 <puts>:
    8310:	0f 93       	push	r16
    8312:	1f 93       	push	r17
    8314:	cf 93       	push	r28
    8316:	df 93       	push	r29
    8318:	e0 91 05 33 	lds	r30, 0x3305
    831c:	f0 91 06 33 	lds	r31, 0x3306
    8320:	23 81       	ldd	r18, Z+3	; 0x03
    8322:	21 ff       	sbrs	r18, 1
    8324:	1b c0       	rjmp	.+54     	; 0x835c <puts+0x4c>
    8326:	ec 01       	movw	r28, r24
    8328:	00 e0       	ldi	r16, 0x00	; 0
    832a:	10 e0       	ldi	r17, 0x00	; 0
    832c:	89 91       	ld	r24, Y+
    832e:	60 91 05 33 	lds	r22, 0x3305
    8332:	70 91 06 33 	lds	r23, 0x3306
    8336:	db 01       	movw	r26, r22
    8338:	18 96       	adiw	r26, 0x08	; 8
    833a:	ed 91       	ld	r30, X+
    833c:	fc 91       	ld	r31, X
    833e:	19 97       	sbiw	r26, 0x09	; 9
    8340:	88 23       	and	r24, r24
    8342:	31 f0       	breq	.+12     	; 0x8350 <puts+0x40>
    8344:	19 95       	eicall
    8346:	89 2b       	or	r24, r25
    8348:	89 f3       	breq	.-30     	; 0x832c <puts+0x1c>
    834a:	0f ef       	ldi	r16, 0xFF	; 255
    834c:	1f ef       	ldi	r17, 0xFF	; 255
    834e:	ee cf       	rjmp	.-36     	; 0x832c <puts+0x1c>
    8350:	8a e0       	ldi	r24, 0x0A	; 10
    8352:	19 95       	eicall
    8354:	89 2b       	or	r24, r25
    8356:	11 f4       	brne	.+4      	; 0x835c <puts+0x4c>
    8358:	c8 01       	movw	r24, r16
    835a:	02 c0       	rjmp	.+4      	; 0x8360 <puts+0x50>
    835c:	8f ef       	ldi	r24, 0xFF	; 255
    835e:	9f ef       	ldi	r25, 0xFF	; 255
    8360:	df 91       	pop	r29
    8362:	cf 91       	pop	r28
    8364:	1f 91       	pop	r17
    8366:	0f 91       	pop	r16
    8368:	08 95       	ret

0000836a <__ultoa_invert>:
    836a:	fa 01       	movw	r30, r20
    836c:	aa 27       	eor	r26, r26
    836e:	28 30       	cpi	r18, 0x08	; 8
    8370:	51 f1       	breq	.+84     	; 0x83c6 <__ultoa_invert+0x5c>
    8372:	20 31       	cpi	r18, 0x10	; 16
    8374:	81 f1       	breq	.+96     	; 0x83d6 <__ultoa_invert+0x6c>
    8376:	e8 94       	clt
    8378:	6f 93       	push	r22
    837a:	6e 7f       	andi	r22, 0xFE	; 254
    837c:	6e 5f       	subi	r22, 0xFE	; 254
    837e:	7f 4f       	sbci	r23, 0xFF	; 255
    8380:	8f 4f       	sbci	r24, 0xFF	; 255
    8382:	9f 4f       	sbci	r25, 0xFF	; 255
    8384:	af 4f       	sbci	r26, 0xFF	; 255
    8386:	b1 e0       	ldi	r27, 0x01	; 1
    8388:	3e d0       	rcall	.+124    	; 0x8406 <__ultoa_invert+0x9c>
    838a:	b4 e0       	ldi	r27, 0x04	; 4
    838c:	3c d0       	rcall	.+120    	; 0x8406 <__ultoa_invert+0x9c>
    838e:	67 0f       	add	r22, r23
    8390:	78 1f       	adc	r23, r24
    8392:	89 1f       	adc	r24, r25
    8394:	9a 1f       	adc	r25, r26
    8396:	a1 1d       	adc	r26, r1
    8398:	68 0f       	add	r22, r24
    839a:	79 1f       	adc	r23, r25
    839c:	8a 1f       	adc	r24, r26
    839e:	91 1d       	adc	r25, r1
    83a0:	a1 1d       	adc	r26, r1
    83a2:	6a 0f       	add	r22, r26
    83a4:	71 1d       	adc	r23, r1
    83a6:	81 1d       	adc	r24, r1
    83a8:	91 1d       	adc	r25, r1
    83aa:	a1 1d       	adc	r26, r1
    83ac:	20 d0       	rcall	.+64     	; 0x83ee <__ultoa_invert+0x84>
    83ae:	09 f4       	brne	.+2      	; 0x83b2 <__ultoa_invert+0x48>
    83b0:	68 94       	set
    83b2:	3f 91       	pop	r19
    83b4:	2a e0       	ldi	r18, 0x0A	; 10
    83b6:	26 9f       	mul	r18, r22
    83b8:	11 24       	eor	r1, r1
    83ba:	30 19       	sub	r19, r0
    83bc:	30 5d       	subi	r19, 0xD0	; 208
    83be:	31 93       	st	Z+, r19
    83c0:	de f6       	brtc	.-74     	; 0x8378 <__ultoa_invert+0xe>
    83c2:	cf 01       	movw	r24, r30
    83c4:	08 95       	ret
    83c6:	46 2f       	mov	r20, r22
    83c8:	47 70       	andi	r20, 0x07	; 7
    83ca:	40 5d       	subi	r20, 0xD0	; 208
    83cc:	41 93       	st	Z+, r20
    83ce:	b3 e0       	ldi	r27, 0x03	; 3
    83d0:	0f d0       	rcall	.+30     	; 0x83f0 <__ultoa_invert+0x86>
    83d2:	c9 f7       	brne	.-14     	; 0x83c6 <__ultoa_invert+0x5c>
    83d4:	f6 cf       	rjmp	.-20     	; 0x83c2 <__ultoa_invert+0x58>
    83d6:	46 2f       	mov	r20, r22
    83d8:	4f 70       	andi	r20, 0x0F	; 15
    83da:	40 5d       	subi	r20, 0xD0	; 208
    83dc:	4a 33       	cpi	r20, 0x3A	; 58
    83de:	18 f0       	brcs	.+6      	; 0x83e6 <__ultoa_invert+0x7c>
    83e0:	49 5d       	subi	r20, 0xD9	; 217
    83e2:	31 fd       	sbrc	r19, 1
    83e4:	40 52       	subi	r20, 0x20	; 32
    83e6:	41 93       	st	Z+, r20
    83e8:	02 d0       	rcall	.+4      	; 0x83ee <__ultoa_invert+0x84>
    83ea:	a9 f7       	brne	.-22     	; 0x83d6 <__ultoa_invert+0x6c>
    83ec:	ea cf       	rjmp	.-44     	; 0x83c2 <__ultoa_invert+0x58>
    83ee:	b4 e0       	ldi	r27, 0x04	; 4
    83f0:	a6 95       	lsr	r26
    83f2:	97 95       	ror	r25
    83f4:	87 95       	ror	r24
    83f6:	77 95       	ror	r23
    83f8:	67 95       	ror	r22
    83fa:	ba 95       	dec	r27
    83fc:	c9 f7       	brne	.-14     	; 0x83f0 <__ultoa_invert+0x86>
    83fe:	00 97       	sbiw	r24, 0x00	; 0
    8400:	61 05       	cpc	r22, r1
    8402:	71 05       	cpc	r23, r1
    8404:	08 95       	ret
    8406:	9b 01       	movw	r18, r22
    8408:	ac 01       	movw	r20, r24
    840a:	0a 2e       	mov	r0, r26
    840c:	06 94       	lsr	r0
    840e:	57 95       	ror	r21
    8410:	47 95       	ror	r20
    8412:	37 95       	ror	r19
    8414:	27 95       	ror	r18
    8416:	ba 95       	dec	r27
    8418:	c9 f7       	brne	.-14     	; 0x840c <__ultoa_invert+0xa2>
    841a:	62 0f       	add	r22, r18
    841c:	73 1f       	adc	r23, r19
    841e:	84 1f       	adc	r24, r20
    8420:	95 1f       	adc	r25, r21
    8422:	a0 1d       	adc	r26, r0
    8424:	08 95       	ret

00008426 <__ctype_isfalse>:
    8426:	99 27       	eor	r25, r25
    8428:	88 27       	eor	r24, r24

0000842a <__ctype_istrue>:
    842a:	08 95       	ret

0000842c <__mulsi3>:
    842c:	db 01       	movw	r26, r22
    842e:	8f 93       	push	r24
    8430:	9f 93       	push	r25
    8432:	94 dc       	rcall	.-1752   	; 0x7d5c <__muluhisi3>
    8434:	bf 91       	pop	r27
    8436:	af 91       	pop	r26
    8438:	a2 9f       	mul	r26, r18
    843a:	80 0d       	add	r24, r0
    843c:	91 1d       	adc	r25, r1
    843e:	a3 9f       	mul	r26, r19
    8440:	90 0d       	add	r25, r0
    8442:	b2 9f       	mul	r27, r18
    8444:	90 0d       	add	r25, r0
    8446:	11 24       	eor	r1, r1
    8448:	08 95       	ret

0000844a <_exit>:
    844a:	f8 94       	cli

0000844c <__stop_program>:
    844c:	ff cf       	rjmp	.-2      	; 0x844c <__stop_program>
