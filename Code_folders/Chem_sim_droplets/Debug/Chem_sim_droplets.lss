
Chem_sim_droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000073ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000007e6  00802000  000073ee  00007482  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003ca  008027e6  008027e6  00007c68  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007c68  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000680  00000000  00000000  00007cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000fc8a  00000000  00000000  00008348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002aff  00000000  00000000  00017fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005cb3  00000000  00000000  0001aad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001fd4  00000000  00000000  00020784  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000032ac  00000000  00000000  00022758  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000a686  00000000  00000000  00025a04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000008a8  00000000  00000000  0003008a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b9 c1       	rjmp	.+882    	; 0x374 <__ctors_end>
       2:	00 00       	nop
       4:	d7 c1       	rjmp	.+942    	; 0x3b4 <__bad_interrupt>
       6:	00 00       	nop
       8:	d5 c1       	rjmp	.+938    	; 0x3b4 <__bad_interrupt>
       a:	00 00       	nop
       c:	d3 c1       	rjmp	.+934    	; 0x3b4 <__bad_interrupt>
       e:	00 00       	nop
      10:	d1 c1       	rjmp	.+930    	; 0x3b4 <__bad_interrupt>
      12:	00 00       	nop
      14:	cf c1       	rjmp	.+926    	; 0x3b4 <__bad_interrupt>
      16:	00 00       	nop
      18:	cd c1       	rjmp	.+922    	; 0x3b4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	cb c1       	rjmp	.+918    	; 0x3b4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c9 c1       	rjmp	.+914    	; 0x3b4 <__bad_interrupt>
      22:	00 00       	nop
      24:	c7 c1       	rjmp	.+910    	; 0x3b4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 6e 27 	jmp	0x4edc	; 0x4edc <__vector_10>
      2c:	c4 c1       	rjmp	.+904    	; 0x3b6 <__vector_11>
      2e:	00 00       	nop
      30:	c1 c1       	rjmp	.+898    	; 0x3b4 <__bad_interrupt>
      32:	00 00       	nop
      34:	bf c1       	rjmp	.+894    	; 0x3b4 <__bad_interrupt>
      36:	00 00       	nop
      38:	bd c1       	rjmp	.+890    	; 0x3b4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	bb c1       	rjmp	.+886    	; 0x3b4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b9 c1       	rjmp	.+882    	; 0x3b4 <__bad_interrupt>
      42:	00 00       	nop
      44:	b7 c1       	rjmp	.+878    	; 0x3b4 <__bad_interrupt>
      46:	00 00       	nop
      48:	b5 c1       	rjmp	.+874    	; 0x3b4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b3 c1       	rjmp	.+870    	; 0x3b4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b1 c1       	rjmp	.+866    	; 0x3b4 <__bad_interrupt>
      52:	00 00       	nop
      54:	af c1       	rjmp	.+862    	; 0x3b4 <__bad_interrupt>
      56:	00 00       	nop
      58:	ad c1       	rjmp	.+858    	; 0x3b4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ab c1       	rjmp	.+854    	; 0x3b4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a9 c1       	rjmp	.+850    	; 0x3b4 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__vector_25>
      68:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__vector_26>
      6c:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <__vector_27>
      70:	0c 94 51 0d 	jmp	0x1aa2	; 0x1aa2 <__vector_28>
      74:	0c 94 a1 0d 	jmp	0x1b42	; 0x1b42 <__vector_29>
      78:	0c 94 79 0d 	jmp	0x1af2	; 0x1af2 <__vector_30>
      7c:	9b c1       	rjmp	.+822    	; 0x3b4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	99 c1       	rjmp	.+818    	; 0x3b4 <__bad_interrupt>
      82:	00 00       	nop
      84:	97 c1       	rjmp	.+814    	; 0x3b4 <__bad_interrupt>
      86:	00 00       	nop
      88:	95 c1       	rjmp	.+810    	; 0x3b4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	93 c1       	rjmp	.+806    	; 0x3b4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	91 c1       	rjmp	.+802    	; 0x3b4 <__bad_interrupt>
      92:	00 00       	nop
      94:	8f c1       	rjmp	.+798    	; 0x3b4 <__bad_interrupt>
      96:	00 00       	nop
      98:	8d c1       	rjmp	.+794    	; 0x3b4 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	8b c1       	rjmp	.+790    	; 0x3b4 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	89 c1       	rjmp	.+786    	; 0x3b4 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	87 c1       	rjmp	.+782    	; 0x3b4 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	85 c1       	rjmp	.+778    	; 0x3b4 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	83 c1       	rjmp	.+774    	; 0x3b4 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	81 c1       	rjmp	.+770    	; 0x3b4 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	7f c1       	rjmp	.+766    	; 0x3b4 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	9d c3       	rjmp	.+1850   	; 0x7f4 <__vector_46>
      ba:	00 00       	nop
      bc:	7b c1       	rjmp	.+758    	; 0x3b4 <__bad_interrupt>
      be:	00 00       	nop
      c0:	79 c1       	rjmp	.+754    	; 0x3b4 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	77 c1       	rjmp	.+750    	; 0x3b4 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	75 c1       	rjmp	.+746    	; 0x3b4 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	73 c1       	rjmp	.+742    	; 0x3b4 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	71 c1       	rjmp	.+738    	; 0x3b4 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	6f c1       	rjmp	.+734    	; 0x3b4 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	6d c1       	rjmp	.+730    	; 0x3b4 <__bad_interrupt>
      da:	00 00       	nop
      dc:	6b c1       	rjmp	.+726    	; 0x3b4 <__bad_interrupt>
      de:	00 00       	nop
      e0:	69 c1       	rjmp	.+722    	; 0x3b4 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	67 c1       	rjmp	.+718    	; 0x3b4 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 41 0e 	jmp	0x1c82	; 0x1c82 <__vector_58>
      ec:	0c 94 91 0e 	jmp	0x1d22	; 0x1d22 <__vector_59>
      f0:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__vector_60>
      f4:	0c 94 b9 0e 	jmp	0x1d72	; 0x1d72 <__vector_61>
      f8:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__vector_62>
      fc:	0c 94 e1 0e 	jmp	0x1dc2	; 0x1dc2 <__vector_63>
     100:	59 c1       	rjmp	.+690    	; 0x3b4 <__bad_interrupt>
     102:	00 00       	nop
     104:	57 c1       	rjmp	.+686    	; 0x3b4 <__bad_interrupt>
     106:	00 00       	nop
     108:	55 c1       	rjmp	.+682    	; 0x3b4 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	53 c1       	rjmp	.+678    	; 0x3b4 <__bad_interrupt>
     10e:	00 00       	nop
     110:	51 c1       	rjmp	.+674    	; 0x3b4 <__bad_interrupt>
     112:	00 00       	nop
     114:	4f c1       	rjmp	.+670    	; 0x3b4 <__bad_interrupt>
     116:	00 00       	nop
     118:	4d c1       	rjmp	.+666    	; 0x3b4 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	4b c1       	rjmp	.+662    	; 0x3b4 <__bad_interrupt>
     11e:	00 00       	nop
     120:	49 c1       	rjmp	.+658    	; 0x3b4 <__bad_interrupt>
     122:	00 00       	nop
     124:	47 c1       	rjmp	.+654    	; 0x3b4 <__bad_interrupt>
     126:	00 00       	nop
     128:	45 c1       	rjmp	.+650    	; 0x3b4 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	43 c1       	rjmp	.+646    	; 0x3b4 <__bad_interrupt>
     12e:	00 00       	nop
     130:	41 c1       	rjmp	.+642    	; 0x3b4 <__bad_interrupt>
     132:	00 00       	nop
     134:	3f c1       	rjmp	.+638    	; 0x3b4 <__bad_interrupt>
     136:	00 00       	nop
     138:	3d c1       	rjmp	.+634    	; 0x3b4 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	3b c1       	rjmp	.+630    	; 0x3b4 <__bad_interrupt>
     13e:	00 00       	nop
     140:	39 c1       	rjmp	.+626    	; 0x3b4 <__bad_interrupt>
     142:	00 00       	nop
     144:	37 c1       	rjmp	.+622    	; 0x3b4 <__bad_interrupt>
     146:	00 00       	nop
     148:	35 c1       	rjmp	.+618    	; 0x3b4 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	33 c1       	rjmp	.+614    	; 0x3b4 <__bad_interrupt>
     14e:	00 00       	nop
     150:	31 c1       	rjmp	.+610    	; 0x3b4 <__bad_interrupt>
     152:	00 00       	nop
     154:	2f c1       	rjmp	.+606    	; 0x3b4 <__bad_interrupt>
     156:	00 00       	nop
     158:	2d c1       	rjmp	.+602    	; 0x3b4 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	2b c1       	rjmp	.+598    	; 0x3b4 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__vector_88>
     164:	0c 94 19 0e 	jmp	0x1c32	; 0x1c32 <__vector_89>
     168:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_90>
     16c:	0c 94 fc 15 	jmp	0x2bf8	; 0x2bf8 <__vector_91>
     170:	21 c1       	rjmp	.+578    	; 0x3b4 <__bad_interrupt>
     172:	00 00       	nop
     174:	1f c1       	rjmp	.+574    	; 0x3b4 <__bad_interrupt>
     176:	00 00       	nop
     178:	1d c1       	rjmp	.+570    	; 0x3b4 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	1b c1       	rjmp	.+566    	; 0x3b4 <__bad_interrupt>
     17e:	00 00       	nop
     180:	19 c1       	rjmp	.+562    	; 0x3b4 <__bad_interrupt>
     182:	00 00       	nop
     184:	17 c1       	rjmp	.+558    	; 0x3b4 <__bad_interrupt>
     186:	00 00       	nop
     188:	15 c1       	rjmp	.+554    	; 0x3b4 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	13 c1       	rjmp	.+550    	; 0x3b4 <__bad_interrupt>
     18e:	00 00       	nop
     190:	11 c1       	rjmp	.+546    	; 0x3b4 <__bad_interrupt>
     192:	00 00       	nop
     194:	0f c1       	rjmp	.+542    	; 0x3b4 <__bad_interrupt>
     196:	00 00       	nop
     198:	0d c1       	rjmp	.+538    	; 0x3b4 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	0b c1       	rjmp	.+534    	; 0x3b4 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	09 c1       	rjmp	.+530    	; 0x3b4 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	07 c1       	rjmp	.+526    	; 0x3b4 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	05 c1       	rjmp	.+522    	; 0x3b4 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	03 c1       	rjmp	.+518    	; 0x3b4 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	01 c1       	rjmp	.+514    	; 0x3b4 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	ff c0       	rjmp	.+510    	; 0x3b4 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	fd c0       	rjmp	.+506    	; 0x3b4 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	fb c0       	rjmp	.+502    	; 0x3b4 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	f9 c0       	rjmp	.+498    	; 0x3b4 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	f7 c0       	rjmp	.+494    	; 0x3b4 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	f5 c0       	rjmp	.+490    	; 0x3b4 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	f3 c0       	rjmp	.+486    	; 0x3b4 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	f1 c0       	rjmp	.+482    	; 0x3b4 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	ef c0       	rjmp	.+478    	; 0x3b4 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	ed c0       	rjmp	.+474    	; 0x3b4 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <__vector_119>
     1e0:	0c 94 81 0f 	jmp	0x1f02	; 0x1f02 <__vector_120>
     1e4:	0c 94 59 0f 	jmp	0x1eb2	; 0x1eb2 <__vector_121>
     1e8:	e5 c0       	rjmp	.+458    	; 0x3b4 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	e3 c0       	rjmp	.+454    	; 0x3b4 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	e1 c0       	rjmp	.+450    	; 0x3b4 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	df c0       	rjmp	.+446    	; 0x3b4 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	dd c0       	rjmp	.+442    	; 0x3b4 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	15 04       	cpc	r1, r5
     1fe:	1b 04       	cpc	r1, r11
     200:	20 04       	cpc	r2, r0
     202:	27 04       	cpc	r2, r7
     204:	2c 04       	cpc	r2, r12
     206:	33 04       	cpc	r3, r3
     208:	38 04       	cpc	r3, r8
     20a:	b2 08       	sbc	r11, r2
     20c:	c2 08       	sbc	r12, r2
     20e:	d7 08       	sbc	r13, r7
     210:	1e 09       	sbc	r17, r14
     212:	2e 09       	sbc	r18, r14
     214:	3f 09       	sbc	r19, r15
     216:	4f 09       	sbc	r20, r15
     218:	cf 0a       	sbc	r12, r31
     21a:	df 0a       	sbc	r13, r31
     21c:	98 0a       	sbc	r9, r24
     21e:	af 0a       	sbc	r10, r31
     220:	bf 0a       	sbc	r11, r31
     222:	ef 0a       	sbc	r14, r31
     224:	ff 0a       	sbc	r15, r31
     226:	08 4a       	sbci	r16, 0xA8	; 168
     228:	d7 3b       	cpi	r29, 0xB7	; 183
     22a:	3b ce       	rjmp	.-906    	; 0xfffffea2 <__eeprom_end+0xff7efea2>
     22c:	01 6e       	ori	r16, 0xE1	; 225
     22e:	84 bc       	out	0x24, r8	; 36
     230:	bf fd       	.word	0xfdbf	; ????
     232:	c1 2f       	mov	r28, r17
     234:	3d 6c       	ori	r19, 0xCD	; 205
     236:	74 31       	cpi	r23, 0x14	; 20
     238:	9a bd       	out	0x2a, r25	; 42
     23a:	56 83       	std	Z+6, r21	; 0x06
     23c:	3d da       	rcall	.-2950   	; 0xfffff6b8 <__eeprom_end+0xff7ef6b8>
     23e:	3d 00       	.word	0x003d	; ????
     240:	c7 7f       	andi	r28, 0xF7	; 247
     242:	11 be       	out	0x31, r1	; 49
     244:	d9 e4       	ldi	r29, 0x49	; 73
     246:	bb 4c       	sbci	r27, 0xCB	; 203
     248:	3e 91       	ld	r19, -X
     24a:	6b aa       	std	Y+51, r6	; 0x33
     24c:	aa be       	out	0x3a, r10	; 58
     24e:	00 00       	nop
     250:	00 80       	ld	r0, Z
     252:	3f 05       	cpc	r19, r15
     254:	a8 4c       	sbci	r26, 0xC8	; 200
     256:	cd b2       	in	r12, 0x1d	; 29
     258:	d4 4e       	sbci	r29, 0xE4	; 228
     25a:	b9 38       	cpi	r27, 0x89	; 137
     25c:	36 a9       	ldd	r19, Z+54	; 0x36
     25e:	02 0c       	add	r0, r2
     260:	50 b9       	out	0x00, r21	; 0
     262:	91 86       	std	Z+9, r9	; 0x09
     264:	88 08       	sbc	r8, r8
     266:	3c a6       	std	Y+44, r3	; 0x2c
     268:	aa aa       	std	Y+50, r10	; 0x32
     26a:	2a be       	out	0x3a, r2	; 58
     26c:	00 00       	nop
     26e:	00 80       	ld	r0, Z
     270:	3f 00       	.word	0x003f	; ????

00000272 <__trampolines_end>:
     272:	6e 61       	ori	r22, 0x1E	; 30
     274:	6e 00       	.word	0x006e	; ????

00000276 <__c.2159>:
     276:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     286:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     296:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     2a6:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     2b6:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     2c6:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     2d6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     2e6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     2f6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     306:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     316:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     326:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     336:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     346:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     356:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     366:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000374 <__ctors_end>:
     374:	11 24       	eor	r1, r1
     376:	1f be       	out	0x3f, r1	; 63
     378:	cf ef       	ldi	r28, 0xFF	; 255
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	df e3       	ldi	r29, 0x3F	; 63
     37e:	de bf       	out	0x3e, r29	; 62
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	0c bf       	out	0x3c, r16	; 60

00000384 <__do_copy_data>:
     384:	17 e2       	ldi	r17, 0x27	; 39
     386:	a0 e0       	ldi	r26, 0x00	; 0
     388:	b0 e2       	ldi	r27, 0x20	; 32
     38a:	ee ee       	ldi	r30, 0xEE	; 238
     38c:	f3 e7       	ldi	r31, 0x73	; 115
     38e:	00 e0       	ldi	r16, 0x00	; 0
     390:	0b bf       	out	0x3b, r16	; 59
     392:	02 c0       	rjmp	.+4      	; 0x398 <__do_copy_data+0x14>
     394:	07 90       	elpm	r0, Z+
     396:	0d 92       	st	X+, r0
     398:	a6 3e       	cpi	r26, 0xE6	; 230
     39a:	b1 07       	cpc	r27, r17
     39c:	d9 f7       	brne	.-10     	; 0x394 <__do_copy_data+0x10>

0000039e <__do_clear_bss>:
     39e:	2b e2       	ldi	r18, 0x2B	; 43
     3a0:	a6 ee       	ldi	r26, 0xE6	; 230
     3a2:	b7 e2       	ldi	r27, 0x27	; 39
     3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <.do_clear_bss_start>

000003a6 <.do_clear_bss_loop>:
     3a6:	1d 92       	st	X+, r1

000003a8 <.do_clear_bss_start>:
     3a8:	a0 3b       	cpi	r26, 0xB0	; 176
     3aa:	b2 07       	cpc	r27, r18
     3ac:	e1 f7       	brne	.-8      	; 0x3a6 <.do_clear_bss_loop>
     3ae:	b0 d1       	rcall	.+864    	; 0x710 <main>
     3b0:	0c 94 f5 39 	jmp	0x73ea	; 0x73ea <_exit>

000003b4 <__bad_interrupt>:
     3b4:	25 ce       	rjmp	.-950    	; 0x0 <__vectors>

000003b6 <__vector_11>:
; * Returns from the interrupt handler
; Since run_tasks is on top of the stack, the IRS returns into the beginning of run_tasks
.global RTC_COMP_vect
RTC_COMP_vect:
rtc_compare_isr:
	push	r0							; Save all the registers on the stack
     3b6:	0f 92       	push	r0
	push	r1
     3b8:	1f 92       	push	r1
	push	r2
     3ba:	2f 92       	push	r2
	push	r3
     3bc:	3f 92       	push	r3
	push	r4
     3be:	4f 92       	push	r4
	push	r5
     3c0:	5f 92       	push	r5
	push	r6
     3c2:	6f 92       	push	r6
	push	r7
     3c4:	7f 92       	push	r7
	push	r8
     3c6:	8f 92       	push	r8
	push	r9
     3c8:	9f 92       	push	r9
	push	r10
     3ca:	af 92       	push	r10
	push	r11
     3cc:	bf 92       	push	r11
	push	r12
     3ce:	cf 92       	push	r12
	push	r13
     3d0:	df 92       	push	r13
	push	r14
     3d2:	ef 92       	push	r14
	push	r15
     3d4:	ff 92       	push	r15
	push	r16
     3d6:	0f 93       	push	r16
	push	r17
     3d8:	1f 93       	push	r17
	push	r18
     3da:	2f 93       	push	r18
	push	r19
     3dc:	3f 93       	push	r19
	push	r20
     3de:	4f 93       	push	r20
	push	r21
     3e0:	5f 93       	push	r21
	push	r22
     3e2:	6f 93       	push	r22
	push	r23
     3e4:	7f 93       	push	r23
	push	r24
     3e6:	8f 93       	push	r24
	push	r25
     3e8:	9f 93       	push	r25
	push	r26
     3ea:	af 93       	push	r26
	push	r27
     3ec:	bf 93       	push	r27
	push	r28
     3ee:	cf 93       	push	r28
	push	r29
     3f0:	df 93       	push	r29
	push	r30
     3f2:	ef 93       	push	r30
	push	r31
     3f4:	ff 93       	push	r31
	in		r16, _SFR_IO_ADDR(SREG)		; Save the CPU status register
     3f6:	0f b7       	in	r16, 0x3f	; 63
	push	r16
     3f8:	0f 93       	push	r16
	ldi		ZL,	pm_lo8(run_tasks)		; Push the address of run_tasks on the stack
     3fa:	e6 eb       	ldi	r30, 0xB6	; 182
	ldi		ZH, pm_hi8(run_tasks)		; Returning from the ISR will return to this address
     3fc:	f6 e2       	ldi	r31, 0x26	; 38
	ldi		r16, pm_hh8(run_tasks)
     3fe:	00 e0       	ldi	r16, 0x00	; 0
	push	ZL
     400:	ef 93       	push	r30
	push	ZH
     402:	ff 93       	push	r31
	push	r16
     404:	0f 93       	push	r16
	lds		r24, num_executing_tasks	; Increment num_executing_tasks
     406:	80 91 cf 28 	lds	r24, 0x28CF
	inc		r24
     40a:	83 95       	inc	r24
	sts		num_executing_tasks, r24
     40c:	80 93 cf 28 	sts	0x28CF, r24
	reti								; reti returns from the ISR to the beginning of run_tasks
     410:	18 95       	reti

00000412 <restore_registers>:
; the RTC_COMP interrupt had not occurred.  
; Returning from this subroutine returns program control to where it would have been if the RTC_COMP interrupt
; had not occurred
.global restore_registers
restore_registers:
	lds		r24, num_executing_tasks	; Decrement num_executing_tasks
     412:	80 91 cf 28 	lds	r24, 0x28CF
	dec		r24
     416:	8a 95       	dec	r24
	sts		num_executing_tasks, r24
     418:	80 93 cf 28 	sts	0x28CF, r24
	pop		r16							; Restore CPU status register
     41c:	0f 91       	pop	r16
	out		_SFR_IO_ADDR(SREG), r16
     41e:	0f bf       	out	0x3f, r16	; 63
	pop		r31								; Restore all registers
     420:	ff 91       	pop	r31
	pop		r30
     422:	ef 91       	pop	r30
	pop		r29
     424:	df 91       	pop	r29
	pop		r28
     426:	cf 91       	pop	r28
	pop		r27
     428:	bf 91       	pop	r27
	pop		r26
     42a:	af 91       	pop	r26
	pop		r25
     42c:	9f 91       	pop	r25
	pop		r24
     42e:	8f 91       	pop	r24
	pop		r23
     430:	7f 91       	pop	r23
	pop		r22
     432:	6f 91       	pop	r22
	pop		r21
     434:	5f 91       	pop	r21
	pop		r20
     436:	4f 91       	pop	r20
	pop		r19
     438:	3f 91       	pop	r19
	pop		r18
     43a:	2f 91       	pop	r18
	pop		r17
     43c:	1f 91       	pop	r17
	pop		r16
     43e:	0f 91       	pop	r16
	pop		r15
     440:	ff 90       	pop	r15
	pop		r14
     442:	ef 90       	pop	r14
	pop		r13
     444:	df 90       	pop	r13
	pop		r12
     446:	cf 90       	pop	r12
	pop		r11
     448:	bf 90       	pop	r11
	pop		r10
     44a:	af 90       	pop	r10
	pop		r9
     44c:	9f 90       	pop	r9
	pop		r8
     44e:	8f 90       	pop	r8
	pop		r7
     450:	7f 90       	pop	r7
	pop		r6
     452:	6f 90       	pop	r6
	pop		r5
     454:	5f 90       	pop	r5
	pop		r4
     456:	4f 90       	pop	r4
	pop		r3
     458:	3f 90       	pop	r3
	pop		r2
     45a:	2f 90       	pop	r2
	pop		r1
     45c:	1f 90       	pop	r1
	pop		r0
     45e:	0f 90       	pop	r0
	ret									; The top value of the stack was the code address that
     460:	08 95       	ret

00000462 <get_time>:


; Gets the time as an atomic operation
.global get_time
get_time:
	in		r0, _SFR_IO_ADDR(SREG)		; Save the state of the status register
     462:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
     464:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
     466:	60 91 08 04 	lds	r22, 0x0408
	lds		r23, RTC_CNT+1
     46a:	70 91 09 04 	lds	r23, 0x0409
	lds		r24, rtc_epoch				; epoch 16-bit high word
     46e:	80 91 ef 27 	lds	r24, 0x27EF
	lds		r25, rtc_epoch+1
     472:	90 91 f0 27 	lds	r25, 0x27F0
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
     476:	0f be       	out	0x3f, r0	; 63
	ret
     478:	08 95       	ret

0000047a <check_messages>:
	}
	return 0;
}

void check_messages ()
{
     47a:	bf 92       	push	r11
     47c:	cf 92       	push	r12
     47e:	df 92       	push	r13
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	6b 97       	sbiw	r28, 0x1b	; 27
     492:	cd bf       	out	0x3d, r28	; 61
     494:	de bf       	out	0x3e, r29	; 62
	ir_msg* msg_struct;	
	char actual_struct[sizeof(ir_msg)]; //It's like malloc, but on the stack.
	char actual_msg[IR_BUFFER_SIZE+1];
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
     496:	ce 01       	movw	r24, r28
     498:	0b 96       	adiw	r24, 0x0b	; 11
     49a:	8f 83       	std	Y+7, r24	; 0x07
     49c:	98 87       	std	Y+8, r25	; 0x08
	uint8_t i;
	
	if(user_facing_messages_ovf)
     49e:	80 91 ee 27 	lds	r24, 0x27EE
     4a2:	88 23       	and	r24, r24
     4a4:	49 f0       	breq	.+18     	; 0x4b8 <check_messages+0x3e>
	{
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
     4a6:	86 e0       	ldi	r24, 0x06	; 6
     4a8:	80 93 c9 28 	sts	0x28C9, r24
		user_facing_messages_ovf=0;
     4ac:	10 92 ee 27 	sts	0x27EE, r1
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
     4b0:	8d ed       	ldi	r24, 0xDD	; 221
     4b2:	90 e2       	ldi	r25, 0x20	; 32
     4b4:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
     4b8:	80 91 c9 28 	lds	r24, 0x28C9
     4bc:	88 23       	and	r24, r24
     4be:	09 f4       	brne	.+2      	; 0x4c2 <check_messages+0x48>
     4c0:	4d c0       	rjmp	.+154    	; 0x55c <check_messages+0xe2>
	{
		i=num_waiting_msgs-1;
     4c2:	e0 90 c9 28 	lds	r14, 0x28C9
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     4c6:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     4c8:	f8 94       	cli
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
     4ca:	ea 94       	dec	r14
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			memcpy(msg_struct->msg, (const void*)msg_node[i].msg, msg_node[i].msg_length);
     4cc:	f1 2c       	mov	r15, r1
     4ce:	67 01       	movw	r12, r14
     4d0:	cc 0c       	add	r12, r12
     4d2:	dd 1c       	adc	r13, r13
     4d4:	86 01       	movw	r16, r12
     4d6:	0e 0d       	add	r16, r14
     4d8:	1f 1d       	adc	r17, r15
     4da:	00 0f       	add	r16, r16
     4dc:	11 1f       	adc	r17, r17
     4de:	00 0f       	add	r16, r16
     4e0:	11 1f       	adc	r17, r17
     4e2:	00 0f       	add	r16, r16
     4e4:	11 1f       	adc	r17, r17
     4e6:	0b 5c       	subi	r16, 0xCB	; 203
     4e8:	17 4d       	sbci	r17, 0xD7	; 215
     4ea:	f8 01       	movw	r30, r16
     4ec:	47 89       	ldd	r20, Z+23	; 0x17
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	b6 01       	movw	r22, r12
     4f2:	6e 0d       	add	r22, r14
     4f4:	7f 1d       	adc	r23, r15
     4f6:	66 0f       	add	r22, r22
     4f8:	77 1f       	adc	r23, r23
     4fa:	66 0f       	add	r22, r22
     4fc:	77 1f       	adc	r23, r23
     4fe:	66 0f       	add	r22, r22
     500:	77 1f       	adc	r23, r23
     502:	65 5c       	subi	r22, 0xC5	; 197
     504:	77 4d       	sbci	r23, 0xD7	; 215
     506:	8f 81       	ldd	r24, Y+7	; 0x07
     508:	98 85       	ldd	r25, Y+8	; 0x08
     50a:	0e 94 73 38 	call	0x70e6	; 0x70e6 <memcpy>
			
			msg_struct->msg[msg_node[i].msg_length]	= '\0';
     50e:	f8 01       	movw	r30, r16
     510:	87 89       	ldd	r24, Z+23	; 0x17
     512:	ef 81       	ldd	r30, Y+7	; 0x07
     514:	f8 85       	ldd	r31, Y+8	; 0x08
     516:	e8 0f       	add	r30, r24
     518:	f1 1d       	adc	r31, r1
     51a:	10 82       	st	Z, r1
			msg_struct->arrival_time					= msg_node[i].arrival_time;
     51c:	f8 01       	movw	r30, r16
     51e:	80 81       	ld	r24, Z
     520:	91 81       	ldd	r25, Z+1	; 0x01
     522:	a2 81       	ldd	r26, Z+2	; 0x02
     524:	b3 81       	ldd	r27, Z+3	; 0x03
     526:	89 83       	std	Y+1, r24	; 0x01
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	ab 83       	std	Y+3, r26	; 0x03
     52c:	bc 83       	std	Y+4, r27	; 0x04
			msg_struct->sender_ID						= msg_node[i].sender_ID;
     52e:	84 81       	ldd	r24, Z+4	; 0x04
     530:	95 81       	ldd	r25, Z+5	; 0x05
     532:	8d 83       	std	Y+5, r24	; 0x05
     534:	9e 83       	std	Y+6, r25	; 0x06
			msg_struct->dir_received					= msg_node[i].arrival_dir;
     536:	86 89       	ldd	r24, Z+22	; 0x16
     538:	89 87       	std	Y+9, r24	; 0x09
			msg_struct->length							= msg_node[i].msg_length;
     53a:	f8 01       	movw	r30, r16
     53c:	87 89       	ldd	r24, Z+23	; 0x17
     53e:	8a 87       	std	Y+10, r24	; 0x0a
			num_waiting_msgs--;
     540:	80 91 c9 28 	lds	r24, 0x28C9
     544:	81 50       	subi	r24, 0x01	; 1
     546:	80 93 c9 28 	sts	0x28C9, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     54a:	bf be       	out	0x3f, r11	; 63
		}

		handle_msg(msg_struct);
     54c:	ce 01       	movw	r24, r28
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	0e 94 c3 2e 	call	0x5d86	; 0x5d86 <handle_msg>
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
		user_facing_messages_ovf=0;
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
     554:	80 91 c9 28 	lds	r24, 0x28C9
     558:	81 11       	cpse	r24, r1
     55a:	b3 cf       	rjmp	.-154    	; 0x4c2 <check_messages+0x48>
			num_waiting_msgs--;
		}

		handle_msg(msg_struct);
	}
}
     55c:	6b 96       	adiw	r28, 0x1b	; 27
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	de bf       	out	0x3e, r29	; 62
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	ff 90       	pop	r15
     56c:	ef 90       	pop	r14
     56e:	df 90       	pop	r13
     570:	cf 90       	pop	r12
     572:	bf 90       	pop	r11
     574:	08 95       	ret

00000576 <calculate_id_number>:

void calculate_id_number()
{
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	c0 54       	subi	r28, 0x40	; 64
     580:	d1 09       	sbc	r29, r1
     582:	cd bf       	out	0x3d, r28	; 61
     584:	de bf       	out	0x3e, r29	; 62
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     586:	82 e0       	ldi	r24, 0x02	; 2
     588:	80 93 ca 01 	sts	0x01CA, r24

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
     58c:	80 e4       	ldi	r24, 0x40	; 64
     58e:	ed e9       	ldi	r30, 0x9D	; 157
     590:	f0 e2       	ldi	r31, 0x20	; 32
     592:	de 01       	movw	r26, r28
     594:	11 96       	adiw	r26, 0x01	; 1
     596:	01 90       	ld	r0, Z+
     598:	0d 92       	st	X+, r0
     59a:	8a 95       	dec	r24
     59c:	e1 f7       	brne	.-8      	; 0x596 <calculate_id_number+0x20>
     59e:	ae 01       	movw	r20, r28
     5a0:	4f 5f       	subi	r20, 0xFF	; 255
     5a2:	5f 4f       	sbci	r21, 0xFF	; 255
     5a4:	be 01       	movw	r22, r28
     5a6:	6f 5b       	subi	r22, 0xBF	; 191
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
void calculate_id_number()
{
	if(INIT_DEBUG_MODE >= 1)	printf("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
     5ae:	fa 01       	movw	r30, r20
     5b0:	81 91       	ld	r24, Z+
     5b2:	91 91       	ld	r25, Z+
     5b4:	a1 91       	ld	r26, Z+
     5b6:	b1 91       	ld	r27, Z+
     5b8:	af 01       	movw	r20, r30
     5ba:	ab bf       	out	0x3b, r26	; 59
     5bc:	fc 01       	movw	r30, r24
     5be:	87 91       	elpm	r24, Z+
     5c0:	96 91       	elpm	r25, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     5c2:	28 27       	eor	r18, r24
     5c4:	82 2f       	mov	r24, r18
     5c6:	82 95       	swap	r24
     5c8:	82 27       	eor	r24, r18
     5ca:	08 2e       	mov	r0, r24
     5cc:	86 95       	lsr	r24
     5ce:	86 95       	lsr	r24
     5d0:	80 25       	eor	r24, r0
     5d2:	08 2e       	mov	r0, r24
     5d4:	86 95       	lsr	r24
     5d6:	80 25       	eor	r24, r0
     5d8:	87 70       	andi	r24, 0x07	; 7
     5da:	02 2e       	mov	r0, r18
     5dc:	23 2f       	mov	r18, r19
     5de:	86 95       	lsr	r24
     5e0:	07 94       	ror	r0
     5e2:	87 95       	ror	r24
     5e4:	30 2d       	mov	r19, r0
     5e6:	28 27       	eor	r18, r24
     5e8:	06 94       	lsr	r0
     5ea:	87 95       	ror	r24
     5ec:	30 25       	eor	r19, r0
     5ee:	28 27       	eor	r18, r24
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
     5f0:	46 17       	cp	r20, r22
     5f2:	57 07       	cpc	r21, r23
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <calculate_id_number+0x82>
     5f6:	db cf       	rjmp	.-74     	; 0x5ae <calculate_id_number+0x38>
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     5f8:	10 92 ca 01 	sts	0x01CA, r1

	droplet_ID = crc;
     5fc:	20 93 e8 27 	sts	0x27E8, r18
     600:	30 93 e9 27 	sts	0x27E9, r19
}
     604:	c0 5c       	subi	r28, 0xC0	; 192
     606:	df 4f       	sbci	r29, 0xFF	; 255
     608:	cd bf       	out	0x3d, r28	; 61
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <enable_interrupts>:

void enable_interrupts()
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
     612:	e0 ea       	ldi	r30, 0xA0	; 160
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	82 81       	ldd	r24, Z+2	; 0x02
     618:	81 60       	ori	r24, 0x01	; 1
     61a:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	82 60       	ori	r24, 0x02	; 2
     620:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
     622:	82 81       	ldd	r24, Z+2	; 0x02
     624:	84 60       	ori	r24, 0x04	; 4
     626:	82 83       	std	Z+2, r24	; 0x02
	sei();
     628:	78 94       	sei
     62a:	08 95       	ret

0000062c <startup_light_sequence>:
}

void startup_light_sequence()
{
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	84 e6       	ldi	r24, 0x64	; 100
     632:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     636:	84 e6       	ldi	r24, 0x64	; 100
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	64 e6       	ldi	r22, 0x64	; 100
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     648:	84 e6       	ldi	r24, 0x64	; 100
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     650:	44 e6       	ldi	r20, 0x64	; 100
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     65a:	84 e6       	ldi	r24, 0x64	; 100
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     662:	0e 94 c7 20 	call	0x418e	; 0x418e <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     666:	40 e0       	ldi	r20, 0x00	; 0
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	84 e6       	ldi	r24, 0x64	; 100
     66c:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     670:	84 e6       	ldi	r24, 0x64	; 100
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	64 e6       	ldi	r22, 0x64	; 100
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     682:	84 e6       	ldi	r24, 0x64	; 100
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     68a:	44 e6       	ldi	r20, 0x64	; 100
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     694:	84 e6       	ldi	r24, 0x64	; 100
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     69c:	0e 94 c7 20 	call	0x418e	; 0x418e <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     6a0:	40 e0       	ldi	r20, 0x00	; 0
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	84 e6       	ldi	r24, 0x64	; 100
     6a6:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     6aa:	84 e6       	ldi	r24, 0x64	; 100
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	64 e6       	ldi	r22, 0x64	; 100
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     6bc:	84 e6       	ldi	r24, 0x64	; 100
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     6c4:	44 e6       	ldi	r20, 0x64	; 100
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
     6ce:	84 e6       	ldi	r24, 0x64	; 100
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
     6d6:	0c 94 c7 20 	jmp	0x418e	; 0x418e <led_off>
     6da:	08 95       	ret

000006dc <init_all_systems>:

uint16_t droplet_ID = 0;

void init_all_systems()
{
	Config32MHzClock();
     6dc:	0e 94 42 24 	call	0x4884	; 0x4884 <Config32MHzClock>
	
	calculate_id_number();
     6e0:	4a df       	rcall	.-364    	; 0x576 <calculate_id_number>
	
	scheduler_init();			if(INIT_DEBUG_MODE) printf("SCHEDULER INIT\r\n"); //This will probably never print, since you need pc_com for printf to happen, but pc_com needs the scheduler.
     6e2:	0e 94 10 24 	call	0x4820	; 0x4820 <scheduler_init>
	pc_comm_init();				if(INIT_DEBUG_MODE) printf("PC COM INIT\r\n");
     6e6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <pc_comm_init>
	rgb_led_init();				if(INIT_DEBUG_MODE) printf("LED INIT\r\n");
     6ea:	0e 94 90 20 	call	0x4120	; 0x4120 <rgb_led_init>
	rgb_sensor_init();			if(INIT_DEBUG_MODE) printf("RGB SENSE INIT\r\n");
     6ee:	0e 94 27 23 	call	0x464e	; 0x464e <rgb_sensor_init>
	power_init();				if(INIT_DEBUG_MODE) printf("POWER INIT\r\n");
     6f2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <power_init>
	random_init();				if(INIT_DEBUG_MODE) printf("RAND INIT\r\n");
     6f6:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <random_init>
	i2c_init();					if(INIT_DEBUG_MODE) printf("I2C INIT\r\n");	
     6fa:	68 d0       	rcall	.+208    	; 0x7cc <i2c_init>
	ir_comm_init();				if(INIT_DEBUG_MODE) printf("IR COM INIT\r\n");
     6fc:	27 d3       	rcall	.+1614   	; 0xd4c <ir_comm_init>
	ir_sensor_init();			if(INIT_DEBUG_MODE) printf("IR SENSE INIT\r\n");
     6fe:	0e 94 50 10 	call	0x20a0	; 0x20a0 <ir_sensor_init>
	motor_init();				if(INIT_DEBUG_MODE) printf("MOTOR INIT\r\n");
     702:	0e 94 44 14 	call	0x2888	; 0x2888 <motor_init>
	range_algs_init();	if(INIT_DEBUG_MODE) printf("RANGE ALGORITHMS INIT\r\n");
     706:	0e 94 88 16 	call	0x2d10	; 0x2d10 <range_algs_init>

	enable_interrupts();
     70a:	83 df       	rcall	.-250    	; 0x612 <enable_interrupts>
	startup_light_sequence();
     70c:	8f cf       	rjmp	.-226    	; 0x62c <startup_light_sequence>
     70e:	08 95       	ret

00000710 <main>:

}

int main()
{
	init_all_systems();
     710:	e5 df       	rcall	.-54     	; 0x6dc <init_all_systems>
	init();
     712:	0e 94 46 2e 	call	0x5c8c	; 0x5c8c <init>
	while(1)
	{
		loop();
     716:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <loop>
		check_messages();
     71a:	af de       	rcall	.-674    	; 0x47a <check_messages>
     71c:	fc cf       	rjmp	.-8      	; 0x716 <main+0x6>

0000071e <droplet_reboot>:
}


void droplet_reboot()
{
	CPU_CCP=CCP_IOREG_gc;
     71e:	88 ed       	ldi	r24, 0xD8	; 216
     720:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
     722:	81 e0       	ldi	r24, 0x01	; 1
     724:	e8 e7       	ldi	r30, 0x78	; 120
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	81 83       	std	Z+1, r24	; 0x01
     72a:	08 95       	ret

0000072c <wait_for_nvm>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
     72c:	e0 ec       	ldi	r30, 0xC0	; 192
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	87 85       	ldd	r24, Z+15	; 0x0f
     732:	88 23       	and	r24, r24
     734:	ec f3       	brlt	.-6      	; 0x730 <wait_for_nvm+0x4>
}
     736:	08 95       	ret

00000738 <flush_buffer>:

void flush_buffer(void)
{
        wait_for_nvm();
     738:	f9 df       	rcall	.-14     	; 0x72c <wait_for_nvm>
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     73a:	e0 ec       	ldi	r30, 0xC0	; 192
     73c:	f1 e0       	ldi	r31, 0x01	; 1
     73e:	87 85       	ldd	r24, Z+15	; 0x0f
     740:	81 ff       	sbrs	r24, 1
     742:	0a c0       	rjmp	.+20     	; 0x758 <flush_buffer+0x20>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     744:	86 e3       	ldi	r24, 0x36	; 54
     746:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     748:	eb ec       	ldi	r30, 0xCB	; 203
     74a:	f1 e0       	ldi	r31, 0x01	; 1
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	88 ed       	ldi	r24, 0xD8	; 216
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	84 bf       	out	0x34, r24	; 52
     756:	20 83       	st	Z, r18
     758:	08 95       	ret

0000075a <EEPROM_read_byte>:
        }
}


uint8_t EEPROM_read_byte(uint16_t addr)
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	d8 2f       	mov	r29, r24
     760:	c9 2f       	mov	r28, r25
        wait_for_nvm();
     762:	e4 df       	rcall	.-56     	; 0x72c <wait_for_nvm>
        
        NVM.ADDR0 = addr & 0xFF;
     764:	e0 ec       	ldi	r30, 0xC0	; 192
     766:	f1 e0       	ldi	r31, 0x01	; 1
     768:	d0 83       	st	Z, r29
        NVM.ADDR1 = (addr >> 8) & 0x1F;
     76a:	cf 71       	andi	r28, 0x1F	; 31
     76c:	c1 83       	std	Z+1, r28	; 0x01
        NVM.ADDR2 = 0;
     76e:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
     770:	86 e0       	ldi	r24, 0x06	; 6
     772:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     774:	eb ec       	ldi	r30, 0xCB	; 203
     776:	f1 e0       	ldi	r31, 0x01	; 1
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	88 ed       	ldi	r24, 0xD8	; 216
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	84 bf       	out	0x34, r24	; 52
     782:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
     784:	e0 ec       	ldi	r30, 0xC0	; 192
     786:	f1 e0       	ldi	r31, 0x01	; 1
     788:	84 81       	ldd	r24, Z+4	; 0x04
}
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <EEPROM_write_byte>:


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	18 2f       	mov	r17, r24
     798:	d9 2f       	mov	r29, r25
     79a:	c6 2f       	mov	r28, r22
        flush_buffer();
     79c:	cd df       	rcall	.-102    	; 0x738 <flush_buffer>
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
     79e:	e0 ec       	ldi	r30, 0xC0	; 192
     7a0:	f1 e0       	ldi	r31, 0x01	; 1
     7a2:	83 e3       	ldi	r24, 0x33	; 51
     7a4:	82 87       	std	Z+10, r24	; 0x0a
        
        NVM.ADDR0 = addr & 0xFF;
     7a6:	10 83       	st	Z, r17
        NVM.ADDR1 = (addr >> 8) & 0x1F;
     7a8:	df 71       	andi	r29, 0x1F	; 31
     7aa:	d1 83       	std	Z+1, r29	; 0x01
        NVM.ADDR2 = 0;
     7ac:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.DATA0 = byte;
     7ae:	c4 83       	std	Z+4, r28	; 0x04
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     7b0:	85 e3       	ldi	r24, 0x35	; 53
     7b2:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     7b4:	eb ec       	ldi	r30, 0xCB	; 203
     7b6:	f1 e0       	ldi	r31, 0x01	; 1
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	88 ed       	ldi	r24, 0xD8	; 216
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	84 bf       	out	0x34, r24	; 52
     7c2:	20 83       	st	Z, r18
        
        NVM.DATA0 = byte;
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	08 95       	ret

000007cc <i2c_init>:
#include "i2c.h"

void i2c_init()
{
	count=0;
     7cc:	10 92 ef 28 	sts	0x28EF, r1
	thePower=0;
     7d0:	10 92 ec 27 	sts	0x27EC, r1
     7d4:	10 92 ed 27 	sts	0x27ED, r1
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     7d8:	83 e0       	ldi	r24, 0x03	; 3
     7da:	e0 e8       	ldi	r30, 0x80	; 128
     7dc:	f6 e0       	ldi	r31, 0x06	; 6
     7de:	81 83       	std	Z+1, r24	; 0x01
	TWIE_MASTER_CTRLA = TWI_MASTER_INTLVL_MED_gc | TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;
     7e0:	88 eb       	ldi	r24, 0xB8	; 184
     7e2:	80 93 a1 04 	sts	0x04A1, r24
	TWIE_MASTER_BAUD = TWI_BAUD(F_CPU, 400000);
     7e6:	83 e2       	ldi	r24, 0x23	; 35
     7e8:	80 93 a5 04 	sts	0x04A5, r24
	TWIE_MASTER_STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 a4 04 	sts	0x04A4, r24
     7f2:	08 95       	ret

000007f4 <__vector_46>:
}

ISR(TWIE_TWIM_vect)
{
     7f4:	1f 92       	push	r1
     7f6:	0f 92       	push	r0
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	0f 92       	push	r0
     7fc:	11 24       	eor	r1, r1
     7fe:	0b b6       	in	r0, 0x3b	; 59
     800:	0f 92       	push	r0
     802:	5f 93       	push	r21
     804:	6f 93       	push	r22
     806:	7f 93       	push	r23
     808:	8f 93       	push	r24
     80a:	9f 93       	push	r25
     80c:	af 93       	push	r26
     80e:	bf 93       	push	r27
     810:	ef 93       	push	r30
     812:	ff 93       	push	r31
	switch(count)
     814:	80 91 ef 28 	lds	r24, 0x28EF
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	87 30       	cpi	r24, 0x07	; 7
     81c:	91 05       	cpc	r25, r1
     81e:	58 f5       	brcc	.+86     	; 0x876 <__vector_46+0x82>
     820:	fc 01       	movw	r30, r24
     822:	e2 50       	subi	r30, 0x02	; 2
     824:	ff 4f       	sbci	r31, 0xFF	; 255
     826:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__tablejump2__>
	{
		case 0:	TWIE_MASTER_DATA = (0x00 | ((uint8_t)((thePower>>8)&1))); break;
     82a:	80 91 ed 27 	lds	r24, 0x27ED
     82e:	81 70       	andi	r24, 0x01	; 1
     830:	80 93 a7 04 	sts	0x04A7, r24
     834:	20 c0       	rjmp	.+64     	; 0x876 <__vector_46+0x82>
		case 1: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;
     836:	80 91 ec 27 	lds	r24, 0x27EC
     83a:	80 93 a7 04 	sts	0x04A7, r24
     83e:	1b c0       	rjmp	.+54     	; 0x876 <__vector_46+0x82>
		case 2:	TWIE_MASTER_DATA = (0x10 | ((uint8_t)((thePower>>8)&1))); break;
     840:	80 91 ed 27 	lds	r24, 0x27ED
     844:	81 70       	andi	r24, 0x01	; 1
     846:	80 61       	ori	r24, 0x10	; 16
     848:	80 93 a7 04 	sts	0x04A7, r24
     84c:	14 c0       	rjmp	.+40     	; 0x876 <__vector_46+0x82>
		case 3: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;	
     84e:	80 91 ec 27 	lds	r24, 0x27EC
     852:	80 93 a7 04 	sts	0x04A7, r24
     856:	0f c0       	rjmp	.+30     	; 0x876 <__vector_46+0x82>
		case 4:	TWIE_MASTER_DATA = (0x60 | ((uint8_t)((thePower>>8)&1))); break;
     858:	80 91 ed 27 	lds	r24, 0x27ED
     85c:	81 70       	andi	r24, 0x01	; 1
     85e:	80 66       	ori	r24, 0x60	; 96
     860:	80 93 a7 04 	sts	0x04A7, r24
     864:	08 c0       	rjmp	.+16     	; 0x876 <__vector_46+0x82>
		case 5: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;		
     866:	80 91 ec 27 	lds	r24, 0x27EC
     86a:	80 93 a7 04 	sts	0x04A7, r24
     86e:	03 c0       	rjmp	.+6      	; 0x876 <__vector_46+0x82>
		case 6: TWIE_MASTER_CTRLC = TWI_MASTER_CMD_STOP_gc;
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	80 93 a3 04 	sts	0x04A3, r24
	}
	count = (count+1)%7;
     876:	80 91 ef 28 	lds	r24, 0x28EF
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	67 e0       	ldi	r22, 0x07	; 7
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
     886:	80 93 ef 28 	sts	0x28EF, r24
}
     88a:	ff 91       	pop	r31
     88c:	ef 91       	pop	r30
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	0f 90       	pop	r0
     89e:	0b be       	out	0x3b, r0	; 59
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	0f 90       	pop	r0
     8a6:	1f 90       	pop	r1
     8a8:	18 95       	reti

000008aa <set_all_ir_powers>:

void set_all_ir_powers(uint16_t power)
{
	thePower=power;
     8aa:	80 93 ec 27 	sts	0x27EC, r24
     8ae:	90 93 ed 27 	sts	0x27ED, r25
	TWIE_MASTER_ADDR = 0x58;
     8b2:	88 e5       	ldi	r24, 0x58	; 88
     8b4:	80 93 a6 04 	sts	0x04A6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b8:	8f e7       	ldi	r24, 0x7F	; 127
     8ba:	95 e2       	ldi	r25, 0x25	; 37
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	f1 f7       	brne	.-4      	; 0x8bc <set_all_ir_powers+0x12>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <set_all_ir_powers+0x18>
     8c2:	00 00       	nop
	delay_us(1200);
	TWIE_MASTER_ADDR = 0x5c;
     8c4:	8c e5       	ldi	r24, 0x5C	; 92
     8c6:	80 93 a6 04 	sts	0x04A6, r24
     8ca:	8f e7       	ldi	r24, 0x7F	; 127
     8cc:	95 e2       	ldi	r25, 0x25	; 37
     8ce:	01 97       	sbiw	r24, 0x01	; 1
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <set_all_ir_powers+0x24>
     8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <set_all_ir_powers+0x2a>
     8d4:	00 00       	nop
     8d6:	08 95       	ret

000008d8 <perform_ir_upkeep>:
	channel[dir]->CTRLB |= USART_RXEN_bm;	// this enables receive on the USART
}

void ir_reset_rx(uint8_t dir)
{
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
     8d8:	4f 92       	push	r4
     8da:	5f 92       	push	r5
     8dc:	6f 92       	push	r6
     8de:	7f 92       	push	r7
     8e0:	8f 92       	push	r8
     8e2:	9f 92       	push	r9
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	2c 97       	sbiw	r28, 0x0c	; 12
     8fe:	cd bf       	out	0x3d, r28	; 61
     900:	de bf       	out	0x3e, r29	; 62
     902:	fe 01       	movw	r30, r28
     904:	31 96       	adiw	r30, 0x01	; 1
     906:	8c e0       	ldi	r24, 0x0C	; 12
     908:	df 01       	movw	r26, r30
     90a:	1d 92       	st	X+, r1
     90c:	8a 95       	dec	r24
     90e:	e9 f7       	brne	.-6      	; 0x90a <perform_ir_upkeep+0x32>
     910:	0f 2e       	mov	r0, r31
     912:	f6 e0       	ldi	r31, 0x06	; 6
     914:	af 2e       	mov	r10, r31
     916:	f0 e2       	ldi	r31, 0x20	; 32
     918:	bf 2e       	mov	r11, r31
     91a:	f0 2d       	mov	r31, r0
     91c:	0f 2e       	mov	r0, r31
     91e:	fc e6       	ldi	r31, 0x6C	; 108
     920:	8f 2e       	mov	r8, r31
     922:	f9 e2       	ldi	r31, 0x29	; 41
     924:	9f 2e       	mov	r9, r31
     926:	f0 2d       	mov	r31, r0
     928:	6f 01       	movw	r12, r30
     92a:	55 24       	eor	r5, r5
     92c:	5a 94       	dec	r5
     92e:	e1 2c       	mov	r14, r1
     930:	f1 2c       	mov	r15, r1
     932:	77 24       	eor	r7, r7
     934:	73 94       	inc	r7
     936:	4f b6       	in	r4, 0x3f	; 63
     938:	f8 94       	cli
     93a:	87 01       	movw	r16, r14
     93c:	f7 01       	movw	r30, r14
     93e:	ee 0f       	add	r30, r30
     940:	ff 1f       	adc	r31, r31
     942:	e2 95       	swap	r30
     944:	f2 95       	swap	r31
     946:	f0 7f       	andi	r31, 0xF0	; 240
     948:	fe 27       	eor	r31, r30
     94a:	e0 7f       	andi	r30, 0xF0	; 240
     94c:	fe 27       	eor	r31, r30
     94e:	e8 59       	subi	r30, 0x98	; 152
     950:	f6 4d       	sbci	r31, 0xD6	; 214
     952:	87 8d       	ldd	r24, Z+31	; 0x1f
     954:	81 ff       	sbrs	r24, 1
     956:	80 c1       	rjmp	.+768    	; 0xc58 <perform_ir_upkeep+0x380>
     958:	6e 2c       	mov	r6, r14
     95a:	55 2d       	mov	r21, r5
     95c:	55 20       	and	r5, r5
     95e:	0c f4       	brge	.+2      	; 0x962 <perform_ir_upkeep+0x8a>
     960:	97 c1       	rjmp	.+814    	; 0xc90 <perform_ir_upkeep+0x3b8>
     962:	40 e0       	ldi	r20, 0x00	; 0
     964:	f7 01       	movw	r30, r14
     966:	ee 0f       	add	r30, r30
     968:	ff 1f       	adc	r31, r31
     96a:	e2 95       	swap	r30
     96c:	f2 95       	swap	r31
     96e:	f0 7f       	andi	r31, 0xF0	; 240
     970:	fe 27       	eor	r31, r30
     972:	e0 7f       	andi	r30, 0xF0	; 240
     974:	fe 27       	eor	r31, r30
     976:	e4 58       	subi	r30, 0x84	; 132
     978:	f6 4d       	sbci	r31, 0xD6	; 214
     97a:	80 81       	ld	r24, Z
     97c:	91 81       	ldd	r25, Z+1	; 0x01
     97e:	a5 2f       	mov	r26, r21
     980:	aa 0f       	add	r26, r26
     982:	bb 0b       	sbc	r27, r27
     984:	21 e0       	ldi	r18, 0x01	; 1
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	2c 0f       	add	r18, r28
     98a:	3d 1f       	adc	r19, r29
     98c:	a2 0f       	add	r26, r18
     98e:	b3 1f       	adc	r27, r19
     990:	2d 91       	ld	r18, X+
     992:	3c 91       	ld	r19, X
     994:	28 17       	cp	r18, r24
     996:	39 07       	cpc	r19, r25
     998:	09 f4       	brne	.+2      	; 0x99c <perform_ir_upkeep+0xc4>
     99a:	47 2d       	mov	r20, r7
     99c:	51 50       	subi	r21, 0x01	; 1
     99e:	6a f7       	brpl	.-38     	; 0x97a <perform_ir_upkeep+0xa2>
     9a0:	f8 01       	movw	r30, r16
     9a2:	ee 0f       	add	r30, r30
     9a4:	ff 1f       	adc	r31, r31
     9a6:	e2 95       	swap	r30
     9a8:	f2 95       	swap	r31
     9aa:	f0 7f       	andi	r31, 0xF0	; 240
     9ac:	fe 27       	eor	r31, r30
     9ae:	e0 7f       	andi	r30, 0xF0	; 240
     9b0:	fe 27       	eor	r31, r30
     9b2:	e8 59       	subi	r30, 0x98	; 152
     9b4:	f6 4d       	sbci	r31, 0xD6	; 214
     9b6:	84 89       	ldd	r24, Z+20	; 0x14
     9b8:	95 89       	ldd	r25, Z+21	; 0x15
     9ba:	d6 01       	movw	r26, r12
     9bc:	8d 93       	st	X+, r24
     9be:	9c 93       	st	X, r25
     9c0:	44 23       	and	r20, r20
     9c2:	f1 f0       	breq	.+60     	; 0xa00 <perform_ir_upkeep+0x128>
     9c4:	f8 01       	movw	r30, r16
     9c6:	ee 0f       	add	r30, r30
     9c8:	ff 1f       	adc	r31, r31
     9ca:	e2 95       	swap	r30
     9cc:	f2 95       	swap	r31
     9ce:	f0 7f       	andi	r31, 0xF0	; 240
     9d0:	fe 27       	eor	r31, r30
     9d2:	e0 7f       	andi	r30, 0xF0	; 240
     9d4:	fe 27       	eor	r31, r30
     9d6:	e8 59       	subi	r30, 0x98	; 152
     9d8:	f6 4d       	sbci	r31, 0xD6	; 214
     9da:	14 8a       	std	Z+20, r1	; 0x14
     9dc:	15 8a       	std	Z+21, r1	; 0x15
     9de:	16 8a       	std	Z+22, r1	; 0x16
     9e0:	17 8a       	std	Z+23, r1	; 0x17
     9e2:	10 8e       	std	Z+24, r1	; 0x18
     9e4:	11 8e       	std	Z+25, r1	; 0x19
     9e6:	12 8e       	std	Z+26, r1	; 0x1a
     9e8:	13 8e       	std	Z+27, r1	; 0x1b
     9ea:	14 8e       	std	Z+28, r1	; 0x1c
     9ec:	15 8e       	std	Z+29, r1	; 0x1d
     9ee:	16 8e       	std	Z+30, r1	; 0x1e
     9f0:	17 8e       	std	Z+31, r1	; 0x1f
     9f2:	d5 01       	movw	r26, r10
     9f4:	ed 91       	ld	r30, X+
     9f6:	fc 91       	ld	r31, X
     9f8:	84 81       	ldd	r24, Z+4	; 0x04
     9fa:	80 61       	ori	r24, 0x10	; 16
     9fc:	84 83       	std	Z+4, r24	; 0x04
     9fe:	2c c1       	rjmp	.+600    	; 0xc58 <perform_ir_upkeep+0x380>
     a00:	f8 01       	movw	r30, r16
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	e2 95       	swap	r30
     a08:	f2 95       	swap	r31
     a0a:	f0 7f       	andi	r31, 0xF0	; 240
     a0c:	fe 27       	eor	r31, r30
     a0e:	e0 7f       	andi	r30, 0xF0	; 240
     a10:	fe 27       	eor	r31, r30
     a12:	e8 59       	subi	r30, 0x98	; 152
     a14:	f6 4d       	sbci	r31, 0xD6	; 214
     a16:	87 8d       	ldd	r24, Z+31	; 0x1f
     a18:	83 ff       	sbrs	r24, 3
     a1a:	62 c0       	rjmp	.+196    	; 0xae0 <perform_ir_upkeep+0x208>
     a1c:	8f 01       	movw	r16, r30
     a1e:	46 8d       	ldd	r20, Z+30	; 0x1e
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	b4 01       	movw	r22, r8
     a24:	82 e6       	ldi	r24, 0x62	; 98
     a26:	9a e2       	ldi	r25, 0x2A	; 42
     a28:	0e 94 73 38 	call	0x70e6	; 0x70e6 <memcpy>
     a2c:	d8 01       	movw	r26, r16
     a2e:	5e 96       	adiw	r26, 0x1e	; 30
     a30:	ec 91       	ld	r30, X
     a32:	5e 97       	sbiw	r26, 0x1e	; 30
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	ee 59       	subi	r30, 0x9E	; 158
     a38:	f5 4d       	sbci	r31, 0xD5	; 213
     a3a:	10 82       	st	Z, r1
     a3c:	5e 96       	adiw	r26, 0x1e	; 30
     a3e:	8c 91       	ld	r24, X
     a40:	5e 97       	sbiw	r26, 0x1e	; 30
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	80 93 5f 2a 	sts	0x2A5F, r24
     a48:	90 93 60 2a 	sts	0x2A60, r25
     a4c:	8d 91       	ld	r24, X+
     a4e:	9d 91       	ld	r25, X+
     a50:	0d 90       	ld	r0, X+
     a52:	bc 91       	ld	r27, X
     a54:	a0 2d       	mov	r26, r0
     a56:	80 93 59 2a 	sts	0x2A59, r24
     a5a:	90 93 5a 2a 	sts	0x2A5A, r25
     a5e:	a0 93 5b 2a 	sts	0x2A5B, r26
     a62:	b0 93 5c 2a 	sts	0x2A5C, r27
     a66:	f8 01       	movw	r30, r16
     a68:	86 89       	ldd	r24, Z+22	; 0x16
     a6a:	97 89       	ldd	r25, Z+23	; 0x17
     a6c:	80 93 c7 28 	sts	0x28C7, r24
     a70:	90 93 c8 28 	sts	0x28C8, r25
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	f6 15       	cp	r31, r6
     a78:	40 f1       	brcs	.+80     	; 0xaca <perform_ir_upkeep+0x1f2>
     a7a:	86 2d       	mov	r24, r6
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	fc 01       	movw	r30, r24
     a80:	ee 0f       	add	r30, r30
     a82:	ff 1f       	adc	r31, r31
     a84:	e2 95       	swap	r30
     a86:	f2 95       	swap	r31
     a88:	f0 7f       	andi	r31, 0xF0	; 240
     a8a:	fe 27       	eor	r31, r30
     a8c:	e0 7f       	andi	r30, 0xF0	; 240
     a8e:	fe 27       	eor	r31, r30
     a90:	e8 59       	subi	r30, 0x98	; 152
     a92:	f6 4d       	sbci	r31, 0xD6	; 214
     a94:	14 8a       	std	Z+20, r1	; 0x14
     a96:	15 8a       	std	Z+21, r1	; 0x15
     a98:	16 8a       	std	Z+22, r1	; 0x16
     a9a:	17 8a       	std	Z+23, r1	; 0x17
     a9c:	10 8e       	std	Z+24, r1	; 0x18
     a9e:	11 8e       	std	Z+25, r1	; 0x19
     aa0:	12 8e       	std	Z+26, r1	; 0x1a
     aa2:	13 8e       	std	Z+27, r1	; 0x1b
     aa4:	14 8e       	std	Z+28, r1	; 0x1c
     aa6:	15 8e       	std	Z+29, r1	; 0x1d
     aa8:	16 8e       	std	Z+30, r1	; 0x1e
     aaa:	17 8e       	std	Z+31, r1	; 0x1f
     aac:	fc 01       	movw	r30, r24
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	ea 5f       	subi	r30, 0xFA	; 250
     ab4:	ff 4d       	sbci	r31, 0xDF	; 223
     ab6:	01 90       	ld	r0, Z+
     ab8:	f0 81       	ld	r31, Z
     aba:	e0 2d       	mov	r30, r0
     abc:	84 81       	ldd	r24, Z+4	; 0x04
     abe:	80 61       	ori	r24, 0x10	; 16
     ac0:	84 83       	std	Z+4, r24	; 0x04
     ac2:	63 94       	inc	r6
     ac4:	26 e0       	ldi	r18, 0x06	; 6
     ac6:	62 12       	cpse	r6, r18
     ac8:	d8 cf       	rjmp	.-80     	; 0xa7a <perform_ir_upkeep+0x1a2>
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	4d e6       	ldi	r20, 0x6D	; 109
     ad0:	56 e0       	ldi	r21, 0x06	; 6
     ad2:	65 e0       	ldi	r22, 0x05	; 5
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0e 94 8f 24 	call	0x491e	; 0x491e <schedule_task>
     ade:	bc c0       	rjmp	.+376    	; 0xc58 <perform_ir_upkeep+0x380>
     ae0:	80 91 c9 28 	lds	r24, 0x28C9
     ae4:	86 30       	cpi	r24, 0x06	; 6
     ae6:	20 f0       	brcs	.+8      	; 0xaf0 <perform_ir_upkeep+0x218>
     ae8:	70 92 ee 27 	sts	0x27EE, r7
     aec:	10 92 c9 28 	sts	0x28C9, r1
     af0:	00 0f       	add	r16, r16
     af2:	11 1f       	adc	r17, r17
     af4:	02 95       	swap	r16
     af6:	12 95       	swap	r17
     af8:	10 7f       	andi	r17, 0xF0	; 240
     afa:	10 27       	eor	r17, r16
     afc:	00 7f       	andi	r16, 0xF0	; 240
     afe:	10 27       	eor	r17, r16
     b00:	08 59       	subi	r16, 0x98	; 152
     b02:	16 4d       	sbci	r17, 0xD6	; 214
     b04:	d8 01       	movw	r26, r16
     b06:	5e 96       	adiw	r26, 0x1e	; 30
     b08:	4c 91       	ld	r20, X
     b0a:	80 91 c9 28 	lds	r24, 0x28C9
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	9c 01       	movw	r18, r24
     b12:	22 0f       	add	r18, r18
     b14:	33 1f       	adc	r19, r19
     b16:	82 0f       	add	r24, r18
     b18:	93 1f       	adc	r25, r19
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	88 0f       	add	r24, r24
     b20:	99 1f       	adc	r25, r25
     b22:	88 0f       	add	r24, r24
     b24:	99 1f       	adc	r25, r25
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	b4 01       	movw	r22, r8
     b2a:	85 5c       	subi	r24, 0xC5	; 197
     b2c:	97 4d       	sbci	r25, 0xD7	; 215
     b2e:	0e 94 73 38 	call	0x70e6	; 0x70e6 <memcpy>
     b32:	80 91 c9 28 	lds	r24, 0x28C9
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	f8 01       	movw	r30, r16
     b3a:	26 8d       	ldd	r18, Z+30	; 0x1e
     b3c:	fc 01       	movw	r30, r24
     b3e:	ee 0f       	add	r30, r30
     b40:	ff 1f       	adc	r31, r31
     b42:	8e 0f       	add	r24, r30
     b44:	9f 1f       	adc	r25, r31
     b46:	fc 01       	movw	r30, r24
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	ee 0f       	add	r30, r30
     b52:	ff 1f       	adc	r31, r31
     b54:	eb 5c       	subi	r30, 0xCB	; 203
     b56:	f7 4d       	sbci	r31, 0xD7	; 215
     b58:	e2 0f       	add	r30, r18
     b5a:	f1 1d       	adc	r31, r1
     b5c:	16 82       	std	Z+6, r1	; 0x06
     b5e:	80 91 c9 28 	lds	r24, 0x28C9
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	d8 01       	movw	r26, r16
     b66:	4d 91       	ld	r20, X+
     b68:	5d 91       	ld	r21, X+
     b6a:	6d 91       	ld	r22, X+
     b6c:	7c 91       	ld	r23, X
     b6e:	13 97       	sbiw	r26, 0x03	; 3
     b70:	9c 01       	movw	r18, r24
     b72:	22 0f       	add	r18, r18
     b74:	33 1f       	adc	r19, r19
     b76:	82 0f       	add	r24, r18
     b78:	93 1f       	adc	r25, r19
     b7a:	fc 01       	movw	r30, r24
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	ee 0f       	add	r30, r30
     b82:	ff 1f       	adc	r31, r31
     b84:	ee 0f       	add	r30, r30
     b86:	ff 1f       	adc	r31, r31
     b88:	eb 5c       	subi	r30, 0xCB	; 203
     b8a:	f7 4d       	sbci	r31, 0xD7	; 215
     b8c:	40 83       	st	Z, r20
     b8e:	51 83       	std	Z+1, r21	; 0x01
     b90:	62 83       	std	Z+2, r22	; 0x02
     b92:	73 83       	std	Z+3, r23	; 0x03
     b94:	80 91 c9 28 	lds	r24, 0x28C9
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	fc 01       	movw	r30, r24
     b9c:	ee 0f       	add	r30, r30
     b9e:	ff 1f       	adc	r31, r31
     ba0:	8e 0f       	add	r24, r30
     ba2:	9f 1f       	adc	r25, r31
     ba4:	fc 01       	movw	r30, r24
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	ee 0f       	add	r30, r30
     bac:	ff 1f       	adc	r31, r31
     bae:	ee 0f       	add	r30, r30
     bb0:	ff 1f       	adc	r31, r31
     bb2:	eb 5c       	subi	r30, 0xCB	; 203
     bb4:	f7 4d       	sbci	r31, 0xD7	; 215
     bb6:	66 8a       	std	Z+22, r6	; 0x16
     bb8:	80 91 c9 28 	lds	r24, 0x28C9
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	56 96       	adiw	r26, 0x16	; 22
     bc0:	2d 91       	ld	r18, X+
     bc2:	3c 91       	ld	r19, X
     bc4:	57 97       	sbiw	r26, 0x17	; 23
     bc6:	fc 01       	movw	r30, r24
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	8e 0f       	add	r24, r30
     bce:	9f 1f       	adc	r25, r31
     bd0:	fc 01       	movw	r30, r24
     bd2:	ee 0f       	add	r30, r30
     bd4:	ff 1f       	adc	r31, r31
     bd6:	ee 0f       	add	r30, r30
     bd8:	ff 1f       	adc	r31, r31
     bda:	ee 0f       	add	r30, r30
     bdc:	ff 1f       	adc	r31, r31
     bde:	eb 5c       	subi	r30, 0xCB	; 203
     be0:	f7 4d       	sbci	r31, 0xD7	; 215
     be2:	24 83       	std	Z+4, r18	; 0x04
     be4:	35 83       	std	Z+5, r19	; 0x05
     be6:	80 91 c9 28 	lds	r24, 0x28C9
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	5e 96       	adiw	r26, 0x1e	; 30
     bee:	2c 91       	ld	r18, X
     bf0:	5e 97       	sbiw	r26, 0x1e	; 30
     bf2:	fc 01       	movw	r30, r24
     bf4:	ee 0f       	add	r30, r30
     bf6:	ff 1f       	adc	r31, r31
     bf8:	8e 0f       	add	r24, r30
     bfa:	9f 1f       	adc	r25, r31
     bfc:	fc 01       	movw	r30, r24
     bfe:	ee 0f       	add	r30, r30
     c00:	ff 1f       	adc	r31, r31
     c02:	ee 0f       	add	r30, r30
     c04:	ff 1f       	adc	r31, r31
     c06:	ee 0f       	add	r30, r30
     c08:	ff 1f       	adc	r31, r31
     c0a:	eb 5c       	subi	r30, 0xCB	; 203
     c0c:	f7 4d       	sbci	r31, 0xD7	; 215
     c0e:	27 8b       	std	Z+23, r18	; 0x17
     c10:	80 91 c9 28 	lds	r24, 0x28C9
     c14:	8f 5f       	subi	r24, 0xFF	; 255
     c16:	80 93 c9 28 	sts	0x28C9, r24
     c1a:	54 96       	adiw	r26, 0x14	; 20
     c1c:	1d 92       	st	X+, r1
     c1e:	1c 92       	st	X, r1
     c20:	55 97       	sbiw	r26, 0x15	; 21
     c22:	56 96       	adiw	r26, 0x16	; 22
     c24:	1d 92       	st	X+, r1
     c26:	1c 92       	st	X, r1
     c28:	57 97       	sbiw	r26, 0x17	; 23
     c2a:	58 96       	adiw	r26, 0x18	; 24
     c2c:	1d 92       	st	X+, r1
     c2e:	1c 92       	st	X, r1
     c30:	59 97       	sbiw	r26, 0x19	; 25
     c32:	5a 96       	adiw	r26, 0x1a	; 26
     c34:	1d 92       	st	X+, r1
     c36:	1c 92       	st	X, r1
     c38:	5b 97       	sbiw	r26, 0x1b	; 27
     c3a:	5c 96       	adiw	r26, 0x1c	; 28
     c3c:	1d 92       	st	X+, r1
     c3e:	1c 92       	st	X, r1
     c40:	5d 97       	sbiw	r26, 0x1d	; 29
     c42:	5e 96       	adiw	r26, 0x1e	; 30
     c44:	1c 92       	st	X, r1
     c46:	5e 97       	sbiw	r26, 0x1e	; 30
     c48:	5f 96       	adiw	r26, 0x1f	; 31
     c4a:	1c 92       	st	X, r1
     c4c:	d5 01       	movw	r26, r10
     c4e:	ed 91       	ld	r30, X+
     c50:	fc 91       	ld	r31, X
     c52:	84 81       	ldd	r24, Z+4	; 0x04
     c54:	80 61       	ori	r24, 0x10	; 16
     c56:	84 83       	std	Z+4, r24	; 0x04
     c58:	4f be       	out	0x3f, r4	; 63
     c5a:	bf ef       	ldi	r27, 0xFF	; 255
     c5c:	eb 1a       	sub	r14, r27
     c5e:	fb 0a       	sbc	r15, r27
     c60:	e2 e0       	ldi	r30, 0x02	; 2
     c62:	ae 0e       	add	r10, r30
     c64:	b1 1c       	adc	r11, r1
     c66:	f0 e2       	ldi	r31, 0x20	; 32
     c68:	8f 0e       	add	r8, r31
     c6a:	91 1c       	adc	r9, r1
     c6c:	22 e0       	ldi	r18, 0x02	; 2
     c6e:	c2 0e       	add	r12, r18
     c70:	d1 1c       	adc	r13, r1
     c72:	53 94       	inc	r5
     c74:	35 e0       	ldi	r19, 0x05	; 5
     c76:	53 12       	cpse	r5, r19
     c78:	5e ce       	rjmp	.-836    	; 0x936 <perform_ir_upkeep+0x5e>
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	4c e6       	ldi	r20, 0x6C	; 108
     c80:	54 e0       	ldi	r21, 0x04	; 4
     c82:	6e e3       	ldi	r22, 0x3E	; 62
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 8f 24 	call	0x491e	; 0x491e <schedule_task>
     c8e:	11 c0       	rjmp	.+34     	; 0xcb2 <perform_ir_upkeep+0x3da>
     c90:	f7 01       	movw	r30, r14
     c92:	ee 0f       	add	r30, r30
     c94:	ff 1f       	adc	r31, r31
     c96:	e2 95       	swap	r30
     c98:	f2 95       	swap	r31
     c9a:	f0 7f       	andi	r31, 0xF0	; 240
     c9c:	fe 27       	eor	r31, r30
     c9e:	e0 7f       	andi	r30, 0xF0	; 240
     ca0:	fe 27       	eor	r31, r30
     ca2:	e8 59       	subi	r30, 0x98	; 152
     ca4:	f6 4d       	sbci	r31, 0xD6	; 214
     ca6:	84 89       	ldd	r24, Z+20	; 0x14
     ca8:	95 89       	ldd	r25, Z+21	; 0x15
     caa:	d6 01       	movw	r26, r12
     cac:	8d 93       	st	X+, r24
     cae:	9c 93       	st	X, r25
     cb0:	a7 ce       	rjmp	.-690    	; 0xa00 <perform_ir_upkeep+0x128>
     cb2:	2c 96       	adiw	r28, 0x0c	; 12
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	1f 91       	pop	r17
     cbe:	0f 91       	pop	r16
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	9f 90       	pop	r9
     cce:	8f 90       	pop	r8
     cd0:	7f 90       	pop	r7
     cd2:	6f 90       	pop	r6
     cd4:	5f 90       	pop	r5
     cd6:	4f 90       	pop	r4
     cd8:	08 95       	ret

00000cda <handle_cmd_wrapper>:
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	0f 93       	push	r16
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	ed b6       	in	r14, 0x3d	; 61
     cee:	fe b6       	in	r15, 0x3e	; 62
     cf0:	80 91 5f 2a 	lds	r24, 0x2A5F
     cf4:	90 91 60 2a 	lds	r25, 0x2A60
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	2d b7       	in	r18, 0x3d	; 61
     cfc:	3e b7       	in	r19, 0x3e	; 62
     cfe:	28 1b       	sub	r18, r24
     d00:	39 0b       	sbc	r19, r25
     d02:	2d bf       	out	0x3d, r18	; 61
     d04:	3e bf       	out	0x3e, r19	; 62
     d06:	0d b7       	in	r16, 0x3d	; 61
     d08:	1e b7       	in	r17, 0x3e	; 62
     d0a:	0f 5f       	subi	r16, 0xFF	; 255
     d0c:	1f 4f       	sbci	r17, 0xFF	; 255
     d0e:	df b6       	in	r13, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	40 91 5f 2a 	lds	r20, 0x2A5F
     d16:	50 91 60 2a 	lds	r21, 0x2A60
     d1a:	4f 5f       	subi	r20, 0xFF	; 255
     d1c:	5f 4f       	sbci	r21, 0xFF	; 255
     d1e:	62 e6       	ldi	r22, 0x62	; 98
     d20:	7a e2       	ldi	r23, 0x2A	; 42
     d22:	c8 01       	movw	r24, r16
     d24:	0e 94 73 38 	call	0x70e6	; 0x70e6 <memcpy>
     d28:	60 91 5f 2a 	lds	r22, 0x2A5F
     d2c:	70 91 60 2a 	lds	r23, 0x2A60
     d30:	df be       	out	0x3f, r13	; 63
     d32:	c8 01       	movw	r24, r16
     d34:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <handle_serial_command>
     d38:	ed be       	out	0x3d, r14	; 61
     d3a:	fe be       	out	0x3e, r15	; 62
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	1f 91       	pop	r17
     d42:	0f 91       	pop	r16
     d44:	ff 90       	pop	r15
     d46:	ef 90       	pop	r14
     d48:	df 90       	pop	r13
     d4a:	08 95       	ret

00000d4c <ir_comm_init>:
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	a0 ea       	ldi	r26, 0xA0	; 160
     d52:	b6 e0       	ldi	r27, 0x06	; 6
     d54:	83 ef       	ldi	r24, 0xF3	; 243
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	8c 93       	st	X, r24
     d5a:	11 97       	sbiw	r26, 0x01	; 1
     d5c:	e0 e0       	ldi	r30, 0x00	; 0
     d5e:	fb e0       	ldi	r31, 0x0B	; 11
     d60:	82 e0       	ldi	r24, 0x02	; 2
     d62:	84 83       	std	Z+4, r24	; 0x04
     d64:	80 81       	ld	r24, Z
     d66:	83 60       	ori	r24, 0x03	; 3
     d68:	80 83       	st	Z, r24
     d6a:	83 ed       	ldi	r24, 0xD3	; 211
     d6c:	87 a3       	std	Z+39, r24	; 0x27
     d6e:	86 a3       	std	Z+38, r24	; 0x26
     d70:	89 e6       	ldi	r24, 0x69	; 105
     d72:	81 a7       	std	Z+41, r24	; 0x29
     d74:	83 a7       	std	Z+43, r24	; 0x2b
     d76:	85 a7       	std	Z+45, r24	; 0x2d
     d78:	87 a7       	std	Z+47, r24	; 0x2f
     d7a:	80 a7       	std	Z+40, r24	; 0x28
     d7c:	82 a7       	std	Z+42, r24	; 0x2a
     d7e:	c0 e4       	ldi	r28, 0x40	; 64
     d80:	d6 e0       	ldi	r29, 0x06	; 6
     d82:	34 e4       	ldi	r19, 0x44	; 68
     d84:	3a 83       	std	Y+2, r19	; 0x02
     d86:	80 e6       	ldi	r24, 0x60	; 96
     d88:	96 e0       	ldi	r25, 0x06	; 6
     d8a:	24 e0       	ldi	r18, 0x04	; 4
     d8c:	fc 01       	movw	r30, r24
     d8e:	22 83       	std	Z+2, r18	; 0x02
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	56 e0       	ldi	r21, 0x06	; 6
     d94:	fa 01       	movw	r30, r20
     d96:	32 83       	std	Z+2, r19	; 0x02
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2c 93       	st	X, r18
     d9c:	12 97       	sbiw	r26, 0x02	; 2
     d9e:	38 e8       	ldi	r19, 0x88	; 136
     da0:	39 83       	std	Y+1, r19	; 0x01
     da2:	28 e0       	ldi	r18, 0x08	; 8
     da4:	fc 01       	movw	r30, r24
     da6:	21 83       	std	Z+1, r18	; 0x01
     da8:	fa 01       	movw	r30, r20
     daa:	31 83       	std	Z+1, r19	; 0x01
     dac:	11 96       	adiw	r26, 0x01	; 1
     dae:	2c 93       	st	X, r18
     db0:	11 97       	sbiw	r26, 0x01	; 1
     db2:	20 e4       	ldi	r18, 0x40	; 64
     db4:	2b 8b       	std	Y+19, r18	; 0x13
     db6:	2f 8b       	std	Y+23, r18	; 0x17
     db8:	fc 01       	movw	r30, r24
     dba:	23 8b       	std	Z+19, r18	; 0x13
     dbc:	fa 01       	movw	r30, r20
     dbe:	23 8b       	std	Z+19, r18	; 0x13
     dc0:	27 8b       	std	Z+23, r18	; 0x17
     dc2:	53 96       	adiw	r26, 0x13	; 19
     dc4:	2c 93       	st	X, r18
     dc6:	82 e1       	ldi	r24, 0x12	; 18
     dc8:	90 e2       	ldi	r25, 0x20	; 32
     dca:	e6 e0       	ldi	r30, 0x06	; 6
     dcc:	f0 e2       	ldi	r31, 0x20	; 32
     dce:	68 e2       	ldi	r22, 0x28	; 40
     dd0:	53 e0       	ldi	r21, 0x03	; 3
     dd2:	40 e7       	ldi	r20, 0x70	; 112
     dd4:	32 e0       	ldi	r19, 0x02	; 2
     dd6:	a0 81       	ld	r26, Z
     dd8:	b1 81       	ldd	r27, Z+1	; 0x01
     dda:	13 96       	adiw	r26, 0x03	; 3
     ddc:	6c 93       	st	X, r22
     dde:	a0 81       	ld	r26, Z
     de0:	b1 81       	ldd	r27, Z+1	; 0x01
     de2:	15 96       	adiw	r26, 0x05	; 5
     de4:	5c 93       	st	X, r21
     de6:	a0 81       	ld	r26, Z
     de8:	b1 81       	ldd	r27, Z+1	; 0x01
     dea:	16 96       	adiw	r26, 0x06	; 6
     dec:	4c 93       	st	X, r20
     dee:	a0 81       	ld	r26, Z
     df0:	b1 81       	ldd	r27, Z+1	; 0x01
     df2:	17 96       	adiw	r26, 0x07	; 7
     df4:	3c 93       	st	X, r19
     df6:	a0 81       	ld	r26, Z
     df8:	b1 81       	ldd	r27, Z+1	; 0x01
     dfa:	14 96       	adiw	r26, 0x04	; 4
     dfc:	2c 91       	ld	r18, X
     dfe:	14 97       	sbiw	r26, 0x04	; 4
     e00:	20 61       	ori	r18, 0x10	; 16
     e02:	14 96       	adiw	r26, 0x04	; 4
     e04:	2c 93       	st	X, r18
     e06:	a1 91       	ld	r26, Z+
     e08:	b1 91       	ld	r27, Z+
     e0a:	14 96       	adiw	r26, 0x04	; 4
     e0c:	2c 91       	ld	r18, X
     e0e:	14 97       	sbiw	r26, 0x04	; 4
     e10:	28 60       	ori	r18, 0x08	; 8
     e12:	14 96       	adiw	r26, 0x04	; 4
     e14:	2c 93       	st	X, r18
     e16:	e8 17       	cp	r30, r24
     e18:	f9 07       	cpc	r31, r25
     e1a:	e9 f6       	brne	.-70     	; 0xdd6 <ir_comm_init+0x8a>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	44 dd       	rcall	.-1400   	; 0x8aa <set_all_ir_powers>
     e22:	a6 e0       	ldi	r26, 0x06	; 6
     e24:	b0 e2       	ldi	r27, 0x20	; 32
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	fc 01       	movw	r30, r24
     e2c:	ee 0f       	add	r30, r30
     e2e:	ff 1f       	adc	r31, r31
     e30:	e2 95       	swap	r30
     e32:	f2 95       	swap	r31
     e34:	f0 7f       	andi	r31, 0xF0	; 240
     e36:	fe 27       	eor	r31, r30
     e38:	e0 7f       	andi	r30, 0xF0	; 240
     e3a:	fe 27       	eor	r31, r30
     e3c:	e8 59       	subi	r30, 0x98	; 152
     e3e:	f6 4d       	sbci	r31, 0xD6	; 214
     e40:	14 8a       	std	Z+20, r1	; 0x14
     e42:	15 8a       	std	Z+21, r1	; 0x15
     e44:	16 8a       	std	Z+22, r1	; 0x16
     e46:	17 8a       	std	Z+23, r1	; 0x17
     e48:	10 8e       	std	Z+24, r1	; 0x18
     e4a:	11 8e       	std	Z+25, r1	; 0x19
     e4c:	12 8e       	std	Z+26, r1	; 0x1a
     e4e:	13 8e       	std	Z+27, r1	; 0x1b
     e50:	14 8e       	std	Z+28, r1	; 0x1c
     e52:	15 8e       	std	Z+29, r1	; 0x1d
     e54:	16 8e       	std	Z+30, r1	; 0x1e
     e56:	17 8e       	std	Z+31, r1	; 0x1f
     e58:	ed 91       	ld	r30, X+
     e5a:	fd 91       	ld	r31, X+
     e5c:	24 81       	ldd	r18, Z+4	; 0x04
     e5e:	20 61       	ori	r18, 0x10	; 16
     e60:	24 83       	std	Z+4, r18	; 0x04
     e62:	01 96       	adiw	r24, 0x01	; 1
     e64:	86 30       	cpi	r24, 0x06	; 6
     e66:	91 05       	cpc	r25, r1
     e68:	01 f7       	brne	.-64     	; 0xe2a <ir_comm_init+0xde>
     e6a:	10 92 59 2a 	sts	0x2A59, r1
     e6e:	10 92 5a 2a 	sts	0x2A5A, r1
     e72:	10 92 5b 2a 	sts	0x2A5B, r1
     e76:	10 92 5c 2a 	sts	0x2A5C, r1
     e7a:	10 92 c9 28 	sts	0x28C9, r1
     e7e:	10 92 ee 27 	sts	0x27EE, r1
     e82:	20 e0       	ldi	r18, 0x00	; 0
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	4c e6       	ldi	r20, 0x6C	; 108
     e88:	54 e0       	ldi	r21, 0x04	; 4
     e8a:	6e e3       	ldi	r22, 0x3E	; 62
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 e0       	ldi	r24, 0x00	; 0
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 8f 24 	call	0x491e	; 0x491e <schedule_task>
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <send_msg>:
     e9c:	5f 92       	push	r5
     e9e:	6f 92       	push	r6
     ea0:	7f 92       	push	r7
     ea2:	8f 92       	push	r8
     ea4:	9f 92       	push	r9
     ea6:	af 92       	push	r10
     ea8:	bf 92       	push	r11
     eaa:	cf 92       	push	r12
     eac:	df 92       	push	r13
     eae:	ef 92       	push	r14
     eb0:	ff 92       	push	r15
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	66 2e       	mov	r6, r22
     ebc:	57 2e       	mov	r5, r23
     ebe:	74 2e       	mov	r7, r20
     ec0:	c0 91 e8 27 	lds	r28, 0x27E8
     ec4:	d0 91 e9 27 	lds	r29, 0x27E9
     ec8:	e8 2e       	mov	r14, r24
     eca:	f1 2c       	mov	r15, r1
     ecc:	80 fd       	sbrc	r24, 0
     ece:	0d c0       	rjmp	.+26     	; 0xeea <send_msg+0x4e>
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	ac 01       	movw	r20, r24
     ed6:	97 01       	movw	r18, r14
     ed8:	08 2e       	mov	r0, r24
     eda:	02 c0       	rjmp	.+4      	; 0xee0 <send_msg+0x44>
     edc:	35 95       	asr	r19
     ede:	27 95       	ror	r18
     ee0:	0a 94       	dec	r0
     ee2:	e2 f7       	brpl	.-8      	; 0xedc <send_msg+0x40>
     ee4:	20 ff       	sbrs	r18, 0
     ee6:	2a c0       	rjmp	.+84     	; 0xf3c <send_msg+0xa0>
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <send_msg+0x52>
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	fa 01       	movw	r30, r20
     ef0:	ee 0f       	add	r30, r30
     ef2:	ff 1f       	adc	r31, r31
     ef4:	e2 95       	swap	r30
     ef6:	f2 95       	swap	r31
     ef8:	f0 7f       	andi	r31, 0xF0	; 240
     efa:	fe 27       	eor	r31, r30
     efc:	e0 7f       	andi	r30, 0xF0	; 240
     efe:	fe 27       	eor	r31, r30
     f00:	e8 59       	subi	r30, 0x98	; 152
     f02:	f6 4d       	sbci	r31, 0xD6	; 214
     f04:	87 8d       	ldd	r24, Z+31	; 0x1f
     f06:	88 70       	andi	r24, 0x08	; 8
     f08:	c8 27       	eor	r28, r24
     f0a:	8c 2f       	mov	r24, r28
     f0c:	82 95       	swap	r24
     f0e:	8c 27       	eor	r24, r28
     f10:	08 2e       	mov	r0, r24
     f12:	86 95       	lsr	r24
     f14:	86 95       	lsr	r24
     f16:	80 25       	eor	r24, r0
     f18:	08 2e       	mov	r0, r24
     f1a:	86 95       	lsr	r24
     f1c:	80 25       	eor	r24, r0
     f1e:	87 70       	andi	r24, 0x07	; 7
     f20:	0c 2e       	mov	r0, r28
     f22:	cd 2f       	mov	r28, r29
     f24:	86 95       	lsr	r24
     f26:	07 94       	ror	r0
     f28:	87 95       	ror	r24
     f2a:	d0 2d       	mov	r29, r0
     f2c:	c8 27       	eor	r28, r24
     f2e:	06 94       	lsr	r0
     f30:	87 95       	ror	r24
     f32:	d0 25       	eor	r29, r0
     f34:	c8 27       	eor	r28, r24
     f36:	71 10       	cpse	r7, r1
     f38:	07 c0       	rjmp	.+14     	; 0xf48 <send_msg+0xac>
     f3a:	87 c0       	rjmp	.+270    	; 0x104a <send_msg+0x1ae>
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	86 30       	cpi	r24, 0x06	; 6
     f40:	91 05       	cpc	r25, r1
     f42:	09 f0       	breq	.+2      	; 0xf46 <send_msg+0xaa>
     f44:	c7 cf       	rjmp	.-114    	; 0xed4 <send_msg+0x38>
     f46:	f7 cf       	rjmp	.-18     	; 0xf36 <send_msg+0x9a>
     f48:	96 2d       	mov	r25, r6
     f4a:	e6 2d       	mov	r30, r6
     f4c:	f5 2d       	mov	r31, r5
     f4e:	81 91       	ld	r24, Z+
     f50:	c8 27       	eor	r28, r24
     f52:	8c 2f       	mov	r24, r28
     f54:	82 95       	swap	r24
     f56:	8c 27       	eor	r24, r28
     f58:	08 2e       	mov	r0, r24
     f5a:	86 95       	lsr	r24
     f5c:	86 95       	lsr	r24
     f5e:	80 25       	eor	r24, r0
     f60:	08 2e       	mov	r0, r24
     f62:	86 95       	lsr	r24
     f64:	80 25       	eor	r24, r0
     f66:	87 70       	andi	r24, 0x07	; 7
     f68:	0c 2e       	mov	r0, r28
     f6a:	cd 2f       	mov	r28, r29
     f6c:	86 95       	lsr	r24
     f6e:	07 94       	ror	r0
     f70:	87 95       	ror	r24
     f72:	d0 2d       	mov	r29, r0
     f74:	c8 27       	eor	r28, r24
     f76:	06 94       	lsr	r0
     f78:	87 95       	ror	r24
     f7a:	d0 25       	eor	r29, r0
     f7c:	c8 27       	eor	r28, r24
     f7e:	8e 2f       	mov	r24, r30
     f80:	89 1b       	sub	r24, r25
     f82:	87 15       	cp	r24, r7
     f84:	20 f3       	brcs	.-56     	; 0xf4e <send_msg+0xb2>
     f86:	61 c0       	rjmp	.+194    	; 0x104a <send_msg+0x1ae>
     f88:	c7 01       	movw	r24, r14
     f8a:	00 2e       	mov	r0, r16
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <send_msg+0xf6>
     f8e:	95 95       	asr	r25
     f90:	87 95       	ror	r24
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <send_msg+0xf2>
     f96:	80 ff       	sbrs	r24, 0
     f98:	25 c0       	rjmp	.+74     	; 0xfe4 <send_msg+0x148>
     f9a:	f8 01       	movw	r30, r16
     f9c:	ee 0f       	add	r30, r30
     f9e:	ff 1f       	adc	r31, r31
     fa0:	e2 95       	swap	r30
     fa2:	f2 95       	swap	r31
     fa4:	f0 7f       	andi	r31, 0xF0	; 240
     fa6:	fe 27       	eor	r31, r30
     fa8:	e0 7f       	andi	r30, 0xF0	; 240
     faa:	fe 27       	eor	r31, r30
     fac:	e8 59       	subi	r30, 0x98	; 152
     fae:	f6 4d       	sbci	r31, 0xD6	; 214
     fb0:	76 8e       	std	Z+30, r7	; 0x1e
     fb2:	c4 8b       	std	Z+20, r28	; 0x14
     fb4:	d5 8b       	std	Z+21, r29	; 0x15
     fb6:	12 8e       	std	Z+26, r1	; 0x1a
     fb8:	13 8e       	std	Z+27, r1	; 0x1b
     fba:	80 91 e8 27 	lds	r24, 0x27E8
     fbe:	90 91 e9 27 	lds	r25, 0x27E9
     fc2:	86 8b       	std	Z+22, r24	; 0x16
     fc4:	97 8b       	std	Z+23, r25	; 0x17
     fc6:	a5 01       	movw	r20, r10
     fc8:	66 2d       	mov	r22, r6
     fca:	75 2d       	mov	r23, r5
     fcc:	c4 01       	movw	r24, r8
     fce:	0e 94 73 38 	call	0x70e6	; 0x70e6 <memcpy>
     fd2:	f6 01       	movw	r30, r12
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	f8 01       	movw	r30, r16
     fd8:	e0 50       	subi	r30, 0x00	; 0
     fda:	f0 4e       	sbci	r31, 0xE0	; 224
     fdc:	80 81       	ld	r24, Z
     fde:	89 2b       	or	r24, r25
     fe0:	f6 01       	movw	r30, r12
     fe2:	81 83       	std	Z+1, r24	; 0x01
     fe4:	0f 5f       	subi	r16, 0xFF	; 255
     fe6:	1f 4f       	sbci	r17, 0xFF	; 255
     fe8:	f0 e2       	ldi	r31, 0x20	; 32
     fea:	8f 0e       	add	r8, r31
     fec:	91 1c       	adc	r9, r1
     fee:	06 30       	cpi	r16, 0x06	; 6
     ff0:	11 05       	cpc	r17, r1
     ff2:	51 f6       	brne	.-108    	; 0xf88 <send_msg+0xec>
     ff4:	e6 e0       	ldi	r30, 0x06	; 6
     ff6:	f0 e2       	ldi	r31, 0x20	; 32
     ff8:	80 e0       	ldi	r24, 0x00	; 0
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	97 01       	movw	r18, r14
     ffe:	08 2e       	mov	r0, r24
    1000:	02 c0       	rjmp	.+4      	; 0x1006 <send_msg+0x16a>
    1002:	35 95       	asr	r19
    1004:	27 95       	ror	r18
    1006:	0a 94       	dec	r0
    1008:	e2 f7       	brpl	.-8      	; 0x1002 <send_msg+0x166>
    100a:	20 ff       	sbrs	r18, 0
    100c:	18 c0       	rjmp	.+48     	; 0x103e <send_msg+0x1a2>
    100e:	dc 01       	movw	r26, r24
    1010:	aa 0f       	add	r26, r26
    1012:	bb 1f       	adc	r27, r27
    1014:	a2 95       	swap	r26
    1016:	b2 95       	swap	r27
    1018:	b0 7f       	andi	r27, 0xF0	; 240
    101a:	ba 27       	eor	r27, r26
    101c:	a0 7f       	andi	r26, 0xF0	; 240
    101e:	ba 27       	eor	r27, r26
    1020:	a8 59       	subi	r26, 0x98	; 152
    1022:	b6 4d       	sbci	r27, 0xD6	; 214
    1024:	1d 92       	st	X+, r1
    1026:	1d 92       	st	X+, r1
    1028:	1d 92       	st	X+, r1
    102a:	1c 92       	st	X, r1
    102c:	13 97       	sbiw	r26, 0x03	; 3
    102e:	a0 81       	ld	r26, Z
    1030:	b1 81       	ldd	r27, Z+1	; 0x01
    1032:	13 96       	adiw	r26, 0x03	; 3
    1034:	2c 91       	ld	r18, X
    1036:	13 97       	sbiw	r26, 0x03	; 3
    1038:	22 60       	ori	r18, 0x02	; 2
    103a:	13 96       	adiw	r26, 0x03	; 3
    103c:	2c 93       	st	X, r18
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	32 96       	adiw	r30, 0x02	; 2
    1042:	86 30       	cpi	r24, 0x06	; 6
    1044:	91 05       	cpc	r25, r1
    1046:	d1 f6       	brne	.-76     	; 0xffc <send_msg+0x160>
    1048:	10 c0       	rjmp	.+32     	; 0x106a <send_msg+0x1ce>
    104a:	0f 2e       	mov	r0, r31
    104c:	fc e6       	ldi	r31, 0x6C	; 108
    104e:	8f 2e       	mov	r8, r31
    1050:	f9 e2       	ldi	r31, 0x29	; 41
    1052:	9f 2e       	mov	r9, r31
    1054:	f0 2d       	mov	r31, r0
    1056:	00 e0       	ldi	r16, 0x00	; 0
    1058:	10 e0       	ldi	r17, 0x00	; 0
    105a:	a7 2c       	mov	r10, r7
    105c:	b1 2c       	mov	r11, r1
    105e:	0f 2e       	mov	r0, r31
    1060:	c1 2c       	mov	r12, r1
    1062:	fb e0       	ldi	r31, 0x0B	; 11
    1064:	df 2e       	mov	r13, r31
    1066:	f0 2d       	mov	r31, r0
    1068:	8f cf       	rjmp	.-226    	; 0xf88 <send_msg+0xec>
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	df 90       	pop	r13
    1078:	cf 90       	pop	r12
    107a:	bf 90       	pop	r11
    107c:	af 90       	pop	r10
    107e:	9f 90       	pop	r9
    1080:	8f 90       	pop	r8
    1082:	7f 90       	pop	r7
    1084:	6f 90       	pop	r6
    1086:	5f 90       	pop	r5
    1088:	08 95       	ret

0000108a <ir_receive>:
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ff 92       	push	r15
    1094:	0f 93       	push	r16
    1096:	1f 93       	push	r17
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	c8 2f       	mov	r28, r24
    109e:	d0 e0       	ldi	r29, 0x00	; 0
    10a0:	fe 01       	movw	r30, r28
    10a2:	ee 0f       	add	r30, r30
    10a4:	ff 1f       	adc	r31, r31
    10a6:	ea 5f       	subi	r30, 0xFA	; 250
    10a8:	ff 4d       	sbci	r31, 0xDF	; 223
    10aa:	01 90       	ld	r0, Z+
    10ac:	f0 81       	ld	r31, Z
    10ae:	e0 2d       	mov	r30, r0
    10b0:	f0 80       	ld	r15, Z
    10b2:	d7 d9       	rcall	.-3154   	; 0x462 <get_time>
    10b4:	fe 01       	movw	r30, r28
    10b6:	ee 0f       	add	r30, r30
    10b8:	ff 1f       	adc	r31, r31
    10ba:	e2 95       	swap	r30
    10bc:	f2 95       	swap	r31
    10be:	f0 7f       	andi	r31, 0xF0	; 240
    10c0:	fe 27       	eor	r31, r30
    10c2:	e0 7f       	andi	r30, 0xF0	; 240
    10c4:	fe 27       	eor	r31, r30
    10c6:	e8 59       	subi	r30, 0x98	; 152
    10c8:	f6 4d       	sbci	r31, 0xD6	; 214
    10ca:	00 81       	ld	r16, Z
    10cc:	11 81       	ldd	r17, Z+1	; 0x01
    10ce:	22 81       	ldd	r18, Z+2	; 0x02
    10d0:	33 81       	ldd	r19, Z+3	; 0x03
    10d2:	5b 01       	movw	r10, r22
    10d4:	6c 01       	movw	r12, r24
    10d6:	a0 1a       	sub	r10, r16
    10d8:	b1 0a       	sbc	r11, r17
    10da:	c2 0a       	sbc	r12, r18
    10dc:	d3 0a       	sbc	r13, r19
    10de:	96 01       	movw	r18, r12
    10e0:	85 01       	movw	r16, r10
    10e2:	05 31       	cpi	r16, 0x15	; 21
    10e4:	11 05       	cpc	r17, r1
    10e6:	21 05       	cpc	r18, r1
    10e8:	31 05       	cpc	r19, r1
    10ea:	10 f1       	brcs	.+68     	; 0x1130 <ir_receive+0xa6>
    10ec:	fe 01       	movw	r30, r28
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	e2 95       	swap	r30
    10f4:	f2 95       	swap	r31
    10f6:	f0 7f       	andi	r31, 0xF0	; 240
    10f8:	fe 27       	eor	r31, r30
    10fa:	e0 7f       	andi	r30, 0xF0	; 240
    10fc:	fe 27       	eor	r31, r30
    10fe:	e8 59       	subi	r30, 0x98	; 152
    1100:	f6 4d       	sbci	r31, 0xD6	; 214
    1102:	14 8a       	std	Z+20, r1	; 0x14
    1104:	15 8a       	std	Z+21, r1	; 0x15
    1106:	16 8a       	std	Z+22, r1	; 0x16
    1108:	17 8a       	std	Z+23, r1	; 0x17
    110a:	10 8e       	std	Z+24, r1	; 0x18
    110c:	11 8e       	std	Z+25, r1	; 0x19
    110e:	12 8e       	std	Z+26, r1	; 0x1a
    1110:	13 8e       	std	Z+27, r1	; 0x1b
    1112:	14 8e       	std	Z+28, r1	; 0x1c
    1114:	15 8e       	std	Z+29, r1	; 0x1d
    1116:	16 8e       	std	Z+30, r1	; 0x1e
    1118:	17 8e       	std	Z+31, r1	; 0x1f
    111a:	fe 01       	movw	r30, r28
    111c:	ee 0f       	add	r30, r30
    111e:	ff 1f       	adc	r31, r31
    1120:	ea 5f       	subi	r30, 0xFA	; 250
    1122:	ff 4d       	sbci	r31, 0xDF	; 223
    1124:	01 90       	ld	r0, Z+
    1126:	f0 81       	ld	r31, Z
    1128:	e0 2d       	mov	r30, r0
    112a:	24 81       	ldd	r18, Z+4	; 0x04
    112c:	20 61       	ori	r18, 0x10	; 16
    112e:	24 83       	std	Z+4, r18	; 0x04
    1130:	fe 01       	movw	r30, r28
    1132:	ee 0f       	add	r30, r30
    1134:	ff 1f       	adc	r31, r31
    1136:	e2 95       	swap	r30
    1138:	f2 95       	swap	r31
    113a:	f0 7f       	andi	r31, 0xF0	; 240
    113c:	fe 27       	eor	r31, r30
    113e:	e0 7f       	andi	r30, 0xF0	; 240
    1140:	fe 27       	eor	r31, r30
    1142:	e8 59       	subi	r30, 0x98	; 152
    1144:	f6 4d       	sbci	r31, 0xD6	; 214
    1146:	60 83       	st	Z, r22
    1148:	71 83       	std	Z+1, r23	; 0x01
    114a:	82 83       	std	Z+2, r24	; 0x02
    114c:	93 83       	std	Z+3, r25	; 0x03
    114e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1150:	93 8d       	ldd	r25, Z+27	; 0x1b
    1152:	87 30       	cpi	r24, 0x07	; 7
    1154:	91 05       	cpc	r25, r1
    1156:	08 f0       	brcs	.+2      	; 0x115a <ir_receive+0xd0>
    1158:	b3 c0       	rjmp	.+358    	; 0x12c0 <ir_receive+0x236>
    115a:	fc 01       	movw	r30, r24
    115c:	eb 5f       	subi	r30, 0xFB	; 251
    115e:	fe 4f       	sbci	r31, 0xFE	; 254
    1160:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__tablejump2__>
    1164:	8f 2d       	mov	r24, r15
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	fe 01       	movw	r30, r28
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	e2 95       	swap	r30
    1170:	f2 95       	swap	r31
    1172:	f0 7f       	andi	r31, 0xF0	; 240
    1174:	fe 27       	eor	r31, r30
    1176:	e0 7f       	andi	r30, 0xF0	; 240
    1178:	fe 27       	eor	r31, r30
    117a:	e8 59       	subi	r30, 0x98	; 152
    117c:	f6 4d       	sbci	r31, 0xD6	; 214
    117e:	86 8b       	std	Z+22, r24	; 0x16
    1180:	97 8b       	std	Z+23, r25	; 0x17
    1182:	d6 c0       	rjmp	.+428    	; 0x1330 <ir_receive+0x2a6>
    1184:	fe 01       	movw	r30, r28
    1186:	ee 0f       	add	r30, r30
    1188:	ff 1f       	adc	r31, r31
    118a:	e2 95       	swap	r30
    118c:	f2 95       	swap	r31
    118e:	f0 7f       	andi	r31, 0xF0	; 240
    1190:	fe 27       	eor	r31, r30
    1192:	e0 7f       	andi	r30, 0xF0	; 240
    1194:	fe 27       	eor	r31, r30
    1196:	e8 59       	subi	r30, 0x98	; 152
    1198:	f6 4d       	sbci	r31, 0xD6	; 214
    119a:	86 89       	ldd	r24, Z+22	; 0x16
    119c:	97 89       	ldd	r25, Z+23	; 0x17
    119e:	9f 29       	or	r25, r15
    11a0:	86 8b       	std	Z+22, r24	; 0x16
    11a2:	97 8b       	std	Z+23, r25	; 0x17
    11a4:	86 89       	ldd	r24, Z+22	; 0x16
    11a6:	97 89       	ldd	r25, Z+23	; 0x17
    11a8:	84 8f       	std	Z+28, r24	; 0x1c
    11aa:	95 8f       	std	Z+29, r25	; 0x1d
    11ac:	c1 c0       	rjmp	.+386    	; 0x1330 <ir_receive+0x2a6>
    11ae:	ff 20       	and	r15, r15
    11b0:	74 f4       	brge	.+28     	; 0x11ce <ir_receive+0x144>
    11b2:	fe 01       	movw	r30, r28
    11b4:	ee 0f       	add	r30, r30
    11b6:	ff 1f       	adc	r31, r31
    11b8:	e2 95       	swap	r30
    11ba:	f2 95       	swap	r31
    11bc:	f0 7f       	andi	r31, 0xF0	; 240
    11be:	fe 27       	eor	r31, r30
    11c0:	e0 7f       	andi	r30, 0xF0	; 240
    11c2:	fe 27       	eor	r31, r30
    11c4:	e8 59       	subi	r30, 0x98	; 152
    11c6:	f6 4d       	sbci	r31, 0xD6	; 214
    11c8:	87 8d       	ldd	r24, Z+31	; 0x1f
    11ca:	88 60       	ori	r24, 0x08	; 8
    11cc:	87 8f       	std	Z+31, r24	; 0x1f
    11ce:	fe 01       	movw	r30, r28
    11d0:	ee 0f       	add	r30, r30
    11d2:	ff 1f       	adc	r31, r31
    11d4:	e2 95       	swap	r30
    11d6:	f2 95       	swap	r31
    11d8:	f0 7f       	andi	r31, 0xF0	; 240
    11da:	fe 27       	eor	r31, r30
    11dc:	e0 7f       	andi	r30, 0xF0	; 240
    11de:	fe 27       	eor	r31, r30
    11e0:	e8 59       	subi	r30, 0x98	; 152
    11e2:	f6 4d       	sbci	r31, 0xD6	; 214
    11e4:	27 8d       	ldd	r18, Z+31	; 0x1f
    11e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    11e8:	95 8d       	ldd	r25, Z+29	; 0x1d
    11ea:	28 70       	andi	r18, 0x08	; 8
    11ec:	82 27       	eor	r24, r18
    11ee:	28 2f       	mov	r18, r24
    11f0:	22 95       	swap	r18
    11f2:	28 27       	eor	r18, r24
    11f4:	02 2e       	mov	r0, r18
    11f6:	26 95       	lsr	r18
    11f8:	26 95       	lsr	r18
    11fa:	20 25       	eor	r18, r0
    11fc:	02 2e       	mov	r0, r18
    11fe:	26 95       	lsr	r18
    1200:	20 25       	eor	r18, r0
    1202:	27 70       	andi	r18, 0x07	; 7
    1204:	08 2e       	mov	r0, r24
    1206:	89 2f       	mov	r24, r25
    1208:	26 95       	lsr	r18
    120a:	07 94       	ror	r0
    120c:	27 95       	ror	r18
    120e:	90 2d       	mov	r25, r0
    1210:	82 27       	eor	r24, r18
    1212:	06 94       	lsr	r0
    1214:	27 95       	ror	r18
    1216:	90 25       	eor	r25, r0
    1218:	82 27       	eor	r24, r18
    121a:	fe 01       	movw	r30, r28
    121c:	ee 0f       	add	r30, r30
    121e:	ff 1f       	adc	r31, r31
    1220:	e2 95       	swap	r30
    1222:	f2 95       	swap	r31
    1224:	f0 7f       	andi	r31, 0xF0	; 240
    1226:	fe 27       	eor	r31, r30
    1228:	e0 7f       	andi	r30, 0xF0	; 240
    122a:	fe 27       	eor	r31, r30
    122c:	e8 59       	subi	r30, 0x98	; 152
    122e:	f6 4d       	sbci	r31, 0xD6	; 214
    1230:	84 8f       	std	Z+28, r24	; 0x1c
    1232:	95 8f       	std	Z+29, r25	; 0x1d
    1234:	8f 2d       	mov	r24, r15
    1236:	8f 77       	andi	r24, 0x7F	; 127
    1238:	86 8f       	std	Z+30, r24	; 0x1e
    123a:	7a c0       	rjmp	.+244    	; 0x1330 <ir_receive+0x2a6>
    123c:	8f 2d       	mov	r24, r15
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	fe 01       	movw	r30, r28
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	e2 95       	swap	r30
    1248:	f2 95       	swap	r31
    124a:	f0 7f       	andi	r31, 0xF0	; 240
    124c:	fe 27       	eor	r31, r30
    124e:	e0 7f       	andi	r30, 0xF0	; 240
    1250:	fe 27       	eor	r31, r30
    1252:	e8 59       	subi	r30, 0x98	; 152
    1254:	f6 4d       	sbci	r31, 0xD6	; 214
    1256:	84 8b       	std	Z+20, r24	; 0x14
    1258:	95 8b       	std	Z+21, r25	; 0x15
    125a:	6a c0       	rjmp	.+212    	; 0x1330 <ir_receive+0x2a6>
    125c:	fe 01       	movw	r30, r28
    125e:	ee 0f       	add	r30, r30
    1260:	ff 1f       	adc	r31, r31
    1262:	e2 95       	swap	r30
    1264:	f2 95       	swap	r31
    1266:	f0 7f       	andi	r31, 0xF0	; 240
    1268:	fe 27       	eor	r31, r30
    126a:	e0 7f       	andi	r30, 0xF0	; 240
    126c:	fe 27       	eor	r31, r30
    126e:	e8 59       	subi	r30, 0x98	; 152
    1270:	f6 4d       	sbci	r31, 0xD6	; 214
    1272:	84 89       	ldd	r24, Z+20	; 0x14
    1274:	95 89       	ldd	r25, Z+21	; 0x15
    1276:	9f 29       	or	r25, r15
    1278:	84 8b       	std	Z+20, r24	; 0x14
    127a:	95 8b       	std	Z+21, r25	; 0x15
    127c:	59 c0       	rjmp	.+178    	; 0x1330 <ir_receive+0x2a6>
    127e:	8f 2d       	mov	r24, r15
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	fe 01       	movw	r30, r28
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	e2 95       	swap	r30
    128a:	f2 95       	swap	r31
    128c:	f0 7f       	andi	r31, 0xF0	; 240
    128e:	fe 27       	eor	r31, r30
    1290:	e0 7f       	andi	r30, 0xF0	; 240
    1292:	fe 27       	eor	r31, r30
    1294:	e8 59       	subi	r30, 0x98	; 152
    1296:	f6 4d       	sbci	r31, 0xD6	; 214
    1298:	80 8f       	std	Z+24, r24	; 0x18
    129a:	91 8f       	std	Z+25, r25	; 0x19
    129c:	49 c0       	rjmp	.+146    	; 0x1330 <ir_receive+0x2a6>
    129e:	fe 01       	movw	r30, r28
    12a0:	ee 0f       	add	r30, r30
    12a2:	ff 1f       	adc	r31, r31
    12a4:	e2 95       	swap	r30
    12a6:	f2 95       	swap	r31
    12a8:	f0 7f       	andi	r31, 0xF0	; 240
    12aa:	fe 27       	eor	r31, r30
    12ac:	e0 7f       	andi	r30, 0xF0	; 240
    12ae:	fe 27       	eor	r31, r30
    12b0:	e8 59       	subi	r30, 0x98	; 152
    12b2:	f6 4d       	sbci	r31, 0xD6	; 214
    12b4:	80 8d       	ldd	r24, Z+24	; 0x18
    12b6:	91 8d       	ldd	r25, Z+25	; 0x19
    12b8:	9f 29       	or	r25, r15
    12ba:	80 8f       	std	Z+24, r24	; 0x18
    12bc:	91 8f       	std	Z+25, r25	; 0x19
    12be:	38 c0       	rjmp	.+112    	; 0x1330 <ir_receive+0x2a6>
    12c0:	fe 01       	movw	r30, r28
    12c2:	ee 0f       	add	r30, r30
    12c4:	ff 1f       	adc	r31, r31
    12c6:	e2 95       	swap	r30
    12c8:	f2 95       	swap	r31
    12ca:	f0 7f       	andi	r31, 0xF0	; 240
    12cc:	fe 27       	eor	r31, r30
    12ce:	e0 7f       	andi	r30, 0xF0	; 240
    12d0:	fe 27       	eor	r31, r30
    12d2:	e8 59       	subi	r30, 0x98	; 152
    12d4:	f6 4d       	sbci	r31, 0xD6	; 214
    12d6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    12d8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    12da:	17 97       	sbiw	r26, 0x07	; 7
    12dc:	ae 0f       	add	r26, r30
    12de:	bf 1f       	adc	r27, r31
    12e0:	14 96       	adiw	r26, 0x04	; 4
    12e2:	fc 92       	st	X, r15
    12e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    12e6:	95 8d       	ldd	r25, Z+29	; 0x1d
    12e8:	8f 25       	eor	r24, r15
    12ea:	28 2f       	mov	r18, r24
    12ec:	22 95       	swap	r18
    12ee:	28 27       	eor	r18, r24
    12f0:	02 2e       	mov	r0, r18
    12f2:	26 95       	lsr	r18
    12f4:	26 95       	lsr	r18
    12f6:	20 25       	eor	r18, r0
    12f8:	02 2e       	mov	r0, r18
    12fa:	26 95       	lsr	r18
    12fc:	20 25       	eor	r18, r0
    12fe:	27 70       	andi	r18, 0x07	; 7
    1300:	08 2e       	mov	r0, r24
    1302:	89 2f       	mov	r24, r25
    1304:	26 95       	lsr	r18
    1306:	07 94       	ror	r0
    1308:	27 95       	ror	r18
    130a:	90 2d       	mov	r25, r0
    130c:	82 27       	eor	r24, r18
    130e:	06 94       	lsr	r0
    1310:	27 95       	ror	r18
    1312:	90 25       	eor	r25, r0
    1314:	82 27       	eor	r24, r18
    1316:	fe 01       	movw	r30, r28
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	e2 95       	swap	r30
    131e:	f2 95       	swap	r31
    1320:	f0 7f       	andi	r31, 0xF0	; 240
    1322:	fe 27       	eor	r31, r30
    1324:	e0 7f       	andi	r30, 0xF0	; 240
    1326:	fe 27       	eor	r31, r30
    1328:	e8 59       	subi	r30, 0x98	; 152
    132a:	f6 4d       	sbci	r31, 0xD6	; 214
    132c:	84 8f       	std	Z+28, r24	; 0x1c
    132e:	95 8f       	std	Z+29, r25	; 0x1d
    1330:	fe 01       	movw	r30, r28
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	e2 95       	swap	r30
    1338:	f2 95       	swap	r31
    133a:	f0 7f       	andi	r31, 0xF0	; 240
    133c:	fe 27       	eor	r31, r30
    133e:	e0 7f       	andi	r30, 0xF0	; 240
    1340:	fe 27       	eor	r31, r30
    1342:	e8 59       	subi	r30, 0x98	; 152
    1344:	f6 4d       	sbci	r31, 0xD6	; 214
    1346:	82 8d       	ldd	r24, Z+26	; 0x1a
    1348:	93 8d       	ldd	r25, Z+27	; 0x1b
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	82 8f       	std	Z+26, r24	; 0x1a
    134e:	93 8f       	std	Z+27, r25	; 0x1b
    1350:	22 8d       	ldd	r18, Z+26	; 0x1a
    1352:	33 8d       	ldd	r19, Z+27	; 0x1b
    1354:	86 8d       	ldd	r24, Z+30	; 0x1e
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	07 96       	adiw	r24, 0x07	; 7
    135a:	28 17       	cp	r18, r24
    135c:	39 07       	cpc	r19, r25
    135e:	08 f4       	brcc	.+2      	; 0x1362 <ir_receive+0x2d8>
    1360:	c6 c0       	rjmp	.+396    	; 0x14ee <ir_receive+0x464>
    1362:	fe 01       	movw	r30, r28
    1364:	ee 0f       	add	r30, r30
    1366:	ff 1f       	adc	r31, r31
    1368:	e2 95       	swap	r30
    136a:	f2 95       	swap	r31
    136c:	f0 7f       	andi	r31, 0xF0	; 240
    136e:	fe 27       	eor	r31, r30
    1370:	e0 7f       	andi	r30, 0xF0	; 240
    1372:	fe 27       	eor	r31, r30
    1374:	e8 59       	subi	r30, 0x98	; 152
    1376:	f6 4d       	sbci	r31, 0xD6	; 214
    1378:	24 8d       	ldd	r18, Z+28	; 0x1c
    137a:	35 8d       	ldd	r19, Z+29	; 0x1d
    137c:	84 89       	ldd	r24, Z+20	; 0x14
    137e:	95 89       	ldd	r25, Z+21	; 0x15
    1380:	28 17       	cp	r18, r24
    1382:	39 07       	cpc	r19, r25
    1384:	09 f1       	breq	.+66     	; 0x13c8 <ir_receive+0x33e>
    1386:	fe 01       	movw	r30, r28
    1388:	ee 0f       	add	r30, r30
    138a:	ff 1f       	adc	r31, r31
    138c:	e2 95       	swap	r30
    138e:	f2 95       	swap	r31
    1390:	f0 7f       	andi	r31, 0xF0	; 240
    1392:	fe 27       	eor	r31, r30
    1394:	e0 7f       	andi	r30, 0xF0	; 240
    1396:	fe 27       	eor	r31, r30
    1398:	e8 59       	subi	r30, 0x98	; 152
    139a:	f6 4d       	sbci	r31, 0xD6	; 214
    139c:	14 8a       	std	Z+20, r1	; 0x14
    139e:	15 8a       	std	Z+21, r1	; 0x15
    13a0:	16 8a       	std	Z+22, r1	; 0x16
    13a2:	17 8a       	std	Z+23, r1	; 0x17
    13a4:	10 8e       	std	Z+24, r1	; 0x18
    13a6:	11 8e       	std	Z+25, r1	; 0x19
    13a8:	12 8e       	std	Z+26, r1	; 0x1a
    13aa:	13 8e       	std	Z+27, r1	; 0x1b
    13ac:	14 8e       	std	Z+28, r1	; 0x1c
    13ae:	15 8e       	std	Z+29, r1	; 0x1d
    13b0:	16 8e       	std	Z+30, r1	; 0x1e
    13b2:	17 8e       	std	Z+31, r1	; 0x1f
    13b4:	cc 0f       	add	r28, r28
    13b6:	dd 1f       	adc	r29, r29
    13b8:	ca 5f       	subi	r28, 0xFA	; 250
    13ba:	df 4d       	sbci	r29, 0xDF	; 223
    13bc:	e8 81       	ld	r30, Y
    13be:	f9 81       	ldd	r31, Y+1	; 0x01
    13c0:	84 81       	ldd	r24, Z+4	; 0x04
    13c2:	80 61       	ori	r24, 0x10	; 16
    13c4:	84 83       	std	Z+4, r24	; 0x04
    13c6:	93 c0       	rjmp	.+294    	; 0x14ee <ir_receive+0x464>
    13c8:	fe 01       	movw	r30, r28
    13ca:	ee 0f       	add	r30, r30
    13cc:	ff 1f       	adc	r31, r31
    13ce:	e2 95       	swap	r30
    13d0:	f2 95       	swap	r31
    13d2:	f0 7f       	andi	r31, 0xF0	; 240
    13d4:	fe 27       	eor	r31, r30
    13d6:	e0 7f       	andi	r30, 0xF0	; 240
    13d8:	fe 27       	eor	r31, r30
    13da:	e8 59       	subi	r30, 0x98	; 152
    13dc:	f6 4d       	sbci	r31, 0xD6	; 214
    13de:	80 8d       	ldd	r24, Z+24	; 0x18
    13e0:	91 8d       	ldd	r25, Z+25	; 0x19
    13e2:	89 2b       	or	r24, r25
    13e4:	a9 f1       	breq	.+106    	; 0x1450 <ir_receive+0x3c6>
    13e6:	fe 01       	movw	r30, r28
    13e8:	ee 0f       	add	r30, r30
    13ea:	ff 1f       	adc	r31, r31
    13ec:	e2 95       	swap	r30
    13ee:	f2 95       	swap	r31
    13f0:	f0 7f       	andi	r31, 0xF0	; 240
    13f2:	fe 27       	eor	r31, r30
    13f4:	e0 7f       	andi	r30, 0xF0	; 240
    13f6:	fe 27       	eor	r31, r30
    13f8:	e8 59       	subi	r30, 0x98	; 152
    13fa:	f6 4d       	sbci	r31, 0xD6	; 214
    13fc:	20 8d       	ldd	r18, Z+24	; 0x18
    13fe:	31 8d       	ldd	r19, Z+25	; 0x19
    1400:	80 91 e8 27 	lds	r24, 0x27E8
    1404:	90 91 e9 27 	lds	r25, 0x27E9
    1408:	28 17       	cp	r18, r24
    140a:	39 07       	cpc	r19, r25
    140c:	09 f1       	breq	.+66     	; 0x1450 <ir_receive+0x3c6>
    140e:	fe 01       	movw	r30, r28
    1410:	ee 0f       	add	r30, r30
    1412:	ff 1f       	adc	r31, r31
    1414:	e2 95       	swap	r30
    1416:	f2 95       	swap	r31
    1418:	f0 7f       	andi	r31, 0xF0	; 240
    141a:	fe 27       	eor	r31, r30
    141c:	e0 7f       	andi	r30, 0xF0	; 240
    141e:	fe 27       	eor	r31, r30
    1420:	e8 59       	subi	r30, 0x98	; 152
    1422:	f6 4d       	sbci	r31, 0xD6	; 214
    1424:	14 8a       	std	Z+20, r1	; 0x14
    1426:	15 8a       	std	Z+21, r1	; 0x15
    1428:	16 8a       	std	Z+22, r1	; 0x16
    142a:	17 8a       	std	Z+23, r1	; 0x17
    142c:	10 8e       	std	Z+24, r1	; 0x18
    142e:	11 8e       	std	Z+25, r1	; 0x19
    1430:	12 8e       	std	Z+26, r1	; 0x1a
    1432:	13 8e       	std	Z+27, r1	; 0x1b
    1434:	14 8e       	std	Z+28, r1	; 0x1c
    1436:	15 8e       	std	Z+29, r1	; 0x1d
    1438:	16 8e       	std	Z+30, r1	; 0x1e
    143a:	17 8e       	std	Z+31, r1	; 0x1f
    143c:	cc 0f       	add	r28, r28
    143e:	dd 1f       	adc	r29, r29
    1440:	ca 5f       	subi	r28, 0xFA	; 250
    1442:	df 4d       	sbci	r29, 0xDF	; 223
    1444:	e8 81       	ld	r30, Y
    1446:	f9 81       	ldd	r31, Y+1	; 0x01
    1448:	84 81       	ldd	r24, Z+4	; 0x04
    144a:	80 61       	ori	r24, 0x10	; 16
    144c:	84 83       	std	Z+4, r24	; 0x04
    144e:	4f c0       	rjmp	.+158    	; 0x14ee <ir_receive+0x464>
    1450:	fe 01       	movw	r30, r28
    1452:	ee 0f       	add	r30, r30
    1454:	ff 1f       	adc	r31, r31
    1456:	e2 95       	swap	r30
    1458:	f2 95       	swap	r31
    145a:	f0 7f       	andi	r31, 0xF0	; 240
    145c:	fe 27       	eor	r31, r30
    145e:	e0 7f       	andi	r30, 0xF0	; 240
    1460:	fe 27       	eor	r31, r30
    1462:	e8 59       	subi	r30, 0x98	; 152
    1464:	f6 4d       	sbci	r31, 0xD6	; 214
    1466:	26 89       	ldd	r18, Z+22	; 0x16
    1468:	37 89       	ldd	r19, Z+23	; 0x17
    146a:	80 91 e8 27 	lds	r24, 0x27E8
    146e:	90 91 e9 27 	lds	r25, 0x27E9
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	09 f5       	brne	.+66     	; 0x14ba <ir_receive+0x430>
    1478:	fe 01       	movw	r30, r28
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	e2 95       	swap	r30
    1480:	f2 95       	swap	r31
    1482:	f0 7f       	andi	r31, 0xF0	; 240
    1484:	fe 27       	eor	r31, r30
    1486:	e0 7f       	andi	r30, 0xF0	; 240
    1488:	fe 27       	eor	r31, r30
    148a:	e8 59       	subi	r30, 0x98	; 152
    148c:	f6 4d       	sbci	r31, 0xD6	; 214
    148e:	14 8a       	std	Z+20, r1	; 0x14
    1490:	15 8a       	std	Z+21, r1	; 0x15
    1492:	16 8a       	std	Z+22, r1	; 0x16
    1494:	17 8a       	std	Z+23, r1	; 0x17
    1496:	10 8e       	std	Z+24, r1	; 0x18
    1498:	11 8e       	std	Z+25, r1	; 0x19
    149a:	12 8e       	std	Z+26, r1	; 0x1a
    149c:	13 8e       	std	Z+27, r1	; 0x1b
    149e:	14 8e       	std	Z+28, r1	; 0x1c
    14a0:	15 8e       	std	Z+29, r1	; 0x1d
    14a2:	16 8e       	std	Z+30, r1	; 0x1e
    14a4:	17 8e       	std	Z+31, r1	; 0x1f
    14a6:	cc 0f       	add	r28, r28
    14a8:	dd 1f       	adc	r29, r29
    14aa:	ca 5f       	subi	r28, 0xFA	; 250
    14ac:	df 4d       	sbci	r29, 0xDF	; 223
    14ae:	e8 81       	ld	r30, Y
    14b0:	f9 81       	ldd	r31, Y+1	; 0x01
    14b2:	84 81       	ldd	r24, Z+4	; 0x04
    14b4:	80 61       	ori	r24, 0x10	; 16
    14b6:	84 83       	std	Z+4, r24	; 0x04
    14b8:	1a c0       	rjmp	.+52     	; 0x14ee <ir_receive+0x464>
    14ba:	fe 01       	movw	r30, r28
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	e2 95       	swap	r30
    14c2:	f2 95       	swap	r31
    14c4:	f0 7f       	andi	r31, 0xF0	; 240
    14c6:	fe 27       	eor	r31, r30
    14c8:	e0 7f       	andi	r30, 0xF0	; 240
    14ca:	fe 27       	eor	r31, r30
    14cc:	e8 59       	subi	r30, 0x98	; 152
    14ce:	f6 4d       	sbci	r31, 0xD6	; 214
    14d0:	87 8d       	ldd	r24, Z+31	; 0x1f
    14d2:	82 60       	ori	r24, 0x02	; 2
    14d4:	87 8f       	std	Z+31, r24	; 0x1f
    14d6:	87 8d       	ldd	r24, Z+31	; 0x1f
    14d8:	81 60       	ori	r24, 0x01	; 1
    14da:	87 8f       	std	Z+31, r24	; 0x1f
    14dc:	cc 0f       	add	r28, r28
    14de:	dd 1f       	adc	r29, r29
    14e0:	ca 5f       	subi	r28, 0xFA	; 250
    14e2:	df 4d       	sbci	r29, 0xDF	; 223
    14e4:	e8 81       	ld	r30, Y
    14e6:	f9 81       	ldd	r31, Y+1	; 0x01
    14e8:	84 81       	ldd	r24, Z+4	; 0x04
    14ea:	8f 7e       	andi	r24, 0xEF	; 239
    14ec:	84 83       	std	Z+4, r24	; 0x04
    14ee:	df 91       	pop	r29
    14f0:	cf 91       	pop	r28
    14f2:	1f 91       	pop	r17
    14f4:	0f 91       	pop	r16
    14f6:	ff 90       	pop	r15
    14f8:	df 90       	pop	r13
    14fa:	cf 90       	pop	r12
    14fc:	bf 90       	pop	r11
    14fe:	af 90       	pop	r10
    1500:	08 95       	ret

00001502 <ir_transmit>:
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	fc 01       	movw	r30, r24
    1506:	ee 0f       	add	r30, r30
    1508:	ff 1f       	adc	r31, r31
    150a:	e2 95       	swap	r30
    150c:	f2 95       	swap	r31
    150e:	f0 7f       	andi	r31, 0xF0	; 240
    1510:	fe 27       	eor	r31, r30
    1512:	e0 7f       	andi	r30, 0xF0	; 240
    1514:	fe 27       	eor	r31, r30
    1516:	e8 59       	subi	r30, 0x98	; 152
    1518:	f6 4d       	sbci	r31, 0xD6	; 214
    151a:	22 8d       	ldd	r18, Z+26	; 0x1a
    151c:	33 8d       	ldd	r19, Z+27	; 0x1b
    151e:	27 30       	cpi	r18, 0x07	; 7
    1520:	31 05       	cpc	r19, r1
    1522:	08 f0       	brcs	.+2      	; 0x1526 <ir_transmit+0x24>
    1524:	7c c0       	rjmp	.+248    	; 0x161e <ir_transmit+0x11c>
    1526:	f9 01       	movw	r30, r18
    1528:	e4 5f       	subi	r30, 0xF4	; 244
    152a:	fe 4f       	sbci	r31, 0xFE	; 254
    152c:	0c 94 42 36 	jmp	0x6c84	; 0x6c84 <__tablejump2__>
    1530:	fc 01       	movw	r30, r24
    1532:	ee 0f       	add	r30, r30
    1534:	ff 1f       	adc	r31, r31
    1536:	e2 95       	swap	r30
    1538:	f2 95       	swap	r31
    153a:	f0 7f       	andi	r31, 0xF0	; 240
    153c:	fe 27       	eor	r31, r30
    153e:	e0 7f       	andi	r30, 0xF0	; 240
    1540:	fe 27       	eor	r31, r30
    1542:	e8 59       	subi	r30, 0x98	; 152
    1544:	f6 4d       	sbci	r31, 0xD6	; 214
    1546:	26 8d       	ldd	r18, Z+30	; 0x1e
    1548:	20 93 61 2a 	sts	0x2A61, r18
    154c:	27 8d       	ldd	r18, Z+31	; 0x1f
    154e:	23 ff       	sbrs	r18, 3
    1550:	7a c0       	rjmp	.+244    	; 0x1646 <ir_transmit+0x144>
    1552:	20 91 61 2a 	lds	r18, 0x2A61
    1556:	20 68       	ori	r18, 0x80	; 128
    1558:	20 93 61 2a 	sts	0x2A61, r18
    155c:	74 c0       	rjmp	.+232    	; 0x1646 <ir_transmit+0x144>
    155e:	fc 01       	movw	r30, r24
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	e2 95       	swap	r30
    1566:	f2 95       	swap	r31
    1568:	f0 7f       	andi	r31, 0xF0	; 240
    156a:	fe 27       	eor	r31, r30
    156c:	e0 7f       	andi	r30, 0xF0	; 240
    156e:	fe 27       	eor	r31, r30
    1570:	e8 59       	subi	r30, 0x98	; 152
    1572:	f6 4d       	sbci	r31, 0xD6	; 214
    1574:	24 89       	ldd	r18, Z+20	; 0x14
    1576:	35 89       	ldd	r19, Z+21	; 0x15
    1578:	20 93 61 2a 	sts	0x2A61, r18
    157c:	64 c0       	rjmp	.+200    	; 0x1646 <ir_transmit+0x144>
    157e:	fc 01       	movw	r30, r24
    1580:	ee 0f       	add	r30, r30
    1582:	ff 1f       	adc	r31, r31
    1584:	e2 95       	swap	r30
    1586:	f2 95       	swap	r31
    1588:	f0 7f       	andi	r31, 0xF0	; 240
    158a:	fe 27       	eor	r31, r30
    158c:	e0 7f       	andi	r30, 0xF0	; 240
    158e:	fe 27       	eor	r31, r30
    1590:	e8 59       	subi	r30, 0x98	; 152
    1592:	f6 4d       	sbci	r31, 0xD6	; 214
    1594:	24 89       	ldd	r18, Z+20	; 0x14
    1596:	35 89       	ldd	r19, Z+21	; 0x15
    1598:	30 93 61 2a 	sts	0x2A61, r19
    159c:	54 c0       	rjmp	.+168    	; 0x1646 <ir_transmit+0x144>
    159e:	fc 01       	movw	r30, r24
    15a0:	ee 0f       	add	r30, r30
    15a2:	ff 1f       	adc	r31, r31
    15a4:	e2 95       	swap	r30
    15a6:	f2 95       	swap	r31
    15a8:	f0 7f       	andi	r31, 0xF0	; 240
    15aa:	fe 27       	eor	r31, r30
    15ac:	e0 7f       	andi	r30, 0xF0	; 240
    15ae:	fe 27       	eor	r31, r30
    15b0:	e8 59       	subi	r30, 0x98	; 152
    15b2:	f6 4d       	sbci	r31, 0xD6	; 214
    15b4:	26 89       	ldd	r18, Z+22	; 0x16
    15b6:	37 89       	ldd	r19, Z+23	; 0x17
    15b8:	20 93 61 2a 	sts	0x2A61, r18
    15bc:	44 c0       	rjmp	.+136    	; 0x1646 <ir_transmit+0x144>
    15be:	fc 01       	movw	r30, r24
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	e2 95       	swap	r30
    15c6:	f2 95       	swap	r31
    15c8:	f0 7f       	andi	r31, 0xF0	; 240
    15ca:	fe 27       	eor	r31, r30
    15cc:	e0 7f       	andi	r30, 0xF0	; 240
    15ce:	fe 27       	eor	r31, r30
    15d0:	e8 59       	subi	r30, 0x98	; 152
    15d2:	f6 4d       	sbci	r31, 0xD6	; 214
    15d4:	26 89       	ldd	r18, Z+22	; 0x16
    15d6:	37 89       	ldd	r19, Z+23	; 0x17
    15d8:	30 93 61 2a 	sts	0x2A61, r19
    15dc:	34 c0       	rjmp	.+104    	; 0x1646 <ir_transmit+0x144>
    15de:	fc 01       	movw	r30, r24
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	e2 95       	swap	r30
    15e6:	f2 95       	swap	r31
    15e8:	f0 7f       	andi	r31, 0xF0	; 240
    15ea:	fe 27       	eor	r31, r30
    15ec:	e0 7f       	andi	r30, 0xF0	; 240
    15ee:	fe 27       	eor	r31, r30
    15f0:	e8 59       	subi	r30, 0x98	; 152
    15f2:	f6 4d       	sbci	r31, 0xD6	; 214
    15f4:	20 8d       	ldd	r18, Z+24	; 0x18
    15f6:	31 8d       	ldd	r19, Z+25	; 0x19
    15f8:	20 93 61 2a 	sts	0x2A61, r18
    15fc:	24 c0       	rjmp	.+72     	; 0x1646 <ir_transmit+0x144>
    15fe:	fc 01       	movw	r30, r24
    1600:	ee 0f       	add	r30, r30
    1602:	ff 1f       	adc	r31, r31
    1604:	e2 95       	swap	r30
    1606:	f2 95       	swap	r31
    1608:	f0 7f       	andi	r31, 0xF0	; 240
    160a:	fe 27       	eor	r31, r30
    160c:	e0 7f       	andi	r30, 0xF0	; 240
    160e:	fe 27       	eor	r31, r30
    1610:	e8 59       	subi	r30, 0x98	; 152
    1612:	f6 4d       	sbci	r31, 0xD6	; 214
    1614:	20 8d       	ldd	r18, Z+24	; 0x18
    1616:	31 8d       	ldd	r19, Z+25	; 0x19
    1618:	30 93 61 2a 	sts	0x2A61, r19
    161c:	14 c0       	rjmp	.+40     	; 0x1646 <ir_transmit+0x144>
    161e:	fc 01       	movw	r30, r24
    1620:	ee 0f       	add	r30, r30
    1622:	ff 1f       	adc	r31, r31
    1624:	e2 95       	swap	r30
    1626:	f2 95       	swap	r31
    1628:	f0 7f       	andi	r31, 0xF0	; 240
    162a:	fe 27       	eor	r31, r30
    162c:	e0 7f       	andi	r30, 0xF0	; 240
    162e:	fe 27       	eor	r31, r30
    1630:	e8 59       	subi	r30, 0x98	; 152
    1632:	f6 4d       	sbci	r31, 0xD6	; 214
    1634:	22 8d       	ldd	r18, Z+26	; 0x1a
    1636:	33 8d       	ldd	r19, Z+27	; 0x1b
    1638:	27 50       	subi	r18, 0x07	; 7
    163a:	31 09       	sbc	r19, r1
    163c:	e2 0f       	add	r30, r18
    163e:	f3 1f       	adc	r31, r19
    1640:	24 81       	ldd	r18, Z+4	; 0x04
    1642:	20 93 61 2a 	sts	0x2A61, r18
    1646:	fc 01       	movw	r30, r24
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ea 5f       	subi	r30, 0xFA	; 250
    164e:	ff 4d       	sbci	r31, 0xDF	; 223
    1650:	01 90       	ld	r0, Z+
    1652:	f0 81       	ld	r31, Z
    1654:	e0 2d       	mov	r30, r0
    1656:	20 91 61 2a 	lds	r18, 0x2A61
    165a:	20 83       	st	Z, r18
    165c:	fc 01       	movw	r30, r24
    165e:	ee 0f       	add	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	e2 95       	swap	r30
    1664:	f2 95       	swap	r31
    1666:	f0 7f       	andi	r31, 0xF0	; 240
    1668:	fe 27       	eor	r31, r30
    166a:	e0 7f       	andi	r30, 0xF0	; 240
    166c:	fe 27       	eor	r31, r30
    166e:	e8 59       	subi	r30, 0x98	; 152
    1670:	f6 4d       	sbci	r31, 0xD6	; 214
    1672:	22 8d       	ldd	r18, Z+26	; 0x1a
    1674:	33 8d       	ldd	r19, Z+27	; 0x1b
    1676:	2f 5f       	subi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	22 8f       	std	Z+26, r18	; 0x1a
    167c:	33 8f       	std	Z+27, r19	; 0x1b
    167e:	42 8d       	ldd	r20, Z+26	; 0x1a
    1680:	53 8d       	ldd	r21, Z+27	; 0x1b
    1682:	26 8d       	ldd	r18, Z+30	; 0x1e
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	29 5f       	subi	r18, 0xF9	; 249
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	42 17       	cp	r20, r18
    168c:	53 07       	cpc	r21, r19
    168e:	50 f1       	brcs	.+84     	; 0x16e4 <ir_transmit+0x1e2>
    1690:	fc 01       	movw	r30, r24
    1692:	ee 0f       	add	r30, r30
    1694:	ff 1f       	adc	r31, r31
    1696:	e2 95       	swap	r30
    1698:	f2 95       	swap	r31
    169a:	f0 7f       	andi	r31, 0xF0	; 240
    169c:	fe 27       	eor	r31, r30
    169e:	e0 7f       	andi	r30, 0xF0	; 240
    16a0:	fe 27       	eor	r31, r30
    16a2:	e8 59       	subi	r30, 0x98	; 152
    16a4:	f6 4d       	sbci	r31, 0xD6	; 214
    16a6:	14 8a       	std	Z+20, r1	; 0x14
    16a8:	15 8a       	std	Z+21, r1	; 0x15
    16aa:	16 8a       	std	Z+22, r1	; 0x16
    16ac:	17 8a       	std	Z+23, r1	; 0x17
    16ae:	10 8e       	std	Z+24, r1	; 0x18
    16b0:	11 8e       	std	Z+25, r1	; 0x19
    16b2:	12 8e       	std	Z+26, r1	; 0x1a
    16b4:	13 8e       	std	Z+27, r1	; 0x1b
    16b6:	14 8e       	std	Z+28, r1	; 0x1c
    16b8:	15 8e       	std	Z+29, r1	; 0x1d
    16ba:	16 8e       	std	Z+30, r1	; 0x1e
    16bc:	17 8e       	std	Z+31, r1	; 0x1f
    16be:	fc 01       	movw	r30, r24
    16c0:	ee 0f       	add	r30, r30
    16c2:	ff 1f       	adc	r31, r31
    16c4:	ea 5f       	subi	r30, 0xFA	; 250
    16c6:	ff 4d       	sbci	r31, 0xDF	; 223
    16c8:	a0 81       	ld	r26, Z
    16ca:	b1 81       	ldd	r27, Z+1	; 0x01
    16cc:	14 96       	adiw	r26, 0x04	; 4
    16ce:	8c 91       	ld	r24, X
    16d0:	14 97       	sbiw	r26, 0x04	; 4
    16d2:	80 61       	ori	r24, 0x10	; 16
    16d4:	14 96       	adiw	r26, 0x04	; 4
    16d6:	8c 93       	st	X, r24
    16d8:	01 90       	ld	r0, Z+
    16da:	f0 81       	ld	r31, Z
    16dc:	e0 2d       	mov	r30, r0
    16de:	83 81       	ldd	r24, Z+3	; 0x03
    16e0:	8c 7f       	andi	r24, 0xFC	; 252
    16e2:	83 83       	std	Z+3, r24	; 0x03
    16e4:	08 95       	ret

000016e6 <ir_transmit_complete>:
    16e6:	e0 e0       	ldi	r30, 0x00	; 0
    16e8:	fb e0       	ldi	r31, 0x0B	; 11
    16ea:	31 81       	ldd	r19, Z+1	; 0x01
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	dc 01       	movw	r26, r24
    16f0:	a0 50       	subi	r26, 0x00	; 0
    16f2:	b0 4e       	sbci	r27, 0xE0	; 224
    16f4:	2c 91       	ld	r18, X
    16f6:	20 95       	com	r18
    16f8:	23 23       	and	r18, r19
    16fa:	21 83       	std	Z+1, r18	; 0x01
    16fc:	fc 01       	movw	r30, r24
    16fe:	ee 0f       	add	r30, r30
    1700:	ff 1f       	adc	r31, r31
    1702:	e2 95       	swap	r30
    1704:	f2 95       	swap	r31
    1706:	f0 7f       	andi	r31, 0xF0	; 240
    1708:	fe 27       	eor	r31, r30
    170a:	e0 7f       	andi	r30, 0xF0	; 240
    170c:	fe 27       	eor	r31, r30
    170e:	e8 59       	subi	r30, 0x98	; 152
    1710:	f6 4d       	sbci	r31, 0xD6	; 214
    1712:	17 8e       	std	Z+31, r1	; 0x1f
    1714:	16 8e       	std	Z+30, r1	; 0x1e
    1716:	12 8e       	std	Z+26, r1	; 0x1a
    1718:	13 8e       	std	Z+27, r1	; 0x1b
    171a:	10 8e       	std	Z+24, r1	; 0x18
    171c:	11 8e       	std	Z+25, r1	; 0x19
    171e:	16 8a       	std	Z+22, r1	; 0x16
    1720:	17 8a       	std	Z+23, r1	; 0x17
    1722:	fc 01       	movw	r30, r24
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	ea 5f       	subi	r30, 0xFA	; 250
    172a:	ff 4d       	sbci	r31, 0xDF	; 223
    172c:	a0 81       	ld	r26, Z
    172e:	b1 81       	ldd	r27, Z+1	; 0x01
    1730:	11 96       	adiw	r26, 0x01	; 1
    1732:	8c 91       	ld	r24, X
    1734:	11 97       	sbiw	r26, 0x01	; 1
    1736:	80 64       	ori	r24, 0x40	; 64
    1738:	11 96       	adiw	r26, 0x01	; 1
    173a:	8c 93       	st	X, r24
    173c:	01 90       	ld	r0, Z+
    173e:	f0 81       	ld	r31, Z
    1740:	e0 2d       	mov	r30, r0
    1742:	84 81       	ldd	r24, Z+4	; 0x04
    1744:	80 61       	ori	r24, 0x10	; 16
    1746:	84 83       	std	Z+4, r24	; 0x04
    1748:	08 95       	ret

0000174a <wait_for_ir>:
{
	uint8_t busy;
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
    174a:	60 e0       	ldi	r22, 0x00	; 0
		{
			if(dirs&(1<<dir))
    174c:	48 2f       	mov	r20, r24
    174e:	50 e0       	ldi	r21, 0x00	; 0
    1750:	26 2f       	mov	r18, r22
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	ca 01       	movw	r24, r20
    1756:	06 2e       	mov	r0, r22
    1758:	02 c0       	rjmp	.+4      	; 0x175e <wait_for_ir+0x14>
    175a:	95 95       	asr	r25
    175c:	87 95       	ror	r24
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <wait_for_ir+0x10>
    1762:	80 ff       	sbrs	r24, 0
    1764:	0e c0       	rjmp	.+28     	; 0x1782 <wait_for_ir+0x38>
			{
				if(ir_rxtx[dir].status & IR_STATUS_UNAVAILABLE_bm)
    1766:	f9 01       	movw	r30, r18
    1768:	ee 0f       	add	r30, r30
    176a:	ff 1f       	adc	r31, r31
    176c:	e2 95       	swap	r30
    176e:	f2 95       	swap	r31
    1770:	f0 7f       	andi	r31, 0xF0	; 240
    1772:	fe 27       	eor	r31, r30
    1774:	e0 7f       	andi	r30, 0xF0	; 240
    1776:	fe 27       	eor	r31, r30
    1778:	e8 59       	subi	r30, 0x98	; 152
    177a:	f6 4d       	sbci	r31, 0xD6	; 214
    177c:	87 8d       	ldd	r24, Z+31	; 0x1f
    177e:	83 70       	andi	r24, 0x03	; 3
    1780:	21 f4       	brne	.+8      	; 0x178a <wait_for_ir+0x40>
{
	uint8_t busy;
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
    1782:	6f 5f       	subi	r22, 0xFF	; 255
    1784:	66 30       	cpi	r22, 0x06	; 6
    1786:	20 f3       	brcs	.-56     	; 0x1750 <wait_for_ir+0x6>
    1788:	08 95       	ret
    178a:	60 e0       	ldi	r22, 0x00	; 0
    178c:	e1 cf       	rjmp	.-62     	; 0x1750 <wait_for_ir+0x6>

0000178e <ir_targeted_cmd>:
}
#endif


void ir_targeted_cmd(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	d8 2e       	mov	r13, r24
    17a0:	7b 01       	movw	r14, r22
    17a2:	c4 2e       	mov	r12, r20
    17a4:	89 01       	movw	r16, r18
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
    17a6:	d1 df       	rcall	.-94     	; 0x174a <wait_for_ir>
    17a8:	a6 e0       	ldi	r26, 0x06	; 6
    17aa:	b0 e2       	ldi	r27, 0x20	; 32
    17ac:	e0 e0       	ldi	r30, 0x00	; 0
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    17b0:	2d 2d       	mov	r18, r13
    17b2:	30 e0       	ldi	r19, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    17b4:	91 e0       	ldi	r25, 0x01	; 1
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    17b6:	e9 01       	movw	r28, r18
    17b8:	0e 2e       	mov	r0, r30
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <ir_targeted_cmd+0x32>
    17bc:	d5 95       	asr	r29
    17be:	c7 95       	ror	r28
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <ir_targeted_cmd+0x2e>
    17c4:	c0 ff       	sbrs	r28, 0
    17c6:	17 c0       	rjmp	.+46     	; 0x17f6 <ir_targeted_cmd+0x68>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    17c8:	cd 91       	ld	r28, X+
    17ca:	dc 91       	ld	r29, X
    17cc:	11 97       	sbiw	r26, 0x01	; 1
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	8f 7e       	andi	r24, 0xEF	; 239
    17d2:	8c 83       	std	Y+4, r24	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    17d4:	ef 01       	movw	r28, r30
    17d6:	cc 0f       	add	r28, r28
    17d8:	dd 1f       	adc	r29, r29
    17da:	c2 95       	swap	r28
    17dc:	d2 95       	swap	r29
    17de:	d0 7f       	andi	r29, 0xF0	; 240
    17e0:	dc 27       	eor	r29, r28
    17e2:	c0 7f       	andi	r28, 0xF0	; 240
    17e4:	dc 27       	eor	r29, r28
    17e6:	c8 59       	subi	r28, 0x98	; 152
    17e8:	d6 4d       	sbci	r29, 0xD6	; 214
    17ea:	9f 8f       	std	Y+31, r25	; 0x1f
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    17ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    17ee:	88 60       	ori	r24, 0x08	; 8
    17f0:	8f 8f       	std	Y+31, r24	; 0x1f
			ir_rxtx[dir].target_ID=target;
    17f2:	08 8f       	std	Y+24, r16	; 0x18
    17f4:	19 8f       	std	Y+25, r17	; 0x19
    17f6:	31 96       	adiw	r30, 0x01	; 1
    17f8:	12 96       	adiw	r26, 0x02	; 2
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    17fa:	e6 30       	cpi	r30, 0x06	; 6
    17fc:	f1 05       	cpc	r31, r1
    17fe:	d9 f6       	brne	.-74     	; 0x17b6 <ir_targeted_cmd+0x28>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    1800:	4c 2d       	mov	r20, r12
    1802:	b7 01       	movw	r22, r14
    1804:	8d 2d       	mov	r24, r13
    1806:	4a db       	rcall	.-2412   	; 0xe9c <send_msg>


void ir_targeted_cmd(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
	all_ir_sends(dirs, data, data_length, target, 1);
}
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	08 95       	ret

0000181a <ir_cmd>:

void ir_cmd(uint8_t dirs, char *data, uint16_t data_length)
{	
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	18 2f       	mov	r17, r24
    1824:	eb 01       	movw	r28, r22
    1826:	04 2f       	mov	r16, r20
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
    1828:	90 df       	rcall	.-224    	; 0x174a <wait_for_ir>
    182a:	e6 e0       	ldi	r30, 0x06	; 6
    182c:	f0 e2       	ldi	r31, 0x20	; 32
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1832:	61 2f       	mov	r22, r17
    1834:	70 e0       	ldi	r23, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    1836:	91 e0       	ldi	r25, 0x01	; 1
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1838:	db 01       	movw	r26, r22
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <ir_cmd+0x28>
    183e:	b5 95       	asr	r27
    1840:	a7 95       	ror	r26
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <ir_cmd+0x24>
    1846:	a0 ff       	sbrs	r26, 0
    1848:	21 c0       	rjmp	.+66     	; 0x188c <ir_cmd+0x72>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    184a:	a0 81       	ld	r26, Z
    184c:	b1 81       	ldd	r27, Z+1	; 0x01
    184e:	14 96       	adiw	r26, 0x04	; 4
    1850:	8c 91       	ld	r24, X
    1852:	14 97       	sbiw	r26, 0x04	; 4
    1854:	8f 7e       	andi	r24, 0xEF	; 239
    1856:	14 96       	adiw	r26, 0x04	; 4
    1858:	8c 93       	st	X, r24
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    185a:	d9 01       	movw	r26, r18
    185c:	aa 0f       	add	r26, r26
    185e:	bb 1f       	adc	r27, r27
    1860:	a2 95       	swap	r26
    1862:	b2 95       	swap	r27
    1864:	b0 7f       	andi	r27, 0xF0	; 240
    1866:	ba 27       	eor	r27, r26
    1868:	a0 7f       	andi	r26, 0xF0	; 240
    186a:	ba 27       	eor	r27, r26
    186c:	a8 59       	subi	r26, 0x98	; 152
    186e:	b6 4d       	sbci	r27, 0xD6	; 214
    1870:	5f 96       	adiw	r26, 0x1f	; 31
    1872:	9c 93       	st	X, r25
    1874:	5f 97       	sbiw	r26, 0x1f	; 31
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    1876:	5f 96       	adiw	r26, 0x1f	; 31
    1878:	8c 91       	ld	r24, X
    187a:	5f 97       	sbiw	r26, 0x1f	; 31
    187c:	88 60       	ori	r24, 0x08	; 8
    187e:	5f 96       	adiw	r26, 0x1f	; 31
    1880:	8c 93       	st	X, r24
    1882:	5f 97       	sbiw	r26, 0x1f	; 31
			ir_rxtx[dir].target_ID=target;
    1884:	58 96       	adiw	r26, 0x18	; 24
    1886:	1d 92       	st	X+, r1
    1888:	1c 92       	st	X, r1
    188a:	59 97       	sbiw	r26, 0x19	; 25
    188c:	2f 5f       	subi	r18, 0xFF	; 255
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	32 96       	adiw	r30, 0x02	; 2
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    1892:	26 30       	cpi	r18, 0x06	; 6
    1894:	31 05       	cpc	r19, r1
    1896:	81 f6       	brne	.-96     	; 0x1838 <ir_cmd+0x1e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    1898:	40 2f       	mov	r20, r16
    189a:	be 01       	movw	r22, r28
    189c:	81 2f       	mov	r24, r17
    189e:	fe da       	rcall	.-2564   	; 0xe9c <send_msg>
}

void ir_cmd(uint8_t dirs, char *data, uint16_t data_length)
{	
	all_ir_sends(dirs, data, data_length, 0, 1);
}
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <ir_targeted_send>:

void ir_targeted_send(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    18aa:	cf 92       	push	r12
    18ac:	df 92       	push	r13
    18ae:	ef 92       	push	r14
    18b0:	ff 92       	push	r15
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	d8 2e       	mov	r13, r24
    18bc:	7b 01       	movw	r14, r22
    18be:	c4 2e       	mov	r12, r20
    18c0:	89 01       	movw	r16, r18
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
    18c2:	43 df       	rcall	.-378    	; 0x174a <wait_for_ir>
    18c4:	a6 e0       	ldi	r26, 0x06	; 6
    18c6:	b0 e2       	ldi	r27, 0x20	; 32
    18c8:	e0 e0       	ldi	r30, 0x00	; 0
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    18cc:	2d 2d       	mov	r18, r13
    18ce:	30 e0       	ldi	r19, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    18d0:	91 e0       	ldi	r25, 0x01	; 1
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    18d2:	e9 01       	movw	r28, r18
    18d4:	0e 2e       	mov	r0, r30
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <ir_targeted_send+0x32>
    18d8:	d5 95       	asr	r29
    18da:	c7 95       	ror	r28
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <ir_targeted_send+0x2e>
    18e0:	c0 ff       	sbrs	r28, 0
    18e2:	14 c0       	rjmp	.+40     	; 0x190c <ir_targeted_send+0x62>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    18e4:	cd 91       	ld	r28, X+
    18e6:	dc 91       	ld	r29, X
    18e8:	11 97       	sbiw	r26, 0x01	; 1
    18ea:	8c 81       	ldd	r24, Y+4	; 0x04
    18ec:	8f 7e       	andi	r24, 0xEF	; 239
    18ee:	8c 83       	std	Y+4, r24	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    18f0:	ef 01       	movw	r28, r30
    18f2:	cc 0f       	add	r28, r28
    18f4:	dd 1f       	adc	r29, r29
    18f6:	c2 95       	swap	r28
    18f8:	d2 95       	swap	r29
    18fa:	d0 7f       	andi	r29, 0xF0	; 240
    18fc:	dc 27       	eor	r29, r28
    18fe:	c0 7f       	andi	r28, 0xF0	; 240
    1900:	dc 27       	eor	r29, r28
    1902:	c8 59       	subi	r28, 0x98	; 152
    1904:	d6 4d       	sbci	r29, 0xD6	; 214
    1906:	9f 8f       	std	Y+31, r25	; 0x1f
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    1908:	08 8f       	std	Y+24, r16	; 0x18
    190a:	19 8f       	std	Y+25, r17	; 0x19
    190c:	31 96       	adiw	r30, 0x01	; 1
    190e:	12 96       	adiw	r26, 0x02	; 2
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    1910:	e6 30       	cpi	r30, 0x06	; 6
    1912:	f1 05       	cpc	r31, r1
    1914:	f1 f6       	brne	.-68     	; 0x18d2 <ir_targeted_send+0x28>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    1916:	4c 2d       	mov	r20, r12
    1918:	b7 01       	movw	r22, r14
    191a:	8d 2d       	mov	r24, r13
    191c:	bf da       	rcall	.-2690   	; 0xe9c <send_msg>
}

void ir_targeted_send(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
	all_ir_sends(dirs, data, data_length, target, 0);
}
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	0f 91       	pop	r16
    1926:	ff 90       	pop	r15
    1928:	ef 90       	pop	r14
    192a:	df 90       	pop	r13
    192c:	cf 90       	pop	r12
    192e:	08 95       	ret

00001930 <ir_send>:

void ir_send(uint8_t dirs, char *data, uint8_t data_length)
{
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	18 2f       	mov	r17, r24
    193a:	eb 01       	movw	r28, r22
    193c:	04 2f       	mov	r16, r20
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
    193e:	05 df       	rcall	.-502    	; 0x174a <wait_for_ir>
    1940:	e6 e0       	ldi	r30, 0x06	; 6
    1942:	f0 e2       	ldi	r31, 0x20	; 32
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1948:	61 2f       	mov	r22, r17
    194a:	70 e0       	ldi	r23, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    194c:	91 e0       	ldi	r25, 0x01	; 1
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    194e:	db 01       	movw	r26, r22
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <ir_send+0x28>
    1954:	b5 95       	asr	r27
    1956:	a7 95       	ror	r26
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <ir_send+0x24>
    195c:	a0 ff       	sbrs	r26, 0
    195e:	1a c0       	rjmp	.+52     	; 0x1994 <ir_send+0x64>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    1960:	a0 81       	ld	r26, Z
    1962:	b1 81       	ldd	r27, Z+1	; 0x01
    1964:	14 96       	adiw	r26, 0x04	; 4
    1966:	8c 91       	ld	r24, X
    1968:	14 97       	sbiw	r26, 0x04	; 4
    196a:	8f 7e       	andi	r24, 0xEF	; 239
    196c:	14 96       	adiw	r26, 0x04	; 4
    196e:	8c 93       	st	X, r24
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    1970:	d9 01       	movw	r26, r18
    1972:	aa 0f       	add	r26, r26
    1974:	bb 1f       	adc	r27, r27
    1976:	a2 95       	swap	r26
    1978:	b2 95       	swap	r27
    197a:	b0 7f       	andi	r27, 0xF0	; 240
    197c:	ba 27       	eor	r27, r26
    197e:	a0 7f       	andi	r26, 0xF0	; 240
    1980:	ba 27       	eor	r27, r26
    1982:	a8 59       	subi	r26, 0x98	; 152
    1984:	b6 4d       	sbci	r27, 0xD6	; 214
    1986:	5f 96       	adiw	r26, 0x1f	; 31
    1988:	9c 93       	st	X, r25
    198a:	5f 97       	sbiw	r26, 0x1f	; 31
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    198c:	58 96       	adiw	r26, 0x18	; 24
    198e:	1d 92       	st	X+, r1
    1990:	1c 92       	st	X, r1
    1992:	59 97       	sbiw	r26, 0x19	; 25
    1994:	2f 5f       	subi	r18, 0xFF	; 255
    1996:	3f 4f       	sbci	r19, 0xFF	; 255
    1998:	32 96       	adiw	r30, 0x02	; 2
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    199a:	26 30       	cpi	r18, 0x06	; 6
    199c:	31 05       	cpc	r19, r1
    199e:	b9 f6       	brne	.-82     	; 0x194e <ir_send+0x1e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    19a0:	40 2f       	mov	r20, r16
    19a2:	be 01       	movw	r22, r28
    19a4:	81 2f       	mov	r24, r17
    19a6:	7a da       	rcall	.-2828   	; 0xe9c <send_msg>
}

void ir_send(uint8_t dirs, char *data, uint8_t data_length)
{
	all_ir_sends(dirs, data, data_length, 0, 0);
}
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret

000019b2 <__vector_25>:
		}
	} while (busy);
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { ir_receive(0); }
    19b2:	1f 92       	push	r1
    19b4:	0f 92       	push	r0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	0f 92       	push	r0
    19ba:	11 24       	eor	r1, r1
    19bc:	0b b6       	in	r0, 0x3b	; 59
    19be:	0f 92       	push	r0
    19c0:	2f 93       	push	r18
    19c2:	3f 93       	push	r19
    19c4:	4f 93       	push	r20
    19c6:	5f 93       	push	r21
    19c8:	6f 93       	push	r22
    19ca:	7f 93       	push	r23
    19cc:	8f 93       	push	r24
    19ce:	9f 93       	push	r25
    19d0:	af 93       	push	r26
    19d2:	bf 93       	push	r27
    19d4:	ef 93       	push	r30
    19d6:	ff 93       	push	r31
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	57 db       	rcall	.-2386   	; 0x108a <ir_receive>
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0b be       	out	0x3b, r0	; 59
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0
    19fe:	1f 90       	pop	r1
    1a00:	18 95       	reti

00001a02 <__vector_27>:
ISR( USARTC0_TXC_vect ) { ir_transmit_complete(0); }
    1a02:	1f 92       	push	r1
    1a04:	0f 92       	push	r0
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	0f 92       	push	r0
    1a0a:	11 24       	eor	r1, r1
    1a0c:	0b b6       	in	r0, 0x3b	; 59
    1a0e:	0f 92       	push	r0
    1a10:	2f 93       	push	r18
    1a12:	3f 93       	push	r19
    1a14:	4f 93       	push	r20
    1a16:	5f 93       	push	r21
    1a18:	6f 93       	push	r22
    1a1a:	7f 93       	push	r23
    1a1c:	8f 93       	push	r24
    1a1e:	9f 93       	push	r25
    1a20:	af 93       	push	r26
    1a22:	bf 93       	push	r27
    1a24:	ef 93       	push	r30
    1a26:	ff 93       	push	r31
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	5d de       	rcall	.-838    	; 0x16e6 <ir_transmit_complete>
    1a2c:	ff 91       	pop	r31
    1a2e:	ef 91       	pop	r30
    1a30:	bf 91       	pop	r27
    1a32:	af 91       	pop	r26
    1a34:	9f 91       	pop	r25
    1a36:	8f 91       	pop	r24
    1a38:	7f 91       	pop	r23
    1a3a:	6f 91       	pop	r22
    1a3c:	5f 91       	pop	r21
    1a3e:	4f 91       	pop	r20
    1a40:	3f 91       	pop	r19
    1a42:	2f 91       	pop	r18
    1a44:	0f 90       	pop	r0
    1a46:	0b be       	out	0x3b, r0	; 59
    1a48:	0f 90       	pop	r0
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	0f 90       	pop	r0
    1a4e:	1f 90       	pop	r1
    1a50:	18 95       	reti

00001a52 <__vector_26>:
ISR( USARTC0_DRE_vect ) { ir_transmit(0); }
    1a52:	1f 92       	push	r1
    1a54:	0f 92       	push	r0
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	0f 92       	push	r0
    1a5a:	11 24       	eor	r1, r1
    1a5c:	0b b6       	in	r0, 0x3b	; 59
    1a5e:	0f 92       	push	r0
    1a60:	2f 93       	push	r18
    1a62:	3f 93       	push	r19
    1a64:	4f 93       	push	r20
    1a66:	5f 93       	push	r21
    1a68:	6f 93       	push	r22
    1a6a:	7f 93       	push	r23
    1a6c:	8f 93       	push	r24
    1a6e:	9f 93       	push	r25
    1a70:	af 93       	push	r26
    1a72:	bf 93       	push	r27
    1a74:	ef 93       	push	r30
    1a76:	ff 93       	push	r31
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	43 dd       	rcall	.-1402   	; 0x1502 <ir_transmit>
    1a7c:	ff 91       	pop	r31
    1a7e:	ef 91       	pop	r30
    1a80:	bf 91       	pop	r27
    1a82:	af 91       	pop	r26
    1a84:	9f 91       	pop	r25
    1a86:	8f 91       	pop	r24
    1a88:	7f 91       	pop	r23
    1a8a:	6f 91       	pop	r22
    1a8c:	5f 91       	pop	r21
    1a8e:	4f 91       	pop	r20
    1a90:	3f 91       	pop	r19
    1a92:	2f 91       	pop	r18
    1a94:	0f 90       	pop	r0
    1a96:	0b be       	out	0x3b, r0	; 59
    1a98:	0f 90       	pop	r0
    1a9a:	0f be       	out	0x3f, r0	; 63
    1a9c:	0f 90       	pop	r0
    1a9e:	1f 90       	pop	r1
    1aa0:	18 95       	reti

00001aa2 <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { ir_receive(1); }
    1aa2:	1f 92       	push	r1
    1aa4:	0f 92       	push	r0
    1aa6:	0f b6       	in	r0, 0x3f	; 63
    1aa8:	0f 92       	push	r0
    1aaa:	11 24       	eor	r1, r1
    1aac:	0b b6       	in	r0, 0x3b	; 59
    1aae:	0f 92       	push	r0
    1ab0:	2f 93       	push	r18
    1ab2:	3f 93       	push	r19
    1ab4:	4f 93       	push	r20
    1ab6:	5f 93       	push	r21
    1ab8:	6f 93       	push	r22
    1aba:	7f 93       	push	r23
    1abc:	8f 93       	push	r24
    1abe:	9f 93       	push	r25
    1ac0:	af 93       	push	r26
    1ac2:	bf 93       	push	r27
    1ac4:	ef 93       	push	r30
    1ac6:	ff 93       	push	r31
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	df da       	rcall	.-2626   	; 0x108a <ir_receive>
    1acc:	ff 91       	pop	r31
    1ace:	ef 91       	pop	r30
    1ad0:	bf 91       	pop	r27
    1ad2:	af 91       	pop	r26
    1ad4:	9f 91       	pop	r25
    1ad6:	8f 91       	pop	r24
    1ad8:	7f 91       	pop	r23
    1ada:	6f 91       	pop	r22
    1adc:	5f 91       	pop	r21
    1ade:	4f 91       	pop	r20
    1ae0:	3f 91       	pop	r19
    1ae2:	2f 91       	pop	r18
    1ae4:	0f 90       	pop	r0
    1ae6:	0b be       	out	0x3b, r0	; 59
    1ae8:	0f 90       	pop	r0
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	0f 90       	pop	r0
    1aee:	1f 90       	pop	r1
    1af0:	18 95       	reti

00001af2 <__vector_30>:
ISR( USARTC1_TXC_vect ) { ir_transmit_complete(1); }
    1af2:	1f 92       	push	r1
    1af4:	0f 92       	push	r0
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	0f 92       	push	r0
    1afa:	11 24       	eor	r1, r1
    1afc:	0b b6       	in	r0, 0x3b	; 59
    1afe:	0f 92       	push	r0
    1b00:	2f 93       	push	r18
    1b02:	3f 93       	push	r19
    1b04:	4f 93       	push	r20
    1b06:	5f 93       	push	r21
    1b08:	6f 93       	push	r22
    1b0a:	7f 93       	push	r23
    1b0c:	8f 93       	push	r24
    1b0e:	9f 93       	push	r25
    1b10:	af 93       	push	r26
    1b12:	bf 93       	push	r27
    1b14:	ef 93       	push	r30
    1b16:	ff 93       	push	r31
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	e5 dd       	rcall	.-1078   	; 0x16e6 <ir_transmit_complete>
    1b1c:	ff 91       	pop	r31
    1b1e:	ef 91       	pop	r30
    1b20:	bf 91       	pop	r27
    1b22:	af 91       	pop	r26
    1b24:	9f 91       	pop	r25
    1b26:	8f 91       	pop	r24
    1b28:	7f 91       	pop	r23
    1b2a:	6f 91       	pop	r22
    1b2c:	5f 91       	pop	r21
    1b2e:	4f 91       	pop	r20
    1b30:	3f 91       	pop	r19
    1b32:	2f 91       	pop	r18
    1b34:	0f 90       	pop	r0
    1b36:	0b be       	out	0x3b, r0	; 59
    1b38:	0f 90       	pop	r0
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	0f 90       	pop	r0
    1b3e:	1f 90       	pop	r1
    1b40:	18 95       	reti

00001b42 <__vector_29>:
ISR( USARTC1_DRE_vect ) { ir_transmit(1); }
    1b42:	1f 92       	push	r1
    1b44:	0f 92       	push	r0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	0f 92       	push	r0
    1b4a:	11 24       	eor	r1, r1
    1b4c:	0b b6       	in	r0, 0x3b	; 59
    1b4e:	0f 92       	push	r0
    1b50:	2f 93       	push	r18
    1b52:	3f 93       	push	r19
    1b54:	4f 93       	push	r20
    1b56:	5f 93       	push	r21
    1b58:	6f 93       	push	r22
    1b5a:	7f 93       	push	r23
    1b5c:	8f 93       	push	r24
    1b5e:	9f 93       	push	r25
    1b60:	af 93       	push	r26
    1b62:	bf 93       	push	r27
    1b64:	ef 93       	push	r30
    1b66:	ff 93       	push	r31
    1b68:	81 e0       	ldi	r24, 0x01	; 1
    1b6a:	cb dc       	rcall	.-1642   	; 0x1502 <ir_transmit>
    1b6c:	ff 91       	pop	r31
    1b6e:	ef 91       	pop	r30
    1b70:	bf 91       	pop	r27
    1b72:	af 91       	pop	r26
    1b74:	9f 91       	pop	r25
    1b76:	8f 91       	pop	r24
    1b78:	7f 91       	pop	r23
    1b7a:	6f 91       	pop	r22
    1b7c:	5f 91       	pop	r21
    1b7e:	4f 91       	pop	r20
    1b80:	3f 91       	pop	r19
    1b82:	2f 91       	pop	r18
    1b84:	0f 90       	pop	r0
    1b86:	0b be       	out	0x3b, r0	; 59
    1b88:	0f 90       	pop	r0
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	0f 90       	pop	r0
    1b8e:	1f 90       	pop	r1
    1b90:	18 95       	reti

00001b92 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { ir_receive(2); }
    1b92:	1f 92       	push	r1
    1b94:	0f 92       	push	r0
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	0f 92       	push	r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	0b b6       	in	r0, 0x3b	; 59
    1b9e:	0f 92       	push	r0
    1ba0:	2f 93       	push	r18
    1ba2:	3f 93       	push	r19
    1ba4:	4f 93       	push	r20
    1ba6:	5f 93       	push	r21
    1ba8:	6f 93       	push	r22
    1baa:	7f 93       	push	r23
    1bac:	8f 93       	push	r24
    1bae:	9f 93       	push	r25
    1bb0:	af 93       	push	r26
    1bb2:	bf 93       	push	r27
    1bb4:	ef 93       	push	r30
    1bb6:	ff 93       	push	r31
    1bb8:	82 e0       	ldi	r24, 0x02	; 2
    1bba:	67 da       	rcall	.-2866   	; 0x108a <ir_receive>
    1bbc:	ff 91       	pop	r31
    1bbe:	ef 91       	pop	r30
    1bc0:	bf 91       	pop	r27
    1bc2:	af 91       	pop	r26
    1bc4:	9f 91       	pop	r25
    1bc6:	8f 91       	pop	r24
    1bc8:	7f 91       	pop	r23
    1bca:	6f 91       	pop	r22
    1bcc:	5f 91       	pop	r21
    1bce:	4f 91       	pop	r20
    1bd0:	3f 91       	pop	r19
    1bd2:	2f 91       	pop	r18
    1bd4:	0f 90       	pop	r0
    1bd6:	0b be       	out	0x3b, r0	; 59
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	0f 90       	pop	r0
    1bde:	1f 90       	pop	r1
    1be0:	18 95       	reti

00001be2 <__vector_90>:
ISR( USARTD0_TXC_vect ) { ir_transmit_complete(2); }
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	0b b6       	in	r0, 0x3b	; 59
    1bee:	0f 92       	push	r0
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
    1c08:	82 e0       	ldi	r24, 0x02	; 2
    1c0a:	6d dd       	rcall	.-1318   	; 0x16e6 <ir_transmit_complete>
    1c0c:	ff 91       	pop	r31
    1c0e:	ef 91       	pop	r30
    1c10:	bf 91       	pop	r27
    1c12:	af 91       	pop	r26
    1c14:	9f 91       	pop	r25
    1c16:	8f 91       	pop	r24
    1c18:	7f 91       	pop	r23
    1c1a:	6f 91       	pop	r22
    1c1c:	5f 91       	pop	r21
    1c1e:	4f 91       	pop	r20
    1c20:	3f 91       	pop	r19
    1c22:	2f 91       	pop	r18
    1c24:	0f 90       	pop	r0
    1c26:	0b be       	out	0x3b, r0	; 59
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	0f 90       	pop	r0
    1c2e:	1f 90       	pop	r1
    1c30:	18 95       	reti

00001c32 <__vector_89>:
ISR( USARTD0_DRE_vect ) { ir_transmit(2); }
    1c32:	1f 92       	push	r1
    1c34:	0f 92       	push	r0
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	0b b6       	in	r0, 0x3b	; 59
    1c3e:	0f 92       	push	r0
    1c40:	2f 93       	push	r18
    1c42:	3f 93       	push	r19
    1c44:	4f 93       	push	r20
    1c46:	5f 93       	push	r21
    1c48:	6f 93       	push	r22
    1c4a:	7f 93       	push	r23
    1c4c:	8f 93       	push	r24
    1c4e:	9f 93       	push	r25
    1c50:	af 93       	push	r26
    1c52:	bf 93       	push	r27
    1c54:	ef 93       	push	r30
    1c56:	ff 93       	push	r31
    1c58:	82 e0       	ldi	r24, 0x02	; 2
    1c5a:	53 dc       	rcall	.-1882   	; 0x1502 <ir_transmit>
    1c5c:	ff 91       	pop	r31
    1c5e:	ef 91       	pop	r30
    1c60:	bf 91       	pop	r27
    1c62:	af 91       	pop	r26
    1c64:	9f 91       	pop	r25
    1c66:	8f 91       	pop	r24
    1c68:	7f 91       	pop	r23
    1c6a:	6f 91       	pop	r22
    1c6c:	5f 91       	pop	r21
    1c6e:	4f 91       	pop	r20
    1c70:	3f 91       	pop	r19
    1c72:	2f 91       	pop	r18
    1c74:	0f 90       	pop	r0
    1c76:	0b be       	out	0x3b, r0	; 59
    1c78:	0f 90       	pop	r0
    1c7a:	0f be       	out	0x3f, r0	; 63
    1c7c:	0f 90       	pop	r0
    1c7e:	1f 90       	pop	r1
    1c80:	18 95       	reti

00001c82 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { ir_receive(3); }
    1c82:	1f 92       	push	r1
    1c84:	0f 92       	push	r0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	0f 92       	push	r0
    1c8a:	11 24       	eor	r1, r1
    1c8c:	0b b6       	in	r0, 0x3b	; 59
    1c8e:	0f 92       	push	r0
    1c90:	2f 93       	push	r18
    1c92:	3f 93       	push	r19
    1c94:	4f 93       	push	r20
    1c96:	5f 93       	push	r21
    1c98:	6f 93       	push	r22
    1c9a:	7f 93       	push	r23
    1c9c:	8f 93       	push	r24
    1c9e:	9f 93       	push	r25
    1ca0:	af 93       	push	r26
    1ca2:	bf 93       	push	r27
    1ca4:	ef 93       	push	r30
    1ca6:	ff 93       	push	r31
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	ef d9       	rcall	.-3106   	; 0x108a <ir_receive>
    1cac:	ff 91       	pop	r31
    1cae:	ef 91       	pop	r30
    1cb0:	bf 91       	pop	r27
    1cb2:	af 91       	pop	r26
    1cb4:	9f 91       	pop	r25
    1cb6:	8f 91       	pop	r24
    1cb8:	7f 91       	pop	r23
    1cba:	6f 91       	pop	r22
    1cbc:	5f 91       	pop	r21
    1cbe:	4f 91       	pop	r20
    1cc0:	3f 91       	pop	r19
    1cc2:	2f 91       	pop	r18
    1cc4:	0f 90       	pop	r0
    1cc6:	0b be       	out	0x3b, r0	; 59
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	0f 90       	pop	r0
    1cce:	1f 90       	pop	r1
    1cd0:	18 95       	reti

00001cd2 <__vector_60>:
ISR( USARTE0_TXC_vect ) { ir_transmit_complete(3); }
    1cd2:	1f 92       	push	r1
    1cd4:	0f 92       	push	r0
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	0f 92       	push	r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	0b b6       	in	r0, 0x3b	; 59
    1cde:	0f 92       	push	r0
    1ce0:	2f 93       	push	r18
    1ce2:	3f 93       	push	r19
    1ce4:	4f 93       	push	r20
    1ce6:	5f 93       	push	r21
    1ce8:	6f 93       	push	r22
    1cea:	7f 93       	push	r23
    1cec:	8f 93       	push	r24
    1cee:	9f 93       	push	r25
    1cf0:	af 93       	push	r26
    1cf2:	bf 93       	push	r27
    1cf4:	ef 93       	push	r30
    1cf6:	ff 93       	push	r31
    1cf8:	83 e0       	ldi	r24, 0x03	; 3
    1cfa:	f5 dc       	rcall	.-1558   	; 0x16e6 <ir_transmit_complete>
    1cfc:	ff 91       	pop	r31
    1cfe:	ef 91       	pop	r30
    1d00:	bf 91       	pop	r27
    1d02:	af 91       	pop	r26
    1d04:	9f 91       	pop	r25
    1d06:	8f 91       	pop	r24
    1d08:	7f 91       	pop	r23
    1d0a:	6f 91       	pop	r22
    1d0c:	5f 91       	pop	r21
    1d0e:	4f 91       	pop	r20
    1d10:	3f 91       	pop	r19
    1d12:	2f 91       	pop	r18
    1d14:	0f 90       	pop	r0
    1d16:	0b be       	out	0x3b, r0	; 59
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	0f 90       	pop	r0
    1d1e:	1f 90       	pop	r1
    1d20:	18 95       	reti

00001d22 <__vector_59>:
ISR( USARTE0_DRE_vect ) { ir_transmit(3); }
    1d22:	1f 92       	push	r1
    1d24:	0f 92       	push	r0
    1d26:	0f b6       	in	r0, 0x3f	; 63
    1d28:	0f 92       	push	r0
    1d2a:	11 24       	eor	r1, r1
    1d2c:	0b b6       	in	r0, 0x3b	; 59
    1d2e:	0f 92       	push	r0
    1d30:	2f 93       	push	r18
    1d32:	3f 93       	push	r19
    1d34:	4f 93       	push	r20
    1d36:	5f 93       	push	r21
    1d38:	6f 93       	push	r22
    1d3a:	7f 93       	push	r23
    1d3c:	8f 93       	push	r24
    1d3e:	9f 93       	push	r25
    1d40:	af 93       	push	r26
    1d42:	bf 93       	push	r27
    1d44:	ef 93       	push	r30
    1d46:	ff 93       	push	r31
    1d48:	83 e0       	ldi	r24, 0x03	; 3
    1d4a:	db db       	rcall	.-2122   	; 0x1502 <ir_transmit>
    1d4c:	ff 91       	pop	r31
    1d4e:	ef 91       	pop	r30
    1d50:	bf 91       	pop	r27
    1d52:	af 91       	pop	r26
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	7f 91       	pop	r23
    1d5a:	6f 91       	pop	r22
    1d5c:	5f 91       	pop	r21
    1d5e:	4f 91       	pop	r20
    1d60:	3f 91       	pop	r19
    1d62:	2f 91       	pop	r18
    1d64:	0f 90       	pop	r0
    1d66:	0b be       	out	0x3b, r0	; 59
    1d68:	0f 90       	pop	r0
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	0f 90       	pop	r0
    1d6e:	1f 90       	pop	r1
    1d70:	18 95       	reti

00001d72 <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { ir_receive(4); }
    1d72:	1f 92       	push	r1
    1d74:	0f 92       	push	r0
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	0f 92       	push	r0
    1d7a:	11 24       	eor	r1, r1
    1d7c:	0b b6       	in	r0, 0x3b	; 59
    1d7e:	0f 92       	push	r0
    1d80:	2f 93       	push	r18
    1d82:	3f 93       	push	r19
    1d84:	4f 93       	push	r20
    1d86:	5f 93       	push	r21
    1d88:	6f 93       	push	r22
    1d8a:	7f 93       	push	r23
    1d8c:	8f 93       	push	r24
    1d8e:	9f 93       	push	r25
    1d90:	af 93       	push	r26
    1d92:	bf 93       	push	r27
    1d94:	ef 93       	push	r30
    1d96:	ff 93       	push	r31
    1d98:	84 e0       	ldi	r24, 0x04	; 4
    1d9a:	77 d9       	rcall	.-3346   	; 0x108a <ir_receive>
    1d9c:	ff 91       	pop	r31
    1d9e:	ef 91       	pop	r30
    1da0:	bf 91       	pop	r27
    1da2:	af 91       	pop	r26
    1da4:	9f 91       	pop	r25
    1da6:	8f 91       	pop	r24
    1da8:	7f 91       	pop	r23
    1daa:	6f 91       	pop	r22
    1dac:	5f 91       	pop	r21
    1dae:	4f 91       	pop	r20
    1db0:	3f 91       	pop	r19
    1db2:	2f 91       	pop	r18
    1db4:	0f 90       	pop	r0
    1db6:	0b be       	out	0x3b, r0	; 59
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63
    1dbc:	0f 90       	pop	r0
    1dbe:	1f 90       	pop	r1
    1dc0:	18 95       	reti

00001dc2 <__vector_63>:
ISR( USARTE1_TXC_vect ) { ir_transmit_complete(4); }
    1dc2:	1f 92       	push	r1
    1dc4:	0f 92       	push	r0
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	0f 92       	push	r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	0b b6       	in	r0, 0x3b	; 59
    1dce:	0f 92       	push	r0
    1dd0:	2f 93       	push	r18
    1dd2:	3f 93       	push	r19
    1dd4:	4f 93       	push	r20
    1dd6:	5f 93       	push	r21
    1dd8:	6f 93       	push	r22
    1dda:	7f 93       	push	r23
    1ddc:	8f 93       	push	r24
    1dde:	9f 93       	push	r25
    1de0:	af 93       	push	r26
    1de2:	bf 93       	push	r27
    1de4:	ef 93       	push	r30
    1de6:	ff 93       	push	r31
    1de8:	84 e0       	ldi	r24, 0x04	; 4
    1dea:	7d dc       	rcall	.-1798   	; 0x16e6 <ir_transmit_complete>
    1dec:	ff 91       	pop	r31
    1dee:	ef 91       	pop	r30
    1df0:	bf 91       	pop	r27
    1df2:	af 91       	pop	r26
    1df4:	9f 91       	pop	r25
    1df6:	8f 91       	pop	r24
    1df8:	7f 91       	pop	r23
    1dfa:	6f 91       	pop	r22
    1dfc:	5f 91       	pop	r21
    1dfe:	4f 91       	pop	r20
    1e00:	3f 91       	pop	r19
    1e02:	2f 91       	pop	r18
    1e04:	0f 90       	pop	r0
    1e06:	0b be       	out	0x3b, r0	; 59
    1e08:	0f 90       	pop	r0
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	0f 90       	pop	r0
    1e0e:	1f 90       	pop	r1
    1e10:	18 95       	reti

00001e12 <__vector_62>:
ISR( USARTE1_DRE_vect ) { ir_transmit(4); }
    1e12:	1f 92       	push	r1
    1e14:	0f 92       	push	r0
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	0f 92       	push	r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	0b b6       	in	r0, 0x3b	; 59
    1e1e:	0f 92       	push	r0
    1e20:	2f 93       	push	r18
    1e22:	3f 93       	push	r19
    1e24:	4f 93       	push	r20
    1e26:	5f 93       	push	r21
    1e28:	6f 93       	push	r22
    1e2a:	7f 93       	push	r23
    1e2c:	8f 93       	push	r24
    1e2e:	9f 93       	push	r25
    1e30:	af 93       	push	r26
    1e32:	bf 93       	push	r27
    1e34:	ef 93       	push	r30
    1e36:	ff 93       	push	r31
    1e38:	84 e0       	ldi	r24, 0x04	; 4
    1e3a:	63 db       	rcall	.-2362   	; 0x1502 <ir_transmit>
    1e3c:	ff 91       	pop	r31
    1e3e:	ef 91       	pop	r30
    1e40:	bf 91       	pop	r27
    1e42:	af 91       	pop	r26
    1e44:	9f 91       	pop	r25
    1e46:	8f 91       	pop	r24
    1e48:	7f 91       	pop	r23
    1e4a:	6f 91       	pop	r22
    1e4c:	5f 91       	pop	r21
    1e4e:	4f 91       	pop	r20
    1e50:	3f 91       	pop	r19
    1e52:	2f 91       	pop	r18
    1e54:	0f 90       	pop	r0
    1e56:	0b be       	out	0x3b, r0	; 59
    1e58:	0f 90       	pop	r0
    1e5a:	0f be       	out	0x3f, r0	; 63
    1e5c:	0f 90       	pop	r0
    1e5e:	1f 90       	pop	r1
    1e60:	18 95       	reti

00001e62 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { ir_receive(5); }
    1e62:	1f 92       	push	r1
    1e64:	0f 92       	push	r0
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	0f 92       	push	r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	0b b6       	in	r0, 0x3b	; 59
    1e6e:	0f 92       	push	r0
    1e70:	2f 93       	push	r18
    1e72:	3f 93       	push	r19
    1e74:	4f 93       	push	r20
    1e76:	5f 93       	push	r21
    1e78:	6f 93       	push	r22
    1e7a:	7f 93       	push	r23
    1e7c:	8f 93       	push	r24
    1e7e:	9f 93       	push	r25
    1e80:	af 93       	push	r26
    1e82:	bf 93       	push	r27
    1e84:	ef 93       	push	r30
    1e86:	ff 93       	push	r31
    1e88:	85 e0       	ldi	r24, 0x05	; 5
    1e8a:	ff d8       	rcall	.-3586   	; 0x108a <ir_receive>
    1e8c:	ff 91       	pop	r31
    1e8e:	ef 91       	pop	r30
    1e90:	bf 91       	pop	r27
    1e92:	af 91       	pop	r26
    1e94:	9f 91       	pop	r25
    1e96:	8f 91       	pop	r24
    1e98:	7f 91       	pop	r23
    1e9a:	6f 91       	pop	r22
    1e9c:	5f 91       	pop	r21
    1e9e:	4f 91       	pop	r20
    1ea0:	3f 91       	pop	r19
    1ea2:	2f 91       	pop	r18
    1ea4:	0f 90       	pop	r0
    1ea6:	0b be       	out	0x3b, r0	; 59
    1ea8:	0f 90       	pop	r0
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	0f 90       	pop	r0
    1eae:	1f 90       	pop	r1
    1eb0:	18 95       	reti

00001eb2 <__vector_121>:
ISR( USARTF0_TXC_vect ) { ir_transmit_complete(5); }
    1eb2:	1f 92       	push	r1
    1eb4:	0f 92       	push	r0
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	0f 92       	push	r0
    1eba:	11 24       	eor	r1, r1
    1ebc:	0b b6       	in	r0, 0x3b	; 59
    1ebe:	0f 92       	push	r0
    1ec0:	2f 93       	push	r18
    1ec2:	3f 93       	push	r19
    1ec4:	4f 93       	push	r20
    1ec6:	5f 93       	push	r21
    1ec8:	6f 93       	push	r22
    1eca:	7f 93       	push	r23
    1ecc:	8f 93       	push	r24
    1ece:	9f 93       	push	r25
    1ed0:	af 93       	push	r26
    1ed2:	bf 93       	push	r27
    1ed4:	ef 93       	push	r30
    1ed6:	ff 93       	push	r31
    1ed8:	85 e0       	ldi	r24, 0x05	; 5
    1eda:	05 dc       	rcall	.-2038   	; 0x16e6 <ir_transmit_complete>
    1edc:	ff 91       	pop	r31
    1ede:	ef 91       	pop	r30
    1ee0:	bf 91       	pop	r27
    1ee2:	af 91       	pop	r26
    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	7f 91       	pop	r23
    1eea:	6f 91       	pop	r22
    1eec:	5f 91       	pop	r21
    1eee:	4f 91       	pop	r20
    1ef0:	3f 91       	pop	r19
    1ef2:	2f 91       	pop	r18
    1ef4:	0f 90       	pop	r0
    1ef6:	0b be       	out	0x3b, r0	; 59
    1ef8:	0f 90       	pop	r0
    1efa:	0f be       	out	0x3f, r0	; 63
    1efc:	0f 90       	pop	r0
    1efe:	1f 90       	pop	r1
    1f00:	18 95       	reti

00001f02 <__vector_120>:
    1f02:	1f 92       	push	r1
    1f04:	0f 92       	push	r0
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	0f 92       	push	r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	0b b6       	in	r0, 0x3b	; 59
    1f0e:	0f 92       	push	r0
    1f10:	2f 93       	push	r18
    1f12:	3f 93       	push	r19
    1f14:	4f 93       	push	r20
    1f16:	5f 93       	push	r21
    1f18:	6f 93       	push	r22
    1f1a:	7f 93       	push	r23
    1f1c:	8f 93       	push	r24
    1f1e:	9f 93       	push	r25
    1f20:	af 93       	push	r26
    1f22:	bf 93       	push	r27
    1f24:	ef 93       	push	r30
    1f26:	ff 93       	push	r31
    1f28:	85 e0       	ldi	r24, 0x05	; 5
    1f2a:	eb da       	rcall	.-2602   	; 0x1502 <ir_transmit>
    1f2c:	ff 91       	pop	r31
    1f2e:	ef 91       	pop	r30
    1f30:	bf 91       	pop	r27
    1f32:	af 91       	pop	r26
    1f34:	9f 91       	pop	r25
    1f36:	8f 91       	pop	r24
    1f38:	7f 91       	pop	r23
    1f3a:	6f 91       	pop	r22
    1f3c:	5f 91       	pop	r21
    1f3e:	4f 91       	pop	r20
    1f40:	3f 91       	pop	r19
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	0b be       	out	0x3b, r0	; 59
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	0f 90       	pop	r0
    1f4e:	1f 90       	pop	r1
    1f50:	18 95       	reti

00001f52 <meas_find_median>:
}	

// Finds the median of 3 numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
	if(arr_len==1) return meas[0];
    1f58:	61 30       	cpi	r22, 0x01	; 1
    1f5a:	21 f4       	brne	.+8      	; 0x1f64 <meas_find_median+0x12>
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	80 81       	ld	r24, Z
    1f60:	91 81       	ldd	r25, Z+1	; 0x01
    1f62:	51 c0       	rjmp	.+162    	; 0x2006 <meas_find_median+0xb4>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    1f64:	62 30       	cpi	r22, 0x02	; 2
    1f66:	49 f5       	brne	.+82     	; 0x1fba <meas_find_median+0x68>
    1f68:	fc 01       	movw	r30, r24
    1f6a:	20 81       	ld	r18, Z
    1f6c:	31 81       	ldd	r19, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	82 0f       	add	r24, r18
    1f74:	93 1f       	adc	r25, r19
    1f76:	99 23       	and	r25, r25
    1f78:	0c f4       	brge	.+2      	; 0x1f7c <meas_find_median+0x2a>
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	95 95       	asr	r25
    1f7e:	87 95       	ror	r24
    1f80:	42 c0       	rjmp	.+132    	; 0x2006 <meas_find_median+0xb4>
    1f82:	12 96       	adiw	r26, 0x02	; 2
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    1f84:	1f 5f       	subi	r17, 0xFF	; 255
    1f86:	16 17       	cp	r17, r22
    1f88:	e9 f0       	breq	.+58     	; 0x1fc4 <meas_find_median+0x72>
    1f8a:	71 2f       	mov	r23, r17
    1f8c:	ed 01       	movw	r28, r26
		{
			if(meas[j] < meas[i])
    1f8e:	e7 2f       	mov	r30, r23
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	e8 0f       	add	r30, r24
    1f98:	f9 1f       	adc	r31, r25
    1f9a:	40 81       	ld	r20, Z
    1f9c:	51 81       	ldd	r21, Z+1	; 0x01
    1f9e:	2d 91       	ld	r18, X+
    1fa0:	3c 91       	ld	r19, X
    1fa2:	11 97       	sbiw	r26, 0x01	; 1
    1fa4:	42 17       	cp	r20, r18
    1fa6:	53 07       	cpc	r21, r19
    1fa8:	24 f4       	brge	.+8      	; 0x1fb2 <meas_find_median+0x60>
			{
				int16_t temp = meas[i];
				meas[i] = meas[j];
    1faa:	48 83       	st	Y, r20
    1fac:	59 83       	std	Y+1, r21	; 0x01
				meas[j] = temp;
    1fae:	20 83       	st	Z, r18
    1fb0:	31 83       	std	Z+1, r19	; 0x01
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    1fb2:	7f 5f       	subi	r23, 0xFF	; 255
    1fb4:	76 13       	cpse	r23, r22
    1fb6:	eb cf       	rjmp	.-42     	; 0x1f8e <meas_find_median+0x3c>
    1fb8:	e4 cf       	rjmp	.-56     	; 0x1f82 <meas_find_median+0x30>
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
    1fba:	66 23       	and	r22, r22
    1fbc:	29 f0       	breq	.+10     	; 0x1fc8 <meas_find_median+0x76>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	e0 cf       	rjmp	.-64     	; 0x1f84 <meas_find_median+0x32>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    1fc4:	60 fd       	sbrc	r22, 0
    1fc6:	15 c0       	rjmp	.+42     	; 0x1ff2 <meas_find_median+0xa0>
    1fc8:	66 95       	lsr	r22
    1fca:	e6 2f       	mov	r30, r22
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	e1 50       	subi	r30, 0x01	; 1
    1fd0:	f0 48       	sbci	r31, 0x80	; 128
    1fd2:	ee 0f       	add	r30, r30
    1fd4:	ff 1f       	adc	r31, r31
    1fd6:	e8 0f       	add	r30, r24
    1fd8:	f9 1f       	adc	r31, r25
    1fda:	20 81       	ld	r18, Z
    1fdc:	31 81       	ldd	r19, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	82 0f       	add	r24, r18
    1fe4:	93 1f       	adc	r25, r19
    1fe6:	99 23       	and	r25, r25
    1fe8:	0c f4       	brge	.+2      	; 0x1fec <meas_find_median+0x9a>
    1fea:	01 96       	adiw	r24, 0x01	; 1
    1fec:	95 95       	asr	r25
    1fee:	87 95       	ror	r24
    1ff0:	0a c0       	rjmp	.+20     	; 0x2006 <meas_find_median+0xb4>
	else return meas[arr_len/2];
    1ff2:	66 95       	lsr	r22
    1ff4:	26 2f       	mov	r18, r22
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	22 0f       	add	r18, r18
    1ffa:	33 1f       	adc	r19, r19
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	e2 0f       	add	r30, r18
    2000:	f3 1f       	adc	r31, r19
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	08 95       	ret

0000200e <get_ir_sensor>:
/*
* This measurement will always output a number between 0 and about 200. Ambient light levels are typically around 20.
* The range of outputs that could be used for actual measurements will be limited to about 20 to 200 (only 180 significant values)
*/
uint8_t get_ir_sensor(uint8_t sensor_num)
{
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	cd b7       	in	r28, 0x3d	; 61
    2018:	de b7       	in	r29, 0x3e	; 62
    201a:	2a 97       	sbiw	r28, 0x0a	; 10
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	de bf       	out	0x3e, r29	; 62
	ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    2020:	e0 e4       	ldi	r30, 0x40	; 64
    2022:	f2 e0       	ldi	r31, 0x02	; 2
    2024:	91 a1       	ldd	r25, Z+33	; 0x21
    2026:	97 70       	andi	r25, 0x07	; 7
    2028:	91 a3       	std	Z+33, r25	; 0x21
	ADCB.CH0.MUXCTRL |= mux_sensor_selectors[sensor_num];
    202a:	91 a1       	ldd	r25, Z+33	; 0x21
    202c:	08 2f       	mov	r16, r24
    202e:	10 e0       	ldi	r17, 0x00	; 0
    2030:	d8 01       	movw	r26, r16
    2032:	ab 5b       	subi	r26, 0xBB	; 187
    2034:	be 4d       	sbci	r27, 0xDE	; 222
    2036:	8c 91       	ld	r24, X
    2038:	89 2b       	or	r24, r25
    203a:	81 a3       	std	Z+33, r24	; 0x21
    203c:	de 01       	movw	r26, r28
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	ce 01       	movw	r24, r28
    2042:	0b 96       	adiw	r24, 0x0b	; 11
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
	{
		ADCB.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)ADCB.CH0.RESH)<<8)|((int16_t)ADCB.CH0.RESL))>>2;	
		ADCB.CH0.INTFLAGS=1; // clear the complete flag		
    2044:	51 e0       	ldi	r21, 0x01	; 1
	
	int16_t meas[IR_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
	{
		ADCB.CH0.CTRL |= ADC_CH_START_bm;
    2046:	20 a1       	ldd	r18, Z+32	; 0x20
    2048:	20 68       	ori	r18, 0x80	; 128
    204a:	20 a3       	std	Z+32, r18	; 0x20
		while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    204c:	23 a1       	ldd	r18, Z+35	; 0x23
    204e:	22 23       	and	r18, r18
    2050:	e9 f3       	breq	.-6      	; 0x204c <get_ir_sensor+0x3e>
		meas[meas_count] = ((((int16_t)ADCB.CH0.RESH)<<8)|((int16_t)ADCB.CH0.RESL))>>2;	
    2052:	45 a1       	ldd	r20, Z+37	; 0x25
    2054:	24 a1       	ldd	r18, Z+36	; 0x24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	34 2b       	or	r19, r20
    205a:	35 95       	asr	r19
    205c:	27 95       	ror	r18
    205e:	35 95       	asr	r19
    2060:	27 95       	ror	r18
    2062:	2d 93       	st	X+, r18
    2064:	3d 93       	st	X+, r19
		ADCB.CH0.INTFLAGS=1; // clear the complete flag		
    2066:	53 a3       	std	Z+35, r21	; 0x23
	ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
	ADCB.CH0.MUXCTRL |= mux_sensor_selectors[sensor_num];
	
	int16_t meas[IR_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
    2068:	a8 17       	cp	r26, r24
    206a:	b9 07       	cpc	r27, r25
    206c:	61 f7       	brne	.-40     	; 0x2046 <get_ir_sensor+0x38>
	}
	//printf("Median: %d", median);	
	//printf("\t");
	//for(uint8_t i=0;i<IR_MEAS_COUNT;i++) printf("%u: %3d\t",i, meas[i]);
	//printf("\r\n");
	int16_t median = meas_find_median(&(meas[2]), IR_MEAS_COUNT-2);
    206e:	63 e0       	ldi	r22, 0x03	; 3
    2070:	ce 01       	movw	r24, r28
    2072:	05 96       	adiw	r24, 0x05	; 5
    2074:	6e df       	rcall	.-292    	; 0x1f52 <meas_find_median>
	
	if(median<ir_sense_baseline[sensor_num])	return 0;
    2076:	f8 01       	movw	r30, r16
    2078:	ee 0f       	add	r30, r30
    207a:	ff 1f       	adc	r31, r31
    207c:	e0 52       	subi	r30, 0x20	; 32
    207e:	f7 4d       	sbci	r31, 0xD7	; 215
    2080:	20 81       	ld	r18, Z
    2082:	31 81       	ldd	r19, Z+1	; 0x01
    2084:	82 17       	cp	r24, r18
    2086:	93 07       	cpc	r25, r19
    2088:	14 f0       	brlt	.+4      	; 0x208e <get_ir_sensor+0x80>
	else										return (median-ir_sense_baseline[sensor_num]);
    208a:	82 1b       	sub	r24, r18
    208c:	01 c0       	rjmp	.+2      	; 0x2090 <get_ir_sensor+0x82>
	//printf("\t");
	//for(uint8_t i=0;i<IR_MEAS_COUNT;i++) printf("%u: %3d\t",i, meas[i]);
	//printf("\r\n");
	int16_t median = meas_find_median(&(meas[2]), IR_MEAS_COUNT-2);
	
	if(median<ir_sense_baseline[sensor_num])	return 0;
    208e:	80 e0       	ldi	r24, 0x00	; 0
	else										return (median-ir_sense_baseline[sensor_num]);
}
    2090:	2a 96       	adiw	r28, 0x0a	; 10
    2092:	cd bf       	out	0x3d, r28	; 61
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	1f 91       	pop	r17
    209c:	0f 91       	pop	r16
    209e:	08 95       	ret

000020a0 <ir_sensor_init>:
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    20a0:	ef 92       	push	r14
    20a2:	ff 92       	push	r15
    20a4:	0f 93       	push	r16
    20a6:	1f 93       	push	r17
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
	/* SET INPUT PINS AS INPUTS */
	IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    20ac:	8c ef       	ldi	r24, 0xFC	; 252
    20ae:	e0 e2       	ldi	r30, 0x20	; 32
    20b0:	f6 e0       	ldi	r31, 0x06	; 6
    20b2:	82 83       	std	Z+2, r24	; 0x02

	ADCB.REFCTRL = ADC_REFSEL_INT1V_gc;
    20b4:	e0 e4       	ldi	r30, 0x40	; 64
    20b6:	f2 e0       	ldi	r31, 0x02	; 2
    20b8:	12 82       	std	Z+2, r1	; 0x02
	ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    20ba:	80 e1       	ldi	r24, 0x10	; 16
    20bc:	81 83       	std	Z+1, r24	; 0x01
	ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    20be:	87 e0       	ldi	r24, 0x07	; 7
    20c0:	84 83       	std	Z+4, r24	; 0x04
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// differential input. requires signed mode (see sec. 28.6 in manual)
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	90 a3       	std	Z+32, r25	; 0x20
	ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE3_gc;	// use VREF_IN for the negative input (0.54 V)
    20c6:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    20c8:	84 b5       	in	r24, 0x24	; 36
    20ca:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    20cc:	85 b5       	in	r24, 0x25	; 37
    20ce:	85 87       	std	Z+13, r24	; 0x0d
	ADCB.CTRLA = ADC_ENABLE_bm;	
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	80 83       	st	Z, r24
    20d4:	85 e3       	ldi	r24, 0x35	; 53
    20d6:	8a 95       	dec	r24
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <ir_sensor_init+0x36>
    20da:	00 00       	nop

	delay_us(5);
	
	for(uint8_t dir=0; dir<6; dir++) ir_sense_baseline[dir] = 0;
    20dc:	10 92 e0 28 	sts	0x28E0, r1
    20e0:	10 92 e1 28 	sts	0x28E1, r1
    20e4:	10 92 e2 28 	sts	0x28E2, r1
    20e8:	10 92 e3 28 	sts	0x28E3, r1
    20ec:	10 92 e4 28 	sts	0x28E4, r1
    20f0:	10 92 e5 28 	sts	0x28E5, r1
    20f4:	10 92 e6 28 	sts	0x28E6, r1
    20f8:	10 92 e7 28 	sts	0x28E7, r1
    20fc:	10 92 e8 28 	sts	0x28E8, r1
    2100:	10 92 e9 28 	sts	0x28E9, r1
    2104:	10 92 ea 28 	sts	0x28EA, r1
    2108:	10 92 eb 28 	sts	0x28EB, r1
	
	delay_ms(5);
    210c:	85 e0       	ldi	r24, 0x05	; 5
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
	get_ir_sensor(0);
    2114:	80 e0       	ldi	r24, 0x00	; 0
    2116:	7b df       	rcall	.-266    	; 0x200e <get_ir_sensor>
    2118:	c0 ee       	ldi	r28, 0xE0	; 224
    211a:	d8 e2       	ldi	r29, 0x28	; 40
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
    211c:	f1 2c       	mov	r15, r1
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    211e:	ee 24       	eor	r14, r14
    2120:	ea 94       	dec	r14
    2122:	0f c0       	rjmp	.+30     	; 0x2142 <ir_sensor_init+0xa2>
	for(uint8_t dir=0; dir<6; dir++)
	{
		min_val=255;
		for(uint8_t meas_count=0; meas_count<5; meas_count++)
		{
			val = get_ir_sensor(dir);
    2124:	8f 2d       	mov	r24, r15
    2126:	73 df       	rcall	.-282    	; 0x200e <get_ir_sensor>
    2128:	80 17       	cp	r24, r16
    212a:	08 f4       	brcc	.+2      	; 0x212e <ir_sensor_init+0x8e>
    212c:	08 2f       	mov	r16, r24
    212e:	11 50       	subi	r17, 0x01	; 1
	get_ir_sensor(0);
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
	{
		min_val=255;
		for(uint8_t meas_count=0; meas_count<5; meas_count++)
    2130:	c9 f7       	brne	.-14     	; 0x2124 <ir_sensor_init+0x84>
		{
			val = get_ir_sensor(dir);
			if(val<min_val) min_val = val;
		}
		ir_sense_baseline[dir] = min_val;
    2132:	20 2f       	mov	r18, r16
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	29 93       	st	Y+, r18
    2138:	39 93       	st	Y+, r19
	for(uint8_t dir=0; dir<6; dir++) ir_sense_baseline[dir] = 0;
	
	delay_ms(5);
	get_ir_sensor(0);
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
    213a:	f3 94       	inc	r15
    213c:	86 e0       	ldi	r24, 0x06	; 6
    213e:	f8 16       	cp	r15, r24
    2140:	19 f0       	breq	.+6      	; 0x2148 <ir_sensor_init+0xa8>
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    2142:	15 e0       	ldi	r17, 0x05	; 5
    2144:	0e 2d       	mov	r16, r14
    2146:	ee cf       	rjmp	.-36     	; 0x2124 <ir_sensor_init+0x84>
	//PORTC.DIRSET = (PIN3_bm | PIN7_bm);
	//PORTD.DIRCLR =  PIN3_bm;
	//PORTE.DIRSET = (PIN3_bm | PIN7_bm);
	//PORTF.DIRCLR =  PIN3_bm;	
	//PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;	//set carrier wave pins to output.
}
    2148:	df 91       	pop	r29
    214a:	cf 91       	pop	r28
    214c:	1f 91       	pop	r17
    214e:	0f 91       	pop	r16
    2150:	ff 90       	pop	r15
    2152:	ef 90       	pop	r14
    2154:	08 95       	ret

00002156 <check_collisions>:
	if(median<ir_sense_baseline[sensor_num])	return 0;
	else										return (median-ir_sense_baseline[sensor_num]);
}

	
uint8_t check_collisions(){
    2156:	5f 92       	push	r5
    2158:	6f 92       	push	r6
    215a:	7f 92       	push	r7
    215c:	8f 92       	push	r8
    215e:	9f 92       	push	r9
    2160:	af 92       	push	r10
    2162:	bf 92       	push	r11
    2164:	cf 92       	push	r12
    2166:	df 92       	push	r13
    2168:	ef 92       	push	r14
    216a:	ff 92       	push	r15
    216c:	0f 93       	push	r16
    216e:	1f 93       	push	r17
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	6e 97       	sbiw	r28, 0x1e	; 30
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	de bf       	out	0x3e, r29	; 62
	int16_t baseline_meas[6];
	uint8_t channelCtrlBVals[6];
	volatile int16_t measured_vals[6];
	uint8_t dirs=0;
	//wait_for_ir(ALL_DIRS);
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	80 93 87 29 	sts	0x2987, r24
    2184:	80 93 a7 29 	sts	0x29A7, r24
    2188:	80 93 c7 29 	sts	0x29C7, r24
    218c:	80 93 e7 29 	sts	0x29E7, r24
    2190:	80 93 07 2a 	sts	0x2A07, r24
    2194:	80 93 27 2a 	sts	0x2A27, r24
uint8_t count;
uint16_t thePower;
void i2c_init();

void set_all_ir_powers(uint16_t power);
inline uint16_t get_all_ir_powers(){ return thePower; };
    2198:	60 90 ec 27 	lds	r6, 0x27EC
    219c:	70 90 ed 27 	lds	r7, 0x27ED
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	0e 94 55 04 	call	0x8aa	; 0x8aa <set_all_ir_powers>
    21a8:	0f 2e       	mov	r0, r31
    21aa:	f2 e1       	ldi	r31, 0x12	; 18
    21ac:	ef 2e       	mov	r14, r31
    21ae:	f0 e2       	ldi	r31, 0x20	; 32
    21b0:	ff 2e       	mov	r15, r31
    21b2:	f0 2d       	mov	r31, r0
    21b4:	ce 01       	movw	r24, r28
    21b6:	0d 96       	adiw	r24, 0x0d	; 13
    21b8:	e6 e0       	ldi	r30, 0x06	; 6
    21ba:	f0 e2       	ldi	r31, 0x20	; 32
	for(uint8_t i=0;i<6;i++)
	{
		channelCtrlBVals[i] = channel[i]->CTRLB;
    21bc:	41 91       	ld	r20, Z+
    21be:	51 91       	ld	r21, Z+
    21c0:	da 01       	movw	r26, r20
    21c2:	14 96       	adiw	r26, 0x04	; 4
    21c4:	2c 91       	ld	r18, X
    21c6:	dc 01       	movw	r26, r24
    21c8:	2d 93       	st	X+, r18
    21ca:	cd 01       	movw	r24, r26
		channel[i]->CTRLB=0;
    21cc:	da 01       	movw	r26, r20
    21ce:	14 96       	adiw	r26, 0x04	; 4
    21d0:	1c 92       	st	X, r1
	uint8_t dirs=0;
	//wait_for_ir(ALL_DIRS);
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
	for(uint8_t i=0;i<6;i++)
    21d2:	ee 15       	cp	r30, r14
    21d4:	ff 05       	cpc	r31, r15
    21d6:	91 f7       	brne	.-28     	; 0x21bc <check_collisions+0x66>
    21d8:	8e 01       	movw	r16, r28
    21da:	0f 5f       	subi	r16, 0xFF	; 255
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	b1 2c       	mov	r11, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    21e0:	0f 2e       	mov	r0, r31
    21e2:	ff e8       	ldi	r31, 0x8F	; 143
    21e4:	cf 2e       	mov	r12, r31
    21e6:	dd 24       	eor	r13, r13
    21e8:	d3 94       	inc	r13
    21ea:	f0 2d       	mov	r31, r0
    21ec:	f6 01       	movw	r30, r12
    21ee:	31 97       	sbiw	r30, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <check_collisions+0x98>
    21f2:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    21f4:	00 c0       	rjmp	.+0      	; 0x21f6 <check_collisions+0xa0>
	}
	for(uint8_t i=0;i<6;i++)
	{
		busy_delay_us(50);
		//get_ir_sensor(i);
		baseline_meas[i] = get_ir_sensor(i);
    21f6:	8b 2d       	mov	r24, r11
    21f8:	0a df       	rcall	.-492    	; 0x200e <get_ir_sensor>
    21fa:	28 2f       	mov	r18, r24
    21fc:	30 e0       	ldi	r19, 0x00	; 0
    21fe:	f8 01       	movw	r30, r16
    2200:	21 93       	st	Z+, r18
    2202:	31 93       	st	Z+, r19
    2204:	8f 01       	movw	r16, r30
	for(uint8_t i=0;i<6;i++)
	{
		channelCtrlBVals[i] = channel[i]->CTRLB;
		channel[i]->CTRLB=0;
	}
	for(uint8_t i=0;i<6;i++)
    2206:	b3 94       	inc	r11
    2208:	f6 e0       	ldi	r31, 0x06	; 6
    220a:	bf 12       	cpse	r11, r31
    220c:	ef cf       	rjmp	.-34     	; 0x21ec <check_collisions+0x96>
	{
		busy_delay_us(50);
		//get_ir_sensor(i);
		baseline_meas[i] = get_ir_sensor(i);
	}
	TCF2.CTRLB &= ~ALL_EMITTERS_CARWAV_bm;	//disable carrier wave output
    220e:	e0 e0       	ldi	r30, 0x00	; 0
    2210:	fb e0       	ldi	r31, 0x0B	; 11
    2212:	81 81       	ldd	r24, Z+1	; 0x01
    2214:	8c 70       	andi	r24, 0x0C	; 12
    2216:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = ALL_EMITTERS_CARWAV_bm;	// set carrier wave pins high.		
    2218:	e0 ea       	ldi	r30, 0xA0	; 160
    221a:	f6 e0       	ldi	r31, 0x06	; 6
    221c:	83 ef       	ldi	r24, 0xF3	; 243
    221e:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = (PIN3_bm | PIN7_bm);
    2220:	20 e4       	ldi	r18, 0x40	; 64
    2222:	36 e0       	ldi	r19, 0x06	; 6
    2224:	58 e8       	ldi	r21, 0x88	; 136
    2226:	d9 01       	movw	r26, r18
    2228:	11 96       	adiw	r26, 0x01	; 1
    222a:	5c 93       	st	X, r21
	PORTD.DIRSET =  PIN3_bm;
    222c:	80 e6       	ldi	r24, 0x60	; 96
    222e:	96 e0       	ldi	r25, 0x06	; 6
    2230:	48 e0       	ldi	r20, 0x08	; 8
    2232:	dc 01       	movw	r26, r24
    2234:	11 96       	adiw	r26, 0x01	; 1
    2236:	4c 93       	st	X, r20
	PORTE.DIRSET = (PIN3_bm | PIN7_bm);
    2238:	60 e8       	ldi	r22, 0x80	; 128
    223a:	76 e0       	ldi	r23, 0x06	; 6
    223c:	db 01       	movw	r26, r22
    223e:	11 96       	adiw	r26, 0x01	; 1
    2240:	5c 93       	st	X, r21
	PORTF.DIRSET =  PIN3_bm;
    2242:	41 83       	std	Z+1, r20	; 0x01

	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    2244:	d9 01       	movw	r26, r18
    2246:	16 96       	adiw	r26, 0x06	; 6
    2248:	5c 93       	st	X, r21
	PORTD.OUTCLR = PIN3_bm;
    224a:	dc 01       	movw	r26, r24
    224c:	16 96       	adiw	r26, 0x06	; 6
    224e:	4c 93       	st	X, r20
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    2250:	db 01       	movw	r26, r22
    2252:	16 96       	adiw	r26, 0x06	; 6
    2254:	5c 93       	st	X, r21
	PORTF.OUTCLR = PIN3_bm;
    2256:	46 83       	std	Z+6, r20	; 0x06
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    2258:	8f ec       	ldi	r24, 0xCF	; 207
    225a:	97 e0       	ldi	r25, 0x07	; 7
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <check_collisions+0x106>
    2260:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    2262:	00 c0       	rjmp	.+0      	; 0x2264 <check_collisions+0x10e>

	busy_delay_us(250);
	ADCB.CTRLA |= ADC_FLUSH_bm;
    2264:	e0 e4       	ldi	r30, 0x40	; 64
    2266:	f2 e0       	ldi	r31, 0x02	; 2
    2268:	80 81       	ld	r24, Z
    226a:	82 60       	ori	r24, 0x02	; 2
    226c:	80 83       	st	Z, r24
    226e:	fe 01       	movw	r30, r28
    2270:	31 96       	adiw	r30, 0x01	; 1
    2272:	6f 01       	movw	r12, r30
    2274:	00 e0       	ldi	r16, 0x00	; 0
    2276:	10 e0       	ldi	r17, 0x00	; 0
	
uint8_t check_collisions(){
	int16_t baseline_meas[6];
	uint8_t channelCtrlBVals[6];
	volatile int16_t measured_vals[6];
	uint8_t dirs=0;
    2278:	51 2c       	mov	r5, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    227a:	0f 2e       	mov	r0, r31
    227c:	ff ec       	ldi	r31, 0xCF	; 207
    227e:	af 2e       	mov	r10, r31
    2280:	f7 e0       	ldi	r31, 0x07	; 7
    2282:	bf 2e       	mov	r11, r31
    2284:	f0 2d       	mov	r31, r0
		//get_ir_sensor(i);
		measured_vals[i] = get_ir_sensor(i);
		int16_t temp = measured_vals[i]-baseline_meas[i];
		//printf("\t%3d", temp);
		if((measured_vals[i]-baseline_meas[i])>16){
			dirs = dirs|(1<<i);
    2286:	88 24       	eor	r8, r8
    2288:	83 94       	inc	r8
    228a:	91 2c       	mov	r9, r1
    228c:	c5 01       	movw	r24, r10
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <check_collisions+0x138>
    2292:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    2294:	00 c0       	rjmp	.+0      	; 0x2296 <check_collisions+0x140>
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++)
	{
		busy_delay_us(250);
		//get_ir_sensor(i);
		measured_vals[i] = get_ir_sensor(i);
    2296:	80 2f       	mov	r24, r16
    2298:	ba de       	rcall	.-652    	; 0x200e <get_ir_sensor>
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	f8 01       	movw	r30, r16
    229e:	ee 0f       	add	r30, r30
    22a0:	ff 1f       	adc	r31, r31
    22a2:	21 e0       	ldi	r18, 0x01	; 1
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	2c 0f       	add	r18, r28
    22a8:	3d 1f       	adc	r19, r29
    22aa:	e2 0f       	add	r30, r18
    22ac:	f3 1f       	adc	r31, r19
    22ae:	82 8b       	std	Z+18, r24	; 0x12
    22b0:	93 8b       	std	Z+19, r25	; 0x13
		int16_t temp = measured_vals[i]-baseline_meas[i];
    22b2:	82 89       	ldd	r24, Z+18	; 0x12
    22b4:	93 89       	ldd	r25, Z+19	; 0x13
		//printf("\t%3d", temp);
		if((measured_vals[i]-baseline_meas[i])>16){
    22b6:	82 89       	ldd	r24, Z+18	; 0x12
    22b8:	93 89       	ldd	r25, Z+19	; 0x13
    22ba:	d6 01       	movw	r26, r12
    22bc:	2d 91       	ld	r18, X+
    22be:	3d 91       	ld	r19, X+
    22c0:	6d 01       	movw	r12, r26
    22c2:	82 1b       	sub	r24, r18
    22c4:	93 0b       	sbc	r25, r19
    22c6:	41 97       	sbiw	r24, 0x11	; 17
    22c8:	44 f0       	brlt	.+16     	; 0x22da <check_collisions+0x184>
			dirs = dirs|(1<<i);
    22ca:	c4 01       	movw	r24, r8
    22cc:	00 2e       	mov	r0, r16
    22ce:	02 c0       	rjmp	.+4      	; 0x22d4 <check_collisions+0x17e>
    22d0:	88 0f       	add	r24, r24
    22d2:	99 1f       	adc	r25, r25
    22d4:	0a 94       	dec	r0
    22d6:	e2 f7       	brpl	.-8      	; 0x22d0 <check_collisions+0x17a>
    22d8:	58 2a       	or	r5, r24
    22da:	0f 5f       	subi	r16, 0xFF	; 255
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
	PORTF.OUTCLR = PIN3_bm;

	busy_delay_us(250);
	ADCB.CTRLA |= ADC_FLUSH_bm;
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++)
    22de:	06 30       	cpi	r16, 0x06	; 6
    22e0:	11 05       	cpc	r17, r1
    22e2:	a1 f6       	brne	.-88     	; 0x228c <check_collisions+0x136>
		//printf("\t%3d", temp);
		if((measured_vals[i]-baseline_meas[i])>16){
			dirs = dirs|(1<<i);
		}
	}
	printf("\r\n");
    22e4:	8f e5       	ldi	r24, 0x5F	; 95
    22e6:	95 e2       	ldi	r25, 0x25	; 37
    22e8:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
	PORTC.OUTTGL = (PIN3_bm | PIN7_bm);
    22ec:	98 e8       	ldi	r25, 0x88	; 136
    22ee:	e0 e4       	ldi	r30, 0x40	; 64
    22f0:	f6 e0       	ldi	r31, 0x06	; 6
    22f2:	97 83       	std	Z+7, r25	; 0x07
	PORTD.OUTTGL =  PIN3_bm;
    22f4:	88 e0       	ldi	r24, 0x08	; 8
    22f6:	e0 e6       	ldi	r30, 0x60	; 96
    22f8:	f6 e0       	ldi	r31, 0x06	; 6
    22fa:	87 83       	std	Z+7, r24	; 0x07
	PORTE.OUTTGL = (PIN3_bm | PIN7_bm);
    22fc:	e0 e8       	ldi	r30, 0x80	; 128
    22fe:	f6 e0       	ldi	r31, 0x06	; 6
    2300:	97 83       	std	Z+7, r25	; 0x07
	PORTF.OUTTGL =  PIN3_bm;
    2302:	e0 ea       	ldi	r30, 0xA0	; 160
    2304:	f6 e0       	ldi	r31, 0x06	; 6
    2306:	87 83       	std	Z+7, r24	; 0x07
	PORTF.OUTCLR = ALL_EMITTERS_CARWAV_bm;
    2308:	83 ef       	ldi	r24, 0xF3	; 243
    230a:	86 83       	std	Z+6, r24	; 0x06
    230c:	ae 01       	movw	r20, r28
    230e:	43 5f       	subi	r20, 0xF3	; 243
    2310:	5f 4f       	sbci	r21, 0xFF	; 255
    2312:	e6 e0       	ldi	r30, 0x06	; 6
    2314:	f0 e2       	ldi	r31, 0x20	; 32
	for(uint8_t i=0;i<6;i++) channel[i]->CTRLB = channelCtrlBVals[i];
    2316:	81 91       	ld	r24, Z+
    2318:	91 91       	ld	r25, Z+
    231a:	da 01       	movw	r26, r20
    231c:	2d 91       	ld	r18, X+
    231e:	ad 01       	movw	r20, r26
    2320:	dc 01       	movw	r26, r24
    2322:	14 96       	adiw	r26, 0x04	; 4
    2324:	2c 93       	st	X, r18
    2326:	ee 15       	cp	r30, r14
    2328:	ff 05       	cpc	r31, r15
    232a:	a9 f7       	brne	.-22     	; 0x2316 <check_collisions+0x1c0>
	TCF2.CTRLB |= ALL_EMITTERS_CARWAV_bm; //reenable carrier wave output
    232c:	e0 e0       	ldi	r30, 0x00	; 0
    232e:	fb e0       	ldi	r31, 0x0B	; 11
    2330:	81 81       	ldd	r24, Z+1	; 0x01
    2332:	83 6f       	ori	r24, 0xF3	; 243
    2334:	81 83       	std	Z+1, r24	; 0x01
	set_all_ir_powers(curr_power);
    2336:	c3 01       	movw	r24, r6
    2338:	0e 94 55 04 	call	0x8aa	; 0x8aa <set_all_ir_powers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    233c:	10 92 87 29 	sts	0x2987, r1
    2340:	10 92 a7 29 	sts	0x29A7, r1
    2344:	10 92 c7 29 	sts	0x29C7, r1
    2348:	10 92 e7 29 	sts	0x29E7, r1
    234c:	10 92 07 2a 	sts	0x2A07, r1
    2350:	10 92 27 2a 	sts	0x2A27, r1
	return dirs;
}	
    2354:	85 2d       	mov	r24, r5
    2356:	6e 96       	adiw	r28, 0x1e	; 30
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	de bf       	out	0x3e, r29	; 62
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	ff 90       	pop	r15
    2366:	ef 90       	pop	r14
    2368:	df 90       	pop	r13
    236a:	cf 90       	pop	r12
    236c:	bf 90       	pop	r11
    236e:	af 90       	pop	r10
    2370:	9f 90       	pop	r9
    2372:	8f 90       	pop	r8
    2374:	7f 90       	pop	r7
    2376:	6f 90       	pop	r6
    2378:	5f 90       	pop	r5
    237a:	08 95       	ret

0000237c <stop>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcast_motor_adjusts()
{
    237c:	83 e0       	ldi	r24, 0x03	; 3
    237e:	e0 e0       	ldi	r30, 0x00	; 0
    2380:	f8 e0       	ldi	r31, 0x08	; 8
    2382:	81 83       	std	Z+1, r24	; 0x01
    2384:	e0 e4       	ldi	r30, 0x40	; 64
    2386:	f8 e0       	ldi	r31, 0x08	; 8
    2388:	81 83       	std	Z+1, r24	; 0x01
    238a:	e0 e0       	ldi	r30, 0x00	; 0
    238c:	f9 e0       	ldi	r31, 0x09	; 9
    238e:	81 83       	std	Z+1, r24	; 0x01
    2390:	e0 e4       	ldi	r30, 0x40	; 64
    2392:	f6 e0       	ldi	r31, 0x06	; 6
    2394:	93 e3       	ldi	r25, 0x33	; 51
    2396:	96 83       	std	Z+6, r25	; 0x06
    2398:	a0 e6       	ldi	r26, 0x60	; 96
    239a:	b6 e0       	ldi	r27, 0x06	; 6
    239c:	16 96       	adiw	r26, 0x06	; 6
    239e:	8c 93       	st	X, r24
    23a0:	16 97       	sbiw	r26, 0x06	; 6
    23a2:	10 8a       	std	Z+16, r1	; 0x10
    23a4:	11 8a       	std	Z+17, r1	; 0x11
    23a6:	14 8a       	std	Z+20, r1	; 0x14
    23a8:	15 8a       	std	Z+21, r1	; 0x15
    23aa:	50 96       	adiw	r26, 0x10	; 16
    23ac:	1c 92       	st	X, r1
    23ae:	50 97       	sbiw	r26, 0x10	; 16
    23b0:	51 96       	adiw	r26, 0x11	; 17
    23b2:	1c 92       	st	X, r1
    23b4:	10 92 34 28 	sts	0x2834, r1
    23b8:	80 91 ea 27 	lds	r24, 0x27EA
    23bc:	90 91 eb 27 	lds	r25, 0x27EB
    23c0:	0c 94 a5 25 	jmp	0x4b4a	; 0x4b4a <remove_task>
    23c4:	08 95       	ret

000023c6 <is_moving>:
    23c6:	80 91 34 28 	lds	r24, 0x2834
    23ca:	88 23       	and	r24, r24
    23cc:	24 f4       	brge	.+8      	; 0x23d6 <is_moving+0x10>
    23ce:	80 91 34 28 	lds	r24, 0x2834
    23d2:	87 70       	andi	r24, 0x07	; 7
    23d4:	08 95       	ret
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	08 95       	ret

000023da <move_steps>:
    23da:	4f 92       	push	r4
    23dc:	5f 92       	push	r5
    23de:	6f 92       	push	r6
    23e0:	7f 92       	push	r7
    23e2:	8f 92       	push	r8
    23e4:	9f 92       	push	r9
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	29 97       	sbiw	r28, 0x09	; 9
    2400:	cd bf       	out	0x3d, r28	; 61
    2402:	de bf       	out	0x3e, r29	; 62
    2404:	18 2f       	mov	r17, r24
    2406:	7b 01       	movw	r14, r22
    2408:	de df       	rcall	.-68     	; 0x23c6 <is_moving>
    240a:	88 23       	and	r24, r24
    240c:	0c f0       	brlt	.+2      	; 0x2410 <move_steps+0x36>
    240e:	79 c1       	rjmp	.+754    	; 0x2702 <move_steps+0x328>
    2410:	81 2f       	mov	r24, r17
    2412:	87 70       	andi	r24, 0x07	; 7
    2414:	80 68       	ori	r24, 0x80	; 128
    2416:	80 93 34 28 	sts	0x2834, r24
    241a:	a0 90 cb 28 	lds	r10, 0x28CB
    241e:	b0 90 cc 28 	lds	r11, 0x28CC
    2422:	aa 0c       	add	r10, r10
    2424:	bb 1c       	adc	r11, r11
    2426:	aa 0c       	add	r10, r10
    2428:	bb 1c       	adc	r11, r11
    242a:	aa 0c       	add	r10, r10
    242c:	bb 1c       	adc	r11, r11
    242e:	aa 0c       	add	r10, r10
    2430:	bb 1c       	adc	r11, r11
    2432:	aa 0c       	add	r10, r10
    2434:	bb 1c       	adc	r11, r11
    2436:	80 90 ed 28 	lds	r8, 0x28ED
    243a:	90 90 ee 28 	lds	r9, 0x28EE
    243e:	88 0c       	add	r8, r8
    2440:	99 1c       	adc	r9, r9
    2442:	88 0c       	add	r8, r8
    2444:	99 1c       	adc	r9, r9
    2446:	88 0c       	add	r8, r8
    2448:	99 1c       	adc	r9, r9
    244a:	88 0c       	add	r8, r8
    244c:	99 1c       	adc	r9, r9
    244e:	88 0c       	add	r8, r8
    2450:	99 1c       	adc	r9, r9
    2452:	81 2f       	mov	r24, r17
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	9c 01       	movw	r18, r24
    2458:	22 0f       	add	r18, r18
    245a:	33 1f       	adc	r19, r19
    245c:	82 0f       	add	r24, r18
    245e:	93 1f       	adc	r25, r19
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	87 5d       	subi	r24, 0xD7	; 215
    2466:	95 4d       	sbci	r25, 0xD5	; 213
    2468:	9e 01       	movw	r18, r28
    246a:	29 5f       	subi	r18, 0xF9	; 249
    246c:	3f 4f       	sbci	r19, 0xFF	; 255
    246e:	69 01       	movw	r12, r18
    2470:	fe 01       	movw	r30, r28
    2472:	31 96       	adiw	r30, 0x01	; 1
    2474:	00 e0       	ldi	r16, 0x00	; 0
    2476:	10 e0       	ldi	r17, 0x00	; 0
    2478:	3c 01       	movw	r6, r24
    247a:	dc 01       	movw	r26, r24
    247c:	4d 91       	ld	r20, X+
    247e:	5c 91       	ld	r21, X
    2480:	41 15       	cp	r20, r1
    2482:	51 05       	cpc	r21, r1
    2484:	29 f4       	brne	.+10     	; 0x2490 <move_steps+0xb6>
    2486:	10 82       	st	Z, r1
    2488:	11 82       	std	Z+1, r1	; 0x01
    248a:	d9 01       	movw	r26, r18
    248c:	1c 92       	st	X, r1
    248e:	18 c0       	rjmp	.+48     	; 0x24c0 <move_steps+0xe6>
    2490:	ba 01       	movw	r22, r20
    2492:	55 23       	and	r21, r21
    2494:	24 f4       	brge	.+8      	; 0x249e <move_steps+0xc4>
    2496:	66 27       	eor	r22, r22
    2498:	77 27       	eor	r23, r23
    249a:	64 1b       	sub	r22, r20
    249c:	75 0b       	sbc	r23, r21
    249e:	6a 0d       	add	r22, r10
    24a0:	7b 1d       	adc	r23, r11
    24a2:	60 83       	st	Z, r22
    24a4:	71 83       	std	Z+1, r23	; 0x01
    24a6:	d3 01       	movw	r26, r6
    24a8:	11 96       	adiw	r26, 0x01	; 1
    24aa:	4c 91       	ld	r20, X
    24ac:	44 0f       	add	r20, r20
    24ae:	44 0b       	sbc	r20, r20
    24b0:	44 0f       	add	r20, r20
    24b2:	4f 5f       	subi	r20, 0xFF	; 255
    24b4:	d9 01       	movw	r26, r18
    24b6:	4c 93       	st	X, r20
    24b8:	08 0d       	add	r16, r8
    24ba:	19 1d       	adc	r17, r9
    24bc:	06 0f       	add	r16, r22
    24be:	17 1f       	adc	r17, r23
    24c0:	02 96       	adiw	r24, 0x02	; 2
    24c2:	32 96       	adiw	r30, 0x02	; 2
    24c4:	2f 5f       	subi	r18, 0xFF	; 255
    24c6:	3f 4f       	sbci	r19, 0xFF	; 255
    24c8:	ec 15       	cp	r30, r12
    24ca:	fd 05       	cpc	r31, r13
    24cc:	a9 f6       	brne	.-86     	; 0x2478 <move_steps+0x9e>
    24ce:	40 e0       	ldi	r20, 0x00	; 0
    24d0:	59 e0       	ldi	r21, 0x09	; 9
    24d2:	fa 01       	movw	r30, r20
    24d4:	06 a3       	std	Z+38, r16	; 0x26
    24d6:	17 a3       	std	Z+39, r17	; 0x27
    24d8:	a0 e4       	ldi	r26, 0x40	; 64
    24da:	b8 e0       	ldi	r27, 0x08	; 8
    24dc:	96 96       	adiw	r26, 0x26	; 38
    24de:	0d 93       	st	X+, r16
    24e0:	1c 93       	st	X, r17
    24e2:	97 97       	sbiw	r26, 0x27	; 39
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	98 e0       	ldi	r25, 0x08	; 8
    24e8:	fc 01       	movw	r30, r24
    24ea:	06 a3       	std	Z+38, r16	; 0x26
    24ec:	17 a3       	std	Z+39, r17	; 0x27
    24ee:	29 81       	ldd	r18, Y+1	; 0x01
    24f0:	3a 81       	ldd	r19, Y+2	; 0x02
    24f2:	22 a7       	std	Z+42, r18	; 0x2a
    24f4:	33 a7       	std	Z+43, r19	; 0x2b
    24f6:	20 a7       	std	Z+40, r18	; 0x28
    24f8:	31 a7       	std	Z+41, r19	; 0x29
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	9a 96       	adiw	r26, 0x2a	; 42
    2500:	8d 93       	st	X+, r24
    2502:	9c 93       	st	X, r25
    2504:	9b 97       	sbiw	r26, 0x2b	; 43
    2506:	98 96       	adiw	r26, 0x28	; 40
    2508:	8d 93       	st	X+, r24
    250a:	9c 93       	st	X, r25
    250c:	99 97       	sbiw	r26, 0x29	; 41
    250e:	8d 81       	ldd	r24, Y+5	; 0x05
    2510:	9e 81       	ldd	r25, Y+6	; 0x06
    2512:	da 01       	movw	r26, r20
    2514:	9a 96       	adiw	r26, 0x2a	; 42
    2516:	8d 93       	st	X+, r24
    2518:	9c 93       	st	X, r25
    251a:	9b 97       	sbiw	r26, 0x2b	; 43
    251c:	98 96       	adiw	r26, 0x28	; 40
    251e:	8d 93       	st	X+, r24
    2520:	9c 93       	st	X, r25
    2522:	99 97       	sbiw	r26, 0x29	; 41
    2524:	a0 90 ed 28 	lds	r10, 0x28ED
    2528:	b0 90 ee 28 	lds	r11, 0x28EE
    252c:	aa 0c       	add	r10, r10
    252e:	bb 1c       	adc	r11, r11
    2530:	aa 0c       	add	r10, r10
    2532:	bb 1c       	adc	r11, r11
    2534:	aa 0c       	add	r10, r10
    2536:	bb 1c       	adc	r11, r11
    2538:	aa 0c       	add	r10, r10
    253a:	bb 1c       	adc	r11, r11
    253c:	aa 0c       	add	r10, r10
    253e:	bb 1c       	adc	r11, r11
    2540:	fe 01       	movw	r30, r28
    2542:	31 96       	adiw	r30, 0x01	; 1
    2544:	6f 01       	movw	r12, r30
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	e0 e0       	ldi	r30, 0x00	; 0
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	68 94       	set
    254e:	88 24       	eor	r8, r8
    2550:	86 f8       	bld	r8, 6
    2552:	99 24       	eor	r9, r9
    2554:	93 f8       	bld	r9, 3
    2556:	61 2c       	mov	r6, r1
    2558:	68 94       	set
    255a:	77 24       	eor	r7, r7
    255c:	73 f8       	bld	r7, 3
    255e:	0f 2e       	mov	r0, r31
    2560:	41 2c       	mov	r4, r1
    2562:	f9 e0       	ldi	r31, 0x09	; 9
    2564:	5f 2e       	mov	r5, r31
    2566:	f0 2d       	mov	r31, r0
    2568:	d6 01       	movw	r26, r12
    256a:	2d 91       	ld	r18, X+
    256c:	3d 91       	ld	r19, X+
    256e:	6d 01       	movw	r12, r26
    2570:	21 15       	cp	r18, r1
    2572:	31 05       	cpc	r19, r1
    2574:	69 f1       	breq	.+90     	; 0x25d0 <move_steps+0x1f6>
    2576:	41 30       	cpi	r20, 0x01	; 1
    2578:	81 f0       	breq	.+32     	; 0x259a <move_steps+0x1c0>
    257a:	18 f0       	brcs	.+6      	; 0x2582 <move_steps+0x1a8>
    257c:	42 30       	cpi	r20, 0x02	; 2
    257e:	c9 f0       	breq	.+50     	; 0x25b2 <move_steps+0x1d8>
    2580:	23 c0       	rjmp	.+70     	; 0x25c8 <move_steps+0x1ee>
    2582:	c8 01       	movw	r24, r16
    2584:	8e 1b       	sub	r24, r30
    2586:	9f 0b       	sbc	r25, r31
    2588:	b8 01       	movw	r22, r16
    258a:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__udivmodhi4>
    258e:	d3 01       	movw	r26, r6
    2590:	90 96       	adiw	r26, 0x20	; 32
    2592:	8d 93       	st	X+, r24
    2594:	9c 93       	st	X, r25
    2596:	91 97       	sbiw	r26, 0x21	; 33
    2598:	17 c0       	rjmp	.+46     	; 0x25c8 <move_steps+0x1ee>
    259a:	c8 01       	movw	r24, r16
    259c:	8e 1b       	sub	r24, r30
    259e:	9f 0b       	sbc	r25, r31
    25a0:	b8 01       	movw	r22, r16
    25a2:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__udivmodhi4>
    25a6:	d4 01       	movw	r26, r8
    25a8:	90 96       	adiw	r26, 0x20	; 32
    25aa:	8d 93       	st	X+, r24
    25ac:	9c 93       	st	X, r25
    25ae:	91 97       	sbiw	r26, 0x21	; 33
    25b0:	0b c0       	rjmp	.+22     	; 0x25c8 <move_steps+0x1ee>
    25b2:	c8 01       	movw	r24, r16
    25b4:	8e 1b       	sub	r24, r30
    25b6:	9f 0b       	sbc	r25, r31
    25b8:	b8 01       	movw	r22, r16
    25ba:	0e 94 1b 36 	call	0x6c36	; 0x6c36 <__udivmodhi4>
    25be:	d2 01       	movw	r26, r4
    25c0:	90 96       	adiw	r26, 0x20	; 32
    25c2:	8d 93       	st	X+, r24
    25c4:	9c 93       	st	X, r25
    25c6:	91 97       	sbiw	r26, 0x21	; 33
    25c8:	ea 0d       	add	r30, r10
    25ca:	fb 1d       	adc	r31, r11
    25cc:	e2 0f       	add	r30, r18
    25ce:	f3 1f       	adc	r31, r19
    25d0:	4f 5f       	subi	r20, 0xFF	; 255
    25d2:	43 30       	cpi	r20, 0x03	; 3
    25d4:	49 f6       	brne	.-110    	; 0x2568 <move_steps+0x18e>
    25d6:	0e 17       	cp	r16, r30
    25d8:	1f 07       	cpc	r17, r31
    25da:	09 f4       	brne	.+2      	; 0x25de <move_steps+0x204>
    25dc:	94 c0       	rjmp	.+296    	; 0x2706 <move_steps+0x32c>
    25de:	1f 93       	push	r17
    25e0:	0f 93       	push	r16
    25e2:	ff 93       	push	r31
    25e4:	ef 93       	push	r30
    25e6:	8b e4       	ldi	r24, 0x4B	; 75
    25e8:	91 e2       	ldi	r25, 0x21	; 33
    25ea:	9f 93       	push	r25
    25ec:	8f 93       	push	r24
    25ee:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	83 c0       	rjmp	.+262    	; 0x2706 <move_steps+0x32c>
    2600:	5f 5f       	subi	r21, 0xFF	; 255
    2602:	4f ef       	ldi	r20, 0xFF	; 255
    2604:	45 0f       	add	r20, r21
    2606:	e7 e0       	ldi	r30, 0x07	; 7
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	ec 0f       	add	r30, r28
    260c:	fd 1f       	adc	r31, r29
    260e:	e4 0f       	add	r30, r20
    2610:	f1 1d       	adc	r31, r1
    2612:	60 81       	ld	r22, Z
    2614:	66 23       	and	r22, r22
    2616:	64 f5       	brge	.+88     	; 0x2670 <move_steps+0x296>
    2618:	41 30       	cpi	r20, 0x01	; 1
    261a:	89 f0       	breq	.+34     	; 0x263e <move_steps+0x264>
    261c:	18 f0       	brcs	.+6      	; 0x2624 <move_steps+0x24a>
    261e:	42 30       	cpi	r20, 0x02	; 2
    2620:	d9 f0       	breq	.+54     	; 0x2658 <move_steps+0x27e>
    2622:	54 c0       	rjmp	.+168    	; 0x26cc <move_steps+0x2f2>
    2624:	fc 01       	movw	r30, r24
    2626:	c1 82       	std	Z+1, r12	; 0x01
    2628:	50 96       	adiw	r26, 0x10	; 16
    262a:	7c 93       	st	X, r23
    262c:	50 97       	sbiw	r26, 0x10	; 16
    262e:	15 96       	adiw	r26, 0x05	; 5
    2630:	4c 91       	ld	r20, X
    2632:	15 97       	sbiw	r26, 0x05	; 5
    2634:	42 60       	ori	r20, 0x02	; 2
    2636:	15 96       	adiw	r26, 0x05	; 5
    2638:	4c 93       	st	X, r20
    263a:	15 97       	sbiw	r26, 0x05	; 5
    263c:	e1 cf       	rjmp	.-62     	; 0x2600 <move_steps+0x226>
    263e:	f9 01       	movw	r30, r18
    2640:	c1 82       	std	Z+1, r12	; 0x01
    2642:	54 96       	adiw	r26, 0x14	; 20
    2644:	7c 93       	st	X, r23
    2646:	54 97       	sbiw	r26, 0x14	; 20
    2648:	15 96       	adiw	r26, 0x05	; 5
    264a:	4c 91       	ld	r20, X
    264c:	15 97       	sbiw	r26, 0x05	; 5
    264e:	40 62       	ori	r20, 0x20	; 32
    2650:	15 96       	adiw	r26, 0x05	; 5
    2652:	4c 93       	st	X, r20
    2654:	15 97       	sbiw	r26, 0x05	; 5
    2656:	d4 cf       	rjmp	.-88     	; 0x2600 <move_steps+0x226>
    2658:	83 e1       	ldi	r24, 0x13	; 19
    265a:	e0 e0       	ldi	r30, 0x00	; 0
    265c:	f9 e0       	ldi	r31, 0x09	; 9
    265e:	81 83       	std	Z+1, r24	; 0x01
    2660:	e0 e6       	ldi	r30, 0x60	; 96
    2662:	f6 e0       	ldi	r31, 0x06	; 6
    2664:	80 e4       	ldi	r24, 0x40	; 64
    2666:	80 8b       	std	Z+16, r24	; 0x10
    2668:	85 81       	ldd	r24, Z+5	; 0x05
    266a:	82 60       	ori	r24, 0x02	; 2
    266c:	85 83       	std	Z+5, r24	; 0x05
    266e:	31 c0       	rjmp	.+98     	; 0x26d2 <move_steps+0x2f8>
    2670:	16 16       	cp	r1, r22
    2672:	64 f5       	brge	.+88     	; 0x26cc <move_steps+0x2f2>
    2674:	41 30       	cpi	r20, 0x01	; 1
    2676:	89 f0       	breq	.+34     	; 0x269a <move_steps+0x2c0>
    2678:	18 f0       	brcs	.+6      	; 0x2680 <move_steps+0x2a6>
    267a:	42 30       	cpi	r20, 0x02	; 2
    267c:	d9 f0       	breq	.+54     	; 0x26b4 <move_steps+0x2da>
    267e:	26 c0       	rjmp	.+76     	; 0x26cc <move_steps+0x2f2>
    2680:	fc 01       	movw	r30, r24
    2682:	d1 82       	std	Z+1, r13	; 0x01
    2684:	51 96       	adiw	r26, 0x11	; 17
    2686:	7c 93       	st	X, r23
    2688:	51 97       	sbiw	r26, 0x11	; 17
    268a:	15 96       	adiw	r26, 0x05	; 5
    268c:	4c 91       	ld	r20, X
    268e:	15 97       	sbiw	r26, 0x05	; 5
    2690:	41 60       	ori	r20, 0x01	; 1
    2692:	15 96       	adiw	r26, 0x05	; 5
    2694:	4c 93       	st	X, r20
    2696:	15 97       	sbiw	r26, 0x05	; 5
    2698:	b3 cf       	rjmp	.-154    	; 0x2600 <move_steps+0x226>
    269a:	f9 01       	movw	r30, r18
    269c:	d1 82       	std	Z+1, r13	; 0x01
    269e:	55 96       	adiw	r26, 0x15	; 21
    26a0:	7c 93       	st	X, r23
    26a2:	55 97       	sbiw	r26, 0x15	; 21
    26a4:	15 96       	adiw	r26, 0x05	; 5
    26a6:	4c 91       	ld	r20, X
    26a8:	15 97       	sbiw	r26, 0x05	; 5
    26aa:	40 61       	ori	r20, 0x10	; 16
    26ac:	15 96       	adiw	r26, 0x05	; 5
    26ae:	4c 93       	st	X, r20
    26b0:	15 97       	sbiw	r26, 0x05	; 5
    26b2:	a6 cf       	rjmp	.-180    	; 0x2600 <move_steps+0x226>
    26b4:	83 e2       	ldi	r24, 0x23	; 35
    26b6:	e0 e0       	ldi	r30, 0x00	; 0
    26b8:	f9 e0       	ldi	r31, 0x09	; 9
    26ba:	81 83       	std	Z+1, r24	; 0x01
    26bc:	e0 e6       	ldi	r30, 0x60	; 96
    26be:	f6 e0       	ldi	r31, 0x06	; 6
    26c0:	80 e4       	ldi	r24, 0x40	; 64
    26c2:	81 8b       	std	Z+17, r24	; 0x11
    26c4:	85 81       	ldd	r24, Z+5	; 0x05
    26c6:	81 60       	ori	r24, 0x01	; 1
    26c8:	85 83       	std	Z+5, r24	; 0x05
    26ca:	03 c0       	rjmp	.+6      	; 0x26d2 <move_steps+0x2f8>
    26cc:	53 30       	cpi	r21, 0x03	; 3
    26ce:	08 f4       	brcc	.+2      	; 0x26d2 <move_steps+0x2f8>
    26d0:	97 cf       	rjmp	.-210    	; 0x2600 <move_steps+0x226>
    26d2:	98 01       	movw	r18, r16
    26d4:	d7 01       	movw	r26, r14
    26d6:	0e 94 48 36 	call	0x6c90	; 0x6c90 <__umulhisi3>
    26da:	68 94       	set
    26dc:	14 f8       	bld	r1, 4
    26de:	96 95       	lsr	r25
    26e0:	87 95       	ror	r24
    26e2:	77 95       	ror	r23
    26e4:	67 95       	ror	r22
    26e6:	16 94       	lsr	r1
    26e8:	d1 f7       	brne	.-12     	; 0x26de <move_steps+0x304>
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	4e eb       	ldi	r20, 0xBE	; 190
    26f0:	51 e1       	ldi	r21, 0x11	; 17
    26f2:	0e 94 8f 24 	call	0x491e	; 0x491e <schedule_task>
    26f6:	80 93 ea 27 	sts	0x27EA, r24
    26fa:	90 93 eb 27 	sts	0x27EB, r25
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	13 c0       	rjmp	.+38     	; 0x2728 <move_steps+0x34e>
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	11 c0       	rjmp	.+34     	; 0x2728 <move_steps+0x34e>
    2706:	51 e0       	ldi	r21, 0x01	; 1
    2708:	20 e4       	ldi	r18, 0x40	; 64
    270a:	38 e0       	ldi	r19, 0x08	; 8
    270c:	0f 2e       	mov	r0, r31
    270e:	f3 e2       	ldi	r31, 0x23	; 35
    2710:	df 2e       	mov	r13, r31
    2712:	f0 2d       	mov	r31, r0
    2714:	a0 e4       	ldi	r26, 0x40	; 64
    2716:	b6 e0       	ldi	r27, 0x06	; 6
    2718:	70 e4       	ldi	r23, 0x40	; 64
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	98 e0       	ldi	r25, 0x08	; 8
    271e:	0f 2e       	mov	r0, r31
    2720:	f3 e1       	ldi	r31, 0x13	; 19
    2722:	cf 2e       	mov	r12, r31
    2724:	f0 2d       	mov	r31, r0
    2726:	6d cf       	rjmp	.-294    	; 0x2602 <move_steps+0x228>
    2728:	29 96       	adiw	r28, 0x09	; 9
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	de bf       	out	0x3e, r29	; 62
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	df 90       	pop	r13
    273c:	cf 90       	pop	r12
    273e:	bf 90       	pop	r11
    2740:	af 90       	pop	r10
    2742:	9f 90       	pop	r9
    2744:	8f 90       	pop	r8
    2746:	7f 90       	pop	r7
    2748:	6f 90       	pop	r6
    274a:	5f 90       	pop	r5
    274c:	4f 90       	pop	r4
    274e:	08 95       	ret

00002750 <walk>:
    2750:	af 92       	push	r10
    2752:	bf 92       	push	r11
    2754:	cf 92       	push	r12
    2756:	df 92       	push	r13
    2758:	ef 92       	push	r14
    275a:	ff 92       	push	r15
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	18 2f       	mov	r17, r24
    2764:	eb 01       	movw	r28, r22
    2766:	a8 2e       	mov	r10, r24
    2768:	b1 2c       	mov	r11, r1
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatunsisf>
    2772:	6b 01       	movw	r12, r22
    2774:	7c 01       	movw	r14, r24
    2776:	f5 01       	movw	r30, r10
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	e8 5a       	subi	r30, 0xA8	; 168
    277e:	f6 4d       	sbci	r31, 0xD6	; 214
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatunsisf>
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	4a e7       	ldi	r20, 0x7A	; 122
    2792:	54 e4       	ldi	r21, 0x44	; 68
    2794:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    2798:	9b 01       	movw	r18, r22
    279a:	ac 01       	movw	r20, r24
    279c:	c7 01       	movw	r24, r14
    279e:	b6 01       	movw	r22, r12
    27a0:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    27a4:	0e 94 31 30 	call	0x6062	; 0x6062 <__fixunssfsi>
    27a8:	e6 2e       	mov	r14, r22
    27aa:	f7 2e       	mov	r15, r23
    27ac:	7f 93       	push	r23
    27ae:	6f 93       	push	r22
    27b0:	df 93       	push	r29
    27b2:	cf 93       	push	r28
    27b4:	1f 92       	push	r1
    27b6:	1f 93       	push	r17
    27b8:	81 e9       	ldi	r24, 0x91	; 145
    27ba:	91 e2       	ldi	r25, 0x21	; 33
    27bc:	9f 93       	push	r25
    27be:	8f 93       	push	r24
    27c0:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    27c4:	6e 2d       	mov	r22, r14
    27c6:	7f 2d       	mov	r23, r15
    27c8:	81 2f       	mov	r24, r17
    27ca:	07 de       	rcall	.-1010   	; 0x23da <move_steps>
    27cc:	8d b7       	in	r24, 0x3d	; 61
    27ce:	9e b7       	in	r25, 0x3e	; 62
    27d0:	08 96       	adiw	r24, 0x08	; 8
    27d2:	8d bf       	out	0x3d, r24	; 61
    27d4:	9e bf       	out	0x3e, r25	; 62
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	df 90       	pop	r13
    27e2:	cf 90       	pop	r12
    27e4:	bf 90       	pop	r11
    27e6:	af 90       	pop	r10
    27e8:	08 95       	ret

000027ea <set_mm_per_kilostep>:
    27ea:	e8 2f       	mov	r30, r24
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	ee 0f       	add	r30, r30
    27f0:	ff 1f       	adc	r31, r31
    27f2:	e8 5a       	subi	r30, 0xA8	; 168
    27f4:	f6 4d       	sbci	r31, 0xD6	; 214
    27f6:	60 83       	st	Z, r22
    27f8:	71 83       	std	Z+1, r23	; 0x01
    27fa:	08 95       	ret

000027fc <read_motor_settings>:
    27fc:	ff 92       	push	r15
    27fe:	0f 93       	push	r16
    2800:	1f 93       	push	r17
    2802:	cf 93       	push	r28
    2804:	df 93       	push	r29
    2806:	c0 e0       	ldi	r28, 0x00	; 0
    2808:	d0 e0       	ldi	r29, 0x00	; 0
    280a:	1b c0       	rjmp	.+54     	; 0x2842 <read_motor_settings+0x46>
    280c:	ce 01       	movw	r24, r28
    280e:	40 96       	adiw	r24, 0x10	; 16
    2810:	0e 94 ad 03 	call	0x75a	; 0x75a <EEPROM_read_byte>
    2814:	f8 2e       	mov	r15, r24
    2816:	ce 01       	movw	r24, r28
    2818:	41 96       	adiw	r24, 0x11	; 17
    281a:	0e 94 ad 03 	call	0x75a	; 0x75a <EEPROM_read_byte>
    281e:	fe 01       	movw	r30, r28
    2820:	e7 5d       	subi	r30, 0xD7	; 215
    2822:	f5 4d       	sbci	r31, 0xD5	; 213
    2824:	2f 2d       	mov	r18, r15
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	32 2f       	mov	r19, r18
    282a:	22 27       	eor	r18, r18
    282c:	28 2b       	or	r18, r24
    282e:	20 83       	st	Z, r18
    2830:	31 83       	std	Z+1, r19	; 0x01
    2832:	22 96       	adiw	r28, 0x02	; 2
    2834:	c0 17       	cp	r28, r16
    2836:	d1 07       	cpc	r29, r17
    2838:	49 f7       	brne	.-46     	; 0x280c <read_motor_settings+0x10>
    283a:	00 33       	cpi	r16, 0x30	; 48
    283c:	11 05       	cpc	r17, r1
    283e:	29 f0       	breq	.+10     	; 0x284a <read_motor_settings+0x4e>
    2840:	e8 01       	movw	r28, r16
    2842:	8e 01       	movw	r16, r28
    2844:	0a 5f       	subi	r16, 0xFA	; 250
    2846:	1f 4f       	sbci	r17, 0xFF	; 255
    2848:	e1 cf       	rjmp	.-62     	; 0x280c <read_motor_settings+0x10>
    284a:	08 e5       	ldi	r16, 0x58	; 88
    284c:	19 e2       	ldi	r17, 0x29	; 41
    284e:	c0 e4       	ldi	r28, 0x40	; 64
    2850:	d0 e0       	ldi	r29, 0x00	; 0
    2852:	ce 01       	movw	r24, r28
    2854:	0e 94 ad 03 	call	0x75a	; 0x75a <EEPROM_read_byte>
    2858:	f8 2e       	mov	r15, r24
    285a:	ce 01       	movw	r24, r28
    285c:	01 96       	adiw	r24, 0x01	; 1
    285e:	0e 94 ad 03 	call	0x75a	; 0x75a <EEPROM_read_byte>
    2862:	2f 2d       	mov	r18, r15
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	32 2f       	mov	r19, r18
    2868:	22 27       	eor	r18, r18
    286a:	28 2b       	or	r18, r24
    286c:	f8 01       	movw	r30, r16
    286e:	21 93       	st	Z+, r18
    2870:	31 93       	st	Z+, r19
    2872:	8f 01       	movw	r16, r30
    2874:	22 96       	adiw	r28, 0x02	; 2
    2876:	c0 35       	cpi	r28, 0x50	; 80
    2878:	d1 05       	cpc	r29, r1
    287a:	59 f7       	brne	.-42     	; 0x2852 <read_motor_settings+0x56>
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	1f 91       	pop	r17
    2882:	0f 91       	pop	r16
    2884:	ff 90       	pop	r15
    2886:	08 95       	ret

00002888 <motor_init>:
    2888:	83 e3       	ldi	r24, 0x33	; 51
    288a:	e0 e4       	ldi	r30, 0x40	; 64
    288c:	f6 e0       	ldi	r31, 0x06	; 6
    288e:	81 83       	std	Z+1, r24	; 0x01
    2890:	83 e0       	ldi	r24, 0x03	; 3
    2892:	e0 e6       	ldi	r30, 0x60	; 96
    2894:	f6 e0       	ldi	r31, 0x06	; 6
    2896:	81 83       	std	Z+1, r24	; 0x01
    2898:	97 e0       	ldi	r25, 0x07	; 7
    289a:	90 93 00 08 	sts	0x0800, r25
    289e:	e0 e4       	ldi	r30, 0x40	; 64
    28a0:	f8 e0       	ldi	r31, 0x08	; 8
    28a2:	81 83       	std	Z+1, r24	; 0x01
    28a4:	90 83       	st	Z, r25
    28a6:	81 83       	std	Z+1, r24	; 0x01
    28a8:	e0 e0       	ldi	r30, 0x00	; 0
    28aa:	f9 e0       	ldi	r31, 0x09	; 9
    28ac:	90 83       	st	Z, r25
    28ae:	81 83       	std	Z+1, r24	; 0x01
    28b0:	10 92 34 28 	sts	0x2834, r1
    28b4:	84 e1       	ldi	r24, 0x14	; 20
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	80 93 cb 28 	sts	0x28CB, r24
    28bc:	90 93 cc 28 	sts	0x28CC, r25
    28c0:	8e e1       	ldi	r24, 0x1E	; 30
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	80 93 ed 28 	sts	0x28ED, r24
    28c8:	90 93 ee 28 	sts	0x28EE, r25
    28cc:	97 cf       	rjmp	.-210    	; 0x27fc <read_motor_settings>
    28ce:	08 95       	ret

000028d0 <write_motor_settings>:
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	c0 e0       	ldi	r28, 0x00	; 0
    28dc:	d0 e0       	ldi	r29, 0x00	; 0
    28de:	16 c0       	rjmp	.+44     	; 0x290c <write_motor_settings+0x3c>
    28e0:	fe 01       	movw	r30, r28
    28e2:	e7 5d       	subi	r30, 0xD7	; 215
    28e4:	f5 4d       	sbci	r31, 0xD5	; 213
    28e6:	f0 80       	ld	r15, Z
    28e8:	61 81       	ldd	r22, Z+1	; 0x01
    28ea:	ce 01       	movw	r24, r28
    28ec:	40 96       	adiw	r24, 0x10	; 16
    28ee:	0e 94 c8 03 	call	0x790	; 0x790 <EEPROM_write_byte>
    28f2:	6f 2d       	mov	r22, r15
    28f4:	ce 01       	movw	r24, r28
    28f6:	41 96       	adiw	r24, 0x11	; 17
    28f8:	0e 94 c8 03 	call	0x790	; 0x790 <EEPROM_write_byte>
    28fc:	22 96       	adiw	r28, 0x02	; 2
    28fe:	c0 17       	cp	r28, r16
    2900:	d1 07       	cpc	r29, r17
    2902:	71 f7       	brne	.-36     	; 0x28e0 <write_motor_settings+0x10>
    2904:	00 33       	cpi	r16, 0x30	; 48
    2906:	11 05       	cpc	r17, r1
    2908:	29 f0       	breq	.+10     	; 0x2914 <write_motor_settings+0x44>
    290a:	e8 01       	movw	r28, r16
    290c:	8e 01       	movw	r16, r28
    290e:	0a 5f       	subi	r16, 0xFA	; 250
    2910:	1f 4f       	sbci	r17, 0xFF	; 255
    2912:	e6 cf       	rjmp	.-52     	; 0x28e0 <write_motor_settings+0x10>
    2914:	08 e5       	ldi	r16, 0x58	; 88
    2916:	19 e2       	ldi	r17, 0x29	; 41
    2918:	c0 e4       	ldi	r28, 0x40	; 64
    291a:	d0 e0       	ldi	r29, 0x00	; 0
    291c:	f8 01       	movw	r30, r16
    291e:	f0 80       	ld	r15, Z
    2920:	61 81       	ldd	r22, Z+1	; 0x01
    2922:	0e 5f       	subi	r16, 0xFE	; 254
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
    2926:	ce 01       	movw	r24, r28
    2928:	0e 94 c8 03 	call	0x790	; 0x790 <EEPROM_write_byte>
    292c:	6f 2d       	mov	r22, r15
    292e:	ce 01       	movw	r24, r28
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	0e 94 c8 03 	call	0x790	; 0x790 <EEPROM_write_byte>
    2936:	22 96       	adiw	r28, 0x02	; 2
    2938:	c0 35       	cpi	r28, 0x50	; 80
    293a:	d1 05       	cpc	r29, r1
    293c:	79 f7       	brne	.-34     	; 0x291c <write_motor_settings+0x4c>
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	ff 90       	pop	r15
    2948:	08 95       	ret

0000294a <print_motor_values>:
    294a:	9f 92       	push	r9
    294c:	af 92       	push	r10
    294e:	bf 92       	push	r11
    2950:	cf 92       	push	r12
    2952:	df 92       	push	r13
    2954:	ef 92       	push	r14
    2956:	ff 92       	push	r15
    2958:	0f 93       	push	r16
    295a:	1f 93       	push	r17
    295c:	cf 93       	push	r28
    295e:	df 93       	push	r29
    2960:	8e ec       	ldi	r24, 0xCE	; 206
    2962:	91 e2       	ldi	r25, 0x21	; 33
    2964:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    2968:	0f 2e       	mov	r0, r31
    296a:	f9 e2       	ldi	r31, 0x29	; 41
    296c:	cf 2e       	mov	r12, r31
    296e:	fa e2       	ldi	r31, 0x2A	; 42
    2970:	df 2e       	mov	r13, r31
    2972:	f0 2d       	mov	r31, r0
    2974:	e1 2c       	mov	r14, r1
    2976:	f1 2c       	mov	r15, r1
    2978:	0f 2e       	mov	r0, r31
    297a:	fc ed       	ldi	r31, 0xDC	; 220
    297c:	af 2e       	mov	r10, r31
    297e:	f1 e2       	ldi	r31, 0x21	; 33
    2980:	bf 2e       	mov	r11, r31
    2982:	f0 2d       	mov	r31, r0
    2984:	02 ee       	ldi	r16, 0xE2	; 226
    2986:	11 e2       	ldi	r17, 0x21	; 33
    2988:	ff 92       	push	r15
    298a:	ef 92       	push	r14
    298c:	bf 92       	push	r11
    298e:	af 92       	push	r10
    2990:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	e6 01       	movw	r28, r12
    299e:	91 2c       	mov	r9, r1
    29a0:	88 81       	ld	r24, Y
    29a2:	99 81       	ldd	r25, Y+1	; 0x01
    29a4:	22 96       	adiw	r28, 0x02	; 2
    29a6:	9f 93       	push	r25
    29a8:	8f 93       	push	r24
    29aa:	1f 93       	push	r17
    29ac:	0f 93       	push	r16
    29ae:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    29b2:	93 94       	inc	r9
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	0f 90       	pop	r0
    29bc:	83 e0       	ldi	r24, 0x03	; 3
    29be:	98 12       	cpse	r9, r24
    29c0:	ef cf       	rjmp	.-34     	; 0x29a0 <print_motor_values+0x56>
    29c2:	8f e5       	ldi	r24, 0x5F	; 95
    29c4:	95 e2       	ldi	r25, 0x25	; 37
    29c6:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    29ca:	8f ef       	ldi	r24, 0xFF	; 255
    29cc:	e8 1a       	sub	r14, r24
    29ce:	f8 0a       	sbc	r15, r24
    29d0:	86 e0       	ldi	r24, 0x06	; 6
    29d2:	c8 0e       	add	r12, r24
    29d4:	d1 1c       	adc	r13, r1
    29d6:	88 e0       	ldi	r24, 0x08	; 8
    29d8:	e8 16       	cp	r14, r24
    29da:	f1 04       	cpc	r15, r1
    29dc:	a9 f6       	brne	.-86     	; 0x2988 <print_motor_values+0x3e>
    29de:	8f e5       	ldi	r24, 0x5F	; 95
    29e0:	95 e2       	ldi	r25, 0x25	; 37
    29e2:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    29e6:	df 91       	pop	r29
    29e8:	cf 91       	pop	r28
    29ea:	1f 91       	pop	r17
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	df 90       	pop	r13
    29f4:	cf 90       	pop	r12
    29f6:	bf 90       	pop	r11
    29f8:	af 90       	pop	r10
    29fa:	9f 90       	pop	r9
    29fc:	08 95       	ret

000029fe <print_dist_per_step>:
	// TODO: Deprecated?
}

void print_dist_per_step()
{
    29fe:	ef 92       	push	r14
    2a00:	ff 92       	push	r15
    2a02:	0f 93       	push	r16
    2a04:	1f 93       	push	r17
    2a06:	cf 93       	push	r28
    2a08:	df 93       	push	r29
	printf("Dist (mm) per kilostep\r\n");
    2a0a:	86 ee       	ldi	r24, 0xE6	; 230
    2a0c:	91 e2       	ldi	r25, 0x21	; 33
    2a0e:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    2a12:	08 e5       	ldi	r16, 0x58	; 88
    2a14:	19 e2       	ldi	r17, 0x29	; 41
    2a16:	c0 e0       	ldi	r28, 0x00	; 0
    2a18:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf("\t%i\t%hu\r\n", direction, mm_per_kilostep[direction]);	
    2a1a:	0f 2e       	mov	r0, r31
    2a1c:	fe ef       	ldi	r31, 0xFE	; 254
    2a1e:	ef 2e       	mov	r14, r31
    2a20:	f1 e2       	ldi	r31, 0x21	; 33
    2a22:	ff 2e       	mov	r15, r31
    2a24:	f0 2d       	mov	r31, r0
    2a26:	f8 01       	movw	r30, r16
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	0e 5f       	subi	r16, 0xFE	; 254
    2a2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a30:	9f 93       	push	r25
    2a32:	8f 93       	push	r24
    2a34:	df 93       	push	r29
    2a36:	cf 93       	push	r28
    2a38:	ff 92       	push	r15
    2a3a:	ef 92       	push	r14
    2a3c:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    2a40:	21 96       	adiw	r28, 0x01	; 1
}

void print_dist_per_step()
{
	printf("Dist (mm) per kilostep\r\n");
	for(uint8_t direction = 0 ; direction<8; direction++)
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
    2a4e:	c8 30       	cpi	r28, 0x08	; 8
    2a50:	d1 05       	cpc	r29, r1
    2a52:	49 f7       	brne	.-46     	; 0x2a26 <print_dist_per_step+0x28>
	{
		printf("\t%i\t%hu\r\n", direction, mm_per_kilostep[direction]);	
	}
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	ff 90       	pop	r15
    2a5e:	ef 90       	pop	r14
    2a60:	08 95       	ret

00002a62 <pc_comm_putchar>:
	serial_in_index = temp_index;
}

int pc_comm_putchar(char c, FILE *stream)
{
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    2a62:	e0 eb       	ldi	r30, 0xB0	; 176
    2a64:	f9 e0       	ldi	r31, 0x09	; 9
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	95 ff       	sbrs	r25, 5
    2a6a:	fd cf       	rjmp	.-6      	; 0x2a66 <pc_comm_putchar+0x4>
	PC_USART.DATA = c;
    2a6c:	80 93 b0 09 	sts	0x09B0, r24
	return 1;
}
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	08 95       	ret

00002a76 <pc_comm_init>:

static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pc_comm_init()
{
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    2a76:	e0 e6       	ldi	r30, 0x60	; 96
    2a78:	f6 e0       	ldi	r31, 0x06	; 6
    2a7a:	80 e8       	ldi	r24, 0x80	; 128
    2a7c:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    2a7e:	80 e4       	ldi	r24, 0x40	; 64
    2a80:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    2a82:	e0 eb       	ldi	r30, 0xB0	; 176
    2a84:	f9 e0       	ldi	r31, 0x09	; 9
    2a86:	83 e0       	ldi	r24, 0x03	; 3
    2a88:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    2a8a:	87 e1       	ldi	r24, 0x17	; 23
    2a8c:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    2a8e:	84 ea       	ldi	r24, 0xA4	; 164
    2a90:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    2a92:	84 81       	ldd	r24, Z+4	; 0x04
    2a94:	80 61       	ori	r24, 0x10	; 16
    2a96:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    2a98:	84 81       	ldd	r24, Z+4	; 0x04
    2a9a:	88 60       	ori	r24, 0x08	; 8
    2a9c:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    2a9e:	82 e1       	ldi	r24, 0x12	; 18
    2aa0:	90 e2       	ldi	r25, 0x20	; 32
    2aa2:	80 93 aa 2b 	sts	0x2BAA, r24
    2aa6:	90 93 ab 2b 	sts	0x2BAB, r25
	serial_in_index = 0;
    2aaa:	10 92 32 28 	sts	0x2832, r1
    2aae:	10 92 33 28 	sts	0x2833, r1
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_LO_gc;
    2ab2:	80 e1       	ldi	r24, 0x10	; 16
    2ab4:	83 83       	std	Z+3, r24	; 0x03
    2ab6:	08 95       	ret

00002ab8 <handle_up_arrow>:
		putchar(data);
	}
}

void handle_up_arrow()
{
    2ab8:	1f 93       	push	r17
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
	uint8_t temp_index = serial_in_index;
    2abe:	80 91 32 28 	lds	r24, 0x2832
    2ac2:	90 91 33 28 	lds	r25, 0x2833
    2ac6:	18 2f       	mov	r17, r24
    2ac8:	fc 01       	movw	r30, r24
    2aca:	ff 27       	eor	r31, r31
			
	while(serial_in_buffer[temp_index] != '\0')
    2acc:	ee 50       	subi	r30, 0x0E	; 14
    2ace:	f8 4d       	sbci	r31, 0xD8	; 216
    2ad0:	80 81       	ld	r24, Z
    2ad2:	88 23       	and	r24, r24
    2ad4:	79 f0       	breq	.+30     	; 0x2af4 <handle_up_arrow+0x3c>
	{
		putchar(serial_in_buffer[temp_index]);
    2ad6:	ca ea       	ldi	r28, 0xAA	; 170
    2ad8:	db e2       	ldi	r29, 0x2B	; 43
    2ada:	68 81       	ld	r22, Y
    2adc:	79 81       	ldd	r23, Y+1	; 0x01
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	0e 94 e4 38 	call	0x71c8	; 0x71c8 <fputc>
		temp_index++;
    2ae4:	1f 5f       	subi	r17, 0xFF	; 255

void handle_up_arrow()
{
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0')
    2ae6:	e1 2f       	mov	r30, r17
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	ee 50       	subi	r30, 0x0E	; 14
    2aec:	f8 4d       	sbci	r31, 0xD8	; 216
    2aee:	80 81       	ld	r24, Z
    2af0:	81 11       	cpse	r24, r1
    2af2:	f3 cf       	rjmp	.-26     	; 0x2ada <handle_up_arrow+0x22>
	{
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    2af4:	81 2f       	mov	r24, r17
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	80 93 32 28 	sts	0x2832, r24
    2afc:	90 93 33 28 	sts	0x2833, r25
}
    2b00:	df 91       	pop	r29
    2b02:	cf 91       	pop	r28
    2b04:	1f 91       	pop	r17
    2b06:	08 95       	ret

00002b08 <handle_serial_input>:

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }

void handle_serial_input()
{
	char data = PC_USART.DATA;
    2b08:	80 91 b0 09 	lds	r24, 0x09B0
	if(escaped_arrow==1)
    2b0c:	90 91 28 2a 	lds	r25, 0x2A28
    2b10:	91 30       	cpi	r25, 0x01	; 1
    2b12:	31 f4       	brne	.+12     	; 0x2b20 <handle_serial_input+0x18>
	{
		if(data == 65)
    2b14:	81 34       	cpi	r24, 0x41	; 65
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <handle_serial_input+0x12>
		{
			handle_up_arrow();
    2b18:	cf df       	rcall	.-98     	; 0x2ab8 <handle_up_arrow>
		}
		escaped_arrow=0;
    2b1a:	10 92 28 2a 	sts	0x2A28, r1
    2b1e:	08 95       	ret
	}
	else if(escaped)
    2b20:	90 91 f1 27 	lds	r25, 0x27F1
    2b24:	99 23       	and	r25, r25
    2b26:	41 f0       	breq	.+16     	; 0x2b38 <handle_serial_input+0x30>
	{
		if(data == 91)
    2b28:	8b 35       	cpi	r24, 0x5B	; 91
    2b2a:	19 f4       	brne	.+6      	; 0x2b32 <handle_serial_input+0x2a>
		{
			escaped_arrow=1;	
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	80 93 28 2a 	sts	0x2A28, r24
		}
		escaped=0;
    2b32:	10 92 f1 27 	sts	0x27F1, r1
    2b36:	08 95       	ret
	}
	else if(data == '\r' || data == '\n') //We got the newline character.
    2b38:	8d 30       	cpi	r24, 0x0D	; 13
    2b3a:	11 f0       	breq	.+4      	; 0x2b40 <handle_serial_input+0x38>
    2b3c:	8a 30       	cpi	r24, 0x0A	; 10
    2b3e:	a9 f4       	brne	.+42     	; 0x2b6a <handle_serial_input+0x62>
	{
		printf("\r\n");
    2b40:	8f e5       	ldi	r24, 0x5F	; 95
    2b42:	95 e2       	ldi	r25, 0x25	; 37
    2b44:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
		serial_in_buffer[serial_in_index]='\0';
    2b48:	60 91 32 28 	lds	r22, 0x2832
    2b4c:	70 91 33 28 	lds	r23, 0x2833
    2b50:	fb 01       	movw	r30, r22
    2b52:	ee 50       	subi	r30, 0x0E	; 14
    2b54:	f8 4d       	sbci	r31, 0xD8	; 216
    2b56:	10 82       	st	Z, r1
		handle_serial_command(serial_in_buffer,serial_in_index);
    2b58:	82 ef       	ldi	r24, 0xF2	; 242
    2b5a:	97 e2       	ldi	r25, 0x27	; 39
    2b5c:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <handle_serial_command>
		serial_in_index = 0;
    2b60:	10 92 32 28 	sts	0x2832, r1
    2b64:	10 92 33 28 	sts	0x2833, r1
    2b68:	08 95       	ret
	}
	else if(data == '\b') //We got the backspace character.
    2b6a:	88 30       	cpi	r24, 0x08	; 8
    2b6c:	a1 f4       	brne	.+40     	; 0x2b96 <handle_serial_input+0x8e>
	{
		if(serial_in_index > 0) serial_in_index--;
    2b6e:	80 91 32 28 	lds	r24, 0x2832
    2b72:	90 91 33 28 	lds	r25, 0x2833
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	29 f0       	breq	.+10     	; 0x2b84 <handle_serial_input+0x7c>
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	80 93 32 28 	sts	0x2832, r24
    2b80:	90 93 33 28 	sts	0x2833, r25
		printf("\b \b");
    2b84:	88 e0       	ldi	r24, 0x08	; 8
    2b86:	92 e2       	ldi	r25, 0x22	; 34
    2b88:	9f 93       	push	r25
    2b8a:	8f 93       	push	r24
    2b8c:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    2b90:	0f 90       	pop	r0
    2b92:	0f 90       	pop	r0
    2b94:	08 95       	ret
	}
	else if(data == 27) //escape pressed.
    2b96:	8b 31       	cpi	r24, 0x1B	; 27
    2b98:	21 f4       	brne	.+8      	; 0x2ba2 <handle_serial_input+0x9a>
	{
		escaped = 1;
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	80 93 f1 27 	sts	0x27F1, r24
    2ba0:	08 95       	ret
	}
	else if(serial_in_index==BUFFER_SIZE) //Buffer overflow
    2ba2:	20 91 32 28 	lds	r18, 0x2832
    2ba6:	30 91 33 28 	lds	r19, 0x2833
    2baa:	20 34       	cpi	r18, 0x40	; 64
    2bac:	31 05       	cpc	r19, r1
    2bae:	91 f4       	brne	.+36     	; 0x2bd4 <handle_serial_input+0xcc>
	{
		printf("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n",BUFFER_SIZE);
    2bb0:	1f 92       	push	r1
    2bb2:	80 e4       	ldi	r24, 0x40	; 64
    2bb4:	8f 93       	push	r24
    2bb6:	8c e0       	ldi	r24, 0x0C	; 12
    2bb8:	92 e2       	ldi	r25, 0x22	; 34
    2bba:	9f 93       	push	r25
    2bbc:	8f 93       	push	r24
    2bbe:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
		serial_in_index = 0;
    2bc2:	10 92 32 28 	sts	0x2832, r1
    2bc6:	10 92 33 28 	sts	0x2833, r1
    2bca:	0f 90       	pop	r0
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	08 95       	ret
	}
	else //Everything is fine. Add the character to the buffer.
	{
		serial_in_buffer[serial_in_index] = data;
    2bd4:	f9 01       	movw	r30, r18
    2bd6:	ee 50       	subi	r30, 0x0E	; 14
    2bd8:	f8 4d       	sbci	r31, 0xD8	; 216
    2bda:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    2bdc:	2f 5f       	subi	r18, 0xFF	; 255
    2bde:	3f 4f       	sbci	r19, 0xFF	; 255
    2be0:	20 93 32 28 	sts	0x2832, r18
    2be4:	30 93 33 28 	sts	0x2833, r19
		putchar(data);
    2be8:	60 91 aa 2b 	lds	r22, 0x2BAA
    2bec:	70 91 ab 2b 	lds	r23, 0x2BAB
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	0c 94 e4 38 	jmp	0x71c8	; 0x71c8 <fputc>
    2bf6:	08 95       	ret

00002bf8 <__vector_91>:
	serial_in_index = 0;
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_LO_gc;
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    2bf8:	1f 92       	push	r1
    2bfa:	0f 92       	push	r0
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	0f 92       	push	r0
    2c00:	11 24       	eor	r1, r1
    2c02:	0b b6       	in	r0, 0x3b	; 59
    2c04:	0f 92       	push	r0
    2c06:	2f 93       	push	r18
    2c08:	3f 93       	push	r19
    2c0a:	4f 93       	push	r20
    2c0c:	5f 93       	push	r21
    2c0e:	6f 93       	push	r22
    2c10:	7f 93       	push	r23
    2c12:	8f 93       	push	r24
    2c14:	9f 93       	push	r25
    2c16:	af 93       	push	r26
    2c18:	bf 93       	push	r27
    2c1a:	ef 93       	push	r30
    2c1c:	ff 93       	push	r31
    2c1e:	74 df       	rcall	.-280    	; 0x2b08 <handle_serial_input>
    2c20:	ff 91       	pop	r31
    2c22:	ef 91       	pop	r30
    2c24:	bf 91       	pop	r27
    2c26:	af 91       	pop	r26
    2c28:	9f 91       	pop	r25
    2c2a:	8f 91       	pop	r24
    2c2c:	7f 91       	pop	r23
    2c2e:	6f 91       	pop	r22
    2c30:	5f 91       	pop	r21
    2c32:	4f 91       	pop	r20
    2c34:	3f 91       	pop	r19
    2c36:	2f 91       	pop	r18
    2c38:	0f 90       	pop	r0
    2c3a:	0b be       	out	0x3b, r0	; 59
    2c3c:	0f 90       	pop	r0
    2c3e:	0f be       	out	0x3f, r0	; 63
    2c40:	0f 90       	pop	r0
    2c42:	1f 90       	pop	r1
    2c44:	18 95       	reti

00002c46 <cap_monitor_init>:
}


void cap_monitor_init()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    2c46:	83 e0       	ldi	r24, 0x03	; 3
    2c48:	e0 e2       	ldi	r30, 0x20	; 32
    2c4a:	f6 e0       	ldi	r31, 0x06	; 6
    2c4c:	82 83       	std	Z+2, r24	; 0x02
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    2c4e:	e0 e9       	ldi	r30, 0x90	; 144
    2c50:	f3 e0       	ldi	r31, 0x03	; 3
    2c52:	81 e0       	ldi	r24, 0x01	; 1
    2c54:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    2c56:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc; //Changed the muxneg from bandgap
    2c58:	88 e0       	ldi	r24, 0x08	; 8
    2c5a:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    2c5c:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    2c5e:	80 e1       	ldi	r24, 0x10	; 16
    2c60:	86 83       	std	Z+6, r24	; 0x06
    2c62:	08 95       	ret

00002c64 <leg_monitor_init>:
}

void leg_monitor_init()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    2c64:	8f e1       	ldi	r24, 0x1F	; 31
    2c66:	e0 e0       	ldi	r30, 0x00	; 0
    2c68:	f6 e0       	ldi	r31, 0x06	; 6
    2c6a:	82 83       	std	Z+2, r24	; 0x02
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    2c6c:	e0 e8       	ldi	r30, 0x80	; 128
    2c6e:	f3 e0       	ldi	r31, 0x03	; 3
    2c70:	89 e0       	ldi	r24, 0x09	; 9
    2c72:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    2c74:	81 83       	std	Z+1, r24	; 0x01
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc;			// PA0 is VREF_HI
    2c76:	12 82       	std	Z+2, r1	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc;			// PA1 is VREF_LO
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0MUXCTRL |= AC_MUXPOS_PIN2_gc;		// Initially, look at leg1
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	80 61       	ori	r24, 0x10	; 16
    2c80:	82 83       	std	Z+2, r24	; 0x02
	ACA.AC1MUXCTRL |= AC_MUXPOS_PIN2_gc;
    2c82:	83 81       	ldd	r24, Z+3	; 0x03
    2c84:	80 61       	ori	r24, 0x10	; 16
    2c86:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    2c88:	80 e1       	ldi	r24, 0x10	; 16
    2c8a:	86 83       	std	Z+6, r24	; 0x06
    2c8c:	08 95       	ret

00002c8e <power_init>:
#include "power.h"

void power_init()
{
	cap_monitor_init();
    2c8e:	db df       	rcall	.-74     	; 0x2c46 <cap_monitor_init>
	leg_monitor_init();
    2c90:	e9 cf       	rjmp	.-46     	; 0x2c64 <leg_monitor_init>
    2c92:	08 95       	ret

00002c94 <random_init>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    2c94:	e0 ec       	ldi	r30, 0xC0	; 192
    2c96:	f0 e0       	ldi	r31, 0x00	; 0
    2c98:	80 e2       	ldi	r24, 0x20	; 32
    2c9a:	80 83       	st	Z, r24
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    2c9c:	88 b1       	in	r24, 0x08	; 8
    2c9e:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    2ca0:	89 b1       	in	r24, 0x09	; 9
    2ca2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    2ca4:	8a b1       	in	r24, 0x0a	; 10
    2ca6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    2ca8:	8b b1       	in	r24, 0x0b	; 11
    2caa:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    2cac:	8c b1       	in	r24, 0x0c	; 12
    2cae:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    2cb0:	8d b1       	in	r24, 0x0d	; 13
    2cb2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_WAFNUM;
    2cb4:	80 b3       	in	r24, 0x10	; 16
    2cb6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDX0;
    2cb8:	82 b3       	in	r24, 0x12	; 18
    2cba:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_COORDX1;
    2cbc:	83 b3       	in	r24, 0x13	; 19
    2cbe:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY0;
    2cc0:	84 b3       	in	r24, 0x14	; 20
    2cc2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY1;
    2cc4:	85 b3       	in	r24, 0x15	; 21
    2cc6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH0.RESL;
    2cc8:	a0 e0       	ldi	r26, 0x00	; 0
    2cca:	b2 e0       	ldi	r27, 0x02	; 2
    2ccc:	94 96       	adiw	r26, 0x24	; 36
    2cce:	8c 91       	ld	r24, X
    2cd0:	94 97       	sbiw	r26, 0x24	; 36
    2cd2:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = ADCA.CH1.RESL;
    2cd4:	9c 96       	adiw	r26, 0x2c	; 44
    2cd6:	8c 91       	ld	r24, X
    2cd8:	9c 97       	sbiw	r26, 0x2c	; 44
    2cda:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH2.RESL;
    2cdc:	d4 96       	adiw	r26, 0x34	; 52
    2cde:	8c 91       	ld	r24, X
    2ce0:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH0.RESL;
    2ce2:	a0 e4       	ldi	r26, 0x40	; 64
    2ce4:	b2 e0       	ldi	r27, 0x02	; 2
    2ce6:	94 96       	adiw	r26, 0x24	; 36
    2ce8:	8c 91       	ld	r24, X
    2cea:	94 97       	sbiw	r26, 0x24	; 36
    2cec:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH1.RESL;
    2cee:	9c 96       	adiw	r26, 0x2c	; 44
    2cf0:	8c 91       	ld	r24, X
    2cf2:	83 83       	std	Z+3, r24	; 0x03

	r_round = 1;
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	80 93 a2 2a 	sts	0x2AA2, r24
    2cfa:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    2cfc:	91 e0       	ldi	r25, 0x01	; 1
    2cfe:	92 83       	std	Z+2, r25	; 0x02
    2d00:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    2d02:	e9 f7       	brne	.-6      	; 0x2cfe <random_init+0x6a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    2d04:	84 e8       	ldi	r24, 0x84	; 132
    2d06:	80 93 c0 00 	sts	0x00C0, r24

	r_position = 0;
    2d0a:	10 92 a3 2a 	sts	0x2AA3, r1
    2d0e:	08 95       	ret

00002d10 <range_algs_init>:
	for(uint8_t i=1 ; i<13 ; i++)
	{
		printf("%3lu  |  ",timer[i] - timer[i-1]);
	}
	printf("\r\n");
}
    2d10:	88 eb       	ldi	r24, 0xB8	; 184
    2d12:	9a e2       	ldi	r25, 0x2A	; 42
    2d14:	2c eb       	ldi	r18, 0xBC	; 188
    2d16:	3a e2       	ldi	r19, 0x2A	; 42
    2d18:	14 c0       	rjmp	.+40     	; 0x2d42 <range_algs_init+0x32>
    2d1a:	df 01       	movw	r26, r30
    2d1c:	54 97       	sbiw	r26, 0x14	; 20
    2d1e:	1c 92       	st	X, r1
    2d20:	14 96       	adiw	r26, 0x04	; 4
    2d22:	1c 92       	st	X, r1
    2d24:	14 96       	adiw	r26, 0x04	; 4
    2d26:	1c 92       	st	X, r1
    2d28:	14 96       	adiw	r26, 0x04	; 4
    2d2a:	1c 92       	st	X, r1
    2d2c:	14 96       	adiw	r26, 0x04	; 4
    2d2e:	1c 92       	st	X, r1
    2d30:	10 82       	st	Z, r1
    2d32:	4f 5f       	subi	r20, 0xFF	; 255
    2d34:	78 96       	adiw	r30, 0x18	; 24
    2d36:	46 30       	cpi	r20, 0x06	; 6
    2d38:	81 f7       	brne	.-32     	; 0x2d1a <range_algs_init+0xa>
    2d3a:	01 96       	adiw	r24, 0x01	; 1
    2d3c:	82 17       	cp	r24, r18
    2d3e:	93 07       	cpc	r25, r19
    2d40:	19 f0       	breq	.+6      	; 0x2d48 <range_algs_init+0x38>
    2d42:	fc 01       	movw	r30, r24
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	e9 cf       	rjmp	.-46     	; 0x2d1a <range_algs_init+0xa>
    2d48:	08 95       	ret

00002d4a <get_bearing>:
    2d4a:	2f 92       	push	r2
    2d4c:	3f 92       	push	r3
    2d4e:	4f 92       	push	r4
    2d50:	5f 92       	push	r5
    2d52:	6f 92       	push	r6
    2d54:	7f 92       	push	r7
    2d56:	8f 92       	push	r8
    2d58:	9f 92       	push	r9
    2d5a:	af 92       	push	r10
    2d5c:	bf 92       	push	r11
    2d5e:	cf 92       	push	r12
    2d60:	df 92       	push	r13
    2d62:	ef 92       	push	r14
    2d64:	ff 92       	push	r15
    2d66:	0f 93       	push	r16
    2d68:	1f 93       	push	r17
    2d6a:	cf 93       	push	r28
    2d6c:	df 93       	push	r29
    2d6e:	c8 e3       	ldi	r28, 0x38	; 56
    2d70:	d0 e2       	ldi	r29, 0x20	; 32
    2d72:	8c 01       	movw	r16, r24
    2d74:	0f 2e       	mov	r0, r31
    2d76:	f8 e6       	ldi	r31, 0x68	; 104
    2d78:	2f 2e       	mov	r2, r31
    2d7a:	f0 e2       	ldi	r31, 0x20	; 32
    2d7c:	3f 2e       	mov	r3, r31
    2d7e:	f0 2d       	mov	r31, r0
    2d80:	81 2c       	mov	r8, r1
    2d82:	91 2c       	mov	r9, r1
    2d84:	54 01       	movw	r10, r8
    2d86:	24 01       	movw	r4, r8
    2d88:	35 01       	movw	r6, r10
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	61 91       	ld	r22, Z+
    2d8e:	8f 01       	movw	r16, r30
    2d90:	70 e0       	ldi	r23, 0x00	; 0
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	0e 94 5f 30 	call	0x60be	; 0x60be <__floatsisf>
    2d9a:	6b 01       	movw	r12, r22
    2d9c:	7c 01       	movw	r14, r24
    2d9e:	28 81       	ld	r18, Y
    2da0:	39 81       	ldd	r19, Y+1	; 0x01
    2da2:	4a 81       	ldd	r20, Y+2	; 0x02
    2da4:	5b 81       	ldd	r21, Y+3	; 0x03
    2da6:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    2daa:	9b 01       	movw	r18, r22
    2dac:	ac 01       	movw	r20, r24
    2dae:	c3 01       	movw	r24, r6
    2db0:	b2 01       	movw	r22, r4
    2db2:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    2db6:	2b 01       	movw	r4, r22
    2db8:	3c 01       	movw	r6, r24
    2dba:	2c 81       	ldd	r18, Y+4	; 0x04
    2dbc:	3d 81       	ldd	r19, Y+5	; 0x05
    2dbe:	4e 81       	ldd	r20, Y+6	; 0x06
    2dc0:	5f 81       	ldd	r21, Y+7	; 0x07
    2dc2:	c7 01       	movw	r24, r14
    2dc4:	b6 01       	movw	r22, r12
    2dc6:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    2dca:	9b 01       	movw	r18, r22
    2dcc:	ac 01       	movw	r20, r24
    2dce:	c5 01       	movw	r24, r10
    2dd0:	b4 01       	movw	r22, r8
    2dd2:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    2dd6:	4b 01       	movw	r8, r22
    2dd8:	5c 01       	movw	r10, r24
    2dda:	28 96       	adiw	r28, 0x08	; 8
    2ddc:	c2 15       	cp	r28, r2
    2dde:	d3 05       	cpc	r29, r3
    2de0:	a1 f6       	brne	.-88     	; 0x2d8a <get_bearing+0x40>
    2de2:	a3 01       	movw	r20, r6
    2de4:	92 01       	movw	r18, r4
    2de6:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <atan2>
    2dea:	df 91       	pop	r29
    2dec:	cf 91       	pop	r28
    2dee:	1f 91       	pop	r17
    2df0:	0f 91       	pop	r16
    2df2:	ff 90       	pop	r15
    2df4:	ef 90       	pop	r14
    2df6:	df 90       	pop	r13
    2df8:	cf 90       	pop	r12
    2dfa:	bf 90       	pop	r11
    2dfc:	af 90       	pop	r10
    2dfe:	9f 90       	pop	r9
    2e00:	8f 90       	pop	r8
    2e02:	7f 90       	pop	r7
    2e04:	6f 90       	pop	r6
    2e06:	5f 90       	pop	r5
    2e08:	4f 90       	pop	r4
    2e0a:	3f 90       	pop	r3
    2e0c:	2f 90       	pop	r2
    2e0e:	08 95       	ret

00002e10 <fill_S_and_T>:
    2e10:	cf 92       	push	r12
    2e12:	df 92       	push	r13
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	f6 2e       	mov	r15, r22
    2e20:	07 2f       	mov	r16, r23
    2e22:	a6 2f       	mov	r26, r22
    2e24:	b7 2f       	mov	r27, r23
    2e26:	e4 2f       	mov	r30, r20
    2e28:	f5 2f       	mov	r31, r21
    2e2a:	26 e0       	ldi	r18, 0x06	; 6
    2e2c:	11 92       	st	Z+, r1
    2e2e:	1d 92       	st	X+, r1
    2e30:	21 50       	subi	r18, 0x01	; 1
    2e32:	e1 f7       	brne	.-8      	; 0x2e2c <fill_S_and_T+0x1c>
    2e34:	c4 2e       	mov	r12, r20
    2e36:	d5 2e       	mov	r13, r21
    2e38:	40 e0       	ldi	r20, 0x00	; 0
    2e3a:	50 e0       	ldi	r21, 0x00	; 0
    2e3c:	17 c0       	rjmp	.+46     	; 0x2e6c <fill_S_and_T+0x5c>
    2e3e:	9d 01       	movw	r18, r26
    2e40:	10 81       	ld	r17, Z
    2e42:	7d 91       	ld	r23, X+
    2e44:	71 0f       	add	r23, r17
    2e46:	71 93       	st	Z+, r23
    2e48:	e6 01       	movw	r28, r12
    2e4a:	78 81       	ld	r23, Y
    2e4c:	e9 01       	movw	r28, r18
    2e4e:	28 81       	ld	r18, Y
    2e50:	27 0f       	add	r18, r23
    2e52:	e6 01       	movw	r28, r12
    2e54:	28 83       	st	Y, r18
    2e56:	6f 5f       	subi	r22, 0xFF	; 255
    2e58:	66 30       	cpi	r22, 0x06	; 6
    2e5a:	89 f7       	brne	.-30     	; 0x2e3e <fill_S_and_T+0x2e>
    2e5c:	4a 5f       	subi	r20, 0xFA	; 250
    2e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e60:	df ef       	ldi	r29, 0xFF	; 255
    2e62:	cd 1a       	sub	r12, r29
    2e64:	dd 0a       	sbc	r13, r29
    2e66:	44 32       	cpi	r20, 0x24	; 36
    2e68:	51 05       	cpc	r21, r1
    2e6a:	39 f0       	breq	.+14     	; 0x2e7a <fill_S_and_T+0x6a>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	a4 0f       	add	r26, r20
    2e70:	b5 1f       	adc	r27, r21
    2e72:	ef 2d       	mov	r30, r15
    2e74:	f0 2f       	mov	r31, r16
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	e2 cf       	rjmp	.-60     	; 0x2e3e <fill_S_and_T+0x2e>
    2e7a:	df 91       	pop	r29
    2e7c:	cf 91       	pop	r28
    2e7e:	1f 91       	pop	r17
    2e80:	0f 91       	pop	r16
    2e82:	ff 90       	pop	r15
    2e84:	df 90       	pop	r13
    2e86:	cf 90       	pop	r12
    2e88:	08 95       	ret

00002e8a <pack_measurements_into_matrix>:
    2e8a:	df 92       	push	r13
    2e8c:	ef 92       	push	r14
    2e8e:	ff 92       	push	r15
    2e90:	0f 93       	push	r16
    2e92:	1f 93       	push	r17
    2e94:	cf 93       	push	r28
    2e96:	df 93       	push	r29
    2e98:	44 ea       	ldi	r20, 0xA4	; 164
    2e9a:	5a e2       	ldi	r21, 0x2A	; 42
    2e9c:	64 e3       	ldi	r22, 0x34	; 52
    2e9e:	7b e2       	ldi	r23, 0x2B	; 43
    2ea0:	e1 2c       	mov	r14, r1
    2ea2:	dd 24       	eor	r13, r13
    2ea4:	da 94       	dec	r13
    2ea6:	1e c0       	rjmp	.+60     	; 0x2ee4 <pack_measurements_into_matrix+0x5a>
    2ea8:	c1 91       	ld	r28, Z+
    2eaa:	c1 17       	cp	r28, r17
    2eac:	08 f4       	brcc	.+2      	; 0x2eb0 <pack_measurements_into_matrix+0x26>
    2eae:	1c 2f       	mov	r17, r28
    2eb0:	0c 17       	cp	r16, r28
    2eb2:	08 f4       	brcc	.+2      	; 0x2eb6 <pack_measurements_into_matrix+0x2c>
    2eb4:	0c 2f       	mov	r16, r28
    2eb6:	d1 50       	subi	r29, 0x01	; 1
    2eb8:	b9 f7       	brne	.-18     	; 0x2ea8 <pack_measurements_into_matrix+0x1e>
    2eba:	01 1b       	sub	r16, r17
    2ebc:	e0 16       	cp	r14, r16
    2ebe:	08 f4       	brcc	.+2      	; 0x2ec2 <pack_measurements_into_matrix+0x38>
    2ec0:	e0 2e       	mov	r14, r16
    2ec2:	0d 93       	st	X+, r16
    2ec4:	fa 94       	dec	r15
    2ec6:	2c 5f       	subi	r18, 0xFC	; 252
    2ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eca:	ff 20       	and	r15, r15
    2ecc:	29 f0       	breq	.+10     	; 0x2ed8 <pack_measurements_into_matrix+0x4e>
    2ece:	f9 01       	movw	r30, r18
    2ed0:	d4 e0       	ldi	r29, 0x04	; 4
    2ed2:	00 e0       	ldi	r16, 0x00	; 0
    2ed4:	1d 2d       	mov	r17, r13
    2ed6:	e8 cf       	rjmp	.-48     	; 0x2ea8 <pack_measurements_into_matrix+0x1e>
    2ed8:	06 96       	adiw	r24, 0x06	; 6
    2eda:	48 5e       	subi	r20, 0xE8	; 232
    2edc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ede:	46 17       	cp	r20, r22
    2ee0:	57 07       	cpc	r21, r23
    2ee2:	39 f0       	breq	.+14     	; 0x2ef2 <pack_measurements_into_matrix+0x68>
    2ee4:	9a 01       	movw	r18, r20
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	0f 2e       	mov	r0, r31
    2eea:	f6 e0       	ldi	r31, 0x06	; 6
    2eec:	ff 2e       	mov	r15, r31
    2eee:	f0 2d       	mov	r31, r0
    2ef0:	ee cf       	rjmp	.-36     	; 0x2ece <pack_measurements_into_matrix+0x44>
    2ef2:	81 e0       	ldi	r24, 0x01	; 1
    2ef4:	8e 15       	cp	r24, r14
    2ef6:	08 f4       	brcc	.+2      	; 0x2efa <pack_measurements_into_matrix+0x70>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	df 91       	pop	r29
    2efc:	cf 91       	pop	r28
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	ff 90       	pop	r15
    2f04:	ef 90       	pop	r14
    2f06:	df 90       	pop	r13
    2f08:	08 95       	ret

00002f0a <get_baseline_readings>:
    2f0a:	df 92       	push	r13
    2f0c:	ef 92       	push	r14
    2f0e:	ff 92       	push	r15
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
    2f18:	04 ea       	ldi	r16, 0xA4	; 164
    2f1a:	1a e2       	ldi	r17, 0x2A	; 42
    2f1c:	0f 2e       	mov	r0, r31
    2f1e:	f4 e3       	ldi	r31, 0x34	; 52
    2f20:	ef 2e       	mov	r14, r31
    2f22:	fb e2       	ldi	r31, 0x2B	; 43
    2f24:	ff 2e       	mov	r15, r31
    2f26:	f0 2d       	mov	r31, r0
    2f28:	0d c0       	rjmp	.+26     	; 0x2f44 <get_baseline_readings+0x3a>
    2f2a:	8d 2d       	mov	r24, r13
    2f2c:	70 d8       	rcall	.-3872   	; 0x200e <get_ir_sensor>
    2f2e:	88 83       	st	Y, r24
    2f30:	d3 94       	inc	r13
    2f32:	24 96       	adiw	r28, 0x04	; 4
    2f34:	86 e0       	ldi	r24, 0x06	; 6
    2f36:	d8 12       	cpse	r13, r24
    2f38:	f8 cf       	rjmp	.-16     	; 0x2f2a <get_baseline_readings+0x20>
    2f3a:	08 5e       	subi	r16, 0xE8	; 232
    2f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3e:	0e 15       	cp	r16, r14
    2f40:	1f 05       	cpc	r17, r15
    2f42:	19 f0       	breq	.+6      	; 0x2f4a <get_baseline_readings+0x40>
    2f44:	e8 01       	movw	r28, r16
    2f46:	d1 2c       	mov	r13, r1
    2f48:	f0 cf       	rjmp	.-32     	; 0x2f2a <get_baseline_readings+0x20>
    2f4a:	df 91       	pop	r29
    2f4c:	cf 91       	pop	r28
    2f4e:	1f 91       	pop	r17
    2f50:	0f 91       	pop	r16
    2f52:	ff 90       	pop	r15
    2f54:	ef 90       	pop	r14
    2f56:	df 90       	pop	r13
    2f58:	08 95       	ret

00002f5a <ir_range_meas>:
    2f5a:	2f 92       	push	r2
    2f5c:	3f 92       	push	r3
    2f5e:	4f 92       	push	r4
    2f60:	5f 92       	push	r5
    2f62:	6f 92       	push	r6
    2f64:	7f 92       	push	r7
    2f66:	8f 92       	push	r8
    2f68:	9f 92       	push	r9
    2f6a:	af 92       	push	r10
    2f6c:	bf 92       	push	r11
    2f6e:	cf 92       	push	r12
    2f70:	df 92       	push	r13
    2f72:	ef 92       	push	r14
    2f74:	ff 92       	push	r15
    2f76:	0f 93       	push	r16
    2f78:	1f 93       	push	r17
    2f7a:	cf 93       	push	r28
    2f7c:	df 93       	push	r29
    2f7e:	8f e5       	ldi	r24, 0x5F	; 95
    2f80:	9a ee       	ldi	r25, 0xEA	; 234
    2f82:	a0 e0       	ldi	r26, 0x00	; 0
    2f84:	b0 e0       	ldi	r27, 0x00	; 0
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	a1 09       	sbc	r26, r1
    2f8a:	b1 09       	sbc	r27, r1
    2f8c:	00 00       	nop
    2f8e:	01 f0       	breq	.+0      	; 0x2f90 <ir_range_meas+0x36>
    2f90:	d1 f7       	brne	.-12     	; 0x2f86 <ir_range_meas+0x2c>
    2f92:	c8 95       	lpm
    2f94:	00 00       	nop
    2f96:	8f e7       	ldi	r24, 0x7F	; 127
    2f98:	9e e3       	ldi	r25, 0x3E	; 62
    2f9a:	01 97       	sbiw	r24, 0x01	; 1
    2f9c:	f1 f7       	brne	.-4      	; 0x2f9a <ir_range_meas+0x40>
    2f9e:	00 00       	nop
    2fa0:	00 c0       	rjmp	.+0      	; 0x2fa2 <ir_range_meas+0x48>
    2fa2:	0f 2e       	mov	r0, r31
    2fa4:	f5 ea       	ldi	r31, 0xA5	; 165
    2fa6:	6f 2e       	mov	r6, r31
    2fa8:	fa e2       	ldi	r31, 0x2A	; 42
    2faa:	7f 2e       	mov	r7, r31
    2fac:	f0 2d       	mov	r31, r0
    2fae:	0f 2e       	mov	r0, r31
    2fb0:	f5 e3       	ldi	r31, 0x35	; 53
    2fb2:	4f 2e       	mov	r4, r31
    2fb4:	fb e2       	ldi	r31, 0x2B	; 43
    2fb6:	5f 2e       	mov	r5, r31
    2fb8:	f0 2d       	mov	r31, r0
    2fba:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    2fbe:	4b 01       	movw	r8, r22
    2fc0:	5c 01       	movw	r10, r24
    2fc2:	83 01       	movw	r16, r6
    2fc4:	33 24       	eor	r3, r3
    2fc6:	33 94       	inc	r3
    2fc8:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    2fcc:	6b 01       	movw	r12, r22
    2fce:	7c 01       	movw	r14, r24
    2fd0:	e8 01       	movw	r28, r16
    2fd2:	21 2c       	mov	r2, r1
    2fd4:	82 2d       	mov	r24, r2
    2fd6:	1b d8       	rcall	.-4042   	; 0x200e <get_ir_sensor>
    2fd8:	88 83       	st	Y, r24
    2fda:	23 94       	inc	r2
    2fdc:	24 96       	adiw	r28, 0x04	; 4
    2fde:	86 e0       	ldi	r24, 0x06	; 6
    2fe0:	28 12       	cpse	r2, r24
    2fe2:	f8 cf       	rjmp	.-16     	; 0x2fd4 <ir_range_meas+0x7a>
    2fe4:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	8c 19       	sub	r24, r12
    2fee:	9d 09       	sbc	r25, r13
    2ff0:	ae 09       	sbc	r26, r14
    2ff2:	bf 09       	sbc	r27, r15
    2ff4:	03 97       	sbiw	r24, 0x03	; 3
    2ff6:	a1 05       	cpc	r26, r1
    2ff8:	b1 05       	cpc	r27, r1
    2ffa:	a0 f3       	brcs	.-24     	; 0x2fe4 <ir_range_meas+0x8a>
    2ffc:	82 e0       	ldi	r24, 0x02	; 2
    2ffe:	83 15       	cp	r24, r3
    3000:	20 f0       	brcs	.+8      	; 0x300a <ir_range_meas+0xb0>
    3002:	85 e0       	ldi	r24, 0x05	; 5
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
    300a:	33 94       	inc	r3
    300c:	0f 5f       	subi	r16, 0xFF	; 255
    300e:	1f 4f       	sbci	r17, 0xFF	; 255
    3010:	84 e0       	ldi	r24, 0x04	; 4
    3012:	38 12       	cpse	r3, r24
    3014:	d9 cf       	rjmp	.-78     	; 0x2fc8 <ir_range_meas+0x6e>
    3016:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    301a:	dc 01       	movw	r26, r24
    301c:	cb 01       	movw	r24, r22
    301e:	88 19       	sub	r24, r8
    3020:	99 09       	sbc	r25, r9
    3022:	aa 09       	sbc	r26, r10
    3024:	bb 09       	sbc	r27, r11
    3026:	47 97       	sbiw	r24, 0x17	; 23
    3028:	a1 05       	cpc	r26, r1
    302a:	b1 05       	cpc	r27, r1
    302c:	a0 f3       	brcs	.-24     	; 0x3016 <ir_range_meas+0xbc>
    302e:	8f e0       	ldi	r24, 0x0F	; 15
    3030:	90 e0       	ldi	r25, 0x00	; 0
    3032:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
    3036:	88 e1       	ldi	r24, 0x18	; 24
    3038:	68 0e       	add	r6, r24
    303a:	71 1c       	adc	r7, r1
    303c:	64 14       	cp	r6, r4
    303e:	75 04       	cpc	r7, r5
    3040:	09 f0       	breq	.+2      	; 0x3044 <ir_range_meas+0xea>
    3042:	bb cf       	rjmp	.-138    	; 0x2fba <ir_range_meas+0x60>
    3044:	df 91       	pop	r29
    3046:	cf 91       	pop	r28
    3048:	1f 91       	pop	r17
    304a:	0f 91       	pop	r16
    304c:	ff 90       	pop	r15
    304e:	ef 90       	pop	r14
    3050:	df 90       	pop	r13
    3052:	cf 90       	pop	r12
    3054:	bf 90       	pop	r11
    3056:	af 90       	pop	r10
    3058:	9f 90       	pop	r9
    305a:	8f 90       	pop	r8
    305c:	7f 90       	pop	r7
    305e:	6f 90       	pop	r6
    3060:	5f 90       	pop	r5
    3062:	4f 90       	pop	r4
    3064:	3f 90       	pop	r3
    3066:	2f 90       	pop	r2
    3068:	08 95       	ret

0000306a <receive_rnb_data>:
    306a:	cf 93       	push	r28
    306c:	df 93       	push	r29
    306e:	1f 92       	push	r1
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	72 df       	rcall	.-284    	; 0x2f5a <ir_range_meas>
    3076:	49 df       	rcall	.-366    	; 0x2f0a <get_baseline_readings>
    3078:	19 82       	std	Y+1, r1	; 0x01
    307a:	9e 01       	movw	r18, r28
    307c:	2f 5f       	subi	r18, 0xFF	; 255
    307e:	3f 4f       	sbci	r19, 0xFF	; 255
    3080:	4c eb       	ldi	r20, 0xBC	; 188
    3082:	5f e1       	ldi	r21, 0x1F	; 31
    3084:	6a e0       	ldi	r22, 0x0A	; 10
    3086:	70 e0       	ldi	r23, 0x00	; 0
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	0e 94 8f 24 	call	0x491e	; 0x491e <schedule_task>
    3090:	0f 90       	pop	r0
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <ir_emit>:
    3098:	af 92       	push	r10
    309a:	bf 92       	push	r11
    309c:	cf 92       	push	r12
    309e:	df 92       	push	r13
    30a0:	ef 92       	push	r14
    30a2:	ff 92       	push	r15
    30a4:	0f 93       	push	r16
    30a6:	1f 93       	push	r17
    30a8:	82 30       	cpi	r24, 0x02	; 2
    30aa:	19 f1       	breq	.+70     	; 0x30f2 <ir_emit+0x5a>
    30ac:	30 f4       	brcc	.+12     	; 0x30ba <ir_emit+0x22>
    30ae:	88 23       	and	r24, r24
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <ir_emit+0x1c>
    30b2:	5b c0       	rjmp	.+182    	; 0x316a <ir_emit+0xd2>
    30b4:	81 30       	cpi	r24, 0x01	; 1
    30b6:	71 f0       	breq	.+28     	; 0x30d4 <ir_emit+0x3c>
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <ir_emit+0x2e>
    30ba:	84 30       	cpi	r24, 0x04	; 4
    30bc:	c1 f1       	breq	.+112    	; 0x312e <ir_emit+0x96>
    30be:	40 f1       	brcs	.+80     	; 0x3110 <ir_emit+0x78>
    30c0:	85 30       	cpi	r24, 0x05	; 5
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <ir_emit+0x2e>
    30c4:	43 c0       	rjmp	.+134    	; 0x314c <ir_emit+0xb4>
    30c6:	e1 2c       	mov	r14, r1
    30c8:	f1 2c       	mov	r15, r1
    30ca:	00 e0       	ldi	r16, 0x00	; 0
    30cc:	10 e0       	ldi	r17, 0x00	; 0
    30ce:	c1 2c       	mov	r12, r1
    30d0:	d1 2c       	mov	r13, r1
    30d2:	58 c0       	rjmp	.+176    	; 0x3184 <ir_emit+0xec>
    30d4:	0f 2e       	mov	r0, r31
    30d6:	f0 eb       	ldi	r31, 0xB0	; 176
    30d8:	ef 2e       	mov	r14, r31
    30da:	f8 e0       	ldi	r31, 0x08	; 8
    30dc:	ff 2e       	mov	r15, r31
    30de:	f0 2d       	mov	r31, r0
    30e0:	00 e4       	ldi	r16, 0x40	; 64
    30e2:	16 e0       	ldi	r17, 0x06	; 6
    30e4:	68 94       	set
    30e6:	cc 24       	eor	r12, r12
    30e8:	c7 f8       	bld	r12, 7
    30ea:	68 94       	set
    30ec:	dd 24       	eor	r13, r13
    30ee:	d1 f8       	bld	r13, 1
    30f0:	49 c0       	rjmp	.+146    	; 0x3184 <ir_emit+0xec>
    30f2:	0f 2e       	mov	r0, r31
    30f4:	f0 ea       	ldi	r31, 0xA0	; 160
    30f6:	ef 2e       	mov	r14, r31
    30f8:	f9 e0       	ldi	r31, 0x09	; 9
    30fa:	ff 2e       	mov	r15, r31
    30fc:	f0 2d       	mov	r31, r0
    30fe:	00 e6       	ldi	r16, 0x60	; 96
    3100:	16 e0       	ldi	r17, 0x06	; 6
    3102:	68 94       	set
    3104:	cc 24       	eor	r12, r12
    3106:	c3 f8       	bld	r12, 3
    3108:	68 94       	set
    310a:	dd 24       	eor	r13, r13
    310c:	d4 f8       	bld	r13, 4
    310e:	3a c0       	rjmp	.+116    	; 0x3184 <ir_emit+0xec>
    3110:	0f 2e       	mov	r0, r31
    3112:	f0 ea       	ldi	r31, 0xA0	; 160
    3114:	ef 2e       	mov	r14, r31
    3116:	fa e0       	ldi	r31, 0x0A	; 10
    3118:	ff 2e       	mov	r15, r31
    311a:	f0 2d       	mov	r31, r0
    311c:	00 e8       	ldi	r16, 0x80	; 128
    311e:	16 e0       	ldi	r17, 0x06	; 6
    3120:	68 94       	set
    3122:	cc 24       	eor	r12, r12
    3124:	c3 f8       	bld	r12, 3
    3126:	68 94       	set
    3128:	dd 24       	eor	r13, r13
    312a:	d5 f8       	bld	r13, 5
    312c:	2b c0       	rjmp	.+86     	; 0x3184 <ir_emit+0xec>
    312e:	0f 2e       	mov	r0, r31
    3130:	f0 eb       	ldi	r31, 0xB0	; 176
    3132:	ef 2e       	mov	r14, r31
    3134:	fa e0       	ldi	r31, 0x0A	; 10
    3136:	ff 2e       	mov	r15, r31
    3138:	f0 2d       	mov	r31, r0
    313a:	00 e8       	ldi	r16, 0x80	; 128
    313c:	16 e0       	ldi	r17, 0x06	; 6
    313e:	68 94       	set
    3140:	cc 24       	eor	r12, r12
    3142:	c7 f8       	bld	r12, 7
    3144:	68 94       	set
    3146:	dd 24       	eor	r13, r13
    3148:	d7 f8       	bld	r13, 7
    314a:	1c c0       	rjmp	.+56     	; 0x3184 <ir_emit+0xec>
    314c:	0f 2e       	mov	r0, r31
    314e:	f0 ea       	ldi	r31, 0xA0	; 160
    3150:	ef 2e       	mov	r14, r31
    3152:	fb e0       	ldi	r31, 0x0B	; 11
    3154:	ff 2e       	mov	r15, r31
    3156:	f0 2d       	mov	r31, r0
    3158:	00 ea       	ldi	r16, 0xA0	; 160
    315a:	16 e0       	ldi	r17, 0x06	; 6
    315c:	68 94       	set
    315e:	cc 24       	eor	r12, r12
    3160:	c3 f8       	bld	r12, 3
    3162:	68 94       	set
    3164:	dd 24       	eor	r13, r13
    3166:	d6 f8       	bld	r13, 6
    3168:	0d c0       	rjmp	.+26     	; 0x3184 <ir_emit+0xec>
    316a:	0f 2e       	mov	r0, r31
    316c:	f0 ea       	ldi	r31, 0xA0	; 160
    316e:	ef 2e       	mov	r14, r31
    3170:	f8 e0       	ldi	r31, 0x08	; 8
    3172:	ff 2e       	mov	r15, r31
    3174:	f0 2d       	mov	r31, r0
    3176:	00 e4       	ldi	r16, 0x40	; 64
    3178:	16 e0       	ldi	r17, 0x06	; 6
    317a:	68 94       	set
    317c:	cc 24       	eor	r12, r12
    317e:	c3 f8       	bld	r12, 3
    3180:	dd 24       	eor	r13, r13
    3182:	d3 94       	inc	r13
    3184:	f7 01       	movw	r30, r14
    3186:	a4 80       	ldd	r10, Z+4	; 0x04
    3188:	e0 e0       	ldi	r30, 0x00	; 0
    318a:	fb e0       	ldi	r31, 0x0B	; 11
    318c:	81 81       	ldd	r24, Z+1	; 0x01
    318e:	bd 2c       	mov	r11, r13
    3190:	b0 94       	com	r11
    3192:	8b 21       	and	r24, r11
    3194:	81 83       	std	Z+1, r24	; 0x01
    3196:	e0 ea       	ldi	r30, 0xA0	; 160
    3198:	f6 e0       	ldi	r31, 0x06	; 6
    319a:	d1 82       	std	Z+1, r13	; 0x01
    319c:	84 81       	ldd	r24, Z+4	; 0x04
    319e:	8d 29       	or	r24, r13
    31a0:	84 83       	std	Z+4, r24	; 0x04
    31a2:	f7 01       	movw	r30, r14
    31a4:	14 82       	std	Z+4, r1	; 0x04
    31a6:	f8 01       	movw	r30, r16
    31a8:	c1 82       	std	Z+1, r12	; 0x01
    31aa:	84 81       	ldd	r24, Z+4	; 0x04
    31ac:	9c 2d       	mov	r25, r12
    31ae:	90 95       	com	r25
    31b0:	89 23       	and	r24, r25
    31b2:	84 83       	std	Z+4, r24	; 0x04
    31b4:	70 e0       	ldi	r23, 0x00	; 0
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatunsisf>
    31be:	20 e0       	ldi	r18, 0x00	; 0
    31c0:	34 e2       	ldi	r19, 0x24	; 36
    31c2:	44 ef       	ldi	r20, 0xF4	; 244
    31c4:	5b e4       	ldi	r21, 0x4B	; 75
    31c6:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	4a e7       	ldi	r20, 0x7A	; 122
    31d0:	54 e4       	ldi	r21, 0x44	; 68
    31d2:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	40 e0       	ldi	r20, 0x00	; 0
    31dc:	5f e3       	ldi	r21, 0x3F	; 63
    31de:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    31e2:	0e 94 31 30 	call	0x6062	; 0x6062 <__fixunssfsi>
    31e6:	ab 01       	movw	r20, r22
    31e8:	bc 01       	movw	r22, r24
    31ea:	4d 30       	cpi	r20, 0x0D	; 13
    31ec:	51 05       	cpc	r21, r1
    31ee:	61 05       	cpc	r22, r1
    31f0:	71 05       	cpc	r23, r1
    31f2:	08 f4       	brcc	.+2      	; 0x31f6 <ir_emit+0x15e>
    31f4:	5d c0       	rjmp	.+186    	; 0x32b0 <ir_emit+0x218>
    31f6:	41 30       	cpi	r20, 0x01	; 1
    31f8:	f4 e0       	ldi	r31, 0x04	; 4
    31fa:	5f 07       	cpc	r21, r31
    31fc:	61 05       	cpc	r22, r1
    31fe:	71 05       	cpc	r23, r1
    3200:	d8 f4       	brcc	.+54     	; 0x3238 <ir_emit+0x1a0>
    3202:	41 50       	subi	r20, 0x01	; 1
    3204:	51 09       	sbc	r21, r1
    3206:	61 09       	sbc	r22, r1
    3208:	71 09       	sbc	r23, r1
    320a:	db 01       	movw	r26, r22
    320c:	ca 01       	movw	r24, r20
    320e:	b6 95       	lsr	r27
    3210:	a7 95       	ror	r26
    3212:	97 95       	ror	r25
    3214:	87 95       	ror	r24
    3216:	b6 95       	lsr	r27
    3218:	a7 95       	ror	r26
    321a:	97 95       	ror	r25
    321c:	87 95       	ror	r24
    321e:	43 70       	andi	r20, 0x03	; 3
    3220:	55 27       	eor	r21, r21
    3222:	66 27       	eor	r22, r22
    3224:	77 27       	eor	r23, r23
    3226:	00 97       	sbiw	r24, 0x00	; 0
    3228:	a1 05       	cpc	r26, r1
    322a:	b1 05       	cpc	r27, r1
    322c:	09 f4       	brne	.+2      	; 0x3230 <ir_emit+0x198>
    322e:	40 c0       	rjmp	.+128    	; 0x32b0 <ir_emit+0x218>
    3230:	8a 95       	dec	r24
    3232:	01 f0       	breq	.+0      	; 0x3234 <ir_emit+0x19c>
    3234:	e9 f7       	brne	.-6      	; 0x3230 <ir_emit+0x198>
    3236:	3c c0       	rjmp	.+120    	; 0x32b0 <ir_emit+0x218>
    3238:	42 30       	cpi	r20, 0x02	; 2
    323a:	51 05       	cpc	r21, r1
    323c:	84 e0       	ldi	r24, 0x04	; 4
    323e:	68 07       	cpc	r22, r24
    3240:	71 05       	cpc	r23, r1
    3242:	d0 f4       	brcc	.+52     	; 0x3278 <ir_emit+0x1e0>
    3244:	42 50       	subi	r20, 0x02	; 2
    3246:	51 09       	sbc	r21, r1
    3248:	61 09       	sbc	r22, r1
    324a:	71 09       	sbc	r23, r1
    324c:	db 01       	movw	r26, r22
    324e:	ca 01       	movw	r24, r20
    3250:	b6 95       	lsr	r27
    3252:	a7 95       	ror	r26
    3254:	97 95       	ror	r25
    3256:	87 95       	ror	r24
    3258:	b6 95       	lsr	r27
    325a:	a7 95       	ror	r26
    325c:	97 95       	ror	r25
    325e:	87 95       	ror	r24
    3260:	43 70       	andi	r20, 0x03	; 3
    3262:	55 27       	eor	r21, r21
    3264:	66 27       	eor	r22, r22
    3266:	77 27       	eor	r23, r23
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	a1 05       	cpc	r26, r1
    326c:	b1 05       	cpc	r27, r1
    326e:	01 f1       	breq	.+64     	; 0x32b0 <ir_emit+0x218>
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	f1 f7       	brne	.-4      	; 0x3270 <ir_emit+0x1d8>
    3274:	00 00       	nop
    3276:	1c c0       	rjmp	.+56     	; 0x32b0 <ir_emit+0x218>
    3278:	44 50       	subi	r20, 0x04	; 4
    327a:	51 09       	sbc	r21, r1
    327c:	61 09       	sbc	r22, r1
    327e:	71 09       	sbc	r23, r1
    3280:	db 01       	movw	r26, r22
    3282:	ca 01       	movw	r24, r20
    3284:	68 94       	set
    3286:	12 f8       	bld	r1, 2
    3288:	b6 95       	lsr	r27
    328a:	a7 95       	ror	r26
    328c:	97 95       	ror	r25
    328e:	87 95       	ror	r24
    3290:	16 94       	lsr	r1
    3292:	d1 f7       	brne	.-12     	; 0x3288 <ir_emit+0x1f0>
    3294:	47 70       	andi	r20, 0x07	; 7
    3296:	55 27       	eor	r21, r21
    3298:	66 27       	eor	r22, r22
    329a:	77 27       	eor	r23, r23
    329c:	00 97       	sbiw	r24, 0x00	; 0
    329e:	a1 05       	cpc	r26, r1
    32a0:	b1 05       	cpc	r27, r1
    32a2:	31 f0       	breq	.+12     	; 0x32b0 <ir_emit+0x218>
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	a1 09       	sbc	r26, r1
    32a8:	b1 09       	sbc	r27, r1
    32aa:	00 00       	nop
    32ac:	01 f0       	breq	.+0      	; 0x32ae <ir_emit+0x216>
    32ae:	d1 f7       	brne	.-12     	; 0x32a4 <ir_emit+0x20c>
    32b0:	41 30       	cpi	r20, 0x01	; 1
    32b2:	51 05       	cpc	r21, r1
    32b4:	61 05       	cpc	r22, r1
    32b6:	71 05       	cpc	r23, r1
    32b8:	11 f4       	brne	.+4      	; 0x32be <ir_emit+0x226>
    32ba:	00 00       	nop
    32bc:	0e c0       	rjmp	.+28     	; 0x32da <ir_emit+0x242>
    32be:	42 30       	cpi	r20, 0x02	; 2
    32c0:	51 05       	cpc	r21, r1
    32c2:	61 05       	cpc	r22, r1
    32c4:	71 05       	cpc	r23, r1
    32c6:	11 f4       	brne	.+4      	; 0x32cc <ir_emit+0x234>
    32c8:	00 c0       	rjmp	.+0      	; 0x32ca <ir_emit+0x232>
    32ca:	0f c0       	rjmp	.+30     	; 0x32ea <ir_emit+0x252>
    32cc:	43 30       	cpi	r20, 0x03	; 3
    32ce:	51 05       	cpc	r21, r1
    32d0:	61 05       	cpc	r22, r1
    32d2:	71 05       	cpc	r23, r1
    32d4:	11 f4       	brne	.+4      	; 0x32da <ir_emit+0x242>
    32d6:	c8 95       	lpm
    32d8:	10 c0       	rjmp	.+32     	; 0x32fa <ir_emit+0x262>
    32da:	44 30       	cpi	r20, 0x04	; 4
    32dc:	51 05       	cpc	r21, r1
    32de:	61 05       	cpc	r22, r1
    32e0:	71 05       	cpc	r23, r1
    32e2:	19 f4       	brne	.+6      	; 0x32ea <ir_emit+0x252>
    32e4:	c8 95       	lpm
    32e6:	00 00       	nop
    32e8:	10 c0       	rjmp	.+32     	; 0x330a <ir_emit+0x272>
    32ea:	45 30       	cpi	r20, 0x05	; 5
    32ec:	51 05       	cpc	r21, r1
    32ee:	61 05       	cpc	r22, r1
    32f0:	71 05       	cpc	r23, r1
    32f2:	19 f4       	brne	.+6      	; 0x32fa <ir_emit+0x262>
    32f4:	c8 95       	lpm
    32f6:	00 c0       	rjmp	.+0      	; 0x32f8 <ir_emit+0x260>
    32f8:	11 c0       	rjmp	.+34     	; 0x331c <ir_emit+0x284>
    32fa:	46 30       	cpi	r20, 0x06	; 6
    32fc:	51 05       	cpc	r21, r1
    32fe:	61 05       	cpc	r22, r1
    3300:	71 05       	cpc	r23, r1
    3302:	19 f4       	brne	.+6      	; 0x330a <ir_emit+0x272>
    3304:	c8 95       	lpm
    3306:	c8 95       	lpm
    3308:	12 c0       	rjmp	.+36     	; 0x332e <ir_emit+0x296>
    330a:	47 30       	cpi	r20, 0x07	; 7
    330c:	51 05       	cpc	r21, r1
    330e:	61 05       	cpc	r22, r1
    3310:	71 05       	cpc	r23, r1
    3312:	21 f4       	brne	.+8      	; 0x331c <ir_emit+0x284>
    3314:	c8 95       	lpm
    3316:	c8 95       	lpm
    3318:	00 00       	nop
    331a:	12 c0       	rjmp	.+36     	; 0x3340 <ir_emit+0x2a8>
    331c:	48 30       	cpi	r20, 0x08	; 8
    331e:	51 05       	cpc	r21, r1
    3320:	61 05       	cpc	r22, r1
    3322:	71 05       	cpc	r23, r1
    3324:	21 f4       	brne	.+8      	; 0x332e <ir_emit+0x296>
    3326:	c8 95       	lpm
    3328:	c8 95       	lpm
    332a:	00 c0       	rjmp	.+0      	; 0x332c <ir_emit+0x294>
    332c:	13 c0       	rjmp	.+38     	; 0x3354 <ir_emit+0x2bc>
    332e:	49 30       	cpi	r20, 0x09	; 9
    3330:	51 05       	cpc	r21, r1
    3332:	61 05       	cpc	r22, r1
    3334:	71 05       	cpc	r23, r1
    3336:	21 f4       	brne	.+8      	; 0x3340 <ir_emit+0x2a8>
    3338:	c8 95       	lpm
    333a:	c8 95       	lpm
    333c:	c8 95       	lpm
    333e:	14 c0       	rjmp	.+40     	; 0x3368 <ir_emit+0x2d0>
    3340:	4a 30       	cpi	r20, 0x0A	; 10
    3342:	51 05       	cpc	r21, r1
    3344:	61 05       	cpc	r22, r1
    3346:	71 05       	cpc	r23, r1
    3348:	29 f4       	brne	.+10     	; 0x3354 <ir_emit+0x2bc>
    334a:	c8 95       	lpm
    334c:	c8 95       	lpm
    334e:	c8 95       	lpm
    3350:	00 00       	nop
    3352:	13 c0       	rjmp	.+38     	; 0x337a <ir_emit+0x2e2>
    3354:	4b 30       	cpi	r20, 0x0B	; 11
    3356:	51 05       	cpc	r21, r1
    3358:	61 05       	cpc	r22, r1
    335a:	71 05       	cpc	r23, r1
    335c:	29 f4       	brne	.+10     	; 0x3368 <ir_emit+0x2d0>
    335e:	c8 95       	lpm
    3360:	c8 95       	lpm
    3362:	c8 95       	lpm
    3364:	00 c0       	rjmp	.+0      	; 0x3366 <ir_emit+0x2ce>
    3366:	09 c0       	rjmp	.+18     	; 0x337a <ir_emit+0x2e2>
    3368:	4c 30       	cpi	r20, 0x0C	; 12
    336a:	51 05       	cpc	r21, r1
    336c:	61 05       	cpc	r22, r1
    336e:	71 05       	cpc	r23, r1
    3370:	21 f4       	brne	.+8      	; 0x337a <ir_emit+0x2e2>
    3372:	c8 95       	lpm
    3374:	c8 95       	lpm
    3376:	c8 95       	lpm
    3378:	c8 95       	lpm
    337a:	f8 01       	movw	r30, r16
    337c:	84 81       	ldd	r24, Z+4	; 0x04
    337e:	c8 2a       	or	r12, r24
    3380:	c4 82       	std	Z+4, r12	; 0x04
    3382:	f7 01       	movw	r30, r14
    3384:	a4 82       	std	Z+4, r10	; 0x04
    3386:	e0 ea       	ldi	r30, 0xA0	; 160
    3388:	f6 e0       	ldi	r31, 0x06	; 6
    338a:	84 81       	ldd	r24, Z+4	; 0x04
    338c:	b8 22       	and	r11, r24
    338e:	b4 82       	std	Z+4, r11	; 0x04
    3390:	e0 e0       	ldi	r30, 0x00	; 0
    3392:	fb e0       	ldi	r31, 0x0B	; 11
    3394:	81 81       	ldd	r24, Z+1	; 0x01
    3396:	d8 2a       	or	r13, r24
    3398:	d1 82       	std	Z+1, r13	; 0x01
    339a:	1f 91       	pop	r17
    339c:	0f 91       	pop	r16
    339e:	ff 90       	pop	r15
    33a0:	ef 90       	pop	r14
    33a2:	df 90       	pop	r13
    33a4:	cf 90       	pop	r12
    33a6:	bf 90       	pop	r11
    33a8:	af 90       	pop	r10
    33aa:	08 95       	ret

000033ac <ir_range_blast>:
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	cf 93       	push	r28
    33b6:	8f e0       	ldi	r24, 0x0F	; 15
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
    33be:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    33c2:	6b 01       	movw	r12, r22
    33c4:	7c 01       	movw	r14, r24
    33c6:	80 e0       	ldi	r24, 0x00	; 0
    33c8:	91 e0       	ldi	r25, 0x01	; 1
    33ca:	0e 94 55 04 	call	0x8aa	; 0x8aa <set_all_ir_powers>
    33ce:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	8c 19       	sub	r24, r12
    33d8:	9d 09       	sbc	r25, r13
    33da:	ae 09       	sbc	r26, r14
    33dc:	bf 09       	sbc	r27, r15
    33de:	02 97       	sbiw	r24, 0x02	; 2
    33e0:	a1 05       	cpc	r26, r1
    33e2:	b1 05       	cpc	r27, r1
    33e4:	a0 f3       	brcs	.-24     	; 0x33ce <ir_range_blast+0x22>
    33e6:	c0 e0       	ldi	r28, 0x00	; 0
    33e8:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    33ec:	6b 01       	movw	r12, r22
    33ee:	7c 01       	movw	r14, r24
    33f0:	67 e1       	ldi	r22, 0x17	; 23
    33f2:	8c 2f       	mov	r24, r28
    33f4:	51 de       	rcall	.-862    	; 0x3098 <ir_emit>
    33f6:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    33fa:	ab 01       	movw	r20, r22
    33fc:	bc 01       	movw	r22, r24
    33fe:	4c 19       	sub	r20, r12
    3400:	5d 09       	sbc	r21, r13
    3402:	6e 09       	sbc	r22, r14
    3404:	7f 09       	sbc	r23, r15
    3406:	47 31       	cpi	r20, 0x17	; 23
    3408:	51 05       	cpc	r21, r1
    340a:	61 05       	cpc	r22, r1
    340c:	71 05       	cpc	r23, r1
    340e:	98 f3       	brcs	.-26     	; 0x33f6 <ir_range_blast+0x4a>
    3410:	8f e0       	ldi	r24, 0x0F	; 15
    3412:	90 e0       	ldi	r25, 0x00	; 0
    3414:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
    3418:	cf 5f       	subi	r28, 0xFF	; 255
    341a:	c6 30       	cpi	r28, 0x06	; 6
    341c:	29 f7       	brne	.-54     	; 0x33e8 <ir_range_blast+0x3c>
    341e:	cf 91       	pop	r28
    3420:	ff 90       	pop	r15
    3422:	ef 90       	pop	r14
    3424:	df 90       	pop	r13
    3426:	cf 90       	pop	r12
    3428:	08 95       	ret

0000342a <broadcast_rnb_data>:
    342a:	45 e0       	ldi	r20, 0x05	; 5
    342c:	50 e0       	ldi	r21, 0x00	; 0
    342e:	6f e4       	ldi	r22, 0x4F	; 79
    3430:	72 e2       	ldi	r23, 0x22	; 34
    3432:	8f e3       	ldi	r24, 0x3F	; 63
    3434:	0e 94 0d 0c 	call	0x181a	; 0x181a <ir_cmd>
    3438:	8f e3       	ldi	r24, 0x3F	; 63
    343a:	0e 94 a5 0b 	call	0x174a	; 0x174a <wait_for_ir>
    343e:	8d e5       	ldi	r24, 0x5D	; 93
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
    3446:	8f ef       	ldi	r24, 0xFF	; 255
    3448:	b1 cf       	rjmp	.-158    	; 0x33ac <ir_range_blast>
    344a:	08 95       	ret

0000344c <pretty_angle>:
    344c:	cf 92       	push	r12
    344e:	df 92       	push	r13
    3450:	ef 92       	push	r14
    3452:	ff 92       	push	r15
    3454:	6b 01       	movw	r12, r22
    3456:	7c 01       	movw	r14, r24
    3458:	20 e0       	ldi	r18, 0x00	; 0
    345a:	30 e0       	ldi	r19, 0x00	; 0
    345c:	a9 01       	movw	r20, r18
    345e:	0e 94 c9 31 	call	0x6392	; 0x6392 <__gesf2>
    3462:	88 23       	and	r24, r24
    3464:	ac f0       	brlt	.+42     	; 0x3490 <pretty_angle+0x44>
    3466:	2b ed       	ldi	r18, 0xDB	; 219
    3468:	3f e0       	ldi	r19, 0x0F	; 15
    346a:	49 e4       	ldi	r20, 0x49	; 73
    346c:	50 e4       	ldi	r21, 0x40	; 64
    346e:	c7 01       	movw	r24, r14
    3470:	b6 01       	movw	r22, r12
    3472:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    3476:	2b ed       	ldi	r18, 0xDB	; 219
    3478:	3f e0       	ldi	r19, 0x0F	; 15
    347a:	49 ec       	ldi	r20, 0xC9	; 201
    347c:	50 e4       	ldi	r21, 0x40	; 64
    347e:	0e 94 a1 30 	call	0x6142	; 0x6142 <fmod>
    3482:	2b ed       	ldi	r18, 0xDB	; 219
    3484:	3f e0       	ldi	r19, 0x0F	; 15
    3486:	49 e4       	ldi	r20, 0x49	; 73
    3488:	50 e4       	ldi	r21, 0x40	; 64
    348a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    348e:	14 c0       	rjmp	.+40     	; 0x34b8 <pretty_angle+0x6c>
    3490:	2b ed       	ldi	r18, 0xDB	; 219
    3492:	3f e0       	ldi	r19, 0x0F	; 15
    3494:	49 e4       	ldi	r20, 0x49	; 73
    3496:	50 e4       	ldi	r21, 0x40	; 64
    3498:	c7 01       	movw	r24, r14
    349a:	b6 01       	movw	r22, r12
    349c:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    34a0:	2b ed       	ldi	r18, 0xDB	; 219
    34a2:	3f e0       	ldi	r19, 0x0F	; 15
    34a4:	49 ec       	ldi	r20, 0xC9	; 201
    34a6:	50 e4       	ldi	r21, 0x40	; 64
    34a8:	0e 94 a1 30 	call	0x6142	; 0x6142 <fmod>
    34ac:	2b ed       	ldi	r18, 0xDB	; 219
    34ae:	3f e0       	ldi	r19, 0x0F	; 15
    34b0:	49 e4       	ldi	r20, 0x49	; 73
    34b2:	50 e4       	ldi	r21, 0x40	; 64
    34b4:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    34b8:	ff 90       	pop	r15
    34ba:	ef 90       	pop	r14
    34bc:	df 90       	pop	r13
    34be:	cf 90       	pop	r12
    34c0:	08 95       	ret

000034c2 <get_heading>:
    34c2:	2f 92       	push	r2
    34c4:	3f 92       	push	r3
    34c6:	6f 92       	push	r6
    34c8:	7f 92       	push	r7
    34ca:	8f 92       	push	r8
    34cc:	9f 92       	push	r9
    34ce:	af 92       	push	r10
    34d0:	bf 92       	push	r11
    34d2:	cf 92       	push	r12
    34d4:	df 92       	push	r13
    34d6:	ef 92       	push	r14
    34d8:	ff 92       	push	r15
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	60 97       	sbiw	r28, 0x10	; 16
    34e8:	cd bf       	out	0x3d, r28	; 61
    34ea:	de bf       	out	0x3e, r29	; 62
    34ec:	4d 87       	std	Y+13, r20	; 0x0d
    34ee:	5e 87       	std	Y+14, r21	; 0x0e
    34f0:	6f 87       	std	Y+15, r22	; 0x0f
    34f2:	78 8b       	std	Y+16, r23	; 0x10
    34f4:	19 82       	std	Y+1, r1	; 0x01
    34f6:	1a 82       	std	Y+2, r1	; 0x02
    34f8:	1b 82       	std	Y+3, r1	; 0x03
    34fa:	1c 82       	std	Y+4, r1	; 0x04
    34fc:	1d 82       	std	Y+5, r1	; 0x05
    34fe:	1e 82       	std	Y+6, r1	; 0x06
    3500:	1f 82       	std	Y+7, r1	; 0x07
    3502:	18 86       	std	Y+8, r1	; 0x08
    3504:	08 e3       	ldi	r16, 0x38	; 56
    3506:	10 e2       	ldi	r17, 0x20	; 32
    3508:	1c 01       	movw	r2, r24
    350a:	0f 2e       	mov	r0, r31
    350c:	f8 e6       	ldi	r31, 0x68	; 104
    350e:	6f 2e       	mov	r6, r31
    3510:	f0 e2       	ldi	r31, 0x20	; 32
    3512:	7f 2e       	mov	r7, r31
    3514:	f0 2d       	mov	r31, r0
    3516:	f1 01       	movw	r30, r2
    3518:	61 91       	ld	r22, Z+
    351a:	1f 01       	movw	r2, r30
    351c:	70 e0       	ldi	r23, 0x00	; 0
    351e:	80 e0       	ldi	r24, 0x00	; 0
    3520:	90 e0       	ldi	r25, 0x00	; 0
    3522:	0e 94 5f 30 	call	0x60be	; 0x60be <__floatsisf>
    3526:	6b 01       	movw	r12, r22
    3528:	7c 01       	movw	r14, r24
    352a:	89 80       	ldd	r8, Y+1	; 0x01
    352c:	9a 80       	ldd	r9, Y+2	; 0x02
    352e:	ab 80       	ldd	r10, Y+3	; 0x03
    3530:	bc 80       	ldd	r11, Y+4	; 0x04
    3532:	f8 01       	movw	r30, r16
    3534:	20 81       	ld	r18, Z
    3536:	31 81       	ldd	r19, Z+1	; 0x01
    3538:	42 81       	ldd	r20, Z+2	; 0x02
    353a:	53 81       	ldd	r21, Z+3	; 0x03
    353c:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3540:	a5 01       	movw	r20, r10
    3542:	94 01       	movw	r18, r8
    3544:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    3548:	69 83       	std	Y+1, r22	; 0x01
    354a:	7a 83       	std	Y+2, r23	; 0x02
    354c:	8b 83       	std	Y+3, r24	; 0x03
    354e:	9c 83       	std	Y+4, r25	; 0x04
    3550:	8d 80       	ldd	r8, Y+5	; 0x05
    3552:	9e 80       	ldd	r9, Y+6	; 0x06
    3554:	af 80       	ldd	r10, Y+7	; 0x07
    3556:	b8 84       	ldd	r11, Y+8	; 0x08
    3558:	f8 01       	movw	r30, r16
    355a:	24 81       	ldd	r18, Z+4	; 0x04
    355c:	35 81       	ldd	r19, Z+5	; 0x05
    355e:	46 81       	ldd	r20, Z+6	; 0x06
    3560:	57 81       	ldd	r21, Z+7	; 0x07
    3562:	c7 01       	movw	r24, r14
    3564:	b6 01       	movw	r22, r12
    3566:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    356a:	a5 01       	movw	r20, r10
    356c:	94 01       	movw	r18, r8
    356e:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    3572:	6d 83       	std	Y+5, r22	; 0x05
    3574:	7e 83       	std	Y+6, r23	; 0x06
    3576:	8f 83       	std	Y+7, r24	; 0x07
    3578:	98 87       	std	Y+8, r25	; 0x08
    357a:	08 5f       	subi	r16, 0xF8	; 248
    357c:	1f 4f       	sbci	r17, 0xFF	; 255
    357e:	06 15       	cp	r16, r6
    3580:	17 05       	cpc	r17, r7
    3582:	49 f6       	brne	.-110    	; 0x3516 <get_heading+0x54>
    3584:	29 81       	ldd	r18, Y+1	; 0x01
    3586:	3a 81       	ldd	r19, Y+2	; 0x02
    3588:	4b 81       	ldd	r20, Y+3	; 0x03
    358a:	5c 81       	ldd	r21, Y+4	; 0x04
    358c:	6d 81       	ldd	r22, Y+5	; 0x05
    358e:	7e 81       	ldd	r23, Y+6	; 0x06
    3590:	8f 81       	ldd	r24, Y+7	; 0x07
    3592:	98 85       	ldd	r25, Y+8	; 0x08
    3594:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <atan2>
    3598:	69 87       	std	Y+9, r22	; 0x09
    359a:	7a 87       	std	Y+10, r23	; 0x0a
    359c:	8b 87       	std	Y+11, r24	; 0x0b
    359e:	9c 87       	std	Y+12, r25	; 0x0c
    35a0:	c9 84       	ldd	r12, Y+9	; 0x09
    35a2:	da 84       	ldd	r13, Y+10	; 0x0a
    35a4:	eb 84       	ldd	r14, Y+11	; 0x0b
    35a6:	fc 84       	ldd	r15, Y+12	; 0x0c
    35a8:	2b ed       	ldi	r18, 0xDB	; 219
    35aa:	3f e0       	ldi	r19, 0x0F	; 15
    35ac:	49 e4       	ldi	r20, 0x49	; 73
    35ae:	50 e4       	ldi	r21, 0x40	; 64
    35b0:	6d 85       	ldd	r22, Y+13	; 0x0d
    35b2:	7e 85       	ldd	r23, Y+14	; 0x0e
    35b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b6:	98 89       	ldd	r25, Y+16	; 0x10
    35b8:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    35bc:	a7 01       	movw	r20, r14
    35be:	96 01       	movw	r18, r12
    35c0:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    35c4:	43 df       	rcall	.-378    	; 0x344c <pretty_angle>
    35c6:	60 96       	adiw	r28, 0x10	; 16
    35c8:	cd bf       	out	0x3d, r28	; 61
    35ca:	de bf       	out	0x3e, r29	; 62
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	df 90       	pop	r13
    35da:	cf 90       	pop	r12
    35dc:	bf 90       	pop	r11
    35de:	af 90       	pop	r10
    35e0:	9f 90       	pop	r9
    35e2:	8f 90       	pop	r8
    35e4:	7f 90       	pop	r7
    35e6:	6f 90       	pop	r6
    35e8:	3f 90       	pop	r3
    35ea:	2f 90       	pop	r2
    35ec:	08 95       	ret

000035ee <sensor_model>:
    35ee:	cf 92       	push	r12
    35f0:	df 92       	push	r13
    35f2:	ef 92       	push	r14
    35f4:	ff 92       	push	r15
    35f6:	6b 01       	movw	r12, r22
    35f8:	7c 01       	movw	r14, r24
    35fa:	2b ed       	ldi	r18, 0xDB	; 219
    35fc:	3f e0       	ldi	r19, 0x0F	; 15
    35fe:	49 ec       	ldi	r20, 0xC9	; 201
    3600:	5f eb       	ldi	r21, 0xBF	; 191
    3602:	0e 94 c9 31 	call	0x6392	; 0x6392 <__gesf2>
    3606:	18 16       	cp	r1, r24
    3608:	7c f4       	brge	.+30     	; 0x3628 <sensor_model+0x3a>
    360a:	2b ed       	ldi	r18, 0xDB	; 219
    360c:	3f e0       	ldi	r19, 0x0F	; 15
    360e:	49 ec       	ldi	r20, 0xC9	; 201
    3610:	5f e3       	ldi	r21, 0x3F	; 63
    3612:	c7 01       	movw	r24, r14
    3614:	b6 01       	movw	r22, r12
    3616:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <__cmpsf2>
    361a:	88 23       	and	r24, r24
    361c:	4c f4       	brge	.+18     	; 0x3630 <sensor_model+0x42>
    361e:	c7 01       	movw	r24, r14
    3620:	b6 01       	movw	r22, r12
    3622:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <cos>
    3626:	07 c0       	rjmp	.+14     	; 0x3636 <sensor_model+0x48>
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	70 e0       	ldi	r23, 0x00	; 0
    362c:	cb 01       	movw	r24, r22
    362e:	03 c0       	rjmp	.+6      	; 0x3636 <sensor_model+0x48>
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	70 e0       	ldi	r23, 0x00	; 0
    3634:	cb 01       	movw	r24, r22
    3636:	ff 90       	pop	r15
    3638:	ef 90       	pop	r14
    363a:	df 90       	pop	r13
    363c:	cf 90       	pop	r12
    363e:	08 95       	ret

00003640 <emitter_model>:
    3640:	cf 92       	push	r12
    3642:	df 92       	push	r13
    3644:	ef 92       	push	r14
    3646:	ff 92       	push	r15
    3648:	6b 01       	movw	r12, r22
    364a:	7c 01       	movw	r14, r24
    364c:	2b ed       	ldi	r18, 0xDB	; 219
    364e:	3f e0       	ldi	r19, 0x0F	; 15
    3650:	49 ec       	ldi	r20, 0xC9	; 201
    3652:	5f eb       	ldi	r21, 0xBF	; 191
    3654:	0e 94 c9 31 	call	0x6392	; 0x6392 <__gesf2>
    3658:	18 16       	cp	r1, r24
    365a:	7c f4       	brge	.+30     	; 0x367a <emitter_model+0x3a>
    365c:	2b ed       	ldi	r18, 0xDB	; 219
    365e:	3f e0       	ldi	r19, 0x0F	; 15
    3660:	49 ec       	ldi	r20, 0xC9	; 201
    3662:	5f e3       	ldi	r21, 0x3F	; 63
    3664:	c7 01       	movw	r24, r14
    3666:	b6 01       	movw	r22, r12
    3668:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <__cmpsf2>
    366c:	88 23       	and	r24, r24
    366e:	4c f4       	brge	.+18     	; 0x3682 <emitter_model+0x42>
    3670:	c7 01       	movw	r24, r14
    3672:	b6 01       	movw	r22, r12
    3674:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <cos>
    3678:	07 c0       	rjmp	.+14     	; 0x3688 <emitter_model+0x48>
    367a:	60 e0       	ldi	r22, 0x00	; 0
    367c:	70 e0       	ldi	r23, 0x00	; 0
    367e:	cb 01       	movw	r24, r22
    3680:	03 c0       	rjmp	.+6      	; 0x3688 <emitter_model+0x48>
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	70 e0       	ldi	r23, 0x00	; 0
    3686:	cb 01       	movw	r24, r22
    3688:	ff 90       	pop	r15
    368a:	ef 90       	pop	r14
    368c:	df 90       	pop	r13
    368e:	cf 90       	pop	r12
    3690:	08 95       	ret

00003692 <inverse_amplitude_model>:
    3692:	4f 3f       	cpi	r20, 0xFF	; 255
    3694:	e1 f4       	brne	.+56     	; 0x36ce <inverse_amplitude_model+0x3c>
    3696:	20 e0       	ldi	r18, 0x00	; 0
    3698:	30 e0       	ldi	r19, 0x00	; 0
    369a:	40 e0       	ldi	r20, 0x00	; 0
    369c:	5f e3       	ldi	r21, 0x3F	; 63
    369e:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    36a2:	2a e0       	ldi	r18, 0x0A	; 10
    36a4:	38 e6       	ldi	r19, 0x68	; 104
    36a6:	4e ea       	ldi	r20, 0xAE	; 174
    36a8:	5f e3       	ldi	r21, 0x3F	; 63
    36aa:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    36ae:	0e 94 41 32 	call	0x6482	; 0x6482 <sqrt>
    36b2:	9b 01       	movw	r18, r22
    36b4:	ac 01       	movw	r20, r24
    36b6:	65 e0       	ldi	r22, 0x05	; 5
    36b8:	75 e4       	ldi	r23, 0x45	; 69
    36ba:	8d e9       	ldi	r24, 0x9D	; 157
    36bc:	91 e4       	ldi	r25, 0x41	; 65
    36be:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    36c2:	2f e1       	ldi	r18, 0x1F	; 31
    36c4:	3e e2       	ldi	r19, 0x2E	; 46
    36c6:	49 e9       	ldi	r20, 0x99	; 153
    36c8:	5f e3       	ldi	r21, 0x3F	; 63
    36ca:	0c 94 f6 2e 	jmp	0x5dec	; 0x5dec <__subsf3>
    36ce:	1f 92       	push	r1
    36d0:	4f 93       	push	r20
    36d2:	85 e5       	ldi	r24, 0x55	; 85
    36d4:	92 e2       	ldi	r25, 0x22	; 34
    36d6:	9f 93       	push	r25
    36d8:	8f 93       	push	r24
    36da:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	70 e0       	ldi	r23, 0x00	; 0
    36ea:	cb 01       	movw	r24, r22
    36ec:	08 95       	ret

000036ee <get_initial_range_guess>:
    36ee:	4f 92       	push	r4
    36f0:	5f 92       	push	r5
    36f2:	6f 92       	push	r6
    36f4:	7f 92       	push	r7
    36f6:	8f 92       	push	r8
    36f8:	9f 92       	push	r9
    36fa:	af 92       	push	r10
    36fc:	bf 92       	push	r11
    36fe:	cf 92       	push	r12
    3700:	df 92       	push	r13
    3702:	ef 92       	push	r14
    3704:	ff 92       	push	r15
    3706:	0f 93       	push	r16
    3708:	1f 93       	push	r17
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	00 d0       	rcall	.+0      	; 0x3710 <get_initial_range_guess+0x22>
    3710:	1f 92       	push	r1
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	2b 01       	movw	r4, r22
    3718:	3c 01       	movw	r6, r24
    371a:	29 83       	std	Y+1, r18	; 0x01
    371c:	3a 83       	std	Y+2, r19	; 0x02
    371e:	4b 83       	std	Y+3, r20	; 0x03
    3720:	5c 83       	std	Y+4, r21	; 0x04
    3722:	ac 2d       	mov	r26, r12
    3724:	bd 2d       	mov	r27, r13
    3726:	ee 2d       	mov	r30, r14
    3728:	ff 2d       	mov	r31, r15
    372a:	60 e0       	ldi	r22, 0x00	; 0
    372c:	40 e0       	ldi	r20, 0x00	; 0
    372e:	50 e0       	ldi	r21, 0x00	; 0
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	7f ef       	ldi	r23, 0xFF	; 255
    3736:	1f ef       	ldi	r17, 0xFF	; 255
    3738:	8d 91       	ld	r24, X+
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	28 17       	cp	r18, r24
    373e:	39 07       	cpc	r19, r25
    3740:	10 f4       	brcc	.+4      	; 0x3746 <get_initial_range_guess+0x58>
    3742:	9c 01       	movw	r18, r24
    3744:	16 2f       	mov	r17, r22
    3746:	81 91       	ld	r24, Z+
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	48 17       	cp	r20, r24
    374c:	59 07       	cpc	r21, r25
    374e:	10 f4       	brcc	.+4      	; 0x3754 <get_initial_range_guess+0x66>
    3750:	ac 01       	movw	r20, r24
    3752:	76 2f       	mov	r23, r22
    3754:	6f 5f       	subi	r22, 0xFF	; 255
    3756:	66 30       	cpi	r22, 0x06	; 6
    3758:	79 f7       	brne	.-34     	; 0x3738 <get_initial_range_guess+0x4a>
    375a:	87 2e       	mov	r8, r23
    375c:	91 2c       	mov	r9, r1
    375e:	f4 01       	movw	r30, r8
    3760:	ee 0f       	add	r30, r30
    3762:	ff 1f       	adc	r31, r31
    3764:	ee 0f       	add	r30, r30
    3766:	ff 1f       	adc	r31, r31
    3768:	e0 5e       	subi	r30, 0xE0	; 224
    376a:	ff 4d       	sbci	r31, 0xDF	; 223
    376c:	20 81       	ld	r18, Z
    376e:	31 81       	ldd	r19, Z+1	; 0x01
    3770:	42 81       	ldd	r20, Z+2	; 0x02
    3772:	53 81       	ldd	r21, Z+3	; 0x03
    3774:	c3 01       	movw	r24, r6
    3776:	b2 01       	movw	r22, r4
    3778:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    377c:	6b 01       	movw	r12, r22
    377e:	7c 01       	movw	r14, r24
    3780:	2b ed       	ldi	r18, 0xDB	; 219
    3782:	3f e0       	ldi	r19, 0x0F	; 15
    3784:	49 ec       	ldi	r20, 0xC9	; 201
    3786:	5f e3       	ldi	r21, 0x3F	; 63
    3788:	0e 94 c9 31 	call	0x6392	; 0x6392 <__gesf2>
    378c:	18 16       	cp	r1, r24
    378e:	0c f4       	brge	.+2      	; 0x3792 <get_initial_range_guess+0xa4>
    3790:	76 c0       	rjmp	.+236    	; 0x387e <get_initial_range_guess+0x190>
    3792:	2b ed       	ldi	r18, 0xDB	; 219
    3794:	3f e0       	ldi	r19, 0x0F	; 15
    3796:	49 ec       	ldi	r20, 0xC9	; 201
    3798:	5f eb       	ldi	r21, 0xBF	; 191
    379a:	c7 01       	movw	r24, r14
    379c:	b6 01       	movw	r22, r12
    379e:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <__cmpsf2>
    37a2:	88 23       	and	r24, r24
    37a4:	0c f4       	brge	.+2      	; 0x37a8 <get_initial_range_guess+0xba>
    37a6:	6f c0       	rjmp	.+222    	; 0x3886 <get_initial_range_guess+0x198>
    37a8:	29 81       	ldd	r18, Y+1	; 0x01
    37aa:	3a 81       	ldd	r19, Y+2	; 0x02
    37ac:	4b 81       	ldd	r20, Y+3	; 0x03
    37ae:	5c 81       	ldd	r21, Y+4	; 0x04
    37b0:	c3 01       	movw	r24, r6
    37b2:	b2 01       	movw	r22, r4
    37b4:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    37b8:	e1 2f       	mov	r30, r17
    37ba:	f0 e0       	ldi	r31, 0x00	; 0
    37bc:	ee 0f       	add	r30, r30
    37be:	ff 1f       	adc	r31, r31
    37c0:	ee 0f       	add	r30, r30
    37c2:	ff 1f       	adc	r31, r31
    37c4:	e0 5e       	subi	r30, 0xE0	; 224
    37c6:	ff 4d       	sbci	r31, 0xDF	; 223
    37c8:	20 81       	ld	r18, Z
    37ca:	31 81       	ldd	r19, Z+1	; 0x01
    37cc:	42 81       	ldd	r20, Z+2	; 0x02
    37ce:	53 81       	ldd	r21, Z+3	; 0x03
    37d0:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    37d4:	2b ed       	ldi	r18, 0xDB	; 219
    37d6:	3f e0       	ldi	r19, 0x0F	; 15
    37d8:	49 e4       	ldi	r20, 0x49	; 73
    37da:	50 e4       	ldi	r21, 0x40	; 64
    37dc:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    37e0:	35 de       	rcall	.-918    	; 0x344c <pretty_angle>
    37e2:	2b 01       	movw	r4, r22
    37e4:	3c 01       	movw	r6, r24
    37e6:	2b ed       	ldi	r18, 0xDB	; 219
    37e8:	3f e0       	ldi	r19, 0x0F	; 15
    37ea:	49 ec       	ldi	r20, 0xC9	; 201
    37ec:	5f e3       	ldi	r21, 0x3F	; 63
    37ee:	0e 94 c9 31 	call	0x6392	; 0x6392 <__gesf2>
    37f2:	18 16       	cp	r1, r24
    37f4:	0c f4       	brge	.+2      	; 0x37f8 <get_initial_range_guess+0x10a>
    37f6:	4b c0       	rjmp	.+150    	; 0x388e <get_initial_range_guess+0x1a0>
    37f8:	2b ed       	ldi	r18, 0xDB	; 219
    37fa:	3f e0       	ldi	r19, 0x0F	; 15
    37fc:	49 ec       	ldi	r20, 0xC9	; 201
    37fe:	5f eb       	ldi	r21, 0xBF	; 191
    3800:	c3 01       	movw	r24, r6
    3802:	b2 01       	movw	r22, r4
    3804:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <__cmpsf2>
    3808:	88 23       	and	r24, r24
    380a:	0c f4       	brge	.+2      	; 0x380e <get_initial_range_guess+0x120>
    380c:	44 c0       	rjmp	.+136    	; 0x3896 <get_initial_range_guess+0x1a8>
    380e:	c7 01       	movw	r24, r14
    3810:	b6 01       	movw	r22, r12
    3812:	ed de       	rcall	.-550    	; 0x35ee <sensor_model>
    3814:	6b 01       	movw	r12, r22
    3816:	7c 01       	movw	r14, r24
    3818:	c3 01       	movw	r24, r6
    381a:	b2 01       	movw	r22, r4
    381c:	11 df       	rcall	.-478    	; 0x3640 <emitter_model>
    381e:	9b 01       	movw	r18, r22
    3820:	ac 01       	movw	r20, r24
    3822:	c7 01       	movw	r24, r14
    3824:	b6 01       	movw	r22, r12
    3826:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    382a:	6b 01       	movw	r12, r22
    382c:	7c 01       	movw	r14, r24
    382e:	20 e0       	ldi	r18, 0x00	; 0
    3830:	30 e0       	ldi	r19, 0x00	; 0
    3832:	a9 01       	movw	r20, r18
    3834:	0e 94 c9 31 	call	0x6392	; 0x6392 <__gesf2>
    3838:	18 16       	cp	r1, r24
    383a:	8c f5       	brge	.+98     	; 0x389e <get_initial_range_guess+0x1b0>
    383c:	81 2f       	mov	r24, r17
    383e:	90 e0       	ldi	r25, 0x00	; 0
    3840:	9c 01       	movw	r18, r24
    3842:	22 0f       	add	r18, r18
    3844:	33 1f       	adc	r19, r19
    3846:	82 0f       	add	r24, r18
    3848:	93 1f       	adc	r25, r19
    384a:	88 0f       	add	r24, r24
    384c:	99 1f       	adc	r25, r25
    384e:	a8 0e       	add	r10, r24
    3850:	b9 1e       	adc	r11, r25
    3852:	f4 01       	movw	r30, r8
    3854:	ea 0d       	add	r30, r10
    3856:	fb 1d       	adc	r31, r11
    3858:	60 81       	ld	r22, Z
    385a:	70 e0       	ldi	r23, 0x00	; 0
    385c:	80 e0       	ldi	r24, 0x00	; 0
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	0e 94 5f 30 	call	0x60be	; 0x60be <__floatsisf>
    3864:	a7 01       	movw	r20, r14
    3866:	96 01       	movw	r18, r12
    3868:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    386c:	40 2f       	mov	r20, r16
    386e:	11 df       	rcall	.-478    	; 0x3692 <inverse_amplitude_model>
    3870:	28 e9       	ldi	r18, 0x98	; 152
    3872:	3c e4       	ldi	r19, 0x4C	; 76
    3874:	45 e8       	ldi	r20, 0x85	; 133
    3876:	50 e4       	ldi	r21, 0x40	; 64
    3878:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    387c:	13 c0       	rjmp	.+38     	; 0x38a4 <get_initial_range_guess+0x1b6>
    387e:	60 e0       	ldi	r22, 0x00	; 0
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	cb 01       	movw	r24, r22
    3884:	0f c0       	rjmp	.+30     	; 0x38a4 <get_initial_range_guess+0x1b6>
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	70 e0       	ldi	r23, 0x00	; 0
    388a:	cb 01       	movw	r24, r22
    388c:	0b c0       	rjmp	.+22     	; 0x38a4 <get_initial_range_guess+0x1b6>
    388e:	60 e0       	ldi	r22, 0x00	; 0
    3890:	70 e0       	ldi	r23, 0x00	; 0
    3892:	cb 01       	movw	r24, r22
    3894:	07 c0       	rjmp	.+14     	; 0x38a4 <get_initial_range_guess+0x1b6>
    3896:	60 e0       	ldi	r22, 0x00	; 0
    3898:	70 e0       	ldi	r23, 0x00	; 0
    389a:	cb 01       	movw	r24, r22
    389c:	03 c0       	rjmp	.+6      	; 0x38a4 <get_initial_range_guess+0x1b6>
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	cb 01       	movw	r24, r22
    38a4:	24 96       	adiw	r28, 0x04	; 4
    38a6:	cd bf       	out	0x3d, r28	; 61
    38a8:	de bf       	out	0x3e, r29	; 62
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	1f 91       	pop	r17
    38b0:	0f 91       	pop	r16
    38b2:	ff 90       	pop	r15
    38b4:	ef 90       	pop	r14
    38b6:	df 90       	pop	r13
    38b8:	cf 90       	pop	r12
    38ba:	bf 90       	pop	r11
    38bc:	af 90       	pop	r10
    38be:	9f 90       	pop	r9
    38c0:	8f 90       	pop	r8
    38c2:	7f 90       	pop	r7
    38c4:	6f 90       	pop	r6
    38c6:	5f 90       	pop	r5
    38c8:	4f 90       	pop	r4
    38ca:	08 95       	ret

000038cc <range_estimate>:
    38cc:	2f 92       	push	r2
    38ce:	3f 92       	push	r3
    38d0:	4f 92       	push	r4
    38d2:	5f 92       	push	r5
    38d4:	6f 92       	push	r6
    38d6:	7f 92       	push	r7
    38d8:	8f 92       	push	r8
    38da:	9f 92       	push	r9
    38dc:	af 92       	push	r10
    38de:	bf 92       	push	r11
    38e0:	cf 92       	push	r12
    38e2:	df 92       	push	r13
    38e4:	ef 92       	push	r14
    38e6:	ff 92       	push	r15
    38e8:	0f 93       	push	r16
    38ea:	1f 93       	push	r17
    38ec:	cf 93       	push	r28
    38ee:	df 93       	push	r29
    38f0:	cd b7       	in	r28, 0x3d	; 61
    38f2:	de b7       	in	r29, 0x3e	; 62
    38f4:	c7 5b       	subi	r28, 0xB7	; 183
    38f6:	d1 09       	sbc	r29, r1
    38f8:	cd bf       	out	0x3d, r28	; 61
    38fa:	de bf       	out	0x3e, r29	; 62
    38fc:	cd 55       	subi	r28, 0x5D	; 93
    38fe:	df 4f       	sbci	r29, 0xFF	; 255
    3900:	68 83       	st	Y, r22
    3902:	79 83       	std	Y+1, r23	; 0x01
    3904:	8a 83       	std	Y+2, r24	; 0x02
    3906:	9b 83       	std	Y+3, r25	; 0x03
    3908:	c3 5a       	subi	r28, 0xA3	; 163
    390a:	d0 40       	sbci	r29, 0x00	; 0
    390c:	c9 55       	subi	r28, 0x59	; 89
    390e:	df 4f       	sbci	r29, 0xFF	; 255
    3910:	28 83       	st	Y, r18
    3912:	39 83       	std	Y+1, r19	; 0x01
    3914:	4a 83       	std	Y+2, r20	; 0x02
    3916:	5b 83       	std	Y+3, r21	; 0x03
    3918:	c7 5a       	subi	r28, 0xA7	; 167
    391a:	d0 40       	sbci	r29, 0x00	; 0
    391c:	cf 54       	subi	r28, 0x4F	; 79
    391e:	df 4f       	sbci	r29, 0xFF	; 255
    3920:	e8 82       	st	Y, r14
    3922:	f9 82       	std	Y+1, r15	; 0x01
    3924:	0a 83       	std	Y+2, r16	; 0x02
    3926:	1b 83       	std	Y+3, r17	; 0x03
    3928:	c1 5b       	subi	r28, 0xB1	; 177
    392a:	d0 40       	sbci	r29, 0x00	; 0
    392c:	cb 54       	subi	r28, 0x4B	; 75
    392e:	df 4f       	sbci	r29, 0xFF	; 255
    3930:	c8 82       	st	Y, r12
    3932:	c5 5b       	subi	r28, 0xB5	; 181
    3934:	d0 40       	sbci	r29, 0x00	; 0
    3936:	c3 56       	subi	r28, 0x63	; 99
    3938:	df 4f       	sbci	r29, 0xFF	; 255
    393a:	a8 82       	st	Y, r10
    393c:	cd 59       	subi	r28, 0x9D	; 157
    393e:	d0 40       	sbci	r29, 0x00	; 0
    3940:	c2 56       	subi	r28, 0x62	; 98
    3942:	df 4f       	sbci	r29, 0xFF	; 255
    3944:	b8 82       	st	Y, r11
    3946:	ce 59       	subi	r28, 0x9E	; 158
    3948:	d0 40       	sbci	r29, 0x00	; 0
    394a:	ce 01       	movw	r24, r28
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	ca 54       	subi	r28, 0x4A	; 74
    3950:	df 4f       	sbci	r29, 0xFF	; 255
    3952:	88 83       	st	Y, r24
    3954:	99 83       	std	Y+1, r25	; 0x01
    3956:	c6 5b       	subi	r28, 0xB6	; 182
    3958:	d0 40       	sbci	r29, 0x00	; 0
    395a:	e0 e2       	ldi	r30, 0x20	; 32
    395c:	f0 e2       	ldi	r31, 0x20	; 32
    395e:	c5 55       	subi	r28, 0x55	; 85
    3960:	df 4f       	sbci	r29, 0xFF	; 255
    3962:	e8 83       	st	Y, r30
    3964:	f9 83       	std	Y+1, r31	; 0x01
    3966:	cb 5a       	subi	r28, 0xAB	; 171
    3968:	d0 40       	sbci	r29, 0x00	; 0
    396a:	88 e3       	ldi	r24, 0x38	; 56
    396c:	90 e2       	ldi	r25, 0x20	; 32
    396e:	c5 56       	subi	r28, 0x65	; 101
    3970:	df 4f       	sbci	r29, 0xFF	; 255
    3972:	88 83       	st	Y, r24
    3974:	99 83       	std	Y+1, r25	; 0x01
    3976:	cb 59       	subi	r28, 0x9B	; 155
    3978:	d0 40       	sbci	r29, 0x00	; 0
    397a:	c3 55       	subi	r28, 0x53	; 83
    397c:	df 4f       	sbci	r29, 0xFF	; 255
    397e:	18 82       	st	Y, r1
    3980:	cd 5a       	subi	r28, 0xAD	; 173
    3982:	d0 40       	sbci	r29, 0x00	; 0
    3984:	9f ef       	ldi	r25, 0xFF	; 255
    3986:	c0 55       	subi	r28, 0x50	; 80
    3988:	df 4f       	sbci	r29, 0xFF	; 255
    398a:	98 83       	st	Y, r25
    398c:	c0 5b       	subi	r28, 0xB0	; 176
    398e:	d0 40       	sbci	r29, 0x00	; 0
    3990:	ef ef       	ldi	r30, 0xFF	; 255
    3992:	c1 55       	subi	r28, 0x51	; 81
    3994:	df 4f       	sbci	r29, 0xFF	; 255
    3996:	e8 83       	st	Y, r30
    3998:	cf 5a       	subi	r28, 0xAF	; 175
    399a:	d0 40       	sbci	r29, 0x00	; 0
    399c:	00 e0       	ldi	r16, 0x00	; 0
    399e:	36 c2       	rjmp	.+1132   	; 0x3e0c <range_estimate+0x540>
    39a0:	cf 56       	subi	r28, 0x6F	; 111
    39a2:	df 4f       	sbci	r29, 0xFF	; 255
    39a4:	88 81       	ld	r24, Y
    39a6:	c1 59       	subi	r28, 0x91	; 145
    39a8:	d0 40       	sbci	r29, 0x00	; 0
    39aa:	c3 56       	subi	r28, 0x63	; 99
    39ac:	df 4f       	sbci	r29, 0xFF	; 255
    39ae:	f8 81       	ld	r31, Y
    39b0:	cd 59       	subi	r28, 0x9D	; 157
    39b2:	d0 40       	sbci	r29, 0x00	; 0
    39b4:	8f 1b       	sub	r24, r31
    39b6:	cf 56       	subi	r28, 0x6F	; 111
    39b8:	df 4f       	sbci	r29, 0xFF	; 255
    39ba:	e8 81       	ld	r30, Y
    39bc:	f9 81       	ldd	r31, Y+1	; 0x01
    39be:	c1 59       	subi	r28, 0x91	; 145
    39c0:	d0 40       	sbci	r29, 0x00	; 0
    39c2:	11 91       	ld	r17, Z+
    39c4:	cf 56       	subi	r28, 0x6F	; 111
    39c6:	df 4f       	sbci	r29, 0xFF	; 255
    39c8:	e8 83       	st	Y, r30
    39ca:	f9 83       	std	Y+1, r31	; 0x01
    39cc:	c1 59       	subi	r28, 0x91	; 145
    39ce:	d0 40       	sbci	r29, 0x00	; 0
    39d0:	01 17       	cp	r16, r17
    39d2:	80 f4       	brcc	.+32     	; 0x39f4 <range_estimate+0x128>
    39d4:	c0 55       	subi	r28, 0x50	; 80
    39d6:	df 4f       	sbci	r29, 0xFF	; 255
    39d8:	88 83       	st	Y, r24
    39da:	c0 5b       	subi	r28, 0xB0	; 176
    39dc:	d0 40       	sbci	r29, 0x00	; 0
    39de:	c2 55       	subi	r28, 0x52	; 82
    39e0:	df 4f       	sbci	r29, 0xFF	; 255
    39e2:	f8 81       	ld	r31, Y
    39e4:	ce 5a       	subi	r28, 0xAE	; 174
    39e6:	d0 40       	sbci	r29, 0x00	; 0
    39e8:	c1 55       	subi	r28, 0x51	; 81
    39ea:	df 4f       	sbci	r29, 0xFF	; 255
    39ec:	f8 83       	st	Y, r31
    39ee:	cf 5a       	subi	r28, 0xAF	; 175
    39f0:	d0 40       	sbci	r29, 0x00	; 0
    39f2:	01 2f       	mov	r16, r17
    39f4:	12 30       	cpi	r17, 0x02	; 2
    39f6:	08 f4       	brcc	.+2      	; 0x39fa <range_estimate+0x12e>
    39f8:	9b c1       	rjmp	.+822    	; 0x3d30 <range_estimate+0x464>
    39fa:	28 e9       	ldi	r18, 0x98	; 152
    39fc:	3c e4       	ldi	r19, 0x4C	; 76
    39fe:	45 e0       	ldi	r20, 0x05	; 5
    3a00:	50 e4       	ldi	r21, 0x40	; 64
    3a02:	f1 01       	movw	r30, r2
    3a04:	60 81       	ld	r22, Z
    3a06:	71 81       	ldd	r23, Z+1	; 0x01
    3a08:	82 81       	ldd	r24, Z+2	; 0x02
    3a0a:	93 81       	ldd	r25, Z+3	; 0x03
    3a0c:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3a10:	c9 56       	subi	r28, 0x69	; 105
    3a12:	df 4f       	sbci	r29, 0xFF	; 255
    3a14:	68 83       	st	Y, r22
    3a16:	79 83       	std	Y+1, r23	; 0x01
    3a18:	8a 83       	std	Y+2, r24	; 0x02
    3a1a:	9b 83       	std	Y+3, r25	; 0x03
    3a1c:	c7 59       	subi	r28, 0x97	; 151
    3a1e:	d0 40       	sbci	r29, 0x00	; 0
    3a20:	28 e9       	ldi	r18, 0x98	; 152
    3a22:	3c e4       	ldi	r19, 0x4C	; 76
    3a24:	45 e0       	ldi	r20, 0x05	; 5
    3a26:	50 e4       	ldi	r21, 0x40	; 64
    3a28:	f1 01       	movw	r30, r2
    3a2a:	64 81       	ldd	r22, Z+4	; 0x04
    3a2c:	75 81       	ldd	r23, Z+5	; 0x05
    3a2e:	86 81       	ldd	r24, Z+6	; 0x06
    3a30:	97 81       	ldd	r25, Z+7	; 0x07
    3a32:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3a36:	c1 56       	subi	r28, 0x61	; 97
    3a38:	df 4f       	sbci	r29, 0xFF	; 255
    3a3a:	68 83       	st	Y, r22
    3a3c:	79 83       	std	Y+1, r23	; 0x01
    3a3e:	8a 83       	std	Y+2, r24	; 0x02
    3a40:	9b 83       	std	Y+3, r25	; 0x03
    3a42:	cf 59       	subi	r28, 0x9F	; 159
    3a44:	d0 40       	sbci	r29, 0x00	; 0
    3a46:	c9 55       	subi	r28, 0x59	; 89
    3a48:	df 4f       	sbci	r29, 0xFF	; 255
    3a4a:	68 81       	ld	r22, Y
    3a4c:	79 81       	ldd	r23, Y+1	; 0x01
    3a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a50:	9b 81       	ldd	r25, Y+3	; 0x03
    3a52:	c7 5a       	subi	r28, 0xA7	; 167
    3a54:	d0 40       	sbci	r29, 0x00	; 0
    3a56:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <cos>
    3a5a:	4b 01       	movw	r8, r22
    3a5c:	5c 01       	movw	r10, r24
    3a5e:	28 e9       	ldi	r18, 0x98	; 152
    3a60:	3c e4       	ldi	r19, 0x4C	; 76
    3a62:	45 e0       	ldi	r20, 0x05	; 5
    3a64:	50 e4       	ldi	r21, 0x40	; 64
    3a66:	c5 56       	subi	r28, 0x65	; 101
    3a68:	df 4f       	sbci	r29, 0xFF	; 255
    3a6a:	e8 81       	ld	r30, Y
    3a6c:	f9 81       	ldd	r31, Y+1	; 0x01
    3a6e:	cb 59       	subi	r28, 0x9B	; 155
    3a70:	d0 40       	sbci	r29, 0x00	; 0
    3a72:	60 81       	ld	r22, Z
    3a74:	71 81       	ldd	r23, Z+1	; 0x01
    3a76:	82 81       	ldd	r24, Z+2	; 0x02
    3a78:	93 81       	ldd	r25, Z+3	; 0x03
    3a7a:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3a7e:	6b 01       	movw	r12, r22
    3a80:	7c 01       	movw	r14, r24
    3a82:	cd 55       	subi	r28, 0x5D	; 93
    3a84:	df 4f       	sbci	r29, 0xFF	; 255
    3a86:	28 81       	ld	r18, Y
    3a88:	39 81       	ldd	r19, Y+1	; 0x01
    3a8a:	4a 81       	ldd	r20, Y+2	; 0x02
    3a8c:	5b 81       	ldd	r21, Y+3	; 0x03
    3a8e:	c3 5a       	subi	r28, 0xA3	; 163
    3a90:	d0 40       	sbci	r29, 0x00	; 0
    3a92:	c5 01       	movw	r24, r10
    3a94:	b4 01       	movw	r22, r8
    3a96:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3a9a:	9b 01       	movw	r18, r22
    3a9c:	ac 01       	movw	r20, r24
    3a9e:	c7 01       	movw	r24, r14
    3aa0:	b6 01       	movw	r22, r12
    3aa2:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    3aa6:	4b 01       	movw	r8, r22
    3aa8:	5c 01       	movw	r10, r24
    3aaa:	c9 55       	subi	r28, 0x59	; 89
    3aac:	df 4f       	sbci	r29, 0xFF	; 255
    3aae:	68 81       	ld	r22, Y
    3ab0:	79 81       	ldd	r23, Y+1	; 0x01
    3ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab6:	c7 5a       	subi	r28, 0xA7	; 167
    3ab8:	d0 40       	sbci	r29, 0x00	; 0
    3aba:	0e 94 37 32 	call	0x646e	; 0x646e <sin>
    3abe:	2b 01       	movw	r4, r22
    3ac0:	3c 01       	movw	r6, r24
    3ac2:	28 e9       	ldi	r18, 0x98	; 152
    3ac4:	3c e4       	ldi	r19, 0x4C	; 76
    3ac6:	45 e0       	ldi	r20, 0x05	; 5
    3ac8:	50 e4       	ldi	r21, 0x40	; 64
    3aca:	c5 56       	subi	r28, 0x65	; 101
    3acc:	df 4f       	sbci	r29, 0xFF	; 255
    3ace:	e8 81       	ld	r30, Y
    3ad0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ad2:	cb 59       	subi	r28, 0x9B	; 155
    3ad4:	d0 40       	sbci	r29, 0x00	; 0
    3ad6:	64 81       	ldd	r22, Z+4	; 0x04
    3ad8:	75 81       	ldd	r23, Z+5	; 0x05
    3ada:	86 81       	ldd	r24, Z+6	; 0x06
    3adc:	97 81       	ldd	r25, Z+7	; 0x07
    3ade:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3ae2:	6b 01       	movw	r12, r22
    3ae4:	7c 01       	movw	r14, r24
    3ae6:	cd 55       	subi	r28, 0x5D	; 93
    3ae8:	df 4f       	sbci	r29, 0xFF	; 255
    3aea:	28 81       	ld	r18, Y
    3aec:	39 81       	ldd	r19, Y+1	; 0x01
    3aee:	4a 81       	ldd	r20, Y+2	; 0x02
    3af0:	5b 81       	ldd	r21, Y+3	; 0x03
    3af2:	c3 5a       	subi	r28, 0xA3	; 163
    3af4:	d0 40       	sbci	r29, 0x00	; 0
    3af6:	c3 01       	movw	r24, r6
    3af8:	b2 01       	movw	r22, r4
    3afa:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3afe:	9b 01       	movw	r18, r22
    3b00:	ac 01       	movw	r20, r24
    3b02:	c7 01       	movw	r24, r14
    3b04:	b6 01       	movw	r22, r12
    3b06:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    3b0a:	6b 01       	movw	r12, r22
    3b0c:	7c 01       	movw	r14, r24
    3b0e:	c9 56       	subi	r28, 0x69	; 105
    3b10:	df 4f       	sbci	r29, 0xFF	; 255
    3b12:	28 81       	ld	r18, Y
    3b14:	39 81       	ldd	r19, Y+1	; 0x01
    3b16:	4a 81       	ldd	r20, Y+2	; 0x02
    3b18:	5b 81       	ldd	r21, Y+3	; 0x03
    3b1a:	c7 59       	subi	r28, 0x97	; 151
    3b1c:	d0 40       	sbci	r29, 0x00	; 0
    3b1e:	c5 01       	movw	r24, r10
    3b20:	b4 01       	movw	r22, r8
    3b22:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3b26:	2b 01       	movw	r4, r22
    3b28:	3c 01       	movw	r6, r24
    3b2a:	c1 56       	subi	r28, 0x61	; 97
    3b2c:	df 4f       	sbci	r29, 0xFF	; 255
    3b2e:	28 81       	ld	r18, Y
    3b30:	39 81       	ldd	r19, Y+1	; 0x01
    3b32:	4a 81       	ldd	r20, Y+2	; 0x02
    3b34:	5b 81       	ldd	r21, Y+3	; 0x03
    3b36:	cf 59       	subi	r28, 0x9F	; 159
    3b38:	d0 40       	sbci	r29, 0x00	; 0
    3b3a:	c7 01       	movw	r24, r14
    3b3c:	b6 01       	movw	r22, r12
    3b3e:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3b42:	a3 01       	movw	r20, r6
    3b44:	92 01       	movw	r18, r4
    3b46:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <atan2>
    3b4a:	cb 56       	subi	r28, 0x6B	; 107
    3b4c:	df 4f       	sbci	r29, 0xFF	; 255
    3b4e:	e8 81       	ld	r30, Y
    3b50:	f9 81       	ldd	r31, Y+1	; 0x01
    3b52:	c5 59       	subi	r28, 0x95	; 149
    3b54:	d0 40       	sbci	r29, 0x00	; 0
    3b56:	20 81       	ld	r18, Z
    3b58:	31 81       	ldd	r19, Z+1	; 0x01
    3b5a:	42 81       	ldd	r20, Z+2	; 0x02
    3b5c:	53 81       	ldd	r21, Z+3	; 0x03
    3b5e:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3b62:	2b 01       	movw	r4, r22
    3b64:	3c 01       	movw	r6, r24
    3b66:	a5 01       	movw	r20, r10
    3b68:	94 01       	movw	r18, r8
    3b6a:	c9 56       	subi	r28, 0x69	; 105
    3b6c:	df 4f       	sbci	r29, 0xFF	; 255
    3b6e:	68 81       	ld	r22, Y
    3b70:	79 81       	ldd	r23, Y+1	; 0x01
    3b72:	8a 81       	ldd	r24, Y+2	; 0x02
    3b74:	9b 81       	ldd	r25, Y+3	; 0x03
    3b76:	c7 59       	subi	r28, 0x97	; 151
    3b78:	d0 40       	sbci	r29, 0x00	; 0
    3b7a:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3b7e:	4b 01       	movw	r8, r22
    3b80:	5c 01       	movw	r10, r24
    3b82:	a7 01       	movw	r20, r14
    3b84:	96 01       	movw	r18, r12
    3b86:	c1 56       	subi	r28, 0x61	; 97
    3b88:	df 4f       	sbci	r29, 0xFF	; 255
    3b8a:	68 81       	ld	r22, Y
    3b8c:	79 81       	ldd	r23, Y+1	; 0x01
    3b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b90:	9b 81       	ldd	r25, Y+3	; 0x03
    3b92:	cf 59       	subi	r28, 0x9F	; 159
    3b94:	d0 40       	sbci	r29, 0x00	; 0
    3b96:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3b9a:	a5 01       	movw	r20, r10
    3b9c:	94 01       	movw	r18, r8
    3b9e:	0e 94 6a 2f 	call	0x5ed4	; 0x5ed4 <atan2>
    3ba2:	c5 55       	subi	r28, 0x55	; 85
    3ba4:	df 4f       	sbci	r29, 0xFF	; 255
    3ba6:	e8 81       	ld	r30, Y
    3ba8:	f9 81       	ldd	r31, Y+1	; 0x01
    3baa:	cb 5a       	subi	r28, 0xAB	; 171
    3bac:	d0 40       	sbci	r29, 0x00	; 0
    3bae:	20 81       	ld	r18, Z
    3bb0:	31 81       	ldd	r19, Z+1	; 0x01
    3bb2:	42 81       	ldd	r20, Z+2	; 0x02
    3bb4:	53 81       	ldd	r21, Z+3	; 0x03
    3bb6:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3bba:	cf 54       	subi	r28, 0x4F	; 79
    3bbc:	df 4f       	sbci	r29, 0xFF	; 255
    3bbe:	28 81       	ld	r18, Y
    3bc0:	39 81       	ldd	r19, Y+1	; 0x01
    3bc2:	4a 81       	ldd	r20, Y+2	; 0x02
    3bc4:	5b 81       	ldd	r21, Y+3	; 0x03
    3bc6:	c1 5b       	subi	r28, 0xB1	; 177
    3bc8:	d0 40       	sbci	r29, 0x00	; 0
    3bca:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3bce:	6b 01       	movw	r12, r22
    3bd0:	7c 01       	movw	r14, r24
    3bd2:	c3 01       	movw	r24, r6
    3bd4:	b2 01       	movw	r22, r4
    3bd6:	3a dc       	rcall	.-1932   	; 0x344c <pretty_angle>
    3bd8:	2b 01       	movw	r4, r22
    3bda:	3c 01       	movw	r6, r24
    3bdc:	c7 01       	movw	r24, r14
    3bde:	b6 01       	movw	r22, r12
    3be0:	35 dc       	rcall	.-1942   	; 0x344c <pretty_angle>
    3be2:	6b 01       	movw	r12, r22
    3be4:	7c 01       	movw	r14, r24
    3be6:	c3 01       	movw	r24, r6
    3be8:	b2 01       	movw	r22, r4
    3bea:	01 dd       	rcall	.-1534   	; 0x35ee <sensor_model>
    3bec:	c9 56       	subi	r28, 0x69	; 105
    3bee:	df 4f       	sbci	r29, 0xFF	; 255
    3bf0:	68 83       	st	Y, r22
    3bf2:	79 83       	std	Y+1, r23	; 0x01
    3bf4:	8a 83       	std	Y+2, r24	; 0x02
    3bf6:	9b 83       	std	Y+3, r25	; 0x03
    3bf8:	c7 59       	subi	r28, 0x97	; 151
    3bfa:	d0 40       	sbci	r29, 0x00	; 0
    3bfc:	c7 01       	movw	r24, r14
    3bfe:	b6 01       	movw	r22, r12
    3c00:	1f dd       	rcall	.-1474   	; 0x3640 <emitter_model>
    3c02:	6b 01       	movw	r12, r22
    3c04:	7c 01       	movw	r14, r24
    3c06:	61 2f       	mov	r22, r17
    3c08:	70 e0       	ldi	r23, 0x00	; 0
    3c0a:	80 e0       	ldi	r24, 0x00	; 0
    3c0c:	90 e0       	ldi	r25, 0x00	; 0
    3c0e:	0e 94 5f 30 	call	0x60be	; 0x60be <__floatsisf>
    3c12:	4b 01       	movw	r8, r22
    3c14:	5c 01       	movw	r10, r24
    3c16:	a7 01       	movw	r20, r14
    3c18:	96 01       	movw	r18, r12
    3c1a:	c9 56       	subi	r28, 0x69	; 105
    3c1c:	df 4f       	sbci	r29, 0xFF	; 255
    3c1e:	68 81       	ld	r22, Y
    3c20:	79 81       	ldd	r23, Y+1	; 0x01
    3c22:	8a 81       	ldd	r24, Y+2	; 0x02
    3c24:	9b 81       	ldd	r25, Y+3	; 0x03
    3c26:	c7 59       	subi	r28, 0x97	; 151
    3c28:	d0 40       	sbci	r29, 0x00	; 0
    3c2a:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3c2e:	9b 01       	movw	r18, r22
    3c30:	ac 01       	movw	r20, r24
    3c32:	c5 01       	movw	r24, r10
    3c34:	b4 01       	movw	r22, r8
    3c36:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    3c3a:	cb 54       	subi	r28, 0x4B	; 75
    3c3c:	df 4f       	sbci	r29, 0xFF	; 255
    3c3e:	48 81       	ld	r20, Y
    3c40:	c5 5b       	subi	r28, 0xB5	; 181
    3c42:	d0 40       	sbci	r29, 0x00	; 0
    3c44:	26 dd       	rcall	.-1460   	; 0x3692 <inverse_amplitude_model>
    3c46:	4b 01       	movw	r8, r22
    3c48:	5c 01       	movw	r10, r24
    3c4a:	c3 01       	movw	r24, r6
    3c4c:	b2 01       	movw	r22, r4
    3c4e:	0e 94 c1 2f 	call	0x5f82	; 0x5f82 <cos>
    3c52:	a5 01       	movw	r20, r10
    3c54:	94 01       	movw	r18, r8
    3c56:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3c5a:	6b 01       	movw	r12, r22
    3c5c:	7c 01       	movw	r14, r24
    3c5e:	c5 56       	subi	r28, 0x65	; 101
    3c60:	df 4f       	sbci	r29, 0xFF	; 255
    3c62:	e8 81       	ld	r30, Y
    3c64:	f9 81       	ldd	r31, Y+1	; 0x01
    3c66:	cb 59       	subi	r28, 0x9B	; 155
    3c68:	d0 40       	sbci	r29, 0x00	; 0
    3c6a:	20 81       	ld	r18, Z
    3c6c:	31 81       	ldd	r19, Z+1	; 0x01
    3c6e:	42 81       	ldd	r20, Z+2	; 0x02
    3c70:	53 81       	ldd	r21, Z+3	; 0x03
    3c72:	f1 01       	movw	r30, r2
    3c74:	60 81       	ld	r22, Z
    3c76:	71 81       	ldd	r23, Z+1	; 0x01
    3c78:	82 81       	ldd	r24, Z+2	; 0x02
    3c7a:	93 81       	ldd	r25, Z+3	; 0x03
    3c7c:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3c80:	28 e9       	ldi	r18, 0x98	; 152
    3c82:	3c e4       	ldi	r19, 0x4C	; 76
    3c84:	45 e0       	ldi	r20, 0x05	; 5
    3c86:	50 e4       	ldi	r21, 0x40	; 64
    3c88:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3c8c:	9b 01       	movw	r18, r22
    3c8e:	ac 01       	movw	r20, r24
    3c90:	c7 01       	movw	r24, r14
    3c92:	b6 01       	movw	r22, r12
    3c94:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    3c98:	6b 01       	movw	r12, r22
    3c9a:	7c 01       	movw	r14, r24
    3c9c:	c3 01       	movw	r24, r6
    3c9e:	b2 01       	movw	r22, r4
    3ca0:	0e 94 37 32 	call	0x646e	; 0x646e <sin>
    3ca4:	a5 01       	movw	r20, r10
    3ca6:	94 01       	movw	r18, r8
    3ca8:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3cac:	4b 01       	movw	r8, r22
    3cae:	5c 01       	movw	r10, r24
    3cb0:	c5 56       	subi	r28, 0x65	; 101
    3cb2:	df 4f       	sbci	r29, 0xFF	; 255
    3cb4:	e8 81       	ld	r30, Y
    3cb6:	f9 81       	ldd	r31, Y+1	; 0x01
    3cb8:	cb 59       	subi	r28, 0x9B	; 155
    3cba:	d0 40       	sbci	r29, 0x00	; 0
    3cbc:	24 81       	ldd	r18, Z+4	; 0x04
    3cbe:	35 81       	ldd	r19, Z+5	; 0x05
    3cc0:	46 81       	ldd	r20, Z+6	; 0x06
    3cc2:	57 81       	ldd	r21, Z+7	; 0x07
    3cc4:	f1 01       	movw	r30, r2
    3cc6:	64 81       	ldd	r22, Z+4	; 0x04
    3cc8:	75 81       	ldd	r23, Z+5	; 0x05
    3cca:	86 81       	ldd	r24, Z+6	; 0x06
    3ccc:	97 81       	ldd	r25, Z+7	; 0x07
    3cce:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    3cd2:	28 e9       	ldi	r18, 0x98	; 152
    3cd4:	3c e4       	ldi	r19, 0x4C	; 76
    3cd6:	45 e0       	ldi	r20, 0x05	; 5
    3cd8:	50 e4       	ldi	r21, 0x40	; 64
    3cda:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3cde:	9b 01       	movw	r18, r22
    3ce0:	ac 01       	movw	r20, r24
    3ce2:	c5 01       	movw	r24, r10
    3ce4:	b4 01       	movw	r22, r8
    3ce6:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    3cea:	4b 01       	movw	r8, r22
    3cec:	5c 01       	movw	r10, r24
    3cee:	a7 01       	movw	r20, r14
    3cf0:	96 01       	movw	r18, r12
    3cf2:	c7 01       	movw	r24, r14
    3cf4:	b6 01       	movw	r22, r12
    3cf6:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3cfa:	6b 01       	movw	r12, r22
    3cfc:	7c 01       	movw	r14, r24
    3cfe:	a5 01       	movw	r20, r10
    3d00:	94 01       	movw	r18, r8
    3d02:	c5 01       	movw	r24, r10
    3d04:	b4 01       	movw	r22, r8
    3d06:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    3d0a:	9b 01       	movw	r18, r22
    3d0c:	ac 01       	movw	r20, r24
    3d0e:	c7 01       	movw	r24, r14
    3d10:	b6 01       	movw	r22, r12
    3d12:	0e 94 f7 2e 	call	0x5dee	; 0x5dee <__addsf3>
    3d16:	0e 94 41 32 	call	0x6482	; 0x6482 <sqrt>
    3d1a:	cd 56       	subi	r28, 0x6D	; 109
    3d1c:	df 4f       	sbci	r29, 0xFF	; 255
    3d1e:	e8 81       	ld	r30, Y
    3d20:	f9 81       	ldd	r31, Y+1	; 0x01
    3d22:	c3 59       	subi	r28, 0x93	; 147
    3d24:	d0 40       	sbci	r29, 0x00	; 0
    3d26:	60 83       	st	Z, r22
    3d28:	71 83       	std	Z+1, r23	; 0x01
    3d2a:	82 83       	std	Z+2, r24	; 0x02
    3d2c:	93 83       	std	Z+3, r25	; 0x03
    3d2e:	0a c0       	rjmp	.+20     	; 0x3d44 <range_estimate+0x478>
    3d30:	cd 56       	subi	r28, 0x6D	; 109
    3d32:	df 4f       	sbci	r29, 0xFF	; 255
    3d34:	e8 81       	ld	r30, Y
    3d36:	f9 81       	ldd	r31, Y+1	; 0x01
    3d38:	c3 59       	subi	r28, 0x93	; 147
    3d3a:	d0 40       	sbci	r29, 0x00	; 0
    3d3c:	10 82       	st	Z, r1
    3d3e:	11 82       	std	Z+1, r1	; 0x01
    3d40:	12 82       	std	Z+2, r1	; 0x02
    3d42:	13 82       	std	Z+3, r1	; 0x03
    3d44:	f8 e0       	ldi	r31, 0x08	; 8
    3d46:	2f 0e       	add	r2, r31
    3d48:	31 1c       	adc	r3, r1
    3d4a:	cb 56       	subi	r28, 0x6B	; 107
    3d4c:	df 4f       	sbci	r29, 0xFF	; 255
    3d4e:	88 81       	ld	r24, Y
    3d50:	99 81       	ldd	r25, Y+1	; 0x01
    3d52:	c5 59       	subi	r28, 0x95	; 149
    3d54:	d0 40       	sbci	r29, 0x00	; 0
    3d56:	04 96       	adiw	r24, 0x04	; 4
    3d58:	cb 56       	subi	r28, 0x6B	; 107
    3d5a:	df 4f       	sbci	r29, 0xFF	; 255
    3d5c:	88 83       	st	Y, r24
    3d5e:	99 83       	std	Y+1, r25	; 0x01
    3d60:	c5 59       	subi	r28, 0x95	; 149
    3d62:	d0 40       	sbci	r29, 0x00	; 0
    3d64:	cd 56       	subi	r28, 0x6D	; 109
    3d66:	df 4f       	sbci	r29, 0xFF	; 255
    3d68:	e8 81       	ld	r30, Y
    3d6a:	f9 81       	ldd	r31, Y+1	; 0x01
    3d6c:	c3 59       	subi	r28, 0x93	; 147
    3d6e:	d0 40       	sbci	r29, 0x00	; 0
    3d70:	34 96       	adiw	r30, 0x04	; 4
    3d72:	cd 56       	subi	r28, 0x6D	; 109
    3d74:	df 4f       	sbci	r29, 0xFF	; 255
    3d76:	e8 83       	st	Y, r30
    3d78:	f9 83       	std	Y+1, r31	; 0x01
    3d7a:	c3 59       	subi	r28, 0x93	; 147
    3d7c:	d0 40       	sbci	r29, 0x00	; 0
    3d7e:	f8 e6       	ldi	r31, 0x68	; 104
    3d80:	2f 16       	cp	r2, r31
    3d82:	f0 e2       	ldi	r31, 0x20	; 32
    3d84:	3f 06       	cpc	r3, r31
    3d86:	09 f0       	breq	.+2      	; 0x3d8a <range_estimate+0x4be>
    3d88:	0b ce       	rjmp	.-1002   	; 0x39a0 <range_estimate+0xd4>
    3d8a:	c3 55       	subi	r28, 0x53	; 83
    3d8c:	df 4f       	sbci	r29, 0xFF	; 255
    3d8e:	28 81       	ld	r18, Y
    3d90:	cd 5a       	subi	r28, 0xAD	; 173
    3d92:	d0 40       	sbci	r29, 0x00	; 0
    3d94:	2f 5f       	subi	r18, 0xFF	; 255
    3d96:	c3 55       	subi	r28, 0x53	; 83
    3d98:	df 4f       	sbci	r29, 0xFF	; 255
    3d9a:	28 83       	st	Y, r18
    3d9c:	cd 5a       	subi	r28, 0xAD	; 173
    3d9e:	d0 40       	sbci	r29, 0x00	; 0
    3da0:	c5 56       	subi	r28, 0x65	; 101
    3da2:	df 4f       	sbci	r29, 0xFF	; 255
    3da4:	88 81       	ld	r24, Y
    3da6:	99 81       	ldd	r25, Y+1	; 0x01
    3da8:	cb 59       	subi	r28, 0x9B	; 155
    3daa:	d0 40       	sbci	r29, 0x00	; 0
    3dac:	08 96       	adiw	r24, 0x08	; 8
    3dae:	c5 56       	subi	r28, 0x65	; 101
    3db0:	df 4f       	sbci	r29, 0xFF	; 255
    3db2:	88 83       	st	Y, r24
    3db4:	99 83       	std	Y+1, r25	; 0x01
    3db6:	cb 59       	subi	r28, 0x9B	; 155
    3db8:	d0 40       	sbci	r29, 0x00	; 0
    3dba:	c5 55       	subi	r28, 0x55	; 85
    3dbc:	df 4f       	sbci	r29, 0xFF	; 255
    3dbe:	e8 81       	ld	r30, Y
    3dc0:	f9 81       	ldd	r31, Y+1	; 0x01
    3dc2:	cb 5a       	subi	r28, 0xAB	; 171
    3dc4:	d0 40       	sbci	r29, 0x00	; 0
    3dc6:	34 96       	adiw	r30, 0x04	; 4
    3dc8:	c5 55       	subi	r28, 0x55	; 85
    3dca:	df 4f       	sbci	r29, 0xFF	; 255
    3dcc:	e8 83       	st	Y, r30
    3dce:	f9 83       	std	Y+1, r31	; 0x01
    3dd0:	cb 5a       	subi	r28, 0xAB	; 171
    3dd2:	d0 40       	sbci	r29, 0x00	; 0
    3dd4:	c3 56       	subi	r28, 0x63	; 99
    3dd6:	df 4f       	sbci	r29, 0xFF	; 255
    3dd8:	88 81       	ld	r24, Y
    3dda:	99 81       	ldd	r25, Y+1	; 0x01
    3ddc:	cd 59       	subi	r28, 0x9D	; 157
    3dde:	d0 40       	sbci	r29, 0x00	; 0
    3de0:	06 96       	adiw	r24, 0x06	; 6
    3de2:	c3 56       	subi	r28, 0x63	; 99
    3de4:	df 4f       	sbci	r29, 0xFF	; 255
    3de6:	88 83       	st	Y, r24
    3de8:	99 83       	std	Y+1, r25	; 0x01
    3dea:	cd 59       	subi	r28, 0x9D	; 157
    3dec:	d0 40       	sbci	r29, 0x00	; 0
    3dee:	ca 54       	subi	r28, 0x4A	; 74
    3df0:	df 4f       	sbci	r29, 0xFF	; 255
    3df2:	e8 81       	ld	r30, Y
    3df4:	f9 81       	ldd	r31, Y+1	; 0x01
    3df6:	c6 5b       	subi	r28, 0xB6	; 182
    3df8:	d0 40       	sbci	r29, 0x00	; 0
    3dfa:	78 96       	adiw	r30, 0x18	; 24
    3dfc:	ca 54       	subi	r28, 0x4A	; 74
    3dfe:	df 4f       	sbci	r29, 0xFF	; 255
    3e00:	e8 83       	st	Y, r30
    3e02:	f9 83       	std	Y+1, r31	; 0x01
    3e04:	c6 5b       	subi	r28, 0xB6	; 182
    3e06:	d0 40       	sbci	r29, 0x00	; 0
    3e08:	26 30       	cpi	r18, 0x06	; 6
    3e0a:	89 f1       	breq	.+98     	; 0x3e6e <range_estimate+0x5a2>
    3e0c:	ca 54       	subi	r28, 0x4A	; 74
    3e0e:	df 4f       	sbci	r29, 0xFF	; 255
    3e10:	88 81       	ld	r24, Y
    3e12:	99 81       	ldd	r25, Y+1	; 0x01
    3e14:	c6 5b       	subi	r28, 0xB6	; 182
    3e16:	d0 40       	sbci	r29, 0x00	; 0
    3e18:	cd 56       	subi	r28, 0x6D	; 109
    3e1a:	df 4f       	sbci	r29, 0xFF	; 255
    3e1c:	88 83       	st	Y, r24
    3e1e:	99 83       	std	Y+1, r25	; 0x01
    3e20:	c3 59       	subi	r28, 0x93	; 147
    3e22:	d0 40       	sbci	r29, 0x00	; 0
    3e24:	e0 e2       	ldi	r30, 0x20	; 32
    3e26:	f0 e2       	ldi	r31, 0x20	; 32
    3e28:	cb 56       	subi	r28, 0x6B	; 107
    3e2a:	df 4f       	sbci	r29, 0xFF	; 255
    3e2c:	e8 83       	st	Y, r30
    3e2e:	f9 83       	std	Y+1, r31	; 0x01
    3e30:	c5 59       	subi	r28, 0x95	; 149
    3e32:	d0 40       	sbci	r29, 0x00	; 0
    3e34:	0f 2e       	mov	r0, r31
    3e36:	f8 e3       	ldi	r31, 0x38	; 56
    3e38:	2f 2e       	mov	r2, r31
    3e3a:	f0 e2       	ldi	r31, 0x20	; 32
    3e3c:	3f 2e       	mov	r3, r31
    3e3e:	f0 2d       	mov	r31, r0
    3e40:	c3 56       	subi	r28, 0x63	; 99
    3e42:	df 4f       	sbci	r29, 0xFF	; 255
    3e44:	88 81       	ld	r24, Y
    3e46:	99 81       	ldd	r25, Y+1	; 0x01
    3e48:	cd 59       	subi	r28, 0x9D	; 157
    3e4a:	d0 40       	sbci	r29, 0x00	; 0
    3e4c:	cf 56       	subi	r28, 0x6F	; 111
    3e4e:	df 4f       	sbci	r29, 0xFF	; 255
    3e50:	88 83       	st	Y, r24
    3e52:	99 83       	std	Y+1, r25	; 0x01
    3e54:	c1 59       	subi	r28, 0x91	; 145
    3e56:	d0 40       	sbci	r29, 0x00	; 0
    3e58:	c3 55       	subi	r28, 0x53	; 83
    3e5a:	df 4f       	sbci	r29, 0xFF	; 255
    3e5c:	98 81       	ld	r25, Y
    3e5e:	cd 5a       	subi	r28, 0xAD	; 173
    3e60:	d0 40       	sbci	r29, 0x00	; 0
    3e62:	c2 55       	subi	r28, 0x52	; 82
    3e64:	df 4f       	sbci	r29, 0xFF	; 255
    3e66:	98 83       	st	Y, r25
    3e68:	ce 5a       	subi	r28, 0xAE	; 174
    3e6a:	d0 40       	sbci	r29, 0x00	; 0
    3e6c:	99 cd       	rjmp	.-1230   	; 0x39a0 <range_estimate+0xd4>
    3e6e:	c1 55       	subi	r28, 0x51	; 81
    3e70:	df 4f       	sbci	r29, 0xFF	; 255
    3e72:	e8 81       	ld	r30, Y
    3e74:	cf 5a       	subi	r28, 0xAF	; 175
    3e76:	d0 40       	sbci	r29, 0x00	; 0
    3e78:	8e 2f       	mov	r24, r30
    3e7a:	90 e0       	ldi	r25, 0x00	; 0
    3e7c:	fc 01       	movw	r30, r24
    3e7e:	ee 0f       	add	r30, r30
    3e80:	ff 1f       	adc	r31, r31
    3e82:	8e 0f       	add	r24, r30
    3e84:	9f 1f       	adc	r25, r31
    3e86:	fc 01       	movw	r30, r24
    3e88:	ee 0f       	add	r30, r30
    3e8a:	ff 1f       	adc	r31, r31
    3e8c:	c0 55       	subi	r28, 0x50	; 80
    3e8e:	df 4f       	sbci	r29, 0xFF	; 255
    3e90:	28 81       	ld	r18, Y
    3e92:	c0 5b       	subi	r28, 0xB0	; 176
    3e94:	d0 40       	sbci	r29, 0x00	; 0
    3e96:	e2 0f       	add	r30, r18
    3e98:	f1 1d       	adc	r31, r1
    3e9a:	ee 0f       	add	r30, r30
    3e9c:	ff 1f       	adc	r31, r31
    3e9e:	ee 0f       	add	r30, r30
    3ea0:	ff 1f       	adc	r31, r31
    3ea2:	ec 0f       	add	r30, r28
    3ea4:	fd 1f       	adc	r31, r29
    3ea6:	61 81       	ldd	r22, Z+1	; 0x01
    3ea8:	72 81       	ldd	r23, Z+2	; 0x02
    3eaa:	83 81       	ldd	r24, Z+3	; 0x03
    3eac:	94 81       	ldd	r25, Z+4	; 0x04
    3eae:	c9 54       	subi	r28, 0x49	; 73
    3eb0:	df 4f       	sbci	r29, 0xFF	; 255
    3eb2:	cd bf       	out	0x3d, r28	; 61
    3eb4:	de bf       	out	0x3e, r29	; 62
    3eb6:	df 91       	pop	r29
    3eb8:	cf 91       	pop	r28
    3eba:	1f 91       	pop	r17
    3ebc:	0f 91       	pop	r16
    3ebe:	ff 90       	pop	r15
    3ec0:	ef 90       	pop	r14
    3ec2:	df 90       	pop	r13
    3ec4:	cf 90       	pop	r12
    3ec6:	bf 90       	pop	r11
    3ec8:	af 90       	pop	r10
    3eca:	9f 90       	pop	r9
    3ecc:	8f 90       	pop	r8
    3ece:	7f 90       	pop	r7
    3ed0:	6f 90       	pop	r6
    3ed2:	5f 90       	pop	r5
    3ed4:	4f 90       	pop	r4
    3ed6:	3f 90       	pop	r3
    3ed8:	2f 90       	pop	r2
    3eda:	08 95       	ret

00003edc <print_brightness_matrix>:

void print_brightness_matrix(uint8_t brightness_matrix[6][6])
{
    3edc:	cf 92       	push	r12
    3ede:	df 92       	push	r13
    3ee0:	ef 92       	push	r14
    3ee2:	ff 92       	push	r15
    3ee4:	0f 93       	push	r16
    3ee6:	1f 93       	push	r17
    3ee8:	cf 93       	push	r28
    3eea:	df 93       	push	r29
    3eec:	d8 2f       	mov	r29, r24
    3eee:	c9 2f       	mov	r28, r25
	printf("{");
    3ef0:	8b e7       	ldi	r24, 0x7B	; 123
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	0e 94 27 39 	call	0x724e	; 0x724e <putchar>
    3ef8:	ed 2e       	mov	r14, r29
    3efa:	fc 2e       	mov	r15, r28
	for(uint8_t emitter_num=0 ; emitter_num<6 ; emitter_num++)
    3efc:	c1 2c       	mov	r12, r1
	{
		printf("{");
		for(uint8_t sensor_num=0 ; sensor_num<6 ; sensor_num++)
		{
			printf("%u",brightness_matrix[emitter_num][sensor_num]);
    3efe:	0f e8       	ldi	r16, 0x8F	; 143
    3f00:	12 e2       	ldi	r17, 0x22	; 34
void print_brightness_matrix(uint8_t brightness_matrix[6][6])
{
	printf("{");
	for(uint8_t emitter_num=0 ; emitter_num<6 ; emitter_num++)
	{
		printf("{");
    3f02:	8b e7       	ldi	r24, 0x7B	; 123
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	0e 94 27 39 	call	0x724e	; 0x724e <putchar>
    3f0a:	e7 01       	movw	r28, r14
		for(uint8_t sensor_num=0 ; sensor_num<6 ; sensor_num++)
    3f0c:	d1 2c       	mov	r13, r1
		{
			printf("%u",brightness_matrix[emitter_num][sensor_num]);
    3f0e:	89 91       	ld	r24, Y+
    3f10:	1f 92       	push	r1
    3f12:	8f 93       	push	r24
    3f14:	1f 93       	push	r17
    3f16:	0f 93       	push	r16
    3f18:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
			if(sensor_num<5) printf(",");
    3f1c:	0f 90       	pop	r0
    3f1e:	0f 90       	pop	r0
    3f20:	0f 90       	pop	r0
    3f22:	0f 90       	pop	r0
    3f24:	84 e0       	ldi	r24, 0x04	; 4
    3f26:	8d 15       	cp	r24, r13
    3f28:	20 f0       	brcs	.+8      	; 0x3f32 <print_brightness_matrix+0x56>
    3f2a:	8c e2       	ldi	r24, 0x2C	; 44
    3f2c:	90 e0       	ldi	r25, 0x00	; 0
    3f2e:	0e 94 27 39 	call	0x724e	; 0x724e <putchar>
{
	printf("{");
	for(uint8_t emitter_num=0 ; emitter_num<6 ; emitter_num++)
	{
		printf("{");
		for(uint8_t sensor_num=0 ; sensor_num<6 ; sensor_num++)
    3f32:	d3 94       	inc	r13
    3f34:	86 e0       	ldi	r24, 0x06	; 6
    3f36:	d8 12       	cpse	r13, r24
    3f38:	ea cf       	rjmp	.-44     	; 0x3f0e <print_brightness_matrix+0x32>
		{
			printf("%u",brightness_matrix[emitter_num][sensor_num]);
			if(sensor_num<5) printf(",");
		}
		printf("}");
    3f3a:	8d e7       	ldi	r24, 0x7D	; 125
    3f3c:	90 e0       	ldi	r25, 0x00	; 0
    3f3e:	0e 94 27 39 	call	0x724e	; 0x724e <putchar>
		if(emitter_num<5) printf(",");
    3f42:	84 e0       	ldi	r24, 0x04	; 4
    3f44:	8c 15       	cp	r24, r12
    3f46:	20 f0       	brcs	.+8      	; 0x3f50 <print_brightness_matrix+0x74>
    3f48:	8c e2       	ldi	r24, 0x2C	; 44
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	0e 94 27 39 	call	0x724e	; 0x724e <putchar>
}

void print_brightness_matrix(uint8_t brightness_matrix[6][6])
{
	printf("{");
	for(uint8_t emitter_num=0 ; emitter_num<6 ; emitter_num++)
    3f50:	c3 94       	inc	r12
    3f52:	86 e0       	ldi	r24, 0x06	; 6
    3f54:	e8 0e       	add	r14, r24
    3f56:	f1 1c       	adc	r15, r1
    3f58:	86 e0       	ldi	r24, 0x06	; 6
    3f5a:	c8 12       	cpse	r12, r24
    3f5c:	d2 cf       	rjmp	.-92     	; 0x3f02 <print_brightness_matrix+0x26>
			if(sensor_num<5) printf(",");
		}
		printf("}");
		if(emitter_num<5) printf(",");
	}
	printf("};\r\n");
    3f5e:	8e eb       	ldi	r24, 0xBE	; 190
    3f60:	92 e2       	ldi	r25, 0x22	; 34
    3f62:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
}
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	1f 91       	pop	r17
    3f6c:	0f 91       	pop	r16
    3f6e:	ff 90       	pop	r15
    3f70:	ef 90       	pop	r14
    3f72:	df 90       	pop	r13
    3f74:	cf 90       	pop	r12
    3f76:	08 95       	ret

00003f78 <use_rnb_data>:
	//brightness_meas_printout_mathematica();
	schedule_task(10, use_rnb_data, (void*)(&power));
}

void use_rnb_data(uint8_t power)
{
    3f78:	4f 92       	push	r4
    3f7a:	5f 92       	push	r5
    3f7c:	6f 92       	push	r6
    3f7e:	7f 92       	push	r7
    3f80:	8f 92       	push	r8
    3f82:	9f 92       	push	r9
    3f84:	af 92       	push	r10
    3f86:	bf 92       	push	r11
    3f88:	cf 92       	push	r12
    3f8a:	df 92       	push	r13
    3f8c:	ef 92       	push	r14
    3f8e:	ff 92       	push	r15
    3f90:	0f 93       	push	r16
    3f92:	1f 93       	push	r17
    3f94:	cf 93       	push	r28
    3f96:	df 93       	push	r29
    3f98:	cd b7       	in	r28, 0x3d	; 61
    3f9a:	de b7       	in	r29, 0x3e	; 62
    3f9c:	e8 97       	sbiw	r28, 0x38	; 56
    3f9e:	cd bf       	out	0x3d, r28	; 61
    3fa0:	de bf       	out	0x3e, r29	; 62
    3fa2:	18 2f       	mov	r17, r24
	uint8_t brightness_matrix[6][6];
	uint8_t error = pack_measurements_into_matrix(brightness_matrix);
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	01 96       	adiw	r24, 0x01	; 1
    3fa8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <pack_measurements_into_matrix>
	if(error) return;
    3fac:	81 11       	cpse	r24, r1
    3fae:	6e c0       	rjmp	.+220    	; 0x408c <__stack+0x8d>
		{0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0}
	};
	*/
	print_brightness_matrix(brightness_matrix);
    3fb0:	ce 01       	movw	r24, r28
    3fb2:	01 96       	adiw	r24, 0x01	; 1
    3fb4:	93 df       	rcall	.-218    	; 0x3edc <print_brightness_matrix>
	
	uint8_t emitter_total[6];
	uint8_t sensor_total[6];
	fill_S_and_T(brightness_matrix, sensor_total, emitter_total);
    3fb6:	ae 01       	movw	r20, r28
    3fb8:	4b 5d       	subi	r20, 0xDB	; 219
    3fba:	5f 4f       	sbci	r21, 0xFF	; 255
    3fbc:	be 01       	movw	r22, r28
    3fbe:	65 5d       	subi	r22, 0xD5	; 213
    3fc0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc2:	ce 01       	movw	r24, r28
    3fc4:	01 96       	adiw	r24, 0x01	; 1
    3fc6:	0e 94 08 17 	call	0x2e10	; 0x2e10 <fill_S_and_T>
	
	float bearing = get_bearing(sensor_total);
    3fca:	ce 01       	movw	r24, r28
    3fcc:	8b 96       	adiw	r24, 0x2b	; 43
    3fce:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <get_bearing>
    3fd2:	2b 01       	movw	r4, r22
    3fd4:	3c 01       	movw	r6, r24
	float heading = get_heading(emitter_total, bearing);
    3fd6:	ab 01       	movw	r20, r22
    3fd8:	bc 01       	movw	r22, r24
    3fda:	ce 01       	movw	r24, r28
    3fdc:	85 96       	adiw	r24, 0x25	; 37
    3fde:	71 da       	rcall	.-2846   	; 0x34c2 <get_heading>
    3fe0:	69 ab       	std	Y+49, r22	; 0x31
    3fe2:	7a ab       	std	Y+50, r23	; 0x32
    3fe4:	8b ab       	std	Y+51, r24	; 0x33
    3fe6:	9c ab       	std	Y+52, r25	; 0x34
	
	float initial_range = get_initial_range_guess(bearing, heading, power, sensor_total, emitter_total, brightness_matrix);
    3fe8:	ce 01       	movw	r24, r28
    3fea:	01 96       	adiw	r24, 0x01	; 1
    3fec:	5c 01       	movw	r10, r24
    3fee:	de 01       	movw	r26, r28
    3ff0:	95 96       	adiw	r26, 0x25	; 37
    3ff2:	6d 01       	movw	r12, r26
    3ff4:	8a 96       	adiw	r24, 0x2a	; 42
    3ff6:	7c 01       	movw	r14, r24
    3ff8:	01 2f       	mov	r16, r17
    3ffa:	29 a9       	ldd	r18, Y+49	; 0x31
    3ffc:	3a a9       	ldd	r19, Y+50	; 0x32
    3ffe:	4b a9       	ldd	r20, Y+51	; 0x33
    4000:	5c a9       	ldd	r21, Y+52	; 0x34
    4002:	c3 01       	movw	r24, r6
    4004:	b2 01       	movw	r22, r4
    4006:	73 db       	rcall	.-2330   	; 0x36ee <get_initial_range_guess>
    4008:	6d ab       	std	Y+53, r22	; 0x35
    400a:	7e ab       	std	Y+54, r23	; 0x36
    400c:	8f ab       	std	Y+55, r24	; 0x37
    400e:	98 af       	std	Y+56, r25	; 0x38
	if(initial_range==0) return; //Some error occurred.
    4010:	20 e0       	ldi	r18, 0x00	; 0
    4012:	30 e0       	ldi	r19, 0x00	; 0
    4014:	a9 01       	movw	r20, r18
    4016:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <__cmpsf2>
    401a:	88 23       	and	r24, r24
    401c:	b9 f1       	breq	.+110    	; 0x408c <__stack+0x8d>
	float range = range_estimate(initial_range, bearing, heading, power, brightness_matrix);
    401e:	c1 2e       	mov	r12, r17
    4020:	e9 a8       	ldd	r14, Y+49	; 0x31
    4022:	fa a8       	ldd	r15, Y+50	; 0x32
    4024:	0b a9       	ldd	r16, Y+51	; 0x33
    4026:	1c a9       	ldd	r17, Y+52	; 0x34
    4028:	a3 01       	movw	r20, r6
    402a:	92 01       	movw	r18, r4
    402c:	6d a9       	ldd	r22, Y+53	; 0x35
    402e:	7e a9       	ldd	r23, Y+54	; 0x36
    4030:	8f a9       	ldd	r24, Y+55	; 0x37
    4032:	98 ad       	ldd	r25, Y+56	; 0x38
    4034:	4b dc       	rcall	.-1898   	; 0x38cc <range_estimate>
	
	last_good_rnb.range = range;
    4036:	60 93 d0 28 	sts	0x28D0, r22
    403a:	70 93 d1 28 	sts	0x28D1, r23
    403e:	80 93 d2 28 	sts	0x28D2, r24
    4042:	90 93 d3 28 	sts	0x28D3, r25
	last_good_rnb.bearing = bearing;
    4046:	40 92 d4 28 	sts	0x28D4, r4
    404a:	50 92 d5 28 	sts	0x28D5, r5
    404e:	60 92 d6 28 	sts	0x28D6, r6
    4052:	70 92 d7 28 	sts	0x28D7, r7
	last_good_rnb.heading = heading;
    4056:	89 a9       	ldd	r24, Y+49	; 0x31
    4058:	9a a9       	ldd	r25, Y+50	; 0x32
    405a:	ab a9       	ldd	r26, Y+51	; 0x33
    405c:	bc a9       	ldd	r27, Y+52	; 0x34
    405e:	80 93 d8 28 	sts	0x28D8, r24
    4062:	90 93 d9 28 	sts	0x28D9, r25
    4066:	a0 93 da 28 	sts	0x28DA, r26
    406a:	b0 93 db 28 	sts	0x28DB, r27
	last_good_rnb.brightness_matrix_ptr = brightness_matrix;
    406e:	a0 92 dc 28 	sts	0x28DC, r10
    4072:	b0 92 dd 28 	sts	0x28DD, r11
	last_good_rnb.id_number = cmd_sender_id;
    4076:	80 91 c7 28 	lds	r24, 0x28C7
    407a:	90 91 c8 28 	lds	r25, 0x28C8
    407e:	80 93 de 28 	sts	0x28DE, r24
    4082:	90 93 df 28 	sts	0x28DF, r25
	
	rnb_updated=1;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	80 93 ec 28 	sts	0x28EC, r24
}
    408c:	e8 96       	adiw	r28, 0x38	; 56
    408e:	cd bf       	out	0x3d, r28	; 61
    4090:	de bf       	out	0x3e, r29	; 62
    4092:	df 91       	pop	r29
    4094:	cf 91       	pop	r28
    4096:	1f 91       	pop	r17
    4098:	0f 91       	pop	r16
    409a:	ff 90       	pop	r15
    409c:	ef 90       	pop	r14
    409e:	df 90       	pop	r13
    40a0:	cf 90       	pop	r12
    40a2:	bf 90       	pop	r11
    40a4:	af 90       	pop	r10
    40a6:	9f 90       	pop	r9
    40a8:	8f 90       	pop	r8
    40aa:	7f 90       	pop	r7
    40ac:	6f 90       	pop	r6
    40ae:	5f 90       	pop	r5
    40b0:	4f 90       	pop	r4
    40b2:	08 95       	ret

000040b4 <collect_rnb_data>:
		}
	}
}

void collect_rnb_data(uint16_t target_id, uint8_t power)
{	
    40b4:	ff 92       	push	r15
    40b6:	0f 93       	push	r16
    40b8:	1f 93       	push	r17
    40ba:	cf 93       	push	r28
    40bc:	df 93       	push	r29
    40be:	cd b7       	in	r28, 0x3d	; 61
    40c0:	de b7       	in	r29, 0x3e	; 62
    40c2:	27 97       	sbiw	r28, 0x07	; 7
    40c4:	cd bf       	out	0x3d, r28	; 61
    40c6:	de bf       	out	0x3e, r29	; 62
    40c8:	8c 01       	movw	r16, r24
    40ca:	f6 2e       	mov	r15, r22
	char cmd[7] = "rnb_t ";
    40cc:	87 e0       	ldi	r24, 0x07	; 7
    40ce:	e2 e9       	ldi	r30, 0x92	; 146
    40d0:	f2 e2       	ldi	r31, 0x22	; 34
    40d2:	de 01       	movw	r26, r28
    40d4:	11 96       	adiw	r26, 0x01	; 1
    40d6:	01 90       	ld	r0, Z+
    40d8:	0d 92       	st	X+, r0
    40da:	8a 95       	dec	r24
    40dc:	e1 f7       	brne	.-8      	; 0x40d6 <collect_rnb_data+0x22>
	cmd[6] = power;
    40de:	6f 83       	std	Y+7, r22	; 0x07
	get_baseline_readings(bright_meas);
    40e0:	84 ea       	ldi	r24, 0xA4	; 164
    40e2:	9a e2       	ldi	r25, 0x2A	; 42
    40e4:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <get_baseline_readings>
	
	ir_targeted_cmd(ALL_DIRS, cmd, 7, target_id);
    40e8:	98 01       	movw	r18, r16
    40ea:	47 e0       	ldi	r20, 0x07	; 7
    40ec:	50 e0       	ldi	r21, 0x00	; 0
    40ee:	be 01       	movw	r22, r28
    40f0:	6f 5f       	subi	r22, 0xFF	; 255
    40f2:	7f 4f       	sbci	r23, 0xFF	; 255
    40f4:	8f e3       	ldi	r24, 0x3F	; 63
    40f6:	0e 94 c7 0b 	call	0x178e	; 0x178e <ir_targeted_cmd>
	wait_for_ir(ALL_DIRS);
    40fa:	8f e3       	ldi	r24, 0x3F	; 63
    40fc:	0e 94 a5 0b 	call	0x174a	; 0x174a <wait_for_ir>
	delay_ms(POST_MESSAGE_DELAY);
    4100:	8d e5       	ldi	r24, 0x5D	; 93
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	e6 d3       	rcall	.+1996   	; 0x48d2 <delay_ms>
	ir_range_meas();
    4106:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <ir_range_meas>
	//brightness_meas_printout_mathematica();
	use_rnb_data(power);
    410a:	8f 2d       	mov	r24, r15
    410c:	35 df       	rcall	.-406    	; 0x3f78 <use_rnb_data>
}
    410e:	27 96       	adiw	r28, 0x07	; 7
    4110:	cd bf       	out	0x3d, r28	; 61
    4112:	de bf       	out	0x3e, r29	; 62
    4114:	df 91       	pop	r29
    4116:	cf 91       	pop	r28
    4118:	1f 91       	pop	r17
    411a:	0f 91       	pop	r16
    411c:	ff 90       	pop	r15
    411e:	08 95       	ret

00004120 <rgb_led_init>:
#include "rgb_led.h"

void rgb_led_init()
{
	// LED Pins as output
	LED_R_PORT.DIRSET = LED_R_PIN_bm;
    4120:	e0 e8       	ldi	r30, 0x80	; 128
    4122:	f6 e0       	ldi	r31, 0x06	; 6
    4124:	80 e2       	ldi	r24, 0x20	; 32
    4126:	81 83       	std	Z+1, r24	; 0x01
	LED_G_PORT.DIRSET = LED_G_PIN_bm;
    4128:	80 e1       	ldi	r24, 0x10	; 16
    412a:	81 83       	std	Z+1, r24	; 0x01
	LED_B_PORT.DIRSET = LED_B_PIN_bm;
    412c:	e0 e6       	ldi	r30, 0x60	; 96
    412e:	f6 e0       	ldi	r31, 0x06	; 6
    4130:	81 83       	std	Z+1, r24	; 0x01
	
	//---------RED-----------
	LED_R_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    4132:	e0 e4       	ldi	r30, 0x40	; 64
    4134:	fa e0       	ldi	r31, 0x0A	; 10
    4136:	8f ef       	ldi	r24, 0xFF	; 255
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	86 a3       	std	Z+38, r24	; 0x26
    413c:	97 a3       	std	Z+39, r25	; 0x27
	LED_R_TC.CCB = 0;							// initially fill the CCB register with a value
    413e:	12 a6       	std	Z+42, r1	; 0x2a
    4140:	13 a6       	std	Z+43, r1	; 0x2b
	LED_R_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    4142:	20 81       	ld	r18, Z
    4144:	21 60       	ori	r18, 0x01	; 1
    4146:	20 83       	st	Z, r18
	LED_R_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    4148:	21 81       	ldd	r18, Z+1	; 0x01
    414a:	23 60       	ori	r18, 0x03	; 3
    414c:	21 83       	std	Z+1, r18	; 0x01
	LED_R_TC.CTRLB |= TC1_CCBEN_bm;				// enable waveform output on OCnB (setting WGM operation overrides the port output register for this output pin)
    414e:	21 81       	ldd	r18, Z+1	; 0x01
    4150:	20 62       	ori	r18, 0x20	; 32
    4152:	21 83       	std	Z+1, r18	; 0x01
	
	//---------GREEN-----------
	// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
	LED_G_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    4154:	86 a3       	std	Z+38, r24	; 0x26
    4156:	97 a3       	std	Z+39, r25	; 0x27
	LED_G_TC.CCA = 0;							// initially fill the CCB register with a value
    4158:	10 a6       	std	Z+40, r1	; 0x28
    415a:	11 a6       	std	Z+41, r1	; 0x29
	LED_G_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    415c:	20 81       	ld	r18, Z
    415e:	21 60       	ori	r18, 0x01	; 1
    4160:	20 83       	st	Z, r18
	LED_G_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    4162:	21 81       	ldd	r18, Z+1	; 0x01
    4164:	23 60       	ori	r18, 0x03	; 3
    4166:	21 83       	std	Z+1, r18	; 0x01
	LED_G_TC.CTRLB |= TC1_CCAEN_bm;				// enable waveform output on OCnA (setting WGM operation overrides the port output register for this output pin)
    4168:	21 81       	ldd	r18, Z+1	; 0x01
    416a:	20 61       	ori	r18, 0x10	; 16
    416c:	21 83       	std	Z+1, r18	; 0x01
	
	//---------BLUE-----------
	// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
	LED_B_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    416e:	e0 e4       	ldi	r30, 0x40	; 64
    4170:	f9 e0       	ldi	r31, 0x09	; 9
    4172:	86 a3       	std	Z+38, r24	; 0x26
    4174:	97 a3       	std	Z+39, r25	; 0x27
	LED_B_TC.CCA = 0;							// initially fill the CCB register with a value
    4176:	10 a6       	std	Z+40, r1	; 0x28
    4178:	11 a6       	std	Z+41, r1	; 0x29
	LED_B_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    417a:	80 81       	ld	r24, Z
    417c:	81 60       	ori	r24, 0x01	; 1
    417e:	80 83       	st	Z, r24
	LED_B_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    4180:	81 81       	ldd	r24, Z+1	; 0x01
    4182:	83 60       	ori	r24, 0x03	; 3
    4184:	81 83       	std	Z+1, r24	; 0x01
	LED_B_TC.CTRLB |= TC1_CCAEN_bm;				// enable waveform output on OCnA (setting WGM operation overrides the port output register for this output pin)
    4186:	81 81       	ldd	r24, Z+1	; 0x01
    4188:	80 61       	ori	r24, 0x10	; 16
    418a:	81 83       	std	Z+1, r24	; 0x01
    418c:	08 95       	ret

0000418e <led_off>:
}

void led_off()
{ 
	LED_B_TC.CCABUF = 0;
    418e:	e0 e4       	ldi	r30, 0x40	; 64
    4190:	f9 e0       	ldi	r31, 0x09	; 9
    4192:	10 ae       	std	Z+56, r1	; 0x38
    4194:	11 ae       	std	Z+57, r1	; 0x39
	LED_G_TC.CCABUF = 0;
    4196:	e0 e4       	ldi	r30, 0x40	; 64
    4198:	fa e0       	ldi	r31, 0x0A	; 10
    419a:	10 ae       	std	Z+56, r1	; 0x38
    419c:	11 ae       	std	Z+57, r1	; 0x39
	LED_R_TC.CCBBUF = 0; 
    419e:	12 ae       	std	Z+58, r1	; 0x3a
    41a0:	13 ae       	std	Z+59, r1	; 0x3b
    41a2:	08 95       	ret

000041a4 <set_rgb>:

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    41a4:	90 e0       	ldi	r25, 0x00	; 0
    41a6:	e0 e4       	ldi	r30, 0x40	; 64
    41a8:	fa e0       	ldi	r31, 0x0A	; 10
    41aa:	82 af       	std	Z+58, r24	; 0x3a
    41ac:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    41ae:	70 e0       	ldi	r23, 0x00	; 0
    41b0:	60 af       	std	Z+56, r22	; 0x38
    41b2:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    41b4:	50 e0       	ldi	r21, 0x00	; 0
    41b6:	e0 e4       	ldi	r30, 0x40	; 64
    41b8:	f9 e0       	ldi	r31, 0x09	; 9
    41ba:	40 af       	std	Z+56, r20	; 0x38
    41bc:	51 af       	std	Z+57, r21	; 0x39
    41be:	08 95       	ret

000041c0 <hsv_to_rgb>:
	set_rgb(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    41c0:	2f 92       	push	r2
    41c2:	3f 92       	push	r3
    41c4:	4f 92       	push	r4
    41c6:	5f 92       	push	r5
    41c8:	6f 92       	push	r6
    41ca:	7f 92       	push	r7
    41cc:	8f 92       	push	r8
    41ce:	9f 92       	push	r9
    41d0:	af 92       	push	r10
    41d2:	bf 92       	push	r11
    41d4:	cf 92       	push	r12
    41d6:	df 92       	push	r13
    41d8:	ef 92       	push	r14
    41da:	ff 92       	push	r15
    41dc:	0f 93       	push	r16
    41de:	1f 93       	push	r17
    41e0:	cf 93       	push	r28
    41e2:	df 93       	push	r29
    41e4:	cd b7       	in	r28, 0x3d	; 61
    41e6:	de b7       	in	r29, 0x3e	; 62
    41e8:	2b 97       	sbiw	r28, 0x0b	; 11
    41ea:	cd bf       	out	0x3d, r28	; 61
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	fc 01       	movw	r30, r24
    41f0:	d6 2e       	mov	r13, r22
    41f2:	b4 2e       	mov	r11, r20
    41f4:	2c 83       	std	Y+4, r18	; 0x04
    41f6:	3d 83       	std	Y+5, r19	; 0x05
    41f8:	18 01       	movw	r2, r16
    41fa:	ea 82       	std	Y+2, r14	; 0x02
    41fc:	fb 82       	std	Y+3, r15	; 0x03
	float h = (hue%360)*1.0;
    41fe:	9c 01       	movw	r18, r24
    4200:	a3 e8       	ldi	r26, 0x83	; 131
    4202:	bd e2       	ldi	r27, 0x2D	; 45
    4204:	0e 94 48 36 	call	0x6c90	; 0x6c90 <__umulhisi3>
    4208:	00 24       	eor	r0, r0
    420a:	88 0f       	add	r24, r24
    420c:	99 1f       	adc	r25, r25
    420e:	00 1c       	adc	r0, r0
    4210:	88 0f       	add	r24, r24
    4212:	99 1f       	adc	r25, r25
    4214:	00 1c       	adc	r0, r0
    4216:	89 2f       	mov	r24, r25
    4218:	90 2d       	mov	r25, r0
    421a:	48 e6       	ldi	r20, 0x68	; 104
    421c:	51 e0       	ldi	r21, 0x01	; 1
    421e:	84 9f       	mul	r24, r20
    4220:	90 01       	movw	r18, r0
    4222:	85 9f       	mul	r24, r21
    4224:	30 0d       	add	r19, r0
    4226:	94 9f       	mul	r25, r20
    4228:	30 0d       	add	r19, r0
    422a:	11 24       	eor	r1, r1
    422c:	bf 01       	movw	r22, r30
    422e:	62 1b       	sub	r22, r18
    4230:	73 0b       	sbc	r23, r19
    4232:	80 e0       	ldi	r24, 0x00	; 0
    4234:	90 e0       	ldi	r25, 0x00	; 0
    4236:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatunsisf>
    423a:	2b 01       	movw	r4, r22
    423c:	3c 01       	movw	r6, r24
	float s = saturation/255.0;
    423e:	6d 2d       	mov	r22, r13
    4240:	70 e0       	ldi	r23, 0x00	; 0
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	90 e0       	ldi	r25, 0x00	; 0
    4246:	0e 94 5f 30 	call	0x60be	; 0x60be <__floatsisf>
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	30 e0       	ldi	r19, 0x00	; 0
    424e:	4f e7       	ldi	r20, 0x7F	; 127
    4250:	53 e4       	ldi	r21, 0x43	; 67
    4252:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    4256:	6b 01       	movw	r12, r22
    4258:	7c 01       	movw	r14, r24
	float v = val/255.0;
    425a:	6b 2d       	mov	r22, r11
    425c:	70 e0       	ldi	r23, 0x00	; 0
    425e:	80 e0       	ldi	r24, 0x00	; 0
    4260:	90 e0       	ldi	r25, 0x00	; 0
    4262:	0e 94 5f 30 	call	0x60be	; 0x60be <__floatsisf>
    4266:	20 e0       	ldi	r18, 0x00	; 0
    4268:	30 e0       	ldi	r19, 0x00	; 0
    426a:	4f e7       	ldi	r20, 0x7F	; 127
    426c:	53 e4       	ldi	r21, 0x43	; 67
    426e:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    4272:	06 2f       	mov	r16, r22
    4274:	17 2f       	mov	r17, r23
    4276:	8b 87       	std	Y+11, r24	; 0x0b
    4278:	9a 87       	std	Y+10, r25	; 0x0a
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (abs(s)<0.00001)
    427a:	c7 01       	movw	r24, r14
    427c:	b6 01       	movw	r22, r12
    427e:	0e 94 2c 30 	call	0x6058	; 0x6058 <__fixsfsi>
    4282:	9b 01       	movw	r18, r22
    4284:	77 23       	and	r23, r23
    4286:	24 f4       	brge	.+8      	; 0x4290 <hsv_to_rgb+0xd0>
    4288:	22 27       	eor	r18, r18
    428a:	33 27       	eor	r19, r19
    428c:	26 1b       	sub	r18, r22
    428e:	37 0b       	sbc	r19, r23
    4290:	b9 01       	movw	r22, r18
    4292:	88 27       	eor	r24, r24
    4294:	77 fd       	sbrc	r23, 7
    4296:	80 95       	com	r24
    4298:	98 2f       	mov	r25, r24
    429a:	0e 94 5f 30 	call	0x60be	; 0x60be <__floatsisf>
    429e:	2c ea       	ldi	r18, 0xAC	; 172
    42a0:	35 ec       	ldi	r19, 0xC5	; 197
    42a2:	47 e2       	ldi	r20, 0x27	; 39
    42a4:	57 e3       	ldi	r21, 0x37	; 55
    42a6:	0e 94 bd 2f 	call	0x5f7a	; 0x5f7a <__cmpsf2>
    42aa:	88 23       	and	r24, r24
    42ac:	2c f4       	brge	.+10     	; 0x42b8 <hsv_to_rgb+0xf8>
	{
		*red = *green = *blue = val;
    42ae:	aa 81       	ldd	r26, Y+2	; 0x02
    42b0:	bb 81       	ldd	r27, Y+3	; 0x03
    42b2:	bc 92       	st	X, r11
    42b4:	f1 01       	movw	r30, r2
    42b6:	b0 82       	st	Z, r11
	}
	
	h = h / 60.0;
    42b8:	20 e0       	ldi	r18, 0x00	; 0
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	40 e7       	ldi	r20, 0x70	; 112
    42be:	52 e4       	ldi	r21, 0x42	; 66
    42c0:	c3 01       	movw	r24, r6
    42c2:	b2 01       	movw	r22, r4
    42c4:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <__divsf3>
    42c8:	4b 01       	movw	r8, r22
    42ca:	5c 01       	movw	r10, r24
	uint8_t i = (uint8_t)h;
    42cc:	0e 94 31 30 	call	0x6062	; 0x6062 <__fixunssfsi>
    42d0:	69 83       	std	Y+1, r22	; 0x01
	f = h - i;
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	90 e0       	ldi	r25, 0x00	; 0
    42d8:	0e 94 5f 30 	call	0x60be	; 0x60be <__floatsisf>
    42dc:	9b 01       	movw	r18, r22
    42de:	ac 01       	movw	r20, r24
    42e0:	c5 01       	movw	r24, r10
    42e2:	b4 01       	movw	r22, r8
    42e4:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    42e8:	4b 01       	movw	r8, r22
    42ea:	5c 01       	movw	r10, r24
	
	p = v*(1-s);
    42ec:	a7 01       	movw	r20, r14
    42ee:	96 01       	movw	r18, r12
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	70 e0       	ldi	r23, 0x00	; 0
    42f4:	80 e8       	ldi	r24, 0x80	; 128
    42f6:	9f e3       	ldi	r25, 0x3F	; 63
    42f8:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    42fc:	20 2f       	mov	r18, r16
    42fe:	31 2f       	mov	r19, r17
    4300:	4b 85       	ldd	r20, Y+11	; 0x0b
    4302:	5a 85       	ldd	r21, Y+10	; 0x0a
    4304:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    4308:	66 2e       	mov	r6, r22
    430a:	77 2e       	mov	r7, r23
    430c:	48 2e       	mov	r4, r24
    430e:	59 2e       	mov	r5, r25
	q = v*(1-s*f);
    4310:	a5 01       	movw	r20, r10
    4312:	94 01       	movw	r18, r8
    4314:	c7 01       	movw	r24, r14
    4316:	b6 01       	movw	r22, r12
    4318:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    431c:	9b 01       	movw	r18, r22
    431e:	ac 01       	movw	r20, r24
    4320:	60 e0       	ldi	r22, 0x00	; 0
    4322:	70 e0       	ldi	r23, 0x00	; 0
    4324:	80 e8       	ldi	r24, 0x80	; 128
    4326:	9f e3       	ldi	r25, 0x3F	; 63
    4328:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    432c:	20 2f       	mov	r18, r16
    432e:	31 2f       	mov	r19, r17
    4330:	4b 85       	ldd	r20, Y+11	; 0x0b
    4332:	5a 85       	ldd	r21, Y+10	; 0x0a
    4334:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    4338:	6e 83       	std	Y+6, r22	; 0x06
    433a:	7f 83       	std	Y+7, r23	; 0x07
    433c:	88 87       	std	Y+8, r24	; 0x08
    433e:	99 87       	std	Y+9, r25	; 0x09
	t = v*(1-s*(1-f));
    4340:	a5 01       	movw	r20, r10
    4342:	94 01       	movw	r18, r8
    4344:	60 e0       	ldi	r22, 0x00	; 0
    4346:	70 e0       	ldi	r23, 0x00	; 0
    4348:	80 e8       	ldi	r24, 0x80	; 128
    434a:	9f e3       	ldi	r25, 0x3F	; 63
    434c:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    4350:	a7 01       	movw	r20, r14
    4352:	96 01       	movw	r18, r12
    4354:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    4358:	9b 01       	movw	r18, r22
    435a:	ac 01       	movw	r20, r24
    435c:	60 e0       	ldi	r22, 0x00	; 0
    435e:	70 e0       	ldi	r23, 0x00	; 0
    4360:	80 e8       	ldi	r24, 0x80	; 128
    4362:	9f e3       	ldi	r25, 0x3F	; 63
    4364:	0e 94 f6 2e 	call	0x5dec	; 0x5dec <__subsf3>
    4368:	20 2f       	mov	r18, r16
    436a:	31 2f       	mov	r19, r17
    436c:	4b 85       	ldd	r20, Y+11	; 0x0b
    436e:	5a 85       	ldd	r21, Y+10	; 0x0a
    4370:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    4374:	c6 2e       	mov	r12, r22
    4376:	d7 2e       	mov	r13, r23
    4378:	e8 2e       	mov	r14, r24
    437a:	f9 2e       	mov	r15, r25
	
	switch(i)
    437c:	f9 81       	ldd	r31, Y+1	; 0x01
    437e:	f2 30       	cpi	r31, 0x02	; 2
    4380:	31 f1       	breq	.+76     	; 0x43ce <hsv_to_rgb+0x20e>
    4382:	30 f4       	brcc	.+12     	; 0x4390 <hsv_to_rgb+0x1d0>
    4384:	ff 23       	and	r31, r31
    4386:	09 f4       	brne	.+2      	; 0x438a <hsv_to_rgb+0x1ca>
    4388:	5d c0       	rjmp	.+186    	; 0x4444 <hsv_to_rgb+0x284>
    438a:	f1 30       	cpi	r31, 0x01	; 1
    438c:	a9 f0       	breq	.+42     	; 0x43b8 <hsv_to_rgb+0x1f8>
    438e:	07 c0       	rjmp	.+14     	; 0x439e <hsv_to_rgb+0x1de>
    4390:	29 81       	ldd	r18, Y+1	; 0x01
    4392:	24 30       	cpi	r18, 0x04	; 4
    4394:	f1 f1       	breq	.+124    	; 0x4412 <hsv_to_rgb+0x252>
    4396:	60 f1       	brcs	.+88     	; 0x43f0 <hsv_to_rgb+0x230>
    4398:	25 30       	cpi	r18, 0x05	; 5
    439a:	09 f4       	brne	.+2      	; 0x439e <hsv_to_rgb+0x1de>
    439c:	4b c0       	rjmp	.+150    	; 0x4434 <hsv_to_rgb+0x274>
{
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
	float v = val/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
    439e:	61 2c       	mov	r6, r1
    43a0:	71 2c       	mov	r7, r1
    43a2:	41 2c       	mov	r4, r1
    43a4:	51 2c       	mov	r5, r1
    43a6:	c1 2c       	mov	r12, r1
    43a8:	d1 2c       	mov	r13, r1
    43aa:	e1 2c       	mov	r14, r1
    43ac:	f1 2c       	mov	r15, r1
    43ae:	00 e0       	ldi	r16, 0x00	; 0
    43b0:	10 e0       	ldi	r17, 0x00	; 0
    43b2:	1b 86       	std	Y+11, r1	; 0x0b
    43b4:	1a 86       	std	Y+10, r1	; 0x0a
    43b6:	46 c0       	rjmp	.+140    	; 0x4444 <hsv_to_rgb+0x284>
			g = t;
			b = p;
			break;
		case 1:
			r = q;
			g = v;
    43b8:	c0 2e       	mov	r12, r16
    43ba:	d1 2e       	mov	r13, r17
    43bc:	eb 84       	ldd	r14, Y+11	; 0x0b
    43be:	fa 84       	ldd	r15, Y+10	; 0x0a
			r = v;
			g = t;
			b = p;
			break;
		case 1:
			r = q;
    43c0:	0e 81       	ldd	r16, Y+6	; 0x06
    43c2:	1f 81       	ldd	r17, Y+7	; 0x07
    43c4:	88 85       	ldd	r24, Y+8	; 0x08
    43c6:	8b 87       	std	Y+11, r24	; 0x0b
    43c8:	a9 85       	ldd	r26, Y+9	; 0x09
    43ca:	aa 87       	std	Y+10, r26	; 0x0a
			g = v;
			b = p;
			break;
    43cc:	3b c0       	rjmp	.+118    	; 0x4444 <hsv_to_rgb+0x284>
		case 2:
			r = p;
			g = v;
			b = t;
			break;
    43ce:	30 2f       	mov	r19, r16
    43d0:	21 2f       	mov	r18, r17
    43d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    43d4:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = q;
			g = v;
			b = p;
			break;
		case 2:
			r = p;
    43d6:	06 2d       	mov	r16, r6
    43d8:	17 2d       	mov	r17, r7
    43da:	4b 86       	std	Y+11, r4	; 0x0b
    43dc:	5a 86       	std	Y+10, r5	; 0x0a
			g = v;
			b = t;
    43de:	6c 2c       	mov	r6, r12
    43e0:	7d 2c       	mov	r7, r13
    43e2:	4e 2c       	mov	r4, r14
    43e4:	5f 2c       	mov	r5, r15
			g = v;
			b = p;
			break;
		case 2:
			r = p;
			g = v;
    43e6:	c3 2e       	mov	r12, r19
    43e8:	d2 2e       	mov	r13, r18
    43ea:	e9 2e       	mov	r14, r25
    43ec:	f8 2e       	mov	r15, r24
			b = t;
			break;
    43ee:	2a c0       	rjmp	.+84     	; 0x4444 <hsv_to_rgb+0x284>
		case 3:
			r = p;
			g = q;
    43f0:	ce 80       	ldd	r12, Y+6	; 0x06
    43f2:	df 80       	ldd	r13, Y+7	; 0x07
    43f4:	e8 84       	ldd	r14, Y+8	; 0x08
    43f6:	f9 84       	ldd	r15, Y+9	; 0x09
			b = v;
			break;
    43f8:	30 2f       	mov	r19, r16
    43fa:	21 2f       	mov	r18, r17
    43fc:	9b 85       	ldd	r25, Y+11	; 0x0b
    43fe:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = p;
			g = v;
			b = t;
			break;
		case 3:
			r = p;
    4400:	06 2d       	mov	r16, r6
    4402:	17 2d       	mov	r17, r7
    4404:	4b 86       	std	Y+11, r4	; 0x0b
    4406:	5a 86       	std	Y+10, r5	; 0x0a
			g = q;
			b = v;
    4408:	63 2e       	mov	r6, r19
    440a:	72 2e       	mov	r7, r18
    440c:	49 2e       	mov	r4, r25
    440e:	58 2e       	mov	r5, r24
			break;
    4410:	19 c0       	rjmp	.+50     	; 0x4444 <hsv_to_rgb+0x284>
		case 4:
			r = t;
			g = p;
			b = v;
			break;
    4412:	30 2f       	mov	r19, r16
    4414:	21 2f       	mov	r18, r17
    4416:	9b 85       	ldd	r25, Y+11	; 0x0b
    4418:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = p;
			g = q;
			b = v;
			break;
		case 4:
			r = t;
    441a:	0c 2d       	mov	r16, r12
    441c:	1d 2d       	mov	r17, r13
    441e:	eb 86       	std	Y+11, r14	; 0x0b
    4420:	fa 86       	std	Y+10, r15	; 0x0a
			g = p;
    4422:	c6 2c       	mov	r12, r6
    4424:	d7 2c       	mov	r13, r7
    4426:	e4 2c       	mov	r14, r4
    4428:	f5 2c       	mov	r15, r5
			b = v;
    442a:	63 2e       	mov	r6, r19
    442c:	72 2e       	mov	r7, r18
    442e:	49 2e       	mov	r4, r25
    4430:	58 2e       	mov	r5, r24
			break;
    4432:	08 c0       	rjmp	.+16     	; 0x4444 <hsv_to_rgb+0x284>
		case 5:
			r = v;
			g = p;
    4434:	c6 2c       	mov	r12, r6
    4436:	d7 2c       	mov	r13, r7
    4438:	e4 2c       	mov	r14, r4
    443a:	f5 2c       	mov	r15, r5
			b = q;
    443c:	6e 80       	ldd	r6, Y+6	; 0x06
    443e:	7f 80       	ldd	r7, Y+7	; 0x07
    4440:	48 84       	ldd	r4, Y+8	; 0x08
    4442:	59 84       	ldd	r5, Y+9	; 0x09
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    4444:	20 e0       	ldi	r18, 0x00	; 0
    4446:	30 e0       	ldi	r19, 0x00	; 0
    4448:	4f e7       	ldi	r20, 0x7F	; 127
    444a:	53 e4       	ldi	r21, 0x43	; 67
    444c:	60 2f       	mov	r22, r16
    444e:	71 2f       	mov	r23, r17
    4450:	8b 85       	ldd	r24, Y+11	; 0x0b
    4452:	9a 85       	ldd	r25, Y+10	; 0x0a
    4454:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    4458:	0e 94 31 30 	call	0x6062	; 0x6062 <__fixunssfsi>
    445c:	ec 81       	ldd	r30, Y+4	; 0x04
    445e:	fd 81       	ldd	r31, Y+5	; 0x05
    4460:	60 83       	st	Z, r22
	*blue = (uint8_t)(b*255);
    4462:	20 e0       	ldi	r18, 0x00	; 0
    4464:	30 e0       	ldi	r19, 0x00	; 0
    4466:	4f e7       	ldi	r20, 0x7F	; 127
    4468:	53 e4       	ldi	r21, 0x43	; 67
    446a:	66 2d       	mov	r22, r6
    446c:	77 2d       	mov	r23, r7
    446e:	84 2d       	mov	r24, r4
    4470:	95 2d       	mov	r25, r5
    4472:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    4476:	0e 94 31 30 	call	0x6062	; 0x6062 <__fixunssfsi>
    447a:	aa 81       	ldd	r26, Y+2	; 0x02
    447c:	bb 81       	ldd	r27, Y+3	; 0x03
    447e:	6c 93       	st	X, r22
	*green = (uint8_t)(g*255);
    4480:	20 e0       	ldi	r18, 0x00	; 0
    4482:	30 e0       	ldi	r19, 0x00	; 0
    4484:	4f e7       	ldi	r20, 0x7F	; 127
    4486:	53 e4       	ldi	r21, 0x43	; 67
    4488:	6c 2d       	mov	r22, r12
    448a:	7d 2d       	mov	r23, r13
    448c:	8e 2d       	mov	r24, r14
    448e:	9f 2d       	mov	r25, r15
    4490:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__mulsf3>
    4494:	0e 94 31 30 	call	0x6062	; 0x6062 <__fixunssfsi>
    4498:	f1 01       	movw	r30, r2
    449a:	60 83       	st	Z, r22
    449c:	2b 96       	adiw	r28, 0x0b	; 11
    449e:	cd bf       	out	0x3d, r28	; 61
    44a0:	de bf       	out	0x3e, r29	; 62
    44a2:	df 91       	pop	r29
    44a4:	cf 91       	pop	r28
    44a6:	1f 91       	pop	r17
    44a8:	0f 91       	pop	r16
    44aa:	ff 90       	pop	r15
    44ac:	ef 90       	pop	r14
    44ae:	df 90       	pop	r13
    44b0:	cf 90       	pop	r12
    44b2:	bf 90       	pop	r11
    44b4:	af 90       	pop	r10
    44b6:	9f 90       	pop	r9
    44b8:	8f 90       	pop	r8
    44ba:	7f 90       	pop	r7
    44bc:	6f 90       	pop	r6
    44be:	5f 90       	pop	r5
    44c0:	4f 90       	pop	r4
    44c2:	3f 90       	pop	r3
    44c4:	2f 90       	pop	r2
    44c6:	08 95       	ret

000044c8 <set_hsv>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void set_hsv(uint16_t h, uint8_t s, uint8_t v)
{
    44c8:	ef 92       	push	r14
    44ca:	ff 92       	push	r15
    44cc:	0f 93       	push	r16
    44ce:	1f 93       	push	r17
    44d0:	cf 93       	push	r28
    44d2:	df 93       	push	r29
    44d4:	00 d0       	rcall	.+0      	; 0x44d6 <set_hsv+0xe>
    44d6:	cd b7       	in	r28, 0x3d	; 61
    44d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsv_to_rgb(h,s,v,&r,&g,&b);
    44da:	9e 01       	movw	r18, r28
    44dc:	2d 5f       	subi	r18, 0xFD	; 253
    44de:	3f 4f       	sbci	r19, 0xFF	; 255
    44e0:	79 01       	movw	r14, r18
    44e2:	8e 01       	movw	r16, r28
    44e4:	0e 5f       	subi	r16, 0xFE	; 254
    44e6:	1f 4f       	sbci	r17, 0xFF	; 255
    44e8:	22 50       	subi	r18, 0x02	; 2
    44ea:	31 09       	sbc	r19, r1
    44ec:	69 de       	rcall	.-814    	; 0x41c0 <hsv_to_rgb>
	set_rgb(r,g,b);
    44ee:	8b 81       	ldd	r24, Y+3	; 0x03
    44f0:	2a 81       	ldd	r18, Y+2	; 0x02

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    44f2:	49 81       	ldd	r20, Y+1	; 0x01
    44f4:	50 e0       	ldi	r21, 0x00	; 0
    44f6:	e0 e4       	ldi	r30, 0x40	; 64
    44f8:	fa e0       	ldi	r31, 0x0A	; 10
    44fa:	42 af       	std	Z+58, r20	; 0x3a
    44fc:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	20 af       	std	Z+56, r18	; 0x38
    4502:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	e0 e4       	ldi	r30, 0x40	; 64
    4508:	f9 e0       	ldi	r31, 0x09	; 9
    450a:	80 af       	std	Z+56, r24	; 0x38
    450c:	91 af       	std	Z+57, r25	; 0x39
}
    450e:	23 96       	adiw	r28, 0x03	; 3
    4510:	cd bf       	out	0x3d, r28	; 61
    4512:	de bf       	out	0x3e, r29	; 62
    4514:	df 91       	pop	r29
    4516:	cf 91       	pop	r28
    4518:	1f 91       	pop	r17
    451a:	0f 91       	pop	r16
    451c:	ff 90       	pop	r15
    451e:	ef 90       	pop	r14
    4520:	08 95       	ret

00004522 <get_red_sensor>:
	//
	////printf("%3hu %3hu %3hu\t->\t%3hu %3hu %3hu\r\n",tmpR,tmpG,tmpB,*r,*g,*b);
//}

int16_t get_red_sensor()
{
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	cd b7       	in	r28, 0x3d	; 61
    4528:	de b7       	in	r29, 0x3e	; 62
    452a:	2a 97       	sbiw	r28, 0x0a	; 10
    452c:	cd bf       	out	0x3d, r28	; 61
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	de 01       	movw	r26, r28
    4532:	11 96       	adiw	r26, 0x01	; 1
    4534:	9e 01       	movw	r18, r28
    4536:	25 5f       	subi	r18, 0xF5	; 245
    4538:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    453a:	e0 e0       	ldi	r30, 0x00	; 0
    453c:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    453e:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    4540:	80 a1       	ldd	r24, Z+32	; 0x20
    4542:	80 68       	ori	r24, 0x80	; 128
    4544:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    4546:	83 a1       	ldd	r24, Z+35	; 0x23
    4548:	88 23       	and	r24, r24
    454a:	e9 f3       	breq	.-6      	; 0x4546 <get_red_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
    454c:	45 a1       	ldd	r20, Z+37	; 0x25
    454e:	84 a1       	ldd	r24, Z+36	; 0x24
    4550:	90 e0       	ldi	r25, 0x00	; 0
    4552:	94 2b       	or	r25, r20
    4554:	95 95       	asr	r25
    4556:	87 95       	ror	r24
    4558:	95 95       	asr	r25
    455a:	87 95       	ror	r24
    455c:	95 95       	asr	r25
    455e:	87 95       	ror	r24
    4560:	95 95       	asr	r25
    4562:	87 95       	ror	r24
    4564:	8d 93       	st	X+, r24
    4566:	9d 93       	st	X+, r25
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    4568:	53 a3       	std	Z+35, r21	; 0x23

int16_t get_red_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    456a:	a2 17       	cp	r26, r18
    456c:	b3 07       	cpc	r27, r19
    456e:	41 f7       	brne	.-48     	; 0x4540 <get_red_sensor+0x1e>
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
	}
	red_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    4570:	63 e0       	ldi	r22, 0x03	; 3
    4572:	ce 01       	movw	r24, r28
    4574:	05 96       	adiw	r24, 0x05	; 5
    4576:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <meas_find_median>
	//printf("%d\t", red_val);
	return red_val;
}
    457a:	2a 96       	adiw	r28, 0x0a	; 10
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	de bf       	out	0x3e, r29	; 62
    4580:	df 91       	pop	r29
    4582:	cf 91       	pop	r28
    4584:	08 95       	ret

00004586 <get_green_sensor>:

int16_t get_green_sensor()
{
    4586:	cf 93       	push	r28
    4588:	df 93       	push	r29
    458a:	cd b7       	in	r28, 0x3d	; 61
    458c:	de b7       	in	r29, 0x3e	; 62
    458e:	2a 97       	sbiw	r28, 0x0a	; 10
    4590:	cd bf       	out	0x3d, r28	; 61
    4592:	de bf       	out	0x3e, r29	; 62
    4594:	de 01       	movw	r26, r28
    4596:	11 96       	adiw	r26, 0x01	; 1
    4598:	9e 01       	movw	r18, r28
    459a:	25 5f       	subi	r18, 0xF5	; 245
    459c:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    459e:	e0 e0       	ldi	r30, 0x00	; 0
    45a0:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
    45a2:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    45a4:	80 a5       	ldd	r24, Z+40	; 0x28
    45a6:	80 68       	ori	r24, 0x80	; 128
    45a8:	80 a7       	std	Z+40, r24	; 0x28
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    45aa:	83 a5       	ldd	r24, Z+43	; 0x2b
    45ac:	88 23       	and	r24, r24
    45ae:	e9 f3       	breq	.-6      	; 0x45aa <get_green_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
    45b0:	45 a5       	ldd	r20, Z+45	; 0x2d
    45b2:	84 a5       	ldd	r24, Z+44	; 0x2c
    45b4:	90 e0       	ldi	r25, 0x00	; 0
    45b6:	94 2b       	or	r25, r20
    45b8:	95 95       	asr	r25
    45ba:	87 95       	ror	r24
    45bc:	95 95       	asr	r25
    45be:	87 95       	ror	r24
    45c0:	95 95       	asr	r25
    45c2:	87 95       	ror	r24
    45c4:	95 95       	asr	r25
    45c6:	87 95       	ror	r24
    45c8:	8d 93       	st	X+, r24
    45ca:	9d 93       	st	X+, r25
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
    45cc:	53 a7       	std	Z+43, r21	; 0x2b

int16_t get_green_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    45ce:	a2 17       	cp	r26, r18
    45d0:	b3 07       	cpc	r27, r19
    45d2:	41 f7       	brne	.-48     	; 0x45a4 <get_green_sensor+0x1e>
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
	}
	green_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    45d4:	63 e0       	ldi	r22, 0x03	; 3
    45d6:	ce 01       	movw	r24, r28
    45d8:	05 96       	adiw	r24, 0x05	; 5
    45da:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <meas_find_median>
	//printf("%d\t", green_val);
	return green_val;
}
    45de:	2a 96       	adiw	r28, 0x0a	; 10
    45e0:	cd bf       	out	0x3d, r28	; 61
    45e2:	de bf       	out	0x3e, r29	; 62
    45e4:	df 91       	pop	r29
    45e6:	cf 91       	pop	r28
    45e8:	08 95       	ret

000045ea <get_blue_sensor>:

int16_t get_blue_sensor()
{
    45ea:	cf 93       	push	r28
    45ec:	df 93       	push	r29
    45ee:	cd b7       	in	r28, 0x3d	; 61
    45f0:	de b7       	in	r29, 0x3e	; 62
    45f2:	2a 97       	sbiw	r28, 0x0a	; 10
    45f4:	cd bf       	out	0x3d, r28	; 61
    45f6:	de bf       	out	0x3e, r29	; 62
    45f8:	de 01       	movw	r26, r28
    45fa:	11 96       	adiw	r26, 0x01	; 1
    45fc:	9e 01       	movw	r18, r28
    45fe:	25 5f       	subi	r18, 0xF5	; 245
    4600:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    4602:	e0 e0       	ldi	r30, 0x00	; 0
    4604:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    4606:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    4608:	80 a9       	ldd	r24, Z+48	; 0x30
    460a:	80 68       	ori	r24, 0x80	; 128
    460c:	80 ab       	std	Z+48, r24	; 0x30
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    460e:	83 a9       	ldd	r24, Z+51	; 0x33
    4610:	88 23       	and	r24, r24
    4612:	e9 f3       	breq	.-6      	; 0x460e <get_blue_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
    4614:	45 a9       	ldd	r20, Z+53	; 0x35
    4616:	84 a9       	ldd	r24, Z+52	; 0x34
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	94 2b       	or	r25, r20
    461c:	95 95       	asr	r25
    461e:	87 95       	ror	r24
    4620:	95 95       	asr	r25
    4622:	87 95       	ror	r24
    4624:	95 95       	asr	r25
    4626:	87 95       	ror	r24
    4628:	95 95       	asr	r25
    462a:	87 95       	ror	r24
    462c:	8d 93       	st	X+, r24
    462e:	9d 93       	st	X+, r25
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    4630:	53 ab       	std	Z+51, r21	; 0x33

int16_t get_blue_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    4632:	a2 17       	cp	r26, r18
    4634:	b3 07       	cpc	r27, r19
    4636:	41 f7       	brne	.-48     	; 0x4608 <get_blue_sensor+0x1e>
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
	}		
	blue_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    4638:	63 e0       	ldi	r22, 0x03	; 3
    463a:	ce 01       	movw	r24, r28
    463c:	05 96       	adiw	r24, 0x05	; 5
    463e:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <meas_find_median>
	//printf("%d\t", blue_val);	
	return blue_val;
}
    4642:	2a 96       	adiw	r28, 0x0a	; 10
    4644:	cd bf       	out	0x3d, r28	; 61
    4646:	de bf       	out	0x3e, r29	; 62
    4648:	df 91       	pop	r29
    464a:	cf 91       	pop	r28
    464c:	08 95       	ret

0000464e <rgb_sensor_init>:
#include "rgb_sensor.h"

void rgb_sensor_init()
{
    464e:	df 92       	push	r13
    4650:	ef 92       	push	r14
    4652:	ff 92       	push	r15
    4654:	0f 93       	push	r16
    4656:	1f 93       	push	r17
    4658:	cf 93       	push	r28
    465a:	df 93       	push	r29
	RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    465c:	80 ee       	ldi	r24, 0xE0	; 224
    465e:	e0 e0       	ldi	r30, 0x00	; 0
    4660:	f6 e0       	ldi	r31, 0x06	; 6
    4662:	82 83       	std	Z+2, r24	; 0x02

	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    4664:	e0 e0       	ldi	r30, 0x00	; 0
    4666:	f2 e0       	ldi	r31, 0x02	; 2
    4668:	80 e2       	ldi	r24, 0x20	; 32
    466a:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = ADC_RESOLUTION_LEFT12BIT_gc | ADC_CONMODE_bm;
    466c:	86 e1       	ldi	r24, 0x16	; 22
    466e:	81 83       	std	Z+1, r24	; 0x01
	ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
    4670:	86 e0       	ldi	r24, 0x06	; 6
    4672:	84 83       	std	Z+4, r24	; 0x04
	/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */

	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    4674:	83 e0       	ldi	r24, 0x03	; 3
    4676:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    4678:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_2X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    467a:	87 e0       	ldi	r24, 0x07	; 7
    467c:	80 ab       	std	Z+48, r24	; 0x30
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Red sensor on ADC A channel 0
    467e:	8c e2       	ldi	r24, 0x2C	; 44
    4680:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Green sensor on ADC A channel 1
    4682:	84 e3       	ldi	r24, 0x34	; 52
    4684:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Blue sensor on ADC A channel 2
    4686:	8c e3       	ldi	r24, 0x3C	; 60
    4688:	81 ab       	std	Z+49, r24	; 0x31
	
	ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    468a:	80 b5       	in	r24, 0x20	; 32
    468c:	84 87       	std	Z+12, r24	; 0x0c
	ADCA.CALH = PRODSIGNATURES_ADCACAL1;	
    468e:	81 b5       	in	r24, 0x21	; 33
    4690:	85 87       	std	Z+13, r24	; 0x0d

	ADCA.CTRLA = ADC_ENABLE_bm;
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	80 83       	st	Z, r24
    4696:	8f e8       	ldi	r24, 0x8F	; 143
    4698:	91 e0       	ldi	r25, 0x01	; 1
    469a:	01 97       	sbiw	r24, 0x01	; 1
    469c:	f1 f7       	brne	.-4      	; 0x469a <rgb_sensor_init+0x4c>
    469e:	00 c0       	rjmp	.+0      	; 0x46a0 <rgb_sensor_init+0x52>
    46a0:	00 00       	nop
	
	//read_color_settings();
	
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
    46a2:	3f df       	rcall	.-386    	; 0x4522 <get_red_sensor>
    46a4:	a2 df       	rcall	.-188    	; 0x45ea <get_blue_sensor>
    46a6:	6f df       	rcall	.-290    	; 0x4586 <get_green_sensor>
	delay_ms(10);
    46a8:	8a e0       	ldi	r24, 0x0A	; 10
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	12 d1       	rcall	.+548    	; 0x48d2 <delay_ms>
	int16_t r_avg=0, g_avg=0, b_avg=0;
	for(uint8_t i=0; i<num_samples; i++)
    46ae:	d1 2c       	mov	r13, r1
	
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
	delay_ms(10);
	int16_t r_avg=0, g_avg=0, b_avg=0;
    46b0:	c0 e0       	ldi	r28, 0x00	; 0
    46b2:	d0 e0       	ldi	r29, 0x00	; 0
    46b4:	00 e0       	ldi	r16, 0x00	; 0
    46b6:	10 e0       	ldi	r17, 0x00	; 0
    46b8:	e1 2c       	mov	r14, r1
    46ba:	f1 2c       	mov	r15, r1
	for(uint8_t i=0; i<num_samples; i++)
	{
		r_avg+=get_red_sensor();
    46bc:	32 df       	rcall	.-412    	; 0x4522 <get_red_sensor>
    46be:	e8 0e       	add	r14, r24
    46c0:	f9 1e       	adc	r15, r25
		g_avg+=get_green_sensor();
    46c2:	61 df       	rcall	.-318    	; 0x4586 <get_green_sensor>
    46c4:	08 0f       	add	r16, r24
    46c6:	19 1f       	adc	r17, r25
		b_avg+=get_blue_sensor();
    46c8:	90 df       	rcall	.-224    	; 0x45ea <get_blue_sensor>
    46ca:	c8 0f       	add	r28, r24
    46cc:	d9 1f       	adc	r29, r25
		delay_ms(10);
    46ce:	8a e0       	ldi	r24, 0x0A	; 10
    46d0:	90 e0       	ldi	r25, 0x00	; 0
    46d2:	ff d0       	rcall	.+510    	; 0x48d2 <delay_ms>
		printf("\r\n");
    46d4:	8f e5       	ldi	r24, 0x5F	; 95
    46d6:	95 e2       	ldi	r25, 0x25	; 37
    46d8:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
	delay_ms(10);
	int16_t r_avg=0, g_avg=0, b_avg=0;
	for(uint8_t i=0; i<num_samples; i++)
    46dc:	d3 94       	inc	r13
    46de:	93 e0       	ldi	r25, 0x03	; 3
    46e0:	d9 12       	cpse	r13, r25
    46e2:	ec cf       	rjmp	.-40     	; 0x46bc <rgb_sensor_init+0x6e>
		g_avg+=get_green_sensor();
		b_avg+=get_blue_sensor();
		delay_ms(10);
		printf("\r\n");
	}
	r_baseline= r_avg/num_samples;
    46e4:	23 e0       	ldi	r18, 0x03	; 3
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	c7 01       	movw	r24, r14
    46ea:	b9 01       	movw	r22, r18
    46ec:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    46f0:	46 2f       	mov	r20, r22
    46f2:	e7 2f       	mov	r30, r23
    46f4:	60 93 56 29 	sts	0x2956, r22
    46f8:	70 93 57 29 	sts	0x2957, r23
	g_baseline= g_avg/num_samples;
    46fc:	c8 01       	movw	r24, r16
    46fe:	b9 01       	movw	r22, r18
    4700:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    4704:	f6 2f       	mov	r31, r22
    4706:	17 2f       	mov	r17, r23
    4708:	60 93 cd 28 	sts	0x28CD, r22
    470c:	70 93 ce 28 	sts	0x28CE, r23
	b_baseline= b_avg/num_samples;
    4710:	ce 01       	movw	r24, r28
    4712:	b9 01       	movw	r22, r18
    4714:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    4718:	60 93 c5 28 	sts	0x28C5, r22
    471c:	70 93 c6 28 	sts	0x28C6, r23
	printf("Baselines:\r\n%3d  %3d  %3d\r\n", r_baseline, g_baseline, b_baseline);
    4720:	7f 93       	push	r23
    4722:	6f 93       	push	r22
    4724:	1f 93       	push	r17
    4726:	ff 93       	push	r31
    4728:	ef 93       	push	r30
    472a:	4f 93       	push	r20
    472c:	82 ec       	ldi	r24, 0xC2	; 194
    472e:	92 e2       	ldi	r25, 0x22	; 34
    4730:	9f 93       	push	r25
    4732:	8f 93       	push	r24
    4734:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    4738:	8d b7       	in	r24, 0x3d	; 61
    473a:	9e b7       	in	r25, 0x3e	; 62
    473c:	08 96       	adiw	r24, 0x08	; 8
    473e:	8d bf       	out	0x3d, r24	; 61
    4740:	9e bf       	out	0x3e, r25	; 62
}
    4742:	df 91       	pop	r29
    4744:	cf 91       	pop	r28
    4746:	1f 91       	pop	r17
    4748:	0f 91       	pop	r16
    474a:	ff 90       	pop	r15
    474c:	ef 90       	pop	r14
    474e:	df 90       	pop	r13
    4750:	08 95       	ret

00004752 <get_rgb_sensors>:

// Still not convinced that we should have the conditional, instead of just telling people
// that if their lights are on they won't get good values, here.
void get_rgb_sensors(int8_t* r, int8_t* g, int8_t* b)
{
    4752:	3f 92       	push	r3
    4754:	4f 92       	push	r4
    4756:	5f 92       	push	r5
    4758:	6f 92       	push	r6
    475a:	7f 92       	push	r7
    475c:	8f 92       	push	r8
    475e:	9f 92       	push	r9
    4760:	af 92       	push	r10
    4762:	bf 92       	push	r11
    4764:	cf 92       	push	r12
    4766:	df 92       	push	r13
    4768:	ef 92       	push	r14
    476a:	ff 92       	push	r15
    476c:	0f 93       	push	r16
    476e:	1f 93       	push	r17
    4770:	cf 93       	push	r28
    4772:	df 93       	push	r29
    4774:	5c 01       	movw	r10, r24
    4776:	6b 01       	movw	r12, r22
    4778:	7a 01       	movw	r14, r20
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    477a:	e0 e4       	ldi	r30, 0x40	; 64
    477c:	fa e0       	ldi	r31, 0x0A	; 10
    477e:	82 ac       	ldd	r8, Z+58	; 0x3a
    4780:	93 ac       	ldd	r9, Z+59	; 0x3b
    4782:	78 2c       	mov	r7, r8
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    4784:	c0 ad       	ldd	r28, Z+56	; 0x38
    4786:	d1 ad       	ldd	r29, Z+57	; 0x39
    4788:	6c 2e       	mov	r6, r28
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    478a:	e0 e4       	ldi	r30, 0x40	; 64
    478c:	f9 e0       	ldi	r31, 0x09	; 9
    478e:	00 ad       	ldd	r16, Z+56	; 0x38
    4790:	11 ad       	ldd	r17, Z+57	; 0x39
    4792:	30 2e       	mov	r3, r16
	uint8_t led_r = get_red_led();
	uint8_t led_g = get_green_led();
	uint8_t led_b = get_blue_led();
	
	if(led_r || led_g || led_b)
    4794:	81 10       	cpse	r8, r1
    4796:	04 c0       	rjmp	.+8      	; 0x47a0 <get_rgb_sensors+0x4e>
    4798:	c1 11       	cpse	r28, r1
    479a:	02 c0       	rjmp	.+4      	; 0x47a0 <get_rgb_sensors+0x4e>
    479c:	00 23       	and	r16, r16
    479e:	39 f0       	breq	.+14     	; 0x47ae <get_rgb_sensors+0x5c>
	{
		set_rgb(0,0,0);
    47a0:	40 e0       	ldi	r20, 0x00	; 0
    47a2:	60 e0       	ldi	r22, 0x00	; 0
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	fe dc       	rcall	.-1540   	; 0x41a4 <set_rgb>
		delay_ms(LED_OFF_DELAY_MS);
    47a8:	86 e9       	ldi	r24, 0x96	; 150
    47aa:	90 e0       	ldi	r25, 0x00	; 0
    47ac:	92 d0       	rcall	.+292    	; 0x48d2 <delay_ms>
	//*g = (int8_t)((((gResH&0x08)<<4)|((gResH&0x01)<<6))|((gResL&0xFC)>>2));	
	//*b = (int8_t)((((bResH&0x08)<<4)|((bResH&0x01)<<6))|((bResL&0xFC)>>2));	

	int8_t rTemp,gTemp,bTemp;
	
	rTemp = get_red_sensor();
    47ae:	b9 de       	rcall	.-654    	; 0x4522 <get_red_sensor>
    47b0:	48 2e       	mov	r4, r24
	gTemp = get_green_sensor();		
    47b2:	e9 de       	rcall	.-558    	; 0x4586 <get_green_sensor>
    47b4:	58 2e       	mov	r5, r24
	bTemp = get_blue_sensor();	
    47b6:	19 df       	rcall	.-462    	; 0x45ea <get_blue_sensor>

	rTemp=rTemp-r_baseline;
    47b8:	90 91 56 29 	lds	r25, 0x2956
    47bc:	49 1a       	sub	r4, r25
	gTemp=gTemp-g_baseline;
    47be:	90 91 cd 28 	lds	r25, 0x28CD
    47c2:	59 1a       	sub	r5, r25
	bTemp=bTemp-b_baseline;
    47c4:	90 91 c5 28 	lds	r25, 0x28C5
    47c8:	89 1b       	sub	r24, r25
	else if(rTemp<=-128)	rTemp=-128;
	if(gTemp>=127)			gTemp=127;
	else if(gTemp<=-128)	gTemp=-128;
	if(bTemp>=127)			bTemp=127;
	else if(bTemp<=-128)	bTemp=-128;		
	if(r!=NULL) *r=(int8_t)rTemp;
    47ca:	a1 14       	cp	r10, r1
    47cc:	b1 04       	cpc	r11, r1
    47ce:	11 f0       	breq	.+4      	; 0x47d4 <get_rgb_sensors+0x82>
    47d0:	f5 01       	movw	r30, r10
    47d2:	40 82       	st	Z, r4
	if(g!=NULL) *g=(int8_t)gTemp;
    47d4:	c1 14       	cp	r12, r1
    47d6:	d1 04       	cpc	r13, r1
    47d8:	11 f0       	breq	.+4      	; 0x47de <get_rgb_sensors+0x8c>
    47da:	f6 01       	movw	r30, r12
    47dc:	50 82       	st	Z, r5
	if(b!=NULL) *b=(int8_t)bTemp;	
    47de:	e1 14       	cp	r14, r1
    47e0:	f1 04       	cpc	r15, r1
    47e2:	11 f0       	breq	.+4      	; 0x47e8 <get_rgb_sensors+0x96>
    47e4:	f7 01       	movw	r30, r14
    47e6:	80 83       	st	Z, r24
		
	if(led_r || led_g || led_b) set_rgb(led_r, led_g, led_b);
    47e8:	71 10       	cpse	r7, r1
    47ea:	04 c0       	rjmp	.+8      	; 0x47f4 <get_rgb_sensors+0xa2>
    47ec:	61 10       	cpse	r6, r1
    47ee:	02 c0       	rjmp	.+4      	; 0x47f4 <get_rgb_sensors+0xa2>
    47f0:	33 20       	and	r3, r3
    47f2:	21 f0       	breq	.+8      	; 0x47fc <get_rgb_sensors+0xaa>
    47f4:	40 2f       	mov	r20, r16
    47f6:	6c 2f       	mov	r22, r28
    47f8:	88 2d       	mov	r24, r8
    47fa:	d4 dc       	rcall	.-1624   	; 0x41a4 <set_rgb>
}
    47fc:	df 91       	pop	r29
    47fe:	cf 91       	pop	r28
    4800:	1f 91       	pop	r17
    4802:	0f 91       	pop	r16
    4804:	ff 90       	pop	r15
    4806:	ef 90       	pop	r14
    4808:	df 90       	pop	r13
    480a:	cf 90       	pop	r12
    480c:	bf 90       	pop	r11
    480e:	af 90       	pop	r10
    4810:	9f 90       	pop	r9
    4812:	8f 90       	pop	r8
    4814:	7f 90       	pop	r7
    4816:	6f 90       	pop	r6
    4818:	5f 90       	pop	r5
    481a:	4f 90       	pop	r4
    481c:	3f 90       	pop	r3
    481e:	08 95       	ret

00004820 <scheduler_init>:
	}
}

void scheduler_init()
{
	task_list = NULL;
    4820:	10 92 5d 2a 	sts	0x2A5D, r1
    4824:	10 92 5e 2a 	sts	0x2A5E, r1
	num_tasks = 0;
    4828:	10 92 ca 28 	sts	0x28CA, r1
	num_executing_tasks = 0;
    482c:	10 92 cf 28 	sts	0x28CF, r1
	curr_pointer = 0;
    4830:	10 92 34 2b 	sts	0x2B34, r1
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during initialization
    4834:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4836:	f8 94       	cli
	{
		// Clear current task list, if necessary
		// (Should only be necessary if scheduler is re-initialized at runtime)
		
		// Set up real-time clock
		rtc_epoch = 0;
    4838:	10 92 ef 27 	sts	0x27EF, r1
    483c:	10 92 f0 27 	sts	0x27F0, r1
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    4840:	85 e0       	ldi	r24, 0x05	; 5
    4842:	e0 e4       	ldi	r30, 0x40	; 64
    4844:	f0 e0       	ldi	r31, 0x00	; 0
    4846:	83 83       	std	Z+3, r24	; 0x03
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    4848:	83 e0       	ldi	r24, 0x03	; 3
    484a:	e0 e0       	ldi	r30, 0x00	; 0
    484c:	f4 e0       	ldi	r31, 0x04	; 4
    484e:	82 83       	std	Z+2, r24	; 0x02
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4850:	81 81       	ldd	r24, Z+1	; 0x01
    4852:	80 fd       	sbrc	r24, 0
    4854:	fd cf       	rjmp	.-6      	; 0x4850 <scheduler_init+0x30>
		RTC.PER = 0xFFFF;
    4856:	8f ef       	ldi	r24, 0xFF	; 255
    4858:	9f ef       	ldi	r25, 0xFF	; 255
    485a:	e0 e0       	ldi	r30, 0x00	; 0
    485c:	f4 e0       	ldi	r31, 0x04	; 4
    485e:	82 87       	std	Z+10, r24	; 0x0a
    4860:	93 87       	std	Z+11, r25	; 0x0b
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4862:	81 81       	ldd	r24, Z+1	; 0x01
    4864:	80 fd       	sbrc	r24, 0
    4866:	fd cf       	rjmp	.-6      	; 0x4862 <scheduler_init+0x42>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    4868:	81 e0       	ldi	r24, 0x01	; 1
    486a:	80 93 00 04 	sts	0x0400, r24
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    486e:	e0 e0       	ldi	r30, 0x00	; 0
    4870:	f4 e0       	ldi	r31, 0x04	; 4
    4872:	81 81       	ldd	r24, Z+1	; 0x01
    4874:	80 fd       	sbrc	r24, 0
    4876:	fd cf       	rjmp	.-6      	; 0x4872 <scheduler_init+0x52>
		RTC.CNT = 0;
    4878:	e0 e0       	ldi	r30, 0x00	; 0
    487a:	f4 e0       	ldi	r31, 0x04	; 4
    487c:	10 86       	std	Z+8, r1	; 0x08
    487e:	11 86       	std	Z+9, r1	; 0x09
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4880:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    4882:	08 95       	ret

00004884 <Config32MHzClock>:
}

void Config32MHzClock(void)
{
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    4884:	88 ed       	ldi	r24, 0xD8	; 216
    4886:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    4888:	82 e0       	ldi	r24, 0x02	; 2
    488a:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    488e:	e0 e5       	ldi	r30, 0x50	; 80
    4890:	f0 e0       	ldi	r31, 0x00	; 0
    4892:	81 81       	ldd	r24, Z+1	; 0x01
    4894:	81 ff       	sbrs	r24, 1
    4896:	fd cf       	rjmp	.-6      	; 0x4892 <Config32MHzClock+0xe>
	CCP = CCP_IOREG_gc;
    4898:	88 ed       	ldi	r24, 0xD8	; 216
    489a:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    489c:	e0 e4       	ldi	r30, 0x40	; 64
    489e:	f0 e0       	ldi	r31, 0x00	; 0
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	80 83       	st	Z, r24
	
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;	// per Dustin: RTCSRC is a 1 kHz oscillator, needs to be verified
    48a4:	85 e0       	ldi	r24, 0x05	; 5
    48a6:	83 83       	std	Z+3, r24	; 0x03
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    48a8:	e0 e0       	ldi	r30, 0x00	; 0
    48aa:	f4 e0       	ldi	r31, 0x04	; 4
    48ac:	81 81       	ldd	r24, Z+1	; 0x01
    48ae:	80 fd       	sbrc	r24, 0
    48b0:	fd cf       	rjmp	.-6      	; 0x48ac <Config32MHzClock+0x28>
	
	RTC.PER = 0xFFFF;		//	0xFFFF == 0b1111111111111111 = (2^16)-1
    48b2:	e0 e0       	ldi	r30, 0x00	; 0
    48b4:	f4 e0       	ldi	r31, 0x04	; 4
    48b6:	8f ef       	ldi	r24, 0xFF	; 255
    48b8:	9f ef       	ldi	r25, 0xFF	; 255
    48ba:	82 87       	std	Z+10, r24	; 0x0a
    48bc:	93 87       	std	Z+11, r25	; 0x0b
	// (2^16)-1 milliseconds is 65.535 seconds

	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    48be:	81 e0       	ldi	r24, 0x01	; 1
    48c0:	80 83       	st	Z, r24

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    48c2:	81 81       	ldd	r24, Z+1	; 0x01
    48c4:	80 fd       	sbrc	r24, 0
    48c6:	fd cf       	rjmp	.-6      	; 0x48c2 <Config32MHzClock+0x3e>
	
	RTC.CNT = 0;
    48c8:	e0 e0       	ldi	r30, 0x00	; 0
    48ca:	f4 e0       	ldi	r31, 0x04	; 4
    48cc:	10 86       	std	Z+8, r1	; 0x08
    48ce:	11 86       	std	Z+9, r1	; 0x09
    48d0:	08 95       	ret

000048d2 <delay_ms>:
}

// Delay ms milliseconds
// (the built-in _delay_ms only takes constant arguments, not variables)
void delay_ms(uint16_t ms)
{
    48d2:	cf 92       	push	r12
    48d4:	df 92       	push	r13
    48d6:	ef 92       	push	r14
    48d8:	ff 92       	push	r15
    48da:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = get_time(); sei();
    48dc:	f8 94       	cli
    48de:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    48e2:	78 94       	sei
	end_time = cur_time + ms;
    48e4:	9b 01       	movw	r18, r22
    48e6:	ac 01       	movw	r20, r24
    48e8:	2e 0d       	add	r18, r14
    48ea:	3f 1d       	adc	r19, r15
    48ec:	41 1d       	adc	r20, r1
    48ee:	51 1d       	adc	r21, r1
    48f0:	69 01       	movw	r12, r18
    48f2:	7a 01       	movw	r14, r20
	while (1)
	{
		cli();
    48f4:	f8 94       	cli
		if (get_time() >= end_time)
    48f6:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    48fa:	6c 15       	cp	r22, r12
    48fc:	7d 05       	cpc	r23, r13
    48fe:	8e 05       	cpc	r24, r14
    4900:	9f 05       	cpc	r25, r15
    4902:	10 f0       	brcs	.+4      	; 0x4908 <delay_ms+0x36>
		{
			sei();
    4904:	78 94       	sei
    4906:	06 c0       	rjmp	.+12     	; 0x4914 <delay_ms+0x42>
			return;
		}
		sei();
    4908:	78 94       	sei
    490a:	3a e6       	ldi	r19, 0x6A	; 106
    490c:	3a 95       	dec	r19
    490e:	f1 f7       	brne	.-4      	; 0x490c <delay_ms+0x3a>
    4910:	00 c0       	rjmp	.+0      	; 0x4912 <delay_ms+0x40>
    4912:	f0 cf       	rjmp	.-32     	; 0x48f4 <delay_ms+0x22>
		delay_us(10);
	}
}
    4914:	ff 90       	pop	r15
    4916:	ef 90       	pop	r14
    4918:	df 90       	pop	r13
    491a:	cf 90       	pop	r12
    491c:	08 95       	ret

0000491e <schedule_task>:
// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
    491e:	8f 92       	push	r8
    4920:	9f 92       	push	r9
    4922:	af 92       	push	r10
    4924:	bf 92       	push	r11
    4926:	cf 92       	push	r12
    4928:	df 92       	push	r13
    492a:	ef 92       	push	r14
    492c:	ff 92       	push	r15
    492e:	0f 93       	push	r16
    4930:	1f 93       	push	r17
    4932:	cf 93       	push	r28
    4934:	df 93       	push	r29
    4936:	00 d0       	rcall	.+0      	; 0x4938 <schedule_task+0x1a>
    4938:	1f 92       	push	r1
    493a:	cd b7       	in	r28, 0x3d	; 61
    493c:	de b7       	in	r29, 0x3e	; 62
    493e:	69 83       	std	Y+1, r22	; 0x01
    4940:	7a 83       	std	Y+2, r23	; 0x02
    4942:	8b 83       	std	Y+3, r24	; 0x03
    4944:	9c 83       	std	Y+4, r25	; 0x04
    4946:	6a 01       	movw	r12, r20
    4948:	79 01       	movw	r14, r18
Task_t task_storage_arr[MAX_NUM_SCHEDULED_TASKS];
uint8_t curr_pointer;

inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    494a:	80 91 ca 28 	lds	r24, 0x28CA
    494e:	8a 30       	cpi	r24, 0x0A	; 10
    4950:	08 f0       	brcs	.+2      	; 0x4954 <schedule_task+0x36>
    4952:	e8 c0       	rjmp	.+464    	; 0x4b24 <schedule_task+0x206>
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    4954:	40 91 34 2b 	lds	r20, 0x2B34
    4958:	84 2f       	mov	r24, r20
    495a:	90 e0       	ldi	r25, 0x00	; 0
    495c:	01 96       	adiw	r24, 0x01	; 1
    495e:	6a e0       	ldi	r22, 0x0A	; 10
    4960:	70 e0       	ldi	r23, 0x00	; 0
    4962:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    4966:	58 2f       	mov	r21, r24
    4968:	48 17       	cp	r20, r24
    496a:	91 f1       	breq	.+100    	; 0x49d0 <schedule_task+0xb2>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
    496c:	99 27       	eor	r25, r25
    496e:	fc 01       	movw	r30, r24
    4970:	ee 0f       	add	r30, r30
    4972:	ff 1f       	adc	r31, r31
    4974:	9c 01       	movw	r18, r24
    4976:	22 0f       	add	r18, r18
    4978:	33 1f       	adc	r19, r19
    497a:	22 0f       	add	r18, r18
    497c:	33 1f       	adc	r19, r19
    497e:	22 0f       	add	r18, r18
    4980:	33 1f       	adc	r19, r19
    4982:	e2 0f       	add	r30, r18
    4984:	f3 1f       	adc	r31, r19
    4986:	eb 5c       	subi	r30, 0xCB	; 203
    4988:	f4 4d       	sbci	r31, 0xD4	; 212
    498a:	24 81       	ldd	r18, Z+4	; 0x04
    498c:	35 81       	ldd	r19, Z+5	; 0x05
    498e:	23 2b       	or	r18, r19
    4990:	f9 f0       	breq	.+62     	; 0x49d0 <schedule_task+0xb2>
inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    4992:	ea e0       	ldi	r30, 0x0A	; 10
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	15 c0       	rjmp	.+42     	; 0x49c2 <schedule_task+0xa4>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
    4998:	99 27       	eor	r25, r25
    499a:	dc 01       	movw	r26, r24
    499c:	aa 0f       	add	r26, r26
    499e:	bb 1f       	adc	r27, r27
    49a0:	9c 01       	movw	r18, r24
    49a2:	22 0f       	add	r18, r18
    49a4:	33 1f       	adc	r19, r19
    49a6:	22 0f       	add	r18, r18
    49a8:	33 1f       	adc	r19, r19
    49aa:	22 0f       	add	r18, r18
    49ac:	33 1f       	adc	r19, r19
    49ae:	a2 0f       	add	r26, r18
    49b0:	b3 1f       	adc	r27, r19
    49b2:	ab 5c       	subi	r26, 0xCB	; 203
    49b4:	b4 4d       	sbci	r27, 0xD4	; 212
    49b6:	14 96       	adiw	r26, 0x04	; 4
    49b8:	2d 91       	ld	r18, X+
    49ba:	3c 91       	ld	r19, X
    49bc:	15 97       	sbiw	r26, 0x05	; 5
    49be:	23 2b       	or	r18, r19
    49c0:	39 f0       	breq	.+14     	; 0x49d0 <schedule_task+0xb2>
inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    49c2:	01 96       	adiw	r24, 0x01	; 1
    49c4:	bf 01       	movw	r22, r30
    49c6:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    49ca:	58 2f       	mov	r21, r24
    49cc:	48 13       	cpse	r20, r24
    49ce:	e4 cf       	rjmp	.-56     	; 0x4998 <schedule_task+0x7a>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
	}
	curr_pointer = tmp;
    49d0:	50 93 34 2b 	sts	0x2B34, r21
	return &(task_storage_arr[curr_pointer]);
    49d4:	85 2f       	mov	r24, r21
    49d6:	90 e0       	ldi	r25, 0x00	; 0
    49d8:	8c 01       	movw	r16, r24
    49da:	00 0f       	add	r16, r16
    49dc:	11 1f       	adc	r17, r17
    49de:	88 0f       	add	r24, r24
    49e0:	99 1f       	adc	r25, r25
    49e2:	88 0f       	add	r24, r24
    49e4:	99 1f       	adc	r25, r25
    49e6:	88 0f       	add	r24, r24
    49e8:	99 1f       	adc	r25, r25
    49ea:	08 0f       	add	r16, r24
    49ec:	19 1f       	adc	r17, r25
    49ee:	0b 5c       	subi	r16, 0xCB	; 203
    49f0:	14 4d       	sbci	r17, 0xD4	; 212
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
    49f2:	01 15       	cp	r16, r1
    49f4:	11 05       	cpc	r17, r1
    49f6:	09 f4       	brne	.+2      	; 0x49fa <schedule_task+0xdc>
    49f8:	97 c0       	rjmp	.+302    	; 0x4b28 <schedule_task+0x20a>
	
	new_task->scheduled_time = time + get_time();
    49fa:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    49fe:	89 80       	ldd	r8, Y+1	; 0x01
    4a00:	9a 80       	ldd	r9, Y+2	; 0x02
    4a02:	ab 80       	ldd	r10, Y+3	; 0x03
    4a04:	bc 80       	ldd	r11, Y+4	; 0x04
    4a06:	dc 01       	movw	r26, r24
    4a08:	cb 01       	movw	r24, r22
    4a0a:	88 0d       	add	r24, r8
    4a0c:	99 1d       	adc	r25, r9
    4a0e:	aa 1d       	adc	r26, r10
    4a10:	bb 1d       	adc	r27, r11
	if ((uint16_t)(new_task->scheduled_time) < 2) new_task->scheduled_time += 4;
    4a12:	82 30       	cpi	r24, 0x02	; 2
    4a14:	91 05       	cpc	r25, r1
    4a16:	30 f0       	brcs	.+12     	; 0x4a24 <schedule_task+0x106>
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
	
	new_task->scheduled_time = time + get_time();
    4a18:	f8 01       	movw	r30, r16
    4a1a:	80 83       	st	Z, r24
    4a1c:	91 83       	std	Z+1, r25	; 0x01
    4a1e:	a2 83       	std	Z+2, r26	; 0x02
    4a20:	b3 83       	std	Z+3, r27	; 0x03
    4a22:	08 c0       	rjmp	.+16     	; 0x4a34 <schedule_task+0x116>
	if ((uint16_t)(new_task->scheduled_time) < 2) new_task->scheduled_time += 4;
    4a24:	04 96       	adiw	r24, 0x04	; 4
    4a26:	a1 1d       	adc	r26, r1
    4a28:	b1 1d       	adc	r27, r1
    4a2a:	f8 01       	movw	r30, r16
    4a2c:	80 83       	st	Z, r24
    4a2e:	91 83       	std	Z+1, r25	; 0x01
    4a30:	a2 83       	std	Z+2, r26	; 0x02
    4a32:	b3 83       	std	Z+3, r27	; 0x03
	new_task->arg = arg;
    4a34:	d8 01       	movw	r26, r16
    4a36:	16 96       	adiw	r26, 0x06	; 6
    4a38:	ed 92       	st	X+, r14
    4a3a:	fc 92       	st	X, r15
    4a3c:	17 97       	sbiw	r26, 0x07	; 7
	new_task->task_function = function;
    4a3e:	14 96       	adiw	r26, 0x04	; 4
    4a40:	cd 92       	st	X+, r12
    4a42:	dc 92       	st	X, r13
    4a44:	15 97       	sbiw	r26, 0x05	; 5
	
	// Turn off interrupts so we don't muck up the task list during this function
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4a46:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4a48:	f8 94       	cli
	{
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		new_task->next = task_list;
    4a4a:	c0 90 5d 2a 	lds	r12, 0x2A5D
    4a4e:	d0 90 5e 2a 	lds	r13, 0x2A5E
    4a52:	f8 01       	movw	r30, r16
    4a54:	c0 86       	std	Z+8, r12	; 0x08
    4a56:	d1 86       	std	Z+9, r13	; 0x09
		
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || new_task->scheduled_time <= task_list->scheduled_time)
    4a58:	c1 14       	cp	r12, r1
    4a5a:	d1 04       	cpc	r13, r1
    4a5c:	71 f0       	breq	.+28     	; 0x4a7a <schedule_task+0x15c>
    4a5e:	40 81       	ld	r20, Z
    4a60:	51 81       	ldd	r21, Z+1	; 0x01
    4a62:	62 81       	ldd	r22, Z+2	; 0x02
    4a64:	73 81       	ldd	r23, Z+3	; 0x03
    4a66:	f6 01       	movw	r30, r12
    4a68:	80 81       	ld	r24, Z
    4a6a:	91 81       	ldd	r25, Z+1	; 0x01
    4a6c:	a2 81       	ldd	r26, Z+2	; 0x02
    4a6e:	b3 81       	ldd	r27, Z+3	; 0x03
    4a70:	84 17       	cp	r24, r20
    4a72:	95 07       	cpc	r25, r21
    4a74:	a6 07       	cpc	r26, r22
    4a76:	b7 07       	cpc	r27, r23
    4a78:	90 f1       	brcs	.+100    	; 0x4ade <schedule_task+0x1c0>

		{
			task_list = new_task;
    4a7a:	00 93 5d 2a 	sts	0x2A5D, r16
    4a7e:	10 93 5e 2a 	sts	0x2A5E, r17
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if (new_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4a82:	f8 01       	movw	r30, r16
    4a84:	80 81       	ld	r24, Z
    4a86:	91 81       	ldd	r25, Z+1	; 0x01
    4a88:	a2 81       	ldd	r26, Z+2	; 0x02
    4a8a:	b3 81       	ldd	r27, Z+3	; 0x03
    4a8c:	40 91 ef 27 	lds	r20, 0x27EF
    4a90:	50 91 f0 27 	lds	r21, 0x27F0
    4a94:	e0 e0       	ldi	r30, 0x00	; 0
    4a96:	f4 e0       	ldi	r31, 0x04	; 4
    4a98:	c2 84       	ldd	r12, Z+10	; 0x0a
    4a9a:	d3 84       	ldd	r13, Z+11	; 0x0b
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	70 e0       	ldi	r23, 0x00	; 0
    4aa0:	ba 01       	movw	r22, r20
    4aa2:	55 27       	eor	r21, r21
    4aa4:	44 27       	eor	r20, r20
    4aa6:	e1 2c       	mov	r14, r1
    4aa8:	f1 2c       	mov	r15, r1
    4aaa:	4c 29       	or	r20, r12
    4aac:	5d 29       	or	r21, r13
    4aae:	6e 29       	or	r22, r14
    4ab0:	7f 29       	or	r23, r15
    4ab2:	48 17       	cp	r20, r24
    4ab4:	59 07       	cpc	r21, r25
    4ab6:	6a 07       	cpc	r22, r26
    4ab8:	7b 07       	cpc	r23, r27
    4aba:	58 f0       	brcs	.+22     	; 0x4ad2 <schedule_task+0x1b4>
			{
				while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4abc:	31 81       	ldd	r19, Z+1	; 0x01
    4abe:	30 fd       	sbrc	r19, 0
    4ac0:	fd cf       	rjmp	.-6      	; 0x4abc <schedule_task+0x19e>
				RTC.COMP = (uint16_t)(new_task->scheduled_time);
    4ac2:	e0 e0       	ldi	r30, 0x00	; 0
    4ac4:	f4 e0       	ldi	r31, 0x04	; 4
    4ac6:	84 87       	std	Z+12, r24	; 0x0c
    4ac8:	95 87       	std	Z+13, r25	; 0x0d
				RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    4aca:	82 81       	ldd	r24, Z+2	; 0x02
    4acc:	84 60       	ori	r24, 0x04	; 4
    4ace:	82 83       	std	Z+2, r24	; 0x02
    4ad0:	22 c0       	rjmp	.+68     	; 0x4b16 <schedule_task+0x1f8>
			}
			else
			{
				RTC.INTCTRL &= ~RTC_COMPINTLVL_LO_gc;
    4ad2:	e0 e0       	ldi	r30, 0x00	; 0
    4ad4:	f4 e0       	ldi	r31, 0x04	; 4
    4ad6:	82 81       	ldd	r24, Z+2	; 0x02
    4ad8:	8b 7f       	andi	r24, 0xFB	; 251
    4ada:	82 83       	std	Z+2, r24	; 0x02
    4adc:	1c c0       	rjmp	.+56     	; 0x4b16 <schedule_task+0x1f8>
		// If the new task is not the next to be executed, iterate through the task_list,
		// find its position in the linked list, and insert it there.
		else
		{
			Task_t* tmp_task_ptr = task_list;
			while (tmp_task_ptr->next != NULL && new_task->scheduled_time > tmp_task_ptr->next->scheduled_time)
    4ade:	d6 01       	movw	r26, r12
    4ae0:	18 96       	adiw	r26, 0x08	; 8
    4ae2:	ed 90       	ld	r14, X+
    4ae4:	fc 90       	ld	r15, X
    4ae6:	19 97       	sbiw	r26, 0x09	; 9
    4ae8:	e1 14       	cp	r14, r1
    4aea:	f1 04       	cpc	r15, r1
    4aec:	61 f0       	breq	.+24     	; 0x4b06 <schedule_task+0x1e8>
    4aee:	f7 01       	movw	r30, r14
    4af0:	80 81       	ld	r24, Z
    4af2:	91 81       	ldd	r25, Z+1	; 0x01
    4af4:	a2 81       	ldd	r26, Z+2	; 0x02
    4af6:	b3 81       	ldd	r27, Z+3	; 0x03
    4af8:	84 17       	cp	r24, r20
    4afa:	95 07       	cpc	r25, r21
    4afc:	a6 07       	cpc	r26, r22
    4afe:	b7 07       	cpc	r27, r23
    4b00:	10 f4       	brcc	.+4      	; 0x4b06 <schedule_task+0x1e8>
    4b02:	67 01       	movw	r12, r14
    4b04:	ec cf       	rjmp	.-40     	; 0x4ade <schedule_task+0x1c0>
			{
				tmp_task_ptr = tmp_task_ptr->next;
			}
			new_task->next = tmp_task_ptr->next;
    4b06:	d8 01       	movw	r26, r16
    4b08:	18 96       	adiw	r26, 0x08	; 8
    4b0a:	ed 92       	st	X+, r14
    4b0c:	fc 92       	st	X, r15
    4b0e:	19 97       	sbiw	r26, 0x09	; 9
			tmp_task_ptr->next = new_task;
    4b10:	f6 01       	movw	r30, r12
    4b12:	00 87       	std	Z+8, r16	; 0x08
    4b14:	11 87       	std	Z+9, r17	; 0x09
		}


		num_tasks++;
    4b16:	80 91 ca 28 	lds	r24, 0x28CA
    4b1a:	8f 5f       	subi	r24, 0xFF	; 255
    4b1c:	80 93 ca 28 	sts	0x28CA, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4b20:	2f bf       	out	0x3f, r18	; 63
	}

	return new_task;
    4b22:	02 c0       	rjmp	.+4      	; 0x4b28 <schedule_task+0x20a>
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
    4b24:	00 e0       	ldi	r16, 0x00	; 0
    4b26:	10 e0       	ldi	r17, 0x00	; 0

		num_tasks++;
	}

	return new_task;
}
    4b28:	c8 01       	movw	r24, r16
    4b2a:	24 96       	adiw	r28, 0x04	; 4
    4b2c:	cd bf       	out	0x3d, r28	; 61
    4b2e:	de bf       	out	0x3e, r29	; 62
    4b30:	df 91       	pop	r29
    4b32:	cf 91       	pop	r28
    4b34:	1f 91       	pop	r17
    4b36:	0f 91       	pop	r16
    4b38:	ff 90       	pop	r15
    4b3a:	ef 90       	pop	r14
    4b3c:	df 90       	pop	r13
    4b3e:	cf 90       	pop	r12
    4b40:	bf 90       	pop	r11
    4b42:	af 90       	pop	r10
    4b44:	9f 90       	pop	r9
    4b46:	8f 90       	pop	r8
    4b48:	08 95       	ret

00004b4a <remove_task>:

// Remove a task from the task queue
void remove_task(Task_t* task)
{
    4b4a:	1f 93       	push	r17
    4b4c:	cf 93       	push	r28
    4b4e:	df 93       	push	r29
    4b50:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4b52:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4b54:	f8 94       	cli
	{
		if(task_list==NULL) return;
    4b56:	a0 91 5d 2a 	lds	r26, 0x2A5D
    4b5a:	b0 91 5e 2a 	lds	r27, 0x2A5E
    4b5e:	10 97       	sbiw	r26, 0x00	; 0
    4b60:	09 f4       	brne	.+2      	; 0x4b64 <remove_task+0x1a>
    4b62:	b1 c0       	rjmp	.+354    	; 0x4cc6 <remove_task+0x17c>
		if(task_list==task)
    4b64:	8a 17       	cp	r24, r26
    4b66:	9b 07       	cpc	r25, r27
    4b68:	09 f0       	breq	.+2      	; 0x4b6c <remove_task+0x22>
    4b6a:	50 c0       	rjmp	.+160    	; 0x4c0c <remove_task+0xc2>
		{
			task_list=task->next;
    4b6c:	80 85       	ldd	r24, Z+8	; 0x08
    4b6e:	91 85       	ldd	r25, Z+9	; 0x09
    4b70:	80 93 5d 2a 	sts	0x2A5D, r24
    4b74:	90 93 5e 2a 	sts	0x2A5E, r25

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4b78:	80 91 34 2b 	lds	r24, 0x2B34
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	ac 01       	movw	r20, r24
    4b80:	44 0f       	add	r20, r20
    4b82:	55 1f       	adc	r21, r21
    4b84:	9c 01       	movw	r18, r24
    4b86:	22 0f       	add	r18, r18
    4b88:	33 1f       	adc	r19, r19
    4b8a:	22 0f       	add	r18, r18
    4b8c:	33 1f       	adc	r19, r19
    4b8e:	22 0f       	add	r18, r18
    4b90:	33 1f       	adc	r19, r19
    4b92:	24 0f       	add	r18, r20
    4b94:	35 1f       	adc	r19, r21
    4b96:	2b 5c       	subi	r18, 0xCB	; 203
    4b98:	34 4d       	sbci	r19, 0xD4	; 212
    4b9a:	e2 17       	cp	r30, r18
    4b9c:	f3 07       	cpc	r31, r19
    4b9e:	e9 f4       	brne	.+58     	; 0x4bda <remove_task+0x90>
		{
			task_storage_arr[tmp].task_function = NULL;
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	ee 0f       	add	r30, r30
    4ba4:	ff 1f       	adc	r31, r31
    4ba6:	9c 01       	movw	r18, r24
    4ba8:	22 0f       	add	r18, r18
    4baa:	33 1f       	adc	r19, r19
    4bac:	22 0f       	add	r18, r18
    4bae:	33 1f       	adc	r19, r19
    4bb0:	22 0f       	add	r18, r18
    4bb2:	33 1f       	adc	r19, r19
    4bb4:	e2 0f       	add	r30, r18
    4bb6:	f3 1f       	adc	r31, r19
    4bb8:	eb 5c       	subi	r30, 0xCB	; 203
    4bba:	f4 4d       	sbci	r31, 0xD4	; 212
    4bbc:	14 82       	std	Z+4, r1	; 0x04
    4bbe:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4bc0:	09 96       	adiw	r24, 0x09	; 9
    4bc2:	6a e0       	ldi	r22, 0x0A	; 10
    4bc4:	70 e0       	ldi	r23, 0x00	; 0
    4bc6:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    4bca:	80 93 34 2b 	sts	0x2B34, r24
		if(task_list==task)
		{
			task_list=task->next;
			scheduler_free(task);
			task = NULL;
			num_tasks--;
    4bce:	80 91 ca 28 	lds	r24, 0x28CA
    4bd2:	81 50       	subi	r24, 0x01	; 1
    4bd4:	80 93 ca 28 	sts	0x28CA, r24
    4bd8:	78 c0       	rjmp	.+240    	; 0x4cca <remove_task+0x180>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4bda:	ca e0       	ldi	r28, 0x0A	; 10
    4bdc:	d0 e0       	ldi	r29, 0x00	; 0
    4bde:	09 96       	adiw	r24, 0x09	; 9
    4be0:	be 01       	movw	r22, r28
    4be2:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4be6:	99 27       	eor	r25, r25
    4be8:	ac 01       	movw	r20, r24
    4bea:	44 0f       	add	r20, r20
    4bec:	55 1f       	adc	r21, r21
    4bee:	9c 01       	movw	r18, r24
    4bf0:	22 0f       	add	r18, r18
    4bf2:	33 1f       	adc	r19, r19
    4bf4:	22 0f       	add	r18, r18
    4bf6:	33 1f       	adc	r19, r19
    4bf8:	22 0f       	add	r18, r18
    4bfa:	33 1f       	adc	r19, r19
    4bfc:	24 0f       	add	r18, r20
    4bfe:	35 1f       	adc	r19, r21
    4c00:	2b 5c       	subi	r18, 0xCB	; 203
    4c02:	34 4d       	sbci	r19, 0xD4	; 212
    4c04:	e2 17       	cp	r30, r18
    4c06:	f3 07       	cpc	r31, r19
    4c08:	51 f7       	brne	.-44     	; 0x4bde <remove_task+0x94>
    4c0a:	ca cf       	rjmp	.-108    	; 0x4ba0 <remove_task+0x56>
			num_tasks--;
		}
		else
		{
			Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    4c0c:	18 96       	adiw	r26, 0x08	; 8
    4c0e:	2d 91       	ld	r18, X+
    4c10:	3c 91       	ld	r19, X
    4c12:	19 97       	sbiw	r26, 0x09	; 9
    4c14:	21 15       	cp	r18, r1
    4c16:	31 05       	cpc	r19, r1
    4c18:	09 f4       	brne	.+2      	; 0x4c1c <remove_task+0xd2>
    4c1a:	57 c0       	rjmp	.+174    	; 0x4cca <remove_task+0x180>
    4c1c:	e2 17       	cp	r30, r18
    4c1e:	f3 07       	cpc	r31, r19
    4c20:	11 f0       	breq	.+4      	; 0x4c26 <remove_task+0xdc>
    4c22:	d9 01       	movw	r26, r18
    4c24:	f3 cf       	rjmp	.-26     	; 0x4c0c <remove_task+0xc2>
			if (tmp_task->next != NULL)
			{
				tmp_task->next = task->next;
    4c26:	80 85       	ldd	r24, Z+8	; 0x08
    4c28:	91 85       	ldd	r25, Z+9	; 0x09
    4c2a:	18 96       	adiw	r26, 0x08	; 8
    4c2c:	8d 93       	st	X+, r24
    4c2e:	9c 93       	st	X, r25
    4c30:	19 97       	sbiw	r26, 0x09	; 9

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4c32:	80 91 34 2b 	lds	r24, 0x2B34
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	ac 01       	movw	r20, r24
    4c3a:	44 0f       	add	r20, r20
    4c3c:	55 1f       	adc	r21, r21
    4c3e:	9c 01       	movw	r18, r24
    4c40:	22 0f       	add	r18, r18
    4c42:	33 1f       	adc	r19, r19
    4c44:	22 0f       	add	r18, r18
    4c46:	33 1f       	adc	r19, r19
    4c48:	22 0f       	add	r18, r18
    4c4a:	33 1f       	adc	r19, r19
    4c4c:	24 0f       	add	r18, r20
    4c4e:	35 1f       	adc	r19, r21
    4c50:	2b 5c       	subi	r18, 0xCB	; 203
    4c52:	34 4d       	sbci	r19, 0xD4	; 212
    4c54:	e2 17       	cp	r30, r18
    4c56:	f3 07       	cpc	r31, r19
    4c58:	e9 f4       	brne	.+58     	; 0x4c94 <remove_task+0x14a>
		{
			task_storage_arr[tmp].task_function = NULL;
    4c5a:	fc 01       	movw	r30, r24
    4c5c:	ee 0f       	add	r30, r30
    4c5e:	ff 1f       	adc	r31, r31
    4c60:	9c 01       	movw	r18, r24
    4c62:	22 0f       	add	r18, r18
    4c64:	33 1f       	adc	r19, r19
    4c66:	22 0f       	add	r18, r18
    4c68:	33 1f       	adc	r19, r19
    4c6a:	22 0f       	add	r18, r18
    4c6c:	33 1f       	adc	r19, r19
    4c6e:	e2 0f       	add	r30, r18
    4c70:	f3 1f       	adc	r31, r19
    4c72:	eb 5c       	subi	r30, 0xCB	; 203
    4c74:	f4 4d       	sbci	r31, 0xD4	; 212
    4c76:	14 82       	std	Z+4, r1	; 0x04
    4c78:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4c7a:	09 96       	adiw	r24, 0x09	; 9
    4c7c:	6a e0       	ldi	r22, 0x0A	; 10
    4c7e:	70 e0       	ldi	r23, 0x00	; 0
    4c80:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    4c84:	80 93 34 2b 	sts	0x2B34, r24
			if (tmp_task->next != NULL)
			{
				tmp_task->next = task->next;
				scheduler_free(task);
				task = NULL;
				num_tasks--;
    4c88:	80 91 ca 28 	lds	r24, 0x28CA
    4c8c:	81 50       	subi	r24, 0x01	; 1
    4c8e:	80 93 ca 28 	sts	0x28CA, r24
    4c92:	1b c0       	rjmp	.+54     	; 0x4cca <remove_task+0x180>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4c94:	ca e0       	ldi	r28, 0x0A	; 10
    4c96:	d0 e0       	ldi	r29, 0x00	; 0
    4c98:	09 96       	adiw	r24, 0x09	; 9
    4c9a:	be 01       	movw	r22, r28
    4c9c:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4ca0:	99 27       	eor	r25, r25
    4ca2:	ac 01       	movw	r20, r24
    4ca4:	44 0f       	add	r20, r20
    4ca6:	55 1f       	adc	r21, r21
    4ca8:	9c 01       	movw	r18, r24
    4caa:	22 0f       	add	r18, r18
    4cac:	33 1f       	adc	r19, r19
    4cae:	22 0f       	add	r18, r18
    4cb0:	33 1f       	adc	r19, r19
    4cb2:	22 0f       	add	r18, r18
    4cb4:	33 1f       	adc	r19, r19
    4cb6:	24 0f       	add	r18, r20
    4cb8:	35 1f       	adc	r19, r21
    4cba:	2b 5c       	subi	r18, 0xCB	; 203
    4cbc:	34 4d       	sbci	r19, 0xD4	; 212
    4cbe:	e2 17       	cp	r30, r18
    4cc0:	f3 07       	cpc	r31, r19
    4cc2:	51 f7       	brne	.-44     	; 0x4c98 <remove_task+0x14e>
    4cc4:	ca cf       	rjmp	.-108    	; 0x4c5a <remove_task+0x110>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4cc6:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    4cc8:	01 c0       	rjmp	.+2      	; 0x4ccc <remove_task+0x182>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4cca:	1f bf       	out	0x3f, r17	; 63
			}
		}

	}

}
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	1f 91       	pop	r17
    4cd2:	08 95       	ret

00004cd4 <print_task_queue>:

void print_task_queue()
{
    4cd4:	ff 92       	push	r15
    4cd6:	0f 93       	push	r16
    4cd8:	1f 93       	push	r17
    4cda:	cf 93       	push	r28
    4cdc:	df 93       	push	r29
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during printing
    4cde:	ff b6       	in	r15, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4ce0:	f8 94       	cli
	{
		Task_t* cur_task = task_list;
    4ce2:	c0 91 5d 2a 	lds	r28, 0x2A5D
    4ce6:	d0 91 5e 2a 	lds	r29, 0x2A5E
		
		printf("Task Queue (%hhu tasks, %hhu executing):\r\n", num_tasks, num_executing_tasks);
    4cea:	90 91 cf 28 	lds	r25, 0x28CF
    4cee:	80 91 ca 28 	lds	r24, 0x28CA
    4cf2:	1f 92       	push	r1
    4cf4:	9f 93       	push	r25
    4cf6:	1f 92       	push	r1
    4cf8:	8f 93       	push	r24
    4cfa:	80 e0       	ldi	r24, 0x00	; 0
    4cfc:	93 e2       	ldi	r25, 0x23	; 35
    4cfe:	9f 93       	push	r25
    4d00:	8f 93       	push	r24
    4d02:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    4d06:	0f 90       	pop	r0
    4d08:	0f 90       	pop	r0
    4d0a:	0f 90       	pop	r0
    4d0c:	0f 90       	pop	r0
    4d0e:	0f 90       	pop	r0
    4d10:	0f 90       	pop	r0
    4d12:	20 97       	sbiw	r28, 0x00	; 0
    4d14:	21 f1       	breq	.+72     	; 0x4d5e <print_task_queue+0x8a>
		{
			printf("\tTask %p (%p) scheduled at %lu, %lu current\r\n", cur_task, cur_task->task_function, cur_task->scheduled_time, get_time());
    4d16:	0b e2       	ldi	r16, 0x2B	; 43
    4d18:	13 e2       	ldi	r17, 0x23	; 35
    4d1a:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4d1e:	9f 93       	push	r25
    4d20:	8f 93       	push	r24
    4d22:	7f 93       	push	r23
    4d24:	6f 93       	push	r22
    4d26:	8b 81       	ldd	r24, Y+3	; 0x03
    4d28:	8f 93       	push	r24
    4d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d2c:	8f 93       	push	r24
    4d2e:	89 81       	ldd	r24, Y+1	; 0x01
    4d30:	8f 93       	push	r24
    4d32:	88 81       	ld	r24, Y
    4d34:	8f 93       	push	r24
    4d36:	8d 81       	ldd	r24, Y+5	; 0x05
    4d38:	8f 93       	push	r24
    4d3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4d3c:	8f 93       	push	r24
    4d3e:	df 93       	push	r29
    4d40:	cf 93       	push	r28
    4d42:	1f 93       	push	r17
    4d44:	0f 93       	push	r16
    4d46:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
			cur_task = cur_task->next;
    4d4a:	08 84       	ldd	r0, Y+8	; 0x08
    4d4c:	d9 85       	ldd	r29, Y+9	; 0x09
    4d4e:	c0 2d       	mov	r28, r0
		Task_t* cur_task = task_list;
		
		printf("Task Queue (%hhu tasks, %hhu executing):\r\n", num_tasks, num_executing_tasks);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    4d50:	8d b7       	in	r24, 0x3d	; 61
    4d52:	9e b7       	in	r25, 0x3e	; 62
    4d54:	0e 96       	adiw	r24, 0x0e	; 14
    4d56:	8d bf       	out	0x3d, r24	; 61
    4d58:	9e bf       	out	0x3e, r25	; 62
    4d5a:	20 97       	sbiw	r28, 0x00	; 0
    4d5c:	f1 f6       	brne	.-68     	; 0x4d1a <print_task_queue+0x46>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4d5e:	ff be       	out	0x3f, r15	; 63
		{
			printf("\tTask %p (%p) scheduled at %lu, %lu current\r\n", cur_task, cur_task->task_function, cur_task->scheduled_time, get_time());
			cur_task = cur_task->next;
		}
	}
}
    4d60:	df 91       	pop	r29
    4d62:	cf 91       	pop	r28
    4d64:	1f 91       	pop	r17
    4d66:	0f 91       	pop	r16
    4d68:	ff 90       	pop	r15
    4d6a:	08 95       	ret

00004d6c <run_tasks>:

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
void run_tasks()
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    4d6c:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4d6e:	f8 94       	cli
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4d70:	e0 91 5d 2a 	lds	r30, 0x2A5D
    4d74:	f0 91 5e 2a 	lds	r31, 0x2A5E
    4d78:	30 97       	sbiw	r30, 0x00	; 0
    4d7a:	09 f0       	breq	.+2      	; 0x4d7e <run_tasks+0x12>
    4d7c:	67 c0       	rjmp	.+206    	; 0x4e4c <run_tasks+0xe0>
    4d7e:	a6 c0       	rjmp	.+332    	; 0x4ecc <run_tasks+0x160>
		{
			Task_t* cur_task = task_list;
    4d80:	e0 90 5d 2a 	lds	r14, 0x2A5D
    4d84:	f0 90 5e 2a 	lds	r15, 0x2A5E
			task_list = cur_task->next;
    4d88:	d7 01       	movw	r26, r14
    4d8a:	18 96       	adiw	r26, 0x08	; 8
    4d8c:	8d 91       	ld	r24, X+
    4d8e:	9c 91       	ld	r25, X
    4d90:	19 97       	sbiw	r26, 0x09	; 9
    4d92:	80 93 5d 2a 	sts	0x2A5D, r24
    4d96:	90 93 5e 2a 	sts	0x2A5E, r25

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    4d9a:	78 94       	sei
			NONATOMIC_BLOCK(NONATOMIC_FORCEOFF) // Enable interrupts during tasks
			{
				cur_task->task_function(cur_task->arg); // run the task
    4d9c:	d7 01       	movw	r26, r14
    4d9e:	14 96       	adiw	r26, 0x04	; 4
    4da0:	ed 91       	ld	r30, X+
    4da2:	fc 91       	ld	r31, X
    4da4:	15 97       	sbiw	r26, 0x05	; 5
    4da6:	16 96       	adiw	r26, 0x06	; 6
    4da8:	8d 91       	ld	r24, X+
    4daa:	9c 91       	ld	r25, X
    4dac:	17 97       	sbiw	r26, 0x07	; 7
    4dae:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
    4db0:	f8 94       	cli

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4db2:	80 91 34 2b 	lds	r24, 0x2B34
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	ac 01       	movw	r20, r24
    4dba:	44 0f       	add	r20, r20
    4dbc:	55 1f       	adc	r21, r21
    4dbe:	9c 01       	movw	r18, r24
    4dc0:	22 0f       	add	r18, r18
    4dc2:	33 1f       	adc	r19, r19
    4dc4:	22 0f       	add	r18, r18
    4dc6:	33 1f       	adc	r19, r19
    4dc8:	22 0f       	add	r18, r18
    4dca:	33 1f       	adc	r19, r19
    4dcc:	24 0f       	add	r18, r20
    4dce:	35 1f       	adc	r19, r21
    4dd0:	2b 5c       	subi	r18, 0xCB	; 203
    4dd2:	34 4d       	sbci	r19, 0xD4	; 212
    4dd4:	e2 16       	cp	r14, r18
    4dd6:	f3 06       	cpc	r15, r19
    4dd8:	11 f5       	brne	.+68     	; 0x4e1e <run_tasks+0xb2>
		{
			task_storage_arr[tmp].task_function = NULL;
    4dda:	fc 01       	movw	r30, r24
    4ddc:	ee 0f       	add	r30, r30
    4dde:	ff 1f       	adc	r31, r31
    4de0:	9c 01       	movw	r18, r24
    4de2:	22 0f       	add	r18, r18
    4de4:	33 1f       	adc	r19, r19
    4de6:	22 0f       	add	r18, r18
    4de8:	33 1f       	adc	r19, r19
    4dea:	22 0f       	add	r18, r18
    4dec:	33 1f       	adc	r19, r19
    4dee:	e2 0f       	add	r30, r18
    4df0:	f3 1f       	adc	r31, r19
    4df2:	eb 5c       	subi	r30, 0xCB	; 203
    4df4:	f4 4d       	sbci	r31, 0xD4	; 212
    4df6:	14 82       	std	Z+4, r1	; 0x04
    4df8:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4dfa:	09 96       	adiw	r24, 0x09	; 9
    4dfc:	be 01       	movw	r22, r28
    4dfe:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
    4e02:	80 93 34 2b 	sts	0x2B34, r24
			{
				cur_task->task_function(cur_task->arg); // run the task
			}
			scheduler_free(cur_task);
			cur_task = NULL;
			num_tasks--;
    4e06:	80 91 ca 28 	lds	r24, 0x28CA
    4e0a:	81 50       	subi	r24, 0x01	; 1
    4e0c:	80 93 ca 28 	sts	0x28CA, r24
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4e10:	e0 91 5d 2a 	lds	r30, 0x2A5D
    4e14:	f0 91 5e 2a 	lds	r31, 0x2A5E
    4e18:	30 97       	sbiw	r30, 0x00	; 0
    4e1a:	d1 f4       	brne	.+52     	; 0x4e50 <run_tasks+0xe4>
    4e1c:	57 c0       	rjmp	.+174    	; 0x4ecc <run_tasks+0x160>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4e1e:	09 96       	adiw	r24, 0x09	; 9
    4e20:	be 01       	movw	r22, r28
    4e22:	0e 94 2f 36 	call	0x6c5e	; 0x6c5e <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4e26:	99 27       	eor	r25, r25
    4e28:	ac 01       	movw	r20, r24
    4e2a:	44 0f       	add	r20, r20
    4e2c:	55 1f       	adc	r21, r21
    4e2e:	9c 01       	movw	r18, r24
    4e30:	22 0f       	add	r18, r18
    4e32:	33 1f       	adc	r19, r19
    4e34:	22 0f       	add	r18, r18
    4e36:	33 1f       	adc	r19, r19
    4e38:	22 0f       	add	r18, r18
    4e3a:	33 1f       	adc	r19, r19
    4e3c:	24 0f       	add	r18, r20
    4e3e:	35 1f       	adc	r19, r21
    4e40:	2b 5c       	subi	r18, 0xCB	; 203
    4e42:	34 4d       	sbci	r19, 0xD4	; 212
    4e44:	e2 16       	cp	r14, r18
    4e46:	f3 06       	cpc	r15, r19
    4e48:	51 f7       	brne	.-44     	; 0x4e1e <run_tasks+0xb2>
    4e4a:	c7 cf       	rjmp	.-114    	; 0x4dda <run_tasks+0x6e>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4e4c:	ca e0       	ldi	r28, 0x0A	; 10
    4e4e:	d0 e0       	ldi	r29, 0x00	; 0
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4e50:	c0 80       	ld	r12, Z
    4e52:	d1 80       	ldd	r13, Z+1	; 0x01
    4e54:	e2 80       	ldd	r14, Z+2	; 0x02
    4e56:	f3 80       	ldd	r15, Z+3	; 0x03
    4e58:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	cb 01       	movw	r24, r22
    4e60:	02 96       	adiw	r24, 0x02	; 2
    4e62:	a1 1d       	adc	r26, r1
    4e64:	b1 1d       	adc	r27, r1
    4e66:	8c 15       	cp	r24, r12
    4e68:	9d 05       	cpc	r25, r13
    4e6a:	ae 05       	cpc	r26, r14
    4e6c:	bf 05       	cpc	r27, r15
    4e6e:	08 f0       	brcs	.+2      	; 0x4e72 <run_tasks+0x106>
    4e70:	87 cf       	rjmp	.-242    	; 0x4d80 <run_tasks+0x14>
			scheduler_free(cur_task);
			cur_task = NULL;
			num_tasks--;
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4e72:	e0 91 5d 2a 	lds	r30, 0x2A5D
    4e76:	f0 91 5e 2a 	lds	r31, 0x2A5E
    4e7a:	30 97       	sbiw	r30, 0x00	; 0
    4e7c:	39 f1       	breq	.+78     	; 0x4ecc <run_tasks+0x160>
    4e7e:	80 81       	ld	r24, Z
    4e80:	91 81       	ldd	r25, Z+1	; 0x01
    4e82:	a2 81       	ldd	r26, Z+2	; 0x02
    4e84:	b3 81       	ldd	r27, Z+3	; 0x03
    4e86:	40 91 ef 27 	lds	r20, 0x27EF
    4e8a:	50 91 f0 27 	lds	r21, 0x27F0
    4e8e:	e0 e0       	ldi	r30, 0x00	; 0
    4e90:	f4 e0       	ldi	r31, 0x04	; 4
    4e92:	c2 84       	ldd	r12, Z+10	; 0x0a
    4e94:	d3 84       	ldd	r13, Z+11	; 0x0b
    4e96:	60 e0       	ldi	r22, 0x00	; 0
    4e98:	70 e0       	ldi	r23, 0x00	; 0
    4e9a:	ba 01       	movw	r22, r20
    4e9c:	55 27       	eor	r21, r21
    4e9e:	44 27       	eor	r20, r20
    4ea0:	e1 2c       	mov	r14, r1
    4ea2:	f1 2c       	mov	r15, r1
    4ea4:	4c 29       	or	r20, r12
    4ea6:	5d 29       	or	r21, r13
    4ea8:	6e 29       	or	r22, r14
    4eaa:	7f 29       	or	r23, r15
    4eac:	48 17       	cp	r20, r24
    4eae:	59 07       	cpc	r21, r25
    4eb0:	6a 07       	cpc	r22, r26
    4eb2:	7b 07       	cpc	r23, r27
    4eb4:	58 f0       	brcs	.+22     	; 0x4ecc <run_tasks+0x160>
		{
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4eb6:	21 81       	ldd	r18, Z+1	; 0x01
    4eb8:	20 fd       	sbrc	r18, 0
    4eba:	fd cf       	rjmp	.-6      	; 0x4eb6 <run_tasks+0x14a>
			RTC.COMP = (uint16_t)(task_list->scheduled_time);
    4ebc:	e0 e0       	ldi	r30, 0x00	; 0
    4ebe:	f4 e0       	ldi	r31, 0x04	; 4
    4ec0:	84 87       	std	Z+12, r24	; 0x0c
    4ec2:	95 87       	std	Z+13, r25	; 0x0d
			RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    4ec4:	82 81       	ldd	r24, Z+2	; 0x02
    4ec6:	84 60       	ori	r24, 0x04	; 4
    4ec8:	82 83       	std	Z+2, r24	; 0x02
    4eca:	05 c0       	rjmp	.+10     	; 0x4ed6 <run_tasks+0x16a>
		}
		else
		{
			RTC.INTCTRL &= ~RTC_COMPINTLVL_LO_gc;
    4ecc:	e0 e0       	ldi	r30, 0x00	; 0
    4ece:	f4 e0       	ldi	r31, 0x04	; 4
    4ed0:	82 81       	ldd	r24, Z+2	; 0x02
    4ed2:	8b 7f       	andi	r24, 0xFB	; 251
    4ed4:	82 83       	std	Z+2, r24	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4ed6:	1f bf       	out	0x3f, r17	; 63
	}
	
	// Jump to the code that restores the registers to the state they were in
	// before the RTC interrupt.  Program control will return to where it was before the interrupt
	// on return from restore_registers
	asm("jmp restore_registers");	 // must include scheduler_asm.c in the project
    4ed8:	0c 94 09 02 	jmp	0x412	; 0x412 <restore_registers>

00004edc <__vector_10>:
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect )
{
    4edc:	1f 92       	push	r1
    4ede:	0f 92       	push	r0
    4ee0:	0f b6       	in	r0, 0x3f	; 63
    4ee2:	0f 92       	push	r0
    4ee4:	11 24       	eor	r1, r1
    4ee6:	0b b6       	in	r0, 0x3b	; 59
    4ee8:	0f 92       	push	r0
    4eea:	cf 92       	push	r12
    4eec:	df 92       	push	r13
    4eee:	ef 92       	push	r14
    4ef0:	ff 92       	push	r15
    4ef2:	2f 93       	push	r18
    4ef4:	3f 93       	push	r19
    4ef6:	4f 93       	push	r20
    4ef8:	5f 93       	push	r21
    4efa:	6f 93       	push	r22
    4efc:	7f 93       	push	r23
    4efe:	8f 93       	push	r24
    4f00:	9f 93       	push	r25
    4f02:	af 93       	push	r26
    4f04:	bf 93       	push	r27
    4f06:	cf 93       	push	r28
    4f08:	ef 93       	push	r30
    4f0a:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    4f0c:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4f0e:	f8 94       	cli
	{
		rtc_epoch++;
    4f10:	80 91 ef 27 	lds	r24, 0x27EF
    4f14:	90 91 f0 27 	lds	r25, 0x27F0
    4f18:	01 96       	adiw	r24, 0x01	; 1
    4f1a:	80 93 ef 27 	sts	0x27EF, r24
    4f1e:	90 93 f0 27 	sts	0x27F0, r25
		//printf("RTC Overflow. Current time %u\n", get_time());
		//print_task_queue();

		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4f22:	e0 91 5d 2a 	lds	r30, 0x2A5D
    4f26:	f0 91 5e 2a 	lds	r31, 0x2A5E
    4f2a:	30 97       	sbiw	r30, 0x00	; 0
    4f2c:	09 f4       	brne	.+2      	; 0x4f30 <__vector_10+0x54>
    4f2e:	3f c0       	rjmp	.+126    	; 0x4fae <__vector_10+0xd2>
    4f30:	c0 80       	ld	r12, Z
    4f32:	d1 80       	ldd	r13, Z+1	; 0x01
    4f34:	e2 80       	ldd	r14, Z+2	; 0x02
    4f36:	f3 80       	ldd	r15, Z+3	; 0x03
    4f38:	80 91 ef 27 	lds	r24, 0x27EF
    4f3c:	90 91 f0 27 	lds	r25, 0x27F0
    4f40:	e0 e0       	ldi	r30, 0x00	; 0
    4f42:	f4 e0       	ldi	r31, 0x04	; 4
    4f44:	42 85       	ldd	r20, Z+10	; 0x0a
    4f46:	53 85       	ldd	r21, Z+11	; 0x0b
    4f48:	a0 e0       	ldi	r26, 0x00	; 0
    4f4a:	b0 e0       	ldi	r27, 0x00	; 0
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	99 27       	eor	r25, r25
    4f50:	88 27       	eor	r24, r24
    4f52:	60 e0       	ldi	r22, 0x00	; 0
    4f54:	70 e0       	ldi	r23, 0x00	; 0
    4f56:	84 2b       	or	r24, r20
    4f58:	95 2b       	or	r25, r21
    4f5a:	a6 2b       	or	r26, r22
    4f5c:	b7 2b       	or	r27, r23
    4f5e:	c8 16       	cp	r12, r24
    4f60:	d9 06       	cpc	r13, r25
    4f62:	ea 06       	cpc	r14, r26
    4f64:	fb 06       	cpc	r15, r27
    4f66:	18 f5       	brcc	.+70     	; 0x4fae <__vector_10+0xd2>
		{
			// updating RTC.COMP takes 2 RTC clock cycles, so only update the compare value and
			// interrupt if the scheduled_time is more than 2ms away
			if (task_list->scheduled_time > get_time() + 2)
    4f68:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    4f6c:	dc 01       	movw	r26, r24
    4f6e:	cb 01       	movw	r24, r22
    4f70:	02 96       	adiw	r24, 0x02	; 2
    4f72:	a1 1d       	adc	r26, r1
    4f74:	b1 1d       	adc	r27, r1
    4f76:	8c 15       	cp	r24, r12
    4f78:	9d 05       	cpc	r25, r13
    4f7a:	ae 05       	cpc	r26, r14
    4f7c:	bf 05       	cpc	r27, r15
    4f7e:	98 f4       	brcc	.+38     	; 0x4fa6 <__vector_10+0xca>
			{
				while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4f80:	e0 e0       	ldi	r30, 0x00	; 0
    4f82:	f4 e0       	ldi	r31, 0x04	; 4
    4f84:	81 81       	ldd	r24, Z+1	; 0x01
    4f86:	80 fd       	sbrc	r24, 0
    4f88:	fd cf       	rjmp	.-6      	; 0x4f84 <__vector_10+0xa8>
				RTC.COMP = (uint16_t)(task_list->scheduled_time);
    4f8a:	e0 91 5d 2a 	lds	r30, 0x2A5D
    4f8e:	f0 91 5e 2a 	lds	r31, 0x2A5E
    4f92:	80 81       	ld	r24, Z
    4f94:	91 81       	ldd	r25, Z+1	; 0x01
    4f96:	e0 e0       	ldi	r30, 0x00	; 0
    4f98:	f4 e0       	ldi	r31, 0x04	; 4
    4f9a:	84 87       	std	Z+12, r24	; 0x0c
    4f9c:	95 87       	std	Z+13, r25	; 0x0d
				RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    4f9e:	82 81       	ldd	r24, Z+2	; 0x02
    4fa0:	84 60       	ori	r24, 0x04	; 4
    4fa2:	82 83       	std	Z+2, r24	; 0x02
				return; // return from ISR
    4fa4:	02 c0       	rjmp	.+4      	; 0x4faa <__vector_10+0xce>
			// If we get here, that means there's a task to execute in less than 2ms.  Jump to the ISR
			// to handle that.
			else
			{
				//RTC.INTFLAGS |= RTC_COMPIF_bm;
				asm("jmp rtc_compare_isr"); // must include scheduler_asm.S in the project
    4fa6:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <__vector_11>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4faa:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
    4fac:	01 c0       	rjmp	.+2      	; 0x4fb0 <__vector_10+0xd4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4fae:	cf bf       	out	0x3f, r28	; 63
				return;
			}
		}
	}
    4fb0:	ff 91       	pop	r31
    4fb2:	ef 91       	pop	r30
    4fb4:	cf 91       	pop	r28
    4fb6:	bf 91       	pop	r27
    4fb8:	af 91       	pop	r26
    4fba:	9f 91       	pop	r25
    4fbc:	8f 91       	pop	r24
    4fbe:	7f 91       	pop	r23
    4fc0:	6f 91       	pop	r22
    4fc2:	5f 91       	pop	r21
    4fc4:	4f 91       	pop	r20
    4fc6:	3f 91       	pop	r19
    4fc8:	2f 91       	pop	r18
    4fca:	ff 90       	pop	r15
    4fcc:	ef 90       	pop	r14
    4fce:	df 90       	pop	r13
    4fd0:	cf 90       	pop	r12
    4fd2:	0f 90       	pop	r0
    4fd4:	0b be       	out	0x3b, r0	; 59
    4fd6:	0f 90       	pop	r0
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	0f 90       	pop	r0
    4fdc:	1f 90       	pop	r1
    4fde:	18 95       	reti

00004fe0 <send_id>:
{
	printf("My ID is: %04X\r\n",get_droplet_id());
}

void send_id()
{
    4fe0:	08 95       	ret

00004fe2 <collect_rnb_data_wrapper>:

// This function is used so we can make a transparent call to collect_rnb_data with 
// multiple arguments, but still leave the interrupt handler.
void collect_rnb_data_wrapper(void* arg)
{
	uint32_t wrapper_arg = *((uint32_t*)arg);
    4fe2:	fc 01       	movw	r30, r24
    4fe4:	80 81       	ld	r24, Z
    4fe6:	91 81       	ldd	r25, Z+1	; 0x01
    4fe8:	a2 81       	ldd	r26, Z+2	; 0x02
    4fea:	b3 81       	ldd	r27, Z+3	; 0x03
	uint16_t id_val = (wrapper_arg&0xFFFF);
	uint8_t power_val = ((wrapper_arg>>16)&0xFF);
    4fec:	ad 01       	movw	r20, r26
    4fee:	66 27       	eor	r22, r22
    4ff0:	77 27       	eor	r23, r23
	collect_rnb_data(id_val, power_val);
    4ff2:	64 2f       	mov	r22, r20
    4ff4:	5f c8       	rjmp	.-3906   	; 0x40b4 <collect_rnb_data>
    4ff6:	08 95       	ret

00004ff8 <handle_check_collisions>:
		else														printf("\tCommand ( %s ) not recognized.\r\n",command_word);
	}
}

void handle_check_collisions()
{
    4ff8:	ef 92       	push	r14
    4ffa:	ff 92       	push	r15
    4ffc:	0f 93       	push	r16
    4ffe:	1f 93       	push	r17
    5000:	cf 93       	push	r28
    5002:	df 93       	push	r29
	uint8_t dirs = check_collisions();
    5004:	0e 94 ab 10 	call	0x2156	; 0x2156 <check_collisions>
    5008:	c0 e0       	ldi	r28, 0x00	; 0
    500a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t found=0;
    500c:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    500e:	08 2f       	mov	r16, r24
    5010:	10 e0       	ldi	r17, 0x00	; 0
			found=1;
			printf("%hhu",i);
    5012:	0f 2e       	mov	r0, r31
    5014:	f9 e5       	ldi	r31, 0x59	; 89
    5016:	ef 2e       	mov	r14, r31
    5018:	f3 e2       	ldi	r31, 0x23	; 35
    501a:	ff 2e       	mov	r15, r31
    501c:	f0 2d       	mov	r31, r0
void handle_check_collisions()
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    501e:	98 01       	movw	r18, r16
    5020:	0c 2e       	mov	r0, r28
    5022:	02 c0       	rjmp	.+4      	; 0x5028 <handle_check_collisions+0x30>
    5024:	35 95       	asr	r19
    5026:	27 95       	ror	r18
    5028:	0a 94       	dec	r0
    502a:	e2 f7       	brpl	.-8      	; 0x5024 <handle_check_collisions+0x2c>
    502c:	20 ff       	sbrs	r18, 0
    502e:	0b c0       	rjmp	.+22     	; 0x5046 <handle_check_collisions+0x4e>
			found=1;
			printf("%hhu",i);
    5030:	df 93       	push	r29
    5032:	cf 93       	push	r28
    5034:	ff 92       	push	r15
    5036:	ef 92       	push	r14
    5038:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    503c:	0f 90       	pop	r0
    503e:	0f 90       	pop	r0
    5040:	0f 90       	pop	r0
    5042:	0f 90       	pop	r0
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    5044:	91 e0       	ldi	r25, 0x01	; 1
    5046:	21 96       	adiw	r28, 0x01	; 1

void handle_check_collisions()
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    5048:	c6 30       	cpi	r28, 0x06	; 6
    504a:	d1 05       	cpc	r29, r1
    504c:	41 f7       	brne	.-48     	; 0x501e <handle_check_collisions+0x26>
		if(dirs&(1<<i)){
			found=1;
			printf("%hhu",i);
		}
	}
	if(!found) printf("None");
    504e:	91 11       	cpse	r25, r1
    5050:	08 c0       	rjmp	.+16     	; 0x5062 <handle_check_collisions+0x6a>
    5052:	8e e5       	ldi	r24, 0x5E	; 94
    5054:	93 e2       	ldi	r25, 0x23	; 35
    5056:	9f 93       	push	r25
    5058:	8f 93       	push	r24
    505a:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    505e:	0f 90       	pop	r0
    5060:	0f 90       	pop	r0
	printf("\r\n");
    5062:	8f e5       	ldi	r24, 0x5F	; 95
    5064:	95 e2       	ldi	r25, 0x25	; 37
    5066:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
}
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	1f 91       	pop	r17
    5070:	0f 91       	pop	r16
    5072:	ff 90       	pop	r15
    5074:	ef 90       	pop	r14
    5076:	08 95       	ret

00005078 <handle_move_steps>:

void handle_move_steps(char* command_args)
{
    5078:	ff 92       	push	r15
    507a:	0f 93       	push	r16
    507c:	1f 93       	push	r17
    507e:	cf 93       	push	r28
    5080:	df 93       	push	r29
    5082:	1f 92       	push	r1
    5084:	1f 92       	push	r1
    5086:	cd b7       	in	r28, 0x3d	; 61
    5088:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    508a:	20 e2       	ldi	r18, 0x20	; 32
    508c:	30 e0       	ldi	r19, 0x00	; 0
    508e:	29 83       	std	Y+1, r18	; 0x01
    5090:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5092:	be 01       	movw	r22, r28
    5094:	6f 5f       	subi	r22, 0xFF	; 255
    5096:	7f 4f       	sbci	r23, 0xFF	; 255
    5098:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	uint8_t direction = token[0]-'0';
    509c:	fc 01       	movw	r30, r24
    509e:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    50a0:	be 01       	movw	r22, r28
    50a2:	6f 5f       	subi	r22, 0xFF	; 255
    50a4:	7f 4f       	sbci	r23, 0xFF	; 255
    50a6:	80 e0       	ldi	r24, 0x00	; 0
    50a8:	90 e0       	ldi	r25, 0x00	; 0
    50aa:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    50ae:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    50b2:	8c 01       	movw	r16, r24
	if (num_steps > 0)
    50b4:	00 97       	sbiw	r24, 0x00	; 0
    50b6:	f1 f0       	breq	.+60     	; 0x50f4 <handle_move_steps+0x7c>
void handle_move_steps(char* command_args)
{
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    50b8:	f0 ed       	ldi	r31, 0xD0	; 208
    50ba:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0)
	{
		set_rgb(0,0,200);		
    50bc:	48 ec       	ldi	r20, 0xC8	; 200
    50be:	60 e0       	ldi	r22, 0x00	; 0
    50c0:	80 e0       	ldi	r24, 0x00	; 0
    50c2:	70 d8       	rcall	.-3872   	; 0x41a4 <set_rgb>
		printf("walk direction %u, num_steps %u\r\n", direction, num_steps);	
    50c4:	1f 93       	push	r17
    50c6:	0f 93       	push	r16
    50c8:	1f 92       	push	r1
    50ca:	ff 92       	push	r15
    50cc:	23 e6       	ldi	r18, 0x63	; 99
    50ce:	33 e2       	ldi	r19, 0x23	; 35
    50d0:	3f 93       	push	r19
    50d2:	2f 93       	push	r18
    50d4:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
		move_steps(direction, num_steps);
    50d8:	b8 01       	movw	r22, r16
    50da:	8f 2d       	mov	r24, r15
    50dc:	0e 94 ed 11 	call	0x23da	; 0x23da <move_steps>
		set_rgb(0,0,0);
    50e0:	40 e0       	ldi	r20, 0x00	; 0
    50e2:	60 e0       	ldi	r22, 0x00	; 0
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	5e d8       	rcall	.-3908   	; 0x41a4 <set_rgb>
    50e8:	0f 90       	pop	r0
    50ea:	0f 90       	pop	r0
    50ec:	0f 90       	pop	r0
    50ee:	0f 90       	pop	r0
    50f0:	0f 90       	pop	r0
    50f2:	0f 90       	pop	r0
	}	
}	
    50f4:	0f 90       	pop	r0
    50f6:	0f 90       	pop	r0
    50f8:	df 91       	pop	r29
    50fa:	cf 91       	pop	r28
    50fc:	1f 91       	pop	r17
    50fe:	0f 91       	pop	r16
    5100:	ff 90       	pop	r15
    5102:	08 95       	ret

00005104 <handle_walk>:

void handle_walk(char* command_args)
{	
    5104:	1f 93       	push	r17
    5106:	cf 93       	push	r28
    5108:	df 93       	push	r29
    510a:	1f 92       	push	r1
    510c:	1f 92       	push	r1
    510e:	cd b7       	in	r28, 0x3d	; 61
    5110:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5112:	20 e2       	ldi	r18, 0x20	; 32
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	29 83       	std	Y+1, r18	; 0x01
    5118:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    511a:	be 01       	movw	r22, r28
    511c:	6f 5f       	subi	r22, 0xFF	; 255
    511e:	7f 4f       	sbci	r23, 0xFF	; 255
    5120:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	uint8_t direction = token[0]-'0';
    5124:	fc 01       	movw	r30, r24
    5126:	10 81       	ld	r17, Z
    5128:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    512a:	be 01       	movw	r22, r28
    512c:	6f 5f       	subi	r22, 0xFF	; 255
    512e:	7f 4f       	sbci	r23, 0xFF	; 255
    5130:	80 e0       	ldi	r24, 0x00	; 0
    5132:	90 e0       	ldi	r25, 0x00	; 0
    5134:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    5138:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    513c:	bc 01       	movw	r22, r24
	
	walk(direction, distance_mm);
    513e:	81 2f       	mov	r24, r17
    5140:	0e 94 a8 13 	call	0x2750	; 0x2750 <walk>
}
    5144:	0f 90       	pop	r0
    5146:	0f 90       	pop	r0
    5148:	df 91       	pop	r29
    514a:	cf 91       	pop	r28
    514c:	1f 91       	pop	r17
    514e:	08 95       	ret

00005150 <handle_get_rgb>:

void handle_get_rgb()
{
    5150:	cf 93       	push	r28
    5152:	df 93       	push	r29
    5154:	00 d0       	rcall	.+0      	; 0x5156 <handle_get_rgb+0x6>
    5156:	cd b7       	in	r28, 0x3d	; 61
    5158:	de b7       	in	r29, 0x3e	; 62
	uint8_t r, g, b;
	get_rgb_sensors(&r, &g, &b);
    515a:	ae 01       	movw	r20, r28
    515c:	4d 5f       	subi	r20, 0xFD	; 253
    515e:	5f 4f       	sbci	r21, 0xFF	; 255
    5160:	be 01       	movw	r22, r28
    5162:	6e 5f       	subi	r22, 0xFE	; 254
    5164:	7f 4f       	sbci	r23, 0xFF	; 255
    5166:	ce 01       	movw	r24, r28
    5168:	01 96       	adiw	r24, 0x01	; 1
    516a:	f3 da       	rcall	.-2586   	; 0x4752 <get_rgb_sensors>
	printf("r: %hu, g: %hu, b: %hu\r\n", r, g, b);
    516c:	8b 81       	ldd	r24, Y+3	; 0x03
    516e:	1f 92       	push	r1
    5170:	8f 93       	push	r24
    5172:	8a 81       	ldd	r24, Y+2	; 0x02
    5174:	1f 92       	push	r1
    5176:	8f 93       	push	r24
    5178:	89 81       	ldd	r24, Y+1	; 0x01
    517a:	1f 92       	push	r1
    517c:	8f 93       	push	r24
    517e:	85 e8       	ldi	r24, 0x85	; 133
    5180:	93 e2       	ldi	r25, 0x23	; 35
    5182:	9f 93       	push	r25
    5184:	8f 93       	push	r24
    5186:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    518a:	cd bf       	out	0x3d, r28	; 61
    518c:	de bf       	out	0x3e, r29	; 62
}
    518e:	23 96       	adiw	r28, 0x03	; 3
    5190:	cd bf       	out	0x3d, r28	; 61
    5192:	de bf       	out	0x3e, r29	; 62
    5194:	df 91       	pop	r29
    5196:	cf 91       	pop	r28
    5198:	08 95       	ret

0000519a <handle_set_ir>:

void handle_set_ir(char* command_args)
{
    519a:	cf 93       	push	r28
    519c:	df 93       	push	r29
    519e:	1f 92       	push	r1
    51a0:	1f 92       	push	r1
    51a2:	cd b7       	in	r28, 0x3d	; 61
    51a4:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    51a6:	20 e2       	ldi	r18, 0x20	; 32
    51a8:	30 e0       	ldi	r19, 0x00	; 0
    51aa:	29 83       	std	Y+1, r18	; 0x01
    51ac:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    51ae:	be 01       	movw	r22, r28
    51b0:	6f 5f       	subi	r22, 0xFF	; 255
    51b2:	7f 4f       	sbci	r23, 0xFF	; 255
    51b4:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    51b8:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
	
	set_all_ir_powers(ir_val);
    51bc:	0e 94 55 04 	call	0x8aa	; 0x8aa <set_all_ir_powers>
}
    51c0:	0f 90       	pop	r0
    51c2:	0f 90       	pop	r0
    51c4:	df 91       	pop	r29
    51c6:	cf 91       	pop	r28
    51c8:	08 95       	ret

000051ca <handle_stop_walk>:

void handle_stop_walk()
{
	set_rgb(180,0,0);
    51ca:	40 e0       	ldi	r20, 0x00	; 0
    51cc:	60 e0       	ldi	r22, 0x00	; 0
    51ce:	84 eb       	ldi	r24, 0xB4	; 180
    51d0:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
	stop(0);
    51d4:	80 e0       	ldi	r24, 0x00	; 0
    51d6:	90 e0       	ldi	r25, 0x00	; 0
    51d8:	0e 94 be 11 	call	0x237c	; 0x237c <stop>
	set_rgb(0,0,0);
    51dc:	40 e0       	ldi	r20, 0x00	; 0
    51de:	60 e0       	ldi	r22, 0x00	; 0
    51e0:	80 e0       	ldi	r24, 0x00	; 0
    51e2:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <set_rgb>
    51e6:	08 95       	ret

000051e8 <handle_set_motors>:
	//
	//theta = val;
//}

void handle_set_motors(char* command_args)
{	
    51e8:	0f 93       	push	r16
    51ea:	1f 93       	push	r17
    51ec:	cf 93       	push	r28
    51ee:	df 93       	push	r29
    51f0:	1f 92       	push	r1
    51f2:	1f 92       	push	r1
    51f4:	cd b7       	in	r28, 0x3d	; 61
    51f6:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    51f8:	20 e2       	ldi	r18, 0x20	; 32
    51fa:	30 e0       	ldi	r19, 0x00	; 0
    51fc:	29 83       	std	Y+1, r18	; 0x01
    51fe:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5200:	be 01       	movw	r22, r28
    5202:	6f 5f       	subi	r22, 0xFF	; 255
    5204:	7f 4f       	sbci	r23, 0xFF	; 255
    5206:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	if(token==NULL){ printf("strtok returned NULL on direction.\r\n"); return;}
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	29 f4       	brne	.+10     	; 0x5218 <handle_set_motors+0x30>
    520e:	8e e9       	ldi	r24, 0x9E	; 158
    5210:	93 e2       	ldi	r25, 0x23	; 35
    5212:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    5216:	79 c0       	rjmp	.+242    	; 0x530a <handle_set_motors+0x122>
	uint8_t direction = atoi(token);
    5218:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    521c:	8c 01       	movw	r16, r24
	if(direction> 7){ printf("Bad direction. Got: %hhu.\r\n", direction); return;}
    521e:	88 30       	cpi	r24, 0x08	; 8
    5220:	70 f0       	brcs	.+28     	; 0x523e <handle_set_motors+0x56>
    5222:	11 27       	eor	r17, r17
    5224:	1f 93       	push	r17
    5226:	0f 93       	push	r16
    5228:	82 ec       	ldi	r24, 0xC2	; 194
    522a:	93 e2       	ldi	r25, 0x23	; 35
    522c:	9f 93       	push	r25
    522e:	8f 93       	push	r24
    5230:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    5234:	0f 90       	pop	r0
    5236:	0f 90       	pop	r0
    5238:	0f 90       	pop	r0
    523a:	0f 90       	pop	r0
    523c:	66 c0       	rjmp	.+204    	; 0x530a <handle_set_motors+0x122>

	token = strtok(NULL,delim);
    523e:	be 01       	movw	r22, r28
    5240:	6f 5f       	subi	r22, 0xFF	; 255
    5242:	7f 4f       	sbci	r23, 0xFF	; 255
    5244:	80 e0       	ldi	r24, 0x00	; 0
    5246:	90 e0       	ldi	r25, 0x00	; 0
    5248:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	if(token==NULL){ printf("strtok returned NULL on first val.\r\n"); return;}	
    524c:	00 97       	sbiw	r24, 0x00	; 0
    524e:	29 f4       	brne	.+10     	; 0x525a <handle_set_motors+0x72>
    5250:	8e ed       	ldi	r24, 0xDE	; 222
    5252:	93 e2       	ldi	r25, 0x23	; 35
    5254:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    5258:	58 c0       	rjmp	.+176    	; 0x530a <handle_set_motors+0x122>
	motor_adjusts[direction][0] = atoi(token);
    525a:	11 27       	eor	r17, r17
    525c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    5260:	f8 01       	movw	r30, r16
    5262:	ee 0f       	add	r30, r30
    5264:	ff 1f       	adc	r31, r31
    5266:	e0 0f       	add	r30, r16
    5268:	f1 1f       	adc	r31, r17
    526a:	ee 0f       	add	r30, r30
    526c:	ff 1f       	adc	r31, r31
    526e:	e7 5d       	subi	r30, 0xD7	; 215
    5270:	f5 4d       	sbci	r31, 0xD5	; 213
    5272:	80 83       	st	Z, r24
    5274:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    5276:	be 01       	movw	r22, r28
    5278:	6f 5f       	subi	r22, 0xFF	; 255
    527a:	7f 4f       	sbci	r23, 0xFF	; 255
    527c:	80 e0       	ldi	r24, 0x00	; 0
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	if(token==NULL){ printf("strtok returned NULL on second val.\r\n"); return;}
    5284:	00 97       	sbiw	r24, 0x00	; 0
    5286:	29 f4       	brne	.+10     	; 0x5292 <handle_set_motors+0xaa>
    5288:	82 e0       	ldi	r24, 0x02	; 2
    528a:	94 e2       	ldi	r25, 0x24	; 36
    528c:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    5290:	3c c0       	rjmp	.+120    	; 0x530a <handle_set_motors+0x122>
	motor_adjusts[direction][1] = atoi(token);
    5292:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    5296:	f8 01       	movw	r30, r16
    5298:	ee 0f       	add	r30, r30
    529a:	ff 1f       	adc	r31, r31
    529c:	e0 0f       	add	r30, r16
    529e:	f1 1f       	adc	r31, r17
    52a0:	ee 0f       	add	r30, r30
    52a2:	ff 1f       	adc	r31, r31
    52a4:	e7 5d       	subi	r30, 0xD7	; 215
    52a6:	f5 4d       	sbci	r31, 0xD5	; 213
    52a8:	82 83       	std	Z+2, r24	; 0x02
    52aa:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    52ac:	be 01       	movw	r22, r28
    52ae:	6f 5f       	subi	r22, 0xFF	; 255
    52b0:	7f 4f       	sbci	r23, 0xFF	; 255
    52b2:	80 e0       	ldi	r24, 0x00	; 0
    52b4:	90 e0       	ldi	r25, 0x00	; 0
    52b6:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	if(token==NULL){ printf("strtok returned NULL on third val.\r\n"); return;}
    52ba:	00 97       	sbiw	r24, 0x00	; 0
    52bc:	29 f4       	brne	.+10     	; 0x52c8 <handle_set_motors+0xe0>
    52be:	87 e2       	ldi	r24, 0x27	; 39
    52c0:	94 e2       	ldi	r25, 0x24	; 36
    52c2:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    52c6:	21 c0       	rjmp	.+66     	; 0x530a <handle_set_motors+0x122>
	motor_adjusts[direction][2] = atoi(token);	
    52c8:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    52cc:	f8 01       	movw	r30, r16
    52ce:	ee 0f       	add	r30, r30
    52d0:	ff 1f       	adc	r31, r31
    52d2:	e0 0f       	add	r30, r16
    52d4:	f1 1f       	adc	r31, r17
    52d6:	ee 0f       	add	r30, r30
    52d8:	ff 1f       	adc	r31, r31
    52da:	e7 5d       	subi	r30, 0xD7	; 215
    52dc:	f5 4d       	sbci	r31, 0xD5	; 213
    52de:	84 83       	std	Z+4, r24	; 0x04
    52e0:	95 83       	std	Z+5, r25	; 0x05

	printf("Got set_motors command. direction: %hhu, vals: (%d, %d, %d)\r\n", direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    52e2:	9f 93       	push	r25
    52e4:	8f 93       	push	r24
    52e6:	83 81       	ldd	r24, Z+3	; 0x03
    52e8:	8f 93       	push	r24
    52ea:	82 81       	ldd	r24, Z+2	; 0x02
    52ec:	8f 93       	push	r24
    52ee:	81 81       	ldd	r24, Z+1	; 0x01
    52f0:	8f 93       	push	r24
    52f2:	80 81       	ld	r24, Z
    52f4:	8f 93       	push	r24
    52f6:	1f 93       	push	r17
    52f8:	0f 93       	push	r16
    52fa:	8b e4       	ldi	r24, 0x4B	; 75
    52fc:	94 e2       	ldi	r25, 0x24	; 36
    52fe:	9f 93       	push	r25
    5300:	8f 93       	push	r24
    5302:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    5306:	cd bf       	out	0x3d, r28	; 61
    5308:	de bf       	out	0x3e, r29	; 62
}
    530a:	0f 90       	pop	r0
    530c:	0f 90       	pop	r0
    530e:	df 91       	pop	r29
    5310:	cf 91       	pop	r28
    5312:	1f 91       	pop	r17
    5314:	0f 91       	pop	r16
    5316:	08 95       	ret

00005318 <handle_set_mm_per_kilostep>:

void handle_set_mm_per_kilostep(char* command_args)
{
    5318:	1f 93       	push	r17
    531a:	cf 93       	push	r28
    531c:	df 93       	push	r29
    531e:	1f 92       	push	r1
    5320:	1f 92       	push	r1
    5322:	cd b7       	in	r28, 0x3d	; 61
    5324:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5326:	20 e2       	ldi	r18, 0x20	; 32
    5328:	30 e0       	ldi	r19, 0x00	; 0
    532a:	29 83       	std	Y+1, r18	; 0x01
    532c:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    532e:	be 01       	movw	r22, r28
    5330:	6f 5f       	subi	r22, 0xFF	; 255
    5332:	7f 4f       	sbci	r23, 0xFF	; 255
    5334:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	uint8_t direction = token[0]-'0';
    5338:	fc 01       	movw	r30, r24
    533a:	10 81       	ld	r17, Z
    533c:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    533e:	be 01       	movw	r22, r28
    5340:	6f 5f       	subi	r22, 0xFF	; 255
    5342:	7f 4f       	sbci	r23, 0xFF	; 255
    5344:	80 e0       	ldi	r24, 0x00	; 0
    5346:	90 e0       	ldi	r25, 0x00	; 0
    5348:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    534c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    5350:	bc 01       	movw	r22, r24

	set_mm_per_kilostep(direction, mm_per_kilostep);
    5352:	81 2f       	mov	r24, r17
    5354:	0e 94 f5 13 	call	0x27ea	; 0x27ea <set_mm_per_kilostep>
	
}
    5358:	0f 90       	pop	r0
    535a:	0f 90       	pop	r0
    535c:	df 91       	pop	r29
    535e:	cf 91       	pop	r28
    5360:	1f 91       	pop	r17
    5362:	08 95       	ret

00005364 <handle_rnb_broadcast>:
/* This tells the droplet that it should tell other droplets nearby their rnb to it.
 * In other words, this tells nearby droplets to listen, and then performs an ir_range_blast.
 */
void handle_rnb_broadcast()
{
	schedule_task(5,broadcast_rnb_data,NULL);
    5364:	20 e0       	ldi	r18, 0x00	; 0
    5366:	30 e0       	ldi	r19, 0x00	; 0
    5368:	45 e1       	ldi	r20, 0x15	; 21
    536a:	5a e1       	ldi	r21, 0x1A	; 26
    536c:	65 e0       	ldi	r22, 0x05	; 5
    536e:	70 e0       	ldi	r23, 0x00	; 0
    5370:	80 e0       	ldi	r24, 0x00	; 0
    5372:	90 e0       	ldi	r25, 0x00	; 0
    5374:	d4 ca       	rjmp	.-2648   	; 0x491e <schedule_task>
    5376:	08 95       	ret

00005378 <handle_rnb_collect>:

/* This tells the droplet that it should ask nearby droplets to do an 
 * ir_range_blast so it can learn their rnb.
 */
void handle_rnb_collect(char* command_args)
{
    5378:	0f 93       	push	r16
    537a:	1f 93       	push	r17
    537c:	cf 93       	push	r28
    537e:	df 93       	push	r29
    5380:	00 d0       	rcall	.+0      	; 0x5382 <handle_rnb_collect+0xa>
    5382:	00 d0       	rcall	.+0      	; 0x5384 <handle_rnb_collect+0xc>
    5384:	cd b7       	in	r28, 0x3d	; 61
    5386:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5388:	20 e2       	ldi	r18, 0x20	; 32
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	29 83       	std	Y+1, r18	; 0x01
    538e:	3a 83       	std	Y+2, r19	; 0x02
		
	uint16_t id_val = atoi(strtok(command_args, delim));
    5390:	be 01       	movw	r22, r28
    5392:	6f 5f       	subi	r22, 0xFF	; 255
    5394:	7f 4f       	sbci	r23, 0xFF	; 255
    5396:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
    539a:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    539e:	8c 01       	movw	r16, r24
	uint8_t power_val = atoi(strtok(NULL, delim));
    53a0:	be 01       	movw	r22, r28
    53a2:	6f 5f       	subi	r22, 0xFF	; 255
    53a4:	7f 4f       	sbci	r23, 0xFF	; 255
    53a6:	80 e0       	ldi	r24, 0x00	; 0
    53a8:	90 e0       	ldi	r25, 0x00	; 0
    53aa:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
    53ae:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
	
	uint32_t wrapper_arg = (((uint32_t)id_val)|(((uint32_t)power_val)<<16));
    53b2:	a8 01       	movw	r20, r16
    53b4:	60 e0       	ldi	r22, 0x00	; 0
    53b6:	70 e0       	ldi	r23, 0x00	; 0
    53b8:	68 2b       	or	r22, r24
    53ba:	4b 83       	std	Y+3, r20	; 0x03
    53bc:	5c 83       	std	Y+4, r21	; 0x04
    53be:	6d 83       	std	Y+5, r22	; 0x05
    53c0:	7e 83       	std	Y+6, r23	; 0x06
	schedule_task(5,collect_rnb_data_wrapper, (void*)&wrapper_arg);
    53c2:	9e 01       	movw	r18, r28
    53c4:	2d 5f       	subi	r18, 0xFD	; 253
    53c6:	3f 4f       	sbci	r19, 0xFF	; 255
    53c8:	41 ef       	ldi	r20, 0xF1	; 241
    53ca:	57 e2       	ldi	r21, 0x27	; 39
    53cc:	65 e0       	ldi	r22, 0x05	; 5
    53ce:	70 e0       	ldi	r23, 0x00	; 0
    53d0:	80 e0       	ldi	r24, 0x00	; 0
    53d2:	90 e0       	ldi	r25, 0x00	; 0
    53d4:	a4 da       	rcall	.-2744   	; 0x491e <schedule_task>
}
    53d6:	26 96       	adiw	r28, 0x06	; 6
    53d8:	cd bf       	out	0x3d, r28	; 61
    53da:	de bf       	out	0x3e, r29	; 62
    53dc:	df 91       	pop	r29
    53de:	cf 91       	pop	r28
    53e0:	1f 91       	pop	r17
    53e2:	0f 91       	pop	r16
    53e4:	08 95       	ret

000053e6 <handle_rnb_transmit>:

/* This should only be called when another droplet asks this droplet 
 * to do an ir_range_blast (ie., by using handle_rnb_collect).
 */
void handle_rnb_transmit(char* command_args)
{
    53e6:	0f 93       	push	r16
    53e8:	1f 93       	push	r17
    53ea:	cf 93       	push	r28
    53ec:	df 93       	push	r29
    53ee:	ec 01       	movw	r28, r24
	uint32_t time_since_arrival = (get_time()-cmd_arrival_time+6);
    53f0:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    53f4:	00 91 59 2a 	lds	r16, 0x2A59
    53f8:	10 91 5a 2a 	lds	r17, 0x2A5A
    53fc:	20 91 5b 2a 	lds	r18, 0x2A5B
    5400:	30 91 5c 2a 	lds	r19, 0x2A5C
    5404:	ab 01       	movw	r20, r22
    5406:	bc 01       	movw	r22, r24
    5408:	40 1b       	sub	r20, r16
    540a:	51 0b       	sbc	r21, r17
    540c:	62 0b       	sbc	r22, r18
    540e:	73 0b       	sbc	r23, r19
    5410:	4a 5f       	subi	r20, 0xFA	; 250
    5412:	5f 4f       	sbci	r21, 0xFF	; 255
    5414:	6f 4f       	sbci	r22, 0xFF	; 255
    5416:	7f 4f       	sbci	r23, 0xFF	; 255
	if(time_since_arrival<POST_MESSAGE_DELAY) delay_ms(POST_MESSAGE_DELAY - time_since_arrival);
    5418:	4d 35       	cpi	r20, 0x5D	; 93
    541a:	51 05       	cpc	r21, r1
    541c:	61 05       	cpc	r22, r1
    541e:	71 05       	cpc	r23, r1
    5420:	28 f4       	brcc	.+10     	; 0x542c <handle_rnb_transmit+0x46>
    5422:	8d e5       	ldi	r24, 0x5D	; 93
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	84 1b       	sub	r24, r20
    5428:	95 0b       	sbc	r25, r21
    542a:	53 da       	rcall	.-2906   	; 0x48d2 <delay_ms>
	uint16_t power = (uint16_t)command_args[0] + 2;
    542c:	88 81       	ld	r24, Y
	ir_range_blast(power);
    542e:	8e 5f       	subi	r24, 0xFE	; 254
    5430:	0e 94 d6 19 	call	0x33ac	; 0x33ac <ir_range_blast>
}
    5434:	df 91       	pop	r29
    5436:	cf 91       	pop	r28
    5438:	1f 91       	pop	r17
    543a:	0f 91       	pop	r16
    543c:	08 95       	ret

0000543e <handle_rnb_receive>:

/* This should only be called when another droplet is about to 
 * broadcast its rnb_data (ie., by using handle_rnb_broadcast()).
 */
void handle_rnb_receive()
{
    543e:	0f 93       	push	r16
    5440:	1f 93       	push	r17
	uint32_t time_since_arrival = (get_time()-cmd_arrival_time+5);
    5442:	0e 94 31 02 	call	0x462	; 0x462 <get_time>
    5446:	00 91 59 2a 	lds	r16, 0x2A59
    544a:	10 91 5a 2a 	lds	r17, 0x2A5A
    544e:	20 91 5b 2a 	lds	r18, 0x2A5B
    5452:	30 91 5c 2a 	lds	r19, 0x2A5C
    5456:	ab 01       	movw	r20, r22
    5458:	bc 01       	movw	r22, r24
    545a:	40 1b       	sub	r20, r16
    545c:	51 0b       	sbc	r21, r17
    545e:	62 0b       	sbc	r22, r18
    5460:	73 0b       	sbc	r23, r19
    5462:	4b 5f       	subi	r20, 0xFB	; 251
    5464:	5f 4f       	sbci	r21, 0xFF	; 255
    5466:	6f 4f       	sbci	r22, 0xFF	; 255
    5468:	7f 4f       	sbci	r23, 0xFF	; 255
	if(time_since_arrival<POST_MESSAGE_DELAY) delay_ms(POST_MESSAGE_DELAY - time_since_arrival);	
    546a:	4d 35       	cpi	r20, 0x5D	; 93
    546c:	51 05       	cpc	r21, r1
    546e:	61 05       	cpc	r22, r1
    5470:	71 05       	cpc	r23, r1
    5472:	28 f4       	brcc	.+10     	; 0x547e <handle_rnb_receive+0x40>
    5474:	8d e5       	ldi	r24, 0x5D	; 93
    5476:	90 e0       	ldi	r25, 0x00	; 0
    5478:	84 1b       	sub	r24, r20
    547a:	95 0b       	sbc	r25, r21
    547c:	2a da       	rcall	.-2988   	; 0x48d2 <delay_ms>
	receive_rnb_data();
    547e:	0e 94 35 18 	call	0x306a	; 0x306a <receive_rnb_data>
	rnb_updated = 0;
    5482:	10 92 ec 28 	sts	0x28EC, r1
	//last_good_rnb.id_number = (uint16_t)last_command_source_id; TODO: re-add this.
}
    5486:	1f 91       	pop	r17
    5488:	0f 91       	pop	r16
    548a:	08 95       	ret

0000548c <handle_set_led>:

void handle_set_led(char* command_args)
{
    548c:	6f 92       	push	r6
    548e:	7f 92       	push	r7
    5490:	8f 92       	push	r8
    5492:	9f 92       	push	r9
    5494:	af 92       	push	r10
    5496:	bf 92       	push	r11
    5498:	cf 92       	push	r12
    549a:	df 92       	push	r13
    549c:	ef 92       	push	r14
    549e:	ff 92       	push	r15
    54a0:	0f 93       	push	r16
    54a2:	1f 93       	push	r17
    54a4:	cf 93       	push	r28
    54a6:	df 93       	push	r29
    54a8:	1f 92       	push	r1
    54aa:	1f 92       	push	r1
    54ac:	cd b7       	in	r28, 0x3d	; 61
    54ae:	de b7       	in	r29, 0x3e	; 62
    54b0:	78 2e       	mov	r7, r24
    54b2:	69 2e       	mov	r6, r25
	const char delim[2] = " ";
    54b4:	80 e2       	ldi	r24, 0x20	; 32
    54b6:	90 e0       	ldi	r25, 0x00	; 0
    54b8:	89 83       	std	Y+1, r24	; 0x01
    54ba:	9a 83       	std	Y+2, r25	; 0x02
	char* token;

	uint8_t successful_read = 0;
	
	char* colors = strtok(command_args,delim);
    54bc:	be 01       	movw	r22, r28
    54be:	6f 5f       	subi	r22, 0xFF	; 255
    54c0:	7f 4f       	sbci	r23, 0xFF	; 255
    54c2:	87 2d       	mov	r24, r7
    54c4:	96 2d       	mov	r25, r6
    54c6:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
    54ca:	7c 01       	movw	r14, r24
	
	int length = strlen(colors);
    54cc:	fc 01       	movw	r30, r24
    54ce:	01 90       	ld	r0, Z+
    54d0:	00 20       	and	r0, r0
    54d2:	e9 f7       	brne	.-6      	; 0x54ce <handle_set_led+0x42>
    54d4:	31 97       	sbiw	r30, 0x01	; 1
    54d6:	6f 01       	movw	r12, r30
    54d8:	c8 1a       	sub	r12, r24
    54da:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0)
    54dc:	69 e8       	ldi	r22, 0x89	; 137
    54de:	74 e2       	ldi	r23, 0x24	; 36
    54e0:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    54e4:	89 2b       	or	r24, r25
    54e6:	21 f0       	breq	.+8      	; 0x54f0 <handle_set_led+0x64>
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    54e8:	1c 14       	cp	r1, r12
    54ea:	1d 04       	cpc	r1, r13
    54ec:	24 f1       	brlt	.+72     	; 0x5536 <handle_set_led+0xaa>
    54ee:	5c c0       	rjmp	.+184    	; 0x55a8 <handle_set_led+0x11c>

	if(strcmp(colors,"hsv")==0)
	{
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    54f0:	be 01       	movw	r22, r28
    54f2:	6f 5f       	subi	r22, 0xFF	; 255
    54f4:	7f 4f       	sbci	r23, 0xFF	; 255
    54f6:	80 e0       	ldi	r24, 0x00	; 0
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
		hVal = atoi(token);
    54fe:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    5502:	8c 01       	movw	r16, r24
		token = strtok(NULL,delim);
    5504:	be 01       	movw	r22, r28
    5506:	6f 5f       	subi	r22, 0xFF	; 255
    5508:	7f 4f       	sbci	r23, 0xFF	; 255
    550a:	80 e0       	ldi	r24, 0x00	; 0
    550c:	90 e0       	ldi	r25, 0x00	; 0
    550e:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
		sVal = atoi(token);
    5512:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    5516:	f8 2e       	mov	r15, r24
		token = strtok(NULL,delim);	
    5518:	be 01       	movw	r22, r28
    551a:	6f 5f       	subi	r22, 0xFF	; 255
    551c:	7f 4f       	sbci	r23, 0xFF	; 255
    551e:	80 e0       	ldi	r24, 0x00	; 0
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
		vVal = atoi(token);
    5526:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
		set_hsv(hVal,sVal,vVal);
    552a:	48 2f       	mov	r20, r24
    552c:	6f 2d       	mov	r22, r15
    552e:	c8 01       	movw	r24, r16
    5530:	0e 94 64 22 	call	0x44c8	; 0x44c8 <set_hsv>
    5534:	51 c0       	rjmp	.+162    	; 0x55d8 <handle_set_led+0x14c>
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    5536:	00 e0       	ldi	r16, 0x00	; 0
    5538:	10 e0       	ldi	r17, 0x00	; 0
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    553a:	0f 2e       	mov	r0, r31
    553c:	f0 e4       	ldi	r31, 0x40	; 64
    553e:	af 2e       	mov	r10, r31
    5540:	f9 e0       	ldi	r31, 0x09	; 9
    5542:	bf 2e       	mov	r11, r31
    5544:	f0 2d       	mov	r31, r0
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    5546:	0f 2e       	mov	r0, r31
    5548:	f0 e4       	ldi	r31, 0x40	; 64
    554a:	8f 2e       	mov	r8, r31
    554c:	fa e0       	ldi	r31, 0x0A	; 10
    554e:	9f 2e       	mov	r9, r31
    5550:	f0 2d       	mov	r31, r0
		{
			token = strtok(NULL,delim);
    5552:	be 01       	movw	r22, r28
    5554:	6f 5f       	subi	r22, 0xFF	; 255
    5556:	7f 4f       	sbci	r23, 0xFF	; 255
    5558:	80 e0       	ldi	r24, 0x00	; 0
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	0e 94 70 38 	call	0x70e0	; 0x70e0 <strtok>
			if(colors[i]=='r')
    5560:	f7 01       	movw	r30, r14
    5562:	21 91       	ld	r18, Z+
    5564:	7f 01       	movw	r14, r30
    5566:	22 37       	cpi	r18, 0x72	; 114
    5568:	39 f4       	brne	.+14     	; 0x5578 <handle_set_led+0xec>
			{
				set_red_led(atoi(token));
    556a:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    556e:	99 27       	eor	r25, r25

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    5570:	f4 01       	movw	r30, r8
    5572:	82 af       	std	Z+58, r24	; 0x3a
    5574:	93 af       	std	Z+59, r25	; 0x3b
    5576:	12 c0       	rjmp	.+36     	; 0x559c <handle_set_led+0x110>
				successful_read=1;
			}
			else if(colors[i]=='g')
    5578:	27 36       	cpi	r18, 0x67	; 103
    557a:	39 f4       	brne	.+14     	; 0x558a <handle_set_led+0xfe>
			{
				set_green_led(atoi(token));
    557c:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    5580:	99 27       	eor	r25, r25

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    5582:	f4 01       	movw	r30, r8
    5584:	80 af       	std	Z+56, r24	; 0x38
    5586:	91 af       	std	Z+57, r25	; 0x39
    5588:	09 c0       	rjmp	.+18     	; 0x559c <handle_set_led+0x110>
				successful_read=1;
			}
			else if(colors[i]=='b')
    558a:	22 36       	cpi	r18, 0x62	; 98
    558c:	69 f4       	brne	.+26     	; 0x55a8 <handle_set_led+0x11c>
			{
				set_blue_led(atoi(token));
    558e:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <atoi>
    5592:	9c 01       	movw	r18, r24
    5594:	33 27       	eor	r19, r19
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    5596:	f5 01       	movw	r30, r10
    5598:	20 af       	std	Z+56, r18	; 0x38
    559a:	31 af       	std	Z+57, r19	; 0x39
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    559c:	0f 5f       	subi	r16, 0xFF	; 255
    559e:	1f 4f       	sbci	r17, 0xFF	; 255
    55a0:	c0 16       	cp	r12, r16
    55a2:	d1 06       	cpc	r13, r17
    55a4:	b1 f6       	brne	.-84     	; 0x5552 <handle_set_led+0xc6>
    55a6:	18 c0       	rjmp	.+48     	; 0x55d8 <handle_set_led+0x14c>
		}
	}

	if(successful_read!=1)
	{
		printf("\tGot command set_led, but arguments (%s) were invalid. Format should be:\r\n",command_args);
    55a8:	6f 92       	push	r6
    55aa:	7f 92       	push	r7
    55ac:	8d e8       	ldi	r24, 0x8D	; 141
    55ae:	94 e2       	ldi	r25, 0x24	; 36
    55b0:	9f 93       	push	r25
    55b2:	8f 93       	push	r24
    55b4:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
		printf("\t Letters r,g,b, in any order, followed by values 0-255, in same \r\n");
    55b8:	88 ed       	ldi	r24, 0xD8	; 216
    55ba:	94 e2       	ldi	r25, 0x24	; 36
    55bc:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
		printf("\t order, indicating the brightness of the associated LEDs. Example: \r\n");
    55c0:	8b e1       	ldi	r24, 0x1B	; 27
    55c2:	95 e2       	ldi	r25, 0x25	; 37
    55c4:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
		printf("\t \"set_led bgr 5 30 0\" gives a bluish green.\r\n");
    55c8:	81 e6       	ldi	r24, 0x61	; 97
    55ca:	95 e2       	ldi	r25, 0x25	; 37
    55cc:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
    55d0:	0f 90       	pop	r0
    55d2:	0f 90       	pop	r0
    55d4:	0f 90       	pop	r0
    55d6:	0f 90       	pop	r0
	}
}
    55d8:	0f 90       	pop	r0
    55da:	0f 90       	pop	r0
    55dc:	df 91       	pop	r29
    55de:	cf 91       	pop	r28
    55e0:	1f 91       	pop	r17
    55e2:	0f 91       	pop	r16
    55e4:	ff 90       	pop	r15
    55e6:	ef 90       	pop	r14
    55e8:	df 90       	pop	r13
    55ea:	cf 90       	pop	r12
    55ec:	bf 90       	pop	r11
    55ee:	af 90       	pop	r10
    55f0:	9f 90       	pop	r9
    55f2:	8f 90       	pop	r8
    55f4:	7f 90       	pop	r7
    55f6:	6f 90       	pop	r6
    55f8:	08 95       	ret

000055fa <handle_broadcast_id>:
void handle_broadcast_id()
{
	schedule_task(5,send_id, NULL);
    55fa:	20 e0       	ldi	r18, 0x00	; 0
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	40 ef       	ldi	r20, 0xF0	; 240
    5600:	57 e2       	ldi	r21, 0x27	; 39
    5602:	65 e0       	ldi	r22, 0x05	; 5
    5604:	70 e0       	ldi	r23, 0x00	; 0
    5606:	80 e0       	ldi	r24, 0x00	; 0
    5608:	90 e0       	ldi	r25, 0x00	; 0
    560a:	89 c9       	rjmp	.-3310   	; 0x491e <schedule_task>
    560c:	08 95       	ret

0000560e <handle_get_id>:
}

void handle_get_id()
{
	printf("My ID is: %04X\r\n",get_droplet_id());
    560e:	80 91 e9 27 	lds	r24, 0x27E9
    5612:	8f 93       	push	r24
    5614:	80 91 e8 27 	lds	r24, 0x27E8
    5618:	8f 93       	push	r24
    561a:	8f e8       	ldi	r24, 0x8F	; 143
    561c:	95 e2       	ldi	r25, 0x25	; 37
    561e:	9f 93       	push	r25
    5620:	8f 93       	push	r24
    5622:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    5626:	0f 90       	pop	r0
    5628:	0f 90       	pop	r0
    562a:	0f 90       	pop	r0
    562c:	0f 90       	pop	r0
    562e:	08 95       	ret

00005630 <handle_cmd>:
		//set_rgb(0,0,0);
	//}
}

void handle_cmd(char* command_args)
{
    5630:	cf 93       	push	r28
    5632:	df 93       	push	r29
    5634:	d8 2f       	mov	r29, r24
    5636:	c9 2f       	mov	r28, r25
	printf("Broadcasting command: \"%s\", of length %i.\r\n",(uint8_t*)command_args, strlen(command_args));
    5638:	e8 2f       	mov	r30, r24
    563a:	f9 2f       	mov	r31, r25
    563c:	df 01       	movw	r26, r30
    563e:	0d 90       	ld	r0, X+
    5640:	00 20       	and	r0, r0
    5642:	e9 f7       	brne	.-6      	; 0x563e <handle_cmd+0xe>
    5644:	11 97       	sbiw	r26, 0x01	; 1
    5646:	ae 1b       	sub	r26, r30
    5648:	bf 0b       	sbc	r27, r31
    564a:	bf 93       	push	r27
    564c:	af 93       	push	r26
    564e:	9f 93       	push	r25
    5650:	8f 93       	push	r24
    5652:	20 ea       	ldi	r18, 0xA0	; 160
    5654:	35 e2       	ldi	r19, 0x25	; 37
    5656:	3f 93       	push	r19
    5658:	2f 93       	push	r18
    565a:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
	#ifdef IS_SPECIAL
	ir_cmd(DIR0|DIR1|DIR3|DIR4, command_args,strlen(command_args));
	#else
	ir_cmd(ALL_DIRS, command_args,strlen(command_args));
    565e:	ed 2f       	mov	r30, r29
    5660:	fc 2f       	mov	r31, r28
    5662:	df 01       	movw	r26, r30
    5664:	0d 90       	ld	r0, X+
    5666:	00 20       	and	r0, r0
    5668:	e9 f7       	brne	.-6      	; 0x5664 <handle_cmd+0x34>
    566a:	11 97       	sbiw	r26, 0x01	; 1
    566c:	ad 01       	movw	r20, r26
    566e:	4e 1b       	sub	r20, r30
    5670:	5f 0b       	sbc	r21, r31
    5672:	6d 2f       	mov	r22, r29
    5674:	7c 2f       	mov	r23, r28
    5676:	8f e3       	ldi	r24, 0x3F	; 63
    5678:	0e 94 0d 0c 	call	0x181a	; 0x181a <ir_cmd>
    567c:	0f 90       	pop	r0
    567e:	0f 90       	pop	r0
    5680:	0f 90       	pop	r0
    5682:	0f 90       	pop	r0
    5684:	0f 90       	pop	r0
    5686:	0f 90       	pop	r0
	//
	//else
	//{
		//printf("\tIt wasn't OK to send command\r\n");
	//}
}
    5688:	df 91       	pop	r29
    568a:	cf 91       	pop	r28
    568c:	08 95       	ret

0000568e <handle_targeted_cmd>:

void handle_targeted_cmd(char* command_args)
{
    568e:	cf 92       	push	r12
    5690:	df 92       	push	r13
    5692:	ef 92       	push	r14
    5694:	ff 92       	push	r15
    5696:	0f 93       	push	r16
    5698:	1f 93       	push	r17
    569a:	cf 93       	push	r28
    569c:	df 93       	push	r29
    569e:	cd b7       	in	r28, 0x3d	; 61
    56a0:	de b7       	in	r29, 0x3e	; 62
    56a2:	a5 97       	sbiw	r28, 0x25	; 37
    56a4:	cd bf       	out	0x3d, r28	; 61
    56a6:	de bf       	out	0x3e, r29	; 62
    56a8:	8c 01       	movw	r16, r24
	uint8_t loc = strcspn(command_args, " ");
    56aa:	6d e8       	ldi	r22, 0x8D	; 141
    56ac:	72 e2       	ldi	r23, 0x22	; 34
    56ae:	0e 94 8c 38 	call	0x7118	; 0x7118 <strcspn>
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    56b2:	7c 01       	movw	r14, r24
    56b4:	ff 24       	eor	r15, r15
    56b6:	a7 01       	movw	r20, r14
    56b8:	b8 01       	movw	r22, r16
    56ba:	ce 01       	movw	r24, r28
    56bc:	01 96       	adiw	r24, 0x01	; 1
    56be:	0e 94 9b 38 	call	0x7136	; 0x7136 <strncpy>
	strcpy(cmdString, command_args+loc+1);
    56c2:	8f ef       	ldi	r24, 0xFF	; 255
    56c4:	e8 1a       	sub	r14, r24
    56c6:	f8 0a       	sbc	r15, r24
    56c8:	b8 01       	movw	r22, r16
    56ca:	6e 0d       	add	r22, r14
    56cc:	7f 1d       	adc	r23, r15
    56ce:	8e 01       	movw	r16, r28
    56d0:	0a 5f       	subi	r16, 0xFA	; 250
    56d2:	1f 4f       	sbci	r17, 0xFF	; 255
    56d4:	c8 01       	movw	r24, r16
    56d6:	0e 94 85 38 	call	0x710a	; 0x710a <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    56da:	40 e1       	ldi	r20, 0x10	; 16
    56dc:	50 e0       	ldi	r21, 0x00	; 0
    56de:	60 e0       	ldi	r22, 0x00	; 0
    56e0:	70 e0       	ldi	r23, 0x00	; 0
    56e2:	ce 01       	movw	r24, r28
    56e4:	01 96       	adiw	r24, 0x01	; 1
    56e6:	0e 94 57 36 	call	0x6cae	; 0x6cae <strtoul>
    56ea:	6b 01       	movw	r12, r22
    56ec:	7c 01       	movw	r14, r24
	printf("command string: %s, length: %d\r\n",cmdString, strlen(cmdString));
    56ee:	f8 01       	movw	r30, r16
    56f0:	01 90       	ld	r0, Z+
    56f2:	00 20       	and	r0, r0
    56f4:	e9 f7       	brne	.-6      	; 0x56f0 <handle_targeted_cmd+0x62>
    56f6:	31 97       	sbiw	r30, 0x01	; 1
    56f8:	e0 1b       	sub	r30, r16
    56fa:	f1 0b       	sbc	r31, r17
    56fc:	ff 93       	push	r31
    56fe:	ef 93       	push	r30
    5700:	1f 93       	push	r17
    5702:	0f 93       	push	r16
    5704:	8c ec       	ldi	r24, 0xCC	; 204
    5706:	95 e2       	ldi	r25, 0x25	; 37
    5708:	9f 93       	push	r25
    570a:	8f 93       	push	r24
    570c:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
	#ifdef IS_SPECIAL
	ir_targeted_cmd(DIR0|DIR1|DIR3|DIR4, cmdString,strlen(cmdString), target);
	#else
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    5710:	f8 01       	movw	r30, r16
    5712:	01 90       	ld	r0, Z+
    5714:	00 20       	and	r0, r0
    5716:	e9 f7       	brne	.-6      	; 0x5712 <handle_targeted_cmd+0x84>
    5718:	31 97       	sbiw	r30, 0x01	; 1
    571a:	af 01       	movw	r20, r30
    571c:	40 1b       	sub	r20, r16
    571e:	51 0b       	sbc	r21, r17
    5720:	96 01       	movw	r18, r12
    5722:	b8 01       	movw	r22, r16
    5724:	8f e3       	ldi	r24, 0x3F	; 63
    5726:	0e 94 c7 0b 	call	0x178e	; 0x178e <ir_targeted_cmd>
    572a:	0f 90       	pop	r0
    572c:	0f 90       	pop	r0
    572e:	0f 90       	pop	r0
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
	#endif	
}
    5736:	a5 96       	adiw	r28, 0x25	; 37
    5738:	cd bf       	out	0x3d, r28	; 61
    573a:	de bf       	out	0x3e, r29	; 62
    573c:	df 91       	pop	r29
    573e:	cf 91       	pop	r28
    5740:	1f 91       	pop	r17
    5742:	0f 91       	pop	r16
    5744:	ff 90       	pop	r15
    5746:	ef 90       	pop	r14
    5748:	df 90       	pop	r13
    574a:	cf 90       	pop	r12
    574c:	08 95       	ret

0000574e <handle_shout>:

void handle_shout(char* command_args)
{
    574e:	fc 01       	movw	r30, r24
	if(strlen(command_args)==0) command_args = "Unique New York.";
    5750:	80 81       	ld	r24, Z
    5752:	88 23       	and	r24, r24
    5754:	e1 f0       	breq	.+56     	; 0x578e <handle_shout+0x40>
	else if(strlen(command_args)>IR_BUFFER_SIZE)
    5756:	df 01       	movw	r26, r30
    5758:	0d 90       	ld	r0, X+
    575a:	00 20       	and	r0, r0
    575c:	e9 f7       	brne	.-6      	; 0x5758 <handle_shout+0xa>
    575e:	11 97       	sbiw	r26, 0x01	; 1
    5760:	ae 1b       	sub	r26, r30
    5762:	bf 0b       	sbc	r27, r31
    5764:	a1 31       	cpi	r26, 0x11	; 17
    5766:	b1 05       	cpc	r27, r1
    5768:	a0 f0       	brcs	.+40     	; 0x5792 <handle_shout+0x44>
	{ 
		printf("Message length was %d chars, which exceeds the maximum of %d", strlen(command_args), IR_BUFFER_SIZE);
    576a:	1f 92       	push	r1
    576c:	80 e1       	ldi	r24, 0x10	; 16
    576e:	8f 93       	push	r24
    5770:	bf 93       	push	r27
    5772:	af 93       	push	r26
    5774:	8e ef       	ldi	r24, 0xFE	; 254
    5776:	95 e2       	ldi	r25, 0x25	; 37
    5778:	9f 93       	push	r25
    577a:	8f 93       	push	r24
    577c:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
		return;
    5780:	0f 90       	pop	r0
    5782:	0f 90       	pop	r0
    5784:	0f 90       	pop	r0
    5786:	0f 90       	pop	r0
    5788:	0f 90       	pop	r0
    578a:	0f 90       	pop	r0
    578c:	08 95       	ret
	#endif	
}

void handle_shout(char* command_args)
{
	if(strlen(command_args)==0) command_args = "Unique New York.";
    578e:	ed ee       	ldi	r30, 0xED	; 237
    5790:	f5 e2       	ldi	r31, 0x25	; 37
		return;
	}
	#ifdef IS_SPECIAL
	ir_send(DIR0|DIR1|DIR3|DIR4, command_args,strlen(command_args));
	#else
	ir_send(ALL_DIRS, command_args,strlen(command_args));
    5792:	df 01       	movw	r26, r30
    5794:	0d 90       	ld	r0, X+
    5796:	00 20       	and	r0, r0
    5798:	e9 f7       	brne	.-6      	; 0x5794 <handle_shout+0x46>
    579a:	11 97       	sbiw	r26, 0x01	; 1
    579c:	ad 01       	movw	r20, r26
    579e:	4e 1b       	sub	r20, r30
    57a0:	5f 0b       	sbc	r21, r31
    57a2:	bf 01       	movw	r22, r30
    57a4:	8f e3       	ldi	r24, 0x3F	; 63
    57a6:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <ir_send>
    57aa:	08 95       	ret

000057ac <handle_target>:
	#endif
}

void handle_target(char* command_args)
{
    57ac:	ef 92       	push	r14
    57ae:	ff 92       	push	r15
    57b0:	0f 93       	push	r16
    57b2:	1f 93       	push	r17
    57b4:	cf 93       	push	r28
    57b6:	df 93       	push	r29
    57b8:	cd b7       	in	r28, 0x3d	; 61
    57ba:	de b7       	in	r29, 0x3e	; 62
    57bc:	a5 97       	sbiw	r28, 0x25	; 37
    57be:	cd bf       	out	0x3d, r28	; 61
    57c0:	de bf       	out	0x3e, r29	; 62
    57c2:	8c 01       	movw	r16, r24
	uint8_t loc = strcspn(command_args, " ");
    57c4:	6d e8       	ldi	r22, 0x8D	; 141
    57c6:	72 e2       	ldi	r23, 0x22	; 34
    57c8:	0e 94 8c 38 	call	0x7118	; 0x7118 <strcspn>
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    57cc:	7c 01       	movw	r14, r24
    57ce:	ff 24       	eor	r15, r15
    57d0:	a7 01       	movw	r20, r14
    57d2:	b8 01       	movw	r22, r16
    57d4:	ce 01       	movw	r24, r28
    57d6:	01 96       	adiw	r24, 0x01	; 1
    57d8:	0e 94 9b 38 	call	0x7136	; 0x7136 <strncpy>
	strcpy(msgString, command_args+loc);
    57dc:	b8 01       	movw	r22, r16
    57de:	6e 0d       	add	r22, r14
    57e0:	7f 1d       	adc	r23, r15
    57e2:	8e 01       	movw	r16, r28
    57e4:	0a 5f       	subi	r16, 0xFA	; 250
    57e6:	1f 4f       	sbci	r17, 0xFF	; 255
    57e8:	c8 01       	movw	r24, r16
    57ea:	0e 94 85 38 	call	0x710a	; 0x710a <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    57ee:	40 e1       	ldi	r20, 0x10	; 16
    57f0:	50 e0       	ldi	r21, 0x00	; 0
    57f2:	60 e0       	ldi	r22, 0x00	; 0
    57f4:	70 e0       	ldi	r23, 0x00	; 0
    57f6:	ce 01       	movw	r24, r28
    57f8:	01 96       	adiw	r24, 0x01	; 1
    57fa:	0e 94 57 36 	call	0x6cae	; 0x6cae <strtoul>
	
	//printf("Target: %04X\r\n",target);
	#ifdef IS_SPECIAL
	ir_targeted_send(DIR0|DIR1|DIR3|DIR4, msgString,strlen(msgString), target);
	#else	
	ir_targeted_send(ALL_DIRS, msgString,strlen(msgString), target);
    57fe:	f8 01       	movw	r30, r16
    5800:	01 90       	ld	r0, Z+
    5802:	00 20       	and	r0, r0
    5804:	e9 f7       	brne	.-6      	; 0x5800 <handle_target+0x54>
    5806:	31 97       	sbiw	r30, 0x01	; 1
    5808:	af 01       	movw	r20, r30
    580a:	40 1b       	sub	r20, r16
    580c:	51 0b       	sbc	r21, r17
    580e:	9b 01       	movw	r18, r22
    5810:	b8 01       	movw	r22, r16
    5812:	8f e3       	ldi	r24, 0x3F	; 63
    5814:	0e 94 55 0c 	call	0x18aa	; 0x18aa <ir_targeted_send>
	#endif
} 
    5818:	a5 96       	adiw	r28, 0x25	; 37
    581a:	cd bf       	out	0x3d, r28	; 61
    581c:	de bf       	out	0x3e, r29	; 62
    581e:	df 91       	pop	r29
    5820:	cf 91       	pop	r28
    5822:	1f 91       	pop	r17
    5824:	0f 91       	pop	r16
    5826:	ff 90       	pop	r15
    5828:	ef 90       	pop	r14
    582a:	08 95       	ret

0000582c <get_command_word_and_args>:


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
    582c:	0f 93       	push	r16
    582e:	1f 93       	push	r17
    5830:	cf 93       	push	r28
    5832:	df 93       	push	r29
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    5834:	61 15       	cp	r22, r1
    5836:	71 05       	cpc	r23, r1
    5838:	79 f1       	breq	.+94     	; 0x5898 <get_command_word_and_args+0x6c>
	{
		if(command[i]=='\0')
    583a:	fc 01       	movw	r30, r24
    583c:	10 81       	ld	r17, Z
    583e:	11 23       	and	r17, r17
    5840:	71 f1       	breq	.+92     	; 0x589e <get_command_word_and_args+0x72>
    5842:	dc 01       	movw	r26, r24
    5844:	11 96       	adiw	r26, 0x01	; 1
    5846:	68 0f       	add	r22, r24
    5848:	79 1f       	adc	r23, r25


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
    584a:	01 e0       	ldi	r16, 0x01	; 1
} 


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
    584c:	e0 e0       	ldi	r30, 0x00	; 0
    584e:	f0 e0       	ldi	r31, 0x00	; 0
    5850:	03 c0       	rjmp	.+6      	; 0x5858 <get_command_word_and_args+0x2c>
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
	{
		if(command[i]=='\0')
    5852:	1d 91       	ld	r17, X+
    5854:	11 23       	and	r17, r17
    5856:	e1 f0       	breq	.+56     	; 0x5890 <get_command_word_and_args+0x64>
		{
			break;
		}
		else if(command[i]==' ' && writing_word_boole == 1)
    5858:	10 32       	cpi	r17, 0x20	; 32
    585a:	49 f4       	brne	.+18     	; 0x586e <get_command_word_and_args+0x42>
    585c:	01 30       	cpi	r16, 0x01	; 1
    585e:	71 f4       	brne	.+28     	; 0x587c <get_command_word_and_args+0x50>
		{
			command_word[write_index]='\0';
    5860:	e4 0f       	add	r30, r20
    5862:	f5 1f       	adc	r31, r21
    5864:	10 82       	st	Z, r1
			write_index = 0;
			writing_word_boole = 0;
    5866:	00 e0       	ldi	r16, 0x00	; 0
			break;
		}
		else if(command[i]==' ' && writing_word_boole == 1)
		{
			command_word[write_index]='\0';
			write_index = 0;
    5868:	e0 e0       	ldi	r30, 0x00	; 0
    586a:	f0 e0       	ldi	r31, 0x00	; 0
			writing_word_boole = 0;
    586c:	0c c0       	rjmp	.+24     	; 0x5886 <get_command_word_and_args+0x5a>
		}
		else
		{
			if(writing_word_boole==1)
    586e:	01 30       	cpi	r16, 0x01	; 1
    5870:	29 f4       	brne	.+10     	; 0x587c <get_command_word_and_args+0x50>
			{
				command_word[write_index] = command[i];
    5872:	ea 01       	movw	r28, r20
    5874:	ce 0f       	add	r28, r30
    5876:	df 1f       	adc	r29, r31
    5878:	18 83       	st	Y, r17
    587a:	04 c0       	rjmp	.+8      	; 0x5884 <get_command_word_and_args+0x58>
			}
			else
			{
				command_args[write_index] = command[i];
    587c:	e9 01       	movw	r28, r18
    587e:	ce 0f       	add	r28, r30
    5880:	df 1f       	adc	r29, r31
    5882:	18 83       	st	Y, r17
			}
			write_index++;
    5884:	31 96       	adiw	r30, 0x01	; 1

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    5886:	a6 17       	cp	r26, r22
    5888:	b7 07       	cpc	r27, r23
    588a:	19 f7       	brne	.-58     	; 0x5852 <get_command_word_and_args+0x26>
    588c:	cf 01       	movw	r24, r30
    588e:	01 c0       	rjmp	.+2      	; 0x5892 <get_command_word_and_args+0x66>
    5890:	cf 01       	movw	r24, r30
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1)
    5892:	01 30       	cpi	r16, 0x01	; 1
    5894:	61 f4       	brne	.+24     	; 0x58ae <get_command_word_and_args+0x82>
    5896:	05 c0       	rjmp	.+10     	; 0x58a2 <get_command_word_and_args+0x76>

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    5898:	e0 e0       	ldi	r30, 0x00	; 0
    589a:	f0 e0       	ldi	r31, 0x00	; 0
    589c:	02 c0       	rjmp	.+4      	; 0x58a2 <get_command_word_and_args+0x76>
	{
		if(command[i]=='\0')
    589e:	e0 e0       	ldi	r30, 0x00	; 0
    58a0:	f0 e0       	ldi	r31, 0x00	; 0
			write_index++;
		}
	}
	if(writing_word_boole==1)
	{
		command_word[write_index] = '\0';
    58a2:	e4 0f       	add	r30, r20
    58a4:	f5 1f       	adc	r31, r21
    58a6:	10 82       	st	Z, r1
		command_args[0] = '\0';
    58a8:	f9 01       	movw	r30, r18
    58aa:	10 82       	st	Z, r1
    58ac:	04 c0       	rjmp	.+8      	; 0x58b6 <get_command_word_and_args+0x8a>
	}
	else
	{
		command_args[write_index] = '\0';
    58ae:	f9 01       	movw	r30, r18
    58b0:	e8 0f       	add	r30, r24
    58b2:	f9 1f       	adc	r31, r25
    58b4:	10 82       	st	Z, r1
	}
}
    58b6:	df 91       	pop	r29
    58b8:	cf 91       	pop	r28
    58ba:	1f 91       	pop	r17
    58bc:	0f 91       	pop	r16
    58be:	08 95       	ret

000058c0 <handle_serial_command>:
//#define IS_SPECIAL 1

uint8_t user_handle_command(char* command_word, char* command_args) __attribute__((weak));

void handle_serial_command(char* command, uint16_t command_length)
{
    58c0:	cf 93       	push	r28
    58c2:	df 93       	push	r29
    58c4:	cd b7       	in	r28, 0x3d	; 61
    58c6:	de b7       	in	r29, 0x3e	; 62
    58c8:	c0 58       	subi	r28, 0x80	; 128
    58ca:	d1 09       	sbc	r29, r1
    58cc:	cd bf       	out	0x3d, r28	; 61
    58ce:	de bf       	out	0x3e, r29	; 62
	//last_serial_command_time = command_time;
	//printf("Got command \"%s\".\r\n",command);
	//printf("command_time: %lu | last_command_time: %lu\r\n", command_time, last_serial_command_time);
	if(command[0]!='\0') //Not much to handle if we get an empty string.
    58d0:	fc 01       	movw	r30, r24
    58d2:	20 81       	ld	r18, Z
    58d4:	22 23       	and	r18, r18
    58d6:	09 f4       	brne	.+2      	; 0x58da <handle_serial_command+0x1a>
    58d8:	4e c1       	rjmp	.+668    	; 0x5b76 <handle_serial_command+0x2b6>
	{
		char command_word[BUFFER_SIZE];
		char command_args[BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
    58da:	9e 01       	movw	r18, r28
    58dc:	2f 5f       	subi	r18, 0xFF	; 255
    58de:	3f 4f       	sbci	r19, 0xFF	; 255
    58e0:	ae 01       	movw	r20, r28
    58e2:	4f 5b       	subi	r20, 0xBF	; 191
    58e4:	5f 4f       	sbci	r21, 0xFF	; 255
    58e6:	a2 df       	rcall	.-188    	; 0x582c <get_command_word_and_args>
		if(strcmp(command_word,"move_steps")==0)					handle_move_steps(command_args);
    58e8:	6b e3       	ldi	r22, 0x3B	; 59
    58ea:	76 e2       	ldi	r23, 0x26	; 38
    58ec:	ce 01       	movw	r24, r28
    58ee:	8f 5b       	subi	r24, 0xBF	; 191
    58f0:	9f 4f       	sbci	r25, 0xFF	; 255
    58f2:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    58f6:	89 2b       	or	r24, r25
    58f8:	21 f4       	brne	.+8      	; 0x5902 <handle_serial_command+0x42>
    58fa:	ce 01       	movw	r24, r28
    58fc:	01 96       	adiw	r24, 0x01	; 1
    58fe:	bc db       	rcall	.-2184   	; 0x5078 <handle_move_steps>
    5900:	3a c1       	rjmp	.+628    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"walk")==0)						handle_walk(command_args);
    5902:	6f e5       	ldi	r22, 0x5F	; 95
    5904:	76 e2       	ldi	r23, 0x26	; 38
    5906:	ce 01       	movw	r24, r28
    5908:	8f 5b       	subi	r24, 0xBF	; 191
    590a:	9f 4f       	sbci	r25, 0xFF	; 255
    590c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5910:	89 2b       	or	r24, r25
    5912:	21 f4       	brne	.+8      	; 0x591c <handle_serial_command+0x5c>
    5914:	ce 01       	movw	r24, r28
    5916:	01 96       	adiw	r24, 0x01	; 1
    5918:	f5 db       	rcall	.-2070   	; 0x5104 <handle_walk>
    591a:	2d c1       	rjmp	.+602    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word, "get_rgb")==0)					handle_get_rgb();
    591c:	66 e4       	ldi	r22, 0x46	; 70
    591e:	76 e2       	ldi	r23, 0x26	; 38
    5920:	ce 01       	movw	r24, r28
    5922:	8f 5b       	subi	r24, 0xBF	; 191
    5924:	9f 4f       	sbci	r25, 0xFF	; 255
    5926:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    592a:	89 2b       	or	r24, r25
    592c:	11 f4       	brne	.+4      	; 0x5932 <handle_serial_command+0x72>
    592e:	10 dc       	rcall	.-2016   	; 0x5150 <handle_get_rgb>
    5930:	22 c1       	rjmp	.+580    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"set_ir")==0)					handle_set_ir(command_args);
    5932:	6e e4       	ldi	r22, 0x4E	; 78
    5934:	76 e2       	ldi	r23, 0x26	; 38
    5936:	ce 01       	movw	r24, r28
    5938:	8f 5b       	subi	r24, 0xBF	; 191
    593a:	9f 4f       	sbci	r25, 0xFF	; 255
    593c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5940:	89 2b       	or	r24, r25
    5942:	21 f4       	brne	.+8      	; 0x594c <handle_serial_command+0x8c>
    5944:	ce 01       	movw	r24, r28
    5946:	01 96       	adiw	r24, 0x01	; 1
    5948:	28 dc       	rcall	.-1968   	; 0x519a <handle_set_ir>
    594a:	15 c1       	rjmp	.+554    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"coll")==0)						handle_check_collisions();
    594c:	65 e5       	ldi	r22, 0x55	; 85
    594e:	76 e2       	ldi	r23, 0x26	; 38
    5950:	ce 01       	movw	r24, r28
    5952:	8f 5b       	subi	r24, 0xBF	; 191
    5954:	9f 4f       	sbci	r25, 0xFF	; 255
    5956:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    595a:	89 2b       	or	r24, r25
    595c:	11 f4       	brne	.+4      	; 0x5962 <handle_serial_command+0xa2>
    595e:	4c db       	rcall	.-2408   	; 0x4ff8 <handle_check_collisions>
    5960:	0a c1       	rjmp	.+532    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"stop_walk")==0)				handle_stop_walk();
    5962:	6a e5       	ldi	r22, 0x5A	; 90
    5964:	76 e2       	ldi	r23, 0x26	; 38
    5966:	ce 01       	movw	r24, r28
    5968:	8f 5b       	subi	r24, 0xBF	; 191
    596a:	9f 4f       	sbci	r25, 0xFF	; 255
    596c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5970:	89 2b       	or	r24, r25
    5972:	11 f4       	brne	.+4      	; 0x5978 <handle_serial_command+0xb8>
    5974:	2a dc       	rcall	.-1964   	; 0x51ca <handle_stop_walk>
    5976:	ff c0       	rjmp	.+510    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"set_motors")==0)				handle_set_motors(command_args);
    5978:	64 e6       	ldi	r22, 0x64	; 100
    597a:	76 e2       	ldi	r23, 0x26	; 38
    597c:	ce 01       	movw	r24, r28
    597e:	8f 5b       	subi	r24, 0xBF	; 191
    5980:	9f 4f       	sbci	r25, 0xFF	; 255
    5982:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5986:	89 2b       	or	r24, r25
    5988:	21 f4       	brne	.+8      	; 0x5992 <handle_serial_command+0xd2>
    598a:	ce 01       	movw	r24, r28
    598c:	01 96       	adiw	r24, 0x01	; 1
    598e:	2c dc       	rcall	.-1960   	; 0x51e8 <handle_set_motors>
    5990:	f2 c0       	rjmp	.+484    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"set_dist_per_step")==0)		handle_set_mm_per_kilostep(command_args);
    5992:	6f e6       	ldi	r22, 0x6F	; 111
    5994:	76 e2       	ldi	r23, 0x26	; 38
    5996:	ce 01       	movw	r24, r28
    5998:	8f 5b       	subi	r24, 0xBF	; 191
    599a:	9f 4f       	sbci	r25, 0xFF	; 255
    599c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    59a0:	89 2b       	or	r24, r25
    59a2:	21 f4       	brne	.+8      	; 0x59ac <handle_serial_command+0xec>
    59a4:	ce 01       	movw	r24, r28
    59a6:	01 96       	adiw	r24, 0x01	; 1
    59a8:	b7 dc       	rcall	.-1682   	; 0x5318 <handle_set_mm_per_kilostep>
    59aa:	e5 c0       	rjmp	.+458    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"rnb_b")==0)					handle_rnb_broadcast();
    59ac:	61 e8       	ldi	r22, 0x81	; 129
    59ae:	76 e2       	ldi	r23, 0x26	; 38
    59b0:	ce 01       	movw	r24, r28
    59b2:	8f 5b       	subi	r24, 0xBF	; 191
    59b4:	9f 4f       	sbci	r25, 0xFF	; 255
    59b6:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    59ba:	89 2b       	or	r24, r25
    59bc:	11 f4       	brne	.+4      	; 0x59c2 <handle_serial_command+0x102>
    59be:	d2 dc       	rcall	.-1628   	; 0x5364 <handle_rnb_broadcast>
    59c0:	da c0       	rjmp	.+436    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"rnb_c")==0)					handle_rnb_collect(command_args);
    59c2:	67 e8       	ldi	r22, 0x87	; 135
    59c4:	76 e2       	ldi	r23, 0x26	; 38
    59c6:	ce 01       	movw	r24, r28
    59c8:	8f 5b       	subi	r24, 0xBF	; 191
    59ca:	9f 4f       	sbci	r25, 0xFF	; 255
    59cc:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    59d0:	89 2b       	or	r24, r25
    59d2:	21 f4       	brne	.+8      	; 0x59dc <handle_serial_command+0x11c>
    59d4:	ce 01       	movw	r24, r28
    59d6:	01 96       	adiw	r24, 0x01	; 1
    59d8:	cf dc       	rcall	.-1634   	; 0x5378 <handle_rnb_collect>
    59da:	cd c0       	rjmp	.+410    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word, "rnb_t")==0)					handle_rnb_transmit(command_args);
    59dc:	6d e8       	ldi	r22, 0x8D	; 141
    59de:	76 e2       	ldi	r23, 0x26	; 38
    59e0:	ce 01       	movw	r24, r28
    59e2:	8f 5b       	subi	r24, 0xBF	; 191
    59e4:	9f 4f       	sbci	r25, 0xFF	; 255
    59e6:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    59ea:	89 2b       	or	r24, r25
    59ec:	21 f4       	brne	.+8      	; 0x59f6 <handle_serial_command+0x136>
    59ee:	ce 01       	movw	r24, r28
    59f0:	01 96       	adiw	r24, 0x01	; 1
    59f2:	f9 dc       	rcall	.-1550   	; 0x53e6 <handle_rnb_transmit>
    59f4:	c0 c0       	rjmp	.+384    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"rnb_r")==0)					handle_rnb_receive();
    59f6:	6f e4       	ldi	r22, 0x4F	; 79
    59f8:	72 e2       	ldi	r23, 0x22	; 34
    59fa:	ce 01       	movw	r24, r28
    59fc:	8f 5b       	subi	r24, 0xBF	; 191
    59fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5a00:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5a04:	89 2b       	or	r24, r25
    5a06:	11 f4       	brne	.+4      	; 0x5a0c <handle_serial_command+0x14c>
    5a08:	1a dd       	rcall	.-1484   	; 0x543e <handle_rnb_receive>
    5a0a:	b5 c0       	rjmp	.+362    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"set_led")==0)					handle_set_led(command_args);
    5a0c:	63 e9       	ldi	r22, 0x93	; 147
    5a0e:	76 e2       	ldi	r23, 0x26	; 38
    5a10:	ce 01       	movw	r24, r28
    5a12:	8f 5b       	subi	r24, 0xBF	; 191
    5a14:	9f 4f       	sbci	r25, 0xFF	; 255
    5a16:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5a1a:	89 2b       	or	r24, r25
    5a1c:	21 f4       	brne	.+8      	; 0x5a26 <handle_serial_command+0x166>
    5a1e:	ce 01       	movw	r24, r28
    5a20:	01 96       	adiw	r24, 0x01	; 1
    5a22:	34 dd       	rcall	.-1432   	; 0x548c <handle_set_led>
    5a24:	a8 c0       	rjmp	.+336    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"get_id")==0)					handle_get_id();
    5a26:	6b e9       	ldi	r22, 0x9B	; 155
    5a28:	76 e2       	ldi	r23, 0x26	; 38
    5a2a:	ce 01       	movw	r24, r28
    5a2c:	8f 5b       	subi	r24, 0xBF	; 191
    5a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a30:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5a34:	89 2b       	or	r24, r25
    5a36:	11 f4       	brne	.+4      	; 0x5a3c <handle_serial_command+0x17c>
    5a38:	ea dd       	rcall	.-1068   	; 0x560e <handle_get_id>
    5a3a:	9d c0       	rjmp	.+314    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"broadcast_id")==0)				handle_broadcast_id();
    5a3c:	62 ea       	ldi	r22, 0xA2	; 162
    5a3e:	76 e2       	ldi	r23, 0x26	; 38
    5a40:	ce 01       	movw	r24, r28
    5a42:	8f 5b       	subi	r24, 0xBF	; 191
    5a44:	9f 4f       	sbci	r25, 0xFF	; 255
    5a46:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5a4a:	89 2b       	or	r24, r25
    5a4c:	11 f4       	brne	.+4      	; 0x5a52 <handle_serial_command+0x192>
    5a4e:	d5 dd       	rcall	.-1110   	; 0x55fa <handle_broadcast_id>
    5a50:	92 c0       	rjmp	.+292    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"cmd")==0)						handle_cmd(command_args);
    5a52:	63 eb       	ldi	r22, 0xB3	; 179
    5a54:	76 e2       	ldi	r23, 0x26	; 38
    5a56:	ce 01       	movw	r24, r28
    5a58:	8f 5b       	subi	r24, 0xBF	; 191
    5a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a5c:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5a60:	89 2b       	or	r24, r25
    5a62:	21 f4       	brne	.+8      	; 0x5a6c <handle_serial_command+0x1ac>
    5a64:	ce 01       	movw	r24, r28
    5a66:	01 96       	adiw	r24, 0x01	; 1
    5a68:	e3 dd       	rcall	.-1082   	; 0x5630 <handle_cmd>
    5a6a:	85 c0       	rjmp	.+266    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"tgt_cmd")==0)					handle_targeted_cmd(command_args);
    5a6c:	6f ea       	ldi	r22, 0xAF	; 175
    5a6e:	76 e2       	ldi	r23, 0x26	; 38
    5a70:	ce 01       	movw	r24, r28
    5a72:	8f 5b       	subi	r24, 0xBF	; 191
    5a74:	9f 4f       	sbci	r25, 0xFF	; 255
    5a76:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5a7a:	89 2b       	or	r24, r25
    5a7c:	21 f4       	brne	.+8      	; 0x5a86 <handle_serial_command+0x1c6>
    5a7e:	ce 01       	movw	r24, r28
    5a80:	01 96       	adiw	r24, 0x01	; 1
    5a82:	05 de       	rcall	.-1014   	; 0x568e <handle_targeted_cmd>
    5a84:	78 c0       	rjmp	.+240    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"msg")==0)						handle_shout(command_args);
    5a86:	67 eb       	ldi	r22, 0xB7	; 183
    5a88:	76 e2       	ldi	r23, 0x26	; 38
    5a8a:	ce 01       	movw	r24, r28
    5a8c:	8f 5b       	subi	r24, 0xBF	; 191
    5a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a90:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5a94:	89 2b       	or	r24, r25
    5a96:	21 f4       	brne	.+8      	; 0x5aa0 <handle_serial_command+0x1e0>
    5a98:	ce 01       	movw	r24, r28
    5a9a:	01 96       	adiw	r24, 0x01	; 1
    5a9c:	58 de       	rcall	.-848    	; 0x574e <handle_shout>
    5a9e:	6b c0       	rjmp	.+214    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"tgt")==0)						handle_target(command_args);
    5aa0:	6b eb       	ldi	r22, 0xBB	; 187
    5aa2:	76 e2       	ldi	r23, 0x26	; 38
    5aa4:	ce 01       	movw	r24, r28
    5aa6:	8f 5b       	subi	r24, 0xBF	; 191
    5aa8:	9f 4f       	sbci	r25, 0xFF	; 255
    5aaa:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5aae:	89 2b       	or	r24, r25
    5ab0:	21 f4       	brne	.+8      	; 0x5aba <handle_serial_command+0x1fa>
    5ab2:	ce 01       	movw	r24, r28
    5ab4:	01 96       	adiw	r24, 0x01	; 1
    5ab6:	7a de       	rcall	.-780    	; 0x57ac <handle_target>
    5ab8:	5e c0       	rjmp	.+188    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"tasks")==0)					print_task_queue();
    5aba:	6f eb       	ldi	r22, 0xBF	; 191
    5abc:	76 e2       	ldi	r23, 0x26	; 38
    5abe:	ce 01       	movw	r24, r28
    5ac0:	8f 5b       	subi	r24, 0xBF	; 191
    5ac2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac4:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5ac8:	89 2b       	or	r24, r25
    5aca:	11 f4       	brne	.+4      	; 0x5ad0 <handle_serial_command+0x210>
    5acc:	03 d9       	rcall	.-3578   	; 0x4cd4 <print_task_queue>
    5ace:	53 c0       	rjmp	.+166    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"reset")==0)					handle_reset();
    5ad0:	65 ec       	ldi	r22, 0xC5	; 197
    5ad2:	76 e2       	ldi	r23, 0x26	; 38
    5ad4:	ce 01       	movw	r24, r28
    5ad6:	8f 5b       	subi	r24, 0xBF	; 191
    5ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    5ada:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5ade:	89 2b       	or	r24, r25
    5ae0:	19 f4       	brne	.+6      	; 0x5ae8 <handle_serial_command+0x228>
	}
}

void handle_reset()
{
	droplet_reboot();
    5ae2:	0e 94 8f 03 	call	0x71e	; 0x71e <droplet_reboot>
    5ae6:	47 c0       	rjmp	.+142    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"tgt_cmd")==0)					handle_targeted_cmd(command_args);
		else if(strcmp(command_word,"msg")==0)						handle_shout(command_args);
		else if(strcmp(command_word,"tgt")==0)						handle_target(command_args);
		else if(strcmp(command_word,"tasks")==0)					print_task_queue();
		else if(strcmp(command_word,"reset")==0)					handle_reset();
		else if(strcmp(command_word,"write_motor_settings")==0)		write_motor_settings();
    5ae8:	6b ec       	ldi	r22, 0xCB	; 203
    5aea:	76 e2       	ldi	r23, 0x26	; 38
    5aec:	ce 01       	movw	r24, r28
    5aee:	8f 5b       	subi	r24, 0xBF	; 191
    5af0:	9f 4f       	sbci	r25, 0xFF	; 255
    5af2:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5af6:	89 2b       	or	r24, r25
    5af8:	19 f4       	brne	.+6      	; 0x5b00 <handle_serial_command+0x240>
    5afa:	0e 94 68 14 	call	0x28d0	; 0x28d0 <write_motor_settings>
    5afe:	3b c0       	rjmp	.+118    	; 0x5b76 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"print_motor_settings")==0){
    5b00:	60 ee       	ldi	r22, 0xE0	; 224
    5b02:	76 e2       	ldi	r23, 0x26	; 38
    5b04:	ce 01       	movw	r24, r28
    5b06:	8f 5b       	subi	r24, 0xBF	; 191
    5b08:	9f 4f       	sbci	r25, 0xFF	; 255
    5b0a:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <strcmp>
    5b0e:	89 2b       	or	r24, r25
    5b10:	29 f4       	brne	.+10     	; 0x5b1c <handle_serial_command+0x25c>
																	print_motor_values();
    5b12:	0e 94 a5 14 	call	0x294a	; 0x294a <print_motor_values>
																	print_dist_per_step();																	
    5b16:	0e 94 ff 14 	call	0x29fe	; 0x29fe <print_dist_per_step>
    5b1a:	2d c0       	rjmp	.+90     	; 0x5b76 <handle_serial_command+0x2b6>
		}else if(user_handle_command) //First, make sure the function is defined
    5b1c:	80 e0       	ldi	r24, 0x00	; 0
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	89 2b       	or	r24, r25
    5b22:	d1 f0       	breq	.+52     	; 0x5b58 <handle_serial_command+0x298>
		{
			if(!user_handle_command(command_word, command_args))	printf("\tCommand ( %s ) not recognized.\r\n",command_word);
    5b24:	be 01       	movw	r22, r28
    5b26:	6f 5f       	subi	r22, 0xFF	; 255
    5b28:	7f 4f       	sbci	r23, 0xFF	; 255
    5b2a:	ce 01       	movw	r24, r28
    5b2c:	8f 5b       	subi	r24, 0xBF	; 191
    5b2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b30:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5b34:	81 11       	cpse	r24, r1
    5b36:	1f c0       	rjmp	.+62     	; 0x5b76 <handle_serial_command+0x2b6>
    5b38:	ce 01       	movw	r24, r28
    5b3a:	8f 5b       	subi	r24, 0xBF	; 191
    5b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b3e:	9f 93       	push	r25
    5b40:	8f 93       	push	r24
    5b42:	85 ef       	ldi	r24, 0xF5	; 245
    5b44:	96 e2       	ldi	r25, 0x26	; 38
    5b46:	9f 93       	push	r25
    5b48:	8f 93       	push	r24
    5b4a:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    5b4e:	0f 90       	pop	r0
    5b50:	0f 90       	pop	r0
    5b52:	0f 90       	pop	r0
    5b54:	0f 90       	pop	r0
    5b56:	0f c0       	rjmp	.+30     	; 0x5b76 <handle_serial_command+0x2b6>
		}
		else														printf("\tCommand ( %s ) not recognized.\r\n",command_word);
    5b58:	ce 01       	movw	r24, r28
    5b5a:	8f 5b       	subi	r24, 0xBF	; 191
    5b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b5e:	9f 93       	push	r25
    5b60:	8f 93       	push	r24
    5b62:	85 ef       	ldi	r24, 0xF5	; 245
    5b64:	96 e2       	ldi	r25, 0x26	; 38
    5b66:	9f 93       	push	r25
    5b68:	8f 93       	push	r24
    5b6a:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
    5b6e:	0f 90       	pop	r0
    5b70:	0f 90       	pop	r0
    5b72:	0f 90       	pop	r0
    5b74:	0f 90       	pop	r0
	}
}
    5b76:	c0 58       	subi	r28, 0x80	; 128
    5b78:	df 4f       	sbci	r29, 0xFF	; 255
    5b7a:	cd bf       	out	0x3d, r28	; 61
    5b7c:	de bf       	out	0x3e, r29	; 62
    5b7e:	df 91       	pop	r29
    5b80:	cf 91       	pop	r28
    5b82:	08 95       	ret

00005b84 <periodic_rnb_broadcast>:
	//printf("LOOP \r\n");
}

void periodic_rnb_broadcast()
{
	printf("periodic_rnb_broadcast \r\n");
    5b84:	87 e1       	ldi	r24, 0x17	; 23
    5b86:	97 e2       	ldi	r25, 0x27	; 39
    5b88:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
	broadcast_rnb_data();
    5b8c:	0e 94 15 1a 	call	0x342a	; 0x342a <broadcast_rnb_data>
	schedule_task(RNB_BROADCAST_PERIOD, periodic_rnb_broadcast, NULL);
    5b90:	20 e0       	ldi	r18, 0x00	; 0
    5b92:	30 e0       	ldi	r19, 0x00	; 0
    5b94:	42 ec       	ldi	r20, 0xC2	; 194
    5b96:	5d e2       	ldi	r21, 0x2D	; 45
    5b98:	68 e8       	ldi	r22, 0x88	; 136
    5b9a:	73 e1       	ldi	r23, 0x13	; 19
    5b9c:	80 e0       	ldi	r24, 0x00	; 0
    5b9e:	90 e0       	ldi	r25, 0x00	; 0
    5ba0:	0c 94 8f 24 	jmp	0x491e	; 0x491e <schedule_task>
    5ba4:	08 95       	ret

00005ba6 <getAtomFromAtomicNum>:
Atom He = {{1, 1, -1, -1, -1, -1, -1, -1}, "He", 1, 0, 2};
Atom Li = {{1, 0, 0, 0, 0, 0, 0, 0}, "Li", 0, 0, 3};
Atom Be = {{1, 1, 0, 0, 0, 0, 0, 0}, "Be", 0, 0, 4};

Atom getAtomFromAtomicNum(uint8_t atomicNum)
{
    5ba6:	cf 93       	push	r28
    5ba8:	df 93       	push	r29
    5baa:	ec 01       	movw	r28, r24
	switch(atomicNum){
    5bac:	62 30       	cpi	r22, 0x02	; 2
    5bae:	91 f0       	breq	.+36     	; 0x5bd4 <getAtomFromAtomicNum+0x2e>
    5bb0:	18 f4       	brcc	.+6      	; 0x5bb8 <getAtomFromAtomicNum+0x12>
    5bb2:	61 30       	cpi	r22, 0x01	; 1
    5bb4:	31 f0       	breq	.+12     	; 0x5bc2 <getAtomFromAtomicNum+0x1c>
    5bb6:	29 c0       	rjmp	.+82     	; 0x5c0a <getAtomFromAtomicNum+0x64>
    5bb8:	63 30       	cpi	r22, 0x03	; 3
    5bba:	a9 f0       	breq	.+42     	; 0x5be6 <getAtomFromAtomicNum+0x40>
    5bbc:	64 30       	cpi	r22, 0x04	; 4
    5bbe:	e1 f0       	breq	.+56     	; 0x5bf8 <getAtomFromAtomicNum+0x52>
    5bc0:	24 c0       	rjmp	.+72     	; 0x5c0a <getAtomFromAtomicNum+0x64>
		case 1:
		{
			//printf("case 1");
			return H;
    5bc2:	8d e0       	ldi	r24, 0x0D	; 13
    5bc4:	ef e8       	ldi	r30, 0x8F	; 143
    5bc6:	f0 e2       	ldi	r31, 0x20	; 32
    5bc8:	de 01       	movw	r26, r28
    5bca:	01 90       	ld	r0, Z+
    5bcc:	0d 92       	st	X+, r0
    5bce:	8a 95       	dec	r24
    5bd0:	e1 f7       	brne	.-8      	; 0x5bca <getAtomFromAtomicNum+0x24>
    5bd2:	23 c0       	rjmp	.+70     	; 0x5c1a <getAtomFromAtomicNum+0x74>
		}
		case 2:
		{
			//printf("case 2");
			return He;
    5bd4:	8d e0       	ldi	r24, 0x0D	; 13
    5bd6:	e2 e8       	ldi	r30, 0x82	; 130
    5bd8:	f0 e2       	ldi	r31, 0x20	; 32
    5bda:	de 01       	movw	r26, r28
    5bdc:	01 90       	ld	r0, Z+
    5bde:	0d 92       	st	X+, r0
    5be0:	8a 95       	dec	r24
    5be2:	e1 f7       	brne	.-8      	; 0x5bdc <getAtomFromAtomicNum+0x36>
    5be4:	1a c0       	rjmp	.+52     	; 0x5c1a <getAtomFromAtomicNum+0x74>
		}
		case 3:
		{
			//printf("case 3");
			return Li;
    5be6:	8d e0       	ldi	r24, 0x0D	; 13
    5be8:	e5 e7       	ldi	r30, 0x75	; 117
    5bea:	f0 e2       	ldi	r31, 0x20	; 32
    5bec:	de 01       	movw	r26, r28
    5bee:	01 90       	ld	r0, Z+
    5bf0:	0d 92       	st	X+, r0
    5bf2:	8a 95       	dec	r24
    5bf4:	e1 f7       	brne	.-8      	; 0x5bee <getAtomFromAtomicNum+0x48>
    5bf6:	11 c0       	rjmp	.+34     	; 0x5c1a <getAtomFromAtomicNum+0x74>
		}
		case 4:
		{
			//printf("case 4");
			return Be;
    5bf8:	8d e0       	ldi	r24, 0x0D	; 13
    5bfa:	e8 e6       	ldi	r30, 0x68	; 104
    5bfc:	f0 e2       	ldi	r31, 0x20	; 32
    5bfe:	de 01       	movw	r26, r28
    5c00:	01 90       	ld	r0, Z+
    5c02:	0d 92       	st	X+, r0
    5c04:	8a 95       	dec	r24
    5c06:	e1 f7       	brne	.-8      	; 0x5c00 <getAtomFromAtomicNum+0x5a>
    5c08:	08 c0       	rjmp	.+16     	; 0x5c1a <getAtomFromAtomicNum+0x74>
		}
		default:
			printf("No such element");
    5c0a:	80 e3       	ldi	r24, 0x30	; 48
    5c0c:	97 e2       	ldi	r25, 0x27	; 39
    5c0e:	9f 93       	push	r25
    5c10:	8f 93       	push	r24
    5c12:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
	}
}
    5c16:	0f 90       	pop	r0
    5c18:	0f 90       	pop	r0
    5c1a:	ce 01       	movw	r24, r28
    5c1c:	df 91       	pop	r29
    5c1e:	cf 91       	pop	r28
    5c20:	08 95       	ret

00005c22 <sendChemID>:

char* global_Atom_str;

void sendChemID(Atom ID)
{
    5c22:	cf 92       	push	r12
    5c24:	df 92       	push	r13
    5c26:	ef 92       	push	r14
    5c28:	ff 92       	push	r15
    5c2a:	0f 93       	push	r16
    5c2c:	1f 93       	push	r17
    5c2e:	cf 93       	push	r28
    5c30:	df 93       	push	r29
    5c32:	cd b7       	in	r28, 0x3d	; 61
    5c34:	de b7       	in	r29, 0x3e	; 62
    5c36:	2d 97       	sbiw	r28, 0x0d	; 13
    5c38:	cd bf       	out	0x3d, r28	; 61
    5c3a:	de bf       	out	0x3e, r29	; 62
    5c3c:	c9 82       	std	Y+1, r12	; 0x01
    5c3e:	da 82       	std	Y+2, r13	; 0x02
    5c40:	eb 82       	std	Y+3, r14	; 0x03
    5c42:	fc 82       	std	Y+4, r15	; 0x04
    5c44:	0d 83       	std	Y+5, r16	; 0x05
    5c46:	1e 83       	std	Y+6, r17	; 0x06
    5c48:	2f 83       	std	Y+7, r18	; 0x07
    5c4a:	38 87       	std	Y+8, r19	; 0x08
    5c4c:	49 87       	std	Y+9, r20	; 0x09
    5c4e:	5a 87       	std	Y+10, r21	; 0x0a
    5c50:	6b 87       	std	Y+11, r22	; 0x0b
    5c52:	7c 87       	std	Y+12, r23	; 0x0c
    5c54:	8d 87       	std	Y+13, r24	; 0x0d
	//send the character array associated with this atom to all nearby droplets
	//For now, it needs to go to every droplet on the board. Later, possibly change that.
	global_Atom_str = (char*)(&ID);
    5c56:	be 01       	movw	r22, r28
    5c58:	6f 5f       	subi	r22, 0xFF	; 255
    5c5a:	7f 4f       	sbci	r23, 0xFF	; 255
    5c5c:	60 93 99 2b 	sts	0x2B99, r22
    5c60:	70 93 9a 2b 	sts	0x2B9A, r23
	ir_send(ALL_DIRS, (char*)(&ID), sizeof(Atom));
    5c64:	4d e0       	ldi	r20, 0x0D	; 13
    5c66:	8f e3       	ldi	r24, 0x3F	; 63
    5c68:	0e 94 98 0c 	call	0x1930	; 0x1930 <ir_send>
	printf("sending chem ID \r\n");
    5c6c:	80 e4       	ldi	r24, 0x40	; 64
    5c6e:	97 e2       	ldi	r25, 0x27	; 39
    5c70:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
}
    5c74:	2d 96       	adiw	r28, 0x0d	; 13
    5c76:	cd bf       	out	0x3d, r28	; 61
    5c78:	de bf       	out	0x3e, r29	; 62
    5c7a:	df 91       	pop	r29
    5c7c:	cf 91       	pop	r28
    5c7e:	1f 91       	pop	r17
    5c80:	0f 91       	pop	r16
    5c82:	ff 90       	pop	r15
    5c84:	ef 90       	pop	r14
    5c86:	df 90       	pop	r13
    5c88:	cf 90       	pop	r12
    5c8a:	08 95       	ret

00005c8c <init>:

/*
 * Any code in this function will be run once, when the robot starts.
 */
void init()
{
    5c8c:	cf 93       	push	r28
    5c8e:	df 93       	push	r29
    5c90:	cd b7       	in	r28, 0x3d	; 61
    5c92:	de b7       	in	r29, 0x3e	; 62
    5c94:	2d 97       	sbiw	r28, 0x0d	; 13
    5c96:	cd bf       	out	0x3d, r28	; 61
    5c98:	de bf       	out	0x3e, r29	; 62

	set_rgb(10, 255, 255); //this is a test line
    5c9a:	4f ef       	ldi	r20, 0xFF	; 255
    5c9c:	6f ef       	ldi	r22, 0xFF	; 255
    5c9e:	8a e0       	ldi	r24, 0x0A	; 10
    5ca0:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <set_rgb>
	myID = getAtomFromAtomicNum(MY_CHEM_ID);
    5ca4:	60 91 9c 20 	lds	r22, 0x209C
    5ca8:	ce 01       	movw	r24, r28
    5caa:	01 96       	adiw	r24, 0x01	; 1
    5cac:	7c df       	rcall	.-264    	; 0x5ba6 <getAtomFromAtomicNum>
    5cae:	8d e0       	ldi	r24, 0x0D	; 13
    5cb0:	fe 01       	movw	r30, r28
    5cb2:	31 96       	adiw	r30, 0x01	; 1
    5cb4:	ab e9       	ldi	r26, 0x9B	; 155
    5cb6:	bb e2       	ldi	r27, 0x2B	; 43
    5cb8:	01 90       	ld	r0, Z+
    5cba:	0d 92       	st	X+, r0
    5cbc:	8a 95       	dec	r24
    5cbe:	e1 f7       	brne	.-8      	; 0x5cb8 <init+0x2c>
	printf("this.name = %c%c \r\n", myID.name[0], myID.name[1]);
    5cc0:	80 91 a4 2b 	lds	r24, 0x2BA4
    5cc4:	1f 92       	push	r1
    5cc6:	8f 93       	push	r24
    5cc8:	80 91 a3 2b 	lds	r24, 0x2BA3
    5ccc:	1f 92       	push	r1
    5cce:	8f 93       	push	r24
    5cd0:	82 e5       	ldi	r24, 0x52	; 82
    5cd2:	97 e2       	ldi	r25, 0x27	; 39
    5cd4:	9f 93       	push	r25
    5cd6:	8f 93       	push	r24
    5cd8:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
	periodic_rnb_broadcast();
    5cdc:	53 df       	rcall	.-346    	; 0x5b84 <periodic_rnb_broadcast>
    5cde:	0f 90       	pop	r0
    5ce0:	0f 90       	pop	r0
    5ce2:	0f 90       	pop	r0
    5ce4:	0f 90       	pop	r0
    5ce6:	0f 90       	pop	r0
    5ce8:	0f 90       	pop	r0
}
    5cea:	2d 96       	adiw	r28, 0x0d	; 13
    5cec:	cd bf       	out	0x3d, r28	; 61
    5cee:	de bf       	out	0x3e, r29	; 62
    5cf0:	df 91       	pop	r29
    5cf2:	cf 91       	pop	r28
    5cf4:	08 95       	ret

00005cf6 <loop>:

/*
 * The code in this function will be called repeatedly, as fast as it can execute.
 */
void loop()
{
    5cf6:	cf 92       	push	r12
    5cf8:	df 92       	push	r13
    5cfa:	ef 92       	push	r14
    5cfc:	ff 92       	push	r15
    5cfe:	0f 93       	push	r16
    5d00:	1f 93       	push	r17
	//set_rgb(255, 255, 255);
	//why does the LED flicker once per loop?
	sendChemID(myID);
    5d02:	c0 90 9b 2b 	lds	r12, 0x2B9B
    5d06:	d0 90 9c 2b 	lds	r13, 0x2B9C
    5d0a:	e0 90 9d 2b 	lds	r14, 0x2B9D
    5d0e:	f0 90 9e 2b 	lds	r15, 0x2B9E
    5d12:	00 91 9f 2b 	lds	r16, 0x2B9F
    5d16:	10 91 a0 2b 	lds	r17, 0x2BA0
    5d1a:	20 91 a1 2b 	lds	r18, 0x2BA1
    5d1e:	30 91 a2 2b 	lds	r19, 0x2BA2
    5d22:	40 91 a3 2b 	lds	r20, 0x2BA3
    5d26:	50 91 a4 2b 	lds	r21, 0x2BA4
    5d2a:	60 91 a5 2b 	lds	r22, 0x2BA5
    5d2e:	70 91 a6 2b 	lds	r23, 0x2BA6
    5d32:	80 91 a7 2b 	lds	r24, 0x2BA7
    5d36:	75 df       	rcall	.-278    	; 0x5c22 <sendChemID>
	delay_ms(1000);
    5d38:	88 ee       	ldi	r24, 0xE8	; 232
    5d3a:	93 e0       	ldi	r25, 0x03	; 3
    5d3c:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
	uint8_t recieving_id;
	
	uint8_t dir_mask = check_collisions();
    5d40:	0e 94 ab 10 	call	0x2156	; 0x2156 <check_collisions>
	printf("Collisions: %02hX \r\n", dir_mask);
    5d44:	1f 92       	push	r1
    5d46:	8f 93       	push	r24
    5d48:	86 e6       	ldi	r24, 0x66	; 102
    5d4a:	97 e2       	ldi	r25, 0x27	; 39
    5d4c:	9f 93       	push	r25
    5d4e:	8f 93       	push	r24
    5d50:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
	if(rnb_updated)
    5d54:	80 91 ec 28 	lds	r24, 0x28EC
    5d58:	0f 90       	pop	r0
    5d5a:	0f 90       	pop	r0
    5d5c:	0f 90       	pop	r0
    5d5e:	0f 90       	pop	r0
    5d60:	88 23       	and	r24, r24
    5d62:	51 f0       	breq	.+20     	; 0x5d78 <loop+0x82>
	{
		recieving_id = last_good_rnb.id_number;
		printf("recieving_id = %u. \r\n");
    5d64:	8b e7       	ldi	r24, 0x7B	; 123
    5d66:	97 e2       	ldi	r25, 0x27	; 39
    5d68:	9f 93       	push	r25
    5d6a:	8f 93       	push	r24
    5d6c:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
		//last_good_rnb.range
		//last_good_rnb.bearing
		//last_good_rnb.heading
		
		rnb_updated=0;
    5d70:	10 92 ec 28 	sts	0x28EC, r1
    5d74:	0f 90       	pop	r0
    5d76:	0f 90       	pop	r0
	}
	//printf("LOOP \r\n");
}
    5d78:	1f 91       	pop	r17
    5d7a:	0f 91       	pop	r16
    5d7c:	ff 90       	pop	r15
    5d7e:	ef 90       	pop	r14
    5d80:	df 90       	pop	r13
    5d82:	cf 90       	pop	r12
    5d84:	08 95       	ret

00005d86 <handle_msg>:
/*
 * After each pass through loop(), the robot checks for all messages it has 
 * received, and calls this function once for each message.
 */
void handle_msg(ir_msg* msg_struct)
{
    5d86:	cf 93       	push	r28
    5d88:	df 93       	push	r29
	Atom* near_atom;
	if(msg_struct->length==sizeof(Atom))
    5d8a:	fc 01       	movw	r30, r24
    5d8c:	21 85       	ldd	r18, Z+9	; 0x09
    5d8e:	2d 30       	cpi	r18, 0x0D	; 13
    5d90:	11 f4       	brne	.+4      	; 0x5d96 <handle_msg+0x10>
	{
		near_atom = (Atom*)(msg_struct->msg); //do some kind of check to make sure this is actually an atom.
    5d92:	c6 81       	ldd	r28, Z+6	; 0x06
    5d94:	d7 81       	ldd	r29, Z+7	; 0x07
	}

	printf("in handle_msg, near_atom.name = %c%c \r\n", near_atom->name[0], near_atom->name[1]);
    5d96:	89 85       	ldd	r24, Y+9	; 0x09
    5d98:	1f 92       	push	r1
    5d9a:	8f 93       	push	r24
    5d9c:	88 85       	ldd	r24, Y+8	; 0x08
    5d9e:	1f 92       	push	r1
    5da0:	8f 93       	push	r24
    5da2:	81 e9       	ldi	r24, 0x91	; 145
    5da4:	97 e2       	ldi	r25, 0x27	; 39
    5da6:	9f 93       	push	r25
    5da8:	8f 93       	push	r24
    5daa:	0e 94 16 39 	call	0x722c	; 0x722c <printf>
	if(near_atom->diatomic == 1 && near_atom->atomicNum == myID.atomicNum)
    5dae:	0f 90       	pop	r0
    5db0:	0f 90       	pop	r0
    5db2:	0f 90       	pop	r0
    5db4:	0f 90       	pop	r0
    5db6:	0f 90       	pop	r0
    5db8:	0f 90       	pop	r0
    5dba:	8b 85       	ldd	r24, Y+11	; 0x0b
    5dbc:	81 30       	cpi	r24, 0x01	; 1
    5dbe:	79 f4       	brne	.+30     	; 0x5dde <handle_msg+0x58>
    5dc0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5dc2:	80 91 a7 2b 	lds	r24, 0x2BA7
    5dc6:	98 13       	cpse	r25, r24
    5dc8:	0a c0       	rjmp	.+20     	; 0x5dde <handle_msg+0x58>
	{
		printf("found diatomic partner \r\n");
    5dca:	89 eb       	ldi	r24, 0xB9	; 185
    5dcc:	97 e2       	ldi	r25, 0x27	; 39
    5dce:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
		//walk(NORTH, 50);
		delay_ms(1000);
    5dd2:	88 ee       	ldi	r24, 0xE8	; 232
    5dd4:	93 e0       	ldi	r25, 0x03	; 3
    5dd6:	0e 94 69 24 	call	0x48d2	; 0x48d2 <delay_ms>
		stop();
    5dda:	0e 94 be 11 	call	0x237c	; 0x237c <stop>
	}
	printf("END OF HANDLE_MSG \r\n");
    5dde:	82 ed       	ldi	r24, 0xD2	; 210
    5de0:	97 e2       	ldi	r25, 0x27	; 39
    5de2:	0e 94 2c 39 	call	0x7258	; 0x7258 <puts>
}
    5de6:	df 91       	pop	r29
    5de8:	cf 91       	pop	r28
    5dea:	08 95       	ret

00005dec <__subsf3>:
    5dec:	50 58       	subi	r21, 0x80	; 128

00005dee <__addsf3>:
    5dee:	bb 27       	eor	r27, r27
    5df0:	aa 27       	eor	r26, r26
    5df2:	0e d0       	rcall	.+28     	; 0x5e10 <__addsf3x>
    5df4:	83 c2       	rjmp	.+1286   	; 0x62fc <__fp_round>
    5df6:	4c d2       	rcall	.+1176   	; 0x6290 <__fp_pscA>
    5df8:	30 f0       	brcs	.+12     	; 0x5e06 <__addsf3+0x18>
    5dfa:	51 d2       	rcall	.+1186   	; 0x629e <__fp_pscB>
    5dfc:	20 f0       	brcs	.+8      	; 0x5e06 <__addsf3+0x18>
    5dfe:	31 f4       	brne	.+12     	; 0x5e0c <__addsf3+0x1e>
    5e00:	9f 3f       	cpi	r25, 0xFF	; 255
    5e02:	11 f4       	brne	.+4      	; 0x5e08 <__addsf3+0x1a>
    5e04:	1e f4       	brtc	.+6      	; 0x5e0c <__addsf3+0x1e>
    5e06:	1c c2       	rjmp	.+1080   	; 0x6240 <__fp_nan>
    5e08:	0e f4       	brtc	.+2      	; 0x5e0c <__addsf3+0x1e>
    5e0a:	e0 95       	com	r30
    5e0c:	e7 fb       	bst	r30, 7
    5e0e:	04 c2       	rjmp	.+1032   	; 0x6218 <__fp_inf>

00005e10 <__addsf3x>:
    5e10:	e9 2f       	mov	r30, r25
    5e12:	96 d2       	rcall	.+1324   	; 0x6340 <__fp_split3>
    5e14:	80 f3       	brcs	.-32     	; 0x5df6 <__addsf3+0x8>
    5e16:	ba 17       	cp	r27, r26
    5e18:	62 07       	cpc	r22, r18
    5e1a:	73 07       	cpc	r23, r19
    5e1c:	84 07       	cpc	r24, r20
    5e1e:	95 07       	cpc	r25, r21
    5e20:	18 f0       	brcs	.+6      	; 0x5e28 <__addsf3x+0x18>
    5e22:	71 f4       	brne	.+28     	; 0x5e40 <__addsf3x+0x30>
    5e24:	9e f5       	brtc	.+102    	; 0x5e8c <__addsf3x+0x7c>
    5e26:	ae c2       	rjmp	.+1372   	; 0x6384 <__fp_zero>
    5e28:	0e f4       	brtc	.+2      	; 0x5e2c <__addsf3x+0x1c>
    5e2a:	e0 95       	com	r30
    5e2c:	0b 2e       	mov	r0, r27
    5e2e:	ba 2f       	mov	r27, r26
    5e30:	a0 2d       	mov	r26, r0
    5e32:	0b 01       	movw	r0, r22
    5e34:	b9 01       	movw	r22, r18
    5e36:	90 01       	movw	r18, r0
    5e38:	0c 01       	movw	r0, r24
    5e3a:	ca 01       	movw	r24, r20
    5e3c:	a0 01       	movw	r20, r0
    5e3e:	11 24       	eor	r1, r1
    5e40:	ff 27       	eor	r31, r31
    5e42:	59 1b       	sub	r21, r25
    5e44:	99 f0       	breq	.+38     	; 0x5e6c <__addsf3x+0x5c>
    5e46:	59 3f       	cpi	r21, 0xF9	; 249
    5e48:	50 f4       	brcc	.+20     	; 0x5e5e <__addsf3x+0x4e>
    5e4a:	50 3e       	cpi	r21, 0xE0	; 224
    5e4c:	68 f1       	brcs	.+90     	; 0x5ea8 <__addsf3x+0x98>
    5e4e:	1a 16       	cp	r1, r26
    5e50:	f0 40       	sbci	r31, 0x00	; 0
    5e52:	a2 2f       	mov	r26, r18
    5e54:	23 2f       	mov	r18, r19
    5e56:	34 2f       	mov	r19, r20
    5e58:	44 27       	eor	r20, r20
    5e5a:	58 5f       	subi	r21, 0xF8	; 248
    5e5c:	f3 cf       	rjmp	.-26     	; 0x5e44 <__addsf3x+0x34>
    5e5e:	46 95       	lsr	r20
    5e60:	37 95       	ror	r19
    5e62:	27 95       	ror	r18
    5e64:	a7 95       	ror	r26
    5e66:	f0 40       	sbci	r31, 0x00	; 0
    5e68:	53 95       	inc	r21
    5e6a:	c9 f7       	brne	.-14     	; 0x5e5e <__addsf3x+0x4e>
    5e6c:	7e f4       	brtc	.+30     	; 0x5e8c <__addsf3x+0x7c>
    5e6e:	1f 16       	cp	r1, r31
    5e70:	ba 0b       	sbc	r27, r26
    5e72:	62 0b       	sbc	r22, r18
    5e74:	73 0b       	sbc	r23, r19
    5e76:	84 0b       	sbc	r24, r20
    5e78:	ba f0       	brmi	.+46     	; 0x5ea8 <__addsf3x+0x98>
    5e7a:	91 50       	subi	r25, 0x01	; 1
    5e7c:	a1 f0       	breq	.+40     	; 0x5ea6 <__addsf3x+0x96>
    5e7e:	ff 0f       	add	r31, r31
    5e80:	bb 1f       	adc	r27, r27
    5e82:	66 1f       	adc	r22, r22
    5e84:	77 1f       	adc	r23, r23
    5e86:	88 1f       	adc	r24, r24
    5e88:	c2 f7       	brpl	.-16     	; 0x5e7a <__addsf3x+0x6a>
    5e8a:	0e c0       	rjmp	.+28     	; 0x5ea8 <__addsf3x+0x98>
    5e8c:	ba 0f       	add	r27, r26
    5e8e:	62 1f       	adc	r22, r18
    5e90:	73 1f       	adc	r23, r19
    5e92:	84 1f       	adc	r24, r20
    5e94:	48 f4       	brcc	.+18     	; 0x5ea8 <__addsf3x+0x98>
    5e96:	87 95       	ror	r24
    5e98:	77 95       	ror	r23
    5e9a:	67 95       	ror	r22
    5e9c:	b7 95       	ror	r27
    5e9e:	f7 95       	ror	r31
    5ea0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ea2:	08 f0       	brcs	.+2      	; 0x5ea6 <__addsf3x+0x96>
    5ea4:	b3 cf       	rjmp	.-154    	; 0x5e0c <__addsf3+0x1e>
    5ea6:	93 95       	inc	r25
    5ea8:	88 0f       	add	r24, r24
    5eaa:	08 f0       	brcs	.+2      	; 0x5eae <__addsf3x+0x9e>
    5eac:	99 27       	eor	r25, r25
    5eae:	ee 0f       	add	r30, r30
    5eb0:	97 95       	ror	r25
    5eb2:	87 95       	ror	r24
    5eb4:	08 95       	ret
    5eb6:	ec d1       	rcall	.+984    	; 0x6290 <__fp_pscA>
    5eb8:	58 f0       	brcs	.+22     	; 0x5ed0 <__addsf3x+0xc0>
    5eba:	80 e8       	ldi	r24, 0x80	; 128
    5ebc:	91 e0       	ldi	r25, 0x01	; 1
    5ebe:	09 f4       	brne	.+2      	; 0x5ec2 <__addsf3x+0xb2>
    5ec0:	9e ef       	ldi	r25, 0xFE	; 254
    5ec2:	ed d1       	rcall	.+986    	; 0x629e <__fp_pscB>
    5ec4:	28 f0       	brcs	.+10     	; 0x5ed0 <__addsf3x+0xc0>
    5ec6:	40 e8       	ldi	r20, 0x80	; 128
    5ec8:	51 e0       	ldi	r21, 0x01	; 1
    5eca:	59 f4       	brne	.+22     	; 0x5ee2 <atan2+0xe>
    5ecc:	5e ef       	ldi	r21, 0xFE	; 254
    5ece:	09 c0       	rjmp	.+18     	; 0x5ee2 <atan2+0xe>
    5ed0:	b7 c1       	rjmp	.+878    	; 0x6240 <__fp_nan>
    5ed2:	58 c2       	rjmp	.+1200   	; 0x6384 <__fp_zero>

00005ed4 <atan2>:
    5ed4:	e9 2f       	mov	r30, r25
    5ed6:	e0 78       	andi	r30, 0x80	; 128
    5ed8:	33 d2       	rcall	.+1126   	; 0x6340 <__fp_split3>
    5eda:	68 f3       	brcs	.-38     	; 0x5eb6 <__addsf3x+0xa6>
    5edc:	09 2e       	mov	r0, r25
    5ede:	05 2a       	or	r0, r21
    5ee0:	c1 f3       	breq	.-16     	; 0x5ed2 <__addsf3x+0xc2>
    5ee2:	26 17       	cp	r18, r22
    5ee4:	37 07       	cpc	r19, r23
    5ee6:	48 07       	cpc	r20, r24
    5ee8:	59 07       	cpc	r21, r25
    5eea:	38 f0       	brcs	.+14     	; 0x5efa <atan2+0x26>
    5eec:	0e 2e       	mov	r0, r30
    5eee:	07 f8       	bld	r0, 7
    5ef0:	e0 25       	eor	r30, r0
    5ef2:	69 f0       	breq	.+26     	; 0x5f0e <atan2+0x3a>
    5ef4:	e0 25       	eor	r30, r0
    5ef6:	e0 64       	ori	r30, 0x40	; 64
    5ef8:	0a c0       	rjmp	.+20     	; 0x5f0e <atan2+0x3a>
    5efa:	ef 63       	ori	r30, 0x3F	; 63
    5efc:	07 f8       	bld	r0, 7
    5efe:	00 94       	com	r0
    5f00:	07 fa       	bst	r0, 7
    5f02:	db 01       	movw	r26, r22
    5f04:	b9 01       	movw	r22, r18
    5f06:	9d 01       	movw	r18, r26
    5f08:	dc 01       	movw	r26, r24
    5f0a:	ca 01       	movw	r24, r20
    5f0c:	ad 01       	movw	r20, r26
    5f0e:	ef 93       	push	r30
    5f10:	4a d0       	rcall	.+148    	; 0x5fa6 <__divsf3_pse>
    5f12:	f4 d1       	rcall	.+1000   	; 0x62fc <__fp_round>
    5f14:	0a d0       	rcall	.+20     	; 0x5f2a <atan>
    5f16:	5f 91       	pop	r21
    5f18:	55 23       	and	r21, r21
    5f1a:	31 f0       	breq	.+12     	; 0x5f28 <atan2+0x54>
    5f1c:	2b ed       	ldi	r18, 0xDB	; 219
    5f1e:	3f e0       	ldi	r19, 0x0F	; 15
    5f20:	49 e4       	ldi	r20, 0x49	; 73
    5f22:	50 fd       	sbrc	r21, 0
    5f24:	49 ec       	ldi	r20, 0xC9	; 201
    5f26:	63 cf       	rjmp	.-314    	; 0x5dee <__addsf3>
    5f28:	08 95       	ret

00005f2a <atan>:
    5f2a:	df 93       	push	r29
    5f2c:	dd 27       	eor	r29, r29
    5f2e:	b9 2f       	mov	r27, r25
    5f30:	bf 77       	andi	r27, 0x7F	; 127
    5f32:	40 e8       	ldi	r20, 0x80	; 128
    5f34:	5f e3       	ldi	r21, 0x3F	; 63
    5f36:	16 16       	cp	r1, r22
    5f38:	17 06       	cpc	r1, r23
    5f3a:	48 07       	cpc	r20, r24
    5f3c:	5b 07       	cpc	r21, r27
    5f3e:	10 f4       	brcc	.+4      	; 0x5f44 <atan+0x1a>
    5f40:	d9 2f       	mov	r29, r25
    5f42:	2b d2       	rcall	.+1110   	; 0x639a <inverse>
    5f44:	9f 93       	push	r25
    5f46:	8f 93       	push	r24
    5f48:	7f 93       	push	r23
    5f4a:	6f 93       	push	r22
    5f4c:	d8 d2       	rcall	.+1456   	; 0x64fe <square>
    5f4e:	e6 e2       	ldi	r30, 0x26	; 38
    5f50:	f2 e0       	ldi	r31, 0x02	; 2
    5f52:	79 d1       	rcall	.+754    	; 0x6246 <__fp_powser>
    5f54:	d3 d1       	rcall	.+934    	; 0x62fc <__fp_round>
    5f56:	2f 91       	pop	r18
    5f58:	3f 91       	pop	r19
    5f5a:	4f 91       	pop	r20
    5f5c:	5f 91       	pop	r21
    5f5e:	30 d2       	rcall	.+1120   	; 0x63c0 <__mulsf3x>
    5f60:	dd 23       	and	r29, r29
    5f62:	49 f0       	breq	.+18     	; 0x5f76 <atan+0x4c>
    5f64:	90 58       	subi	r25, 0x80	; 128
    5f66:	a2 ea       	ldi	r26, 0xA2	; 162
    5f68:	2a ed       	ldi	r18, 0xDA	; 218
    5f6a:	3f e0       	ldi	r19, 0x0F	; 15
    5f6c:	49 ec       	ldi	r20, 0xC9	; 201
    5f6e:	5f e3       	ldi	r21, 0x3F	; 63
    5f70:	d0 78       	andi	r29, 0x80	; 128
    5f72:	5d 27       	eor	r21, r29
    5f74:	4d df       	rcall	.-358    	; 0x5e10 <__addsf3x>
    5f76:	df 91       	pop	r29
    5f78:	c1 c1       	rjmp	.+898    	; 0x62fc <__fp_round>

00005f7a <__cmpsf2>:
    5f7a:	2a d1       	rcall	.+596    	; 0x61d0 <__fp_cmp>
    5f7c:	08 f4       	brcc	.+2      	; 0x5f80 <__cmpsf2+0x6>
    5f7e:	81 e0       	ldi	r24, 0x01	; 1
    5f80:	08 95       	ret

00005f82 <cos>:
    5f82:	95 d1       	rcall	.+810    	; 0x62ae <__fp_rempio2>
    5f84:	e3 95       	inc	r30
    5f86:	cb c1       	rjmp	.+918    	; 0x631e <__fp_sinus>

00005f88 <__divsf3>:
    5f88:	0c d0       	rcall	.+24     	; 0x5fa2 <__divsf3x>
    5f8a:	b8 c1       	rjmp	.+880    	; 0x62fc <__fp_round>
    5f8c:	88 d1       	rcall	.+784    	; 0x629e <__fp_pscB>
    5f8e:	40 f0       	brcs	.+16     	; 0x5fa0 <__divsf3+0x18>
    5f90:	7f d1       	rcall	.+766    	; 0x6290 <__fp_pscA>
    5f92:	30 f0       	brcs	.+12     	; 0x5fa0 <__divsf3+0x18>
    5f94:	21 f4       	brne	.+8      	; 0x5f9e <__divsf3+0x16>
    5f96:	5f 3f       	cpi	r21, 0xFF	; 255
    5f98:	19 f0       	breq	.+6      	; 0x5fa0 <__divsf3+0x18>
    5f9a:	3e c1       	rjmp	.+636    	; 0x6218 <__fp_inf>
    5f9c:	51 11       	cpse	r21, r1
    5f9e:	f3 c1       	rjmp	.+998    	; 0x6386 <__fp_szero>
    5fa0:	4f c1       	rjmp	.+670    	; 0x6240 <__fp_nan>

00005fa2 <__divsf3x>:
    5fa2:	ce d1       	rcall	.+924    	; 0x6340 <__fp_split3>
    5fa4:	98 f3       	brcs	.-26     	; 0x5f8c <__divsf3+0x4>

00005fa6 <__divsf3_pse>:
    5fa6:	99 23       	and	r25, r25
    5fa8:	c9 f3       	breq	.-14     	; 0x5f9c <__divsf3+0x14>
    5faa:	55 23       	and	r21, r21
    5fac:	b1 f3       	breq	.-20     	; 0x5f9a <__divsf3+0x12>
    5fae:	95 1b       	sub	r25, r21
    5fb0:	55 0b       	sbc	r21, r21
    5fb2:	bb 27       	eor	r27, r27
    5fb4:	aa 27       	eor	r26, r26
    5fb6:	62 17       	cp	r22, r18
    5fb8:	73 07       	cpc	r23, r19
    5fba:	84 07       	cpc	r24, r20
    5fbc:	38 f0       	brcs	.+14     	; 0x5fcc <__divsf3_pse+0x26>
    5fbe:	9f 5f       	subi	r25, 0xFF	; 255
    5fc0:	5f 4f       	sbci	r21, 0xFF	; 255
    5fc2:	22 0f       	add	r18, r18
    5fc4:	33 1f       	adc	r19, r19
    5fc6:	44 1f       	adc	r20, r20
    5fc8:	aa 1f       	adc	r26, r26
    5fca:	a9 f3       	breq	.-22     	; 0x5fb6 <__divsf3_pse+0x10>
    5fcc:	33 d0       	rcall	.+102    	; 0x6034 <__divsf3_pse+0x8e>
    5fce:	0e 2e       	mov	r0, r30
    5fd0:	3a f0       	brmi	.+14     	; 0x5fe0 <__divsf3_pse+0x3a>
    5fd2:	e0 e8       	ldi	r30, 0x80	; 128
    5fd4:	30 d0       	rcall	.+96     	; 0x6036 <__divsf3_pse+0x90>
    5fd6:	91 50       	subi	r25, 0x01	; 1
    5fd8:	50 40       	sbci	r21, 0x00	; 0
    5fda:	e6 95       	lsr	r30
    5fdc:	00 1c       	adc	r0, r0
    5fde:	ca f7       	brpl	.-14     	; 0x5fd2 <__divsf3_pse+0x2c>
    5fe0:	29 d0       	rcall	.+82     	; 0x6034 <__divsf3_pse+0x8e>
    5fe2:	fe 2f       	mov	r31, r30
    5fe4:	27 d0       	rcall	.+78     	; 0x6034 <__divsf3_pse+0x8e>
    5fe6:	66 0f       	add	r22, r22
    5fe8:	77 1f       	adc	r23, r23
    5fea:	88 1f       	adc	r24, r24
    5fec:	bb 1f       	adc	r27, r27
    5fee:	26 17       	cp	r18, r22
    5ff0:	37 07       	cpc	r19, r23
    5ff2:	48 07       	cpc	r20, r24
    5ff4:	ab 07       	cpc	r26, r27
    5ff6:	b0 e8       	ldi	r27, 0x80	; 128
    5ff8:	09 f0       	breq	.+2      	; 0x5ffc <__divsf3_pse+0x56>
    5ffa:	bb 0b       	sbc	r27, r27
    5ffc:	80 2d       	mov	r24, r0
    5ffe:	bf 01       	movw	r22, r30
    6000:	ff 27       	eor	r31, r31
    6002:	93 58       	subi	r25, 0x83	; 131
    6004:	5f 4f       	sbci	r21, 0xFF	; 255
    6006:	2a f0       	brmi	.+10     	; 0x6012 <__divsf3_pse+0x6c>
    6008:	9e 3f       	cpi	r25, 0xFE	; 254
    600a:	51 05       	cpc	r21, r1
    600c:	68 f0       	brcs	.+26     	; 0x6028 <__divsf3_pse+0x82>
    600e:	04 c1       	rjmp	.+520    	; 0x6218 <__fp_inf>
    6010:	ba c1       	rjmp	.+884    	; 0x6386 <__fp_szero>
    6012:	5f 3f       	cpi	r21, 0xFF	; 255
    6014:	ec f3       	brlt	.-6      	; 0x6010 <__divsf3_pse+0x6a>
    6016:	98 3e       	cpi	r25, 0xE8	; 232
    6018:	dc f3       	brlt	.-10     	; 0x6010 <__divsf3_pse+0x6a>
    601a:	86 95       	lsr	r24
    601c:	77 95       	ror	r23
    601e:	67 95       	ror	r22
    6020:	b7 95       	ror	r27
    6022:	f7 95       	ror	r31
    6024:	9f 5f       	subi	r25, 0xFF	; 255
    6026:	c9 f7       	brne	.-14     	; 0x601a <__divsf3_pse+0x74>
    6028:	88 0f       	add	r24, r24
    602a:	91 1d       	adc	r25, r1
    602c:	96 95       	lsr	r25
    602e:	87 95       	ror	r24
    6030:	97 f9       	bld	r25, 7
    6032:	08 95       	ret
    6034:	e1 e0       	ldi	r30, 0x01	; 1
    6036:	66 0f       	add	r22, r22
    6038:	77 1f       	adc	r23, r23
    603a:	88 1f       	adc	r24, r24
    603c:	bb 1f       	adc	r27, r27
    603e:	62 17       	cp	r22, r18
    6040:	73 07       	cpc	r23, r19
    6042:	84 07       	cpc	r24, r20
    6044:	ba 07       	cpc	r27, r26
    6046:	20 f0       	brcs	.+8      	; 0x6050 <__divsf3_pse+0xaa>
    6048:	62 1b       	sub	r22, r18
    604a:	73 0b       	sbc	r23, r19
    604c:	84 0b       	sbc	r24, r20
    604e:	ba 0b       	sbc	r27, r26
    6050:	ee 1f       	adc	r30, r30
    6052:	88 f7       	brcc	.-30     	; 0x6036 <__divsf3_pse+0x90>
    6054:	e0 95       	com	r30
    6056:	08 95       	ret

00006058 <__fixsfsi>:
    6058:	04 d0       	rcall	.+8      	; 0x6062 <__fixunssfsi>
    605a:	68 94       	set
    605c:	b1 11       	cpse	r27, r1
    605e:	93 c1       	rjmp	.+806    	; 0x6386 <__fp_szero>
    6060:	08 95       	ret

00006062 <__fixunssfsi>:
    6062:	76 d1       	rcall	.+748    	; 0x6350 <__fp_splitA>
    6064:	88 f0       	brcs	.+34     	; 0x6088 <__fixunssfsi+0x26>
    6066:	9f 57       	subi	r25, 0x7F	; 127
    6068:	90 f0       	brcs	.+36     	; 0x608e <__fixunssfsi+0x2c>
    606a:	b9 2f       	mov	r27, r25
    606c:	99 27       	eor	r25, r25
    606e:	b7 51       	subi	r27, 0x17	; 23
    6070:	a0 f0       	brcs	.+40     	; 0x609a <__fixunssfsi+0x38>
    6072:	d1 f0       	breq	.+52     	; 0x60a8 <__fixunssfsi+0x46>
    6074:	66 0f       	add	r22, r22
    6076:	77 1f       	adc	r23, r23
    6078:	88 1f       	adc	r24, r24
    607a:	99 1f       	adc	r25, r25
    607c:	1a f0       	brmi	.+6      	; 0x6084 <__fixunssfsi+0x22>
    607e:	ba 95       	dec	r27
    6080:	c9 f7       	brne	.-14     	; 0x6074 <__fixunssfsi+0x12>
    6082:	12 c0       	rjmp	.+36     	; 0x60a8 <__fixunssfsi+0x46>
    6084:	b1 30       	cpi	r27, 0x01	; 1
    6086:	81 f0       	breq	.+32     	; 0x60a8 <__fixunssfsi+0x46>
    6088:	7d d1       	rcall	.+762    	; 0x6384 <__fp_zero>
    608a:	b1 e0       	ldi	r27, 0x01	; 1
    608c:	08 95       	ret
    608e:	7a c1       	rjmp	.+756    	; 0x6384 <__fp_zero>
    6090:	67 2f       	mov	r22, r23
    6092:	78 2f       	mov	r23, r24
    6094:	88 27       	eor	r24, r24
    6096:	b8 5f       	subi	r27, 0xF8	; 248
    6098:	39 f0       	breq	.+14     	; 0x60a8 <__fixunssfsi+0x46>
    609a:	b9 3f       	cpi	r27, 0xF9	; 249
    609c:	cc f3       	brlt	.-14     	; 0x6090 <__fixunssfsi+0x2e>
    609e:	86 95       	lsr	r24
    60a0:	77 95       	ror	r23
    60a2:	67 95       	ror	r22
    60a4:	b3 95       	inc	r27
    60a6:	d9 f7       	brne	.-10     	; 0x609e <__fixunssfsi+0x3c>
    60a8:	3e f4       	brtc	.+14     	; 0x60b8 <__fixunssfsi+0x56>
    60aa:	90 95       	com	r25
    60ac:	80 95       	com	r24
    60ae:	70 95       	com	r23
    60b0:	61 95       	neg	r22
    60b2:	7f 4f       	sbci	r23, 0xFF	; 255
    60b4:	8f 4f       	sbci	r24, 0xFF	; 255
    60b6:	9f 4f       	sbci	r25, 0xFF	; 255
    60b8:	08 95       	ret

000060ba <__floatunsisf>:
    60ba:	e8 94       	clt
    60bc:	09 c0       	rjmp	.+18     	; 0x60d0 <__floatsisf+0x12>

000060be <__floatsisf>:
    60be:	97 fb       	bst	r25, 7
    60c0:	3e f4       	brtc	.+14     	; 0x60d0 <__floatsisf+0x12>
    60c2:	90 95       	com	r25
    60c4:	80 95       	com	r24
    60c6:	70 95       	com	r23
    60c8:	61 95       	neg	r22
    60ca:	7f 4f       	sbci	r23, 0xFF	; 255
    60cc:	8f 4f       	sbci	r24, 0xFF	; 255
    60ce:	9f 4f       	sbci	r25, 0xFF	; 255
    60d0:	99 23       	and	r25, r25
    60d2:	a9 f0       	breq	.+42     	; 0x60fe <__floatsisf+0x40>
    60d4:	f9 2f       	mov	r31, r25
    60d6:	96 e9       	ldi	r25, 0x96	; 150
    60d8:	bb 27       	eor	r27, r27
    60da:	93 95       	inc	r25
    60dc:	f6 95       	lsr	r31
    60de:	87 95       	ror	r24
    60e0:	77 95       	ror	r23
    60e2:	67 95       	ror	r22
    60e4:	b7 95       	ror	r27
    60e6:	f1 11       	cpse	r31, r1
    60e8:	f8 cf       	rjmp	.-16     	; 0x60da <__floatsisf+0x1c>
    60ea:	fa f4       	brpl	.+62     	; 0x612a <__floatsisf+0x6c>
    60ec:	bb 0f       	add	r27, r27
    60ee:	11 f4       	brne	.+4      	; 0x60f4 <__floatsisf+0x36>
    60f0:	60 ff       	sbrs	r22, 0
    60f2:	1b c0       	rjmp	.+54     	; 0x612a <__floatsisf+0x6c>
    60f4:	6f 5f       	subi	r22, 0xFF	; 255
    60f6:	7f 4f       	sbci	r23, 0xFF	; 255
    60f8:	8f 4f       	sbci	r24, 0xFF	; 255
    60fa:	9f 4f       	sbci	r25, 0xFF	; 255
    60fc:	16 c0       	rjmp	.+44     	; 0x612a <__floatsisf+0x6c>
    60fe:	88 23       	and	r24, r24
    6100:	11 f0       	breq	.+4      	; 0x6106 <__floatsisf+0x48>
    6102:	96 e9       	ldi	r25, 0x96	; 150
    6104:	11 c0       	rjmp	.+34     	; 0x6128 <__floatsisf+0x6a>
    6106:	77 23       	and	r23, r23
    6108:	21 f0       	breq	.+8      	; 0x6112 <__floatsisf+0x54>
    610a:	9e e8       	ldi	r25, 0x8E	; 142
    610c:	87 2f       	mov	r24, r23
    610e:	76 2f       	mov	r23, r22
    6110:	05 c0       	rjmp	.+10     	; 0x611c <__floatsisf+0x5e>
    6112:	66 23       	and	r22, r22
    6114:	71 f0       	breq	.+28     	; 0x6132 <__floatsisf+0x74>
    6116:	96 e8       	ldi	r25, 0x86	; 134
    6118:	86 2f       	mov	r24, r22
    611a:	70 e0       	ldi	r23, 0x00	; 0
    611c:	60 e0       	ldi	r22, 0x00	; 0
    611e:	2a f0       	brmi	.+10     	; 0x612a <__floatsisf+0x6c>
    6120:	9a 95       	dec	r25
    6122:	66 0f       	add	r22, r22
    6124:	77 1f       	adc	r23, r23
    6126:	88 1f       	adc	r24, r24
    6128:	da f7       	brpl	.-10     	; 0x6120 <__floatsisf+0x62>
    612a:	88 0f       	add	r24, r24
    612c:	96 95       	lsr	r25
    612e:	87 95       	ror	r24
    6130:	97 f9       	bld	r25, 7
    6132:	08 95       	ret
    6134:	ad d0       	rcall	.+346    	; 0x6290 <__fp_pscA>
    6136:	18 f0       	brcs	.+6      	; 0x613e <__floatsisf+0x80>
    6138:	11 f0       	breq	.+4      	; 0x613e <__floatsisf+0x80>
    613a:	b1 d0       	rcall	.+354    	; 0x629e <__fp_pscB>
    613c:	38 f4       	brcc	.+14     	; 0x614c <fmod+0xa>
    613e:	80 c0       	rjmp	.+256    	; 0x6240 <__fp_nan>
    6140:	22 c1       	rjmp	.+580    	; 0x6386 <__fp_szero>

00006142 <fmod>:
    6142:	e9 2f       	mov	r30, r25
    6144:	fd d0       	rcall	.+506    	; 0x6340 <__fp_split3>
    6146:	b0 f3       	brcs	.-20     	; 0x6134 <__floatsisf+0x76>
    6148:	55 23       	and	r21, r21
    614a:	c9 f3       	breq	.-14     	; 0x613e <__floatsisf+0x80>
    614c:	e7 fb       	bst	r30, 7
    614e:	62 17       	cp	r22, r18
    6150:	73 07       	cpc	r23, r19
    6152:	84 07       	cpc	r24, r20
    6154:	95 07       	cpc	r25, r21
    6156:	a8 f1       	brcs	.+106    	; 0x61c2 <fmod+0x80>
    6158:	99 f3       	breq	.-26     	; 0x6140 <__floatsisf+0x82>
    615a:	e9 2f       	mov	r30, r25
    615c:	ff 27       	eor	r31, r31
    615e:	88 23       	and	r24, r24
    6160:	2a f0       	brmi	.+10     	; 0x616c <fmod+0x2a>
    6162:	31 97       	sbiw	r30, 0x01	; 1
    6164:	66 0f       	add	r22, r22
    6166:	77 1f       	adc	r23, r23
    6168:	88 1f       	adc	r24, r24
    616a:	da f7       	brpl	.-10     	; 0x6162 <fmod+0x20>
    616c:	95 2f       	mov	r25, r21
    616e:	55 27       	eor	r21, r21
    6170:	44 23       	and	r20, r20
    6172:	32 f0       	brmi	.+12     	; 0x6180 <fmod+0x3e>
    6174:	91 50       	subi	r25, 0x01	; 1
    6176:	50 40       	sbci	r21, 0x00	; 0
    6178:	22 0f       	add	r18, r18
    617a:	33 1f       	adc	r19, r19
    617c:	44 1f       	adc	r20, r20
    617e:	d2 f7       	brpl	.-12     	; 0x6174 <fmod+0x32>
    6180:	bb 27       	eor	r27, r27
    6182:	e9 1b       	sub	r30, r25
    6184:	f5 0b       	sbc	r31, r21
    6186:	62 1b       	sub	r22, r18
    6188:	73 0b       	sbc	r23, r19
    618a:	84 0b       	sbc	r24, r20
    618c:	b1 09       	sbc	r27, r1
    618e:	c1 f2       	breq	.-80     	; 0x6140 <__floatsisf+0x82>
    6190:	22 f4       	brpl	.+8      	; 0x619a <fmod+0x58>
    6192:	62 0f       	add	r22, r18
    6194:	73 1f       	adc	r23, r19
    6196:	84 1f       	adc	r24, r20
    6198:	b1 1d       	adc	r27, r1
    619a:	31 97       	sbiw	r30, 0x01	; 1
    619c:	2a f0       	brmi	.+10     	; 0x61a8 <fmod+0x66>
    619e:	66 0f       	add	r22, r22
    61a0:	77 1f       	adc	r23, r23
    61a2:	88 1f       	adc	r24, r24
    61a4:	bb 1f       	adc	r27, r27
    61a6:	ef cf       	rjmp	.-34     	; 0x6186 <fmod+0x44>
    61a8:	91 50       	subi	r25, 0x01	; 1
    61aa:	50 40       	sbci	r21, 0x00	; 0
    61ac:	5a f0       	brmi	.+22     	; 0x61c4 <fmod+0x82>
    61ae:	41 f0       	breq	.+16     	; 0x61c0 <fmod+0x7e>
    61b0:	88 23       	and	r24, r24
    61b2:	32 f0       	brmi	.+12     	; 0x61c0 <fmod+0x7e>
    61b4:	66 0f       	add	r22, r22
    61b6:	77 1f       	adc	r23, r23
    61b8:	88 1f       	adc	r24, r24
    61ba:	91 50       	subi	r25, 0x01	; 1
    61bc:	50 40       	sbci	r21, 0x00	; 0
    61be:	c1 f7       	brne	.-16     	; 0x61b0 <fmod+0x6e>
    61c0:	93 95       	inc	r25
    61c2:	30 c0       	rjmp	.+96     	; 0x6224 <__fp_mpack>
    61c4:	86 95       	lsr	r24
    61c6:	77 95       	ror	r23
    61c8:	67 95       	ror	r22
    61ca:	9f 5f       	subi	r25, 0xFF	; 255
    61cc:	d9 f7       	brne	.-10     	; 0x61c4 <fmod+0x82>
    61ce:	f8 cf       	rjmp	.-16     	; 0x61c0 <fmod+0x7e>

000061d0 <__fp_cmp>:
    61d0:	99 0f       	add	r25, r25
    61d2:	00 08       	sbc	r0, r0
    61d4:	55 0f       	add	r21, r21
    61d6:	aa 0b       	sbc	r26, r26
    61d8:	e0 e8       	ldi	r30, 0x80	; 128
    61da:	fe ef       	ldi	r31, 0xFE	; 254
    61dc:	16 16       	cp	r1, r22
    61de:	17 06       	cpc	r1, r23
    61e0:	e8 07       	cpc	r30, r24
    61e2:	f9 07       	cpc	r31, r25
    61e4:	c0 f0       	brcs	.+48     	; 0x6216 <__fp_cmp+0x46>
    61e6:	12 16       	cp	r1, r18
    61e8:	13 06       	cpc	r1, r19
    61ea:	e4 07       	cpc	r30, r20
    61ec:	f5 07       	cpc	r31, r21
    61ee:	98 f0       	brcs	.+38     	; 0x6216 <__fp_cmp+0x46>
    61f0:	62 1b       	sub	r22, r18
    61f2:	73 0b       	sbc	r23, r19
    61f4:	84 0b       	sbc	r24, r20
    61f6:	95 0b       	sbc	r25, r21
    61f8:	39 f4       	brne	.+14     	; 0x6208 <__fp_cmp+0x38>
    61fa:	0a 26       	eor	r0, r26
    61fc:	61 f0       	breq	.+24     	; 0x6216 <__fp_cmp+0x46>
    61fe:	23 2b       	or	r18, r19
    6200:	24 2b       	or	r18, r20
    6202:	25 2b       	or	r18, r21
    6204:	21 f4       	brne	.+8      	; 0x620e <__fp_cmp+0x3e>
    6206:	08 95       	ret
    6208:	0a 26       	eor	r0, r26
    620a:	09 f4       	brne	.+2      	; 0x620e <__fp_cmp+0x3e>
    620c:	a1 40       	sbci	r26, 0x01	; 1
    620e:	a6 95       	lsr	r26
    6210:	8f ef       	ldi	r24, 0xFF	; 255
    6212:	81 1d       	adc	r24, r1
    6214:	81 1d       	adc	r24, r1
    6216:	08 95       	ret

00006218 <__fp_inf>:
    6218:	97 f9       	bld	r25, 7
    621a:	9f 67       	ori	r25, 0x7F	; 127
    621c:	80 e8       	ldi	r24, 0x80	; 128
    621e:	70 e0       	ldi	r23, 0x00	; 0
    6220:	60 e0       	ldi	r22, 0x00	; 0
    6222:	08 95       	ret

00006224 <__fp_mpack>:
    6224:	9f 3f       	cpi	r25, 0xFF	; 255
    6226:	31 f0       	breq	.+12     	; 0x6234 <__fp_mpack_finite+0xc>

00006228 <__fp_mpack_finite>:
    6228:	91 50       	subi	r25, 0x01	; 1
    622a:	20 f4       	brcc	.+8      	; 0x6234 <__fp_mpack_finite+0xc>
    622c:	87 95       	ror	r24
    622e:	77 95       	ror	r23
    6230:	67 95       	ror	r22
    6232:	b7 95       	ror	r27
    6234:	88 0f       	add	r24, r24
    6236:	91 1d       	adc	r25, r1
    6238:	96 95       	lsr	r25
    623a:	87 95       	ror	r24
    623c:	97 f9       	bld	r25, 7
    623e:	08 95       	ret

00006240 <__fp_nan>:
    6240:	9f ef       	ldi	r25, 0xFF	; 255
    6242:	80 ec       	ldi	r24, 0xC0	; 192
    6244:	08 95       	ret

00006246 <__fp_powser>:
    6246:	df 93       	push	r29
    6248:	cf 93       	push	r28
    624a:	1f 93       	push	r17
    624c:	0f 93       	push	r16
    624e:	ff 92       	push	r15
    6250:	ef 92       	push	r14
    6252:	df 92       	push	r13
    6254:	7b 01       	movw	r14, r22
    6256:	8c 01       	movw	r16, r24
    6258:	68 94       	set
    625a:	05 c0       	rjmp	.+10     	; 0x6266 <__fp_powser+0x20>
    625c:	da 2e       	mov	r13, r26
    625e:	ef 01       	movw	r28, r30
    6260:	af d0       	rcall	.+350    	; 0x63c0 <__mulsf3x>
    6262:	fe 01       	movw	r30, r28
    6264:	e8 94       	clt
    6266:	a5 91       	lpm	r26, Z+
    6268:	25 91       	lpm	r18, Z+
    626a:	35 91       	lpm	r19, Z+
    626c:	45 91       	lpm	r20, Z+
    626e:	55 91       	lpm	r21, Z+
    6270:	ae f3       	brts	.-22     	; 0x625c <__fp_powser+0x16>
    6272:	ef 01       	movw	r28, r30
    6274:	cd dd       	rcall	.-1126   	; 0x5e10 <__addsf3x>
    6276:	fe 01       	movw	r30, r28
    6278:	97 01       	movw	r18, r14
    627a:	a8 01       	movw	r20, r16
    627c:	da 94       	dec	r13
    627e:	79 f7       	brne	.-34     	; 0x625e <__fp_powser+0x18>
    6280:	df 90       	pop	r13
    6282:	ef 90       	pop	r14
    6284:	ff 90       	pop	r15
    6286:	0f 91       	pop	r16
    6288:	1f 91       	pop	r17
    628a:	cf 91       	pop	r28
    628c:	df 91       	pop	r29
    628e:	08 95       	ret

00006290 <__fp_pscA>:
    6290:	00 24       	eor	r0, r0
    6292:	0a 94       	dec	r0
    6294:	16 16       	cp	r1, r22
    6296:	17 06       	cpc	r1, r23
    6298:	18 06       	cpc	r1, r24
    629a:	09 06       	cpc	r0, r25
    629c:	08 95       	ret

0000629e <__fp_pscB>:
    629e:	00 24       	eor	r0, r0
    62a0:	0a 94       	dec	r0
    62a2:	12 16       	cp	r1, r18
    62a4:	13 06       	cpc	r1, r19
    62a6:	14 06       	cpc	r1, r20
    62a8:	05 06       	cpc	r0, r21
    62aa:	08 95       	ret
    62ac:	c9 cf       	rjmp	.-110    	; 0x6240 <__fp_nan>

000062ae <__fp_rempio2>:
    62ae:	50 d0       	rcall	.+160    	; 0x6350 <__fp_splitA>
    62b0:	e8 f3       	brcs	.-6      	; 0x62ac <__fp_pscB+0xe>
    62b2:	e8 94       	clt
    62b4:	e0 e0       	ldi	r30, 0x00	; 0
    62b6:	bb 27       	eor	r27, r27
    62b8:	9f 57       	subi	r25, 0x7F	; 127
    62ba:	f0 f0       	brcs	.+60     	; 0x62f8 <__fp_rempio2+0x4a>
    62bc:	2a ed       	ldi	r18, 0xDA	; 218
    62be:	3f e0       	ldi	r19, 0x0F	; 15
    62c0:	49 ec       	ldi	r20, 0xC9	; 201
    62c2:	06 c0       	rjmp	.+12     	; 0x62d0 <__fp_rempio2+0x22>
    62c4:	ee 0f       	add	r30, r30
    62c6:	bb 0f       	add	r27, r27
    62c8:	66 1f       	adc	r22, r22
    62ca:	77 1f       	adc	r23, r23
    62cc:	88 1f       	adc	r24, r24
    62ce:	28 f0       	brcs	.+10     	; 0x62da <__fp_rempio2+0x2c>
    62d0:	b2 3a       	cpi	r27, 0xA2	; 162
    62d2:	62 07       	cpc	r22, r18
    62d4:	73 07       	cpc	r23, r19
    62d6:	84 07       	cpc	r24, r20
    62d8:	28 f0       	brcs	.+10     	; 0x62e4 <__fp_rempio2+0x36>
    62da:	b2 5a       	subi	r27, 0xA2	; 162
    62dc:	62 0b       	sbc	r22, r18
    62de:	73 0b       	sbc	r23, r19
    62e0:	84 0b       	sbc	r24, r20
    62e2:	e3 95       	inc	r30
    62e4:	9a 95       	dec	r25
    62e6:	72 f7       	brpl	.-36     	; 0x62c4 <__fp_rempio2+0x16>
    62e8:	80 38       	cpi	r24, 0x80	; 128
    62ea:	30 f4       	brcc	.+12     	; 0x62f8 <__fp_rempio2+0x4a>
    62ec:	9a 95       	dec	r25
    62ee:	bb 0f       	add	r27, r27
    62f0:	66 1f       	adc	r22, r22
    62f2:	77 1f       	adc	r23, r23
    62f4:	88 1f       	adc	r24, r24
    62f6:	d2 f7       	brpl	.-12     	; 0x62ec <__fp_rempio2+0x3e>
    62f8:	90 48       	sbci	r25, 0x80	; 128
    62fa:	96 cf       	rjmp	.-212    	; 0x6228 <__fp_mpack_finite>

000062fc <__fp_round>:
    62fc:	09 2e       	mov	r0, r25
    62fe:	03 94       	inc	r0
    6300:	00 0c       	add	r0, r0
    6302:	11 f4       	brne	.+4      	; 0x6308 <__fp_round+0xc>
    6304:	88 23       	and	r24, r24
    6306:	52 f0       	brmi	.+20     	; 0x631c <__fp_round+0x20>
    6308:	bb 0f       	add	r27, r27
    630a:	40 f4       	brcc	.+16     	; 0x631c <__fp_round+0x20>
    630c:	bf 2b       	or	r27, r31
    630e:	11 f4       	brne	.+4      	; 0x6314 <__fp_round+0x18>
    6310:	60 ff       	sbrs	r22, 0
    6312:	04 c0       	rjmp	.+8      	; 0x631c <__fp_round+0x20>
    6314:	6f 5f       	subi	r22, 0xFF	; 255
    6316:	7f 4f       	sbci	r23, 0xFF	; 255
    6318:	8f 4f       	sbci	r24, 0xFF	; 255
    631a:	9f 4f       	sbci	r25, 0xFF	; 255
    631c:	08 95       	ret

0000631e <__fp_sinus>:
    631e:	ef 93       	push	r30
    6320:	e0 ff       	sbrs	r30, 0
    6322:	06 c0       	rjmp	.+12     	; 0x6330 <__fp_sinus+0x12>
    6324:	a2 ea       	ldi	r26, 0xA2	; 162
    6326:	2a ed       	ldi	r18, 0xDA	; 218
    6328:	3f e0       	ldi	r19, 0x0F	; 15
    632a:	49 ec       	ldi	r20, 0xC9	; 201
    632c:	5f eb       	ldi	r21, 0xBF	; 191
    632e:	70 dd       	rcall	.-1312   	; 0x5e10 <__addsf3x>
    6330:	e5 df       	rcall	.-54     	; 0x62fc <__fp_round>
    6332:	0f 90       	pop	r0
    6334:	03 94       	inc	r0
    6336:	01 fc       	sbrc	r0, 1
    6338:	90 58       	subi	r25, 0x80	; 128
    633a:	e3 e5       	ldi	r30, 0x53	; 83
    633c:	f2 e0       	ldi	r31, 0x02	; 2
    633e:	e9 c0       	rjmp	.+466    	; 0x6512 <__fp_powsodd>

00006340 <__fp_split3>:
    6340:	57 fd       	sbrc	r21, 7
    6342:	90 58       	subi	r25, 0x80	; 128
    6344:	44 0f       	add	r20, r20
    6346:	55 1f       	adc	r21, r21
    6348:	59 f0       	breq	.+22     	; 0x6360 <__fp_splitA+0x10>
    634a:	5f 3f       	cpi	r21, 0xFF	; 255
    634c:	71 f0       	breq	.+28     	; 0x636a <__fp_splitA+0x1a>
    634e:	47 95       	ror	r20

00006350 <__fp_splitA>:
    6350:	88 0f       	add	r24, r24
    6352:	97 fb       	bst	r25, 7
    6354:	99 1f       	adc	r25, r25
    6356:	61 f0       	breq	.+24     	; 0x6370 <__fp_splitA+0x20>
    6358:	9f 3f       	cpi	r25, 0xFF	; 255
    635a:	79 f0       	breq	.+30     	; 0x637a <__fp_splitA+0x2a>
    635c:	87 95       	ror	r24
    635e:	08 95       	ret
    6360:	12 16       	cp	r1, r18
    6362:	13 06       	cpc	r1, r19
    6364:	14 06       	cpc	r1, r20
    6366:	55 1f       	adc	r21, r21
    6368:	f2 cf       	rjmp	.-28     	; 0x634e <__fp_split3+0xe>
    636a:	46 95       	lsr	r20
    636c:	f1 df       	rcall	.-30     	; 0x6350 <__fp_splitA>
    636e:	08 c0       	rjmp	.+16     	; 0x6380 <__fp_splitA+0x30>
    6370:	16 16       	cp	r1, r22
    6372:	17 06       	cpc	r1, r23
    6374:	18 06       	cpc	r1, r24
    6376:	99 1f       	adc	r25, r25
    6378:	f1 cf       	rjmp	.-30     	; 0x635c <__fp_splitA+0xc>
    637a:	86 95       	lsr	r24
    637c:	71 05       	cpc	r23, r1
    637e:	61 05       	cpc	r22, r1
    6380:	08 94       	sec
    6382:	08 95       	ret

00006384 <__fp_zero>:
    6384:	e8 94       	clt

00006386 <__fp_szero>:
    6386:	bb 27       	eor	r27, r27
    6388:	66 27       	eor	r22, r22
    638a:	77 27       	eor	r23, r23
    638c:	cb 01       	movw	r24, r22
    638e:	97 f9       	bld	r25, 7
    6390:	08 95       	ret

00006392 <__gesf2>:
    6392:	1e df       	rcall	.-452    	; 0x61d0 <__fp_cmp>
    6394:	08 f4       	brcc	.+2      	; 0x6398 <__gesf2+0x6>
    6396:	8f ef       	ldi	r24, 0xFF	; 255
    6398:	08 95       	ret

0000639a <inverse>:
    639a:	9b 01       	movw	r18, r22
    639c:	ac 01       	movw	r20, r24
    639e:	60 e0       	ldi	r22, 0x00	; 0
    63a0:	70 e0       	ldi	r23, 0x00	; 0
    63a2:	80 e8       	ldi	r24, 0x80	; 128
    63a4:	9f e3       	ldi	r25, 0x3F	; 63
    63a6:	f0 cd       	rjmp	.-1056   	; 0x5f88 <__divsf3>

000063a8 <__mulsf3>:
    63a8:	0b d0       	rcall	.+22     	; 0x63c0 <__mulsf3x>
    63aa:	a8 cf       	rjmp	.-176    	; 0x62fc <__fp_round>
    63ac:	71 df       	rcall	.-286    	; 0x6290 <__fp_pscA>
    63ae:	28 f0       	brcs	.+10     	; 0x63ba <__mulsf3+0x12>
    63b0:	76 df       	rcall	.-276    	; 0x629e <__fp_pscB>
    63b2:	18 f0       	brcs	.+6      	; 0x63ba <__mulsf3+0x12>
    63b4:	95 23       	and	r25, r21
    63b6:	09 f0       	breq	.+2      	; 0x63ba <__mulsf3+0x12>
    63b8:	2f cf       	rjmp	.-418    	; 0x6218 <__fp_inf>
    63ba:	42 cf       	rjmp	.-380    	; 0x6240 <__fp_nan>
    63bc:	11 24       	eor	r1, r1
    63be:	e3 cf       	rjmp	.-58     	; 0x6386 <__fp_szero>

000063c0 <__mulsf3x>:
    63c0:	bf df       	rcall	.-130    	; 0x6340 <__fp_split3>
    63c2:	a0 f3       	brcs	.-24     	; 0x63ac <__mulsf3+0x4>

000063c4 <__mulsf3_pse>:
    63c4:	95 9f       	mul	r25, r21
    63c6:	d1 f3       	breq	.-12     	; 0x63bc <__mulsf3+0x14>
    63c8:	95 0f       	add	r25, r21
    63ca:	50 e0       	ldi	r21, 0x00	; 0
    63cc:	55 1f       	adc	r21, r21
    63ce:	62 9f       	mul	r22, r18
    63d0:	f0 01       	movw	r30, r0
    63d2:	72 9f       	mul	r23, r18
    63d4:	bb 27       	eor	r27, r27
    63d6:	f0 0d       	add	r31, r0
    63d8:	b1 1d       	adc	r27, r1
    63da:	63 9f       	mul	r22, r19
    63dc:	aa 27       	eor	r26, r26
    63de:	f0 0d       	add	r31, r0
    63e0:	b1 1d       	adc	r27, r1
    63e2:	aa 1f       	adc	r26, r26
    63e4:	64 9f       	mul	r22, r20
    63e6:	66 27       	eor	r22, r22
    63e8:	b0 0d       	add	r27, r0
    63ea:	a1 1d       	adc	r26, r1
    63ec:	66 1f       	adc	r22, r22
    63ee:	82 9f       	mul	r24, r18
    63f0:	22 27       	eor	r18, r18
    63f2:	b0 0d       	add	r27, r0
    63f4:	a1 1d       	adc	r26, r1
    63f6:	62 1f       	adc	r22, r18
    63f8:	73 9f       	mul	r23, r19
    63fa:	b0 0d       	add	r27, r0
    63fc:	a1 1d       	adc	r26, r1
    63fe:	62 1f       	adc	r22, r18
    6400:	83 9f       	mul	r24, r19
    6402:	a0 0d       	add	r26, r0
    6404:	61 1d       	adc	r22, r1
    6406:	22 1f       	adc	r18, r18
    6408:	74 9f       	mul	r23, r20
    640a:	33 27       	eor	r19, r19
    640c:	a0 0d       	add	r26, r0
    640e:	61 1d       	adc	r22, r1
    6410:	23 1f       	adc	r18, r19
    6412:	84 9f       	mul	r24, r20
    6414:	60 0d       	add	r22, r0
    6416:	21 1d       	adc	r18, r1
    6418:	82 2f       	mov	r24, r18
    641a:	76 2f       	mov	r23, r22
    641c:	6a 2f       	mov	r22, r26
    641e:	11 24       	eor	r1, r1
    6420:	9f 57       	subi	r25, 0x7F	; 127
    6422:	50 40       	sbci	r21, 0x00	; 0
    6424:	8a f0       	brmi	.+34     	; 0x6448 <__mulsf3_pse+0x84>
    6426:	e1 f0       	breq	.+56     	; 0x6460 <__mulsf3_pse+0x9c>
    6428:	88 23       	and	r24, r24
    642a:	4a f0       	brmi	.+18     	; 0x643e <__mulsf3_pse+0x7a>
    642c:	ee 0f       	add	r30, r30
    642e:	ff 1f       	adc	r31, r31
    6430:	bb 1f       	adc	r27, r27
    6432:	66 1f       	adc	r22, r22
    6434:	77 1f       	adc	r23, r23
    6436:	88 1f       	adc	r24, r24
    6438:	91 50       	subi	r25, 0x01	; 1
    643a:	50 40       	sbci	r21, 0x00	; 0
    643c:	a9 f7       	brne	.-22     	; 0x6428 <__mulsf3_pse+0x64>
    643e:	9e 3f       	cpi	r25, 0xFE	; 254
    6440:	51 05       	cpc	r21, r1
    6442:	70 f0       	brcs	.+28     	; 0x6460 <__mulsf3_pse+0x9c>
    6444:	e9 ce       	rjmp	.-558    	; 0x6218 <__fp_inf>
    6446:	9f cf       	rjmp	.-194    	; 0x6386 <__fp_szero>
    6448:	5f 3f       	cpi	r21, 0xFF	; 255
    644a:	ec f3       	brlt	.-6      	; 0x6446 <__mulsf3_pse+0x82>
    644c:	98 3e       	cpi	r25, 0xE8	; 232
    644e:	dc f3       	brlt	.-10     	; 0x6446 <__mulsf3_pse+0x82>
    6450:	86 95       	lsr	r24
    6452:	77 95       	ror	r23
    6454:	67 95       	ror	r22
    6456:	b7 95       	ror	r27
    6458:	f7 95       	ror	r31
    645a:	e7 95       	ror	r30
    645c:	9f 5f       	subi	r25, 0xFF	; 255
    645e:	c1 f7       	brne	.-16     	; 0x6450 <__mulsf3_pse+0x8c>
    6460:	fe 2b       	or	r31, r30
    6462:	88 0f       	add	r24, r24
    6464:	91 1d       	adc	r25, r1
    6466:	96 95       	lsr	r25
    6468:	87 95       	ror	r24
    646a:	97 f9       	bld	r25, 7
    646c:	08 95       	ret

0000646e <sin>:
    646e:	9f 93       	push	r25
    6470:	1e df       	rcall	.-452    	; 0x62ae <__fp_rempio2>
    6472:	0f 90       	pop	r0
    6474:	07 fc       	sbrc	r0, 7
    6476:	ee 5f       	subi	r30, 0xFE	; 254
    6478:	52 cf       	rjmp	.-348    	; 0x631e <__fp_sinus>
    647a:	11 f4       	brne	.+4      	; 0x6480 <sin+0x12>
    647c:	0e f4       	brtc	.+2      	; 0x6480 <sin+0x12>
    647e:	e0 ce       	rjmp	.-576    	; 0x6240 <__fp_nan>
    6480:	d1 ce       	rjmp	.-606    	; 0x6224 <__fp_mpack>

00006482 <sqrt>:
    6482:	66 df       	rcall	.-308    	; 0x6350 <__fp_splitA>
    6484:	d0 f3       	brcs	.-12     	; 0x647a <sin+0xc>
    6486:	99 23       	and	r25, r25
    6488:	d9 f3       	breq	.-10     	; 0x6480 <sin+0x12>
    648a:	ce f3       	brts	.-14     	; 0x647e <sin+0x10>
    648c:	9f 57       	subi	r25, 0x7F	; 127
    648e:	55 0b       	sbc	r21, r21
    6490:	87 ff       	sbrs	r24, 7
    6492:	38 d0       	rcall	.+112    	; 0x6504 <__fp_norm2>
    6494:	00 24       	eor	r0, r0
    6496:	a0 e6       	ldi	r26, 0x60	; 96
    6498:	40 ea       	ldi	r20, 0xA0	; 160
    649a:	90 01       	movw	r18, r0
    649c:	80 58       	subi	r24, 0x80	; 128
    649e:	56 95       	lsr	r21
    64a0:	97 95       	ror	r25
    64a2:	28 f4       	brcc	.+10     	; 0x64ae <sqrt+0x2c>
    64a4:	80 5c       	subi	r24, 0xC0	; 192
    64a6:	66 0f       	add	r22, r22
    64a8:	77 1f       	adc	r23, r23
    64aa:	88 1f       	adc	r24, r24
    64ac:	20 f0       	brcs	.+8      	; 0x64b6 <sqrt+0x34>
    64ae:	26 17       	cp	r18, r22
    64b0:	37 07       	cpc	r19, r23
    64b2:	48 07       	cpc	r20, r24
    64b4:	30 f4       	brcc	.+12     	; 0x64c2 <sqrt+0x40>
    64b6:	62 1b       	sub	r22, r18
    64b8:	73 0b       	sbc	r23, r19
    64ba:	84 0b       	sbc	r24, r20
    64bc:	20 29       	or	r18, r0
    64be:	31 29       	or	r19, r1
    64c0:	4a 2b       	or	r20, r26
    64c2:	a6 95       	lsr	r26
    64c4:	17 94       	ror	r1
    64c6:	07 94       	ror	r0
    64c8:	20 25       	eor	r18, r0
    64ca:	31 25       	eor	r19, r1
    64cc:	4a 27       	eor	r20, r26
    64ce:	58 f7       	brcc	.-42     	; 0x64a6 <sqrt+0x24>
    64d0:	66 0f       	add	r22, r22
    64d2:	77 1f       	adc	r23, r23
    64d4:	88 1f       	adc	r24, r24
    64d6:	20 f0       	brcs	.+8      	; 0x64e0 <sqrt+0x5e>
    64d8:	26 17       	cp	r18, r22
    64da:	37 07       	cpc	r19, r23
    64dc:	48 07       	cpc	r20, r24
    64de:	30 f4       	brcc	.+12     	; 0x64ec <sqrt+0x6a>
    64e0:	62 0b       	sbc	r22, r18
    64e2:	73 0b       	sbc	r23, r19
    64e4:	84 0b       	sbc	r24, r20
    64e6:	20 0d       	add	r18, r0
    64e8:	31 1d       	adc	r19, r1
    64ea:	41 1d       	adc	r20, r1
    64ec:	a0 95       	com	r26
    64ee:	81 f7       	brne	.-32     	; 0x64d0 <sqrt+0x4e>
    64f0:	b9 01       	movw	r22, r18
    64f2:	84 2f       	mov	r24, r20
    64f4:	91 58       	subi	r25, 0x81	; 129
    64f6:	88 0f       	add	r24, r24
    64f8:	96 95       	lsr	r25
    64fa:	87 95       	ror	r24
    64fc:	08 95       	ret

000064fe <square>:
    64fe:	9b 01       	movw	r18, r22
    6500:	ac 01       	movw	r20, r24
    6502:	52 cf       	rjmp	.-348    	; 0x63a8 <__mulsf3>

00006504 <__fp_norm2>:
    6504:	91 50       	subi	r25, 0x01	; 1
    6506:	50 40       	sbci	r21, 0x00	; 0
    6508:	66 0f       	add	r22, r22
    650a:	77 1f       	adc	r23, r23
    650c:	88 1f       	adc	r24, r24
    650e:	d2 f7       	brpl	.-12     	; 0x6504 <__fp_norm2>
    6510:	08 95       	ret

00006512 <__fp_powsodd>:
    6512:	9f 93       	push	r25
    6514:	8f 93       	push	r24
    6516:	7f 93       	push	r23
    6518:	6f 93       	push	r22
    651a:	ff 93       	push	r31
    651c:	ef 93       	push	r30
    651e:	9b 01       	movw	r18, r22
    6520:	ac 01       	movw	r20, r24
    6522:	42 df       	rcall	.-380    	; 0x63a8 <__mulsf3>
    6524:	ef 91       	pop	r30
    6526:	ff 91       	pop	r31
    6528:	8e de       	rcall	.-740    	; 0x6246 <__fp_powser>
    652a:	2f 91       	pop	r18
    652c:	3f 91       	pop	r19
    652e:	4f 91       	pop	r20
    6530:	5f 91       	pop	r21
    6532:	3a cf       	rjmp	.-396    	; 0x63a8 <__mulsf3>

00006534 <vfprintf>:
    6534:	2f 92       	push	r2
    6536:	3f 92       	push	r3
    6538:	4f 92       	push	r4
    653a:	5f 92       	push	r5
    653c:	6f 92       	push	r6
    653e:	7f 92       	push	r7
    6540:	8f 92       	push	r8
    6542:	9f 92       	push	r9
    6544:	af 92       	push	r10
    6546:	bf 92       	push	r11
    6548:	cf 92       	push	r12
    654a:	df 92       	push	r13
    654c:	ef 92       	push	r14
    654e:	ff 92       	push	r15
    6550:	0f 93       	push	r16
    6552:	1f 93       	push	r17
    6554:	cf 93       	push	r28
    6556:	df 93       	push	r29
    6558:	cd b7       	in	r28, 0x3d	; 61
    655a:	de b7       	in	r29, 0x3e	; 62
    655c:	63 97       	sbiw	r28, 0x13	; 19
    655e:	cd bf       	out	0x3d, r28	; 61
    6560:	de bf       	out	0x3e, r29	; 62
    6562:	7c 01       	movw	r14, r24
    6564:	1b 01       	movw	r2, r22
    6566:	6a 01       	movw	r12, r20
    6568:	fc 01       	movw	r30, r24
    656a:	16 82       	std	Z+6, r1	; 0x06
    656c:	17 82       	std	Z+7, r1	; 0x07
    656e:	83 81       	ldd	r24, Z+3	; 0x03
    6570:	81 ff       	sbrs	r24, 1
    6572:	49 c3       	rjmp	.+1682   	; 0x6c06 <vfprintf+0x6d2>
    6574:	be 01       	movw	r22, r28
    6576:	6f 5f       	subi	r22, 0xFF	; 255
    6578:	7f 4f       	sbci	r23, 0xFF	; 255
    657a:	4b 01       	movw	r8, r22
    657c:	f7 01       	movw	r30, r14
    657e:	93 81       	ldd	r25, Z+3	; 0x03
    6580:	f1 01       	movw	r30, r2
    6582:	93 fd       	sbrc	r25, 3
    6584:	85 91       	lpm	r24, Z+
    6586:	93 ff       	sbrs	r25, 3
    6588:	81 91       	ld	r24, Z+
    658a:	1f 01       	movw	r2, r30
    658c:	88 23       	and	r24, r24
    658e:	09 f4       	brne	.+2      	; 0x6592 <vfprintf+0x5e>
    6590:	36 c3       	rjmp	.+1644   	; 0x6bfe <vfprintf+0x6ca>
    6592:	85 32       	cpi	r24, 0x25	; 37
    6594:	39 f4       	brne	.+14     	; 0x65a4 <vfprintf+0x70>
    6596:	93 fd       	sbrc	r25, 3
    6598:	85 91       	lpm	r24, Z+
    659a:	93 ff       	sbrs	r25, 3
    659c:	81 91       	ld	r24, Z+
    659e:	1f 01       	movw	r2, r30
    65a0:	85 32       	cpi	r24, 0x25	; 37
    65a2:	31 f4       	brne	.+12     	; 0x65b0 <vfprintf+0x7c>
    65a4:	b7 01       	movw	r22, r14
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	0f d6       	rcall	.+3102   	; 0x71c8 <fputc>
    65aa:	56 01       	movw	r10, r12
    65ac:	65 01       	movw	r12, r10
    65ae:	e6 cf       	rjmp	.-52     	; 0x657c <vfprintf+0x48>
    65b0:	10 e0       	ldi	r17, 0x00	; 0
    65b2:	51 2c       	mov	r5, r1
    65b4:	20 e0       	ldi	r18, 0x00	; 0
    65b6:	20 32       	cpi	r18, 0x20	; 32
    65b8:	a0 f4       	brcc	.+40     	; 0x65e2 <vfprintf+0xae>
    65ba:	8b 32       	cpi	r24, 0x2B	; 43
    65bc:	69 f0       	breq	.+26     	; 0x65d8 <vfprintf+0xa4>
    65be:	30 f4       	brcc	.+12     	; 0x65cc <vfprintf+0x98>
    65c0:	80 32       	cpi	r24, 0x20	; 32
    65c2:	59 f0       	breq	.+22     	; 0x65da <vfprintf+0xa6>
    65c4:	83 32       	cpi	r24, 0x23	; 35
    65c6:	69 f4       	brne	.+26     	; 0x65e2 <vfprintf+0xae>
    65c8:	20 61       	ori	r18, 0x10	; 16
    65ca:	2c c0       	rjmp	.+88     	; 0x6624 <vfprintf+0xf0>
    65cc:	8d 32       	cpi	r24, 0x2D	; 45
    65ce:	39 f0       	breq	.+14     	; 0x65de <vfprintf+0xaa>
    65d0:	80 33       	cpi	r24, 0x30	; 48
    65d2:	39 f4       	brne	.+14     	; 0x65e2 <vfprintf+0xae>
    65d4:	21 60       	ori	r18, 0x01	; 1
    65d6:	26 c0       	rjmp	.+76     	; 0x6624 <vfprintf+0xf0>
    65d8:	22 60       	ori	r18, 0x02	; 2
    65da:	24 60       	ori	r18, 0x04	; 4
    65dc:	23 c0       	rjmp	.+70     	; 0x6624 <vfprintf+0xf0>
    65de:	28 60       	ori	r18, 0x08	; 8
    65e0:	21 c0       	rjmp	.+66     	; 0x6624 <vfprintf+0xf0>
    65e2:	27 fd       	sbrc	r18, 7
    65e4:	27 c0       	rjmp	.+78     	; 0x6634 <vfprintf+0x100>
    65e6:	30 ed       	ldi	r19, 0xD0	; 208
    65e8:	38 0f       	add	r19, r24
    65ea:	3a 30       	cpi	r19, 0x0A	; 10
    65ec:	78 f4       	brcc	.+30     	; 0x660c <vfprintf+0xd8>
    65ee:	26 ff       	sbrs	r18, 6
    65f0:	06 c0       	rjmp	.+12     	; 0x65fe <vfprintf+0xca>
    65f2:	fa e0       	ldi	r31, 0x0A	; 10
    65f4:	1f 9f       	mul	r17, r31
    65f6:	30 0d       	add	r19, r0
    65f8:	11 24       	eor	r1, r1
    65fa:	13 2f       	mov	r17, r19
    65fc:	13 c0       	rjmp	.+38     	; 0x6624 <vfprintf+0xf0>
    65fe:	6a e0       	ldi	r22, 0x0A	; 10
    6600:	56 9e       	mul	r5, r22
    6602:	30 0d       	add	r19, r0
    6604:	11 24       	eor	r1, r1
    6606:	53 2e       	mov	r5, r19
    6608:	20 62       	ori	r18, 0x20	; 32
    660a:	0c c0       	rjmp	.+24     	; 0x6624 <vfprintf+0xf0>
    660c:	8e 32       	cpi	r24, 0x2E	; 46
    660e:	21 f4       	brne	.+8      	; 0x6618 <vfprintf+0xe4>
    6610:	26 fd       	sbrc	r18, 6
    6612:	f5 c2       	rjmp	.+1514   	; 0x6bfe <vfprintf+0x6ca>
    6614:	20 64       	ori	r18, 0x40	; 64
    6616:	06 c0       	rjmp	.+12     	; 0x6624 <vfprintf+0xf0>
    6618:	8c 36       	cpi	r24, 0x6C	; 108
    661a:	11 f4       	brne	.+4      	; 0x6620 <vfprintf+0xec>
    661c:	20 68       	ori	r18, 0x80	; 128
    661e:	02 c0       	rjmp	.+4      	; 0x6624 <vfprintf+0xf0>
    6620:	88 36       	cpi	r24, 0x68	; 104
    6622:	41 f4       	brne	.+16     	; 0x6634 <vfprintf+0x100>
    6624:	f1 01       	movw	r30, r2
    6626:	93 fd       	sbrc	r25, 3
    6628:	85 91       	lpm	r24, Z+
    662a:	93 ff       	sbrs	r25, 3
    662c:	81 91       	ld	r24, Z+
    662e:	1f 01       	movw	r2, r30
    6630:	81 11       	cpse	r24, r1
    6632:	c1 cf       	rjmp	.-126    	; 0x65b6 <vfprintf+0x82>
    6634:	9b eb       	ldi	r25, 0xBB	; 187
    6636:	98 0f       	add	r25, r24
    6638:	93 30       	cpi	r25, 0x03	; 3
    663a:	18 f4       	brcc	.+6      	; 0x6642 <vfprintf+0x10e>
    663c:	20 61       	ori	r18, 0x10	; 16
    663e:	80 5e       	subi	r24, 0xE0	; 224
    6640:	06 c0       	rjmp	.+12     	; 0x664e <vfprintf+0x11a>
    6642:	9b e9       	ldi	r25, 0x9B	; 155
    6644:	98 0f       	add	r25, r24
    6646:	93 30       	cpi	r25, 0x03	; 3
    6648:	08 f0       	brcs	.+2      	; 0x664c <vfprintf+0x118>
    664a:	9a c1       	rjmp	.+820    	; 0x6980 <vfprintf+0x44c>
    664c:	2f 7e       	andi	r18, 0xEF	; 239
    664e:	26 ff       	sbrs	r18, 6
    6650:	16 e0       	ldi	r17, 0x06	; 6
    6652:	2f 73       	andi	r18, 0x3F	; 63
    6654:	72 2e       	mov	r7, r18
    6656:	85 36       	cpi	r24, 0x65	; 101
    6658:	21 f4       	brne	.+8      	; 0x6662 <vfprintf+0x12e>
    665a:	f2 2f       	mov	r31, r18
    665c:	f0 64       	ori	r31, 0x40	; 64
    665e:	7f 2e       	mov	r7, r31
    6660:	08 c0       	rjmp	.+16     	; 0x6672 <vfprintf+0x13e>
    6662:	86 36       	cpi	r24, 0x66	; 102
    6664:	21 f4       	brne	.+8      	; 0x666e <vfprintf+0x13a>
    6666:	62 2f       	mov	r22, r18
    6668:	60 68       	ori	r22, 0x80	; 128
    666a:	76 2e       	mov	r7, r22
    666c:	02 c0       	rjmp	.+4      	; 0x6672 <vfprintf+0x13e>
    666e:	11 11       	cpse	r17, r1
    6670:	11 50       	subi	r17, 0x01	; 1
    6672:	77 fe       	sbrs	r7, 7
    6674:	07 c0       	rjmp	.+14     	; 0x6684 <vfprintf+0x150>
    6676:	1c 33       	cpi	r17, 0x3C	; 60
    6678:	48 f4       	brcc	.+18     	; 0x668c <vfprintf+0x158>
    667a:	44 24       	eor	r4, r4
    667c:	43 94       	inc	r4
    667e:	41 0e       	add	r4, r17
    6680:	27 e0       	ldi	r18, 0x07	; 7
    6682:	0b c0       	rjmp	.+22     	; 0x669a <vfprintf+0x166>
    6684:	18 30       	cpi	r17, 0x08	; 8
    6686:	30 f4       	brcc	.+12     	; 0x6694 <vfprintf+0x160>
    6688:	21 2f       	mov	r18, r17
    668a:	06 c0       	rjmp	.+12     	; 0x6698 <vfprintf+0x164>
    668c:	27 e0       	ldi	r18, 0x07	; 7
    668e:	4c e3       	ldi	r20, 0x3C	; 60
    6690:	44 2e       	mov	r4, r20
    6692:	03 c0       	rjmp	.+6      	; 0x669a <vfprintf+0x166>
    6694:	27 e0       	ldi	r18, 0x07	; 7
    6696:	17 e0       	ldi	r17, 0x07	; 7
    6698:	41 2c       	mov	r4, r1
    669a:	56 01       	movw	r10, r12
    669c:	74 e0       	ldi	r23, 0x04	; 4
    669e:	a7 0e       	add	r10, r23
    66a0:	b1 1c       	adc	r11, r1
    66a2:	f6 01       	movw	r30, r12
    66a4:	60 81       	ld	r22, Z
    66a6:	71 81       	ldd	r23, Z+1	; 0x01
    66a8:	82 81       	ldd	r24, Z+2	; 0x02
    66aa:	93 81       	ldd	r25, Z+3	; 0x03
    66ac:	04 2d       	mov	r16, r4
    66ae:	a4 01       	movw	r20, r8
    66b0:	2c d4       	rcall	.+2136   	; 0x6f0a <__ftoa_engine>
    66b2:	6c 01       	movw	r12, r24
    66b4:	09 81       	ldd	r16, Y+1	; 0x01
    66b6:	00 ff       	sbrs	r16, 0
    66b8:	02 c0       	rjmp	.+4      	; 0x66be <vfprintf+0x18a>
    66ba:	03 ff       	sbrs	r16, 3
    66bc:	06 c0       	rjmp	.+12     	; 0x66ca <vfprintf+0x196>
    66be:	71 fc       	sbrc	r7, 1
    66c0:	07 c0       	rjmp	.+14     	; 0x66d0 <vfprintf+0x19c>
    66c2:	72 fc       	sbrc	r7, 2
    66c4:	08 c0       	rjmp	.+16     	; 0x66d6 <vfprintf+0x1a2>
    66c6:	61 2c       	mov	r6, r1
    66c8:	08 c0       	rjmp	.+16     	; 0x66da <vfprintf+0x1a6>
    66ca:	3d e2       	ldi	r19, 0x2D	; 45
    66cc:	63 2e       	mov	r6, r19
    66ce:	05 c0       	rjmp	.+10     	; 0x66da <vfprintf+0x1a6>
    66d0:	2b e2       	ldi	r18, 0x2B	; 43
    66d2:	62 2e       	mov	r6, r18
    66d4:	02 c0       	rjmp	.+4      	; 0x66da <vfprintf+0x1a6>
    66d6:	90 e2       	ldi	r25, 0x20	; 32
    66d8:	69 2e       	mov	r6, r25
    66da:	80 2f       	mov	r24, r16
    66dc:	8c 70       	andi	r24, 0x0C	; 12
    66de:	81 f1       	breq	.+96     	; 0x6740 <vfprintf+0x20c>
    66e0:	66 20       	and	r6, r6
    66e2:	11 f0       	breq	.+4      	; 0x66e8 <vfprintf+0x1b4>
    66e4:	84 e0       	ldi	r24, 0x04	; 4
    66e6:	01 c0       	rjmp	.+2      	; 0x66ea <vfprintf+0x1b6>
    66e8:	83 e0       	ldi	r24, 0x03	; 3
    66ea:	85 15       	cp	r24, r5
    66ec:	10 f0       	brcs	.+4      	; 0x66f2 <vfprintf+0x1be>
    66ee:	51 2c       	mov	r5, r1
    66f0:	0a c0       	rjmp	.+20     	; 0x6706 <vfprintf+0x1d2>
    66f2:	58 1a       	sub	r5, r24
    66f4:	73 fc       	sbrc	r7, 3
    66f6:	07 c0       	rjmp	.+14     	; 0x6706 <vfprintf+0x1d2>
    66f8:	b7 01       	movw	r22, r14
    66fa:	80 e2       	ldi	r24, 0x20	; 32
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	64 d5       	rcall	.+2760   	; 0x71c8 <fputc>
    6700:	5a 94       	dec	r5
    6702:	d1 f7       	brne	.-12     	; 0x66f8 <vfprintf+0x1c4>
    6704:	f4 cf       	rjmp	.-24     	; 0x66ee <vfprintf+0x1ba>
    6706:	66 20       	and	r6, r6
    6708:	21 f0       	breq	.+8      	; 0x6712 <vfprintf+0x1de>
    670a:	b7 01       	movw	r22, r14
    670c:	86 2d       	mov	r24, r6
    670e:	90 e0       	ldi	r25, 0x00	; 0
    6710:	5b d5       	rcall	.+2742   	; 0x71c8 <fputc>
    6712:	03 fd       	sbrc	r16, 3
    6714:	03 c0       	rjmp	.+6      	; 0x671c <vfprintf+0x1e8>
    6716:	06 e7       	ldi	r16, 0x76	; 118
    6718:	12 e0       	ldi	r17, 0x02	; 2
    671a:	02 c0       	rjmp	.+4      	; 0x6720 <vfprintf+0x1ec>
    671c:	02 e7       	ldi	r16, 0x72	; 114
    671e:	12 e0       	ldi	r17, 0x02	; 2
    6720:	f7 2d       	mov	r31, r7
    6722:	f0 71       	andi	r31, 0x10	; 16
    6724:	7f 2e       	mov	r7, r31
    6726:	f8 01       	movw	r30, r16
    6728:	84 91       	lpm	r24, Z
    672a:	88 23       	and	r24, r24
    672c:	09 f4       	brne	.+2      	; 0x6730 <vfprintf+0x1fc>
    672e:	5e c2       	rjmp	.+1212   	; 0x6bec <vfprintf+0x6b8>
    6730:	71 10       	cpse	r7, r1
    6732:	80 52       	subi	r24, 0x20	; 32
    6734:	b7 01       	movw	r22, r14
    6736:	90 e0       	ldi	r25, 0x00	; 0
    6738:	47 d5       	rcall	.+2702   	; 0x71c8 <fputc>
    673a:	0f 5f       	subi	r16, 0xFF	; 255
    673c:	1f 4f       	sbci	r17, 0xFF	; 255
    673e:	f3 cf       	rjmp	.-26     	; 0x6726 <vfprintf+0x1f2>
    6740:	77 fe       	sbrs	r7, 7
    6742:	0f c0       	rjmp	.+30     	; 0x6762 <vfprintf+0x22e>
    6744:	4c 0c       	add	r4, r12
    6746:	04 ff       	sbrs	r16, 4
    6748:	04 c0       	rjmp	.+8      	; 0x6752 <vfprintf+0x21e>
    674a:	8a 81       	ldd	r24, Y+2	; 0x02
    674c:	81 33       	cpi	r24, 0x31	; 49
    674e:	09 f4       	brne	.+2      	; 0x6752 <vfprintf+0x21e>
    6750:	4a 94       	dec	r4
    6752:	14 14       	cp	r1, r4
    6754:	74 f5       	brge	.+92     	; 0x67b2 <vfprintf+0x27e>
    6756:	f8 e0       	ldi	r31, 0x08	; 8
    6758:	f4 15       	cp	r31, r4
    675a:	78 f5       	brcc	.+94     	; 0x67ba <vfprintf+0x286>
    675c:	88 e0       	ldi	r24, 0x08	; 8
    675e:	48 2e       	mov	r4, r24
    6760:	2c c0       	rjmp	.+88     	; 0x67ba <vfprintf+0x286>
    6762:	76 fc       	sbrc	r7, 6
    6764:	2a c0       	rjmp	.+84     	; 0x67ba <vfprintf+0x286>
    6766:	81 2f       	mov	r24, r17
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	8c 15       	cp	r24, r12
    676c:	9d 05       	cpc	r25, r13
    676e:	9c f0       	brlt	.+38     	; 0x6796 <vfprintf+0x262>
    6770:	6c ef       	ldi	r22, 0xFC	; 252
    6772:	c6 16       	cp	r12, r22
    6774:	6f ef       	ldi	r22, 0xFF	; 255
    6776:	d6 06       	cpc	r13, r22
    6778:	74 f0       	brlt	.+28     	; 0x6796 <vfprintf+0x262>
    677a:	77 2d       	mov	r23, r7
    677c:	70 68       	ori	r23, 0x80	; 128
    677e:	77 2e       	mov	r7, r23
    6780:	0a c0       	rjmp	.+20     	; 0x6796 <vfprintf+0x262>
    6782:	e2 e0       	ldi	r30, 0x02	; 2
    6784:	f0 e0       	ldi	r31, 0x00	; 0
    6786:	ec 0f       	add	r30, r28
    6788:	fd 1f       	adc	r31, r29
    678a:	e1 0f       	add	r30, r17
    678c:	f1 1d       	adc	r31, r1
    678e:	80 81       	ld	r24, Z
    6790:	80 33       	cpi	r24, 0x30	; 48
    6792:	19 f4       	brne	.+6      	; 0x679a <vfprintf+0x266>
    6794:	11 50       	subi	r17, 0x01	; 1
    6796:	11 11       	cpse	r17, r1
    6798:	f4 cf       	rjmp	.-24     	; 0x6782 <vfprintf+0x24e>
    679a:	77 fe       	sbrs	r7, 7
    679c:	0e c0       	rjmp	.+28     	; 0x67ba <vfprintf+0x286>
    679e:	44 24       	eor	r4, r4
    67a0:	43 94       	inc	r4
    67a2:	41 0e       	add	r4, r17
    67a4:	81 2f       	mov	r24, r17
    67a6:	90 e0       	ldi	r25, 0x00	; 0
    67a8:	c8 16       	cp	r12, r24
    67aa:	d9 06       	cpc	r13, r25
    67ac:	2c f4       	brge	.+10     	; 0x67b8 <vfprintf+0x284>
    67ae:	1c 19       	sub	r17, r12
    67b0:	04 c0       	rjmp	.+8      	; 0x67ba <vfprintf+0x286>
    67b2:	44 24       	eor	r4, r4
    67b4:	43 94       	inc	r4
    67b6:	01 c0       	rjmp	.+2      	; 0x67ba <vfprintf+0x286>
    67b8:	10 e0       	ldi	r17, 0x00	; 0
    67ba:	77 fe       	sbrs	r7, 7
    67bc:	07 c0       	rjmp	.+14     	; 0x67cc <vfprintf+0x298>
    67be:	1c 14       	cp	r1, r12
    67c0:	1d 04       	cpc	r1, r13
    67c2:	3c f4       	brge	.+14     	; 0x67d2 <vfprintf+0x29e>
    67c4:	96 01       	movw	r18, r12
    67c6:	2f 5f       	subi	r18, 0xFF	; 255
    67c8:	3f 4f       	sbci	r19, 0xFF	; 255
    67ca:	05 c0       	rjmp	.+10     	; 0x67d6 <vfprintf+0x2a2>
    67cc:	25 e0       	ldi	r18, 0x05	; 5
    67ce:	30 e0       	ldi	r19, 0x00	; 0
    67d0:	02 c0       	rjmp	.+4      	; 0x67d6 <vfprintf+0x2a2>
    67d2:	21 e0       	ldi	r18, 0x01	; 1
    67d4:	30 e0       	ldi	r19, 0x00	; 0
    67d6:	66 20       	and	r6, r6
    67d8:	11 f0       	breq	.+4      	; 0x67de <vfprintf+0x2aa>
    67da:	2f 5f       	subi	r18, 0xFF	; 255
    67dc:	3f 4f       	sbci	r19, 0xFF	; 255
    67de:	11 23       	and	r17, r17
    67e0:	31 f0       	breq	.+12     	; 0x67ee <vfprintf+0x2ba>
    67e2:	41 2f       	mov	r20, r17
    67e4:	50 e0       	ldi	r21, 0x00	; 0
    67e6:	4f 5f       	subi	r20, 0xFF	; 255
    67e8:	5f 4f       	sbci	r21, 0xFF	; 255
    67ea:	24 0f       	add	r18, r20
    67ec:	35 1f       	adc	r19, r21
    67ee:	45 2d       	mov	r20, r5
    67f0:	50 e0       	ldi	r21, 0x00	; 0
    67f2:	24 17       	cp	r18, r20
    67f4:	35 07       	cpc	r19, r21
    67f6:	14 f4       	brge	.+4      	; 0x67fc <vfprintf+0x2c8>
    67f8:	52 1a       	sub	r5, r18
    67fa:	01 c0       	rjmp	.+2      	; 0x67fe <vfprintf+0x2ca>
    67fc:	51 2c       	mov	r5, r1
    67fe:	87 2d       	mov	r24, r7
    6800:	89 70       	andi	r24, 0x09	; 9
    6802:	41 f4       	brne	.+16     	; 0x6814 <vfprintf+0x2e0>
    6804:	55 20       	and	r5, r5
    6806:	31 f0       	breq	.+12     	; 0x6814 <vfprintf+0x2e0>
    6808:	b7 01       	movw	r22, r14
    680a:	80 e2       	ldi	r24, 0x20	; 32
    680c:	90 e0       	ldi	r25, 0x00	; 0
    680e:	dc d4       	rcall	.+2488   	; 0x71c8 <fputc>
    6810:	5a 94       	dec	r5
    6812:	f8 cf       	rjmp	.-16     	; 0x6804 <vfprintf+0x2d0>
    6814:	66 20       	and	r6, r6
    6816:	21 f0       	breq	.+8      	; 0x6820 <vfprintf+0x2ec>
    6818:	b7 01       	movw	r22, r14
    681a:	86 2d       	mov	r24, r6
    681c:	90 e0       	ldi	r25, 0x00	; 0
    681e:	d4 d4       	rcall	.+2472   	; 0x71c8 <fputc>
    6820:	73 fc       	sbrc	r7, 3
    6822:	08 c0       	rjmp	.+16     	; 0x6834 <vfprintf+0x300>
    6824:	55 20       	and	r5, r5
    6826:	31 f0       	breq	.+12     	; 0x6834 <vfprintf+0x300>
    6828:	b7 01       	movw	r22, r14
    682a:	80 e3       	ldi	r24, 0x30	; 48
    682c:	90 e0       	ldi	r25, 0x00	; 0
    682e:	cc d4       	rcall	.+2456   	; 0x71c8 <fputc>
    6830:	5a 94       	dec	r5
    6832:	f8 cf       	rjmp	.-16     	; 0x6824 <vfprintf+0x2f0>
    6834:	77 fe       	sbrs	r7, 7
    6836:	5d c0       	rjmp	.+186    	; 0x68f2 <vfprintf+0x3be>
    6838:	9c 2d       	mov	r25, r12
    683a:	8d 2d       	mov	r24, r13
    683c:	d7 fe       	sbrs	r13, 7
    683e:	02 c0       	rjmp	.+4      	; 0x6844 <vfprintf+0x310>
    6840:	90 e0       	ldi	r25, 0x00	; 0
    6842:	80 e0       	ldi	r24, 0x00	; 0
    6844:	69 2e       	mov	r6, r25
    6846:	78 2e       	mov	r7, r24
    6848:	40 e0       	ldi	r20, 0x00	; 0
    684a:	50 e0       	ldi	r21, 0x00	; 0
    684c:	c6 01       	movw	r24, r12
    684e:	84 19       	sub	r24, r4
    6850:	91 09       	sbc	r25, r1
    6852:	8c 87       	std	Y+12, r24	; 0x0c
    6854:	9d 87       	std	Y+13, r25	; 0x0d
    6856:	96 01       	movw	r18, r12
    6858:	26 19       	sub	r18, r6
    685a:	37 09       	sbc	r19, r7
    685c:	28 0d       	add	r18, r8
    685e:	39 1d       	adc	r19, r9
    6860:	81 2f       	mov	r24, r17
    6862:	90 e0       	ldi	r25, 0x00	; 0
    6864:	ee 27       	eor	r30, r30
    6866:	ff 27       	eor	r31, r31
    6868:	e8 1b       	sub	r30, r24
    686a:	f9 0b       	sbc	r31, r25
    686c:	ee 87       	std	Y+14, r30	; 0x0e
    686e:	ff 87       	std	Y+15, r31	; 0x0f
    6870:	ff ef       	ldi	r31, 0xFF	; 255
    6872:	6f 16       	cp	r6, r31
    6874:	7f 06       	cpc	r7, r31
    6876:	61 f4       	brne	.+24     	; 0x6890 <vfprintf+0x35c>
    6878:	b7 01       	movw	r22, r14
    687a:	8e e2       	ldi	r24, 0x2E	; 46
    687c:	90 e0       	ldi	r25, 0x00	; 0
    687e:	2b 8b       	std	Y+19, r18	; 0x13
    6880:	3a 8b       	std	Y+18, r19	; 0x12
    6882:	48 8b       	std	Y+16, r20	; 0x10
    6884:	59 8b       	std	Y+17, r21	; 0x11
    6886:	a0 d4       	rcall	.+2368   	; 0x71c8 <fputc>
    6888:	59 89       	ldd	r21, Y+17	; 0x11
    688a:	48 89       	ldd	r20, Y+16	; 0x10
    688c:	3a 89       	ldd	r19, Y+18	; 0x12
    688e:	2b 89       	ldd	r18, Y+19	; 0x13
    6890:	c6 14       	cp	r12, r6
    6892:	d7 04       	cpc	r13, r7
    6894:	54 f0       	brlt	.+20     	; 0x68aa <vfprintf+0x376>
    6896:	6c 85       	ldd	r22, Y+12	; 0x0c
    6898:	7d 85       	ldd	r23, Y+13	; 0x0d
    689a:	66 15       	cp	r22, r6
    689c:	77 05       	cpc	r23, r7
    689e:	2c f4       	brge	.+10     	; 0x68aa <vfprintf+0x376>
    68a0:	f9 01       	movw	r30, r18
    68a2:	e4 0f       	add	r30, r20
    68a4:	f5 1f       	adc	r31, r21
    68a6:	81 81       	ldd	r24, Z+1	; 0x01
    68a8:	01 c0       	rjmp	.+2      	; 0x68ac <vfprintf+0x378>
    68aa:	80 e3       	ldi	r24, 0x30	; 48
    68ac:	71 e0       	ldi	r23, 0x01	; 1
    68ae:	67 1a       	sub	r6, r23
    68b0:	71 08       	sbc	r7, r1
    68b2:	4f 5f       	subi	r20, 0xFF	; 255
    68b4:	5f 4f       	sbci	r21, 0xFF	; 255
    68b6:	ee 85       	ldd	r30, Y+14	; 0x0e
    68b8:	ff 85       	ldd	r31, Y+15	; 0x0f
    68ba:	6e 16       	cp	r6, r30
    68bc:	7f 06       	cpc	r7, r31
    68be:	64 f0       	brlt	.+24     	; 0x68d8 <vfprintf+0x3a4>
    68c0:	b7 01       	movw	r22, r14
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	2b 8b       	std	Y+19, r18	; 0x13
    68c6:	3a 8b       	std	Y+18, r19	; 0x12
    68c8:	48 8b       	std	Y+16, r20	; 0x10
    68ca:	59 8b       	std	Y+17, r21	; 0x11
    68cc:	7d d4       	rcall	.+2298   	; 0x71c8 <fputc>
    68ce:	2b 89       	ldd	r18, Y+19	; 0x13
    68d0:	3a 89       	ldd	r19, Y+18	; 0x12
    68d2:	48 89       	ldd	r20, Y+16	; 0x10
    68d4:	59 89       	ldd	r21, Y+17	; 0x11
    68d6:	cc cf       	rjmp	.-104    	; 0x6870 <vfprintf+0x33c>
    68d8:	6c 14       	cp	r6, r12
    68da:	7d 04       	cpc	r7, r13
    68dc:	39 f4       	brne	.+14     	; 0x68ec <vfprintf+0x3b8>
    68de:	9a 81       	ldd	r25, Y+2	; 0x02
    68e0:	96 33       	cpi	r25, 0x36	; 54
    68e2:	18 f4       	brcc	.+6      	; 0x68ea <vfprintf+0x3b6>
    68e4:	95 33       	cpi	r25, 0x35	; 53
    68e6:	11 f4       	brne	.+4      	; 0x68ec <vfprintf+0x3b8>
    68e8:	04 ff       	sbrs	r16, 4
    68ea:	81 e3       	ldi	r24, 0x31	; 49
    68ec:	b7 01       	movw	r22, r14
    68ee:	90 e0       	ldi	r25, 0x00	; 0
    68f0:	45 c0       	rjmp	.+138    	; 0x697c <vfprintf+0x448>
    68f2:	8a 81       	ldd	r24, Y+2	; 0x02
    68f4:	81 33       	cpi	r24, 0x31	; 49
    68f6:	09 f0       	breq	.+2      	; 0x68fa <vfprintf+0x3c6>
    68f8:	0f 7e       	andi	r16, 0xEF	; 239
    68fa:	b7 01       	movw	r22, r14
    68fc:	90 e0       	ldi	r25, 0x00	; 0
    68fe:	64 d4       	rcall	.+2248   	; 0x71c8 <fputc>
    6900:	11 11       	cpse	r17, r1
    6902:	05 c0       	rjmp	.+10     	; 0x690e <vfprintf+0x3da>
    6904:	74 fe       	sbrs	r7, 4
    6906:	16 c0       	rjmp	.+44     	; 0x6934 <vfprintf+0x400>
    6908:	85 e4       	ldi	r24, 0x45	; 69
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	15 c0       	rjmp	.+42     	; 0x6938 <vfprintf+0x404>
    690e:	b7 01       	movw	r22, r14
    6910:	8e e2       	ldi	r24, 0x2E	; 46
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	59 d4       	rcall	.+2226   	; 0x71c8 <fputc>
    6916:	82 e0       	ldi	r24, 0x02	; 2
    6918:	66 24       	eor	r6, r6
    691a:	63 94       	inc	r6
    691c:	68 0e       	add	r6, r24
    691e:	f4 01       	movw	r30, r8
    6920:	e8 0f       	add	r30, r24
    6922:	f1 1d       	adc	r31, r1
    6924:	80 81       	ld	r24, Z
    6926:	b7 01       	movw	r22, r14
    6928:	90 e0       	ldi	r25, 0x00	; 0
    692a:	4e d4       	rcall	.+2204   	; 0x71c8 <fputc>
    692c:	11 50       	subi	r17, 0x01	; 1
    692e:	51 f3       	breq	.-44     	; 0x6904 <vfprintf+0x3d0>
    6930:	86 2d       	mov	r24, r6
    6932:	f2 cf       	rjmp	.-28     	; 0x6918 <vfprintf+0x3e4>
    6934:	85 e6       	ldi	r24, 0x65	; 101
    6936:	90 e0       	ldi	r25, 0x00	; 0
    6938:	b7 01       	movw	r22, r14
    693a:	46 d4       	rcall	.+2188   	; 0x71c8 <fputc>
    693c:	d7 fc       	sbrc	r13, 7
    693e:	05 c0       	rjmp	.+10     	; 0x694a <vfprintf+0x416>
    6940:	c1 14       	cp	r12, r1
    6942:	d1 04       	cpc	r13, r1
    6944:	39 f4       	brne	.+14     	; 0x6954 <vfprintf+0x420>
    6946:	04 ff       	sbrs	r16, 4
    6948:	05 c0       	rjmp	.+10     	; 0x6954 <vfprintf+0x420>
    694a:	d1 94       	neg	r13
    694c:	c1 94       	neg	r12
    694e:	d1 08       	sbc	r13, r1
    6950:	8d e2       	ldi	r24, 0x2D	; 45
    6952:	01 c0       	rjmp	.+2      	; 0x6956 <vfprintf+0x422>
    6954:	8b e2       	ldi	r24, 0x2B	; 43
    6956:	b7 01       	movw	r22, r14
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	36 d4       	rcall	.+2156   	; 0x71c8 <fputc>
    695c:	80 e3       	ldi	r24, 0x30	; 48
    695e:	6a e0       	ldi	r22, 0x0A	; 10
    6960:	c6 16       	cp	r12, r22
    6962:	d1 04       	cpc	r13, r1
    6964:	2c f0       	brlt	.+10     	; 0x6970 <vfprintf+0x43c>
    6966:	8f 5f       	subi	r24, 0xFF	; 255
    6968:	fa e0       	ldi	r31, 0x0A	; 10
    696a:	cf 1a       	sub	r12, r31
    696c:	d1 08       	sbc	r13, r1
    696e:	f7 cf       	rjmp	.-18     	; 0x695e <vfprintf+0x42a>
    6970:	b7 01       	movw	r22, r14
    6972:	90 e0       	ldi	r25, 0x00	; 0
    6974:	29 d4       	rcall	.+2130   	; 0x71c8 <fputc>
    6976:	b7 01       	movw	r22, r14
    6978:	c6 01       	movw	r24, r12
    697a:	c0 96       	adiw	r24, 0x30	; 48
    697c:	25 d4       	rcall	.+2122   	; 0x71c8 <fputc>
    697e:	36 c1       	rjmp	.+620    	; 0x6bec <vfprintf+0x6b8>
    6980:	83 36       	cpi	r24, 0x63	; 99
    6982:	31 f0       	breq	.+12     	; 0x6990 <vfprintf+0x45c>
    6984:	83 37       	cpi	r24, 0x73	; 115
    6986:	79 f0       	breq	.+30     	; 0x69a6 <vfprintf+0x472>
    6988:	83 35       	cpi	r24, 0x53	; 83
    698a:	09 f0       	breq	.+2      	; 0x698e <vfprintf+0x45a>
    698c:	54 c0       	rjmp	.+168    	; 0x6a36 <vfprintf+0x502>
    698e:	20 c0       	rjmp	.+64     	; 0x69d0 <vfprintf+0x49c>
    6990:	56 01       	movw	r10, r12
    6992:	72 e0       	ldi	r23, 0x02	; 2
    6994:	a7 0e       	add	r10, r23
    6996:	b1 1c       	adc	r11, r1
    6998:	f6 01       	movw	r30, r12
    699a:	80 81       	ld	r24, Z
    699c:	89 83       	std	Y+1, r24	; 0x01
    699e:	01 e0       	ldi	r16, 0x01	; 1
    69a0:	10 e0       	ldi	r17, 0x00	; 0
    69a2:	64 01       	movw	r12, r8
    69a4:	13 c0       	rjmp	.+38     	; 0x69cc <vfprintf+0x498>
    69a6:	56 01       	movw	r10, r12
    69a8:	f2 e0       	ldi	r31, 0x02	; 2
    69aa:	af 0e       	add	r10, r31
    69ac:	b1 1c       	adc	r11, r1
    69ae:	f6 01       	movw	r30, r12
    69b0:	c0 80       	ld	r12, Z
    69b2:	d1 80       	ldd	r13, Z+1	; 0x01
    69b4:	26 ff       	sbrs	r18, 6
    69b6:	03 c0       	rjmp	.+6      	; 0x69be <vfprintf+0x48a>
    69b8:	61 2f       	mov	r22, r17
    69ba:	70 e0       	ldi	r23, 0x00	; 0
    69bc:	02 c0       	rjmp	.+4      	; 0x69c2 <vfprintf+0x48e>
    69be:	6f ef       	ldi	r22, 0xFF	; 255
    69c0:	7f ef       	ldi	r23, 0xFF	; 255
    69c2:	c6 01       	movw	r24, r12
    69c4:	2b 8b       	std	Y+19, r18	; 0x13
    69c6:	c6 d3       	rcall	.+1932   	; 0x7154 <strnlen>
    69c8:	8c 01       	movw	r16, r24
    69ca:	2b 89       	ldd	r18, Y+19	; 0x13
    69cc:	2f 77       	andi	r18, 0x7F	; 127
    69ce:	14 c0       	rjmp	.+40     	; 0x69f8 <vfprintf+0x4c4>
    69d0:	56 01       	movw	r10, r12
    69d2:	f2 e0       	ldi	r31, 0x02	; 2
    69d4:	af 0e       	add	r10, r31
    69d6:	b1 1c       	adc	r11, r1
    69d8:	f6 01       	movw	r30, r12
    69da:	c0 80       	ld	r12, Z
    69dc:	d1 80       	ldd	r13, Z+1	; 0x01
    69de:	26 ff       	sbrs	r18, 6
    69e0:	03 c0       	rjmp	.+6      	; 0x69e8 <vfprintf+0x4b4>
    69e2:	61 2f       	mov	r22, r17
    69e4:	70 e0       	ldi	r23, 0x00	; 0
    69e6:	02 c0       	rjmp	.+4      	; 0x69ec <vfprintf+0x4b8>
    69e8:	6f ef       	ldi	r22, 0xFF	; 255
    69ea:	7f ef       	ldi	r23, 0xFF	; 255
    69ec:	c6 01       	movw	r24, r12
    69ee:	2b 8b       	std	Y+19, r18	; 0x13
    69f0:	6c d3       	rcall	.+1752   	; 0x70ca <strnlen_P>
    69f2:	8c 01       	movw	r16, r24
    69f4:	2b 89       	ldd	r18, Y+19	; 0x13
    69f6:	20 68       	ori	r18, 0x80	; 128
    69f8:	72 2e       	mov	r7, r18
    69fa:	23 fd       	sbrc	r18, 3
    69fc:	18 c0       	rjmp	.+48     	; 0x6a2e <vfprintf+0x4fa>
    69fe:	85 2d       	mov	r24, r5
    6a00:	90 e0       	ldi	r25, 0x00	; 0
    6a02:	08 17       	cp	r16, r24
    6a04:	19 07       	cpc	r17, r25
    6a06:	98 f4       	brcc	.+38     	; 0x6a2e <vfprintf+0x4fa>
    6a08:	b7 01       	movw	r22, r14
    6a0a:	80 e2       	ldi	r24, 0x20	; 32
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	dc d3       	rcall	.+1976   	; 0x71c8 <fputc>
    6a10:	5a 94       	dec	r5
    6a12:	f5 cf       	rjmp	.-22     	; 0x69fe <vfprintf+0x4ca>
    6a14:	f6 01       	movw	r30, r12
    6a16:	77 fc       	sbrc	r7, 7
    6a18:	85 91       	lpm	r24, Z+
    6a1a:	77 fe       	sbrs	r7, 7
    6a1c:	81 91       	ld	r24, Z+
    6a1e:	6f 01       	movw	r12, r30
    6a20:	b7 01       	movw	r22, r14
    6a22:	90 e0       	ldi	r25, 0x00	; 0
    6a24:	d1 d3       	rcall	.+1954   	; 0x71c8 <fputc>
    6a26:	51 10       	cpse	r5, r1
    6a28:	5a 94       	dec	r5
    6a2a:	01 50       	subi	r16, 0x01	; 1
    6a2c:	11 09       	sbc	r17, r1
    6a2e:	01 15       	cp	r16, r1
    6a30:	11 05       	cpc	r17, r1
    6a32:	81 f7       	brne	.-32     	; 0x6a14 <vfprintf+0x4e0>
    6a34:	db c0       	rjmp	.+438    	; 0x6bec <vfprintf+0x6b8>
    6a36:	84 36       	cpi	r24, 0x64	; 100
    6a38:	11 f0       	breq	.+4      	; 0x6a3e <vfprintf+0x50a>
    6a3a:	89 36       	cpi	r24, 0x69	; 105
    6a3c:	49 f5       	brne	.+82     	; 0x6a90 <vfprintf+0x55c>
    6a3e:	56 01       	movw	r10, r12
    6a40:	27 ff       	sbrs	r18, 7
    6a42:	09 c0       	rjmp	.+18     	; 0x6a56 <vfprintf+0x522>
    6a44:	f4 e0       	ldi	r31, 0x04	; 4
    6a46:	af 0e       	add	r10, r31
    6a48:	b1 1c       	adc	r11, r1
    6a4a:	f6 01       	movw	r30, r12
    6a4c:	60 81       	ld	r22, Z
    6a4e:	71 81       	ldd	r23, Z+1	; 0x01
    6a50:	82 81       	ldd	r24, Z+2	; 0x02
    6a52:	93 81       	ldd	r25, Z+3	; 0x03
    6a54:	0a c0       	rjmp	.+20     	; 0x6a6a <vfprintf+0x536>
    6a56:	f2 e0       	ldi	r31, 0x02	; 2
    6a58:	af 0e       	add	r10, r31
    6a5a:	b1 1c       	adc	r11, r1
    6a5c:	f6 01       	movw	r30, r12
    6a5e:	60 81       	ld	r22, Z
    6a60:	71 81       	ldd	r23, Z+1	; 0x01
    6a62:	88 27       	eor	r24, r24
    6a64:	77 fd       	sbrc	r23, 7
    6a66:	80 95       	com	r24
    6a68:	98 2f       	mov	r25, r24
    6a6a:	02 2f       	mov	r16, r18
    6a6c:	0f 76       	andi	r16, 0x6F	; 111
    6a6e:	97 ff       	sbrs	r25, 7
    6a70:	08 c0       	rjmp	.+16     	; 0x6a82 <vfprintf+0x54e>
    6a72:	90 95       	com	r25
    6a74:	80 95       	com	r24
    6a76:	70 95       	com	r23
    6a78:	61 95       	neg	r22
    6a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    6a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a80:	00 68       	ori	r16, 0x80	; 128
    6a82:	2a e0       	ldi	r18, 0x0A	; 10
    6a84:	30 e0       	ldi	r19, 0x00	; 0
    6a86:	a4 01       	movw	r20, r8
    6a88:	14 d4       	rcall	.+2088   	; 0x72b2 <__ultoa_invert>
    6a8a:	c8 2e       	mov	r12, r24
    6a8c:	c8 18       	sub	r12, r8
    6a8e:	3d c0       	rjmp	.+122    	; 0x6b0a <vfprintf+0x5d6>
    6a90:	02 2f       	mov	r16, r18
    6a92:	85 37       	cpi	r24, 0x75	; 117
    6a94:	21 f4       	brne	.+8      	; 0x6a9e <vfprintf+0x56a>
    6a96:	0f 7e       	andi	r16, 0xEF	; 239
    6a98:	2a e0       	ldi	r18, 0x0A	; 10
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
    6a9c:	1d c0       	rjmp	.+58     	; 0x6ad8 <vfprintf+0x5a4>
    6a9e:	09 7f       	andi	r16, 0xF9	; 249
    6aa0:	8f 36       	cpi	r24, 0x6F	; 111
    6aa2:	91 f0       	breq	.+36     	; 0x6ac8 <vfprintf+0x594>
    6aa4:	18 f4       	brcc	.+6      	; 0x6aac <vfprintf+0x578>
    6aa6:	88 35       	cpi	r24, 0x58	; 88
    6aa8:	59 f0       	breq	.+22     	; 0x6ac0 <vfprintf+0x58c>
    6aaa:	a9 c0       	rjmp	.+338    	; 0x6bfe <vfprintf+0x6ca>
    6aac:	80 37       	cpi	r24, 0x70	; 112
    6aae:	19 f0       	breq	.+6      	; 0x6ab6 <vfprintf+0x582>
    6ab0:	88 37       	cpi	r24, 0x78	; 120
    6ab2:	11 f0       	breq	.+4      	; 0x6ab8 <vfprintf+0x584>
    6ab4:	a4 c0       	rjmp	.+328    	; 0x6bfe <vfprintf+0x6ca>
    6ab6:	00 61       	ori	r16, 0x10	; 16
    6ab8:	04 ff       	sbrs	r16, 4
    6aba:	09 c0       	rjmp	.+18     	; 0x6ace <vfprintf+0x59a>
    6abc:	04 60       	ori	r16, 0x04	; 4
    6abe:	07 c0       	rjmp	.+14     	; 0x6ace <vfprintf+0x59a>
    6ac0:	24 ff       	sbrs	r18, 4
    6ac2:	08 c0       	rjmp	.+16     	; 0x6ad4 <vfprintf+0x5a0>
    6ac4:	06 60       	ori	r16, 0x06	; 6
    6ac6:	06 c0       	rjmp	.+12     	; 0x6ad4 <vfprintf+0x5a0>
    6ac8:	28 e0       	ldi	r18, 0x08	; 8
    6aca:	30 e0       	ldi	r19, 0x00	; 0
    6acc:	05 c0       	rjmp	.+10     	; 0x6ad8 <vfprintf+0x5a4>
    6ace:	20 e1       	ldi	r18, 0x10	; 16
    6ad0:	30 e0       	ldi	r19, 0x00	; 0
    6ad2:	02 c0       	rjmp	.+4      	; 0x6ad8 <vfprintf+0x5a4>
    6ad4:	20 e1       	ldi	r18, 0x10	; 16
    6ad6:	32 e0       	ldi	r19, 0x02	; 2
    6ad8:	56 01       	movw	r10, r12
    6ada:	07 ff       	sbrs	r16, 7
    6adc:	09 c0       	rjmp	.+18     	; 0x6af0 <vfprintf+0x5bc>
    6ade:	f4 e0       	ldi	r31, 0x04	; 4
    6ae0:	af 0e       	add	r10, r31
    6ae2:	b1 1c       	adc	r11, r1
    6ae4:	f6 01       	movw	r30, r12
    6ae6:	60 81       	ld	r22, Z
    6ae8:	71 81       	ldd	r23, Z+1	; 0x01
    6aea:	82 81       	ldd	r24, Z+2	; 0x02
    6aec:	93 81       	ldd	r25, Z+3	; 0x03
    6aee:	08 c0       	rjmp	.+16     	; 0x6b00 <vfprintf+0x5cc>
    6af0:	f2 e0       	ldi	r31, 0x02	; 2
    6af2:	af 0e       	add	r10, r31
    6af4:	b1 1c       	adc	r11, r1
    6af6:	f6 01       	movw	r30, r12
    6af8:	60 81       	ld	r22, Z
    6afa:	71 81       	ldd	r23, Z+1	; 0x01
    6afc:	80 e0       	ldi	r24, 0x00	; 0
    6afe:	90 e0       	ldi	r25, 0x00	; 0
    6b00:	a4 01       	movw	r20, r8
    6b02:	d7 d3       	rcall	.+1966   	; 0x72b2 <__ultoa_invert>
    6b04:	c8 2e       	mov	r12, r24
    6b06:	c8 18       	sub	r12, r8
    6b08:	0f 77       	andi	r16, 0x7F	; 127
    6b0a:	06 ff       	sbrs	r16, 6
    6b0c:	0b c0       	rjmp	.+22     	; 0x6b24 <vfprintf+0x5f0>
    6b0e:	20 2f       	mov	r18, r16
    6b10:	2e 7f       	andi	r18, 0xFE	; 254
    6b12:	c1 16       	cp	r12, r17
    6b14:	50 f4       	brcc	.+20     	; 0x6b2a <vfprintf+0x5f6>
    6b16:	04 ff       	sbrs	r16, 4
    6b18:	0a c0       	rjmp	.+20     	; 0x6b2e <vfprintf+0x5fa>
    6b1a:	02 fd       	sbrc	r16, 2
    6b1c:	08 c0       	rjmp	.+16     	; 0x6b2e <vfprintf+0x5fa>
    6b1e:	20 2f       	mov	r18, r16
    6b20:	2e 7e       	andi	r18, 0xEE	; 238
    6b22:	05 c0       	rjmp	.+10     	; 0x6b2e <vfprintf+0x5fa>
    6b24:	dc 2c       	mov	r13, r12
    6b26:	20 2f       	mov	r18, r16
    6b28:	03 c0       	rjmp	.+6      	; 0x6b30 <vfprintf+0x5fc>
    6b2a:	dc 2c       	mov	r13, r12
    6b2c:	01 c0       	rjmp	.+2      	; 0x6b30 <vfprintf+0x5fc>
    6b2e:	d1 2e       	mov	r13, r17
    6b30:	24 ff       	sbrs	r18, 4
    6b32:	0d c0       	rjmp	.+26     	; 0x6b4e <vfprintf+0x61a>
    6b34:	fe 01       	movw	r30, r28
    6b36:	ec 0d       	add	r30, r12
    6b38:	f1 1d       	adc	r31, r1
    6b3a:	80 81       	ld	r24, Z
    6b3c:	80 33       	cpi	r24, 0x30	; 48
    6b3e:	11 f4       	brne	.+4      	; 0x6b44 <vfprintf+0x610>
    6b40:	29 7e       	andi	r18, 0xE9	; 233
    6b42:	09 c0       	rjmp	.+18     	; 0x6b56 <vfprintf+0x622>
    6b44:	22 ff       	sbrs	r18, 2
    6b46:	06 c0       	rjmp	.+12     	; 0x6b54 <vfprintf+0x620>
    6b48:	d3 94       	inc	r13
    6b4a:	d3 94       	inc	r13
    6b4c:	04 c0       	rjmp	.+8      	; 0x6b56 <vfprintf+0x622>
    6b4e:	82 2f       	mov	r24, r18
    6b50:	86 78       	andi	r24, 0x86	; 134
    6b52:	09 f0       	breq	.+2      	; 0x6b56 <vfprintf+0x622>
    6b54:	d3 94       	inc	r13
    6b56:	23 fd       	sbrc	r18, 3
    6b58:	12 c0       	rjmp	.+36     	; 0x6b7e <vfprintf+0x64a>
    6b5a:	20 ff       	sbrs	r18, 0
    6b5c:	06 c0       	rjmp	.+12     	; 0x6b6a <vfprintf+0x636>
    6b5e:	1c 2d       	mov	r17, r12
    6b60:	d5 14       	cp	r13, r5
    6b62:	18 f4       	brcc	.+6      	; 0x6b6a <vfprintf+0x636>
    6b64:	15 0d       	add	r17, r5
    6b66:	1d 19       	sub	r17, r13
    6b68:	d5 2c       	mov	r13, r5
    6b6a:	d5 14       	cp	r13, r5
    6b6c:	60 f4       	brcc	.+24     	; 0x6b86 <vfprintf+0x652>
    6b6e:	b7 01       	movw	r22, r14
    6b70:	80 e2       	ldi	r24, 0x20	; 32
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	2b 8b       	std	Y+19, r18	; 0x13
    6b76:	28 d3       	rcall	.+1616   	; 0x71c8 <fputc>
    6b78:	d3 94       	inc	r13
    6b7a:	2b 89       	ldd	r18, Y+19	; 0x13
    6b7c:	f6 cf       	rjmp	.-20     	; 0x6b6a <vfprintf+0x636>
    6b7e:	d5 14       	cp	r13, r5
    6b80:	10 f4       	brcc	.+4      	; 0x6b86 <vfprintf+0x652>
    6b82:	5d 18       	sub	r5, r13
    6b84:	01 c0       	rjmp	.+2      	; 0x6b88 <vfprintf+0x654>
    6b86:	51 2c       	mov	r5, r1
    6b88:	24 ff       	sbrs	r18, 4
    6b8a:	11 c0       	rjmp	.+34     	; 0x6bae <vfprintf+0x67a>
    6b8c:	b7 01       	movw	r22, r14
    6b8e:	80 e3       	ldi	r24, 0x30	; 48
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	2b 8b       	std	Y+19, r18	; 0x13
    6b94:	19 d3       	rcall	.+1586   	; 0x71c8 <fputc>
    6b96:	2b 89       	ldd	r18, Y+19	; 0x13
    6b98:	22 ff       	sbrs	r18, 2
    6b9a:	16 c0       	rjmp	.+44     	; 0x6bc8 <vfprintf+0x694>
    6b9c:	21 ff       	sbrs	r18, 1
    6b9e:	03 c0       	rjmp	.+6      	; 0x6ba6 <vfprintf+0x672>
    6ba0:	88 e5       	ldi	r24, 0x58	; 88
    6ba2:	90 e0       	ldi	r25, 0x00	; 0
    6ba4:	02 c0       	rjmp	.+4      	; 0x6baa <vfprintf+0x676>
    6ba6:	88 e7       	ldi	r24, 0x78	; 120
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	b7 01       	movw	r22, r14
    6bac:	0c c0       	rjmp	.+24     	; 0x6bc6 <vfprintf+0x692>
    6bae:	82 2f       	mov	r24, r18
    6bb0:	86 78       	andi	r24, 0x86	; 134
    6bb2:	51 f0       	breq	.+20     	; 0x6bc8 <vfprintf+0x694>
    6bb4:	21 fd       	sbrc	r18, 1
    6bb6:	02 c0       	rjmp	.+4      	; 0x6bbc <vfprintf+0x688>
    6bb8:	80 e2       	ldi	r24, 0x20	; 32
    6bba:	01 c0       	rjmp	.+2      	; 0x6bbe <vfprintf+0x68a>
    6bbc:	8b e2       	ldi	r24, 0x2B	; 43
    6bbe:	27 fd       	sbrc	r18, 7
    6bc0:	8d e2       	ldi	r24, 0x2D	; 45
    6bc2:	b7 01       	movw	r22, r14
    6bc4:	90 e0       	ldi	r25, 0x00	; 0
    6bc6:	00 d3       	rcall	.+1536   	; 0x71c8 <fputc>
    6bc8:	c1 16       	cp	r12, r17
    6bca:	30 f4       	brcc	.+12     	; 0x6bd8 <vfprintf+0x6a4>
    6bcc:	b7 01       	movw	r22, r14
    6bce:	80 e3       	ldi	r24, 0x30	; 48
    6bd0:	90 e0       	ldi	r25, 0x00	; 0
    6bd2:	fa d2       	rcall	.+1524   	; 0x71c8 <fputc>
    6bd4:	11 50       	subi	r17, 0x01	; 1
    6bd6:	f8 cf       	rjmp	.-16     	; 0x6bc8 <vfprintf+0x694>
    6bd8:	ca 94       	dec	r12
    6bda:	f4 01       	movw	r30, r8
    6bdc:	ec 0d       	add	r30, r12
    6bde:	f1 1d       	adc	r31, r1
    6be0:	80 81       	ld	r24, Z
    6be2:	b7 01       	movw	r22, r14
    6be4:	90 e0       	ldi	r25, 0x00	; 0
    6be6:	f0 d2       	rcall	.+1504   	; 0x71c8 <fputc>
    6be8:	c1 10       	cpse	r12, r1
    6bea:	f6 cf       	rjmp	.-20     	; 0x6bd8 <vfprintf+0x6a4>
    6bec:	55 20       	and	r5, r5
    6bee:	09 f4       	brne	.+2      	; 0x6bf2 <vfprintf+0x6be>
    6bf0:	dd cc       	rjmp	.-1606   	; 0x65ac <vfprintf+0x78>
    6bf2:	b7 01       	movw	r22, r14
    6bf4:	80 e2       	ldi	r24, 0x20	; 32
    6bf6:	90 e0       	ldi	r25, 0x00	; 0
    6bf8:	e7 d2       	rcall	.+1486   	; 0x71c8 <fputc>
    6bfa:	5a 94       	dec	r5
    6bfc:	f7 cf       	rjmp	.-18     	; 0x6bec <vfprintf+0x6b8>
    6bfe:	f7 01       	movw	r30, r14
    6c00:	86 81       	ldd	r24, Z+6	; 0x06
    6c02:	97 81       	ldd	r25, Z+7	; 0x07
    6c04:	02 c0       	rjmp	.+4      	; 0x6c0a <vfprintf+0x6d6>
    6c06:	8f ef       	ldi	r24, 0xFF	; 255
    6c08:	9f ef       	ldi	r25, 0xFF	; 255
    6c0a:	63 96       	adiw	r28, 0x13	; 19
    6c0c:	cd bf       	out	0x3d, r28	; 61
    6c0e:	de bf       	out	0x3e, r29	; 62
    6c10:	df 91       	pop	r29
    6c12:	cf 91       	pop	r28
    6c14:	1f 91       	pop	r17
    6c16:	0f 91       	pop	r16
    6c18:	ff 90       	pop	r15
    6c1a:	ef 90       	pop	r14
    6c1c:	df 90       	pop	r13
    6c1e:	cf 90       	pop	r12
    6c20:	bf 90       	pop	r11
    6c22:	af 90       	pop	r10
    6c24:	9f 90       	pop	r9
    6c26:	8f 90       	pop	r8
    6c28:	7f 90       	pop	r7
    6c2a:	6f 90       	pop	r6
    6c2c:	5f 90       	pop	r5
    6c2e:	4f 90       	pop	r4
    6c30:	3f 90       	pop	r3
    6c32:	2f 90       	pop	r2
    6c34:	08 95       	ret

00006c36 <__udivmodhi4>:
    6c36:	aa 1b       	sub	r26, r26
    6c38:	bb 1b       	sub	r27, r27
    6c3a:	51 e1       	ldi	r21, 0x11	; 17
    6c3c:	07 c0       	rjmp	.+14     	; 0x6c4c <__udivmodhi4_ep>

00006c3e <__udivmodhi4_loop>:
    6c3e:	aa 1f       	adc	r26, r26
    6c40:	bb 1f       	adc	r27, r27
    6c42:	a6 17       	cp	r26, r22
    6c44:	b7 07       	cpc	r27, r23
    6c46:	10 f0       	brcs	.+4      	; 0x6c4c <__udivmodhi4_ep>
    6c48:	a6 1b       	sub	r26, r22
    6c4a:	b7 0b       	sbc	r27, r23

00006c4c <__udivmodhi4_ep>:
    6c4c:	88 1f       	adc	r24, r24
    6c4e:	99 1f       	adc	r25, r25
    6c50:	5a 95       	dec	r21
    6c52:	a9 f7       	brne	.-22     	; 0x6c3e <__udivmodhi4_loop>
    6c54:	80 95       	com	r24
    6c56:	90 95       	com	r25
    6c58:	bc 01       	movw	r22, r24
    6c5a:	cd 01       	movw	r24, r26
    6c5c:	08 95       	ret

00006c5e <__divmodhi4>:
    6c5e:	97 fb       	bst	r25, 7
    6c60:	07 2e       	mov	r0, r23
    6c62:	16 f4       	brtc	.+4      	; 0x6c68 <__divmodhi4+0xa>
    6c64:	00 94       	com	r0
    6c66:	06 d0       	rcall	.+12     	; 0x6c74 <__divmodhi4_neg1>
    6c68:	77 fd       	sbrc	r23, 7
    6c6a:	08 d0       	rcall	.+16     	; 0x6c7c <__divmodhi4_neg2>
    6c6c:	e4 df       	rcall	.-56     	; 0x6c36 <__udivmodhi4>
    6c6e:	07 fc       	sbrc	r0, 7
    6c70:	05 d0       	rcall	.+10     	; 0x6c7c <__divmodhi4_neg2>
    6c72:	3e f4       	brtc	.+14     	; 0x6c82 <__divmodhi4_exit>

00006c74 <__divmodhi4_neg1>:
    6c74:	90 95       	com	r25
    6c76:	81 95       	neg	r24
    6c78:	9f 4f       	sbci	r25, 0xFF	; 255
    6c7a:	08 95       	ret

00006c7c <__divmodhi4_neg2>:
    6c7c:	70 95       	com	r23
    6c7e:	61 95       	neg	r22
    6c80:	7f 4f       	sbci	r23, 0xFF	; 255

00006c82 <__divmodhi4_exit>:
    6c82:	08 95       	ret

00006c84 <__tablejump2__>:
    6c84:	ee 0f       	add	r30, r30
    6c86:	ff 1f       	adc	r31, r31

00006c88 <__tablejump__>:
    6c88:	05 90       	lpm	r0, Z+
    6c8a:	f4 91       	lpm	r31, Z
    6c8c:	e0 2d       	mov	r30, r0
    6c8e:	19 94       	eijmp

00006c90 <__umulhisi3>:
    6c90:	a2 9f       	mul	r26, r18
    6c92:	b0 01       	movw	r22, r0
    6c94:	b3 9f       	mul	r27, r19
    6c96:	c0 01       	movw	r24, r0
    6c98:	a3 9f       	mul	r26, r19
    6c9a:	70 0d       	add	r23, r0
    6c9c:	81 1d       	adc	r24, r1
    6c9e:	11 24       	eor	r1, r1
    6ca0:	91 1d       	adc	r25, r1
    6ca2:	b2 9f       	mul	r27, r18
    6ca4:	70 0d       	add	r23, r0
    6ca6:	81 1d       	adc	r24, r1
    6ca8:	11 24       	eor	r1, r1
    6caa:	91 1d       	adc	r25, r1
    6cac:	08 95       	ret

00006cae <strtoul>:
    6cae:	2f 92       	push	r2
    6cb0:	3f 92       	push	r3
    6cb2:	5f 92       	push	r5
    6cb4:	6f 92       	push	r6
    6cb6:	7f 92       	push	r7
    6cb8:	8f 92       	push	r8
    6cba:	9f 92       	push	r9
    6cbc:	af 92       	push	r10
    6cbe:	bf 92       	push	r11
    6cc0:	cf 92       	push	r12
    6cc2:	df 92       	push	r13
    6cc4:	ef 92       	push	r14
    6cc6:	ff 92       	push	r15
    6cc8:	0f 93       	push	r16
    6cca:	1f 93       	push	r17
    6ccc:	cf 93       	push	r28
    6cce:	df 93       	push	r29
    6cd0:	8b 01       	movw	r16, r22
    6cd2:	ea 01       	movw	r28, r20
    6cd4:	61 15       	cp	r22, r1
    6cd6:	71 05       	cpc	r23, r1
    6cd8:	21 f0       	breq	.+8      	; 0x6ce2 <strtoul+0x34>
    6cda:	db 01       	movw	r26, r22
    6cdc:	8c 93       	st	X, r24
    6cde:	11 96       	adiw	r26, 0x01	; 1
    6ce0:	9c 93       	st	X, r25
    6ce2:	20 97       	sbiw	r28, 0x00	; 0
    6ce4:	39 f0       	breq	.+14     	; 0x6cf4 <strtoul+0x46>
    6ce6:	9e 01       	movw	r18, r28
    6ce8:	22 50       	subi	r18, 0x02	; 2
    6cea:	31 09       	sbc	r19, r1
    6cec:	23 32       	cpi	r18, 0x23	; 35
    6cee:	31 05       	cpc	r19, r1
    6cf0:	08 f0       	brcs	.+2      	; 0x6cf4 <strtoul+0x46>
    6cf2:	d5 c0       	rjmp	.+426    	; 0x6e9e <strtoul+0x1f0>
    6cf4:	7c 01       	movw	r14, r24
    6cf6:	67 01       	movw	r12, r14
    6cf8:	bf ef       	ldi	r27, 0xFF	; 255
    6cfa:	cb 1a       	sub	r12, r27
    6cfc:	db 0a       	sbc	r13, r27
    6cfe:	56 01       	movw	r10, r12
    6d00:	f7 01       	movw	r30, r14
    6d02:	60 80       	ld	r6, Z
    6d04:	86 2d       	mov	r24, r6
    6d06:	90 e0       	ldi	r25, 0x00	; 0
    6d08:	d8 d1       	rcall	.+944    	; 0x70ba <isspace>
    6d0a:	89 2b       	or	r24, r25
    6d0c:	11 f0       	breq	.+4      	; 0x6d12 <strtoul+0x64>
    6d0e:	76 01       	movw	r14, r12
    6d10:	f2 cf       	rjmp	.-28     	; 0x6cf6 <strtoul+0x48>
    6d12:	fd e2       	ldi	r31, 0x2D	; 45
    6d14:	6f 12       	cpse	r6, r31
    6d16:	0a c0       	rjmp	.+20     	; 0x6d2c <strtoul+0x7e>
    6d18:	57 01       	movw	r10, r14
    6d1a:	82 e0       	ldi	r24, 0x02	; 2
    6d1c:	a8 0e       	add	r10, r24
    6d1e:	b1 1c       	adc	r11, r1
    6d20:	d7 01       	movw	r26, r14
    6d22:	11 96       	adiw	r26, 0x01	; 1
    6d24:	6c 90       	ld	r6, X
    6d26:	77 24       	eor	r7, r7
    6d28:	73 94       	inc	r7
    6d2a:	0b c0       	rjmp	.+22     	; 0x6d42 <strtoul+0x94>
    6d2c:	bb e2       	ldi	r27, 0x2B	; 43
    6d2e:	6b 12       	cpse	r6, r27
    6d30:	07 c0       	rjmp	.+14     	; 0x6d40 <strtoul+0x92>
    6d32:	57 01       	movw	r10, r14
    6d34:	e2 e0       	ldi	r30, 0x02	; 2
    6d36:	ae 0e       	add	r10, r30
    6d38:	b1 1c       	adc	r11, r1
    6d3a:	d7 01       	movw	r26, r14
    6d3c:	11 96       	adiw	r26, 0x01	; 1
    6d3e:	6c 90       	ld	r6, X
    6d40:	71 2c       	mov	r7, r1
    6d42:	ce 01       	movw	r24, r28
    6d44:	8f 7e       	andi	r24, 0xEF	; 239
    6d46:	89 2b       	or	r24, r25
    6d48:	89 f4       	brne	.+34     	; 0x6d6c <strtoul+0xbe>
    6d4a:	b0 e3       	ldi	r27, 0x30	; 48
    6d4c:	6b 12       	cpse	r6, r27
    6d4e:	36 c0       	rjmp	.+108    	; 0x6dbc <strtoul+0x10e>
    6d50:	f5 01       	movw	r30, r10
    6d52:	80 81       	ld	r24, Z
    6d54:	8f 7d       	andi	r24, 0xDF	; 223
    6d56:	88 35       	cpi	r24, 0x58	; 88
    6d58:	d1 f4       	brne	.+52     	; 0x6d8e <strtoul+0xe0>
    6d5a:	61 80       	ldd	r6, Z+1	; 0x01
    6d5c:	f2 e0       	ldi	r31, 0x02	; 2
    6d5e:	af 0e       	add	r10, r31
    6d60:	b1 1c       	adc	r11, r1
    6d62:	87 2d       	mov	r24, r7
    6d64:	82 60       	ori	r24, 0x02	; 2
    6d66:	78 2e       	mov	r7, r24
    6d68:	c0 e1       	ldi	r28, 0x10	; 16
    6d6a:	d0 e0       	ldi	r29, 0x00	; 0
    6d6c:	ca 30       	cpi	r28, 0x0A	; 10
    6d6e:	d1 05       	cpc	r29, r1
    6d70:	49 f1       	breq	.+82     	; 0x6dc4 <strtoul+0x116>
    6d72:	c0 31       	cpi	r28, 0x10	; 16
    6d74:	d1 05       	cpc	r29, r1
    6d76:	21 f0       	breq	.+8      	; 0x6d80 <strtoul+0xd2>
    6d78:	c8 30       	cpi	r28, 0x08	; 8
    6d7a:	d1 05       	cpc	r29, r1
    6d7c:	99 f4       	brne	.+38     	; 0x6da4 <strtoul+0xf6>
    6d7e:	09 c0       	rjmp	.+18     	; 0x6d92 <strtoul+0xe4>
    6d80:	cc 24       	eor	r12, r12
    6d82:	ca 94       	dec	r12
    6d84:	dc 2c       	mov	r13, r12
    6d86:	ec 2c       	mov	r14, r12
    6d88:	af e0       	ldi	r26, 0x0F	; 15
    6d8a:	fa 2e       	mov	r15, r26
    6d8c:	21 c0       	rjmp	.+66     	; 0x6dd0 <strtoul+0x122>
    6d8e:	20 97       	sbiw	r28, 0x00	; 0
    6d90:	69 f7       	brne	.-38     	; 0x6d6c <strtoul+0xbe>
    6d92:	c8 e0       	ldi	r28, 0x08	; 8
    6d94:	d0 e0       	ldi	r29, 0x00	; 0
    6d96:	cc 24       	eor	r12, r12
    6d98:	ca 94       	dec	r12
    6d9a:	dc 2c       	mov	r13, r12
    6d9c:	ec 2c       	mov	r14, r12
    6d9e:	ff e1       	ldi	r31, 0x1F	; 31
    6da0:	ff 2e       	mov	r15, r31
    6da2:	16 c0       	rjmp	.+44     	; 0x6dd0 <strtoul+0x122>
    6da4:	6f ef       	ldi	r22, 0xFF	; 255
    6da6:	7f ef       	ldi	r23, 0xFF	; 255
    6da8:	cb 01       	movw	r24, r22
    6daa:	9e 01       	movw	r18, r28
    6dac:	44 27       	eor	r20, r20
    6dae:	37 fd       	sbrc	r19, 7
    6db0:	40 95       	com	r20
    6db2:	54 2f       	mov	r21, r20
    6db4:	ee d2       	rcall	.+1500   	; 0x7392 <__udivmodsi4>
    6db6:	69 01       	movw	r12, r18
    6db8:	7a 01       	movw	r14, r20
    6dba:	0a c0       	rjmp	.+20     	; 0x6dd0 <strtoul+0x122>
    6dbc:	20 97       	sbiw	r28, 0x00	; 0
    6dbe:	b1 f6       	brne	.-84     	; 0x6d6c <strtoul+0xbe>
    6dc0:	ca e0       	ldi	r28, 0x0A	; 10
    6dc2:	d0 e0       	ldi	r29, 0x00	; 0
    6dc4:	e9 e9       	ldi	r30, 0x99	; 153
    6dc6:	ce 2e       	mov	r12, r30
    6dc8:	dc 2c       	mov	r13, r12
    6dca:	ec 2c       	mov	r14, r12
    6dcc:	e9 e1       	ldi	r30, 0x19	; 25
    6dce:	fe 2e       	mov	r15, r30
    6dd0:	f5 01       	movw	r30, r10
    6dd2:	60 e0       	ldi	r22, 0x00	; 0
    6dd4:	20 e0       	ldi	r18, 0x00	; 0
    6dd6:	30 e0       	ldi	r19, 0x00	; 0
    6dd8:	a9 01       	movw	r20, r18
    6dda:	4e 01       	movw	r8, r28
    6ddc:	aa 24       	eor	r10, r10
    6dde:	97 fc       	sbrc	r9, 7
    6de0:	a0 94       	com	r10
    6de2:	ba 2c       	mov	r11, r10
    6de4:	1f 01       	movw	r2, r30
    6de6:	70 ed       	ldi	r23, 0xD0	; 208
    6de8:	57 2e       	mov	r5, r23
    6dea:	56 0c       	add	r5, r6
    6dec:	a9 e0       	ldi	r26, 0x09	; 9
    6dee:	a5 15       	cp	r26, r5
    6df0:	70 f4       	brcc	.+28     	; 0x6e0e <strtoul+0x160>
    6df2:	8f eb       	ldi	r24, 0xBF	; 191
    6df4:	86 0d       	add	r24, r6
    6df6:	8a 31       	cpi	r24, 0x1A	; 26
    6df8:	18 f4       	brcc	.+6      	; 0x6e00 <strtoul+0x152>
    6dfa:	99 ec       	ldi	r25, 0xC9	; 201
    6dfc:	59 2e       	mov	r5, r25
    6dfe:	06 c0       	rjmp	.+12     	; 0x6e0c <strtoul+0x15e>
    6e00:	8f e9       	ldi	r24, 0x9F	; 159
    6e02:	86 0d       	add	r24, r6
    6e04:	8a 31       	cpi	r24, 0x1A	; 26
    6e06:	40 f5       	brcc	.+80     	; 0x6e58 <strtoul+0x1aa>
    6e08:	89 ea       	ldi	r24, 0xA9	; 169
    6e0a:	58 2e       	mov	r5, r24
    6e0c:	56 0c       	add	r5, r6
    6e0e:	85 2d       	mov	r24, r5
    6e10:	90 e0       	ldi	r25, 0x00	; 0
    6e12:	8c 17       	cp	r24, r28
    6e14:	9d 07       	cpc	r25, r29
    6e16:	04 f5       	brge	.+64     	; 0x6e58 <strtoul+0x1aa>
    6e18:	6f 3f       	cpi	r22, 0xFF	; 255
    6e1a:	d1 f0       	breq	.+52     	; 0x6e50 <strtoul+0x1a2>
    6e1c:	c2 16       	cp	r12, r18
    6e1e:	d3 06       	cpc	r13, r19
    6e20:	e4 06       	cpc	r14, r20
    6e22:	f5 06       	cpc	r15, r21
    6e24:	90 f0       	brcs	.+36     	; 0x6e4a <strtoul+0x19c>
    6e26:	c5 01       	movw	r24, r10
    6e28:	b4 01       	movw	r22, r8
    6e2a:	a4 d2       	rcall	.+1352   	; 0x7374 <__mulsi3>
    6e2c:	9b 01       	movw	r18, r22
    6e2e:	ac 01       	movw	r20, r24
    6e30:	85 2d       	mov	r24, r5
    6e32:	90 e0       	ldi	r25, 0x00	; 0
    6e34:	a0 e0       	ldi	r26, 0x00	; 0
    6e36:	b0 e0       	ldi	r27, 0x00	; 0
    6e38:	28 0f       	add	r18, r24
    6e3a:	39 1f       	adc	r19, r25
    6e3c:	4a 1f       	adc	r20, r26
    6e3e:	5b 1f       	adc	r21, r27
    6e40:	28 17       	cp	r18, r24
    6e42:	39 07       	cpc	r19, r25
    6e44:	4a 07       	cpc	r20, r26
    6e46:	5b 07       	cpc	r21, r27
    6e48:	10 f4       	brcc	.+4      	; 0x6e4e <strtoul+0x1a0>
    6e4a:	6f ef       	ldi	r22, 0xFF	; 255
    6e4c:	01 c0       	rjmp	.+2      	; 0x6e50 <strtoul+0x1a2>
    6e4e:	61 e0       	ldi	r22, 0x01	; 1
    6e50:	31 96       	adiw	r30, 0x01	; 1
    6e52:	d1 01       	movw	r26, r2
    6e54:	6c 90       	ld	r6, X
    6e56:	c6 cf       	rjmp	.-116    	; 0x6de4 <strtoul+0x136>
    6e58:	01 15       	cp	r16, r1
    6e5a:	11 05       	cpc	r17, r1
    6e5c:	51 f0       	breq	.+20     	; 0x6e72 <strtoul+0x1c4>
    6e5e:	66 23       	and	r22, r22
    6e60:	11 f0       	breq	.+4      	; 0x6e66 <strtoul+0x1b8>
    6e62:	31 97       	sbiw	r30, 0x01	; 1
    6e64:	03 c0       	rjmp	.+6      	; 0x6e6c <strtoul+0x1be>
    6e66:	71 fe       	sbrs	r7, 1
    6e68:	04 c0       	rjmp	.+8      	; 0x6e72 <strtoul+0x1c4>
    6e6a:	32 97       	sbiw	r30, 0x02	; 2
    6e6c:	d8 01       	movw	r26, r16
    6e6e:	ed 93       	st	X+, r30
    6e70:	fc 93       	st	X, r31
    6e72:	70 fe       	sbrs	r7, 0
    6e74:	07 c0       	rjmp	.+14     	; 0x6e84 <strtoul+0x1d6>
    6e76:	50 95       	com	r21
    6e78:	40 95       	com	r20
    6e7a:	30 95       	com	r19
    6e7c:	21 95       	neg	r18
    6e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    6e80:	4f 4f       	sbci	r20, 0xFF	; 255
    6e82:	5f 4f       	sbci	r21, 0xFF	; 255
    6e84:	67 ff       	sbrs	r22, 7
    6e86:	10 c0       	rjmp	.+32     	; 0x6ea8 <strtoul+0x1fa>
    6e88:	82 e2       	ldi	r24, 0x22	; 34
    6e8a:	90 e0       	ldi	r25, 0x00	; 0
    6e8c:	80 93 ae 2b 	sts	0x2BAE, r24
    6e90:	90 93 af 2b 	sts	0x2BAF, r25
    6e94:	6f ef       	ldi	r22, 0xFF	; 255
    6e96:	7f ef       	ldi	r23, 0xFF	; 255
    6e98:	8f ef       	ldi	r24, 0xFF	; 255
    6e9a:	9f ef       	ldi	r25, 0xFF	; 255
    6e9c:	07 c0       	rjmp	.+14     	; 0x6eac <strtoul+0x1fe>
    6e9e:	60 e0       	ldi	r22, 0x00	; 0
    6ea0:	70 e0       	ldi	r23, 0x00	; 0
    6ea2:	80 e0       	ldi	r24, 0x00	; 0
    6ea4:	90 e0       	ldi	r25, 0x00	; 0
    6ea6:	02 c0       	rjmp	.+4      	; 0x6eac <strtoul+0x1fe>
    6ea8:	b9 01       	movw	r22, r18
    6eaa:	ca 01       	movw	r24, r20
    6eac:	df 91       	pop	r29
    6eae:	cf 91       	pop	r28
    6eb0:	1f 91       	pop	r17
    6eb2:	0f 91       	pop	r16
    6eb4:	ff 90       	pop	r15
    6eb6:	ef 90       	pop	r14
    6eb8:	df 90       	pop	r13
    6eba:	cf 90       	pop	r12
    6ebc:	bf 90       	pop	r11
    6ebe:	af 90       	pop	r10
    6ec0:	9f 90       	pop	r9
    6ec2:	8f 90       	pop	r8
    6ec4:	7f 90       	pop	r7
    6ec6:	6f 90       	pop	r6
    6ec8:	5f 90       	pop	r5
    6eca:	3f 90       	pop	r3
    6ecc:	2f 90       	pop	r2
    6ece:	08 95       	ret

00006ed0 <atoi>:
    6ed0:	fc 01       	movw	r30, r24
    6ed2:	88 27       	eor	r24, r24
    6ed4:	99 27       	eor	r25, r25
    6ed6:	e8 94       	clt
    6ed8:	21 91       	ld	r18, Z+
    6eda:	20 32       	cpi	r18, 0x20	; 32
    6edc:	e9 f3       	breq	.-6      	; 0x6ed8 <atoi+0x8>
    6ede:	29 30       	cpi	r18, 0x09	; 9
    6ee0:	10 f0       	brcs	.+4      	; 0x6ee6 <atoi+0x16>
    6ee2:	2e 30       	cpi	r18, 0x0E	; 14
    6ee4:	c8 f3       	brcs	.-14     	; 0x6ed8 <atoi+0x8>
    6ee6:	2b 32       	cpi	r18, 0x2B	; 43
    6ee8:	39 f0       	breq	.+14     	; 0x6ef8 <atoi+0x28>
    6eea:	2d 32       	cpi	r18, 0x2D	; 45
    6eec:	31 f4       	brne	.+12     	; 0x6efa <atoi+0x2a>
    6eee:	68 94       	set
    6ef0:	03 c0       	rjmp	.+6      	; 0x6ef8 <atoi+0x28>
    6ef2:	62 d1       	rcall	.+708    	; 0x71b8 <__mulhi_const_10>
    6ef4:	82 0f       	add	r24, r18
    6ef6:	91 1d       	adc	r25, r1
    6ef8:	21 91       	ld	r18, Z+
    6efa:	20 53       	subi	r18, 0x30	; 48
    6efc:	2a 30       	cpi	r18, 0x0A	; 10
    6efe:	c8 f3       	brcs	.-14     	; 0x6ef2 <atoi+0x22>
    6f00:	1e f4       	brtc	.+6      	; 0x6f08 <atoi+0x38>
    6f02:	90 95       	com	r25
    6f04:	81 95       	neg	r24
    6f06:	9f 4f       	sbci	r25, 0xFF	; 255
    6f08:	08 95       	ret

00006f0a <__ftoa_engine>:
    6f0a:	28 30       	cpi	r18, 0x08	; 8
    6f0c:	08 f0       	brcs	.+2      	; 0x6f10 <__ftoa_engine+0x6>
    6f0e:	27 e0       	ldi	r18, 0x07	; 7
    6f10:	33 27       	eor	r19, r19
    6f12:	da 01       	movw	r26, r20
    6f14:	99 0f       	add	r25, r25
    6f16:	31 1d       	adc	r19, r1
    6f18:	87 fd       	sbrc	r24, 7
    6f1a:	91 60       	ori	r25, 0x01	; 1
    6f1c:	00 96       	adiw	r24, 0x00	; 0
    6f1e:	61 05       	cpc	r22, r1
    6f20:	71 05       	cpc	r23, r1
    6f22:	39 f4       	brne	.+14     	; 0x6f32 <__ftoa_engine+0x28>
    6f24:	32 60       	ori	r19, 0x02	; 2
    6f26:	2e 5f       	subi	r18, 0xFE	; 254
    6f28:	3d 93       	st	X+, r19
    6f2a:	30 e3       	ldi	r19, 0x30	; 48
    6f2c:	2a 95       	dec	r18
    6f2e:	e1 f7       	brne	.-8      	; 0x6f28 <__ftoa_engine+0x1e>
    6f30:	08 95       	ret
    6f32:	9f 3f       	cpi	r25, 0xFF	; 255
    6f34:	30 f0       	brcs	.+12     	; 0x6f42 <__ftoa_engine+0x38>
    6f36:	80 38       	cpi	r24, 0x80	; 128
    6f38:	71 05       	cpc	r23, r1
    6f3a:	61 05       	cpc	r22, r1
    6f3c:	09 f0       	breq	.+2      	; 0x6f40 <__ftoa_engine+0x36>
    6f3e:	3c 5f       	subi	r19, 0xFC	; 252
    6f40:	3c 5f       	subi	r19, 0xFC	; 252
    6f42:	3d 93       	st	X+, r19
    6f44:	91 30       	cpi	r25, 0x01	; 1
    6f46:	08 f0       	brcs	.+2      	; 0x6f4a <__ftoa_engine+0x40>
    6f48:	80 68       	ori	r24, 0x80	; 128
    6f4a:	91 1d       	adc	r25, r1
    6f4c:	df 93       	push	r29
    6f4e:	cf 93       	push	r28
    6f50:	1f 93       	push	r17
    6f52:	0f 93       	push	r16
    6f54:	ff 92       	push	r15
    6f56:	ef 92       	push	r14
    6f58:	19 2f       	mov	r17, r25
    6f5a:	98 7f       	andi	r25, 0xF8	; 248
    6f5c:	96 95       	lsr	r25
    6f5e:	e9 2f       	mov	r30, r25
    6f60:	96 95       	lsr	r25
    6f62:	96 95       	lsr	r25
    6f64:	e9 0f       	add	r30, r25
    6f66:	ff 27       	eor	r31, r31
    6f68:	ec 52       	subi	r30, 0x2C	; 44
    6f6a:	fd 4f       	sbci	r31, 0xFD	; 253
    6f6c:	99 27       	eor	r25, r25
    6f6e:	33 27       	eor	r19, r19
    6f70:	ee 24       	eor	r14, r14
    6f72:	ff 24       	eor	r15, r15
    6f74:	a7 01       	movw	r20, r14
    6f76:	e7 01       	movw	r28, r14
    6f78:	05 90       	lpm	r0, Z+
    6f7a:	08 94       	sec
    6f7c:	07 94       	ror	r0
    6f7e:	28 f4       	brcc	.+10     	; 0x6f8a <__ftoa_engine+0x80>
    6f80:	36 0f       	add	r19, r22
    6f82:	e7 1e       	adc	r14, r23
    6f84:	f8 1e       	adc	r15, r24
    6f86:	49 1f       	adc	r20, r25
    6f88:	51 1d       	adc	r21, r1
    6f8a:	66 0f       	add	r22, r22
    6f8c:	77 1f       	adc	r23, r23
    6f8e:	88 1f       	adc	r24, r24
    6f90:	99 1f       	adc	r25, r25
    6f92:	06 94       	lsr	r0
    6f94:	a1 f7       	brne	.-24     	; 0x6f7e <__ftoa_engine+0x74>
    6f96:	05 90       	lpm	r0, Z+
    6f98:	07 94       	ror	r0
    6f9a:	28 f4       	brcc	.+10     	; 0x6fa6 <__ftoa_engine+0x9c>
    6f9c:	e7 0e       	add	r14, r23
    6f9e:	f8 1e       	adc	r15, r24
    6fa0:	49 1f       	adc	r20, r25
    6fa2:	56 1f       	adc	r21, r22
    6fa4:	c1 1d       	adc	r28, r1
    6fa6:	77 0f       	add	r23, r23
    6fa8:	88 1f       	adc	r24, r24
    6faa:	99 1f       	adc	r25, r25
    6fac:	66 1f       	adc	r22, r22
    6fae:	06 94       	lsr	r0
    6fb0:	a1 f7       	brne	.-24     	; 0x6f9a <__ftoa_engine+0x90>
    6fb2:	05 90       	lpm	r0, Z+
    6fb4:	07 94       	ror	r0
    6fb6:	28 f4       	brcc	.+10     	; 0x6fc2 <__ftoa_engine+0xb8>
    6fb8:	f8 0e       	add	r15, r24
    6fba:	49 1f       	adc	r20, r25
    6fbc:	56 1f       	adc	r21, r22
    6fbe:	c7 1f       	adc	r28, r23
    6fc0:	d1 1d       	adc	r29, r1
    6fc2:	88 0f       	add	r24, r24
    6fc4:	99 1f       	adc	r25, r25
    6fc6:	66 1f       	adc	r22, r22
    6fc8:	77 1f       	adc	r23, r23
    6fca:	06 94       	lsr	r0
    6fcc:	a1 f7       	brne	.-24     	; 0x6fb6 <__ftoa_engine+0xac>
    6fce:	05 90       	lpm	r0, Z+
    6fd0:	07 94       	ror	r0
    6fd2:	20 f4       	brcc	.+8      	; 0x6fdc <__ftoa_engine+0xd2>
    6fd4:	49 0f       	add	r20, r25
    6fd6:	56 1f       	adc	r21, r22
    6fd8:	c7 1f       	adc	r28, r23
    6fda:	d8 1f       	adc	r29, r24
    6fdc:	99 0f       	add	r25, r25
    6fde:	66 1f       	adc	r22, r22
    6fe0:	77 1f       	adc	r23, r23
    6fe2:	88 1f       	adc	r24, r24
    6fe4:	06 94       	lsr	r0
    6fe6:	a9 f7       	brne	.-22     	; 0x6fd2 <__ftoa_engine+0xc8>
    6fe8:	84 91       	lpm	r24, Z
    6fea:	10 95       	com	r17
    6fec:	17 70       	andi	r17, 0x07	; 7
    6fee:	41 f0       	breq	.+16     	; 0x7000 <__ftoa_engine+0xf6>
    6ff0:	d6 95       	lsr	r29
    6ff2:	c7 95       	ror	r28
    6ff4:	57 95       	ror	r21
    6ff6:	47 95       	ror	r20
    6ff8:	f7 94       	ror	r15
    6ffa:	e7 94       	ror	r14
    6ffc:	1a 95       	dec	r17
    6ffe:	c1 f7       	brne	.-16     	; 0x6ff0 <__ftoa_engine+0xe6>
    7000:	ea e7       	ldi	r30, 0x7A	; 122
    7002:	f2 e0       	ldi	r31, 0x02	; 2
    7004:	68 94       	set
    7006:	15 90       	lpm	r1, Z+
    7008:	15 91       	lpm	r17, Z+
    700a:	35 91       	lpm	r19, Z+
    700c:	65 91       	lpm	r22, Z+
    700e:	95 91       	lpm	r25, Z+
    7010:	05 90       	lpm	r0, Z+
    7012:	7f e2       	ldi	r23, 0x2F	; 47
    7014:	73 95       	inc	r23
    7016:	e1 18       	sub	r14, r1
    7018:	f1 0a       	sbc	r15, r17
    701a:	43 0b       	sbc	r20, r19
    701c:	56 0b       	sbc	r21, r22
    701e:	c9 0b       	sbc	r28, r25
    7020:	d0 09       	sbc	r29, r0
    7022:	c0 f7       	brcc	.-16     	; 0x7014 <__ftoa_engine+0x10a>
    7024:	e1 0c       	add	r14, r1
    7026:	f1 1e       	adc	r15, r17
    7028:	43 1f       	adc	r20, r19
    702a:	56 1f       	adc	r21, r22
    702c:	c9 1f       	adc	r28, r25
    702e:	d0 1d       	adc	r29, r0
    7030:	7e f4       	brtc	.+30     	; 0x7050 <__ftoa_engine+0x146>
    7032:	70 33       	cpi	r23, 0x30	; 48
    7034:	11 f4       	brne	.+4      	; 0x703a <__ftoa_engine+0x130>
    7036:	8a 95       	dec	r24
    7038:	e6 cf       	rjmp	.-52     	; 0x7006 <__ftoa_engine+0xfc>
    703a:	e8 94       	clt
    703c:	01 50       	subi	r16, 0x01	; 1
    703e:	30 f0       	brcs	.+12     	; 0x704c <__ftoa_engine+0x142>
    7040:	08 0f       	add	r16, r24
    7042:	0a f4       	brpl	.+2      	; 0x7046 <__ftoa_engine+0x13c>
    7044:	00 27       	eor	r16, r16
    7046:	02 17       	cp	r16, r18
    7048:	08 f4       	brcc	.+2      	; 0x704c <__ftoa_engine+0x142>
    704a:	20 2f       	mov	r18, r16
    704c:	23 95       	inc	r18
    704e:	02 2f       	mov	r16, r18
    7050:	7a 33       	cpi	r23, 0x3A	; 58
    7052:	28 f0       	brcs	.+10     	; 0x705e <__ftoa_engine+0x154>
    7054:	79 e3       	ldi	r23, 0x39	; 57
    7056:	7d 93       	st	X+, r23
    7058:	2a 95       	dec	r18
    705a:	e9 f7       	brne	.-6      	; 0x7056 <__ftoa_engine+0x14c>
    705c:	10 c0       	rjmp	.+32     	; 0x707e <__ftoa_engine+0x174>
    705e:	7d 93       	st	X+, r23
    7060:	2a 95       	dec	r18
    7062:	89 f6       	brne	.-94     	; 0x7006 <__ftoa_engine+0xfc>
    7064:	06 94       	lsr	r0
    7066:	97 95       	ror	r25
    7068:	67 95       	ror	r22
    706a:	37 95       	ror	r19
    706c:	17 95       	ror	r17
    706e:	17 94       	ror	r1
    7070:	e1 18       	sub	r14, r1
    7072:	f1 0a       	sbc	r15, r17
    7074:	43 0b       	sbc	r20, r19
    7076:	56 0b       	sbc	r21, r22
    7078:	c9 0b       	sbc	r28, r25
    707a:	d0 09       	sbc	r29, r0
    707c:	98 f0       	brcs	.+38     	; 0x70a4 <__ftoa_engine+0x19a>
    707e:	23 95       	inc	r18
    7080:	7e 91       	ld	r23, -X
    7082:	73 95       	inc	r23
    7084:	7a 33       	cpi	r23, 0x3A	; 58
    7086:	08 f0       	brcs	.+2      	; 0x708a <__ftoa_engine+0x180>
    7088:	70 e3       	ldi	r23, 0x30	; 48
    708a:	7c 93       	st	X, r23
    708c:	20 13       	cpse	r18, r16
    708e:	b8 f7       	brcc	.-18     	; 0x707e <__ftoa_engine+0x174>
    7090:	7e 91       	ld	r23, -X
    7092:	70 61       	ori	r23, 0x10	; 16
    7094:	7d 93       	st	X+, r23
    7096:	30 f0       	brcs	.+12     	; 0x70a4 <__ftoa_engine+0x19a>
    7098:	83 95       	inc	r24
    709a:	71 e3       	ldi	r23, 0x31	; 49
    709c:	7d 93       	st	X+, r23
    709e:	70 e3       	ldi	r23, 0x30	; 48
    70a0:	2a 95       	dec	r18
    70a2:	e1 f7       	brne	.-8      	; 0x709c <__ftoa_engine+0x192>
    70a4:	11 24       	eor	r1, r1
    70a6:	ef 90       	pop	r14
    70a8:	ff 90       	pop	r15
    70aa:	0f 91       	pop	r16
    70ac:	1f 91       	pop	r17
    70ae:	cf 91       	pop	r28
    70b0:	df 91       	pop	r29
    70b2:	99 27       	eor	r25, r25
    70b4:	87 fd       	sbrc	r24, 7
    70b6:	90 95       	com	r25
    70b8:	08 95       	ret

000070ba <isspace>:
    70ba:	91 11       	cpse	r25, r1
    70bc:	58 c1       	rjmp	.+688    	; 0x736e <__ctype_isfalse>
    70be:	80 32       	cpi	r24, 0x20	; 32
    70c0:	19 f0       	breq	.+6      	; 0x70c8 <isspace+0xe>
    70c2:	89 50       	subi	r24, 0x09	; 9
    70c4:	85 50       	subi	r24, 0x05	; 5
    70c6:	d0 f7       	brcc	.-12     	; 0x70bc <isspace+0x2>
    70c8:	08 95       	ret

000070ca <strnlen_P>:
    70ca:	fc 01       	movw	r30, r24
    70cc:	05 90       	lpm	r0, Z+
    70ce:	61 50       	subi	r22, 0x01	; 1
    70d0:	70 40       	sbci	r23, 0x00	; 0
    70d2:	01 10       	cpse	r0, r1
    70d4:	d8 f7       	brcc	.-10     	; 0x70cc <strnlen_P+0x2>
    70d6:	80 95       	com	r24
    70d8:	90 95       	com	r25
    70da:	8e 0f       	add	r24, r30
    70dc:	9f 1f       	adc	r25, r31
    70de:	08 95       	ret

000070e0 <strtok>:
    70e0:	46 ee       	ldi	r20, 0xE6	; 230
    70e2:	57 e2       	ldi	r21, 0x27	; 39
    70e4:	42 c0       	rjmp	.+132    	; 0x716a <strtok_r>

000070e6 <memcpy>:
    70e6:	fb 01       	movw	r30, r22
    70e8:	dc 01       	movw	r26, r24
    70ea:	02 c0       	rjmp	.+4      	; 0x70f0 <memcpy+0xa>
    70ec:	01 90       	ld	r0, Z+
    70ee:	0d 92       	st	X+, r0
    70f0:	41 50       	subi	r20, 0x01	; 1
    70f2:	50 40       	sbci	r21, 0x00	; 0
    70f4:	d8 f7       	brcc	.-10     	; 0x70ec <memcpy+0x6>
    70f6:	08 95       	ret

000070f8 <strcmp>:
    70f8:	fb 01       	movw	r30, r22
    70fa:	dc 01       	movw	r26, r24
    70fc:	8d 91       	ld	r24, X+
    70fe:	01 90       	ld	r0, Z+
    7100:	80 19       	sub	r24, r0
    7102:	01 10       	cpse	r0, r1
    7104:	d9 f3       	breq	.-10     	; 0x70fc <strcmp+0x4>
    7106:	99 0b       	sbc	r25, r25
    7108:	08 95       	ret

0000710a <strcpy>:
    710a:	fb 01       	movw	r30, r22
    710c:	dc 01       	movw	r26, r24
    710e:	01 90       	ld	r0, Z+
    7110:	0d 92       	st	X+, r0
    7112:	00 20       	and	r0, r0
    7114:	e1 f7       	brne	.-8      	; 0x710e <strcpy+0x4>
    7116:	08 95       	ret

00007118 <strcspn>:
    7118:	dc 01       	movw	r26, r24
    711a:	5d 91       	ld	r21, X+
    711c:	55 23       	and	r21, r21
    711e:	31 f0       	breq	.+12     	; 0x712c <strcspn+0x14>
    7120:	fb 01       	movw	r30, r22
    7122:	01 90       	ld	r0, Z+
    7124:	05 16       	cp	r0, r21
    7126:	01 10       	cpse	r0, r1
    7128:	e1 f7       	brne	.-8      	; 0x7122 <strcspn+0xa>
    712a:	b9 f7       	brne	.-18     	; 0x711a <strcspn+0x2>
    712c:	80 95       	com	r24
    712e:	90 95       	com	r25
    7130:	8a 0f       	add	r24, r26
    7132:	9b 1f       	adc	r25, r27
    7134:	08 95       	ret

00007136 <strncpy>:
    7136:	fb 01       	movw	r30, r22
    7138:	dc 01       	movw	r26, r24
    713a:	41 50       	subi	r20, 0x01	; 1
    713c:	50 40       	sbci	r21, 0x00	; 0
    713e:	48 f0       	brcs	.+18     	; 0x7152 <strncpy+0x1c>
    7140:	01 90       	ld	r0, Z+
    7142:	0d 92       	st	X+, r0
    7144:	00 20       	and	r0, r0
    7146:	c9 f7       	brne	.-14     	; 0x713a <strncpy+0x4>
    7148:	01 c0       	rjmp	.+2      	; 0x714c <strncpy+0x16>
    714a:	1d 92       	st	X+, r1
    714c:	41 50       	subi	r20, 0x01	; 1
    714e:	50 40       	sbci	r21, 0x00	; 0
    7150:	e0 f7       	brcc	.-8      	; 0x714a <strncpy+0x14>
    7152:	08 95       	ret

00007154 <strnlen>:
    7154:	fc 01       	movw	r30, r24
    7156:	61 50       	subi	r22, 0x01	; 1
    7158:	70 40       	sbci	r23, 0x00	; 0
    715a:	01 90       	ld	r0, Z+
    715c:	01 10       	cpse	r0, r1
    715e:	d8 f7       	brcc	.-10     	; 0x7156 <strnlen+0x2>
    7160:	80 95       	com	r24
    7162:	90 95       	com	r25
    7164:	8e 0f       	add	r24, r30
    7166:	9f 1f       	adc	r25, r31
    7168:	08 95       	ret

0000716a <strtok_r>:
    716a:	fa 01       	movw	r30, r20
    716c:	a1 91       	ld	r26, Z+
    716e:	b0 81       	ld	r27, Z
    7170:	00 97       	sbiw	r24, 0x00	; 0
    7172:	19 f4       	brne	.+6      	; 0x717a <strtok_r+0x10>
    7174:	10 97       	sbiw	r26, 0x00	; 0
    7176:	e1 f0       	breq	.+56     	; 0x71b0 <strtok_r+0x46>
    7178:	cd 01       	movw	r24, r26
    717a:	dc 01       	movw	r26, r24
    717c:	cd 01       	movw	r24, r26
    717e:	0d 90       	ld	r0, X+
    7180:	00 20       	and	r0, r0
    7182:	11 f4       	brne	.+4      	; 0x7188 <strtok_r+0x1e>
    7184:	c0 01       	movw	r24, r0
    7186:	13 c0       	rjmp	.+38     	; 0x71ae <strtok_r+0x44>
    7188:	fb 01       	movw	r30, r22
    718a:	21 91       	ld	r18, Z+
    718c:	22 23       	and	r18, r18
    718e:	19 f0       	breq	.+6      	; 0x7196 <strtok_r+0x2c>
    7190:	20 15       	cp	r18, r0
    7192:	d9 f7       	brne	.-10     	; 0x718a <strtok_r+0x20>
    7194:	f3 cf       	rjmp	.-26     	; 0x717c <strtok_r+0x12>
    7196:	fb 01       	movw	r30, r22
    7198:	21 91       	ld	r18, Z+
    719a:	20 15       	cp	r18, r0
    719c:	19 f4       	brne	.+6      	; 0x71a4 <strtok_r+0x3a>
    719e:	1e 92       	st	-X, r1
    71a0:	11 96       	adiw	r26, 0x01	; 1
    71a2:	06 c0       	rjmp	.+12     	; 0x71b0 <strtok_r+0x46>
    71a4:	22 23       	and	r18, r18
    71a6:	c1 f7       	brne	.-16     	; 0x7198 <strtok_r+0x2e>
    71a8:	0d 90       	ld	r0, X+
    71aa:	00 20       	and	r0, r0
    71ac:	a1 f7       	brne	.-24     	; 0x7196 <strtok_r+0x2c>
    71ae:	d0 01       	movw	r26, r0
    71b0:	fa 01       	movw	r30, r20
    71b2:	a1 93       	st	Z+, r26
    71b4:	b0 83       	st	Z, r27
    71b6:	08 95       	ret

000071b8 <__mulhi_const_10>:
    71b8:	7a e0       	ldi	r23, 0x0A	; 10
    71ba:	97 9f       	mul	r25, r23
    71bc:	90 2d       	mov	r25, r0
    71be:	87 9f       	mul	r24, r23
    71c0:	80 2d       	mov	r24, r0
    71c2:	91 0d       	add	r25, r1
    71c4:	11 24       	eor	r1, r1
    71c6:	08 95       	ret

000071c8 <fputc>:
    71c8:	0f 93       	push	r16
    71ca:	1f 93       	push	r17
    71cc:	cf 93       	push	r28
    71ce:	df 93       	push	r29
    71d0:	18 2f       	mov	r17, r24
    71d2:	09 2f       	mov	r16, r25
    71d4:	eb 01       	movw	r28, r22
    71d6:	8b 81       	ldd	r24, Y+3	; 0x03
    71d8:	81 fd       	sbrc	r24, 1
    71da:	03 c0       	rjmp	.+6      	; 0x71e2 <fputc+0x1a>
    71dc:	8f ef       	ldi	r24, 0xFF	; 255
    71de:	9f ef       	ldi	r25, 0xFF	; 255
    71e0:	20 c0       	rjmp	.+64     	; 0x7222 <fputc+0x5a>
    71e2:	82 ff       	sbrs	r24, 2
    71e4:	10 c0       	rjmp	.+32     	; 0x7206 <fputc+0x3e>
    71e6:	4e 81       	ldd	r20, Y+6	; 0x06
    71e8:	5f 81       	ldd	r21, Y+7	; 0x07
    71ea:	2c 81       	ldd	r18, Y+4	; 0x04
    71ec:	3d 81       	ldd	r19, Y+5	; 0x05
    71ee:	42 17       	cp	r20, r18
    71f0:	53 07       	cpc	r21, r19
    71f2:	7c f4       	brge	.+30     	; 0x7212 <fputc+0x4a>
    71f4:	e8 81       	ld	r30, Y
    71f6:	f9 81       	ldd	r31, Y+1	; 0x01
    71f8:	9f 01       	movw	r18, r30
    71fa:	2f 5f       	subi	r18, 0xFF	; 255
    71fc:	3f 4f       	sbci	r19, 0xFF	; 255
    71fe:	28 83       	st	Y, r18
    7200:	39 83       	std	Y+1, r19	; 0x01
    7202:	10 83       	st	Z, r17
    7204:	06 c0       	rjmp	.+12     	; 0x7212 <fputc+0x4a>
    7206:	e8 85       	ldd	r30, Y+8	; 0x08
    7208:	f9 85       	ldd	r31, Y+9	; 0x09
    720a:	81 2f       	mov	r24, r17
    720c:	19 95       	eicall
    720e:	89 2b       	or	r24, r25
    7210:	29 f7       	brne	.-54     	; 0x71dc <fputc+0x14>
    7212:	2e 81       	ldd	r18, Y+6	; 0x06
    7214:	3f 81       	ldd	r19, Y+7	; 0x07
    7216:	2f 5f       	subi	r18, 0xFF	; 255
    7218:	3f 4f       	sbci	r19, 0xFF	; 255
    721a:	2e 83       	std	Y+6, r18	; 0x06
    721c:	3f 83       	std	Y+7, r19	; 0x07
    721e:	81 2f       	mov	r24, r17
    7220:	90 2f       	mov	r25, r16
    7222:	df 91       	pop	r29
    7224:	cf 91       	pop	r28
    7226:	1f 91       	pop	r17
    7228:	0f 91       	pop	r16
    722a:	08 95       	ret

0000722c <printf>:
    722c:	cf 93       	push	r28
    722e:	df 93       	push	r29
    7230:	cd b7       	in	r28, 0x3d	; 61
    7232:	de b7       	in	r29, 0x3e	; 62
    7234:	fe 01       	movw	r30, r28
    7236:	36 96       	adiw	r30, 0x06	; 6
    7238:	61 91       	ld	r22, Z+
    723a:	71 91       	ld	r23, Z+
    723c:	af 01       	movw	r20, r30
    723e:	80 91 aa 2b 	lds	r24, 0x2BAA
    7242:	90 91 ab 2b 	lds	r25, 0x2BAB
    7246:	76 d9       	rcall	.-3348   	; 0x6534 <vfprintf>
    7248:	df 91       	pop	r29
    724a:	cf 91       	pop	r28
    724c:	08 95       	ret

0000724e <putchar>:
    724e:	60 91 aa 2b 	lds	r22, 0x2BAA
    7252:	70 91 ab 2b 	lds	r23, 0x2BAB
    7256:	b8 cf       	rjmp	.-144    	; 0x71c8 <fputc>

00007258 <puts>:
    7258:	0f 93       	push	r16
    725a:	1f 93       	push	r17
    725c:	cf 93       	push	r28
    725e:	df 93       	push	r29
    7260:	e0 91 aa 2b 	lds	r30, 0x2BAA
    7264:	f0 91 ab 2b 	lds	r31, 0x2BAB
    7268:	23 81       	ldd	r18, Z+3	; 0x03
    726a:	21 ff       	sbrs	r18, 1
    726c:	1b c0       	rjmp	.+54     	; 0x72a4 <puts+0x4c>
    726e:	ec 01       	movw	r28, r24
    7270:	00 e0       	ldi	r16, 0x00	; 0
    7272:	10 e0       	ldi	r17, 0x00	; 0
    7274:	89 91       	ld	r24, Y+
    7276:	60 91 aa 2b 	lds	r22, 0x2BAA
    727a:	70 91 ab 2b 	lds	r23, 0x2BAB
    727e:	db 01       	movw	r26, r22
    7280:	18 96       	adiw	r26, 0x08	; 8
    7282:	ed 91       	ld	r30, X+
    7284:	fc 91       	ld	r31, X
    7286:	19 97       	sbiw	r26, 0x09	; 9
    7288:	88 23       	and	r24, r24
    728a:	31 f0       	breq	.+12     	; 0x7298 <puts+0x40>
    728c:	19 95       	eicall
    728e:	89 2b       	or	r24, r25
    7290:	89 f3       	breq	.-30     	; 0x7274 <puts+0x1c>
    7292:	0f ef       	ldi	r16, 0xFF	; 255
    7294:	1f ef       	ldi	r17, 0xFF	; 255
    7296:	ee cf       	rjmp	.-36     	; 0x7274 <puts+0x1c>
    7298:	8a e0       	ldi	r24, 0x0A	; 10
    729a:	19 95       	eicall
    729c:	89 2b       	or	r24, r25
    729e:	11 f4       	brne	.+4      	; 0x72a4 <puts+0x4c>
    72a0:	c8 01       	movw	r24, r16
    72a2:	02 c0       	rjmp	.+4      	; 0x72a8 <puts+0x50>
    72a4:	8f ef       	ldi	r24, 0xFF	; 255
    72a6:	9f ef       	ldi	r25, 0xFF	; 255
    72a8:	df 91       	pop	r29
    72aa:	cf 91       	pop	r28
    72ac:	1f 91       	pop	r17
    72ae:	0f 91       	pop	r16
    72b0:	08 95       	ret

000072b2 <__ultoa_invert>:
    72b2:	fa 01       	movw	r30, r20
    72b4:	aa 27       	eor	r26, r26
    72b6:	28 30       	cpi	r18, 0x08	; 8
    72b8:	51 f1       	breq	.+84     	; 0x730e <__ultoa_invert+0x5c>
    72ba:	20 31       	cpi	r18, 0x10	; 16
    72bc:	81 f1       	breq	.+96     	; 0x731e <__ultoa_invert+0x6c>
    72be:	e8 94       	clt
    72c0:	6f 93       	push	r22
    72c2:	6e 7f       	andi	r22, 0xFE	; 254
    72c4:	6e 5f       	subi	r22, 0xFE	; 254
    72c6:	7f 4f       	sbci	r23, 0xFF	; 255
    72c8:	8f 4f       	sbci	r24, 0xFF	; 255
    72ca:	9f 4f       	sbci	r25, 0xFF	; 255
    72cc:	af 4f       	sbci	r26, 0xFF	; 255
    72ce:	b1 e0       	ldi	r27, 0x01	; 1
    72d0:	3e d0       	rcall	.+124    	; 0x734e <__ultoa_invert+0x9c>
    72d2:	b4 e0       	ldi	r27, 0x04	; 4
    72d4:	3c d0       	rcall	.+120    	; 0x734e <__ultoa_invert+0x9c>
    72d6:	67 0f       	add	r22, r23
    72d8:	78 1f       	adc	r23, r24
    72da:	89 1f       	adc	r24, r25
    72dc:	9a 1f       	adc	r25, r26
    72de:	a1 1d       	adc	r26, r1
    72e0:	68 0f       	add	r22, r24
    72e2:	79 1f       	adc	r23, r25
    72e4:	8a 1f       	adc	r24, r26
    72e6:	91 1d       	adc	r25, r1
    72e8:	a1 1d       	adc	r26, r1
    72ea:	6a 0f       	add	r22, r26
    72ec:	71 1d       	adc	r23, r1
    72ee:	81 1d       	adc	r24, r1
    72f0:	91 1d       	adc	r25, r1
    72f2:	a1 1d       	adc	r26, r1
    72f4:	20 d0       	rcall	.+64     	; 0x7336 <__ultoa_invert+0x84>
    72f6:	09 f4       	brne	.+2      	; 0x72fa <__ultoa_invert+0x48>
    72f8:	68 94       	set
    72fa:	3f 91       	pop	r19
    72fc:	2a e0       	ldi	r18, 0x0A	; 10
    72fe:	26 9f       	mul	r18, r22
    7300:	11 24       	eor	r1, r1
    7302:	30 19       	sub	r19, r0
    7304:	30 5d       	subi	r19, 0xD0	; 208
    7306:	31 93       	st	Z+, r19
    7308:	de f6       	brtc	.-74     	; 0x72c0 <__ultoa_invert+0xe>
    730a:	cf 01       	movw	r24, r30
    730c:	08 95       	ret
    730e:	46 2f       	mov	r20, r22
    7310:	47 70       	andi	r20, 0x07	; 7
    7312:	40 5d       	subi	r20, 0xD0	; 208
    7314:	41 93       	st	Z+, r20
    7316:	b3 e0       	ldi	r27, 0x03	; 3
    7318:	0f d0       	rcall	.+30     	; 0x7338 <__ultoa_invert+0x86>
    731a:	c9 f7       	brne	.-14     	; 0x730e <__ultoa_invert+0x5c>
    731c:	f6 cf       	rjmp	.-20     	; 0x730a <__ultoa_invert+0x58>
    731e:	46 2f       	mov	r20, r22
    7320:	4f 70       	andi	r20, 0x0F	; 15
    7322:	40 5d       	subi	r20, 0xD0	; 208
    7324:	4a 33       	cpi	r20, 0x3A	; 58
    7326:	18 f0       	brcs	.+6      	; 0x732e <__ultoa_invert+0x7c>
    7328:	49 5d       	subi	r20, 0xD9	; 217
    732a:	31 fd       	sbrc	r19, 1
    732c:	40 52       	subi	r20, 0x20	; 32
    732e:	41 93       	st	Z+, r20
    7330:	02 d0       	rcall	.+4      	; 0x7336 <__ultoa_invert+0x84>
    7332:	a9 f7       	brne	.-22     	; 0x731e <__ultoa_invert+0x6c>
    7334:	ea cf       	rjmp	.-44     	; 0x730a <__ultoa_invert+0x58>
    7336:	b4 e0       	ldi	r27, 0x04	; 4
    7338:	a6 95       	lsr	r26
    733a:	97 95       	ror	r25
    733c:	87 95       	ror	r24
    733e:	77 95       	ror	r23
    7340:	67 95       	ror	r22
    7342:	ba 95       	dec	r27
    7344:	c9 f7       	brne	.-14     	; 0x7338 <__ultoa_invert+0x86>
    7346:	00 97       	sbiw	r24, 0x00	; 0
    7348:	61 05       	cpc	r22, r1
    734a:	71 05       	cpc	r23, r1
    734c:	08 95       	ret
    734e:	9b 01       	movw	r18, r22
    7350:	ac 01       	movw	r20, r24
    7352:	0a 2e       	mov	r0, r26
    7354:	06 94       	lsr	r0
    7356:	57 95       	ror	r21
    7358:	47 95       	ror	r20
    735a:	37 95       	ror	r19
    735c:	27 95       	ror	r18
    735e:	ba 95       	dec	r27
    7360:	c9 f7       	brne	.-14     	; 0x7354 <__ultoa_invert+0xa2>
    7362:	62 0f       	add	r22, r18
    7364:	73 1f       	adc	r23, r19
    7366:	84 1f       	adc	r24, r20
    7368:	95 1f       	adc	r25, r21
    736a:	a0 1d       	adc	r26, r0
    736c:	08 95       	ret

0000736e <__ctype_isfalse>:
    736e:	99 27       	eor	r25, r25
    7370:	88 27       	eor	r24, r24

00007372 <__ctype_istrue>:
    7372:	08 95       	ret

00007374 <__mulsi3>:
    7374:	db 01       	movw	r26, r22
    7376:	8f 93       	push	r24
    7378:	9f 93       	push	r25
    737a:	2d d0       	rcall	.+90     	; 0x73d6 <__muluhisi3>
    737c:	bf 91       	pop	r27
    737e:	af 91       	pop	r26
    7380:	a2 9f       	mul	r26, r18
    7382:	80 0d       	add	r24, r0
    7384:	91 1d       	adc	r25, r1
    7386:	a3 9f       	mul	r26, r19
    7388:	90 0d       	add	r25, r0
    738a:	b2 9f       	mul	r27, r18
    738c:	90 0d       	add	r25, r0
    738e:	11 24       	eor	r1, r1
    7390:	08 95       	ret

00007392 <__udivmodsi4>:
    7392:	a1 e2       	ldi	r26, 0x21	; 33
    7394:	1a 2e       	mov	r1, r26
    7396:	aa 1b       	sub	r26, r26
    7398:	bb 1b       	sub	r27, r27
    739a:	fd 01       	movw	r30, r26
    739c:	0d c0       	rjmp	.+26     	; 0x73b8 <__udivmodsi4_ep>

0000739e <__udivmodsi4_loop>:
    739e:	aa 1f       	adc	r26, r26
    73a0:	bb 1f       	adc	r27, r27
    73a2:	ee 1f       	adc	r30, r30
    73a4:	ff 1f       	adc	r31, r31
    73a6:	a2 17       	cp	r26, r18
    73a8:	b3 07       	cpc	r27, r19
    73aa:	e4 07       	cpc	r30, r20
    73ac:	f5 07       	cpc	r31, r21
    73ae:	20 f0       	brcs	.+8      	; 0x73b8 <__udivmodsi4_ep>
    73b0:	a2 1b       	sub	r26, r18
    73b2:	b3 0b       	sbc	r27, r19
    73b4:	e4 0b       	sbc	r30, r20
    73b6:	f5 0b       	sbc	r31, r21

000073b8 <__udivmodsi4_ep>:
    73b8:	66 1f       	adc	r22, r22
    73ba:	77 1f       	adc	r23, r23
    73bc:	88 1f       	adc	r24, r24
    73be:	99 1f       	adc	r25, r25
    73c0:	1a 94       	dec	r1
    73c2:	69 f7       	brne	.-38     	; 0x739e <__udivmodsi4_loop>
    73c4:	60 95       	com	r22
    73c6:	70 95       	com	r23
    73c8:	80 95       	com	r24
    73ca:	90 95       	com	r25
    73cc:	9b 01       	movw	r18, r22
    73ce:	ac 01       	movw	r20, r24
    73d0:	bd 01       	movw	r22, r26
    73d2:	cf 01       	movw	r24, r30
    73d4:	08 95       	ret

000073d6 <__muluhisi3>:
    73d6:	5c dc       	rcall	.-1864   	; 0x6c90 <__umulhisi3>
    73d8:	a5 9f       	mul	r26, r21
    73da:	90 0d       	add	r25, r0
    73dc:	b4 9f       	mul	r27, r20
    73de:	90 0d       	add	r25, r0
    73e0:	a4 9f       	mul	r26, r20
    73e2:	80 0d       	add	r24, r0
    73e4:	91 1d       	adc	r25, r1
    73e6:	11 24       	eor	r1, r1
    73e8:	08 95       	ret

000073ea <_exit>:
    73ea:	f8 94       	cli

000073ec <__stop_program>:
    73ec:	ff cf       	rjmp	.-2      	; 0x73ec <__stop_program>
