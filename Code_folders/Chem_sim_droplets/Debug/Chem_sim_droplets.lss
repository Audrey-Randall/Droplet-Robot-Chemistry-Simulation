
Chem_sim_droplets.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007fb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000009d2  00802000  00007fb0  00008044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000004f6  008029d2  008029d2  00008a16  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00008a16  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006d0  00000000  00000000  00008a78  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000119c3  00000000  00000000  00009148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e18  00000000  00000000  0001ab0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00006398  00000000  00000000  0001d923  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000224c  00000000  00000000  00023cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000345a  00000000  00000000  00025f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000b424  00000000  00000000  00029362  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000009b8  00000000  00000000  00034786  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	23 c2       	rjmp	.+1094   	; 0x448 <__ctors_end>
       2:	00 00       	nop
       4:	41 c2       	rjmp	.+1154   	; 0x488 <__bad_interrupt>
       6:	00 00       	nop
       8:	3f c2       	rjmp	.+1150   	; 0x488 <__bad_interrupt>
       a:	00 00       	nop
       c:	3d c2       	rjmp	.+1146   	; 0x488 <__bad_interrupt>
       e:	00 00       	nop
      10:	3b c2       	rjmp	.+1142   	; 0x488 <__bad_interrupt>
      12:	00 00       	nop
      14:	39 c2       	rjmp	.+1138   	; 0x488 <__bad_interrupt>
      16:	00 00       	nop
      18:	37 c2       	rjmp	.+1134   	; 0x488 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	35 c2       	rjmp	.+1130   	; 0x488 <__bad_interrupt>
      1e:	00 00       	nop
      20:	33 c2       	rjmp	.+1126   	; 0x488 <__bad_interrupt>
      22:	00 00       	nop
      24:	31 c2       	rjmp	.+1122   	; 0x488 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 db 27 	jmp	0x4fb6	; 0x4fb6 <__vector_10>
      2c:	2e c2       	rjmp	.+1116   	; 0x48a <__vector_11>
      2e:	00 00       	nop
      30:	2b c2       	rjmp	.+1110   	; 0x488 <__bad_interrupt>
      32:	00 00       	nop
      34:	29 c2       	rjmp	.+1106   	; 0x488 <__bad_interrupt>
      36:	00 00       	nop
      38:	27 c2       	rjmp	.+1102   	; 0x488 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	25 c2       	rjmp	.+1098   	; 0x488 <__bad_interrupt>
      3e:	00 00       	nop
      40:	23 c2       	rjmp	.+1094   	; 0x488 <__bad_interrupt>
      42:	00 00       	nop
      44:	21 c2       	rjmp	.+1090   	; 0x488 <__bad_interrupt>
      46:	00 00       	nop
      48:	1f c2       	rjmp	.+1086   	; 0x488 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1d c2       	rjmp	.+1082   	; 0x488 <__bad_interrupt>
      4e:	00 00       	nop
      50:	1b c2       	rjmp	.+1078   	; 0x488 <__bad_interrupt>
      52:	00 00       	nop
      54:	19 c2       	rjmp	.+1074   	; 0x488 <__bad_interrupt>
      56:	00 00       	nop
      58:	17 c2       	rjmp	.+1070   	; 0x488 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	15 c2       	rjmp	.+1066   	; 0x488 <__bad_interrupt>
      5e:	00 00       	nop
      60:	13 c2       	rjmp	.+1062   	; 0x488 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__vector_25>
      68:	0c 94 93 0d 	jmp	0x1b26	; 0x1b26 <__vector_26>
      6c:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <__vector_27>
      70:	0c 94 bb 0d 	jmp	0x1b76	; 0x1b76 <__vector_28>
      74:	0c 94 0b 0e 	jmp	0x1c16	; 0x1c16 <__vector_29>
      78:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <__vector_30>
      7c:	05 c2       	rjmp	.+1034   	; 0x488 <__bad_interrupt>
      7e:	00 00       	nop
      80:	03 c2       	rjmp	.+1030   	; 0x488 <__bad_interrupt>
      82:	00 00       	nop
      84:	01 c2       	rjmp	.+1026   	; 0x488 <__bad_interrupt>
      86:	00 00       	nop
      88:	ff c1       	rjmp	.+1022   	; 0x488 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fd c1       	rjmp	.+1018   	; 0x488 <__bad_interrupt>
      8e:	00 00       	nop
      90:	fb c1       	rjmp	.+1014   	; 0x488 <__bad_interrupt>
      92:	00 00       	nop
      94:	f9 c1       	rjmp	.+1010   	; 0x488 <__bad_interrupt>
      96:	00 00       	nop
      98:	f7 c1       	rjmp	.+1006   	; 0x488 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f5 c1       	rjmp	.+1002   	; 0x488 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f3 c1       	rjmp	.+998    	; 0x488 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	f1 c1       	rjmp	.+994    	; 0x488 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ef c1       	rjmp	.+990    	; 0x488 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	ed c1       	rjmp	.+986    	; 0x488 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	eb c1       	rjmp	.+982    	; 0x488 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e9 c1       	rjmp	.+978    	; 0x488 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	07 c4       	rjmp	.+2062   	; 0x8c8 <__vector_46>
      ba:	00 00       	nop
      bc:	e5 c1       	rjmp	.+970    	; 0x488 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e3 c1       	rjmp	.+966    	; 0x488 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	e1 c1       	rjmp	.+962    	; 0x488 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	df c1       	rjmp	.+958    	; 0x488 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	dd c1       	rjmp	.+954    	; 0x488 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	db c1       	rjmp	.+950    	; 0x488 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d9 c1       	rjmp	.+946    	; 0x488 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d7 c1       	rjmp	.+942    	; 0x488 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d5 c1       	rjmp	.+938    	; 0x488 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d3 c1       	rjmp	.+934    	; 0x488 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	d1 c1       	rjmp	.+930    	; 0x488 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	0c 94 ab 0e 	jmp	0x1d56	; 0x1d56 <__vector_58>
      ec:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__vector_59>
      f0:	0c 94 d3 0e 	jmp	0x1da6	; 0x1da6 <__vector_60>
      f4:	0c 94 23 0f 	jmp	0x1e46	; 0x1e46 <__vector_61>
      f8:	0c 94 73 0f 	jmp	0x1ee6	; 0x1ee6 <__vector_62>
      fc:	0c 94 4b 0f 	jmp	0x1e96	; 0x1e96 <__vector_63>
     100:	c3 c1       	rjmp	.+902    	; 0x488 <__bad_interrupt>
     102:	00 00       	nop
     104:	c1 c1       	rjmp	.+898    	; 0x488 <__bad_interrupt>
     106:	00 00       	nop
     108:	bf c1       	rjmp	.+894    	; 0x488 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bd c1       	rjmp	.+890    	; 0x488 <__bad_interrupt>
     10e:	00 00       	nop
     110:	bb c1       	rjmp	.+886    	; 0x488 <__bad_interrupt>
     112:	00 00       	nop
     114:	b9 c1       	rjmp	.+882    	; 0x488 <__bad_interrupt>
     116:	00 00       	nop
     118:	b7 c1       	rjmp	.+878    	; 0x488 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b5 c1       	rjmp	.+874    	; 0x488 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b3 c1       	rjmp	.+870    	; 0x488 <__bad_interrupt>
     122:	00 00       	nop
     124:	b1 c1       	rjmp	.+866    	; 0x488 <__bad_interrupt>
     126:	00 00       	nop
     128:	af c1       	rjmp	.+862    	; 0x488 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	ad c1       	rjmp	.+858    	; 0x488 <__bad_interrupt>
     12e:	00 00       	nop
     130:	ab c1       	rjmp	.+854    	; 0x488 <__bad_interrupt>
     132:	00 00       	nop
     134:	a9 c1       	rjmp	.+850    	; 0x488 <__bad_interrupt>
     136:	00 00       	nop
     138:	a7 c1       	rjmp	.+846    	; 0x488 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	a5 c1       	rjmp	.+842    	; 0x488 <__bad_interrupt>
     13e:	00 00       	nop
     140:	a3 c1       	rjmp	.+838    	; 0x488 <__bad_interrupt>
     142:	00 00       	nop
     144:	a1 c1       	rjmp	.+834    	; 0x488 <__bad_interrupt>
     146:	00 00       	nop
     148:	9f c1       	rjmp	.+830    	; 0x488 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	9d c1       	rjmp	.+826    	; 0x488 <__bad_interrupt>
     14e:	00 00       	nop
     150:	9b c1       	rjmp	.+822    	; 0x488 <__bad_interrupt>
     152:	00 00       	nop
     154:	99 c1       	rjmp	.+818    	; 0x488 <__bad_interrupt>
     156:	00 00       	nop
     158:	97 c1       	rjmp	.+814    	; 0x488 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	95 c1       	rjmp	.+810    	; 0x488 <__bad_interrupt>
     15e:	00 00       	nop
     160:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__vector_88>
     164:	0c 94 83 0e 	jmp	0x1d06	; 0x1d06 <__vector_89>
     168:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_90>
     16c:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <__vector_91>
     170:	8b c1       	rjmp	.+790    	; 0x488 <__bad_interrupt>
     172:	00 00       	nop
     174:	89 c1       	rjmp	.+786    	; 0x488 <__bad_interrupt>
     176:	00 00       	nop
     178:	87 c1       	rjmp	.+782    	; 0x488 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	85 c1       	rjmp	.+778    	; 0x488 <__bad_interrupt>
     17e:	00 00       	nop
     180:	83 c1       	rjmp	.+774    	; 0x488 <__bad_interrupt>
     182:	00 00       	nop
     184:	81 c1       	rjmp	.+770    	; 0x488 <__bad_interrupt>
     186:	00 00       	nop
     188:	7f c1       	rjmp	.+766    	; 0x488 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	7d c1       	rjmp	.+762    	; 0x488 <__bad_interrupt>
     18e:	00 00       	nop
     190:	7b c1       	rjmp	.+758    	; 0x488 <__bad_interrupt>
     192:	00 00       	nop
     194:	79 c1       	rjmp	.+754    	; 0x488 <__bad_interrupt>
     196:	00 00       	nop
     198:	77 c1       	rjmp	.+750    	; 0x488 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	75 c1       	rjmp	.+746    	; 0x488 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	73 c1       	rjmp	.+742    	; 0x488 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	71 c1       	rjmp	.+738    	; 0x488 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	6f c1       	rjmp	.+734    	; 0x488 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	6d c1       	rjmp	.+730    	; 0x488 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	6b c1       	rjmp	.+726    	; 0x488 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	69 c1       	rjmp	.+722    	; 0x488 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	67 c1       	rjmp	.+718    	; 0x488 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	65 c1       	rjmp	.+714    	; 0x488 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	63 c1       	rjmp	.+710    	; 0x488 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	61 c1       	rjmp	.+706    	; 0x488 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	5f c1       	rjmp	.+702    	; 0x488 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	5d c1       	rjmp	.+698    	; 0x488 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	5b c1       	rjmp	.+694    	; 0x488 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	59 c1       	rjmp	.+690    	; 0x488 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	57 c1       	rjmp	.+686    	; 0x488 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	0c 94 9b 0f 	jmp	0x1f36	; 0x1f36 <__vector_119>
     1e0:	0c 94 eb 0f 	jmp	0x1fd6	; 0x1fd6 <__vector_120>
     1e4:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__vector_121>
     1e8:	4f c1       	rjmp	.+670    	; 0x488 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	4d c1       	rjmp	.+666    	; 0x488 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	4b c1       	rjmp	.+662    	; 0x488 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	49 c1       	rjmp	.+658    	; 0x488 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	47 c1       	rjmp	.+654    	; 0x488 <__bad_interrupt>
     1fa:	00 00       	nop
     1fc:	7f 04       	cpc	r7, r15
     1fe:	85 04       	cpc	r8, r5
     200:	8a 04       	cpc	r8, r10
     202:	91 04       	cpc	r9, r1
     204:	96 04       	cpc	r9, r6
     206:	9d 04       	cpc	r9, r13
     208:	a2 04       	cpc	r10, r2
     20a:	1c 09       	sbc	r17, r12
     20c:	2c 09       	sbc	r18, r12
     20e:	41 09       	sbc	r20, r1
     210:	88 09       	sbc	r24, r8
     212:	98 09       	sbc	r25, r8
     214:	a9 09       	sbc	r26, r9
     216:	b9 09       	sbc	r27, r9
     218:	39 0b       	sbc	r19, r25
     21a:	49 0b       	sbc	r20, r25
     21c:	02 0b       	sbc	r16, r18
     21e:	19 0b       	sbc	r17, r25
     220:	29 0b       	sbc	r18, r25
     222:	59 0b       	sbc	r21, r25
     224:	69 0b       	sbc	r22, r25
     226:	1e 2f       	mov	r17, r30
     228:	2c 2f       	mov	r18, r28
     22a:	3a 2f       	mov	r19, r26
     22c:	48 2f       	mov	r20, r24
     22e:	b8 2f       	mov	r27, r24
     230:	56 2f       	mov	r21, r22
     232:	64 2f       	mov	r22, r20
     234:	72 2f       	mov	r23, r18
     236:	80 2f       	mov	r24, r16
     238:	b8 2f       	mov	r27, r24
     23a:	b8 2f       	mov	r27, r24
     23c:	b8 2f       	mov	r27, r24
     23e:	b8 2f       	mov	r27, r24
     240:	b8 2f       	mov	r27, r24
     242:	b8 2f       	mov	r27, r24
     244:	b8 2f       	mov	r27, r24
     246:	8e 2f       	mov	r24, r30
     248:	b8 2f       	mov	r27, r24
     24a:	b8 2f       	mov	r27, r24
     24c:	b8 2f       	mov	r27, r24
     24e:	b8 2f       	mov	r27, r24
     250:	b8 2f       	mov	r27, r24
     252:	b8 2f       	mov	r27, r24
     254:	b8 2f       	mov	r27, r24
     256:	b8 2f       	mov	r27, r24
     258:	b8 2f       	mov	r27, r24
     25a:	b8 2f       	mov	r27, r24
     25c:	b8 2f       	mov	r27, r24
     25e:	b8 2f       	mov	r27, r24
     260:	b8 2f       	mov	r27, r24
     262:	b8 2f       	mov	r27, r24
     264:	b8 2f       	mov	r27, r24
     266:	b8 2f       	mov	r27, r24
     268:	b8 2f       	mov	r27, r24
     26a:	9c 2f       	mov	r25, r28
     26c:	b8 2f       	mov	r27, r24
     26e:	b8 2f       	mov	r27, r24
     270:	b8 2f       	mov	r27, r24
     272:	b8 2f       	mov	r27, r24
     274:	b8 2f       	mov	r27, r24
     276:	b8 2f       	mov	r27, r24
     278:	b8 2f       	mov	r27, r24
     27a:	b8 2f       	mov	r27, r24
     27c:	b8 2f       	mov	r27, r24
     27e:	b8 2f       	mov	r27, r24
     280:	b8 2f       	mov	r27, r24
     282:	b8 2f       	mov	r27, r24
     284:	b8 2f       	mov	r27, r24
     286:	b8 2f       	mov	r27, r24
     288:	b8 2f       	mov	r27, r24
     28a:	b8 2f       	mov	r27, r24
     28c:	b8 2f       	mov	r27, r24
     28e:	aa 2f       	mov	r26, r26
     290:	dc 2f       	mov	r29, r28
     292:	e2 2f       	mov	r30, r18
     294:	e8 2f       	mov	r30, r24
     296:	ee 2f       	mov	r30, r30
     298:	1e 30       	cpi	r17, 0x0E	; 14
     29a:	f4 2f       	mov	r31, r20
     29c:	fa 2f       	mov	r31, r26
     29e:	00 30       	cpi	r16, 0x00	; 0
     2a0:	06 30       	cpi	r16, 0x06	; 6
     2a2:	1e 30       	cpi	r17, 0x0E	; 14
     2a4:	1e 30       	cpi	r17, 0x0E	; 14
     2a6:	1e 30       	cpi	r17, 0x0E	; 14
     2a8:	1e 30       	cpi	r17, 0x0E	; 14
     2aa:	1e 30       	cpi	r17, 0x0E	; 14
     2ac:	1e 30       	cpi	r17, 0x0E	; 14
     2ae:	1e 30       	cpi	r17, 0x0E	; 14
     2b0:	0c 30       	cpi	r16, 0x0C	; 12
     2b2:	1e 30       	cpi	r17, 0x0E	; 14
     2b4:	1e 30       	cpi	r17, 0x0E	; 14
     2b6:	1e 30       	cpi	r17, 0x0E	; 14
     2b8:	1e 30       	cpi	r17, 0x0E	; 14
     2ba:	1e 30       	cpi	r17, 0x0E	; 14
     2bc:	1e 30       	cpi	r17, 0x0E	; 14
     2be:	1e 30       	cpi	r17, 0x0E	; 14
     2c0:	1e 30       	cpi	r17, 0x0E	; 14
     2c2:	1e 30       	cpi	r17, 0x0E	; 14
     2c4:	1e 30       	cpi	r17, 0x0E	; 14
     2c6:	1e 30       	cpi	r17, 0x0E	; 14
     2c8:	1e 30       	cpi	r17, 0x0E	; 14
     2ca:	1e 30       	cpi	r17, 0x0E	; 14
     2cc:	1e 30       	cpi	r17, 0x0E	; 14
     2ce:	1e 30       	cpi	r17, 0x0E	; 14
     2d0:	1e 30       	cpi	r17, 0x0E	; 14
     2d2:	1e 30       	cpi	r17, 0x0E	; 14
     2d4:	12 30       	cpi	r17, 0x02	; 2
     2d6:	1e 30       	cpi	r17, 0x0E	; 14
     2d8:	1e 30       	cpi	r17, 0x0E	; 14
     2da:	1e 30       	cpi	r17, 0x0E	; 14
     2dc:	1e 30       	cpi	r17, 0x0E	; 14
     2de:	1e 30       	cpi	r17, 0x0E	; 14
     2e0:	1e 30       	cpi	r17, 0x0E	; 14
     2e2:	1e 30       	cpi	r17, 0x0E	; 14
     2e4:	1e 30       	cpi	r17, 0x0E	; 14
     2e6:	1e 30       	cpi	r17, 0x0E	; 14
     2e8:	1e 30       	cpi	r17, 0x0E	; 14
     2ea:	1e 30       	cpi	r17, 0x0E	; 14
     2ec:	1e 30       	cpi	r17, 0x0E	; 14
     2ee:	1e 30       	cpi	r17, 0x0E	; 14
     2f0:	1e 30       	cpi	r17, 0x0E	; 14
     2f2:	1e 30       	cpi	r17, 0x0E	; 14
     2f4:	1e 30       	cpi	r17, 0x0E	; 14
     2f6:	1e 30       	cpi	r17, 0x0E	; 14
     2f8:	18 30       	cpi	r17, 0x08	; 8
     2fa:	08 4a       	sbci	r16, 0xA8	; 168
     2fc:	d7 3b       	cpi	r29, 0xB7	; 183
     2fe:	3b ce       	rjmp	.-906    	; 0xffffff76 <__eeprom_end+0xff7eff76>
     300:	01 6e       	ori	r16, 0xE1	; 225
     302:	84 bc       	out	0x24, r8	; 36
     304:	bf fd       	.word	0xfdbf	; ????
     306:	c1 2f       	mov	r28, r17
     308:	3d 6c       	ori	r19, 0xCD	; 205
     30a:	74 31       	cpi	r23, 0x14	; 20
     30c:	9a bd       	out	0x2a, r25	; 42
     30e:	56 83       	std	Z+6, r21	; 0x06
     310:	3d da       	rcall	.-2950   	; 0xfffff78c <__eeprom_end+0xff7ef78c>
     312:	3d 00       	.word	0x003d	; ????
     314:	c7 7f       	andi	r28, 0xF7	; 247
     316:	11 be       	out	0x31, r1	; 49
     318:	d9 e4       	ldi	r29, 0x49	; 73
     31a:	bb 4c       	sbci	r27, 0xCB	; 203
     31c:	3e 91       	ld	r19, -X
     31e:	6b aa       	std	Y+51, r6	; 0x33
     320:	aa be       	out	0x3a, r10	; 58
     322:	00 00       	nop
     324:	00 80       	ld	r0, Z
     326:	3f 05       	cpc	r19, r15
     328:	a8 4c       	sbci	r26, 0xC8	; 200
     32a:	cd b2       	in	r12, 0x1d	; 29
     32c:	d4 4e       	sbci	r29, 0xE4	; 228
     32e:	b9 38       	cpi	r27, 0x89	; 137
     330:	36 a9       	ldd	r19, Z+54	; 0x36
     332:	02 0c       	add	r0, r2
     334:	50 b9       	out	0x00, r21	; 0
     336:	91 86       	std	Z+9, r9	; 0x09
     338:	88 08       	sbc	r8, r8
     33a:	3c a6       	std	Y+44, r3	; 0x2c
     33c:	aa aa       	std	Y+50, r10	; 0x32
     33e:	2a be       	out	0x3a, r2	; 58
     340:	00 00       	nop
     342:	00 80       	ld	r0, Z
     344:	3f 00       	.word	0x003f	; ????

00000346 <__trampolines_end>:
     346:	6e 61       	ori	r22, 0x1E	; 30
     348:	6e 00       	.word	0x006e	; ????

0000034a <__c.2159>:
     34a:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     35a:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     36a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     37a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     38a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     39a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     3aa:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     3ba:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     3ca:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     3da:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     3ea:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     3fa:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     40a:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     41a:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     42a:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     43a:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000448 <__ctors_end>:
     448:	11 24       	eor	r1, r1
     44a:	1f be       	out	0x3f, r1	; 63
     44c:	cf ef       	ldi	r28, 0xFF	; 255
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df e3       	ldi	r29, 0x3F	; 63
     452:	de bf       	out	0x3e, r29	; 62
     454:	00 e0       	ldi	r16, 0x00	; 0
     456:	0c bf       	out	0x3c, r16	; 60

00000458 <__do_copy_data>:
     458:	19 e2       	ldi	r17, 0x29	; 41
     45a:	a0 e0       	ldi	r26, 0x00	; 0
     45c:	b0 e2       	ldi	r27, 0x20	; 32
     45e:	e0 eb       	ldi	r30, 0xB0	; 176
     460:	ff e7       	ldi	r31, 0x7F	; 127
     462:	00 e0       	ldi	r16, 0x00	; 0
     464:	0b bf       	out	0x3b, r16	; 59
     466:	02 c0       	rjmp	.+4      	; 0x46c <__do_copy_data+0x14>
     468:	07 90       	elpm	r0, Z+
     46a:	0d 92       	st	X+, r0
     46c:	a2 3d       	cpi	r26, 0xD2	; 210
     46e:	b1 07       	cpc	r27, r17
     470:	d9 f7       	brne	.-10     	; 0x468 <__do_copy_data+0x10>

00000472 <__do_clear_bss>:
     472:	2e e2       	ldi	r18, 0x2E	; 46
     474:	a2 ed       	ldi	r26, 0xD2	; 210
     476:	b9 e2       	ldi	r27, 0x29	; 41
     478:	01 c0       	rjmp	.+2      	; 0x47c <.do_clear_bss_start>

0000047a <.do_clear_bss_loop>:
     47a:	1d 92       	st	X+, r1

0000047c <.do_clear_bss_start>:
     47c:	a8 3c       	cpi	r26, 0xC8	; 200
     47e:	b2 07       	cpc	r27, r18
     480:	e1 f7       	brne	.-8      	; 0x47a <.do_clear_bss_loop>
     482:	b0 d1       	rcall	.+864    	; 0x7e4 <main>
     484:	0c 94 d6 3f 	jmp	0x7fac	; 0x7fac <_exit>

00000488 <__bad_interrupt>:
     488:	bb cd       	rjmp	.-1162   	; 0x0 <__vectors>

0000048a <__vector_11>:
; * Returns from the interrupt handler
; Since run_tasks is on top of the stack, the IRS returns into the beginning of run_tasks
.global RTC_COMP_vect
RTC_COMP_vect:
rtc_compare_isr:
	push	r0							; Save all the registers on the stack
     48a:	0f 92       	push	r0
	push	r1
     48c:	1f 92       	push	r1
	push	r2
     48e:	2f 92       	push	r2
	push	r3
     490:	3f 92       	push	r3
	push	r4
     492:	4f 92       	push	r4
	push	r5
     494:	5f 92       	push	r5
	push	r6
     496:	6f 92       	push	r6
	push	r7
     498:	7f 92       	push	r7
	push	r8
     49a:	8f 92       	push	r8
	push	r9
     49c:	9f 92       	push	r9
	push	r10
     49e:	af 92       	push	r10
	push	r11
     4a0:	bf 92       	push	r11
	push	r12
     4a2:	cf 92       	push	r12
	push	r13
     4a4:	df 92       	push	r13
	push	r14
     4a6:	ef 92       	push	r14
	push	r15
     4a8:	ff 92       	push	r15
	push	r16
     4aa:	0f 93       	push	r16
	push	r17
     4ac:	1f 93       	push	r17
	push	r18
     4ae:	2f 93       	push	r18
	push	r19
     4b0:	3f 93       	push	r19
	push	r20
     4b2:	4f 93       	push	r20
	push	r21
     4b4:	5f 93       	push	r21
	push	r22
     4b6:	6f 93       	push	r22
	push	r23
     4b8:	7f 93       	push	r23
	push	r24
     4ba:	8f 93       	push	r24
	push	r25
     4bc:	9f 93       	push	r25
	push	r26
     4be:	af 93       	push	r26
	push	r27
     4c0:	bf 93       	push	r27
	push	r28
     4c2:	cf 93       	push	r28
	push	r29
     4c4:	df 93       	push	r29
	push	r30
     4c6:	ef 93       	push	r30
	push	r31
     4c8:	ff 93       	push	r31
	in		r16, _SFR_IO_ADDR(SREG)		; Save the CPU status register
     4ca:	0f b7       	in	r16, 0x3f	; 63
	push	r16
     4cc:	0f 93       	push	r16
	ldi		ZL,	pm_lo8(run_tasks)		; Push the address of run_tasks on the stack
     4ce:	e3 e2       	ldi	r30, 0x23	; 35
	ldi		ZH, pm_hi8(run_tasks)		; Returning from the ISR will return to this address
     4d0:	f7 e2       	ldi	r31, 0x27	; 39
	ldi		r16, pm_hh8(run_tasks)
     4d2:	00 e0       	ldi	r16, 0x00	; 0
	push	ZL
     4d4:	ef 93       	push	r30
	push	ZH
     4d6:	ff 93       	push	r31
	push	r16
     4d8:	0f 93       	push	r16
	lds		r24, num_executing_tasks	; Increment num_executing_tasks
     4da:	80 91 d1 2a 	lds	r24, 0x2AD1
	inc		r24
     4de:	83 95       	inc	r24
	sts		num_executing_tasks, r24
     4e0:	80 93 d1 2a 	sts	0x2AD1, r24
	reti								; reti returns from the ISR to the beginning of run_tasks
     4e4:	18 95       	reti

000004e6 <restore_registers>:
; the RTC_COMP interrupt had not occurred.  
; Returning from this subroutine returns program control to where it would have been if the RTC_COMP interrupt
; had not occurred
.global restore_registers
restore_registers:
	lds		r24, num_executing_tasks	; Decrement num_executing_tasks
     4e6:	80 91 d1 2a 	lds	r24, 0x2AD1
	dec		r24
     4ea:	8a 95       	dec	r24
	sts		num_executing_tasks, r24
     4ec:	80 93 d1 2a 	sts	0x2AD1, r24
	pop		r16							; Restore CPU status register
     4f0:	0f 91       	pop	r16
	out		_SFR_IO_ADDR(SREG), r16
     4f2:	0f bf       	out	0x3f, r16	; 63
	pop		r31								; Restore all registers
     4f4:	ff 91       	pop	r31
	pop		r30
     4f6:	ef 91       	pop	r30
	pop		r29
     4f8:	df 91       	pop	r29
	pop		r28
     4fa:	cf 91       	pop	r28
	pop		r27
     4fc:	bf 91       	pop	r27
	pop		r26
     4fe:	af 91       	pop	r26
	pop		r25
     500:	9f 91       	pop	r25
	pop		r24
     502:	8f 91       	pop	r24
	pop		r23
     504:	7f 91       	pop	r23
	pop		r22
     506:	6f 91       	pop	r22
	pop		r21
     508:	5f 91       	pop	r21
	pop		r20
     50a:	4f 91       	pop	r20
	pop		r19
     50c:	3f 91       	pop	r19
	pop		r18
     50e:	2f 91       	pop	r18
	pop		r17
     510:	1f 91       	pop	r17
	pop		r16
     512:	0f 91       	pop	r16
	pop		r15
     514:	ff 90       	pop	r15
	pop		r14
     516:	ef 90       	pop	r14
	pop		r13
     518:	df 90       	pop	r13
	pop		r12
     51a:	cf 90       	pop	r12
	pop		r11
     51c:	bf 90       	pop	r11
	pop		r10
     51e:	af 90       	pop	r10
	pop		r9
     520:	9f 90       	pop	r9
	pop		r8
     522:	8f 90       	pop	r8
	pop		r7
     524:	7f 90       	pop	r7
	pop		r6
     526:	6f 90       	pop	r6
	pop		r5
     528:	5f 90       	pop	r5
	pop		r4
     52a:	4f 90       	pop	r4
	pop		r3
     52c:	3f 90       	pop	r3
	pop		r2
     52e:	2f 90       	pop	r2
	pop		r1
     530:	1f 90       	pop	r1
	pop		r0
     532:	0f 90       	pop	r0
	ret									; The top value of the stack was the code address that
     534:	08 95       	ret

00000536 <get_time>:


; Gets the time as an atomic operation
.global get_time
get_time:
	in		r0, _SFR_IO_ADDR(SREG)		; Save the state of the status register
     536:	0f b6       	in	r0, 0x3f	; 63
	cli									; Disable interrupts
     538:	f8 94       	cli
	lds		r22, RTC_CNT				; Load low byte into return value
     53a:	60 91 08 04 	lds	r22, 0x0408
	lds		r23, RTC_CNT+1
     53e:	70 91 09 04 	lds	r23, 0x0409
	lds		r24, rtc_epoch				; epoch 16-bit high word
     542:	80 91 f1 29 	lds	r24, 0x29F1
	lds		r25, rtc_epoch+1
     546:	90 91 f2 29 	lds	r25, 0x29F2
	out		_SFR_IO_ADDR(SREG), r0		; Restore status register (including re-enabling interrupts if necessary)
     54a:	0f be       	out	0x3f, r0	; 63
	ret
     54c:	08 95       	ret

0000054e <check_messages>:
	}
	return 0;
}

void check_messages ()
{
     54e:	bf 92       	push	r11
     550:	cf 92       	push	r12
     552:	df 92       	push	r13
     554:	ef 92       	push	r14
     556:	ff 92       	push	r15
     558:	0f 93       	push	r16
     55a:	1f 93       	push	r17
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	cd b7       	in	r28, 0x3d	; 61
     562:	de b7       	in	r29, 0x3e	; 62
     564:	6b 97       	sbiw	r28, 0x1b	; 27
     566:	cd bf       	out	0x3d, r28	; 61
     568:	de bf       	out	0x3e, r29	; 62
	ir_msg* msg_struct;	
	char actual_struct[sizeof(ir_msg)]; //It's like malloc, but on the stack.
	char actual_msg[IR_BUFFER_SIZE+1];
	msg_struct = (ir_msg*)actual_struct;
	msg_struct->msg = actual_msg;
     56a:	ce 01       	movw	r24, r28
     56c:	0b 96       	adiw	r24, 0x0b	; 11
     56e:	8f 83       	std	Y+7, r24	; 0x07
     570:	98 87       	std	Y+8, r25	; 0x08
	uint8_t i;
	
	if(user_facing_messages_ovf)
     572:	80 91 f0 29 	lds	r24, 0x29F0
     576:	88 23       	and	r24, r24
     578:	49 f0       	breq	.+18     	; 0x58c <check_messages+0x3e>
	{
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
     57a:	86 e0       	ldi	r24, 0x06	; 6
     57c:	80 93 cb 2a 	sts	0x2ACB, r24
		user_facing_messages_ovf=0;
     580:	10 92 f0 29 	sts	0x29F0, r1
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
     584:	87 e3       	ldi	r24, 0x37	; 55
     586:	91 e2       	ldi	r25, 0x21	; 33
     588:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
     58c:	80 91 cb 2a 	lds	r24, 0x2ACB
     590:	88 23       	and	r24, r24
     592:	09 f4       	brne	.+2      	; 0x596 <check_messages+0x48>
     594:	4d c0       	rjmp	.+154    	; 0x630 <check_messages+0xe2>
	{
		i=num_waiting_msgs-1;
     596:	e0 90 cb 2a 	lds	r14, 0x2ACB
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
     59a:	bf b6       	in	r11, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
     59c:	f8 94       	cli
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
	{
		i=num_waiting_msgs-1;
     59e:	ea 94       	dec	r14
		//We don't want this block to be interrupted by perform_ir_upkeep because the 
		//list of messages could get corrupted.
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
		{
			memcpy(msg_struct->msg, (const void*)msg_node[i].msg, msg_node[i].msg_length);
     5a0:	f1 2c       	mov	r15, r1
     5a2:	67 01       	movw	r12, r14
     5a4:	cc 0c       	add	r12, r12
     5a6:	dd 1c       	adc	r13, r13
     5a8:	86 01       	movw	r16, r12
     5aa:	0e 0d       	add	r16, r14
     5ac:	1f 1d       	adc	r17, r15
     5ae:	00 0f       	add	r16, r16
     5b0:	11 1f       	adc	r17, r17
     5b2:	00 0f       	add	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	00 0f       	add	r16, r16
     5b8:	11 1f       	adc	r17, r17
     5ba:	09 5c       	subi	r16, 0xC9	; 201
     5bc:	15 4d       	sbci	r17, 0xD5	; 213
     5be:	f8 01       	movw	r30, r16
     5c0:	47 89       	ldd	r20, Z+23	; 0x17
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	b6 01       	movw	r22, r12
     5c6:	6e 0d       	add	r22, r14
     5c8:	7f 1d       	adc	r23, r15
     5ca:	66 0f       	add	r22, r22
     5cc:	77 1f       	adc	r23, r23
     5ce:	66 0f       	add	r22, r22
     5d0:	77 1f       	adc	r23, r23
     5d2:	66 0f       	add	r22, r22
     5d4:	77 1f       	adc	r23, r23
     5d6:	63 5c       	subi	r22, 0xC3	; 195
     5d8:	75 4d       	sbci	r23, 0xD5	; 213
     5da:	8f 81       	ldd	r24, Y+7	; 0x07
     5dc:	98 85       	ldd	r25, Y+8	; 0x08
     5de:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <memcpy>
			
			msg_struct->msg[msg_node[i].msg_length]	= '\0';
     5e2:	f8 01       	movw	r30, r16
     5e4:	87 89       	ldd	r24, Z+23	; 0x17
     5e6:	ef 81       	ldd	r30, Y+7	; 0x07
     5e8:	f8 85       	ldd	r31, Y+8	; 0x08
     5ea:	e8 0f       	add	r30, r24
     5ec:	f1 1d       	adc	r31, r1
     5ee:	10 82       	st	Z, r1
			msg_struct->arrival_time					= msg_node[i].arrival_time;
     5f0:	f8 01       	movw	r30, r16
     5f2:	80 81       	ld	r24, Z
     5f4:	91 81       	ldd	r25, Z+1	; 0x01
     5f6:	a2 81       	ldd	r26, Z+2	; 0x02
     5f8:	b3 81       	ldd	r27, Z+3	; 0x03
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	9a 83       	std	Y+2, r25	; 0x02
     5fe:	ab 83       	std	Y+3, r26	; 0x03
     600:	bc 83       	std	Y+4, r27	; 0x04
			msg_struct->sender_ID						= msg_node[i].sender_ID;
     602:	84 81       	ldd	r24, Z+4	; 0x04
     604:	95 81       	ldd	r25, Z+5	; 0x05
     606:	8d 83       	std	Y+5, r24	; 0x05
     608:	9e 83       	std	Y+6, r25	; 0x06
			msg_struct->dir_received					= msg_node[i].arrival_dir;
     60a:	86 89       	ldd	r24, Z+22	; 0x16
     60c:	89 87       	std	Y+9, r24	; 0x09
			msg_struct->length							= msg_node[i].msg_length;
     60e:	f8 01       	movw	r30, r16
     610:	87 89       	ldd	r24, Z+23	; 0x17
     612:	8a 87       	std	Y+10, r24	; 0x0a
			num_waiting_msgs--;
     614:	80 91 cb 2a 	lds	r24, 0x2ACB
     618:	81 50       	subi	r24, 0x01	; 1
     61a:	80 93 cb 2a 	sts	0x2ACB, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
     61e:	bf be       	out	0x3f, r11	; 63
		}

		handle_msg(msg_struct);
     620:	ce 01       	movw	r24, r28
     622:	01 96       	adiw	r24, 0x01	; 1
     624:	0e 94 64 33 	call	0x66c8	; 0x66c8 <handle_msg>
		num_waiting_msgs=MAX_USER_FACING_MESSAGES;
		user_facing_messages_ovf=0;
		printf("Error: Messages overflow. Too many messages received. Try speeding up your loop if you see this a lot.\r\n");
	}
	//if(num_waiting_msgs>0) printf("num_msgs: %hu\r\n",num_waiting_msgs);
	while(num_waiting_msgs>0)
     628:	80 91 cb 2a 	lds	r24, 0x2ACB
     62c:	81 11       	cpse	r24, r1
     62e:	b3 cf       	rjmp	.-154    	; 0x596 <check_messages+0x48>
			num_waiting_msgs--;
		}

		handle_msg(msg_struct);
	}
}
     630:	6b 96       	adiw	r28, 0x1b	; 27
     632:	cd bf       	out	0x3d, r28	; 61
     634:	de bf       	out	0x3e, r29	; 62
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	bf 90       	pop	r11
     648:	08 95       	ret

0000064a <calculate_id_number>:

void calculate_id_number()
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
     652:	c0 54       	subi	r28, 0x40	; 64
     654:	d1 09       	sbc	r29, r1
     656:	cd bf       	out	0x3d, r28	; 61
     658:	de bf       	out	0x3e, r29	; 62
	uint16_t crc = 0;
	
	// calculate local id
	// simply crc of user sig row
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;
     65a:	82 e0       	ldi	r24, 0x02	; 2
     65c:	80 93 ca 01 	sts	0x01CA, r24

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};
     660:	80 e4       	ldi	r24, 0x40	; 64
     662:	e7 ef       	ldi	r30, 0xF7	; 247
     664:	f0 e2       	ldi	r31, 0x20	; 32
     666:	de 01       	movw	r26, r28
     668:	11 96       	adiw	r26, 0x01	; 1
     66a:	01 90       	ld	r0, Z+
     66c:	0d 92       	st	X+, r0
     66e:	8a 95       	dec	r24
     670:	e1 f7       	brne	.-8      	; 0x66a <calculate_id_number+0x20>
     672:	ae 01       	movw	r20, r28
     674:	4f 5f       	subi	r20, 0xFF	; 255
     676:	5f 4f       	sbci	r21, 0xFF	; 255
     678:	be 01       	movw	r22, r28
     67a:	6f 5b       	subi	r22, 0xBF	; 191
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
void calculate_id_number()
{
	if(INIT_DEBUG_MODE >= 1)	printf("get id number\r\n");

	uint32_t pgm_bytes = 0;
	uint16_t crc = 0;
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
     682:	fa 01       	movw	r30, r20
     684:	81 91       	ld	r24, Z+
     686:	91 91       	ld	r25, Z+
     688:	a1 91       	ld	r26, Z+
     68a:	b1 91       	ld	r27, Z+
     68c:	af 01       	movw	r20, r30
     68e:	ab bf       	out	0x3b, r26	; 59
     690:	fc 01       	movw	r30, r24
     692:	87 91       	elpm	r24, Z+
     694:	96 91       	elpm	r25, Z
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
     696:	28 27       	eor	r18, r24
     698:	82 2f       	mov	r24, r18
     69a:	82 95       	swap	r24
     69c:	82 27       	eor	r24, r18
     69e:	08 2e       	mov	r0, r24
     6a0:	86 95       	lsr	r24
     6a2:	86 95       	lsr	r24
     6a4:	80 25       	eor	r24, r0
     6a6:	08 2e       	mov	r0, r24
     6a8:	86 95       	lsr	r24
     6aa:	80 25       	eor	r24, r0
     6ac:	87 70       	andi	r24, 0x07	; 7
     6ae:	02 2e       	mov	r0, r18
     6b0:	23 2f       	mov	r18, r19
     6b2:	86 95       	lsr	r24
     6b4:	07 94       	ror	r0
     6b6:	87 95       	ror	r24
     6b8:	30 2d       	mov	r19, r0
     6ba:	28 27       	eor	r18, r24
     6bc:	06 94       	lsr	r0
     6be:	87 95       	ror	r24
     6c0:	30 25       	eor	r19, r0
     6c2:	28 27       	eor	r18, r24
	// likely to be unique and constant for each chip
	NVM_CMD = NVM_CMD_READ_CALIB_ROW_gc;

	uint32_t addrs[16] = {0x00,0x01,0x02,0x03,0x04,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x10,0x12,0x13,0x14,0x15};

	for (uint8_t i = 0; i < 16; i++)			
     6c4:	46 17       	cp	r20, r22
     6c6:	57 07       	cpc	r21, r23
     6c8:	09 f0       	breq	.+2      	; 0x6cc <calculate_id_number+0x82>
     6ca:	db cf       	rjmp	.-74     	; 0x682 <calculate_id_number+0x38>
	{
		pgm_bytes = pgm_read_word_far(addrs[i]);
		crc = _crc16_update(crc, (uint16_t)(pgm_bytes&0xFF));
	}

	NVM_CMD = NVM_CMD_NO_OPERATION_gc;
     6cc:	10 92 ca 01 	sts	0x01CA, r1

	droplet_ID = crc;
     6d0:	20 93 d4 29 	sts	0x29D4, r18
     6d4:	30 93 d5 29 	sts	0x29D5, r19
}
     6d8:	c0 5c       	subi	r28, 0xC0	; 192
     6da:	df 4f       	sbci	r29, 0xFF	; 255
     6dc:	cd bf       	out	0x3d, r28	; 61
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	df 91       	pop	r29
     6e2:	cf 91       	pop	r28
     6e4:	08 95       	ret

000006e6 <enable_interrupts>:

void enable_interrupts()
{
	PMIC.CTRL |= PMIC_LOLVLEN_bm;	// enable low level interrupts
     6e6:	e0 ea       	ldi	r30, 0xA0	; 160
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	82 81       	ldd	r24, Z+2	; 0x02
     6ec:	81 60       	ori	r24, 0x01	; 1
     6ee:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_MEDLVLEN_bm;	// enable medium level interrupts	(e.g. TXCIF)
     6f0:	82 81       	ldd	r24, Z+2	; 0x02
     6f2:	82 60       	ori	r24, 0x02	; 2
     6f4:	82 83       	std	Z+2, r24	; 0x02
	PMIC.CTRL |= PMIC_HILVLEN_bm;	// enable high level interrupts		(e.g. RTC_OVF)
     6f6:	82 81       	ldd	r24, Z+2	; 0x02
     6f8:	84 60       	ori	r24, 0x04	; 4
     6fa:	82 83       	std	Z+2, r24	; 0x02
	sei();
     6fc:	78 94       	sei
     6fe:	08 95       	ret

00000700 <startup_light_sequence>:
}

void startup_light_sequence()
{
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     700:	40 e0       	ldi	r20, 0x00	; 0
     702:	60 e0       	ldi	r22, 0x00	; 0
     704:	84 e6       	ldi	r24, 0x64	; 100
     706:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     70a:	84 e6       	ldi	r24, 0x64	; 100
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     712:	40 e0       	ldi	r20, 0x00	; 0
     714:	64 e6       	ldi	r22, 0x64	; 100
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     71c:	84 e6       	ldi	r24, 0x64	; 100
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     724:	44 e6       	ldi	r20, 0x64	; 100
     726:	60 e0       	ldi	r22, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     72e:	84 e6       	ldi	r24, 0x64	; 100
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     736:	0e 94 0e 21 	call	0x421c	; 0x421c <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     73a:	40 e0       	ldi	r20, 0x00	; 0
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	84 e6       	ldi	r24, 0x64	; 100
     740:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     744:	84 e6       	ldi	r24, 0x64	; 100
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	64 e6       	ldi	r22, 0x64	; 100
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     756:	84 e6       	ldi	r24, 0x64	; 100
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     75e:	44 e6       	ldi	r20, 0x64	; 100
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     768:	84 e6       	ldi	r24, 0x64	; 100
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     770:	0e 94 0e 21 	call	0x421c	; 0x421c <led_off>
	set_rgb(100,0,0); delay_ms(100); set_rgb(0,100,0); delay_ms(100); set_rgb(0,0,100); delay_ms(100); led_off();
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	60 e0       	ldi	r22, 0x00	; 0
     778:	84 e6       	ldi	r24, 0x64	; 100
     77a:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     77e:	84 e6       	ldi	r24, 0x64	; 100
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     786:	40 e0       	ldi	r20, 0x00	; 0
     788:	64 e6       	ldi	r22, 0x64	; 100
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     790:	84 e6       	ldi	r24, 0x64	; 100
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     798:	44 e6       	ldi	r20, 0x64	; 100
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
     7a2:	84 e6       	ldi	r24, 0x64	; 100
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
     7aa:	0c 94 0e 21 	jmp	0x421c	; 0x421c <led_off>
     7ae:	08 95       	ret

000007b0 <init_all_systems>:

uint16_t droplet_ID = 0;

void init_all_systems()
{
	Config32MHzClock();
     7b0:	0e 94 89 24 	call	0x4912	; 0x4912 <Config32MHzClock>
	
	calculate_id_number();
     7b4:	4a df       	rcall	.-364    	; 0x64a <calculate_id_number>
	
	scheduler_init();			if(INIT_DEBUG_MODE) printf("SCHEDULER INIT\r\n"); //This will probably never print, since you need pc_com for printf to happen, but pc_com needs the scheduler.
     7b6:	0e 94 57 24 	call	0x48ae	; 0x48ae <scheduler_init>
	pc_comm_init();				if(INIT_DEBUG_MODE) printf("PC COM INIT\r\n");
     7ba:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <pc_comm_init>
	rgb_led_init();				if(INIT_DEBUG_MODE) printf("LED INIT\r\n");
     7be:	0e 94 d7 20 	call	0x41ae	; 0x41ae <rgb_led_init>
	rgb_sensor_init();			if(INIT_DEBUG_MODE) printf("RGB SENSE INIT\r\n");
     7c2:	0e 94 6e 23 	call	0x46dc	; 0x46dc <rgb_sensor_init>
	power_init();				if(INIT_DEBUG_MODE) printf("POWER INIT\r\n");
     7c6:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <power_init>
	random_init();				if(INIT_DEBUG_MODE) printf("RAND INIT\r\n");
     7ca:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <random_init>
	i2c_init();					if(INIT_DEBUG_MODE) printf("I2C INIT\r\n");	
     7ce:	68 d0       	rcall	.+208    	; 0x8a0 <i2c_init>
	ir_comm_init();				if(INIT_DEBUG_MODE) printf("IR COM INIT\r\n");
     7d0:	27 d3       	rcall	.+1614   	; 0xe20 <ir_comm_init>
	ir_sensor_init();			if(INIT_DEBUG_MODE) printf("IR SENSE INIT\r\n");
     7d2:	0e 94 be 10 	call	0x217c	; 0x217c <ir_sensor_init>
	motor_init();				if(INIT_DEBUG_MODE) printf("MOTOR INIT\r\n");
     7d6:	0e 94 ae 14 	call	0x295c	; 0x295c <motor_init>
	range_algs_init();			if(INIT_DEBUG_MODE) printf("RANGE ALGORITHMS INIT\r\n");
     7da:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <range_algs_init>

	enable_interrupts();
     7de:	83 df       	rcall	.-250    	; 0x6e6 <enable_interrupts>
	startup_light_sequence();
     7e0:	8f cf       	rjmp	.-226    	; 0x700 <startup_light_sequence>
     7e2:	08 95       	ret

000007e4 <main>:

}

int main()
{
	init_all_systems();
     7e4:	e5 df       	rcall	.-54     	; 0x7b0 <init_all_systems>
	init();
     7e6:	0e 94 bb 32 	call	0x6576	; 0x6576 <init>
	while(1)
	{
		loop();
     7ea:	0e 94 3c 33 	call	0x6678	; 0x6678 <loop>
		check_messages();
     7ee:	af de       	rcall	.-674    	; 0x54e <check_messages>
     7f0:	fc cf       	rjmp	.-8      	; 0x7ea <main+0x6>

000007f2 <droplet_reboot>:
}


void droplet_reboot()
{
	CPU_CCP=CCP_IOREG_gc;
     7f2:	88 ed       	ldi	r24, 0xD8	; 216
     7f4:	84 bf       	out	0x34, r24	; 52
	RST.CTRL = 0x1;
     7f6:	81 e0       	ldi	r24, 0x01	; 1
     7f8:	e8 e7       	ldi	r30, 0x78	; 120
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	81 83       	std	Z+1, r24	; 0x01
     7fe:	08 95       	ret

00000800 <wait_for_nvm>:
#endif // USE_AVR1008_EEPROM


void wait_for_nvm(void)
{
        while (NVM.STATUS & NVM_NVMBUSY_bm) { };
     800:	e0 ec       	ldi	r30, 0xC0	; 192
     802:	f1 e0       	ldi	r31, 0x01	; 1
     804:	87 85       	ldd	r24, Z+15	; 0x0f
     806:	88 23       	and	r24, r24
     808:	ec f3       	brlt	.-6      	; 0x804 <wait_for_nvm+0x4>
}
     80a:	08 95       	ret

0000080c <flush_buffer>:

void flush_buffer(void)
{
        wait_for_nvm();
     80c:	f9 df       	rcall	.-14     	; 0x800 <wait_for_nvm>
        
        if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
     80e:	e0 ec       	ldi	r30, 0xC0	; 192
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	87 85       	ldd	r24, Z+15	; 0x0f
     814:	81 ff       	sbrs	r24, 1
     816:	0a c0       	rjmp	.+20     	; 0x82c <flush_buffer+0x20>
                NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
     818:	86 e3       	ldi	r24, 0x36	; 54
     81a:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     81c:	eb ec       	ldi	r30, 0xCB	; 203
     81e:	f1 e0       	ldi	r31, 0x01	; 1
     820:	21 e0       	ldi	r18, 0x01	; 1
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	88 ed       	ldi	r24, 0xD8	; 216
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	84 bf       	out	0x34, r24	; 52
     82a:	20 83       	st	Z, r18
     82c:	08 95       	ret

0000082e <EEPROM_read_byte>:
        }
}


uint8_t EEPROM_read_byte(uint16_t addr)
{
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	d8 2f       	mov	r29, r24
     834:	c9 2f       	mov	r28, r25
        wait_for_nvm();
     836:	e4 df       	rcall	.-56     	; 0x800 <wait_for_nvm>
        
        NVM.ADDR0 = addr & 0xFF;
     838:	e0 ec       	ldi	r30, 0xC0	; 192
     83a:	f1 e0       	ldi	r31, 0x01	; 1
     83c:	d0 83       	st	Z, r29
        NVM.ADDR1 = (addr >> 8) & 0x1F;
     83e:	cf 71       	andi	r28, 0x1F	; 31
     840:	c1 83       	std	Z+1, r28	; 0x01
        NVM.ADDR2 = 0;
     842:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
     844:	86 e0       	ldi	r24, 0x06	; 6
     846:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     848:	eb ec       	ldi	r30, 0xCB	; 203
     84a:	f1 e0       	ldi	r31, 0x01	; 1
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	88 ed       	ldi	r24, 0xD8	; 216
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	84 bf       	out	0x34, r24	; 52
     856:	20 83       	st	Z, r18
        NVM.ADDR2 = 0;
        
        NVM.CMD = NVM_CMD_READ_EEPROM_gc;
        NVM_EXEC();
        
        return NVM.DATA0;
     858:	e0 ec       	ldi	r30, 0xC0	; 192
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	84 81       	ldd	r24, Z+4	; 0x04
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <EEPROM_write_byte>:


void EEPROM_write_byte(uint16_t addr, uint8_t byte)
{
     864:	1f 93       	push	r17
     866:	cf 93       	push	r28
     868:	df 93       	push	r29
     86a:	18 2f       	mov	r17, r24
     86c:	d9 2f       	mov	r29, r25
     86e:	c6 2f       	mov	r28, r22
        flush_buffer();
     870:	cd df       	rcall	.-102    	; 0x80c <flush_buffer>
        NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
     872:	e0 ec       	ldi	r30, 0xC0	; 192
     874:	f1 e0       	ldi	r31, 0x01	; 1
     876:	83 e3       	ldi	r24, 0x33	; 51
     878:	82 87       	std	Z+10, r24	; 0x0a
        
        NVM.ADDR0 = addr & 0xFF;
     87a:	10 83       	st	Z, r17
        NVM.ADDR1 = (addr >> 8) & 0x1F;
     87c:	df 71       	andi	r29, 0x1F	; 31
     87e:	d1 83       	std	Z+1, r29	; 0x01
        NVM.ADDR2 = 0;
     880:	12 82       	std	Z+2, r1	; 0x02
        
        NVM.DATA0 = byte;
     882:	c4 83       	std	Z+4, r28	; 0x04
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
     884:	85 e3       	ldi	r24, 0x35	; 53
     886:	82 87       	std	Z+10, r24	; 0x0a
// NVM call
static inline void NVM_EXEC(void)
{
        void *z = (void *)&NVM_CTRLA;
        
        __asm__ volatile("out %[ccp], %[ioreg]"  "\n\t"
     888:	eb ec       	ldi	r30, 0xCB	; 203
     88a:	f1 e0       	ldi	r31, 0x01	; 1
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	88 ed       	ldi	r24, 0xD8	; 216
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	84 bf       	out	0x34, r24	; 52
     896:	20 83       	st	Z, r18
        
        NVM.DATA0 = byte;
        
        NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
        NVM_EXEC_WRAPPER();
}
     898:	df 91       	pop	r29
     89a:	cf 91       	pop	r28
     89c:	1f 91       	pop	r17
     89e:	08 95       	ret

000008a0 <i2c_init>:
#include "i2c.h"

void i2c_init()
{
	count=0;
     8a0:	10 92 f1 2a 	sts	0x2AF1, r1
	thePower=0;
     8a4:	10 92 ee 29 	sts	0x29EE, r1
     8a8:	10 92 ef 29 	sts	0x29EF, r1
	PORTE.DIRSET = PIN0_bm | PIN1_bm;
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	e0 e8       	ldi	r30, 0x80	; 128
     8b0:	f6 e0       	ldi	r31, 0x06	; 6
     8b2:	81 83       	std	Z+1, r24	; 0x01
	TWIE_MASTER_CTRLA = TWI_MASTER_INTLVL_MED_gc | TWI_MASTER_RIEN_bm | TWI_MASTER_WIEN_bm | TWI_MASTER_ENABLE_bm;
     8b4:	88 eb       	ldi	r24, 0xB8	; 184
     8b6:	80 93 a1 04 	sts	0x04A1, r24
	TWIE_MASTER_BAUD = TWI_BAUD(F_CPU, 400000);
     8ba:	83 e2       	ldi	r24, 0x23	; 35
     8bc:	80 93 a5 04 	sts	0x04A5, r24
	TWIE_MASTER_STATUS = TWI_MASTER_BUSSTATE_IDLE_gc;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 a4 04 	sts	0x04A4, r24
     8c6:	08 95       	ret

000008c8 <__vector_46>:
}

ISR(TWIE_TWIM_vect)
{
     8c8:	1f 92       	push	r1
     8ca:	0f 92       	push	r0
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	0f 92       	push	r0
     8d0:	11 24       	eor	r1, r1
     8d2:	0b b6       	in	r0, 0x3b	; 59
     8d4:	0f 92       	push	r0
     8d6:	5f 93       	push	r21
     8d8:	6f 93       	push	r22
     8da:	7f 93       	push	r23
     8dc:	8f 93       	push	r24
     8de:	9f 93       	push	r25
     8e0:	af 93       	push	r26
     8e2:	bf 93       	push	r27
     8e4:	ef 93       	push	r30
     8e6:	ff 93       	push	r31
	switch(count)
     8e8:	80 91 f1 2a 	lds	r24, 0x2AF1
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	87 30       	cpi	r24, 0x07	; 7
     8f0:	91 05       	cpc	r25, r1
     8f2:	58 f5       	brcc	.+86     	; 0x94a <__vector_46+0x82>
     8f4:	fc 01       	movw	r30, r24
     8f6:	e2 50       	subi	r30, 0x02	; 2
     8f8:	ff 4f       	sbci	r31, 0xFF	; 255
     8fa:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <__tablejump2__>
	{
		case 0:	TWIE_MASTER_DATA = (0x00 | ((uint8_t)((thePower>>8)&1))); break;
     8fe:	80 91 ef 29 	lds	r24, 0x29EF
     902:	81 70       	andi	r24, 0x01	; 1
     904:	80 93 a7 04 	sts	0x04A7, r24
     908:	20 c0       	rjmp	.+64     	; 0x94a <__vector_46+0x82>
		case 1: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;
     90a:	80 91 ee 29 	lds	r24, 0x29EE
     90e:	80 93 a7 04 	sts	0x04A7, r24
     912:	1b c0       	rjmp	.+54     	; 0x94a <__vector_46+0x82>
		case 2:	TWIE_MASTER_DATA = (0x10 | ((uint8_t)((thePower>>8)&1))); break;
     914:	80 91 ef 29 	lds	r24, 0x29EF
     918:	81 70       	andi	r24, 0x01	; 1
     91a:	80 61       	ori	r24, 0x10	; 16
     91c:	80 93 a7 04 	sts	0x04A7, r24
     920:	14 c0       	rjmp	.+40     	; 0x94a <__vector_46+0x82>
		case 3: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;	
     922:	80 91 ee 29 	lds	r24, 0x29EE
     926:	80 93 a7 04 	sts	0x04A7, r24
     92a:	0f c0       	rjmp	.+30     	; 0x94a <__vector_46+0x82>
		case 4:	TWIE_MASTER_DATA = (0x60 | ((uint8_t)((thePower>>8)&1))); break;
     92c:	80 91 ef 29 	lds	r24, 0x29EF
     930:	81 70       	andi	r24, 0x01	; 1
     932:	80 66       	ori	r24, 0x60	; 96
     934:	80 93 a7 04 	sts	0x04A7, r24
     938:	08 c0       	rjmp	.+16     	; 0x94a <__vector_46+0x82>
		case 5: TWIE_MASTER_DATA = ((uint8_t)(thePower&0xFF)); break;		
     93a:	80 91 ee 29 	lds	r24, 0x29EE
     93e:	80 93 a7 04 	sts	0x04A7, r24
     942:	03 c0       	rjmp	.+6      	; 0x94a <__vector_46+0x82>
		case 6: TWIE_MASTER_CTRLC = TWI_MASTER_CMD_STOP_gc;
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	80 93 a3 04 	sts	0x04A3, r24
	}
	count = (count+1)%7;
     94a:	80 91 f1 2a 	lds	r24, 0x2AF1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	67 e0       	ldi	r22, 0x07	; 7
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
     95a:	80 93 f1 2a 	sts	0x2AF1, r24
}
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	bf 91       	pop	r27
     964:	af 91       	pop	r26
     966:	9f 91       	pop	r25
     968:	8f 91       	pop	r24
     96a:	7f 91       	pop	r23
     96c:	6f 91       	pop	r22
     96e:	5f 91       	pop	r21
     970:	0f 90       	pop	r0
     972:	0b be       	out	0x3b, r0	; 59
     974:	0f 90       	pop	r0
     976:	0f be       	out	0x3f, r0	; 63
     978:	0f 90       	pop	r0
     97a:	1f 90       	pop	r1
     97c:	18 95       	reti

0000097e <set_all_ir_powers>:

void set_all_ir_powers(uint16_t power)
{
	thePower=power;
     97e:	80 93 ee 29 	sts	0x29EE, r24
     982:	90 93 ef 29 	sts	0x29EF, r25
	TWIE_MASTER_ADDR = 0x58;
     986:	88 e5       	ldi	r24, 0x58	; 88
     988:	80 93 a6 04 	sts	0x04A6, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     98c:	8f e7       	ldi	r24, 0x7F	; 127
     98e:	95 e2       	ldi	r25, 0x25	; 37
     990:	01 97       	sbiw	r24, 0x01	; 1
     992:	f1 f7       	brne	.-4      	; 0x990 <set_all_ir_powers+0x12>
     994:	00 c0       	rjmp	.+0      	; 0x996 <set_all_ir_powers+0x18>
     996:	00 00       	nop
	delay_us(1200);
	TWIE_MASTER_ADDR = 0x5c;
     998:	8c e5       	ldi	r24, 0x5C	; 92
     99a:	80 93 a6 04 	sts	0x04A6, r24
     99e:	8f e7       	ldi	r24, 0x7F	; 127
     9a0:	95 e2       	ldi	r25, 0x25	; 37
     9a2:	01 97       	sbiw	r24, 0x01	; 1
     9a4:	f1 f7       	brne	.-4      	; 0x9a2 <set_all_ir_powers+0x24>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <set_all_ir_powers+0x2a>
     9a8:	00 00       	nop
     9aa:	08 95       	ret

000009ac <perform_ir_upkeep>:
	channel[dir]->CTRLB |= USART_RXEN_bm;	// this enables receive on the USART
}

void ir_reset_rx(uint8_t dir)
{
	ir_transmit_complete(dir); //main reason I can see not to this is that when we're receiving we don't need to turn off the carrier wave. Doing shouldn't hurt, however?
     9ac:	4f 92       	push	r4
     9ae:	5f 92       	push	r5
     9b0:	6f 92       	push	r6
     9b2:	7f 92       	push	r7
     9b4:	8f 92       	push	r8
     9b6:	9f 92       	push	r9
     9b8:	af 92       	push	r10
     9ba:	bf 92       	push	r11
     9bc:	cf 92       	push	r12
     9be:	df 92       	push	r13
     9c0:	ef 92       	push	r14
     9c2:	ff 92       	push	r15
     9c4:	0f 93       	push	r16
     9c6:	1f 93       	push	r17
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
     9d0:	2c 97       	sbiw	r28, 0x0c	; 12
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	fe 01       	movw	r30, r28
     9d8:	31 96       	adiw	r30, 0x01	; 1
     9da:	8c e0       	ldi	r24, 0x0C	; 12
     9dc:	df 01       	movw	r26, r30
     9de:	1d 92       	st	X+, r1
     9e0:	8a 95       	dec	r24
     9e2:	e9 f7       	brne	.-6      	; 0x9de <perform_ir_upkeep+0x32>
     9e4:	0f 2e       	mov	r0, r31
     9e6:	f6 e0       	ldi	r31, 0x06	; 6
     9e8:	af 2e       	mov	r10, r31
     9ea:	f0 e2       	ldi	r31, 0x20	; 32
     9ec:	bf 2e       	mov	r11, r31
     9ee:	f0 2d       	mov	r31, r0
     9f0:	0f 2e       	mov	r0, r31
     9f2:	fe e6       	ldi	r31, 0x6E	; 110
     9f4:	8f 2e       	mov	r8, r31
     9f6:	fb e2       	ldi	r31, 0x2B	; 43
     9f8:	9f 2e       	mov	r9, r31
     9fa:	f0 2d       	mov	r31, r0
     9fc:	6f 01       	movw	r12, r30
     9fe:	55 24       	eor	r5, r5
     a00:	5a 94       	dec	r5
     a02:	e1 2c       	mov	r14, r1
     a04:	f1 2c       	mov	r15, r1
     a06:	77 24       	eor	r7, r7
     a08:	73 94       	inc	r7
     a0a:	4f b6       	in	r4, 0x3f	; 63
     a0c:	f8 94       	cli
     a0e:	87 01       	movw	r16, r14
     a10:	f7 01       	movw	r30, r14
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	e2 95       	swap	r30
     a18:	f2 95       	swap	r31
     a1a:	f0 7f       	andi	r31, 0xF0	; 240
     a1c:	fe 27       	eor	r31, r30
     a1e:	e0 7f       	andi	r30, 0xF0	; 240
     a20:	fe 27       	eor	r31, r30
     a22:	e6 59       	subi	r30, 0x96	; 150
     a24:	f4 4d       	sbci	r31, 0xD4	; 212
     a26:	87 8d       	ldd	r24, Z+31	; 0x1f
     a28:	81 ff       	sbrs	r24, 1
     a2a:	80 c1       	rjmp	.+768    	; 0xd2c <perform_ir_upkeep+0x380>
     a2c:	6e 2c       	mov	r6, r14
     a2e:	55 2d       	mov	r21, r5
     a30:	55 20       	and	r5, r5
     a32:	0c f4       	brge	.+2      	; 0xa36 <perform_ir_upkeep+0x8a>
     a34:	97 c1       	rjmp	.+814    	; 0xd64 <perform_ir_upkeep+0x3b8>
     a36:	40 e0       	ldi	r20, 0x00	; 0
     a38:	f7 01       	movw	r30, r14
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	e2 95       	swap	r30
     a40:	f2 95       	swap	r31
     a42:	f0 7f       	andi	r31, 0xF0	; 240
     a44:	fe 27       	eor	r31, r30
     a46:	e0 7f       	andi	r30, 0xF0	; 240
     a48:	fe 27       	eor	r31, r30
     a4a:	e2 58       	subi	r30, 0x82	; 130
     a4c:	f4 4d       	sbci	r31, 0xD4	; 212
     a4e:	80 81       	ld	r24, Z
     a50:	91 81       	ldd	r25, Z+1	; 0x01
     a52:	a5 2f       	mov	r26, r21
     a54:	aa 0f       	add	r26, r26
     a56:	bb 0b       	sbc	r27, r27
     a58:	21 e0       	ldi	r18, 0x01	; 1
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	2c 0f       	add	r18, r28
     a5e:	3d 1f       	adc	r19, r29
     a60:	a2 0f       	add	r26, r18
     a62:	b3 1f       	adc	r27, r19
     a64:	2d 91       	ld	r18, X+
     a66:	3c 91       	ld	r19, X
     a68:	28 17       	cp	r18, r24
     a6a:	39 07       	cpc	r19, r25
     a6c:	09 f4       	brne	.+2      	; 0xa70 <perform_ir_upkeep+0xc4>
     a6e:	47 2d       	mov	r20, r7
     a70:	51 50       	subi	r21, 0x01	; 1
     a72:	6a f7       	brpl	.-38     	; 0xa4e <perform_ir_upkeep+0xa2>
     a74:	f8 01       	movw	r30, r16
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	e2 95       	swap	r30
     a7c:	f2 95       	swap	r31
     a7e:	f0 7f       	andi	r31, 0xF0	; 240
     a80:	fe 27       	eor	r31, r30
     a82:	e0 7f       	andi	r30, 0xF0	; 240
     a84:	fe 27       	eor	r31, r30
     a86:	e6 59       	subi	r30, 0x96	; 150
     a88:	f4 4d       	sbci	r31, 0xD4	; 212
     a8a:	84 89       	ldd	r24, Z+20	; 0x14
     a8c:	95 89       	ldd	r25, Z+21	; 0x15
     a8e:	d6 01       	movw	r26, r12
     a90:	8d 93       	st	X+, r24
     a92:	9c 93       	st	X, r25
     a94:	44 23       	and	r20, r20
     a96:	f1 f0       	breq	.+60     	; 0xad4 <perform_ir_upkeep+0x128>
     a98:	f8 01       	movw	r30, r16
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	e2 95       	swap	r30
     aa0:	f2 95       	swap	r31
     aa2:	f0 7f       	andi	r31, 0xF0	; 240
     aa4:	fe 27       	eor	r31, r30
     aa6:	e0 7f       	andi	r30, 0xF0	; 240
     aa8:	fe 27       	eor	r31, r30
     aaa:	e6 59       	subi	r30, 0x96	; 150
     aac:	f4 4d       	sbci	r31, 0xD4	; 212
     aae:	14 8a       	std	Z+20, r1	; 0x14
     ab0:	15 8a       	std	Z+21, r1	; 0x15
     ab2:	16 8a       	std	Z+22, r1	; 0x16
     ab4:	17 8a       	std	Z+23, r1	; 0x17
     ab6:	10 8e       	std	Z+24, r1	; 0x18
     ab8:	11 8e       	std	Z+25, r1	; 0x19
     aba:	12 8e       	std	Z+26, r1	; 0x1a
     abc:	13 8e       	std	Z+27, r1	; 0x1b
     abe:	14 8e       	std	Z+28, r1	; 0x1c
     ac0:	15 8e       	std	Z+29, r1	; 0x1d
     ac2:	16 8e       	std	Z+30, r1	; 0x1e
     ac4:	17 8e       	std	Z+31, r1	; 0x1f
     ac6:	d5 01       	movw	r26, r10
     ac8:	ed 91       	ld	r30, X+
     aca:	fc 91       	ld	r31, X
     acc:	84 81       	ldd	r24, Z+4	; 0x04
     ace:	80 61       	ori	r24, 0x10	; 16
     ad0:	84 83       	std	Z+4, r24	; 0x04
     ad2:	2c c1       	rjmp	.+600    	; 0xd2c <perform_ir_upkeep+0x380>
     ad4:	f8 01       	movw	r30, r16
     ad6:	ee 0f       	add	r30, r30
     ad8:	ff 1f       	adc	r31, r31
     ada:	e2 95       	swap	r30
     adc:	f2 95       	swap	r31
     ade:	f0 7f       	andi	r31, 0xF0	; 240
     ae0:	fe 27       	eor	r31, r30
     ae2:	e0 7f       	andi	r30, 0xF0	; 240
     ae4:	fe 27       	eor	r31, r30
     ae6:	e6 59       	subi	r30, 0x96	; 150
     ae8:	f4 4d       	sbci	r31, 0xD4	; 212
     aea:	87 8d       	ldd	r24, Z+31	; 0x1f
     aec:	83 ff       	sbrs	r24, 3
     aee:	62 c0       	rjmp	.+196    	; 0xbb4 <perform_ir_upkeep+0x208>
     af0:	8f 01       	movw	r16, r30
     af2:	46 8d       	ldd	r20, Z+30	; 0x1e
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	b4 01       	movw	r22, r8
     af8:	84 e6       	ldi	r24, 0x64	; 100
     afa:	9c e2       	ldi	r25, 0x2C	; 44
     afc:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <memcpy>
     b00:	d8 01       	movw	r26, r16
     b02:	5e 96       	adiw	r26, 0x1e	; 30
     b04:	ec 91       	ld	r30, X
     b06:	5e 97       	sbiw	r26, 0x1e	; 30
     b08:	f0 e0       	ldi	r31, 0x00	; 0
     b0a:	ec 59       	subi	r30, 0x9C	; 156
     b0c:	f3 4d       	sbci	r31, 0xD3	; 211
     b0e:	10 82       	st	Z, r1
     b10:	5e 96       	adiw	r26, 0x1e	; 30
     b12:	8c 91       	ld	r24, X
     b14:	5e 97       	sbiw	r26, 0x1e	; 30
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	80 93 61 2c 	sts	0x2C61, r24
     b1c:	90 93 62 2c 	sts	0x2C62, r25
     b20:	8d 91       	ld	r24, X+
     b22:	9d 91       	ld	r25, X+
     b24:	0d 90       	ld	r0, X+
     b26:	bc 91       	ld	r27, X
     b28:	a0 2d       	mov	r26, r0
     b2a:	80 93 5b 2c 	sts	0x2C5B, r24
     b2e:	90 93 5c 2c 	sts	0x2C5C, r25
     b32:	a0 93 5d 2c 	sts	0x2C5D, r26
     b36:	b0 93 5e 2c 	sts	0x2C5E, r27
     b3a:	f8 01       	movw	r30, r16
     b3c:	86 89       	ldd	r24, Z+22	; 0x16
     b3e:	97 89       	ldd	r25, Z+23	; 0x17
     b40:	80 93 c9 2a 	sts	0x2AC9, r24
     b44:	90 93 ca 2a 	sts	0x2ACA, r25
     b48:	f5 e0       	ldi	r31, 0x05	; 5
     b4a:	f6 15       	cp	r31, r6
     b4c:	40 f1       	brcs	.+80     	; 0xb9e <perform_ir_upkeep+0x1f2>
     b4e:	86 2d       	mov	r24, r6
     b50:	90 e0       	ldi	r25, 0x00	; 0
     b52:	fc 01       	movw	r30, r24
     b54:	ee 0f       	add	r30, r30
     b56:	ff 1f       	adc	r31, r31
     b58:	e2 95       	swap	r30
     b5a:	f2 95       	swap	r31
     b5c:	f0 7f       	andi	r31, 0xF0	; 240
     b5e:	fe 27       	eor	r31, r30
     b60:	e0 7f       	andi	r30, 0xF0	; 240
     b62:	fe 27       	eor	r31, r30
     b64:	e6 59       	subi	r30, 0x96	; 150
     b66:	f4 4d       	sbci	r31, 0xD4	; 212
     b68:	14 8a       	std	Z+20, r1	; 0x14
     b6a:	15 8a       	std	Z+21, r1	; 0x15
     b6c:	16 8a       	std	Z+22, r1	; 0x16
     b6e:	17 8a       	std	Z+23, r1	; 0x17
     b70:	10 8e       	std	Z+24, r1	; 0x18
     b72:	11 8e       	std	Z+25, r1	; 0x19
     b74:	12 8e       	std	Z+26, r1	; 0x1a
     b76:	13 8e       	std	Z+27, r1	; 0x1b
     b78:	14 8e       	std	Z+28, r1	; 0x1c
     b7a:	15 8e       	std	Z+29, r1	; 0x1d
     b7c:	16 8e       	std	Z+30, r1	; 0x1e
     b7e:	17 8e       	std	Z+31, r1	; 0x1f
     b80:	fc 01       	movw	r30, r24
     b82:	ee 0f       	add	r30, r30
     b84:	ff 1f       	adc	r31, r31
     b86:	ea 5f       	subi	r30, 0xFA	; 250
     b88:	ff 4d       	sbci	r31, 0xDF	; 223
     b8a:	01 90       	ld	r0, Z+
     b8c:	f0 81       	ld	r31, Z
     b8e:	e0 2d       	mov	r30, r0
     b90:	84 81       	ldd	r24, Z+4	; 0x04
     b92:	80 61       	ori	r24, 0x10	; 16
     b94:	84 83       	std	Z+4, r24	; 0x04
     b96:	63 94       	inc	r6
     b98:	26 e0       	ldi	r18, 0x06	; 6
     b9a:	62 12       	cpse	r6, r18
     b9c:	d8 cf       	rjmp	.-80     	; 0xb4e <perform_ir_upkeep+0x1a2>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	47 ed       	ldi	r20, 0xD7	; 215
     ba4:	56 e0       	ldi	r21, 0x06	; 6
     ba6:	65 e0       	ldi	r22, 0x05	; 5
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 d6 24 	call	0x49ac	; 0x49ac <schedule_task>
     bb2:	bc c0       	rjmp	.+376    	; 0xd2c <perform_ir_upkeep+0x380>
     bb4:	80 91 cb 2a 	lds	r24, 0x2ACB
     bb8:	86 30       	cpi	r24, 0x06	; 6
     bba:	20 f0       	brcs	.+8      	; 0xbc4 <perform_ir_upkeep+0x218>
     bbc:	70 92 f0 29 	sts	0x29F0, r7
     bc0:	10 92 cb 2a 	sts	0x2ACB, r1
     bc4:	00 0f       	add	r16, r16
     bc6:	11 1f       	adc	r17, r17
     bc8:	02 95       	swap	r16
     bca:	12 95       	swap	r17
     bcc:	10 7f       	andi	r17, 0xF0	; 240
     bce:	10 27       	eor	r17, r16
     bd0:	00 7f       	andi	r16, 0xF0	; 240
     bd2:	10 27       	eor	r17, r16
     bd4:	06 59       	subi	r16, 0x96	; 150
     bd6:	14 4d       	sbci	r17, 0xD4	; 212
     bd8:	d8 01       	movw	r26, r16
     bda:	5e 96       	adiw	r26, 0x1e	; 30
     bdc:	4c 91       	ld	r20, X
     bde:	80 91 cb 2a 	lds	r24, 0x2ACB
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	9c 01       	movw	r18, r24
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	b4 01       	movw	r22, r8
     bfe:	83 5c       	subi	r24, 0xC3	; 195
     c00:	95 4d       	sbci	r25, 0xD5	; 213
     c02:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <memcpy>
     c06:	80 91 cb 2a 	lds	r24, 0x2ACB
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	f8 01       	movw	r30, r16
     c0e:	26 8d       	ldd	r18, Z+30	; 0x1e
     c10:	fc 01       	movw	r30, r24
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	8e 0f       	add	r24, r30
     c18:	9f 1f       	adc	r25, r31
     c1a:	fc 01       	movw	r30, r24
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	ee 0f       	add	r30, r30
     c22:	ff 1f       	adc	r31, r31
     c24:	ee 0f       	add	r30, r30
     c26:	ff 1f       	adc	r31, r31
     c28:	e9 5c       	subi	r30, 0xC9	; 201
     c2a:	f5 4d       	sbci	r31, 0xD5	; 213
     c2c:	e2 0f       	add	r30, r18
     c2e:	f1 1d       	adc	r31, r1
     c30:	16 82       	std	Z+6, r1	; 0x06
     c32:	80 91 cb 2a 	lds	r24, 0x2ACB
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	d8 01       	movw	r26, r16
     c3a:	4d 91       	ld	r20, X+
     c3c:	5d 91       	ld	r21, X+
     c3e:	6d 91       	ld	r22, X+
     c40:	7c 91       	ld	r23, X
     c42:	13 97       	sbiw	r26, 0x03	; 3
     c44:	9c 01       	movw	r18, r24
     c46:	22 0f       	add	r18, r18
     c48:	33 1f       	adc	r19, r19
     c4a:	82 0f       	add	r24, r18
     c4c:	93 1f       	adc	r25, r19
     c4e:	fc 01       	movw	r30, r24
     c50:	ee 0f       	add	r30, r30
     c52:	ff 1f       	adc	r31, r31
     c54:	ee 0f       	add	r30, r30
     c56:	ff 1f       	adc	r31, r31
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	e9 5c       	subi	r30, 0xC9	; 201
     c5e:	f5 4d       	sbci	r31, 0xD5	; 213
     c60:	40 83       	st	Z, r20
     c62:	51 83       	std	Z+1, r21	; 0x01
     c64:	62 83       	std	Z+2, r22	; 0x02
     c66:	73 83       	std	Z+3, r23	; 0x03
     c68:	80 91 cb 2a 	lds	r24, 0x2ACB
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fc 01       	movw	r30, r24
     c70:	ee 0f       	add	r30, r30
     c72:	ff 1f       	adc	r31, r31
     c74:	8e 0f       	add	r24, r30
     c76:	9f 1f       	adc	r25, r31
     c78:	fc 01       	movw	r30, r24
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	ee 0f       	add	r30, r30
     c80:	ff 1f       	adc	r31, r31
     c82:	ee 0f       	add	r30, r30
     c84:	ff 1f       	adc	r31, r31
     c86:	e9 5c       	subi	r30, 0xC9	; 201
     c88:	f5 4d       	sbci	r31, 0xD5	; 213
     c8a:	66 8a       	std	Z+22, r6	; 0x16
     c8c:	80 91 cb 2a 	lds	r24, 0x2ACB
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	56 96       	adiw	r26, 0x16	; 22
     c94:	2d 91       	ld	r18, X+
     c96:	3c 91       	ld	r19, X
     c98:	57 97       	sbiw	r26, 0x17	; 23
     c9a:	fc 01       	movw	r30, r24
     c9c:	ee 0f       	add	r30, r30
     c9e:	ff 1f       	adc	r31, r31
     ca0:	8e 0f       	add	r24, r30
     ca2:	9f 1f       	adc	r25, r31
     ca4:	fc 01       	movw	r30, r24
     ca6:	ee 0f       	add	r30, r30
     ca8:	ff 1f       	adc	r31, r31
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	ee 0f       	add	r30, r30
     cb0:	ff 1f       	adc	r31, r31
     cb2:	e9 5c       	subi	r30, 0xC9	; 201
     cb4:	f5 4d       	sbci	r31, 0xD5	; 213
     cb6:	24 83       	std	Z+4, r18	; 0x04
     cb8:	35 83       	std	Z+5, r19	; 0x05
     cba:	80 91 cb 2a 	lds	r24, 0x2ACB
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	5e 96       	adiw	r26, 0x1e	; 30
     cc2:	2c 91       	ld	r18, X
     cc4:	5e 97       	sbiw	r26, 0x1e	; 30
     cc6:	fc 01       	movw	r30, r24
     cc8:	ee 0f       	add	r30, r30
     cca:	ff 1f       	adc	r31, r31
     ccc:	8e 0f       	add	r24, r30
     cce:	9f 1f       	adc	r25, r31
     cd0:	fc 01       	movw	r30, r24
     cd2:	ee 0f       	add	r30, r30
     cd4:	ff 1f       	adc	r31, r31
     cd6:	ee 0f       	add	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	ee 0f       	add	r30, r30
     cdc:	ff 1f       	adc	r31, r31
     cde:	e9 5c       	subi	r30, 0xC9	; 201
     ce0:	f5 4d       	sbci	r31, 0xD5	; 213
     ce2:	27 8b       	std	Z+23, r18	; 0x17
     ce4:	80 91 cb 2a 	lds	r24, 0x2ACB
     ce8:	8f 5f       	subi	r24, 0xFF	; 255
     cea:	80 93 cb 2a 	sts	0x2ACB, r24
     cee:	54 96       	adiw	r26, 0x14	; 20
     cf0:	1d 92       	st	X+, r1
     cf2:	1c 92       	st	X, r1
     cf4:	55 97       	sbiw	r26, 0x15	; 21
     cf6:	56 96       	adiw	r26, 0x16	; 22
     cf8:	1d 92       	st	X+, r1
     cfa:	1c 92       	st	X, r1
     cfc:	57 97       	sbiw	r26, 0x17	; 23
     cfe:	58 96       	adiw	r26, 0x18	; 24
     d00:	1d 92       	st	X+, r1
     d02:	1c 92       	st	X, r1
     d04:	59 97       	sbiw	r26, 0x19	; 25
     d06:	5a 96       	adiw	r26, 0x1a	; 26
     d08:	1d 92       	st	X+, r1
     d0a:	1c 92       	st	X, r1
     d0c:	5b 97       	sbiw	r26, 0x1b	; 27
     d0e:	5c 96       	adiw	r26, 0x1c	; 28
     d10:	1d 92       	st	X+, r1
     d12:	1c 92       	st	X, r1
     d14:	5d 97       	sbiw	r26, 0x1d	; 29
     d16:	5e 96       	adiw	r26, 0x1e	; 30
     d18:	1c 92       	st	X, r1
     d1a:	5e 97       	sbiw	r26, 0x1e	; 30
     d1c:	5f 96       	adiw	r26, 0x1f	; 31
     d1e:	1c 92       	st	X, r1
     d20:	d5 01       	movw	r26, r10
     d22:	ed 91       	ld	r30, X+
     d24:	fc 91       	ld	r31, X
     d26:	84 81       	ldd	r24, Z+4	; 0x04
     d28:	80 61       	ori	r24, 0x10	; 16
     d2a:	84 83       	std	Z+4, r24	; 0x04
     d2c:	4f be       	out	0x3f, r4	; 63
     d2e:	bf ef       	ldi	r27, 0xFF	; 255
     d30:	eb 1a       	sub	r14, r27
     d32:	fb 0a       	sbc	r15, r27
     d34:	e2 e0       	ldi	r30, 0x02	; 2
     d36:	ae 0e       	add	r10, r30
     d38:	b1 1c       	adc	r11, r1
     d3a:	f0 e2       	ldi	r31, 0x20	; 32
     d3c:	8f 0e       	add	r8, r31
     d3e:	91 1c       	adc	r9, r1
     d40:	22 e0       	ldi	r18, 0x02	; 2
     d42:	c2 0e       	add	r12, r18
     d44:	d1 1c       	adc	r13, r1
     d46:	53 94       	inc	r5
     d48:	35 e0       	ldi	r19, 0x05	; 5
     d4a:	53 12       	cpse	r5, r19
     d4c:	5e ce       	rjmp	.-836    	; 0xa0a <perform_ir_upkeep+0x5e>
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	46 ed       	ldi	r20, 0xD6	; 214
     d54:	54 e0       	ldi	r21, 0x04	; 4
     d56:	6e e3       	ldi	r22, 0x3E	; 62
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 d6 24 	call	0x49ac	; 0x49ac <schedule_task>
     d62:	11 c0       	rjmp	.+34     	; 0xd86 <perform_ir_upkeep+0x3da>
     d64:	f7 01       	movw	r30, r14
     d66:	ee 0f       	add	r30, r30
     d68:	ff 1f       	adc	r31, r31
     d6a:	e2 95       	swap	r30
     d6c:	f2 95       	swap	r31
     d6e:	f0 7f       	andi	r31, 0xF0	; 240
     d70:	fe 27       	eor	r31, r30
     d72:	e0 7f       	andi	r30, 0xF0	; 240
     d74:	fe 27       	eor	r31, r30
     d76:	e6 59       	subi	r30, 0x96	; 150
     d78:	f4 4d       	sbci	r31, 0xD4	; 212
     d7a:	84 89       	ldd	r24, Z+20	; 0x14
     d7c:	95 89       	ldd	r25, Z+21	; 0x15
     d7e:	d6 01       	movw	r26, r12
     d80:	8d 93       	st	X+, r24
     d82:	9c 93       	st	X, r25
     d84:	a7 ce       	rjmp	.-690    	; 0xad4 <perform_ir_upkeep+0x128>
     d86:	2c 96       	adiw	r28, 0x0c	; 12
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	de bf       	out	0x3e, r29	; 62
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	bf 90       	pop	r11
     d9e:	af 90       	pop	r10
     da0:	9f 90       	pop	r9
     da2:	8f 90       	pop	r8
     da4:	7f 90       	pop	r7
     da6:	6f 90       	pop	r6
     da8:	5f 90       	pop	r5
     daa:	4f 90       	pop	r4
     dac:	08 95       	ret

00000dae <handle_cmd_wrapper>:
     dae:	df 92       	push	r13
     db0:	ef 92       	push	r14
     db2:	ff 92       	push	r15
     db4:	0f 93       	push	r16
     db6:	1f 93       	push	r17
     db8:	cf 93       	push	r28
     dba:	df 93       	push	r29
     dbc:	cd b7       	in	r28, 0x3d	; 61
     dbe:	de b7       	in	r29, 0x3e	; 62
     dc0:	ed b6       	in	r14, 0x3d	; 61
     dc2:	fe b6       	in	r15, 0x3e	; 62
     dc4:	80 91 61 2c 	lds	r24, 0x2C61
     dc8:	90 91 62 2c 	lds	r25, 0x2C62
     dcc:	01 96       	adiw	r24, 0x01	; 1
     dce:	2d b7       	in	r18, 0x3d	; 61
     dd0:	3e b7       	in	r19, 0x3e	; 62
     dd2:	28 1b       	sub	r18, r24
     dd4:	39 0b       	sbc	r19, r25
     dd6:	2d bf       	out	0x3d, r18	; 61
     dd8:	3e bf       	out	0x3e, r19	; 62
     dda:	0d b7       	in	r16, 0x3d	; 61
     ddc:	1e b7       	in	r17, 0x3e	; 62
     dde:	0f 5f       	subi	r16, 0xFF	; 255
     de0:	1f 4f       	sbci	r17, 0xFF	; 255
     de2:	df b6       	in	r13, 0x3f	; 63
     de4:	f8 94       	cli
     de6:	40 91 61 2c 	lds	r20, 0x2C61
     dea:	50 91 62 2c 	lds	r21, 0x2C62
     dee:	4f 5f       	subi	r20, 0xFF	; 255
     df0:	5f 4f       	sbci	r21, 0xFF	; 255
     df2:	64 e6       	ldi	r22, 0x64	; 100
     df4:	7c e2       	ldi	r23, 0x2C	; 44
     df6:	c8 01       	movw	r24, r16
     df8:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <memcpy>
     dfc:	60 91 61 2c 	lds	r22, 0x2C61
     e00:	70 91 62 2c 	lds	r23, 0x2C62
     e04:	df be       	out	0x3f, r13	; 63
     e06:	c8 01       	movw	r24, r16
     e08:	0e 94 cd 2c 	call	0x599a	; 0x599a <handle_serial_command>
     e0c:	ed be       	out	0x3d, r14	; 61
     e0e:	fe be       	out	0x3e, r15	; 62
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	08 95       	ret

00000e20 <ir_comm_init>:
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	a0 ea       	ldi	r26, 0xA0	; 160
     e26:	b6 e0       	ldi	r27, 0x06	; 6
     e28:	83 ef       	ldi	r24, 0xF3	; 243
     e2a:	11 96       	adiw	r26, 0x01	; 1
     e2c:	8c 93       	st	X, r24
     e2e:	11 97       	sbiw	r26, 0x01	; 1
     e30:	e0 e0       	ldi	r30, 0x00	; 0
     e32:	fb e0       	ldi	r31, 0x0B	; 11
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	84 83       	std	Z+4, r24	; 0x04
     e38:	80 81       	ld	r24, Z
     e3a:	83 60       	ori	r24, 0x03	; 3
     e3c:	80 83       	st	Z, r24
     e3e:	83 ed       	ldi	r24, 0xD3	; 211
     e40:	87 a3       	std	Z+39, r24	; 0x27
     e42:	86 a3       	std	Z+38, r24	; 0x26
     e44:	89 e6       	ldi	r24, 0x69	; 105
     e46:	81 a7       	std	Z+41, r24	; 0x29
     e48:	83 a7       	std	Z+43, r24	; 0x2b
     e4a:	85 a7       	std	Z+45, r24	; 0x2d
     e4c:	87 a7       	std	Z+47, r24	; 0x2f
     e4e:	80 a7       	std	Z+40, r24	; 0x28
     e50:	82 a7       	std	Z+42, r24	; 0x2a
     e52:	c0 e4       	ldi	r28, 0x40	; 64
     e54:	d6 e0       	ldi	r29, 0x06	; 6
     e56:	34 e4       	ldi	r19, 0x44	; 68
     e58:	3a 83       	std	Y+2, r19	; 0x02
     e5a:	80 e6       	ldi	r24, 0x60	; 96
     e5c:	96 e0       	ldi	r25, 0x06	; 6
     e5e:	24 e0       	ldi	r18, 0x04	; 4
     e60:	fc 01       	movw	r30, r24
     e62:	22 83       	std	Z+2, r18	; 0x02
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	56 e0       	ldi	r21, 0x06	; 6
     e68:	fa 01       	movw	r30, r20
     e6a:	32 83       	std	Z+2, r19	; 0x02
     e6c:	12 96       	adiw	r26, 0x02	; 2
     e6e:	2c 93       	st	X, r18
     e70:	12 97       	sbiw	r26, 0x02	; 2
     e72:	38 e8       	ldi	r19, 0x88	; 136
     e74:	39 83       	std	Y+1, r19	; 0x01
     e76:	28 e0       	ldi	r18, 0x08	; 8
     e78:	fc 01       	movw	r30, r24
     e7a:	21 83       	std	Z+1, r18	; 0x01
     e7c:	fa 01       	movw	r30, r20
     e7e:	31 83       	std	Z+1, r19	; 0x01
     e80:	11 96       	adiw	r26, 0x01	; 1
     e82:	2c 93       	st	X, r18
     e84:	11 97       	sbiw	r26, 0x01	; 1
     e86:	20 e4       	ldi	r18, 0x40	; 64
     e88:	2b 8b       	std	Y+19, r18	; 0x13
     e8a:	2f 8b       	std	Y+23, r18	; 0x17
     e8c:	fc 01       	movw	r30, r24
     e8e:	23 8b       	std	Z+19, r18	; 0x13
     e90:	fa 01       	movw	r30, r20
     e92:	23 8b       	std	Z+19, r18	; 0x13
     e94:	27 8b       	std	Z+23, r18	; 0x17
     e96:	53 96       	adiw	r26, 0x13	; 19
     e98:	2c 93       	st	X, r18
     e9a:	82 e1       	ldi	r24, 0x12	; 18
     e9c:	90 e2       	ldi	r25, 0x20	; 32
     e9e:	e6 e0       	ldi	r30, 0x06	; 6
     ea0:	f0 e2       	ldi	r31, 0x20	; 32
     ea2:	68 e2       	ldi	r22, 0x28	; 40
     ea4:	53 e0       	ldi	r21, 0x03	; 3
     ea6:	40 e7       	ldi	r20, 0x70	; 112
     ea8:	32 e0       	ldi	r19, 0x02	; 2
     eaa:	a0 81       	ld	r26, Z
     eac:	b1 81       	ldd	r27, Z+1	; 0x01
     eae:	13 96       	adiw	r26, 0x03	; 3
     eb0:	6c 93       	st	X, r22
     eb2:	a0 81       	ld	r26, Z
     eb4:	b1 81       	ldd	r27, Z+1	; 0x01
     eb6:	15 96       	adiw	r26, 0x05	; 5
     eb8:	5c 93       	st	X, r21
     eba:	a0 81       	ld	r26, Z
     ebc:	b1 81       	ldd	r27, Z+1	; 0x01
     ebe:	16 96       	adiw	r26, 0x06	; 6
     ec0:	4c 93       	st	X, r20
     ec2:	a0 81       	ld	r26, Z
     ec4:	b1 81       	ldd	r27, Z+1	; 0x01
     ec6:	17 96       	adiw	r26, 0x07	; 7
     ec8:	3c 93       	st	X, r19
     eca:	a0 81       	ld	r26, Z
     ecc:	b1 81       	ldd	r27, Z+1	; 0x01
     ece:	14 96       	adiw	r26, 0x04	; 4
     ed0:	2c 91       	ld	r18, X
     ed2:	14 97       	sbiw	r26, 0x04	; 4
     ed4:	20 61       	ori	r18, 0x10	; 16
     ed6:	14 96       	adiw	r26, 0x04	; 4
     ed8:	2c 93       	st	X, r18
     eda:	a1 91       	ld	r26, Z+
     edc:	b1 91       	ld	r27, Z+
     ede:	14 96       	adiw	r26, 0x04	; 4
     ee0:	2c 91       	ld	r18, X
     ee2:	14 97       	sbiw	r26, 0x04	; 4
     ee4:	28 60       	ori	r18, 0x08	; 8
     ee6:	14 96       	adiw	r26, 0x04	; 4
     ee8:	2c 93       	st	X, r18
     eea:	e8 17       	cp	r30, r24
     eec:	f9 07       	cpc	r31, r25
     eee:	e9 f6       	brne	.-70     	; 0xeaa <ir_comm_init+0x8a>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	91 e0       	ldi	r25, 0x01	; 1
     ef4:	44 dd       	rcall	.-1400   	; 0x97e <set_all_ir_powers>
     ef6:	a6 e0       	ldi	r26, 0x06	; 6
     ef8:	b0 e2       	ldi	r27, 0x20	; 32
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	fc 01       	movw	r30, r24
     f00:	ee 0f       	add	r30, r30
     f02:	ff 1f       	adc	r31, r31
     f04:	e2 95       	swap	r30
     f06:	f2 95       	swap	r31
     f08:	f0 7f       	andi	r31, 0xF0	; 240
     f0a:	fe 27       	eor	r31, r30
     f0c:	e0 7f       	andi	r30, 0xF0	; 240
     f0e:	fe 27       	eor	r31, r30
     f10:	e6 59       	subi	r30, 0x96	; 150
     f12:	f4 4d       	sbci	r31, 0xD4	; 212
     f14:	14 8a       	std	Z+20, r1	; 0x14
     f16:	15 8a       	std	Z+21, r1	; 0x15
     f18:	16 8a       	std	Z+22, r1	; 0x16
     f1a:	17 8a       	std	Z+23, r1	; 0x17
     f1c:	10 8e       	std	Z+24, r1	; 0x18
     f1e:	11 8e       	std	Z+25, r1	; 0x19
     f20:	12 8e       	std	Z+26, r1	; 0x1a
     f22:	13 8e       	std	Z+27, r1	; 0x1b
     f24:	14 8e       	std	Z+28, r1	; 0x1c
     f26:	15 8e       	std	Z+29, r1	; 0x1d
     f28:	16 8e       	std	Z+30, r1	; 0x1e
     f2a:	17 8e       	std	Z+31, r1	; 0x1f
     f2c:	ed 91       	ld	r30, X+
     f2e:	fd 91       	ld	r31, X+
     f30:	24 81       	ldd	r18, Z+4	; 0x04
     f32:	20 61       	ori	r18, 0x10	; 16
     f34:	24 83       	std	Z+4, r18	; 0x04
     f36:	01 96       	adiw	r24, 0x01	; 1
     f38:	86 30       	cpi	r24, 0x06	; 6
     f3a:	91 05       	cpc	r25, r1
     f3c:	01 f7       	brne	.-64     	; 0xefe <ir_comm_init+0xde>
     f3e:	10 92 5b 2c 	sts	0x2C5B, r1
     f42:	10 92 5c 2c 	sts	0x2C5C, r1
     f46:	10 92 5d 2c 	sts	0x2C5D, r1
     f4a:	10 92 5e 2c 	sts	0x2C5E, r1
     f4e:	10 92 cb 2a 	sts	0x2ACB, r1
     f52:	10 92 f0 29 	sts	0x29F0, r1
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	46 ed       	ldi	r20, 0xD6	; 214
     f5c:	54 e0       	ldi	r21, 0x04	; 4
     f5e:	6e e3       	ldi	r22, 0x3E	; 62
     f60:	70 e0       	ldi	r23, 0x00	; 0
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 d6 24 	call	0x49ac	; 0x49ac <schedule_task>
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <send_msg>:
     f70:	5f 92       	push	r5
     f72:	6f 92       	push	r6
     f74:	7f 92       	push	r7
     f76:	8f 92       	push	r8
     f78:	9f 92       	push	r9
     f7a:	af 92       	push	r10
     f7c:	bf 92       	push	r11
     f7e:	cf 92       	push	r12
     f80:	df 92       	push	r13
     f82:	ef 92       	push	r14
     f84:	ff 92       	push	r15
     f86:	0f 93       	push	r16
     f88:	1f 93       	push	r17
     f8a:	cf 93       	push	r28
     f8c:	df 93       	push	r29
     f8e:	66 2e       	mov	r6, r22
     f90:	57 2e       	mov	r5, r23
     f92:	74 2e       	mov	r7, r20
     f94:	c0 91 d4 29 	lds	r28, 0x29D4
     f98:	d0 91 d5 29 	lds	r29, 0x29D5
     f9c:	e8 2e       	mov	r14, r24
     f9e:	f1 2c       	mov	r15, r1
     fa0:	80 fd       	sbrc	r24, 0
     fa2:	0d c0       	rjmp	.+26     	; 0xfbe <send_msg+0x4e>
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	ac 01       	movw	r20, r24
     faa:	97 01       	movw	r18, r14
     fac:	08 2e       	mov	r0, r24
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <send_msg+0x44>
     fb0:	35 95       	asr	r19
     fb2:	27 95       	ror	r18
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <send_msg+0x40>
     fb8:	20 ff       	sbrs	r18, 0
     fba:	2a c0       	rjmp	.+84     	; 0x1010 <send_msg+0xa0>
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <send_msg+0x52>
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	fa 01       	movw	r30, r20
     fc4:	ee 0f       	add	r30, r30
     fc6:	ff 1f       	adc	r31, r31
     fc8:	e2 95       	swap	r30
     fca:	f2 95       	swap	r31
     fcc:	f0 7f       	andi	r31, 0xF0	; 240
     fce:	fe 27       	eor	r31, r30
     fd0:	e0 7f       	andi	r30, 0xF0	; 240
     fd2:	fe 27       	eor	r31, r30
     fd4:	e6 59       	subi	r30, 0x96	; 150
     fd6:	f4 4d       	sbci	r31, 0xD4	; 212
     fd8:	87 8d       	ldd	r24, Z+31	; 0x1f
     fda:	88 70       	andi	r24, 0x08	; 8
     fdc:	c8 27       	eor	r28, r24
     fde:	8c 2f       	mov	r24, r28
     fe0:	82 95       	swap	r24
     fe2:	8c 27       	eor	r24, r28
     fe4:	08 2e       	mov	r0, r24
     fe6:	86 95       	lsr	r24
     fe8:	86 95       	lsr	r24
     fea:	80 25       	eor	r24, r0
     fec:	08 2e       	mov	r0, r24
     fee:	86 95       	lsr	r24
     ff0:	80 25       	eor	r24, r0
     ff2:	87 70       	andi	r24, 0x07	; 7
     ff4:	0c 2e       	mov	r0, r28
     ff6:	cd 2f       	mov	r28, r29
     ff8:	86 95       	lsr	r24
     ffa:	07 94       	ror	r0
     ffc:	87 95       	ror	r24
     ffe:	d0 2d       	mov	r29, r0
    1000:	c8 27       	eor	r28, r24
    1002:	06 94       	lsr	r0
    1004:	87 95       	ror	r24
    1006:	d0 25       	eor	r29, r0
    1008:	c8 27       	eor	r28, r24
    100a:	71 10       	cpse	r7, r1
    100c:	07 c0       	rjmp	.+14     	; 0x101c <send_msg+0xac>
    100e:	87 c0       	rjmp	.+270    	; 0x111e <send_msg+0x1ae>
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	86 30       	cpi	r24, 0x06	; 6
    1014:	91 05       	cpc	r25, r1
    1016:	09 f0       	breq	.+2      	; 0x101a <send_msg+0xaa>
    1018:	c7 cf       	rjmp	.-114    	; 0xfa8 <send_msg+0x38>
    101a:	f7 cf       	rjmp	.-18     	; 0x100a <send_msg+0x9a>
    101c:	96 2d       	mov	r25, r6
    101e:	e6 2d       	mov	r30, r6
    1020:	f5 2d       	mov	r31, r5
    1022:	81 91       	ld	r24, Z+
    1024:	c8 27       	eor	r28, r24
    1026:	8c 2f       	mov	r24, r28
    1028:	82 95       	swap	r24
    102a:	8c 27       	eor	r24, r28
    102c:	08 2e       	mov	r0, r24
    102e:	86 95       	lsr	r24
    1030:	86 95       	lsr	r24
    1032:	80 25       	eor	r24, r0
    1034:	08 2e       	mov	r0, r24
    1036:	86 95       	lsr	r24
    1038:	80 25       	eor	r24, r0
    103a:	87 70       	andi	r24, 0x07	; 7
    103c:	0c 2e       	mov	r0, r28
    103e:	cd 2f       	mov	r28, r29
    1040:	86 95       	lsr	r24
    1042:	07 94       	ror	r0
    1044:	87 95       	ror	r24
    1046:	d0 2d       	mov	r29, r0
    1048:	c8 27       	eor	r28, r24
    104a:	06 94       	lsr	r0
    104c:	87 95       	ror	r24
    104e:	d0 25       	eor	r29, r0
    1050:	c8 27       	eor	r28, r24
    1052:	8e 2f       	mov	r24, r30
    1054:	89 1b       	sub	r24, r25
    1056:	87 15       	cp	r24, r7
    1058:	20 f3       	brcs	.-56     	; 0x1022 <send_msg+0xb2>
    105a:	61 c0       	rjmp	.+194    	; 0x111e <send_msg+0x1ae>
    105c:	c7 01       	movw	r24, r14
    105e:	00 2e       	mov	r0, r16
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <send_msg+0xf6>
    1062:	95 95       	asr	r25
    1064:	87 95       	ror	r24
    1066:	0a 94       	dec	r0
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <send_msg+0xf2>
    106a:	80 ff       	sbrs	r24, 0
    106c:	25 c0       	rjmp	.+74     	; 0x10b8 <send_msg+0x148>
    106e:	f8 01       	movw	r30, r16
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	e2 95       	swap	r30
    1076:	f2 95       	swap	r31
    1078:	f0 7f       	andi	r31, 0xF0	; 240
    107a:	fe 27       	eor	r31, r30
    107c:	e0 7f       	andi	r30, 0xF0	; 240
    107e:	fe 27       	eor	r31, r30
    1080:	e6 59       	subi	r30, 0x96	; 150
    1082:	f4 4d       	sbci	r31, 0xD4	; 212
    1084:	76 8e       	std	Z+30, r7	; 0x1e
    1086:	c4 8b       	std	Z+20, r28	; 0x14
    1088:	d5 8b       	std	Z+21, r29	; 0x15
    108a:	12 8e       	std	Z+26, r1	; 0x1a
    108c:	13 8e       	std	Z+27, r1	; 0x1b
    108e:	80 91 d4 29 	lds	r24, 0x29D4
    1092:	90 91 d5 29 	lds	r25, 0x29D5
    1096:	86 8b       	std	Z+22, r24	; 0x16
    1098:	97 8b       	std	Z+23, r25	; 0x17
    109a:	a5 01       	movw	r20, r10
    109c:	66 2d       	mov	r22, r6
    109e:	75 2d       	mov	r23, r5
    10a0:	c4 01       	movw	r24, r8
    10a2:	0e 94 85 3e 	call	0x7d0a	; 0x7d0a <memcpy>
    10a6:	f6 01       	movw	r30, r12
    10a8:	91 81       	ldd	r25, Z+1	; 0x01
    10aa:	f8 01       	movw	r30, r16
    10ac:	e0 50       	subi	r30, 0x00	; 0
    10ae:	f0 4e       	sbci	r31, 0xE0	; 224
    10b0:	80 81       	ld	r24, Z
    10b2:	89 2b       	or	r24, r25
    10b4:	f6 01       	movw	r30, r12
    10b6:	81 83       	std	Z+1, r24	; 0x01
    10b8:	0f 5f       	subi	r16, 0xFF	; 255
    10ba:	1f 4f       	sbci	r17, 0xFF	; 255
    10bc:	f0 e2       	ldi	r31, 0x20	; 32
    10be:	8f 0e       	add	r8, r31
    10c0:	91 1c       	adc	r9, r1
    10c2:	06 30       	cpi	r16, 0x06	; 6
    10c4:	11 05       	cpc	r17, r1
    10c6:	51 f6       	brne	.-108    	; 0x105c <send_msg+0xec>
    10c8:	e6 e0       	ldi	r30, 0x06	; 6
    10ca:	f0 e2       	ldi	r31, 0x20	; 32
    10cc:	80 e0       	ldi	r24, 0x00	; 0
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	97 01       	movw	r18, r14
    10d2:	08 2e       	mov	r0, r24
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <send_msg+0x16a>
    10d6:	35 95       	asr	r19
    10d8:	27 95       	ror	r18
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <send_msg+0x166>
    10de:	20 ff       	sbrs	r18, 0
    10e0:	18 c0       	rjmp	.+48     	; 0x1112 <send_msg+0x1a2>
    10e2:	dc 01       	movw	r26, r24
    10e4:	aa 0f       	add	r26, r26
    10e6:	bb 1f       	adc	r27, r27
    10e8:	a2 95       	swap	r26
    10ea:	b2 95       	swap	r27
    10ec:	b0 7f       	andi	r27, 0xF0	; 240
    10ee:	ba 27       	eor	r27, r26
    10f0:	a0 7f       	andi	r26, 0xF0	; 240
    10f2:	ba 27       	eor	r27, r26
    10f4:	a6 59       	subi	r26, 0x96	; 150
    10f6:	b4 4d       	sbci	r27, 0xD4	; 212
    10f8:	1d 92       	st	X+, r1
    10fa:	1d 92       	st	X+, r1
    10fc:	1d 92       	st	X+, r1
    10fe:	1c 92       	st	X, r1
    1100:	13 97       	sbiw	r26, 0x03	; 3
    1102:	a0 81       	ld	r26, Z
    1104:	b1 81       	ldd	r27, Z+1	; 0x01
    1106:	13 96       	adiw	r26, 0x03	; 3
    1108:	2c 91       	ld	r18, X
    110a:	13 97       	sbiw	r26, 0x03	; 3
    110c:	22 60       	ori	r18, 0x02	; 2
    110e:	13 96       	adiw	r26, 0x03	; 3
    1110:	2c 93       	st	X, r18
    1112:	01 96       	adiw	r24, 0x01	; 1
    1114:	32 96       	adiw	r30, 0x02	; 2
    1116:	86 30       	cpi	r24, 0x06	; 6
    1118:	91 05       	cpc	r25, r1
    111a:	d1 f6       	brne	.-76     	; 0x10d0 <send_msg+0x160>
    111c:	10 c0       	rjmp	.+32     	; 0x113e <send_msg+0x1ce>
    111e:	0f 2e       	mov	r0, r31
    1120:	fe e6       	ldi	r31, 0x6E	; 110
    1122:	8f 2e       	mov	r8, r31
    1124:	fb e2       	ldi	r31, 0x2B	; 43
    1126:	9f 2e       	mov	r9, r31
    1128:	f0 2d       	mov	r31, r0
    112a:	00 e0       	ldi	r16, 0x00	; 0
    112c:	10 e0       	ldi	r17, 0x00	; 0
    112e:	a7 2c       	mov	r10, r7
    1130:	b1 2c       	mov	r11, r1
    1132:	0f 2e       	mov	r0, r31
    1134:	c1 2c       	mov	r12, r1
    1136:	fb e0       	ldi	r31, 0x0B	; 11
    1138:	df 2e       	mov	r13, r31
    113a:	f0 2d       	mov	r31, r0
    113c:	8f cf       	rjmp	.-226    	; 0x105c <send_msg+0xec>
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	bf 90       	pop	r11
    1150:	af 90       	pop	r10
    1152:	9f 90       	pop	r9
    1154:	8f 90       	pop	r8
    1156:	7f 90       	pop	r7
    1158:	6f 90       	pop	r6
    115a:	5f 90       	pop	r5
    115c:	08 95       	ret

0000115e <ir_receive>:
    115e:	af 92       	push	r10
    1160:	bf 92       	push	r11
    1162:	cf 92       	push	r12
    1164:	df 92       	push	r13
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	c8 2f       	mov	r28, r24
    1172:	d0 e0       	ldi	r29, 0x00	; 0
    1174:	fe 01       	movw	r30, r28
    1176:	ee 0f       	add	r30, r30
    1178:	ff 1f       	adc	r31, r31
    117a:	ea 5f       	subi	r30, 0xFA	; 250
    117c:	ff 4d       	sbci	r31, 0xDF	; 223
    117e:	01 90       	ld	r0, Z+
    1180:	f0 81       	ld	r31, Z
    1182:	e0 2d       	mov	r30, r0
    1184:	f0 80       	ld	r15, Z
    1186:	d7 d9       	rcall	.-3154   	; 0x536 <get_time>
    1188:	fe 01       	movw	r30, r28
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	e2 95       	swap	r30
    1190:	f2 95       	swap	r31
    1192:	f0 7f       	andi	r31, 0xF0	; 240
    1194:	fe 27       	eor	r31, r30
    1196:	e0 7f       	andi	r30, 0xF0	; 240
    1198:	fe 27       	eor	r31, r30
    119a:	e6 59       	subi	r30, 0x96	; 150
    119c:	f4 4d       	sbci	r31, 0xD4	; 212
    119e:	00 81       	ld	r16, Z
    11a0:	11 81       	ldd	r17, Z+1	; 0x01
    11a2:	22 81       	ldd	r18, Z+2	; 0x02
    11a4:	33 81       	ldd	r19, Z+3	; 0x03
    11a6:	5b 01       	movw	r10, r22
    11a8:	6c 01       	movw	r12, r24
    11aa:	a0 1a       	sub	r10, r16
    11ac:	b1 0a       	sbc	r11, r17
    11ae:	c2 0a       	sbc	r12, r18
    11b0:	d3 0a       	sbc	r13, r19
    11b2:	96 01       	movw	r18, r12
    11b4:	85 01       	movw	r16, r10
    11b6:	05 31       	cpi	r16, 0x15	; 21
    11b8:	11 05       	cpc	r17, r1
    11ba:	21 05       	cpc	r18, r1
    11bc:	31 05       	cpc	r19, r1
    11be:	10 f1       	brcs	.+68     	; 0x1204 <ir_receive+0xa6>
    11c0:	fe 01       	movw	r30, r28
    11c2:	ee 0f       	add	r30, r30
    11c4:	ff 1f       	adc	r31, r31
    11c6:	e2 95       	swap	r30
    11c8:	f2 95       	swap	r31
    11ca:	f0 7f       	andi	r31, 0xF0	; 240
    11cc:	fe 27       	eor	r31, r30
    11ce:	e0 7f       	andi	r30, 0xF0	; 240
    11d0:	fe 27       	eor	r31, r30
    11d2:	e6 59       	subi	r30, 0x96	; 150
    11d4:	f4 4d       	sbci	r31, 0xD4	; 212
    11d6:	14 8a       	std	Z+20, r1	; 0x14
    11d8:	15 8a       	std	Z+21, r1	; 0x15
    11da:	16 8a       	std	Z+22, r1	; 0x16
    11dc:	17 8a       	std	Z+23, r1	; 0x17
    11de:	10 8e       	std	Z+24, r1	; 0x18
    11e0:	11 8e       	std	Z+25, r1	; 0x19
    11e2:	12 8e       	std	Z+26, r1	; 0x1a
    11e4:	13 8e       	std	Z+27, r1	; 0x1b
    11e6:	14 8e       	std	Z+28, r1	; 0x1c
    11e8:	15 8e       	std	Z+29, r1	; 0x1d
    11ea:	16 8e       	std	Z+30, r1	; 0x1e
    11ec:	17 8e       	std	Z+31, r1	; 0x1f
    11ee:	fe 01       	movw	r30, r28
    11f0:	ee 0f       	add	r30, r30
    11f2:	ff 1f       	adc	r31, r31
    11f4:	ea 5f       	subi	r30, 0xFA	; 250
    11f6:	ff 4d       	sbci	r31, 0xDF	; 223
    11f8:	01 90       	ld	r0, Z+
    11fa:	f0 81       	ld	r31, Z
    11fc:	e0 2d       	mov	r30, r0
    11fe:	24 81       	ldd	r18, Z+4	; 0x04
    1200:	20 61       	ori	r18, 0x10	; 16
    1202:	24 83       	std	Z+4, r18	; 0x04
    1204:	fe 01       	movw	r30, r28
    1206:	ee 0f       	add	r30, r30
    1208:	ff 1f       	adc	r31, r31
    120a:	e2 95       	swap	r30
    120c:	f2 95       	swap	r31
    120e:	f0 7f       	andi	r31, 0xF0	; 240
    1210:	fe 27       	eor	r31, r30
    1212:	e0 7f       	andi	r30, 0xF0	; 240
    1214:	fe 27       	eor	r31, r30
    1216:	e6 59       	subi	r30, 0x96	; 150
    1218:	f4 4d       	sbci	r31, 0xD4	; 212
    121a:	60 83       	st	Z, r22
    121c:	71 83       	std	Z+1, r23	; 0x01
    121e:	82 83       	std	Z+2, r24	; 0x02
    1220:	93 83       	std	Z+3, r25	; 0x03
    1222:	82 8d       	ldd	r24, Z+26	; 0x1a
    1224:	93 8d       	ldd	r25, Z+27	; 0x1b
    1226:	87 30       	cpi	r24, 0x07	; 7
    1228:	91 05       	cpc	r25, r1
    122a:	08 f0       	brcs	.+2      	; 0x122e <ir_receive+0xd0>
    122c:	b3 c0       	rjmp	.+358    	; 0x1394 <ir_receive+0x236>
    122e:	fc 01       	movw	r30, r24
    1230:	eb 5f       	subi	r30, 0xFB	; 251
    1232:	fe 4f       	sbci	r31, 0xFE	; 254
    1234:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <__tablejump2__>
    1238:	8f 2d       	mov	r24, r15
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	fe 01       	movw	r30, r28
    123e:	ee 0f       	add	r30, r30
    1240:	ff 1f       	adc	r31, r31
    1242:	e2 95       	swap	r30
    1244:	f2 95       	swap	r31
    1246:	f0 7f       	andi	r31, 0xF0	; 240
    1248:	fe 27       	eor	r31, r30
    124a:	e0 7f       	andi	r30, 0xF0	; 240
    124c:	fe 27       	eor	r31, r30
    124e:	e6 59       	subi	r30, 0x96	; 150
    1250:	f4 4d       	sbci	r31, 0xD4	; 212
    1252:	86 8b       	std	Z+22, r24	; 0x16
    1254:	97 8b       	std	Z+23, r25	; 0x17
    1256:	d6 c0       	rjmp	.+428    	; 0x1404 <ir_receive+0x2a6>
    1258:	fe 01       	movw	r30, r28
    125a:	ee 0f       	add	r30, r30
    125c:	ff 1f       	adc	r31, r31
    125e:	e2 95       	swap	r30
    1260:	f2 95       	swap	r31
    1262:	f0 7f       	andi	r31, 0xF0	; 240
    1264:	fe 27       	eor	r31, r30
    1266:	e0 7f       	andi	r30, 0xF0	; 240
    1268:	fe 27       	eor	r31, r30
    126a:	e6 59       	subi	r30, 0x96	; 150
    126c:	f4 4d       	sbci	r31, 0xD4	; 212
    126e:	86 89       	ldd	r24, Z+22	; 0x16
    1270:	97 89       	ldd	r25, Z+23	; 0x17
    1272:	9f 29       	or	r25, r15
    1274:	86 8b       	std	Z+22, r24	; 0x16
    1276:	97 8b       	std	Z+23, r25	; 0x17
    1278:	86 89       	ldd	r24, Z+22	; 0x16
    127a:	97 89       	ldd	r25, Z+23	; 0x17
    127c:	84 8f       	std	Z+28, r24	; 0x1c
    127e:	95 8f       	std	Z+29, r25	; 0x1d
    1280:	c1 c0       	rjmp	.+386    	; 0x1404 <ir_receive+0x2a6>
    1282:	ff 20       	and	r15, r15
    1284:	74 f4       	brge	.+28     	; 0x12a2 <ir_receive+0x144>
    1286:	fe 01       	movw	r30, r28
    1288:	ee 0f       	add	r30, r30
    128a:	ff 1f       	adc	r31, r31
    128c:	e2 95       	swap	r30
    128e:	f2 95       	swap	r31
    1290:	f0 7f       	andi	r31, 0xF0	; 240
    1292:	fe 27       	eor	r31, r30
    1294:	e0 7f       	andi	r30, 0xF0	; 240
    1296:	fe 27       	eor	r31, r30
    1298:	e6 59       	subi	r30, 0x96	; 150
    129a:	f4 4d       	sbci	r31, 0xD4	; 212
    129c:	87 8d       	ldd	r24, Z+31	; 0x1f
    129e:	88 60       	ori	r24, 0x08	; 8
    12a0:	87 8f       	std	Z+31, r24	; 0x1f
    12a2:	fe 01       	movw	r30, r28
    12a4:	ee 0f       	add	r30, r30
    12a6:	ff 1f       	adc	r31, r31
    12a8:	e2 95       	swap	r30
    12aa:	f2 95       	swap	r31
    12ac:	f0 7f       	andi	r31, 0xF0	; 240
    12ae:	fe 27       	eor	r31, r30
    12b0:	e0 7f       	andi	r30, 0xF0	; 240
    12b2:	fe 27       	eor	r31, r30
    12b4:	e6 59       	subi	r30, 0x96	; 150
    12b6:	f4 4d       	sbci	r31, 0xD4	; 212
    12b8:	27 8d       	ldd	r18, Z+31	; 0x1f
    12ba:	84 8d       	ldd	r24, Z+28	; 0x1c
    12bc:	95 8d       	ldd	r25, Z+29	; 0x1d
    12be:	28 70       	andi	r18, 0x08	; 8
    12c0:	82 27       	eor	r24, r18
    12c2:	28 2f       	mov	r18, r24
    12c4:	22 95       	swap	r18
    12c6:	28 27       	eor	r18, r24
    12c8:	02 2e       	mov	r0, r18
    12ca:	26 95       	lsr	r18
    12cc:	26 95       	lsr	r18
    12ce:	20 25       	eor	r18, r0
    12d0:	02 2e       	mov	r0, r18
    12d2:	26 95       	lsr	r18
    12d4:	20 25       	eor	r18, r0
    12d6:	27 70       	andi	r18, 0x07	; 7
    12d8:	08 2e       	mov	r0, r24
    12da:	89 2f       	mov	r24, r25
    12dc:	26 95       	lsr	r18
    12de:	07 94       	ror	r0
    12e0:	27 95       	ror	r18
    12e2:	90 2d       	mov	r25, r0
    12e4:	82 27       	eor	r24, r18
    12e6:	06 94       	lsr	r0
    12e8:	27 95       	ror	r18
    12ea:	90 25       	eor	r25, r0
    12ec:	82 27       	eor	r24, r18
    12ee:	fe 01       	movw	r30, r28
    12f0:	ee 0f       	add	r30, r30
    12f2:	ff 1f       	adc	r31, r31
    12f4:	e2 95       	swap	r30
    12f6:	f2 95       	swap	r31
    12f8:	f0 7f       	andi	r31, 0xF0	; 240
    12fa:	fe 27       	eor	r31, r30
    12fc:	e0 7f       	andi	r30, 0xF0	; 240
    12fe:	fe 27       	eor	r31, r30
    1300:	e6 59       	subi	r30, 0x96	; 150
    1302:	f4 4d       	sbci	r31, 0xD4	; 212
    1304:	84 8f       	std	Z+28, r24	; 0x1c
    1306:	95 8f       	std	Z+29, r25	; 0x1d
    1308:	8f 2d       	mov	r24, r15
    130a:	8f 77       	andi	r24, 0x7F	; 127
    130c:	86 8f       	std	Z+30, r24	; 0x1e
    130e:	7a c0       	rjmp	.+244    	; 0x1404 <ir_receive+0x2a6>
    1310:	8f 2d       	mov	r24, r15
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	fe 01       	movw	r30, r28
    1316:	ee 0f       	add	r30, r30
    1318:	ff 1f       	adc	r31, r31
    131a:	e2 95       	swap	r30
    131c:	f2 95       	swap	r31
    131e:	f0 7f       	andi	r31, 0xF0	; 240
    1320:	fe 27       	eor	r31, r30
    1322:	e0 7f       	andi	r30, 0xF0	; 240
    1324:	fe 27       	eor	r31, r30
    1326:	e6 59       	subi	r30, 0x96	; 150
    1328:	f4 4d       	sbci	r31, 0xD4	; 212
    132a:	84 8b       	std	Z+20, r24	; 0x14
    132c:	95 8b       	std	Z+21, r25	; 0x15
    132e:	6a c0       	rjmp	.+212    	; 0x1404 <ir_receive+0x2a6>
    1330:	fe 01       	movw	r30, r28
    1332:	ee 0f       	add	r30, r30
    1334:	ff 1f       	adc	r31, r31
    1336:	e2 95       	swap	r30
    1338:	f2 95       	swap	r31
    133a:	f0 7f       	andi	r31, 0xF0	; 240
    133c:	fe 27       	eor	r31, r30
    133e:	e0 7f       	andi	r30, 0xF0	; 240
    1340:	fe 27       	eor	r31, r30
    1342:	e6 59       	subi	r30, 0x96	; 150
    1344:	f4 4d       	sbci	r31, 0xD4	; 212
    1346:	84 89       	ldd	r24, Z+20	; 0x14
    1348:	95 89       	ldd	r25, Z+21	; 0x15
    134a:	9f 29       	or	r25, r15
    134c:	84 8b       	std	Z+20, r24	; 0x14
    134e:	95 8b       	std	Z+21, r25	; 0x15
    1350:	59 c0       	rjmp	.+178    	; 0x1404 <ir_receive+0x2a6>
    1352:	8f 2d       	mov	r24, r15
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	fe 01       	movw	r30, r28
    1358:	ee 0f       	add	r30, r30
    135a:	ff 1f       	adc	r31, r31
    135c:	e2 95       	swap	r30
    135e:	f2 95       	swap	r31
    1360:	f0 7f       	andi	r31, 0xF0	; 240
    1362:	fe 27       	eor	r31, r30
    1364:	e0 7f       	andi	r30, 0xF0	; 240
    1366:	fe 27       	eor	r31, r30
    1368:	e6 59       	subi	r30, 0x96	; 150
    136a:	f4 4d       	sbci	r31, 0xD4	; 212
    136c:	80 8f       	std	Z+24, r24	; 0x18
    136e:	91 8f       	std	Z+25, r25	; 0x19
    1370:	49 c0       	rjmp	.+146    	; 0x1404 <ir_receive+0x2a6>
    1372:	fe 01       	movw	r30, r28
    1374:	ee 0f       	add	r30, r30
    1376:	ff 1f       	adc	r31, r31
    1378:	e2 95       	swap	r30
    137a:	f2 95       	swap	r31
    137c:	f0 7f       	andi	r31, 0xF0	; 240
    137e:	fe 27       	eor	r31, r30
    1380:	e0 7f       	andi	r30, 0xF0	; 240
    1382:	fe 27       	eor	r31, r30
    1384:	e6 59       	subi	r30, 0x96	; 150
    1386:	f4 4d       	sbci	r31, 0xD4	; 212
    1388:	80 8d       	ldd	r24, Z+24	; 0x18
    138a:	91 8d       	ldd	r25, Z+25	; 0x19
    138c:	9f 29       	or	r25, r15
    138e:	80 8f       	std	Z+24, r24	; 0x18
    1390:	91 8f       	std	Z+25, r25	; 0x19
    1392:	38 c0       	rjmp	.+112    	; 0x1404 <ir_receive+0x2a6>
    1394:	fe 01       	movw	r30, r28
    1396:	ee 0f       	add	r30, r30
    1398:	ff 1f       	adc	r31, r31
    139a:	e2 95       	swap	r30
    139c:	f2 95       	swap	r31
    139e:	f0 7f       	andi	r31, 0xF0	; 240
    13a0:	fe 27       	eor	r31, r30
    13a2:	e0 7f       	andi	r30, 0xF0	; 240
    13a4:	fe 27       	eor	r31, r30
    13a6:	e6 59       	subi	r30, 0x96	; 150
    13a8:	f4 4d       	sbci	r31, 0xD4	; 212
    13aa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    13ac:	b3 8d       	ldd	r27, Z+27	; 0x1b
    13ae:	17 97       	sbiw	r26, 0x07	; 7
    13b0:	ae 0f       	add	r26, r30
    13b2:	bf 1f       	adc	r27, r31
    13b4:	14 96       	adiw	r26, 0x04	; 4
    13b6:	fc 92       	st	X, r15
    13b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    13ba:	95 8d       	ldd	r25, Z+29	; 0x1d
    13bc:	8f 25       	eor	r24, r15
    13be:	28 2f       	mov	r18, r24
    13c0:	22 95       	swap	r18
    13c2:	28 27       	eor	r18, r24
    13c4:	02 2e       	mov	r0, r18
    13c6:	26 95       	lsr	r18
    13c8:	26 95       	lsr	r18
    13ca:	20 25       	eor	r18, r0
    13cc:	02 2e       	mov	r0, r18
    13ce:	26 95       	lsr	r18
    13d0:	20 25       	eor	r18, r0
    13d2:	27 70       	andi	r18, 0x07	; 7
    13d4:	08 2e       	mov	r0, r24
    13d6:	89 2f       	mov	r24, r25
    13d8:	26 95       	lsr	r18
    13da:	07 94       	ror	r0
    13dc:	27 95       	ror	r18
    13de:	90 2d       	mov	r25, r0
    13e0:	82 27       	eor	r24, r18
    13e2:	06 94       	lsr	r0
    13e4:	27 95       	ror	r18
    13e6:	90 25       	eor	r25, r0
    13e8:	82 27       	eor	r24, r18
    13ea:	fe 01       	movw	r30, r28
    13ec:	ee 0f       	add	r30, r30
    13ee:	ff 1f       	adc	r31, r31
    13f0:	e2 95       	swap	r30
    13f2:	f2 95       	swap	r31
    13f4:	f0 7f       	andi	r31, 0xF0	; 240
    13f6:	fe 27       	eor	r31, r30
    13f8:	e0 7f       	andi	r30, 0xF0	; 240
    13fa:	fe 27       	eor	r31, r30
    13fc:	e6 59       	subi	r30, 0x96	; 150
    13fe:	f4 4d       	sbci	r31, 0xD4	; 212
    1400:	84 8f       	std	Z+28, r24	; 0x1c
    1402:	95 8f       	std	Z+29, r25	; 0x1d
    1404:	fe 01       	movw	r30, r28
    1406:	ee 0f       	add	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	e2 95       	swap	r30
    140c:	f2 95       	swap	r31
    140e:	f0 7f       	andi	r31, 0xF0	; 240
    1410:	fe 27       	eor	r31, r30
    1412:	e0 7f       	andi	r30, 0xF0	; 240
    1414:	fe 27       	eor	r31, r30
    1416:	e6 59       	subi	r30, 0x96	; 150
    1418:	f4 4d       	sbci	r31, 0xD4	; 212
    141a:	82 8d       	ldd	r24, Z+26	; 0x1a
    141c:	93 8d       	ldd	r25, Z+27	; 0x1b
    141e:	01 96       	adiw	r24, 0x01	; 1
    1420:	82 8f       	std	Z+26, r24	; 0x1a
    1422:	93 8f       	std	Z+27, r25	; 0x1b
    1424:	22 8d       	ldd	r18, Z+26	; 0x1a
    1426:	33 8d       	ldd	r19, Z+27	; 0x1b
    1428:	86 8d       	ldd	r24, Z+30	; 0x1e
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	07 96       	adiw	r24, 0x07	; 7
    142e:	28 17       	cp	r18, r24
    1430:	39 07       	cpc	r19, r25
    1432:	08 f4       	brcc	.+2      	; 0x1436 <ir_receive+0x2d8>
    1434:	c6 c0       	rjmp	.+396    	; 0x15c2 <ir_receive+0x464>
    1436:	fe 01       	movw	r30, r28
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	e2 95       	swap	r30
    143e:	f2 95       	swap	r31
    1440:	f0 7f       	andi	r31, 0xF0	; 240
    1442:	fe 27       	eor	r31, r30
    1444:	e0 7f       	andi	r30, 0xF0	; 240
    1446:	fe 27       	eor	r31, r30
    1448:	e6 59       	subi	r30, 0x96	; 150
    144a:	f4 4d       	sbci	r31, 0xD4	; 212
    144c:	24 8d       	ldd	r18, Z+28	; 0x1c
    144e:	35 8d       	ldd	r19, Z+29	; 0x1d
    1450:	84 89       	ldd	r24, Z+20	; 0x14
    1452:	95 89       	ldd	r25, Z+21	; 0x15
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	09 f1       	breq	.+66     	; 0x149c <ir_receive+0x33e>
    145a:	fe 01       	movw	r30, r28
    145c:	ee 0f       	add	r30, r30
    145e:	ff 1f       	adc	r31, r31
    1460:	e2 95       	swap	r30
    1462:	f2 95       	swap	r31
    1464:	f0 7f       	andi	r31, 0xF0	; 240
    1466:	fe 27       	eor	r31, r30
    1468:	e0 7f       	andi	r30, 0xF0	; 240
    146a:	fe 27       	eor	r31, r30
    146c:	e6 59       	subi	r30, 0x96	; 150
    146e:	f4 4d       	sbci	r31, 0xD4	; 212
    1470:	14 8a       	std	Z+20, r1	; 0x14
    1472:	15 8a       	std	Z+21, r1	; 0x15
    1474:	16 8a       	std	Z+22, r1	; 0x16
    1476:	17 8a       	std	Z+23, r1	; 0x17
    1478:	10 8e       	std	Z+24, r1	; 0x18
    147a:	11 8e       	std	Z+25, r1	; 0x19
    147c:	12 8e       	std	Z+26, r1	; 0x1a
    147e:	13 8e       	std	Z+27, r1	; 0x1b
    1480:	14 8e       	std	Z+28, r1	; 0x1c
    1482:	15 8e       	std	Z+29, r1	; 0x1d
    1484:	16 8e       	std	Z+30, r1	; 0x1e
    1486:	17 8e       	std	Z+31, r1	; 0x1f
    1488:	cc 0f       	add	r28, r28
    148a:	dd 1f       	adc	r29, r29
    148c:	ca 5f       	subi	r28, 0xFA	; 250
    148e:	df 4d       	sbci	r29, 0xDF	; 223
    1490:	e8 81       	ld	r30, Y
    1492:	f9 81       	ldd	r31, Y+1	; 0x01
    1494:	84 81       	ldd	r24, Z+4	; 0x04
    1496:	80 61       	ori	r24, 0x10	; 16
    1498:	84 83       	std	Z+4, r24	; 0x04
    149a:	93 c0       	rjmp	.+294    	; 0x15c2 <ir_receive+0x464>
    149c:	fe 01       	movw	r30, r28
    149e:	ee 0f       	add	r30, r30
    14a0:	ff 1f       	adc	r31, r31
    14a2:	e2 95       	swap	r30
    14a4:	f2 95       	swap	r31
    14a6:	f0 7f       	andi	r31, 0xF0	; 240
    14a8:	fe 27       	eor	r31, r30
    14aa:	e0 7f       	andi	r30, 0xF0	; 240
    14ac:	fe 27       	eor	r31, r30
    14ae:	e6 59       	subi	r30, 0x96	; 150
    14b0:	f4 4d       	sbci	r31, 0xD4	; 212
    14b2:	80 8d       	ldd	r24, Z+24	; 0x18
    14b4:	91 8d       	ldd	r25, Z+25	; 0x19
    14b6:	89 2b       	or	r24, r25
    14b8:	a9 f1       	breq	.+106    	; 0x1524 <ir_receive+0x3c6>
    14ba:	fe 01       	movw	r30, r28
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	e2 95       	swap	r30
    14c2:	f2 95       	swap	r31
    14c4:	f0 7f       	andi	r31, 0xF0	; 240
    14c6:	fe 27       	eor	r31, r30
    14c8:	e0 7f       	andi	r30, 0xF0	; 240
    14ca:	fe 27       	eor	r31, r30
    14cc:	e6 59       	subi	r30, 0x96	; 150
    14ce:	f4 4d       	sbci	r31, 0xD4	; 212
    14d0:	20 8d       	ldd	r18, Z+24	; 0x18
    14d2:	31 8d       	ldd	r19, Z+25	; 0x19
    14d4:	80 91 d4 29 	lds	r24, 0x29D4
    14d8:	90 91 d5 29 	lds	r25, 0x29D5
    14dc:	28 17       	cp	r18, r24
    14de:	39 07       	cpc	r19, r25
    14e0:	09 f1       	breq	.+66     	; 0x1524 <ir_receive+0x3c6>
    14e2:	fe 01       	movw	r30, r28
    14e4:	ee 0f       	add	r30, r30
    14e6:	ff 1f       	adc	r31, r31
    14e8:	e2 95       	swap	r30
    14ea:	f2 95       	swap	r31
    14ec:	f0 7f       	andi	r31, 0xF0	; 240
    14ee:	fe 27       	eor	r31, r30
    14f0:	e0 7f       	andi	r30, 0xF0	; 240
    14f2:	fe 27       	eor	r31, r30
    14f4:	e6 59       	subi	r30, 0x96	; 150
    14f6:	f4 4d       	sbci	r31, 0xD4	; 212
    14f8:	14 8a       	std	Z+20, r1	; 0x14
    14fa:	15 8a       	std	Z+21, r1	; 0x15
    14fc:	16 8a       	std	Z+22, r1	; 0x16
    14fe:	17 8a       	std	Z+23, r1	; 0x17
    1500:	10 8e       	std	Z+24, r1	; 0x18
    1502:	11 8e       	std	Z+25, r1	; 0x19
    1504:	12 8e       	std	Z+26, r1	; 0x1a
    1506:	13 8e       	std	Z+27, r1	; 0x1b
    1508:	14 8e       	std	Z+28, r1	; 0x1c
    150a:	15 8e       	std	Z+29, r1	; 0x1d
    150c:	16 8e       	std	Z+30, r1	; 0x1e
    150e:	17 8e       	std	Z+31, r1	; 0x1f
    1510:	cc 0f       	add	r28, r28
    1512:	dd 1f       	adc	r29, r29
    1514:	ca 5f       	subi	r28, 0xFA	; 250
    1516:	df 4d       	sbci	r29, 0xDF	; 223
    1518:	e8 81       	ld	r30, Y
    151a:	f9 81       	ldd	r31, Y+1	; 0x01
    151c:	84 81       	ldd	r24, Z+4	; 0x04
    151e:	80 61       	ori	r24, 0x10	; 16
    1520:	84 83       	std	Z+4, r24	; 0x04
    1522:	4f c0       	rjmp	.+158    	; 0x15c2 <ir_receive+0x464>
    1524:	fe 01       	movw	r30, r28
    1526:	ee 0f       	add	r30, r30
    1528:	ff 1f       	adc	r31, r31
    152a:	e2 95       	swap	r30
    152c:	f2 95       	swap	r31
    152e:	f0 7f       	andi	r31, 0xF0	; 240
    1530:	fe 27       	eor	r31, r30
    1532:	e0 7f       	andi	r30, 0xF0	; 240
    1534:	fe 27       	eor	r31, r30
    1536:	e6 59       	subi	r30, 0x96	; 150
    1538:	f4 4d       	sbci	r31, 0xD4	; 212
    153a:	26 89       	ldd	r18, Z+22	; 0x16
    153c:	37 89       	ldd	r19, Z+23	; 0x17
    153e:	80 91 d4 29 	lds	r24, 0x29D4
    1542:	90 91 d5 29 	lds	r25, 0x29D5
    1546:	28 17       	cp	r18, r24
    1548:	39 07       	cpc	r19, r25
    154a:	09 f5       	brne	.+66     	; 0x158e <ir_receive+0x430>
    154c:	fe 01       	movw	r30, r28
    154e:	ee 0f       	add	r30, r30
    1550:	ff 1f       	adc	r31, r31
    1552:	e2 95       	swap	r30
    1554:	f2 95       	swap	r31
    1556:	f0 7f       	andi	r31, 0xF0	; 240
    1558:	fe 27       	eor	r31, r30
    155a:	e0 7f       	andi	r30, 0xF0	; 240
    155c:	fe 27       	eor	r31, r30
    155e:	e6 59       	subi	r30, 0x96	; 150
    1560:	f4 4d       	sbci	r31, 0xD4	; 212
    1562:	14 8a       	std	Z+20, r1	; 0x14
    1564:	15 8a       	std	Z+21, r1	; 0x15
    1566:	16 8a       	std	Z+22, r1	; 0x16
    1568:	17 8a       	std	Z+23, r1	; 0x17
    156a:	10 8e       	std	Z+24, r1	; 0x18
    156c:	11 8e       	std	Z+25, r1	; 0x19
    156e:	12 8e       	std	Z+26, r1	; 0x1a
    1570:	13 8e       	std	Z+27, r1	; 0x1b
    1572:	14 8e       	std	Z+28, r1	; 0x1c
    1574:	15 8e       	std	Z+29, r1	; 0x1d
    1576:	16 8e       	std	Z+30, r1	; 0x1e
    1578:	17 8e       	std	Z+31, r1	; 0x1f
    157a:	cc 0f       	add	r28, r28
    157c:	dd 1f       	adc	r29, r29
    157e:	ca 5f       	subi	r28, 0xFA	; 250
    1580:	df 4d       	sbci	r29, 0xDF	; 223
    1582:	e8 81       	ld	r30, Y
    1584:	f9 81       	ldd	r31, Y+1	; 0x01
    1586:	84 81       	ldd	r24, Z+4	; 0x04
    1588:	80 61       	ori	r24, 0x10	; 16
    158a:	84 83       	std	Z+4, r24	; 0x04
    158c:	1a c0       	rjmp	.+52     	; 0x15c2 <ir_receive+0x464>
    158e:	fe 01       	movw	r30, r28
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	e2 95       	swap	r30
    1596:	f2 95       	swap	r31
    1598:	f0 7f       	andi	r31, 0xF0	; 240
    159a:	fe 27       	eor	r31, r30
    159c:	e0 7f       	andi	r30, 0xF0	; 240
    159e:	fe 27       	eor	r31, r30
    15a0:	e6 59       	subi	r30, 0x96	; 150
    15a2:	f4 4d       	sbci	r31, 0xD4	; 212
    15a4:	87 8d       	ldd	r24, Z+31	; 0x1f
    15a6:	82 60       	ori	r24, 0x02	; 2
    15a8:	87 8f       	std	Z+31, r24	; 0x1f
    15aa:	87 8d       	ldd	r24, Z+31	; 0x1f
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	87 8f       	std	Z+31, r24	; 0x1f
    15b0:	cc 0f       	add	r28, r28
    15b2:	dd 1f       	adc	r29, r29
    15b4:	ca 5f       	subi	r28, 0xFA	; 250
    15b6:	df 4d       	sbci	r29, 0xDF	; 223
    15b8:	e8 81       	ld	r30, Y
    15ba:	f9 81       	ldd	r31, Y+1	; 0x01
    15bc:	84 81       	ldd	r24, Z+4	; 0x04
    15be:	8f 7e       	andi	r24, 0xEF	; 239
    15c0:	84 83       	std	Z+4, r24	; 0x04
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	df 90       	pop	r13
    15ce:	cf 90       	pop	r12
    15d0:	bf 90       	pop	r11
    15d2:	af 90       	pop	r10
    15d4:	08 95       	ret

000015d6 <ir_transmit>:
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	fc 01       	movw	r30, r24
    15da:	ee 0f       	add	r30, r30
    15dc:	ff 1f       	adc	r31, r31
    15de:	e2 95       	swap	r30
    15e0:	f2 95       	swap	r31
    15e2:	f0 7f       	andi	r31, 0xF0	; 240
    15e4:	fe 27       	eor	r31, r30
    15e6:	e0 7f       	andi	r30, 0xF0	; 240
    15e8:	fe 27       	eor	r31, r30
    15ea:	e6 59       	subi	r30, 0x96	; 150
    15ec:	f4 4d       	sbci	r31, 0xD4	; 212
    15ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    15f0:	33 8d       	ldd	r19, Z+27	; 0x1b
    15f2:	27 30       	cpi	r18, 0x07	; 7
    15f4:	31 05       	cpc	r19, r1
    15f6:	08 f0       	brcs	.+2      	; 0x15fa <ir_transmit+0x24>
    15f8:	7c c0       	rjmp	.+248    	; 0x16f2 <ir_transmit+0x11c>
    15fa:	f9 01       	movw	r30, r18
    15fc:	e4 5f       	subi	r30, 0xF4	; 244
    15fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1600:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <__tablejump2__>
    1604:	fc 01       	movw	r30, r24
    1606:	ee 0f       	add	r30, r30
    1608:	ff 1f       	adc	r31, r31
    160a:	e2 95       	swap	r30
    160c:	f2 95       	swap	r31
    160e:	f0 7f       	andi	r31, 0xF0	; 240
    1610:	fe 27       	eor	r31, r30
    1612:	e0 7f       	andi	r30, 0xF0	; 240
    1614:	fe 27       	eor	r31, r30
    1616:	e6 59       	subi	r30, 0x96	; 150
    1618:	f4 4d       	sbci	r31, 0xD4	; 212
    161a:	26 8d       	ldd	r18, Z+30	; 0x1e
    161c:	20 93 63 2c 	sts	0x2C63, r18
    1620:	27 8d       	ldd	r18, Z+31	; 0x1f
    1622:	23 ff       	sbrs	r18, 3
    1624:	7a c0       	rjmp	.+244    	; 0x171a <ir_transmit+0x144>
    1626:	20 91 63 2c 	lds	r18, 0x2C63
    162a:	20 68       	ori	r18, 0x80	; 128
    162c:	20 93 63 2c 	sts	0x2C63, r18
    1630:	74 c0       	rjmp	.+232    	; 0x171a <ir_transmit+0x144>
    1632:	fc 01       	movw	r30, r24
    1634:	ee 0f       	add	r30, r30
    1636:	ff 1f       	adc	r31, r31
    1638:	e2 95       	swap	r30
    163a:	f2 95       	swap	r31
    163c:	f0 7f       	andi	r31, 0xF0	; 240
    163e:	fe 27       	eor	r31, r30
    1640:	e0 7f       	andi	r30, 0xF0	; 240
    1642:	fe 27       	eor	r31, r30
    1644:	e6 59       	subi	r30, 0x96	; 150
    1646:	f4 4d       	sbci	r31, 0xD4	; 212
    1648:	24 89       	ldd	r18, Z+20	; 0x14
    164a:	35 89       	ldd	r19, Z+21	; 0x15
    164c:	20 93 63 2c 	sts	0x2C63, r18
    1650:	64 c0       	rjmp	.+200    	; 0x171a <ir_transmit+0x144>
    1652:	fc 01       	movw	r30, r24
    1654:	ee 0f       	add	r30, r30
    1656:	ff 1f       	adc	r31, r31
    1658:	e2 95       	swap	r30
    165a:	f2 95       	swap	r31
    165c:	f0 7f       	andi	r31, 0xF0	; 240
    165e:	fe 27       	eor	r31, r30
    1660:	e0 7f       	andi	r30, 0xF0	; 240
    1662:	fe 27       	eor	r31, r30
    1664:	e6 59       	subi	r30, 0x96	; 150
    1666:	f4 4d       	sbci	r31, 0xD4	; 212
    1668:	24 89       	ldd	r18, Z+20	; 0x14
    166a:	35 89       	ldd	r19, Z+21	; 0x15
    166c:	30 93 63 2c 	sts	0x2C63, r19
    1670:	54 c0       	rjmp	.+168    	; 0x171a <ir_transmit+0x144>
    1672:	fc 01       	movw	r30, r24
    1674:	ee 0f       	add	r30, r30
    1676:	ff 1f       	adc	r31, r31
    1678:	e2 95       	swap	r30
    167a:	f2 95       	swap	r31
    167c:	f0 7f       	andi	r31, 0xF0	; 240
    167e:	fe 27       	eor	r31, r30
    1680:	e0 7f       	andi	r30, 0xF0	; 240
    1682:	fe 27       	eor	r31, r30
    1684:	e6 59       	subi	r30, 0x96	; 150
    1686:	f4 4d       	sbci	r31, 0xD4	; 212
    1688:	26 89       	ldd	r18, Z+22	; 0x16
    168a:	37 89       	ldd	r19, Z+23	; 0x17
    168c:	20 93 63 2c 	sts	0x2C63, r18
    1690:	44 c0       	rjmp	.+136    	; 0x171a <ir_transmit+0x144>
    1692:	fc 01       	movw	r30, r24
    1694:	ee 0f       	add	r30, r30
    1696:	ff 1f       	adc	r31, r31
    1698:	e2 95       	swap	r30
    169a:	f2 95       	swap	r31
    169c:	f0 7f       	andi	r31, 0xF0	; 240
    169e:	fe 27       	eor	r31, r30
    16a0:	e0 7f       	andi	r30, 0xF0	; 240
    16a2:	fe 27       	eor	r31, r30
    16a4:	e6 59       	subi	r30, 0x96	; 150
    16a6:	f4 4d       	sbci	r31, 0xD4	; 212
    16a8:	26 89       	ldd	r18, Z+22	; 0x16
    16aa:	37 89       	ldd	r19, Z+23	; 0x17
    16ac:	30 93 63 2c 	sts	0x2C63, r19
    16b0:	34 c0       	rjmp	.+104    	; 0x171a <ir_transmit+0x144>
    16b2:	fc 01       	movw	r30, r24
    16b4:	ee 0f       	add	r30, r30
    16b6:	ff 1f       	adc	r31, r31
    16b8:	e2 95       	swap	r30
    16ba:	f2 95       	swap	r31
    16bc:	f0 7f       	andi	r31, 0xF0	; 240
    16be:	fe 27       	eor	r31, r30
    16c0:	e0 7f       	andi	r30, 0xF0	; 240
    16c2:	fe 27       	eor	r31, r30
    16c4:	e6 59       	subi	r30, 0x96	; 150
    16c6:	f4 4d       	sbci	r31, 0xD4	; 212
    16c8:	20 8d       	ldd	r18, Z+24	; 0x18
    16ca:	31 8d       	ldd	r19, Z+25	; 0x19
    16cc:	20 93 63 2c 	sts	0x2C63, r18
    16d0:	24 c0       	rjmp	.+72     	; 0x171a <ir_transmit+0x144>
    16d2:	fc 01       	movw	r30, r24
    16d4:	ee 0f       	add	r30, r30
    16d6:	ff 1f       	adc	r31, r31
    16d8:	e2 95       	swap	r30
    16da:	f2 95       	swap	r31
    16dc:	f0 7f       	andi	r31, 0xF0	; 240
    16de:	fe 27       	eor	r31, r30
    16e0:	e0 7f       	andi	r30, 0xF0	; 240
    16e2:	fe 27       	eor	r31, r30
    16e4:	e6 59       	subi	r30, 0x96	; 150
    16e6:	f4 4d       	sbci	r31, 0xD4	; 212
    16e8:	20 8d       	ldd	r18, Z+24	; 0x18
    16ea:	31 8d       	ldd	r19, Z+25	; 0x19
    16ec:	30 93 63 2c 	sts	0x2C63, r19
    16f0:	14 c0       	rjmp	.+40     	; 0x171a <ir_transmit+0x144>
    16f2:	fc 01       	movw	r30, r24
    16f4:	ee 0f       	add	r30, r30
    16f6:	ff 1f       	adc	r31, r31
    16f8:	e2 95       	swap	r30
    16fa:	f2 95       	swap	r31
    16fc:	f0 7f       	andi	r31, 0xF0	; 240
    16fe:	fe 27       	eor	r31, r30
    1700:	e0 7f       	andi	r30, 0xF0	; 240
    1702:	fe 27       	eor	r31, r30
    1704:	e6 59       	subi	r30, 0x96	; 150
    1706:	f4 4d       	sbci	r31, 0xD4	; 212
    1708:	22 8d       	ldd	r18, Z+26	; 0x1a
    170a:	33 8d       	ldd	r19, Z+27	; 0x1b
    170c:	27 50       	subi	r18, 0x07	; 7
    170e:	31 09       	sbc	r19, r1
    1710:	e2 0f       	add	r30, r18
    1712:	f3 1f       	adc	r31, r19
    1714:	24 81       	ldd	r18, Z+4	; 0x04
    1716:	20 93 63 2c 	sts	0x2C63, r18
    171a:	fc 01       	movw	r30, r24
    171c:	ee 0f       	add	r30, r30
    171e:	ff 1f       	adc	r31, r31
    1720:	ea 5f       	subi	r30, 0xFA	; 250
    1722:	ff 4d       	sbci	r31, 0xDF	; 223
    1724:	01 90       	ld	r0, Z+
    1726:	f0 81       	ld	r31, Z
    1728:	e0 2d       	mov	r30, r0
    172a:	20 91 63 2c 	lds	r18, 0x2C63
    172e:	20 83       	st	Z, r18
    1730:	fc 01       	movw	r30, r24
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	e2 95       	swap	r30
    1738:	f2 95       	swap	r31
    173a:	f0 7f       	andi	r31, 0xF0	; 240
    173c:	fe 27       	eor	r31, r30
    173e:	e0 7f       	andi	r30, 0xF0	; 240
    1740:	fe 27       	eor	r31, r30
    1742:	e6 59       	subi	r30, 0x96	; 150
    1744:	f4 4d       	sbci	r31, 0xD4	; 212
    1746:	22 8d       	ldd	r18, Z+26	; 0x1a
    1748:	33 8d       	ldd	r19, Z+27	; 0x1b
    174a:	2f 5f       	subi	r18, 0xFF	; 255
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	22 8f       	std	Z+26, r18	; 0x1a
    1750:	33 8f       	std	Z+27, r19	; 0x1b
    1752:	42 8d       	ldd	r20, Z+26	; 0x1a
    1754:	53 8d       	ldd	r21, Z+27	; 0x1b
    1756:	26 8d       	ldd	r18, Z+30	; 0x1e
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	29 5f       	subi	r18, 0xF9	; 249
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	42 17       	cp	r20, r18
    1760:	53 07       	cpc	r21, r19
    1762:	50 f1       	brcs	.+84     	; 0x17b8 <ir_transmit+0x1e2>
    1764:	fc 01       	movw	r30, r24
    1766:	ee 0f       	add	r30, r30
    1768:	ff 1f       	adc	r31, r31
    176a:	e2 95       	swap	r30
    176c:	f2 95       	swap	r31
    176e:	f0 7f       	andi	r31, 0xF0	; 240
    1770:	fe 27       	eor	r31, r30
    1772:	e0 7f       	andi	r30, 0xF0	; 240
    1774:	fe 27       	eor	r31, r30
    1776:	e6 59       	subi	r30, 0x96	; 150
    1778:	f4 4d       	sbci	r31, 0xD4	; 212
    177a:	14 8a       	std	Z+20, r1	; 0x14
    177c:	15 8a       	std	Z+21, r1	; 0x15
    177e:	16 8a       	std	Z+22, r1	; 0x16
    1780:	17 8a       	std	Z+23, r1	; 0x17
    1782:	10 8e       	std	Z+24, r1	; 0x18
    1784:	11 8e       	std	Z+25, r1	; 0x19
    1786:	12 8e       	std	Z+26, r1	; 0x1a
    1788:	13 8e       	std	Z+27, r1	; 0x1b
    178a:	14 8e       	std	Z+28, r1	; 0x1c
    178c:	15 8e       	std	Z+29, r1	; 0x1d
    178e:	16 8e       	std	Z+30, r1	; 0x1e
    1790:	17 8e       	std	Z+31, r1	; 0x1f
    1792:	fc 01       	movw	r30, r24
    1794:	ee 0f       	add	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	ea 5f       	subi	r30, 0xFA	; 250
    179a:	ff 4d       	sbci	r31, 0xDF	; 223
    179c:	a0 81       	ld	r26, Z
    179e:	b1 81       	ldd	r27, Z+1	; 0x01
    17a0:	14 96       	adiw	r26, 0x04	; 4
    17a2:	8c 91       	ld	r24, X
    17a4:	14 97       	sbiw	r26, 0x04	; 4
    17a6:	80 61       	ori	r24, 0x10	; 16
    17a8:	14 96       	adiw	r26, 0x04	; 4
    17aa:	8c 93       	st	X, r24
    17ac:	01 90       	ld	r0, Z+
    17ae:	f0 81       	ld	r31, Z
    17b0:	e0 2d       	mov	r30, r0
    17b2:	83 81       	ldd	r24, Z+3	; 0x03
    17b4:	8c 7f       	andi	r24, 0xFC	; 252
    17b6:	83 83       	std	Z+3, r24	; 0x03
    17b8:	08 95       	ret

000017ba <ir_transmit_complete>:
    17ba:	e0 e0       	ldi	r30, 0x00	; 0
    17bc:	fb e0       	ldi	r31, 0x0B	; 11
    17be:	31 81       	ldd	r19, Z+1	; 0x01
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	dc 01       	movw	r26, r24
    17c4:	a0 50       	subi	r26, 0x00	; 0
    17c6:	b0 4e       	sbci	r27, 0xE0	; 224
    17c8:	2c 91       	ld	r18, X
    17ca:	20 95       	com	r18
    17cc:	23 23       	and	r18, r19
    17ce:	21 83       	std	Z+1, r18	; 0x01
    17d0:	fc 01       	movw	r30, r24
    17d2:	ee 0f       	add	r30, r30
    17d4:	ff 1f       	adc	r31, r31
    17d6:	e2 95       	swap	r30
    17d8:	f2 95       	swap	r31
    17da:	f0 7f       	andi	r31, 0xF0	; 240
    17dc:	fe 27       	eor	r31, r30
    17de:	e0 7f       	andi	r30, 0xF0	; 240
    17e0:	fe 27       	eor	r31, r30
    17e2:	e6 59       	subi	r30, 0x96	; 150
    17e4:	f4 4d       	sbci	r31, 0xD4	; 212
    17e6:	17 8e       	std	Z+31, r1	; 0x1f
    17e8:	16 8e       	std	Z+30, r1	; 0x1e
    17ea:	12 8e       	std	Z+26, r1	; 0x1a
    17ec:	13 8e       	std	Z+27, r1	; 0x1b
    17ee:	10 8e       	std	Z+24, r1	; 0x18
    17f0:	11 8e       	std	Z+25, r1	; 0x19
    17f2:	16 8a       	std	Z+22, r1	; 0x16
    17f4:	17 8a       	std	Z+23, r1	; 0x17
    17f6:	fc 01       	movw	r30, r24
    17f8:	ee 0f       	add	r30, r30
    17fa:	ff 1f       	adc	r31, r31
    17fc:	ea 5f       	subi	r30, 0xFA	; 250
    17fe:	ff 4d       	sbci	r31, 0xDF	; 223
    1800:	a0 81       	ld	r26, Z
    1802:	b1 81       	ldd	r27, Z+1	; 0x01
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	8c 91       	ld	r24, X
    1808:	11 97       	sbiw	r26, 0x01	; 1
    180a:	80 64       	ori	r24, 0x40	; 64
    180c:	11 96       	adiw	r26, 0x01	; 1
    180e:	8c 93       	st	X, r24
    1810:	01 90       	ld	r0, Z+
    1812:	f0 81       	ld	r31, Z
    1814:	e0 2d       	mov	r30, r0
    1816:	84 81       	ldd	r24, Z+4	; 0x04
    1818:	80 61       	ori	r24, 0x10	; 16
    181a:	84 83       	std	Z+4, r24	; 0x04
    181c:	08 95       	ret

0000181e <wait_for_ir>:
{
	uint8_t busy;
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
    181e:	60 e0       	ldi	r22, 0x00	; 0
		{
			if(dirs&(1<<dir))
    1820:	48 2f       	mov	r20, r24
    1822:	50 e0       	ldi	r21, 0x00	; 0
    1824:	26 2f       	mov	r18, r22
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	ca 01       	movw	r24, r20
    182a:	06 2e       	mov	r0, r22
    182c:	02 c0       	rjmp	.+4      	; 0x1832 <wait_for_ir+0x14>
    182e:	95 95       	asr	r25
    1830:	87 95       	ror	r24
    1832:	0a 94       	dec	r0
    1834:	e2 f7       	brpl	.-8      	; 0x182e <wait_for_ir+0x10>
    1836:	80 ff       	sbrs	r24, 0
    1838:	0e c0       	rjmp	.+28     	; 0x1856 <wait_for_ir+0x38>
			{
				if(ir_rxtx[dir].status & IR_STATUS_UNAVAILABLE_bm)
    183a:	f9 01       	movw	r30, r18
    183c:	ee 0f       	add	r30, r30
    183e:	ff 1f       	adc	r31, r31
    1840:	e2 95       	swap	r30
    1842:	f2 95       	swap	r31
    1844:	f0 7f       	andi	r31, 0xF0	; 240
    1846:	fe 27       	eor	r31, r30
    1848:	e0 7f       	andi	r30, 0xF0	; 240
    184a:	fe 27       	eor	r31, r30
    184c:	e6 59       	subi	r30, 0x96	; 150
    184e:	f4 4d       	sbci	r31, 0xD4	; 212
    1850:	87 8d       	ldd	r24, Z+31	; 0x1f
    1852:	83 70       	andi	r24, 0x03	; 3
    1854:	21 f4       	brne	.+8      	; 0x185e <wait_for_ir+0x40>
{
	uint8_t busy;
	do
	{
		busy=0;
		for(uint8_t dir=0; dir<6; dir++)
    1856:	6f 5f       	subi	r22, 0xFF	; 255
    1858:	66 30       	cpi	r22, 0x06	; 6
    185a:	20 f3       	brcs	.-56     	; 0x1824 <wait_for_ir+0x6>
    185c:	08 95       	ret
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	e1 cf       	rjmp	.-62     	; 0x1824 <wait_for_ir+0x6>

00001862 <ir_targeted_cmd>:
}
#endif


void ir_targeted_cmd(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    1862:	cf 92       	push	r12
    1864:	df 92       	push	r13
    1866:	ef 92       	push	r14
    1868:	ff 92       	push	r15
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	d8 2e       	mov	r13, r24
    1874:	7b 01       	movw	r14, r22
    1876:	c4 2e       	mov	r12, r20
    1878:	89 01       	movw	r16, r18

#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
    187a:	d1 df       	rcall	.-94     	; 0x181e <wait_for_ir>
    187c:	a6 e0       	ldi	r26, 0x06	; 6
    187e:	b0 e2       	ldi	r27, 0x20	; 32
    1880:	e0 e0       	ldi	r30, 0x00	; 0
    1882:	f0 e0       	ldi	r31, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1884:	2d 2d       	mov	r18, r13
    1886:	30 e0       	ldi	r19, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    1888:	91 e0       	ldi	r25, 0x01	; 1
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    188a:	e9 01       	movw	r28, r18
    188c:	0e 2e       	mov	r0, r30
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <ir_targeted_cmd+0x32>
    1890:	d5 95       	asr	r29
    1892:	c7 95       	ror	r28
    1894:	0a 94       	dec	r0
    1896:	e2 f7       	brpl	.-8      	; 0x1890 <ir_targeted_cmd+0x2e>
    1898:	c0 ff       	sbrs	r28, 0
    189a:	17 c0       	rjmp	.+46     	; 0x18ca <ir_targeted_cmd+0x68>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    189c:	cd 91       	ld	r28, X+
    189e:	dc 91       	ld	r29, X
    18a0:	11 97       	sbiw	r26, 0x01	; 1
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	8f 7e       	andi	r24, 0xEF	; 239
    18a6:	8c 83       	std	Y+4, r24	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    18a8:	ef 01       	movw	r28, r30
    18aa:	cc 0f       	add	r28, r28
    18ac:	dd 1f       	adc	r29, r29
    18ae:	c2 95       	swap	r28
    18b0:	d2 95       	swap	r29
    18b2:	d0 7f       	andi	r29, 0xF0	; 240
    18b4:	dc 27       	eor	r29, r28
    18b6:	c0 7f       	andi	r28, 0xF0	; 240
    18b8:	dc 27       	eor	r29, r28
    18ba:	c6 59       	subi	r28, 0x96	; 150
    18bc:	d4 4d       	sbci	r29, 0xD4	; 212
    18be:	9f 8f       	std	Y+31, r25	; 0x1f
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    18c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    18c2:	88 60       	ori	r24, 0x08	; 8
    18c4:	8f 8f       	std	Y+31, r24	; 0x1f
			ir_rxtx[dir].target_ID=target;
    18c6:	08 8f       	std	Y+24, r16	; 0x18
    18c8:	19 8f       	std	Y+25, r17	; 0x19
    18ca:	31 96       	adiw	r30, 0x01	; 1
    18cc:	12 96       	adiw	r26, 0x02	; 2
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    18ce:	e6 30       	cpi	r30, 0x06	; 6
    18d0:	f1 05       	cpc	r31, r1
    18d2:	d9 f6       	brne	.-74     	; 0x188a <ir_targeted_cmd+0x28>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    18d4:	4c 2d       	mov	r20, r12
    18d6:	b7 01       	movw	r22, r14
    18d8:	8d 2d       	mov	r24, r13
    18da:	4a db       	rcall	.-2412   	; 0xf70 <send_msg>


void ir_targeted_cmd(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
	all_ir_sends(dirs, data, data_length, target, 1);
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	08 95       	ret

000018ee <ir_cmd>:

void ir_cmd(uint8_t dirs, char *data, uint16_t data_length)
{	
    18ee:	0f 93       	push	r16
    18f0:	1f 93       	push	r17
    18f2:	cf 93       	push	r28
    18f4:	df 93       	push	r29
    18f6:	18 2f       	mov	r17, r24
    18f8:	eb 01       	movw	r28, r22
    18fa:	04 2f       	mov	r16, r20

#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
    18fc:	90 df       	rcall	.-224    	; 0x181e <wait_for_ir>
    18fe:	e6 e0       	ldi	r30, 0x06	; 6
    1900:	f0 e2       	ldi	r31, 0x20	; 32
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1906:	61 2f       	mov	r22, r17
    1908:	70 e0       	ldi	r23, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    190a:	91 e0       	ldi	r25, 0x01	; 1
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    190c:	db 01       	movw	r26, r22
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <ir_cmd+0x28>
    1912:	b5 95       	asr	r27
    1914:	a7 95       	ror	r26
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <ir_cmd+0x24>
    191a:	a0 ff       	sbrs	r26, 0
    191c:	21 c0       	rjmp	.+66     	; 0x1960 <ir_cmd+0x72>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    191e:	a0 81       	ld	r26, Z
    1920:	b1 81       	ldd	r27, Z+1	; 0x01
    1922:	14 96       	adiw	r26, 0x04	; 4
    1924:	8c 91       	ld	r24, X
    1926:	14 97       	sbiw	r26, 0x04	; 4
    1928:	8f 7e       	andi	r24, 0xEF	; 239
    192a:	14 96       	adiw	r26, 0x04	; 4
    192c:	8c 93       	st	X, r24
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    192e:	d9 01       	movw	r26, r18
    1930:	aa 0f       	add	r26, r26
    1932:	bb 1f       	adc	r27, r27
    1934:	a2 95       	swap	r26
    1936:	b2 95       	swap	r27
    1938:	b0 7f       	andi	r27, 0xF0	; 240
    193a:	ba 27       	eor	r27, r26
    193c:	a0 7f       	andi	r26, 0xF0	; 240
    193e:	ba 27       	eor	r27, r26
    1940:	a6 59       	subi	r26, 0x96	; 150
    1942:	b4 4d       	sbci	r27, 0xD4	; 212
    1944:	5f 96       	adiw	r26, 0x1f	; 31
    1946:	9c 93       	st	X, r25
    1948:	5f 97       	sbiw	r26, 0x1f	; 31
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
    194a:	5f 96       	adiw	r26, 0x1f	; 31
    194c:	8c 91       	ld	r24, X
    194e:	5f 97       	sbiw	r26, 0x1f	; 31
    1950:	88 60       	ori	r24, 0x08	; 8
    1952:	5f 96       	adiw	r26, 0x1f	; 31
    1954:	8c 93       	st	X, r24
    1956:	5f 97       	sbiw	r26, 0x1f	; 31
			ir_rxtx[dir].target_ID=target;
    1958:	58 96       	adiw	r26, 0x18	; 24
    195a:	1d 92       	st	X+, r1
    195c:	1c 92       	st	X, r1
    195e:	59 97       	sbiw	r26, 0x19	; 25
    1960:	2f 5f       	subi	r18, 0xFF	; 255
    1962:	3f 4f       	sbci	r19, 0xFF	; 255
    1964:	32 96       	adiw	r30, 0x02	; 2
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    1966:	26 30       	cpi	r18, 0x06	; 6
    1968:	31 05       	cpc	r19, r1
    196a:	81 f6       	brne	.-96     	; 0x190c <ir_cmd+0x1e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    196c:	40 2f       	mov	r20, r16
    196e:	be 01       	movw	r22, r28
    1970:	81 2f       	mov	r24, r17
    1972:	fe da       	rcall	.-2564   	; 0xf70 <send_msg>
}

void ir_cmd(uint8_t dirs, char *data, uint16_t data_length)
{	
	all_ir_sends(dirs, data, data_length, 0, 1);
}
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	1f 91       	pop	r17
    197a:	0f 91       	pop	r16
    197c:	08 95       	ret

0000197e <ir_targeted_send>:

void ir_targeted_send(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
    197e:	cf 92       	push	r12
    1980:	df 92       	push	r13
    1982:	ef 92       	push	r14
    1984:	ff 92       	push	r15
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	cf 93       	push	r28
    198c:	df 93       	push	r29
    198e:	d8 2e       	mov	r13, r24
    1990:	7b 01       	movw	r14, r22
    1992:	c4 2e       	mov	r12, r20
    1994:	89 01       	movw	r16, r18

#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
    1996:	43 df       	rcall	.-378    	; 0x181e <wait_for_ir>
    1998:	a6 e0       	ldi	r26, 0x06	; 6
    199a:	b0 e2       	ldi	r27, 0x20	; 32
    199c:	e0 e0       	ldi	r30, 0x00	; 0
    199e:	f0 e0       	ldi	r31, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    19a0:	2d 2d       	mov	r18, r13
    19a2:	30 e0       	ldi	r19, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    19a4:	91 e0       	ldi	r25, 0x01	; 1
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    19a6:	e9 01       	movw	r28, r18
    19a8:	0e 2e       	mov	r0, r30
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <ir_targeted_send+0x32>
    19ac:	d5 95       	asr	r29
    19ae:	c7 95       	ror	r28
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <ir_targeted_send+0x2e>
    19b4:	c0 ff       	sbrs	r28, 0
    19b6:	14 c0       	rjmp	.+40     	; 0x19e0 <ir_targeted_send+0x62>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    19b8:	cd 91       	ld	r28, X+
    19ba:	dc 91       	ld	r29, X
    19bc:	11 97       	sbiw	r26, 0x01	; 1
    19be:	8c 81       	ldd	r24, Y+4	; 0x04
    19c0:	8f 7e       	andi	r24, 0xEF	; 239
    19c2:	8c 83       	std	Y+4, r24	; 0x04
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    19c4:	ef 01       	movw	r28, r30
    19c6:	cc 0f       	add	r28, r28
    19c8:	dd 1f       	adc	r29, r29
    19ca:	c2 95       	swap	r28
    19cc:	d2 95       	swap	r29
    19ce:	d0 7f       	andi	r29, 0xF0	; 240
    19d0:	dc 27       	eor	r29, r28
    19d2:	c0 7f       	andi	r28, 0xF0	; 240
    19d4:	dc 27       	eor	r29, r28
    19d6:	c6 59       	subi	r28, 0x96	; 150
    19d8:	d4 4d       	sbci	r29, 0xD4	; 212
    19da:	9f 8f       	std	Y+31, r25	; 0x1f
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    19dc:	08 8f       	std	Y+24, r16	; 0x18
    19de:	19 8f       	std	Y+25, r17	; 0x19
    19e0:	31 96       	adiw	r30, 0x01	; 1
    19e2:	12 96       	adiw	r26, 0x02	; 2
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    19e4:	e6 30       	cpi	r30, 0x06	; 6
    19e6:	f1 05       	cpc	r31, r1
    19e8:	f1 f6       	brne	.-68     	; 0x19a6 <ir_targeted_send+0x28>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    19ea:	4c 2d       	mov	r20, r12
    19ec:	b7 01       	movw	r22, r14
    19ee:	8d 2d       	mov	r24, r13
    19f0:	bf da       	rcall	.-2690   	; 0xf70 <send_msg>
}

void ir_targeted_send(uint8_t dirs, char *data, uint16_t data_length, uint16_t target)
{
	all_ir_sends(dirs, data, data_length, target, 0);
}
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	1f 91       	pop	r17
    19f8:	0f 91       	pop	r16
    19fa:	ff 90       	pop	r15
    19fc:	ef 90       	pop	r14
    19fe:	df 90       	pop	r13
    1a00:	cf 90       	pop	r12
    1a02:	08 95       	ret

00001a04 <ir_send>:

void ir_send(uint8_t dirs, char *data, uint8_t data_length)
{
    1a04:	0f 93       	push	r16
    1a06:	1f 93       	push	r17
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    1a0c:	18 2f       	mov	r17, r24
    1a0e:	eb 01       	movw	r28, r22
    1a10:	04 2f       	mov	r16, r20

#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
    1a12:	05 df       	rcall	.-502    	; 0x181e <wait_for_ir>
    1a14:	e6 e0       	ldi	r30, 0x06	; 6
    1a16:	f0 e2       	ldi	r31, 0x20	; 32
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1a1c:	61 2f       	mov	r22, r17
    1a1e:	70 e0       	ldi	r23, 0x00	; 0
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    1a20:	91 e0       	ldi	r25, 0x01	; 1
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
	{
		if(dirs_to_go&(1<<dir))
    1a22:	db 01       	movw	r26, r22
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <ir_send+0x28>
    1a28:	b5 95       	asr	r27
    1a2a:	a7 95       	ror	r26
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <ir_send+0x24>
    1a30:	a0 ff       	sbrs	r26, 0
    1a32:	1a c0       	rjmp	.+52     	; 0x1a68 <ir_send+0x64>
		{
			channel[dir]->CTRLB &= ~USART_RXEN_bm;
    1a34:	a0 81       	ld	r26, Z
    1a36:	b1 81       	ldd	r27, Z+1	; 0x01
    1a38:	14 96       	adiw	r26, 0x04	; 4
    1a3a:	8c 91       	ld	r24, X
    1a3c:	14 97       	sbiw	r26, 0x04	; 4
    1a3e:	8f 7e       	andi	r24, 0xEF	; 239
    1a40:	14 96       	adiw	r26, 0x04	; 4
    1a42:	8c 93       	st	X, r24
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
    1a44:	d9 01       	movw	r26, r18
    1a46:	aa 0f       	add	r26, r26
    1a48:	bb 1f       	adc	r27, r27
    1a4a:	a2 95       	swap	r26
    1a4c:	b2 95       	swap	r27
    1a4e:	b0 7f       	andi	r27, 0xF0	; 240
    1a50:	ba 27       	eor	r27, r26
    1a52:	a0 7f       	andi	r26, 0xF0	; 240
    1a54:	ba 27       	eor	r27, r26
    1a56:	a6 59       	subi	r26, 0x96	; 150
    1a58:	b4 4d       	sbci	r27, 0xD4	; 212
    1a5a:	5f 96       	adiw	r26, 0x1f	; 31
    1a5c:	9c 93       	st	X, r25
    1a5e:	5f 97       	sbiw	r26, 0x1f	; 31
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
    1a60:	58 96       	adiw	r26, 0x18	; 24
    1a62:	1d 92       	st	X+, r1
    1a64:	1c 92       	st	X, r1
    1a66:	59 97       	sbiw	r26, 0x19	; 25
    1a68:	2f 5f       	subi	r18, 0xFF	; 255
    1a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6c:	32 96       	adiw	r30, 0x02	; 2
#ifndef IR_IS_SPECIAL
//SIMPLEST POSSIBLE ALL_IR_SENDS.
inline void all_ir_sends(uint8_t dirs_to_go, char* data, uint8_t data_length, uint16_t target, uint8_t cmd_flag)
{
	wait_for_ir(dirs_to_go);
	for(uint8_t dir=0;dir<6;dir++)
    1a6e:	26 30       	cpi	r18, 0x06	; 6
    1a70:	31 05       	cpc	r19, r1
    1a72:	b9 f6       	brne	.-82     	; 0x1a22 <ir_send+0x1e>
			ir_rxtx[dir].status = IR_STATUS_BUSY_bm;	
			if(cmd_flag) ir_rxtx[dir].status |= IR_STATUS_COMMAND_bm;
			ir_rxtx[dir].target_ID=target;
		}
	}
	send_msg(dirs_to_go, data, data_length);
    1a74:	40 2f       	mov	r20, r16
    1a76:	be 01       	movw	r22, r28
    1a78:	81 2f       	mov	r24, r17
    1a7a:	7a da       	rcall	.-2828   	; 0xf70 <send_msg>
}

void ir_send(uint8_t dirs, char *data, uint8_t data_length)
{
	all_ir_sends(dirs, data, data_length, 0, 0);
}
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	08 95       	ret

00001a86 <__vector_25>:
		}
	} while (busy);
}

// ISRs for IR channel 0
ISR( USARTC0_RXC_vect ) { ir_receive(0); }
    1a86:	1f 92       	push	r1
    1a88:	0f 92       	push	r0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	0f 92       	push	r0
    1a8e:	11 24       	eor	r1, r1
    1a90:	0b b6       	in	r0, 0x3b	; 59
    1a92:	0f 92       	push	r0
    1a94:	2f 93       	push	r18
    1a96:	3f 93       	push	r19
    1a98:	4f 93       	push	r20
    1a9a:	5f 93       	push	r21
    1a9c:	6f 93       	push	r22
    1a9e:	7f 93       	push	r23
    1aa0:	8f 93       	push	r24
    1aa2:	9f 93       	push	r25
    1aa4:	af 93       	push	r26
    1aa6:	bf 93       	push	r27
    1aa8:	ef 93       	push	r30
    1aaa:	ff 93       	push	r31
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	57 db       	rcall	.-2386   	; 0x115e <ir_receive>
    1ab0:	ff 91       	pop	r31
    1ab2:	ef 91       	pop	r30
    1ab4:	bf 91       	pop	r27
    1ab6:	af 91       	pop	r26
    1ab8:	9f 91       	pop	r25
    1aba:	8f 91       	pop	r24
    1abc:	7f 91       	pop	r23
    1abe:	6f 91       	pop	r22
    1ac0:	5f 91       	pop	r21
    1ac2:	4f 91       	pop	r20
    1ac4:	3f 91       	pop	r19
    1ac6:	2f 91       	pop	r18
    1ac8:	0f 90       	pop	r0
    1aca:	0b be       	out	0x3b, r0	; 59
    1acc:	0f 90       	pop	r0
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	0f 90       	pop	r0
    1ad2:	1f 90       	pop	r1
    1ad4:	18 95       	reti

00001ad6 <__vector_27>:
ISR( USARTC0_TXC_vect ) { ir_transmit_complete(0); }
    1ad6:	1f 92       	push	r1
    1ad8:	0f 92       	push	r0
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	0f 92       	push	r0
    1ade:	11 24       	eor	r1, r1
    1ae0:	0b b6       	in	r0, 0x3b	; 59
    1ae2:	0f 92       	push	r0
    1ae4:	2f 93       	push	r18
    1ae6:	3f 93       	push	r19
    1ae8:	4f 93       	push	r20
    1aea:	5f 93       	push	r21
    1aec:	6f 93       	push	r22
    1aee:	7f 93       	push	r23
    1af0:	8f 93       	push	r24
    1af2:	9f 93       	push	r25
    1af4:	af 93       	push	r26
    1af6:	bf 93       	push	r27
    1af8:	ef 93       	push	r30
    1afa:	ff 93       	push	r31
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	5d de       	rcall	.-838    	; 0x17ba <ir_transmit_complete>
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	0f 90       	pop	r0
    1b1a:	0b be       	out	0x3b, r0	; 59
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	0f 90       	pop	r0
    1b22:	1f 90       	pop	r1
    1b24:	18 95       	reti

00001b26 <__vector_26>:
ISR( USARTC0_DRE_vect ) { ir_transmit(0); }
    1b26:	1f 92       	push	r1
    1b28:	0f 92       	push	r0
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	0f 92       	push	r0
    1b2e:	11 24       	eor	r1, r1
    1b30:	0b b6       	in	r0, 0x3b	; 59
    1b32:	0f 92       	push	r0
    1b34:	2f 93       	push	r18
    1b36:	3f 93       	push	r19
    1b38:	4f 93       	push	r20
    1b3a:	5f 93       	push	r21
    1b3c:	6f 93       	push	r22
    1b3e:	7f 93       	push	r23
    1b40:	8f 93       	push	r24
    1b42:	9f 93       	push	r25
    1b44:	af 93       	push	r26
    1b46:	bf 93       	push	r27
    1b48:	ef 93       	push	r30
    1b4a:	ff 93       	push	r31
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	43 dd       	rcall	.-1402   	; 0x15d6 <ir_transmit>
    1b50:	ff 91       	pop	r31
    1b52:	ef 91       	pop	r30
    1b54:	bf 91       	pop	r27
    1b56:	af 91       	pop	r26
    1b58:	9f 91       	pop	r25
    1b5a:	8f 91       	pop	r24
    1b5c:	7f 91       	pop	r23
    1b5e:	6f 91       	pop	r22
    1b60:	5f 91       	pop	r21
    1b62:	4f 91       	pop	r20
    1b64:	3f 91       	pop	r19
    1b66:	2f 91       	pop	r18
    1b68:	0f 90       	pop	r0
    1b6a:	0b be       	out	0x3b, r0	; 59
    1b6c:	0f 90       	pop	r0
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	0f 90       	pop	r0
    1b72:	1f 90       	pop	r1
    1b74:	18 95       	reti

00001b76 <__vector_28>:

// ISRs for IR channel 1
ISR( USARTC1_RXC_vect ) { ir_receive(1); }
    1b76:	1f 92       	push	r1
    1b78:	0f 92       	push	r0
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	0f 92       	push	r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	0b b6       	in	r0, 0x3b	; 59
    1b82:	0f 92       	push	r0
    1b84:	2f 93       	push	r18
    1b86:	3f 93       	push	r19
    1b88:	4f 93       	push	r20
    1b8a:	5f 93       	push	r21
    1b8c:	6f 93       	push	r22
    1b8e:	7f 93       	push	r23
    1b90:	8f 93       	push	r24
    1b92:	9f 93       	push	r25
    1b94:	af 93       	push	r26
    1b96:	bf 93       	push	r27
    1b98:	ef 93       	push	r30
    1b9a:	ff 93       	push	r31
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	df da       	rcall	.-2626   	; 0x115e <ir_receive>
    1ba0:	ff 91       	pop	r31
    1ba2:	ef 91       	pop	r30
    1ba4:	bf 91       	pop	r27
    1ba6:	af 91       	pop	r26
    1ba8:	9f 91       	pop	r25
    1baa:	8f 91       	pop	r24
    1bac:	7f 91       	pop	r23
    1bae:	6f 91       	pop	r22
    1bb0:	5f 91       	pop	r21
    1bb2:	4f 91       	pop	r20
    1bb4:	3f 91       	pop	r19
    1bb6:	2f 91       	pop	r18
    1bb8:	0f 90       	pop	r0
    1bba:	0b be       	out	0x3b, r0	; 59
    1bbc:	0f 90       	pop	r0
    1bbe:	0f be       	out	0x3f, r0	; 63
    1bc0:	0f 90       	pop	r0
    1bc2:	1f 90       	pop	r1
    1bc4:	18 95       	reti

00001bc6 <__vector_30>:
ISR( USARTC1_TXC_vect ) { ir_transmit_complete(1); }
    1bc6:	1f 92       	push	r1
    1bc8:	0f 92       	push	r0
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	0f 92       	push	r0
    1bce:	11 24       	eor	r1, r1
    1bd0:	0b b6       	in	r0, 0x3b	; 59
    1bd2:	0f 92       	push	r0
    1bd4:	2f 93       	push	r18
    1bd6:	3f 93       	push	r19
    1bd8:	4f 93       	push	r20
    1bda:	5f 93       	push	r21
    1bdc:	6f 93       	push	r22
    1bde:	7f 93       	push	r23
    1be0:	8f 93       	push	r24
    1be2:	9f 93       	push	r25
    1be4:	af 93       	push	r26
    1be6:	bf 93       	push	r27
    1be8:	ef 93       	push	r30
    1bea:	ff 93       	push	r31
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	e5 dd       	rcall	.-1078   	; 0x17ba <ir_transmit_complete>
    1bf0:	ff 91       	pop	r31
    1bf2:	ef 91       	pop	r30
    1bf4:	bf 91       	pop	r27
    1bf6:	af 91       	pop	r26
    1bf8:	9f 91       	pop	r25
    1bfa:	8f 91       	pop	r24
    1bfc:	7f 91       	pop	r23
    1bfe:	6f 91       	pop	r22
    1c00:	5f 91       	pop	r21
    1c02:	4f 91       	pop	r20
    1c04:	3f 91       	pop	r19
    1c06:	2f 91       	pop	r18
    1c08:	0f 90       	pop	r0
    1c0a:	0b be       	out	0x3b, r0	; 59
    1c0c:	0f 90       	pop	r0
    1c0e:	0f be       	out	0x3f, r0	; 63
    1c10:	0f 90       	pop	r0
    1c12:	1f 90       	pop	r1
    1c14:	18 95       	reti

00001c16 <__vector_29>:
ISR( USARTC1_DRE_vect ) { ir_transmit(1); }
    1c16:	1f 92       	push	r1
    1c18:	0f 92       	push	r0
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	0f 92       	push	r0
    1c1e:	11 24       	eor	r1, r1
    1c20:	0b b6       	in	r0, 0x3b	; 59
    1c22:	0f 92       	push	r0
    1c24:	2f 93       	push	r18
    1c26:	3f 93       	push	r19
    1c28:	4f 93       	push	r20
    1c2a:	5f 93       	push	r21
    1c2c:	6f 93       	push	r22
    1c2e:	7f 93       	push	r23
    1c30:	8f 93       	push	r24
    1c32:	9f 93       	push	r25
    1c34:	af 93       	push	r26
    1c36:	bf 93       	push	r27
    1c38:	ef 93       	push	r30
    1c3a:	ff 93       	push	r31
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	cb dc       	rcall	.-1642   	; 0x15d6 <ir_transmit>
    1c40:	ff 91       	pop	r31
    1c42:	ef 91       	pop	r30
    1c44:	bf 91       	pop	r27
    1c46:	af 91       	pop	r26
    1c48:	9f 91       	pop	r25
    1c4a:	8f 91       	pop	r24
    1c4c:	7f 91       	pop	r23
    1c4e:	6f 91       	pop	r22
    1c50:	5f 91       	pop	r21
    1c52:	4f 91       	pop	r20
    1c54:	3f 91       	pop	r19
    1c56:	2f 91       	pop	r18
    1c58:	0f 90       	pop	r0
    1c5a:	0b be       	out	0x3b, r0	; 59
    1c5c:	0f 90       	pop	r0
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	0f 90       	pop	r0
    1c62:	1f 90       	pop	r1
    1c64:	18 95       	reti

00001c66 <__vector_88>:

// ISRs for IR channel 2
ISR( USARTD0_RXC_vect ) { ir_receive(2); }
    1c66:	1f 92       	push	r1
    1c68:	0f 92       	push	r0
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	0f 92       	push	r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	0b b6       	in	r0, 0x3b	; 59
    1c72:	0f 92       	push	r0
    1c74:	2f 93       	push	r18
    1c76:	3f 93       	push	r19
    1c78:	4f 93       	push	r20
    1c7a:	5f 93       	push	r21
    1c7c:	6f 93       	push	r22
    1c7e:	7f 93       	push	r23
    1c80:	8f 93       	push	r24
    1c82:	9f 93       	push	r25
    1c84:	af 93       	push	r26
    1c86:	bf 93       	push	r27
    1c88:	ef 93       	push	r30
    1c8a:	ff 93       	push	r31
    1c8c:	82 e0       	ldi	r24, 0x02	; 2
    1c8e:	67 da       	rcall	.-2866   	; 0x115e <ir_receive>
    1c90:	ff 91       	pop	r31
    1c92:	ef 91       	pop	r30
    1c94:	bf 91       	pop	r27
    1c96:	af 91       	pop	r26
    1c98:	9f 91       	pop	r25
    1c9a:	8f 91       	pop	r24
    1c9c:	7f 91       	pop	r23
    1c9e:	6f 91       	pop	r22
    1ca0:	5f 91       	pop	r21
    1ca2:	4f 91       	pop	r20
    1ca4:	3f 91       	pop	r19
    1ca6:	2f 91       	pop	r18
    1ca8:	0f 90       	pop	r0
    1caa:	0b be       	out	0x3b, r0	; 59
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__vector_90>:
ISR( USARTD0_TXC_vect ) { ir_transmit_complete(2); }
    1cb6:	1f 92       	push	r1
    1cb8:	0f 92       	push	r0
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	0f 92       	push	r0
    1cbe:	11 24       	eor	r1, r1
    1cc0:	0b b6       	in	r0, 0x3b	; 59
    1cc2:	0f 92       	push	r0
    1cc4:	2f 93       	push	r18
    1cc6:	3f 93       	push	r19
    1cc8:	4f 93       	push	r20
    1cca:	5f 93       	push	r21
    1ccc:	6f 93       	push	r22
    1cce:	7f 93       	push	r23
    1cd0:	8f 93       	push	r24
    1cd2:	9f 93       	push	r25
    1cd4:	af 93       	push	r26
    1cd6:	bf 93       	push	r27
    1cd8:	ef 93       	push	r30
    1cda:	ff 93       	push	r31
    1cdc:	82 e0       	ldi	r24, 0x02	; 2
    1cde:	6d dd       	rcall	.-1318   	; 0x17ba <ir_transmit_complete>
    1ce0:	ff 91       	pop	r31
    1ce2:	ef 91       	pop	r30
    1ce4:	bf 91       	pop	r27
    1ce6:	af 91       	pop	r26
    1ce8:	9f 91       	pop	r25
    1cea:	8f 91       	pop	r24
    1cec:	7f 91       	pop	r23
    1cee:	6f 91       	pop	r22
    1cf0:	5f 91       	pop	r21
    1cf2:	4f 91       	pop	r20
    1cf4:	3f 91       	pop	r19
    1cf6:	2f 91       	pop	r18
    1cf8:	0f 90       	pop	r0
    1cfa:	0b be       	out	0x3b, r0	; 59
    1cfc:	0f 90       	pop	r0
    1cfe:	0f be       	out	0x3f, r0	; 63
    1d00:	0f 90       	pop	r0
    1d02:	1f 90       	pop	r1
    1d04:	18 95       	reti

00001d06 <__vector_89>:
ISR( USARTD0_DRE_vect ) { ir_transmit(2); }
    1d06:	1f 92       	push	r1
    1d08:	0f 92       	push	r0
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	0f 92       	push	r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	0b b6       	in	r0, 0x3b	; 59
    1d12:	0f 92       	push	r0
    1d14:	2f 93       	push	r18
    1d16:	3f 93       	push	r19
    1d18:	4f 93       	push	r20
    1d1a:	5f 93       	push	r21
    1d1c:	6f 93       	push	r22
    1d1e:	7f 93       	push	r23
    1d20:	8f 93       	push	r24
    1d22:	9f 93       	push	r25
    1d24:	af 93       	push	r26
    1d26:	bf 93       	push	r27
    1d28:	ef 93       	push	r30
    1d2a:	ff 93       	push	r31
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	53 dc       	rcall	.-1882   	; 0x15d6 <ir_transmit>
    1d30:	ff 91       	pop	r31
    1d32:	ef 91       	pop	r30
    1d34:	bf 91       	pop	r27
    1d36:	af 91       	pop	r26
    1d38:	9f 91       	pop	r25
    1d3a:	8f 91       	pop	r24
    1d3c:	7f 91       	pop	r23
    1d3e:	6f 91       	pop	r22
    1d40:	5f 91       	pop	r21
    1d42:	4f 91       	pop	r20
    1d44:	3f 91       	pop	r19
    1d46:	2f 91       	pop	r18
    1d48:	0f 90       	pop	r0
    1d4a:	0b be       	out	0x3b, r0	; 59
    1d4c:	0f 90       	pop	r0
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	0f 90       	pop	r0
    1d52:	1f 90       	pop	r1
    1d54:	18 95       	reti

00001d56 <__vector_58>:

// ISRs for IR channel 3
ISR( USARTE0_RXC_vect ) { ir_receive(3); }
    1d56:	1f 92       	push	r1
    1d58:	0f 92       	push	r0
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	0f 92       	push	r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	0b b6       	in	r0, 0x3b	; 59
    1d62:	0f 92       	push	r0
    1d64:	2f 93       	push	r18
    1d66:	3f 93       	push	r19
    1d68:	4f 93       	push	r20
    1d6a:	5f 93       	push	r21
    1d6c:	6f 93       	push	r22
    1d6e:	7f 93       	push	r23
    1d70:	8f 93       	push	r24
    1d72:	9f 93       	push	r25
    1d74:	af 93       	push	r26
    1d76:	bf 93       	push	r27
    1d78:	ef 93       	push	r30
    1d7a:	ff 93       	push	r31
    1d7c:	83 e0       	ldi	r24, 0x03	; 3
    1d7e:	ef d9       	rcall	.-3106   	; 0x115e <ir_receive>
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0b be       	out	0x3b, r0	; 59
    1d9c:	0f 90       	pop	r0
    1d9e:	0f be       	out	0x3f, r0	; 63
    1da0:	0f 90       	pop	r0
    1da2:	1f 90       	pop	r1
    1da4:	18 95       	reti

00001da6 <__vector_60>:
ISR( USARTE0_TXC_vect ) { ir_transmit_complete(3); }
    1da6:	1f 92       	push	r1
    1da8:	0f 92       	push	r0
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	0f 92       	push	r0
    1dae:	11 24       	eor	r1, r1
    1db0:	0b b6       	in	r0, 0x3b	; 59
    1db2:	0f 92       	push	r0
    1db4:	2f 93       	push	r18
    1db6:	3f 93       	push	r19
    1db8:	4f 93       	push	r20
    1dba:	5f 93       	push	r21
    1dbc:	6f 93       	push	r22
    1dbe:	7f 93       	push	r23
    1dc0:	8f 93       	push	r24
    1dc2:	9f 93       	push	r25
    1dc4:	af 93       	push	r26
    1dc6:	bf 93       	push	r27
    1dc8:	ef 93       	push	r30
    1dca:	ff 93       	push	r31
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	f5 dc       	rcall	.-1558   	; 0x17ba <ir_transmit_complete>
    1dd0:	ff 91       	pop	r31
    1dd2:	ef 91       	pop	r30
    1dd4:	bf 91       	pop	r27
    1dd6:	af 91       	pop	r26
    1dd8:	9f 91       	pop	r25
    1dda:	8f 91       	pop	r24
    1ddc:	7f 91       	pop	r23
    1dde:	6f 91       	pop	r22
    1de0:	5f 91       	pop	r21
    1de2:	4f 91       	pop	r20
    1de4:	3f 91       	pop	r19
    1de6:	2f 91       	pop	r18
    1de8:	0f 90       	pop	r0
    1dea:	0b be       	out	0x3b, r0	; 59
    1dec:	0f 90       	pop	r0
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	0f 90       	pop	r0
    1df2:	1f 90       	pop	r1
    1df4:	18 95       	reti

00001df6 <__vector_59>:
ISR( USARTE0_DRE_vect ) { ir_transmit(3); }
    1df6:	1f 92       	push	r1
    1df8:	0f 92       	push	r0
    1dfa:	0f b6       	in	r0, 0x3f	; 63
    1dfc:	0f 92       	push	r0
    1dfe:	11 24       	eor	r1, r1
    1e00:	0b b6       	in	r0, 0x3b	; 59
    1e02:	0f 92       	push	r0
    1e04:	2f 93       	push	r18
    1e06:	3f 93       	push	r19
    1e08:	4f 93       	push	r20
    1e0a:	5f 93       	push	r21
    1e0c:	6f 93       	push	r22
    1e0e:	7f 93       	push	r23
    1e10:	8f 93       	push	r24
    1e12:	9f 93       	push	r25
    1e14:	af 93       	push	r26
    1e16:	bf 93       	push	r27
    1e18:	ef 93       	push	r30
    1e1a:	ff 93       	push	r31
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	db db       	rcall	.-2122   	; 0x15d6 <ir_transmit>
    1e20:	ff 91       	pop	r31
    1e22:	ef 91       	pop	r30
    1e24:	bf 91       	pop	r27
    1e26:	af 91       	pop	r26
    1e28:	9f 91       	pop	r25
    1e2a:	8f 91       	pop	r24
    1e2c:	7f 91       	pop	r23
    1e2e:	6f 91       	pop	r22
    1e30:	5f 91       	pop	r21
    1e32:	4f 91       	pop	r20
    1e34:	3f 91       	pop	r19
    1e36:	2f 91       	pop	r18
    1e38:	0f 90       	pop	r0
    1e3a:	0b be       	out	0x3b, r0	; 59
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti

00001e46 <__vector_61>:

// ISRs for IR channel 4
ISR( USARTE1_RXC_vect ) { ir_receive(4); }
    1e46:	1f 92       	push	r1
    1e48:	0f 92       	push	r0
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	0f 92       	push	r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	0b b6       	in	r0, 0x3b	; 59
    1e52:	0f 92       	push	r0
    1e54:	2f 93       	push	r18
    1e56:	3f 93       	push	r19
    1e58:	4f 93       	push	r20
    1e5a:	5f 93       	push	r21
    1e5c:	6f 93       	push	r22
    1e5e:	7f 93       	push	r23
    1e60:	8f 93       	push	r24
    1e62:	9f 93       	push	r25
    1e64:	af 93       	push	r26
    1e66:	bf 93       	push	r27
    1e68:	ef 93       	push	r30
    1e6a:	ff 93       	push	r31
    1e6c:	84 e0       	ldi	r24, 0x04	; 4
    1e6e:	77 d9       	rcall	.-3346   	; 0x115e <ir_receive>
    1e70:	ff 91       	pop	r31
    1e72:	ef 91       	pop	r30
    1e74:	bf 91       	pop	r27
    1e76:	af 91       	pop	r26
    1e78:	9f 91       	pop	r25
    1e7a:	8f 91       	pop	r24
    1e7c:	7f 91       	pop	r23
    1e7e:	6f 91       	pop	r22
    1e80:	5f 91       	pop	r21
    1e82:	4f 91       	pop	r20
    1e84:	3f 91       	pop	r19
    1e86:	2f 91       	pop	r18
    1e88:	0f 90       	pop	r0
    1e8a:	0b be       	out	0x3b, r0	; 59
    1e8c:	0f 90       	pop	r0
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	0f 90       	pop	r0
    1e92:	1f 90       	pop	r1
    1e94:	18 95       	reti

00001e96 <__vector_63>:
ISR( USARTE1_TXC_vect ) { ir_transmit_complete(4); }
    1e96:	1f 92       	push	r1
    1e98:	0f 92       	push	r0
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	0f 92       	push	r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	0b b6       	in	r0, 0x3b	; 59
    1ea2:	0f 92       	push	r0
    1ea4:	2f 93       	push	r18
    1ea6:	3f 93       	push	r19
    1ea8:	4f 93       	push	r20
    1eaa:	5f 93       	push	r21
    1eac:	6f 93       	push	r22
    1eae:	7f 93       	push	r23
    1eb0:	8f 93       	push	r24
    1eb2:	9f 93       	push	r25
    1eb4:	af 93       	push	r26
    1eb6:	bf 93       	push	r27
    1eb8:	ef 93       	push	r30
    1eba:	ff 93       	push	r31
    1ebc:	84 e0       	ldi	r24, 0x04	; 4
    1ebe:	7d dc       	rcall	.-1798   	; 0x17ba <ir_transmit_complete>
    1ec0:	ff 91       	pop	r31
    1ec2:	ef 91       	pop	r30
    1ec4:	bf 91       	pop	r27
    1ec6:	af 91       	pop	r26
    1ec8:	9f 91       	pop	r25
    1eca:	8f 91       	pop	r24
    1ecc:	7f 91       	pop	r23
    1ece:	6f 91       	pop	r22
    1ed0:	5f 91       	pop	r21
    1ed2:	4f 91       	pop	r20
    1ed4:	3f 91       	pop	r19
    1ed6:	2f 91       	pop	r18
    1ed8:	0f 90       	pop	r0
    1eda:	0b be       	out	0x3b, r0	; 59
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <__vector_62>:
ISR( USARTE1_DRE_vect ) { ir_transmit(4); }
    1ee6:	1f 92       	push	r1
    1ee8:	0f 92       	push	r0
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	0f 92       	push	r0
    1eee:	11 24       	eor	r1, r1
    1ef0:	0b b6       	in	r0, 0x3b	; 59
    1ef2:	0f 92       	push	r0
    1ef4:	2f 93       	push	r18
    1ef6:	3f 93       	push	r19
    1ef8:	4f 93       	push	r20
    1efa:	5f 93       	push	r21
    1efc:	6f 93       	push	r22
    1efe:	7f 93       	push	r23
    1f00:	8f 93       	push	r24
    1f02:	9f 93       	push	r25
    1f04:	af 93       	push	r26
    1f06:	bf 93       	push	r27
    1f08:	ef 93       	push	r30
    1f0a:	ff 93       	push	r31
    1f0c:	84 e0       	ldi	r24, 0x04	; 4
    1f0e:	63 db       	rcall	.-2362   	; 0x15d6 <ir_transmit>
    1f10:	ff 91       	pop	r31
    1f12:	ef 91       	pop	r30
    1f14:	bf 91       	pop	r27
    1f16:	af 91       	pop	r26
    1f18:	9f 91       	pop	r25
    1f1a:	8f 91       	pop	r24
    1f1c:	7f 91       	pop	r23
    1f1e:	6f 91       	pop	r22
    1f20:	5f 91       	pop	r21
    1f22:	4f 91       	pop	r20
    1f24:	3f 91       	pop	r19
    1f26:	2f 91       	pop	r18
    1f28:	0f 90       	pop	r0
    1f2a:	0b be       	out	0x3b, r0	; 59
    1f2c:	0f 90       	pop	r0
    1f2e:	0f be       	out	0x3f, r0	; 63
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <__vector_119>:

// ISRs for IR channel 5
ISR( USARTF0_RXC_vect ) { ir_receive(5); }
    1f36:	1f 92       	push	r1
    1f38:	0f 92       	push	r0
    1f3a:	0f b6       	in	r0, 0x3f	; 63
    1f3c:	0f 92       	push	r0
    1f3e:	11 24       	eor	r1, r1
    1f40:	0b b6       	in	r0, 0x3b	; 59
    1f42:	0f 92       	push	r0
    1f44:	2f 93       	push	r18
    1f46:	3f 93       	push	r19
    1f48:	4f 93       	push	r20
    1f4a:	5f 93       	push	r21
    1f4c:	6f 93       	push	r22
    1f4e:	7f 93       	push	r23
    1f50:	8f 93       	push	r24
    1f52:	9f 93       	push	r25
    1f54:	af 93       	push	r26
    1f56:	bf 93       	push	r27
    1f58:	ef 93       	push	r30
    1f5a:	ff 93       	push	r31
    1f5c:	85 e0       	ldi	r24, 0x05	; 5
    1f5e:	ff d8       	rcall	.-3586   	; 0x115e <ir_receive>
    1f60:	ff 91       	pop	r31
    1f62:	ef 91       	pop	r30
    1f64:	bf 91       	pop	r27
    1f66:	af 91       	pop	r26
    1f68:	9f 91       	pop	r25
    1f6a:	8f 91       	pop	r24
    1f6c:	7f 91       	pop	r23
    1f6e:	6f 91       	pop	r22
    1f70:	5f 91       	pop	r21
    1f72:	4f 91       	pop	r20
    1f74:	3f 91       	pop	r19
    1f76:	2f 91       	pop	r18
    1f78:	0f 90       	pop	r0
    1f7a:	0b be       	out	0x3b, r0	; 59
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	0f 90       	pop	r0
    1f82:	1f 90       	pop	r1
    1f84:	18 95       	reti

00001f86 <__vector_121>:
ISR( USARTF0_TXC_vect ) { ir_transmit_complete(5); }
    1f86:	1f 92       	push	r1
    1f88:	0f 92       	push	r0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	0f 92       	push	r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	0b b6       	in	r0, 0x3b	; 59
    1f92:	0f 92       	push	r0
    1f94:	2f 93       	push	r18
    1f96:	3f 93       	push	r19
    1f98:	4f 93       	push	r20
    1f9a:	5f 93       	push	r21
    1f9c:	6f 93       	push	r22
    1f9e:	7f 93       	push	r23
    1fa0:	8f 93       	push	r24
    1fa2:	9f 93       	push	r25
    1fa4:	af 93       	push	r26
    1fa6:	bf 93       	push	r27
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
    1fac:	85 e0       	ldi	r24, 0x05	; 5
    1fae:	05 dc       	rcall	.-2038   	; 0x17ba <ir_transmit_complete>
    1fb0:	ff 91       	pop	r31
    1fb2:	ef 91       	pop	r30
    1fb4:	bf 91       	pop	r27
    1fb6:	af 91       	pop	r26
    1fb8:	9f 91       	pop	r25
    1fba:	8f 91       	pop	r24
    1fbc:	7f 91       	pop	r23
    1fbe:	6f 91       	pop	r22
    1fc0:	5f 91       	pop	r21
    1fc2:	4f 91       	pop	r20
    1fc4:	3f 91       	pop	r19
    1fc6:	2f 91       	pop	r18
    1fc8:	0f 90       	pop	r0
    1fca:	0b be       	out	0x3b, r0	; 59
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <__vector_120>:
    1fd6:	1f 92       	push	r1
    1fd8:	0f 92       	push	r0
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	0f 92       	push	r0
    1fde:	11 24       	eor	r1, r1
    1fe0:	0b b6       	in	r0, 0x3b	; 59
    1fe2:	0f 92       	push	r0
    1fe4:	2f 93       	push	r18
    1fe6:	3f 93       	push	r19
    1fe8:	4f 93       	push	r20
    1fea:	5f 93       	push	r21
    1fec:	6f 93       	push	r22
    1fee:	7f 93       	push	r23
    1ff0:	8f 93       	push	r24
    1ff2:	9f 93       	push	r25
    1ff4:	af 93       	push	r26
    1ff6:	bf 93       	push	r27
    1ff8:	ef 93       	push	r30
    1ffa:	ff 93       	push	r31
    1ffc:	85 e0       	ldi	r24, 0x05	; 5
    1ffe:	eb da       	rcall	.-2602   	; 0x15d6 <ir_transmit>
    2000:	ff 91       	pop	r31
    2002:	ef 91       	pop	r30
    2004:	bf 91       	pop	r27
    2006:	af 91       	pop	r26
    2008:	9f 91       	pop	r25
    200a:	8f 91       	pop	r24
    200c:	7f 91       	pop	r23
    200e:	6f 91       	pop	r22
    2010:	5f 91       	pop	r21
    2012:	4f 91       	pop	r20
    2014:	3f 91       	pop	r19
    2016:	2f 91       	pop	r18
    2018:	0f 90       	pop	r0
    201a:	0b be       	out	0x3b, r0	; 59
    201c:	0f 90       	pop	r0
    201e:	0f be       	out	0x3f, r0	; 63
    2020:	0f 90       	pop	r0
    2022:	1f 90       	pop	r1
    2024:	18 95       	reti

00002026 <meas_find_median>:
}	

// Finds the median of 3 numbers by finding the max, finding the min, and returning the other value
// WARNING! This function modifies the array!
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
    2026:	1f 93       	push	r17
    2028:	cf 93       	push	r28
    202a:	df 93       	push	r29
	if(arr_len==1) return meas[0];
    202c:	61 30       	cpi	r22, 0x01	; 1
    202e:	21 f4       	brne	.+8      	; 0x2038 <meas_find_median+0x12>
    2030:	fc 01       	movw	r30, r24
    2032:	80 81       	ld	r24, Z
    2034:	91 81       	ldd	r25, Z+1	; 0x01
    2036:	51 c0       	rjmp	.+162    	; 0x20da <meas_find_median+0xb4>
	else if(arr_len==2) return (meas[0]+meas[1])/2;
    2038:	62 30       	cpi	r22, 0x02	; 2
    203a:	49 f5       	brne	.+82     	; 0x208e <meas_find_median+0x68>
    203c:	fc 01       	movw	r30, r24
    203e:	20 81       	ld	r18, Z
    2040:	31 81       	ldd	r19, Z+1	; 0x01
    2042:	82 81       	ldd	r24, Z+2	; 0x02
    2044:	93 81       	ldd	r25, Z+3	; 0x03
    2046:	82 0f       	add	r24, r18
    2048:	93 1f       	adc	r25, r19
    204a:	99 23       	and	r25, r25
    204c:	0c f4       	brge	.+2      	; 0x2050 <meas_find_median+0x2a>
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	95 95       	asr	r25
    2052:	87 95       	ror	r24
    2054:	42 c0       	rjmp	.+132    	; 0x20da <meas_find_median+0xb4>
    2056:	12 96       	adiw	r26, 0x02	; 2
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    2058:	1f 5f       	subi	r17, 0xFF	; 255
    205a:	16 17       	cp	r17, r22
    205c:	e9 f0       	breq	.+58     	; 0x2098 <meas_find_median+0x72>
    205e:	71 2f       	mov	r23, r17
    2060:	ed 01       	movw	r28, r26
		{
			if(meas[j] < meas[i])
    2062:	e7 2f       	mov	r30, r23
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	ee 0f       	add	r30, r30
    2068:	ff 1f       	adc	r31, r31
    206a:	e8 0f       	add	r30, r24
    206c:	f9 1f       	adc	r31, r25
    206e:	40 81       	ld	r20, Z
    2070:	51 81       	ldd	r21, Z+1	; 0x01
    2072:	2d 91       	ld	r18, X+
    2074:	3c 91       	ld	r19, X
    2076:	11 97       	sbiw	r26, 0x01	; 1
    2078:	42 17       	cp	r20, r18
    207a:	53 07       	cpc	r21, r19
    207c:	24 f4       	brge	.+8      	; 0x2086 <meas_find_median+0x60>
			{
				int16_t temp = meas[i];
				meas[i] = meas[j];
    207e:	48 83       	st	Y, r20
    2080:	59 83       	std	Y+1, r21	; 0x01
				meas[j] = temp;
    2082:	20 83       	st	Z, r18
    2084:	31 83       	std	Z+1, r19	; 0x01
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
	{
		for(uint8_t j=i+1 ; j<arr_len ; j++)
    2086:	7f 5f       	subi	r23, 0xFF	; 255
    2088:	76 13       	cpse	r23, r22
    208a:	eb cf       	rjmp	.-42     	; 0x2062 <meas_find_median+0x3c>
    208c:	e4 cf       	rjmp	.-56     	; 0x2056 <meas_find_median+0x30>
int16_t meas_find_median(int16_t* meas, uint8_t arr_len)
{
	if(arr_len==1) return meas[0];
	else if(arr_len==2) return (meas[0]+meas[1])/2;
	
	for(uint8_t i=0; i<arr_len ; i++)
    208e:	66 23       	and	r22, r22
    2090:	29 f0       	breq	.+10     	; 0x209c <meas_find_median+0x76>
    2092:	dc 01       	movw	r26, r24
    2094:	10 e0       	ldi	r17, 0x00	; 0
    2096:	e0 cf       	rjmp	.-64     	; 0x2058 <meas_find_median+0x32>
				meas[i] = meas[j];
				meas[j] = temp;
			}
		}
	}
	if(arr_len%2==0) return (meas[arr_len/2-1]+meas[arr_len/2])/2;
    2098:	60 fd       	sbrc	r22, 0
    209a:	15 c0       	rjmp	.+42     	; 0x20c6 <meas_find_median+0xa0>
    209c:	66 95       	lsr	r22
    209e:	e6 2f       	mov	r30, r22
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	e1 50       	subi	r30, 0x01	; 1
    20a4:	f0 48       	sbci	r31, 0x80	; 128
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	e8 0f       	add	r30, r24
    20ac:	f9 1f       	adc	r31, r25
    20ae:	20 81       	ld	r18, Z
    20b0:	31 81       	ldd	r19, Z+1	; 0x01
    20b2:	82 81       	ldd	r24, Z+2	; 0x02
    20b4:	93 81       	ldd	r25, Z+3	; 0x03
    20b6:	82 0f       	add	r24, r18
    20b8:	93 1f       	adc	r25, r19
    20ba:	99 23       	and	r25, r25
    20bc:	0c f4       	brge	.+2      	; 0x20c0 <meas_find_median+0x9a>
    20be:	01 96       	adiw	r24, 0x01	; 1
    20c0:	95 95       	asr	r25
    20c2:	87 95       	ror	r24
    20c4:	0a c0       	rjmp	.+20     	; 0x20da <meas_find_median+0xb4>
	else return meas[arr_len/2];
    20c6:	66 95       	lsr	r22
    20c8:	26 2f       	mov	r18, r22
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	22 0f       	add	r18, r18
    20ce:	33 1f       	adc	r19, r19
    20d0:	fc 01       	movw	r30, r24
    20d2:	e2 0f       	add	r30, r18
    20d4:	f3 1f       	adc	r31, r19
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	1f 91       	pop	r17
    20e0:	08 95       	ret

000020e2 <get_ir_sensor>:
/*
* This measurement will always output a number between 0 and about 200. Ambient light levels are typically around 20.
* The range of outputs that could be used for actual measurements will be limited to about 20 to 200 (only 180 significant values)
*/
uint8_t get_ir_sensor(uint8_t sensor_num)
{
    20e2:	0f 93       	push	r16
    20e4:	1f 93       	push	r17
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	cd b7       	in	r28, 0x3d	; 61
    20ec:	de b7       	in	r29, 0x3e	; 62
    20ee:	2a 97       	sbiw	r28, 0x0a	; 10
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	de bf       	out	0x3e, r29	; 62
	ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
    20f4:	e0 e4       	ldi	r30, 0x40	; 64
    20f6:	f2 e0       	ldi	r31, 0x02	; 2
    20f8:	91 a1       	ldd	r25, Z+33	; 0x21
    20fa:	97 70       	andi	r25, 0x07	; 7
    20fc:	91 a3       	std	Z+33, r25	; 0x21
	ADCB.CH0.MUXCTRL |= mux_sensor_selectors[sensor_num];
    20fe:	91 a1       	ldd	r25, Z+33	; 0x21
    2100:	08 2f       	mov	r16, r24
    2102:	10 e0       	ldi	r17, 0x00	; 0
    2104:	d8 01       	movw	r26, r16
    2106:	a1 56       	subi	r26, 0x61	; 97
    2108:	be 4d       	sbci	r27, 0xDE	; 222
    210a:	8c 91       	ld	r24, X
    210c:	89 2b       	or	r24, r25
    210e:	81 a3       	std	Z+33, r24	; 0x21
    2110:	de 01       	movw	r26, r28
    2112:	11 96       	adiw	r26, 0x01	; 1
    2114:	9e 01       	movw	r18, r28
    2116:	25 5f       	subi	r18, 0xF5	; 245
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
		{
			ADCB.CH0.CTRL |= ADC_CH_START_bm;
			while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
		}
		meas[meas_count] = ((((int16_t)ADCB.CH0.RESH)<<8)|((int16_t)ADCB.CH0.RESL))>>2;	
		ADCB.CH0.INTFLAGS=1; // clear the complete flag		
    211a:	51 e0       	ldi	r21, 0x01	; 1
	
	int16_t meas[IR_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
	{
		ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    211c:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    211e:	f8 94       	cli
		{
			ADCB.CH0.CTRL |= ADC_CH_START_bm;
    2120:	80 a1       	ldd	r24, Z+32	; 0x20
    2122:	80 68       	ori	r24, 0x80	; 128
    2124:	80 a3       	std	Z+32, r24	; 0x20
			while (ADCB.CH0.INTFLAGS==0){};		// wait for measurement to complete
    2126:	83 a1       	ldd	r24, Z+35	; 0x23
    2128:	88 23       	and	r24, r24
    212a:	e9 f3       	breq	.-6      	; 0x2126 <get_ir_sensor+0x44>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    212c:	9f bf       	out	0x3f, r25	; 63
		}
		meas[meas_count] = ((((int16_t)ADCB.CH0.RESH)<<8)|((int16_t)ADCB.CH0.RESL))>>2;	
    212e:	45 a1       	ldd	r20, Z+37	; 0x25
    2130:	84 a1       	ldd	r24, Z+36	; 0x24
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	94 2b       	or	r25, r20
    2136:	95 95       	asr	r25
    2138:	87 95       	ror	r24
    213a:	95 95       	asr	r25
    213c:	87 95       	ror	r24
    213e:	8d 93       	st	X+, r24
    2140:	9d 93       	st	X+, r25
		ADCB.CH0.INTFLAGS=1; // clear the complete flag		
    2142:	53 a3       	std	Z+35, r21	; 0x23
	ADCB.CH0.MUXCTRL &= MUX_SENSOR_CLR; //clear previous sensor selection
	ADCB.CH0.MUXCTRL |= mux_sensor_selectors[sensor_num];
	
	int16_t meas[IR_MEAS_COUNT];
	
	for(uint8_t meas_count=0; meas_count<IR_MEAS_COUNT; meas_count++)
    2144:	a2 17       	cp	r26, r18
    2146:	b3 07       	cpc	r27, r19
    2148:	49 f7       	brne	.-46     	; 0x211c <get_ir_sensor+0x3a>
	}
	//printf("Median: %d", median);	
	//printf("\t");
	//for(uint8_t i=0;i<IR_MEAS_COUNT;i++) printf("%u: %3d\t",i, meas[i]);
	//printf("\r\n");
	int16_t median = meas_find_median(&(meas[2]), IR_MEAS_COUNT-2);
    214a:	63 e0       	ldi	r22, 0x03	; 3
    214c:	ce 01       	movw	r24, r28
    214e:	05 96       	adiw	r24, 0x05	; 5
    2150:	6a df       	rcall	.-300    	; 0x2026 <meas_find_median>
	
	if(median<ir_sense_baseline[sensor_num])	return 0;
    2152:	f8 01       	movw	r30, r16
    2154:	ee 0f       	add	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	ee 51       	subi	r30, 0x1E	; 30
    215a:	f5 4d       	sbci	r31, 0xD5	; 213
    215c:	20 81       	ld	r18, Z
    215e:	31 81       	ldd	r19, Z+1	; 0x01
    2160:	82 17       	cp	r24, r18
    2162:	93 07       	cpc	r25, r19
    2164:	14 f0       	brlt	.+4      	; 0x216a <get_ir_sensor+0x88>
	else										return (median-ir_sense_baseline[sensor_num]);
    2166:	82 1b       	sub	r24, r18
    2168:	01 c0       	rjmp	.+2      	; 0x216c <get_ir_sensor+0x8a>
	//printf("\t");
	//for(uint8_t i=0;i<IR_MEAS_COUNT;i++) printf("%u: %3d\t",i, meas[i]);
	//printf("\r\n");
	int16_t median = meas_find_median(&(meas[2]), IR_MEAS_COUNT-2);
	
	if(median<ir_sense_baseline[sensor_num])	return 0;
    216a:	80 e0       	ldi	r24, 0x00	; 0
	else										return (median-ir_sense_baseline[sensor_num]);
}
    216c:	2a 96       	adiw	r28, 0x0a	; 10
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	08 95       	ret

0000217c <ir_sensor_init>:
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    217c:	ef 92       	push	r14
    217e:	ff 92       	push	r15
    2180:	0f 93       	push	r16
    2182:	1f 93       	push	r17
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
	/* SET INPUT PINS AS INPUTS */
	IR_SENSOR_PORT.DIRCLR = ALL_IR_SENSOR_PINS_bm;
    2188:	8c ef       	ldi	r24, 0xFC	; 252
    218a:	e0 e2       	ldi	r30, 0x20	; 32
    218c:	f6 e0       	ldi	r31, 0x06	; 6
    218e:	82 83       	std	Z+2, r24	; 0x02

	ADCB.REFCTRL = ADC_REFSEL_INT1V_gc;
    2190:	e0 e4       	ldi	r30, 0x40	; 64
    2192:	f2 e0       	ldi	r31, 0x02	; 2
    2194:	12 82       	std	Z+2, r1	; 0x02
	ADCB.CTRLB = ADC_RESOLUTION_12BIT_gc | ADC_CONMODE_bm; //12bit resolution, and sets it to signed mode.
    2196:	80 e1       	ldi	r24, 0x10	; 16
    2198:	81 83       	std	Z+1, r24	; 0x01
	ADCB.PRESCALER = ADC_PRESCALER_DIV512_gc;
    219a:	87 e0       	ldi	r24, 0x07	; 7
    219c:	84 83       	std	Z+4, r24	; 0x04
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFF_gc;	// differential input. requires signed mode (see sec. 28.6 in manual)
    219e:	92 e0       	ldi	r25, 0x02	; 2
    21a0:	90 a3       	std	Z+32, r25	; 0x20
	ADCB.CH0.MUXCTRL = ADC_CH_MUXNEG_INTGND_MODE3_gc;	// use VREF_IN for the negative input (0.54 V)
    21a2:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CALL = PRODSIGNATURES_ADCBCAL0;
    21a4:	84 b5       	in	r24, 0x24	; 36
    21a6:	84 87       	std	Z+12, r24	; 0x0c
	ADCB.CALH = PRODSIGNATURES_ADCBCAL1;
    21a8:	85 b5       	in	r24, 0x25	; 37
    21aa:	85 87       	std	Z+13, r24	; 0x0d
	ADCB.CTRLA = ADC_ENABLE_bm;	
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	80 83       	st	Z, r24
    21b0:	85 e3       	ldi	r24, 0x35	; 53
    21b2:	8a 95       	dec	r24
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <ir_sensor_init+0x36>
    21b6:	00 00       	nop

	delay_us(5);
	
	for(uint8_t dir=0; dir<6; dir++) ir_sense_baseline[dir] = 0;
    21b8:	10 92 e2 2a 	sts	0x2AE2, r1
    21bc:	10 92 e3 2a 	sts	0x2AE3, r1
    21c0:	10 92 e4 2a 	sts	0x2AE4, r1
    21c4:	10 92 e5 2a 	sts	0x2AE5, r1
    21c8:	10 92 e6 2a 	sts	0x2AE6, r1
    21cc:	10 92 e7 2a 	sts	0x2AE7, r1
    21d0:	10 92 e8 2a 	sts	0x2AE8, r1
    21d4:	10 92 e9 2a 	sts	0x2AE9, r1
    21d8:	10 92 ea 2a 	sts	0x2AEA, r1
    21dc:	10 92 eb 2a 	sts	0x2AEB, r1
    21e0:	10 92 ec 2a 	sts	0x2AEC, r1
    21e4:	10 92 ed 2a 	sts	0x2AED, r1
	
	delay_ms(5);
    21e8:	85 e0       	ldi	r24, 0x05	; 5
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
	get_ir_sensor(0);
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	77 df       	rcall	.-274    	; 0x20e2 <get_ir_sensor>
    21f4:	c2 ee       	ldi	r28, 0xE2	; 226
    21f6:	da e2       	ldi	r29, 0x2A	; 42
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
    21f8:	f1 2c       	mov	r15, r1
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    21fa:	ee 24       	eor	r14, r14
    21fc:	ea 94       	dec	r14
    21fe:	0f c0       	rjmp	.+30     	; 0x221e <ir_sensor_init+0xa2>
	for(uint8_t dir=0; dir<6; dir++)
	{
		min_val=255;
		for(uint8_t meas_count=0; meas_count<5; meas_count++)
		{
			val = get_ir_sensor(dir);
    2200:	8f 2d       	mov	r24, r15
    2202:	6f df       	rcall	.-290    	; 0x20e2 <get_ir_sensor>
    2204:	80 17       	cp	r24, r16
    2206:	08 f4       	brcc	.+2      	; 0x220a <ir_sensor_init+0x8e>
    2208:	08 2f       	mov	r16, r24
    220a:	11 50       	subi	r17, 0x01	; 1
	get_ir_sensor(0);
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
	{
		min_val=255;
		for(uint8_t meas_count=0; meas_count<5; meas_count++)
    220c:	c9 f7       	brne	.-14     	; 0x2200 <ir_sensor_init+0x84>
		{
			val = get_ir_sensor(dir);
			if(val<min_val) min_val = val;
		}
		ir_sense_baseline[dir] = min_val;
    220e:	20 2f       	mov	r18, r16
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	29 93       	st	Y+, r18
    2214:	39 93       	st	Y+, r19
	for(uint8_t dir=0; dir<6; dir++) ir_sense_baseline[dir] = 0;
	
	delay_ms(5);
	get_ir_sensor(0);
	uint8_t min_val, val;
	for(uint8_t dir=0; dir<6; dir++)
    2216:	f3 94       	inc	r15
    2218:	86 e0       	ldi	r24, 0x06	; 6
    221a:	f8 16       	cp	r15, r24
    221c:	19 f0       	breq	.+6      	; 0x2224 <ir_sensor_init+0xa8>
	&USARTF0   //   -- Channel 5
};

// IR sensors use ADCB channel 0, all the time
void ir_sensor_init()
{
    221e:	15 e0       	ldi	r17, 0x05	; 5
    2220:	0e 2d       	mov	r16, r14
    2222:	ee cf       	rjmp	.-36     	; 0x2200 <ir_sensor_init+0x84>
	//PORTC.DIRSET = (PIN3_bm | PIN7_bm);
	//PORTD.DIRCLR =  PIN3_bm;
	//PORTE.DIRSET = (PIN3_bm | PIN7_bm);
	//PORTF.DIRCLR =  PIN3_bm;	
	//PORTF.DIRSET = ALL_EMITTERS_CARWAV_bm;	//set carrier wave pins to output.
}
    2224:	df 91       	pop	r29
    2226:	cf 91       	pop	r28
    2228:	1f 91       	pop	r17
    222a:	0f 91       	pop	r16
    222c:	ff 90       	pop	r15
    222e:	ef 90       	pop	r14
    2230:	08 95       	ret

00002232 <check_collisions>:
	if(median<ir_sense_baseline[sensor_num])	return 0;
	else										return (median-ir_sense_baseline[sensor_num]);
}

	
uint8_t check_collisions(){
    2232:	5f 92       	push	r5
    2234:	6f 92       	push	r6
    2236:	7f 92       	push	r7
    2238:	8f 92       	push	r8
    223a:	9f 92       	push	r9
    223c:	af 92       	push	r10
    223e:	bf 92       	push	r11
    2240:	cf 92       	push	r12
    2242:	df 92       	push	r13
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	6e 97       	sbiw	r28, 0x1e	; 30
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	de bf       	out	0x3e, r29	; 62
	int16_t baseline_meas[6];
	uint8_t channelCtrlBVals[6];
	volatile int16_t measured_vals[6];
	uint8_t dirs=0;
	//wait_for_ir(ALL_DIRS);
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	80 93 89 2b 	sts	0x2B89, r24
    2260:	80 93 a9 2b 	sts	0x2BA9, r24
    2264:	80 93 c9 2b 	sts	0x2BC9, r24
    2268:	80 93 e9 2b 	sts	0x2BE9, r24
    226c:	80 93 09 2c 	sts	0x2C09, r24
    2270:	80 93 29 2c 	sts	0x2C29, r24
uint8_t count;
uint16_t thePower;
void i2c_init();

void set_all_ir_powers(uint16_t power);
inline uint16_t get_all_ir_powers(){ return thePower; };
    2274:	60 90 ee 29 	lds	r6, 0x29EE
    2278:	70 90 ef 29 	lds	r7, 0x29EF
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
    227c:	80 e0       	ldi	r24, 0x00	; 0
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	0e 94 bf 04 	call	0x97e	; 0x97e <set_all_ir_powers>
    2284:	0f 2e       	mov	r0, r31
    2286:	f2 e1       	ldi	r31, 0x12	; 18
    2288:	ef 2e       	mov	r14, r31
    228a:	f0 e2       	ldi	r31, 0x20	; 32
    228c:	ff 2e       	mov	r15, r31
    228e:	f0 2d       	mov	r31, r0
    2290:	ce 01       	movw	r24, r28
    2292:	0d 96       	adiw	r24, 0x0d	; 13
    2294:	e6 e0       	ldi	r30, 0x06	; 6
    2296:	f0 e2       	ldi	r31, 0x20	; 32
	for(uint8_t i=0;i<6;i++)
	{
		channelCtrlBVals[i] = channel[i]->CTRLB;
    2298:	41 91       	ld	r20, Z+
    229a:	51 91       	ld	r21, Z+
    229c:	da 01       	movw	r26, r20
    229e:	14 96       	adiw	r26, 0x04	; 4
    22a0:	2c 91       	ld	r18, X
    22a2:	dc 01       	movw	r26, r24
    22a4:	2d 93       	st	X+, r18
    22a6:	cd 01       	movw	r24, r26
		channel[i]->CTRLB=0;
    22a8:	da 01       	movw	r26, r20
    22aa:	14 96       	adiw	r26, 0x04	; 4
    22ac:	1c 92       	st	X, r1
	uint8_t dirs=0;
	//wait_for_ir(ALL_DIRS);
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = IR_STATUS_BUSY_bm;	
	uint16_t curr_power = get_all_ir_powers();
	set_all_ir_powers(256);
	for(uint8_t i=0;i<6;i++)
    22ae:	ee 15       	cp	r30, r14
    22b0:	ff 05       	cpc	r31, r15
    22b2:	91 f7       	brne	.-28     	; 0x2298 <check_collisions+0x66>
    22b4:	8e 01       	movw	r16, r28
    22b6:	0f 5f       	subi	r16, 0xFF	; 255
    22b8:	1f 4f       	sbci	r17, 0xFF	; 255
    22ba:	b1 2c       	mov	r11, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    22bc:	0f 2e       	mov	r0, r31
    22be:	ff e8       	ldi	r31, 0x8F	; 143
    22c0:	cf 2e       	mov	r12, r31
    22c2:	dd 24       	eor	r13, r13
    22c4:	d3 94       	inc	r13
    22c6:	f0 2d       	mov	r31, r0
    22c8:	f6 01       	movw	r30, r12
    22ca:	31 97       	sbiw	r30, 0x01	; 1
    22cc:	f1 f7       	brne	.-4      	; 0x22ca <check_collisions+0x98>
    22ce:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    22d0:	00 c0       	rjmp	.+0      	; 0x22d2 <check_collisions+0xa0>
	}
	for(uint8_t i=0;i<6;i++)
	{
		busy_delay_us(50);
		//get_ir_sensor(i);
		baseline_meas[i] = get_ir_sensor(i);
    22d2:	8b 2d       	mov	r24, r11
    22d4:	06 df       	rcall	.-500    	; 0x20e2 <get_ir_sensor>
    22d6:	28 2f       	mov	r18, r24
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	f8 01       	movw	r30, r16
    22dc:	21 93       	st	Z+, r18
    22de:	31 93       	st	Z+, r19
    22e0:	8f 01       	movw	r16, r30
	for(uint8_t i=0;i<6;i++)
	{
		channelCtrlBVals[i] = channel[i]->CTRLB;
		channel[i]->CTRLB=0;
	}
	for(uint8_t i=0;i<6;i++)
    22e2:	b3 94       	inc	r11
    22e4:	f6 e0       	ldi	r31, 0x06	; 6
    22e6:	bf 12       	cpse	r11, r31
    22e8:	ef cf       	rjmp	.-34     	; 0x22c8 <check_collisions+0x96>
	{
		busy_delay_us(50);
		//get_ir_sensor(i);
		baseline_meas[i] = get_ir_sensor(i);
	}
	TCF2.CTRLB &= ~ALL_EMITTERS_CARWAV_bm;	//disable carrier wave output
    22ea:	e0 e0       	ldi	r30, 0x00	; 0
    22ec:	fb e0       	ldi	r31, 0x0B	; 11
    22ee:	81 81       	ldd	r24, Z+1	; 0x01
    22f0:	8c 70       	andi	r24, 0x0C	; 12
    22f2:	81 83       	std	Z+1, r24	; 0x01
	PORTF.OUTSET = ALL_EMITTERS_CARWAV_bm;	// set carrier wave pins high.		
    22f4:	e0 ea       	ldi	r30, 0xA0	; 160
    22f6:	f6 e0       	ldi	r31, 0x06	; 6
    22f8:	83 ef       	ldi	r24, 0xF3	; 243
    22fa:	85 83       	std	Z+5, r24	; 0x05
	PORTC.DIRSET = (PIN3_bm | PIN7_bm);
    22fc:	20 e4       	ldi	r18, 0x40	; 64
    22fe:	36 e0       	ldi	r19, 0x06	; 6
    2300:	58 e8       	ldi	r21, 0x88	; 136
    2302:	d9 01       	movw	r26, r18
    2304:	11 96       	adiw	r26, 0x01	; 1
    2306:	5c 93       	st	X, r21
	PORTD.DIRSET =  PIN3_bm;
    2308:	80 e6       	ldi	r24, 0x60	; 96
    230a:	96 e0       	ldi	r25, 0x06	; 6
    230c:	48 e0       	ldi	r20, 0x08	; 8
    230e:	dc 01       	movw	r26, r24
    2310:	11 96       	adiw	r26, 0x01	; 1
    2312:	4c 93       	st	X, r20
	PORTE.DIRSET = (PIN3_bm | PIN7_bm);
    2314:	60 e8       	ldi	r22, 0x80	; 128
    2316:	76 e0       	ldi	r23, 0x06	; 6
    2318:	db 01       	movw	r26, r22
    231a:	11 96       	adiw	r26, 0x01	; 1
    231c:	5c 93       	st	X, r21
	PORTF.DIRSET =  PIN3_bm;
    231e:	41 83       	std	Z+1, r20	; 0x01

	PORTC.OUTCLR = (PIN3_bm | PIN7_bm);
    2320:	d9 01       	movw	r26, r18
    2322:	16 96       	adiw	r26, 0x06	; 6
    2324:	5c 93       	st	X, r21
	PORTD.OUTCLR = PIN3_bm;
    2326:	dc 01       	movw	r26, r24
    2328:	16 96       	adiw	r26, 0x06	; 6
    232a:	4c 93       	st	X, r20
	PORTE.OUTCLR = (PIN3_bm | PIN7_bm);
    232c:	db 01       	movw	r26, r22
    232e:	16 96       	adiw	r26, 0x06	; 6
    2330:	5c 93       	st	X, r21
	PORTF.OUTCLR = PIN3_bm;
    2332:	46 83       	std	Z+6, r20	; 0x06
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    2334:	8f ec       	ldi	r24, 0xCF	; 207
    2336:	97 e0       	ldi	r25, 0x07	; 7
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <check_collisions+0x106>
    233c:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    233e:	00 c0       	rjmp	.+0      	; 0x2340 <check_collisions+0x10e>

	busy_delay_us(250);
	ADCB.CTRLA |= ADC_FLUSH_bm;
    2340:	e0 e4       	ldi	r30, 0x40	; 64
    2342:	f2 e0       	ldi	r31, 0x02	; 2
    2344:	80 81       	ld	r24, Z
    2346:	82 60       	ori	r24, 0x02	; 2
    2348:	80 83       	st	Z, r24
    234a:	fe 01       	movw	r30, r28
    234c:	31 96       	adiw	r30, 0x01	; 1
    234e:	6f 01       	movw	r12, r30
    2350:	00 e0       	ldi	r16, 0x00	; 0
    2352:	10 e0       	ldi	r17, 0x00	; 0
	
uint8_t check_collisions(){
	int16_t baseline_meas[6];
	uint8_t channelCtrlBVals[6];
	volatile int16_t measured_vals[6];
	uint8_t dirs=0;
    2354:	51 2c       	mov	r5, r1
}

static __inline__ void      /* exactly 4 cycles/loop, max 2**16 loops */
_delay_loop_2_x( uint16_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    2356:	0f 2e       	mov	r0, r31
    2358:	ff ec       	ldi	r31, 0xCF	; 207
    235a:	af 2e       	mov	r10, r31
    235c:	f7 e0       	ldi	r31, 0x07	; 7
    235e:	bf 2e       	mov	r11, r31
    2360:	f0 2d       	mov	r31, r0
		//get_ir_sensor(i);
		measured_vals[i] = get_ir_sensor(i);
		int16_t temp = measured_vals[i]-baseline_meas[i];
		//printf("\t%3d", temp);
		if((measured_vals[i]-baseline_meas[i])>16){
			dirs = dirs|(1<<i);
    2362:	88 24       	eor	r8, r8
    2364:	83 94       	inc	r8
    2366:	91 2c       	mov	r9, r1
    2368:	c5 01       	movw	r24, r10
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <check_collisions+0x138>
    236e:	00 00       	nop
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    2370:	00 c0       	rjmp	.+0      	; 0x2372 <check_collisions+0x140>
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++)
	{
		busy_delay_us(250);
		//get_ir_sensor(i);
		measured_vals[i] = get_ir_sensor(i);
    2372:	80 2f       	mov	r24, r16
    2374:	b6 de       	rcall	.-660    	; 0x20e2 <get_ir_sensor>
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	f8 01       	movw	r30, r16
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	21 e0       	ldi	r18, 0x01	; 1
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	2c 0f       	add	r18, r28
    2384:	3d 1f       	adc	r19, r29
    2386:	e2 0f       	add	r30, r18
    2388:	f3 1f       	adc	r31, r19
    238a:	82 8b       	std	Z+18, r24	; 0x12
    238c:	93 8b       	std	Z+19, r25	; 0x13
		int16_t temp = measured_vals[i]-baseline_meas[i];
    238e:	82 89       	ldd	r24, Z+18	; 0x12
    2390:	93 89       	ldd	r25, Z+19	; 0x13
		//printf("\t%3d", temp);
		if((measured_vals[i]-baseline_meas[i])>16){
    2392:	82 89       	ldd	r24, Z+18	; 0x12
    2394:	93 89       	ldd	r25, Z+19	; 0x13
    2396:	d6 01       	movw	r26, r12
    2398:	2d 91       	ld	r18, X+
    239a:	3d 91       	ld	r19, X+
    239c:	6d 01       	movw	r12, r26
    239e:	82 1b       	sub	r24, r18
    23a0:	93 0b       	sbc	r25, r19
    23a2:	41 97       	sbiw	r24, 0x11	; 17
    23a4:	44 f0       	brlt	.+16     	; 0x23b6 <check_collisions+0x184>
			dirs = dirs|(1<<i);
    23a6:	c4 01       	movw	r24, r8
    23a8:	00 2e       	mov	r0, r16
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <check_collisions+0x17e>
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	0a 94       	dec	r0
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <check_collisions+0x17a>
    23b4:	58 2a       	or	r5, r24
    23b6:	0f 5f       	subi	r16, 0xFF	; 255
    23b8:	1f 4f       	sbci	r17, 0xFF	; 255
	PORTF.OUTCLR = PIN3_bm;

	busy_delay_us(250);
	ADCB.CTRLA |= ADC_FLUSH_bm;
	//delay_ms(1000);
	for(uint8_t i=0;i<6;i++)
    23ba:	06 30       	cpi	r16, 0x06	; 6
    23bc:	11 05       	cpc	r17, r1
    23be:	a1 f6       	brne	.-88     	; 0x2368 <check_collisions+0x136>
		if((measured_vals[i]-baseline_meas[i])>16){
			dirs = dirs|(1<<i);
		}
	}
	//printf("\r\n");
	PORTC.OUTTGL = (PIN3_bm | PIN7_bm);
    23c0:	98 e8       	ldi	r25, 0x88	; 136
    23c2:	e0 e4       	ldi	r30, 0x40	; 64
    23c4:	f6 e0       	ldi	r31, 0x06	; 6
    23c6:	97 83       	std	Z+7, r25	; 0x07
	PORTD.OUTTGL =  PIN3_bm;
    23c8:	88 e0       	ldi	r24, 0x08	; 8
    23ca:	e0 e6       	ldi	r30, 0x60	; 96
    23cc:	f6 e0       	ldi	r31, 0x06	; 6
    23ce:	87 83       	std	Z+7, r24	; 0x07
	PORTE.OUTTGL = (PIN3_bm | PIN7_bm);
    23d0:	e0 e8       	ldi	r30, 0x80	; 128
    23d2:	f6 e0       	ldi	r31, 0x06	; 6
    23d4:	97 83       	std	Z+7, r25	; 0x07
	PORTF.OUTTGL =  PIN3_bm;
    23d6:	e0 ea       	ldi	r30, 0xA0	; 160
    23d8:	f6 e0       	ldi	r31, 0x06	; 6
    23da:	87 83       	std	Z+7, r24	; 0x07
	PORTF.OUTCLR = ALL_EMITTERS_CARWAV_bm;
    23dc:	83 ef       	ldi	r24, 0xF3	; 243
    23de:	86 83       	std	Z+6, r24	; 0x06
    23e0:	ae 01       	movw	r20, r28
    23e2:	43 5f       	subi	r20, 0xF3	; 243
    23e4:	5f 4f       	sbci	r21, 0xFF	; 255
    23e6:	e6 e0       	ldi	r30, 0x06	; 6
    23e8:	f0 e2       	ldi	r31, 0x20	; 32
	for(uint8_t i=0;i<6;i++) channel[i]->CTRLB = channelCtrlBVals[i];
    23ea:	81 91       	ld	r24, Z+
    23ec:	91 91       	ld	r25, Z+
    23ee:	da 01       	movw	r26, r20
    23f0:	2d 91       	ld	r18, X+
    23f2:	ad 01       	movw	r20, r26
    23f4:	dc 01       	movw	r26, r24
    23f6:	14 96       	adiw	r26, 0x04	; 4
    23f8:	2c 93       	st	X, r18
    23fa:	ee 15       	cp	r30, r14
    23fc:	ff 05       	cpc	r31, r15
    23fe:	a9 f7       	brne	.-22     	; 0x23ea <check_collisions+0x1b8>
	TCF2.CTRLB |= ALL_EMITTERS_CARWAV_bm; //reenable carrier wave output
    2400:	e0 e0       	ldi	r30, 0x00	; 0
    2402:	fb e0       	ldi	r31, 0x0B	; 11
    2404:	81 81       	ldd	r24, Z+1	; 0x01
    2406:	83 6f       	ori	r24, 0xF3	; 243
    2408:	81 83       	std	Z+1, r24	; 0x01
	set_all_ir_powers(curr_power);
    240a:	c3 01       	movw	r24, r6
    240c:	0e 94 bf 04 	call	0x97e	; 0x97e <set_all_ir_powers>
	for(uint8_t i=0;i<6;i++) ir_rxtx[i].status = 0;		
    2410:	10 92 89 2b 	sts	0x2B89, r1
    2414:	10 92 a9 2b 	sts	0x2BA9, r1
    2418:	10 92 c9 2b 	sts	0x2BC9, r1
    241c:	10 92 e9 2b 	sts	0x2BE9, r1
    2420:	10 92 09 2c 	sts	0x2C09, r1
    2424:	10 92 29 2c 	sts	0x2C29, r1
	return dirs;
}	
    2428:	85 2d       	mov	r24, r5
    242a:	6e 96       	adiw	r28, 0x1e	; 30
    242c:	cd bf       	out	0x3d, r28	; 61
    242e:	de bf       	out	0x3e, r29	; 62
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	ff 90       	pop	r15
    243a:	ef 90       	pop	r14
    243c:	df 90       	pop	r13
    243e:	cf 90       	pop	r12
    2440:	bf 90       	pop	r11
    2442:	af 90       	pop	r10
    2444:	9f 90       	pop	r9
    2446:	8f 90       	pop	r8
    2448:	7f 90       	pop	r7
    244a:	6f 90       	pop	r6
    244c:	5f 90       	pop	r5
    244e:	08 95       	ret

00002450 <stop>:
		printf("\r\n");
	}
	printf("\r\n");
}
void broadcast_motor_adjusts()
{
    2450:	83 e0       	ldi	r24, 0x03	; 3
    2452:	e0 e0       	ldi	r30, 0x00	; 0
    2454:	f8 e0       	ldi	r31, 0x08	; 8
    2456:	81 83       	std	Z+1, r24	; 0x01
    2458:	e0 e4       	ldi	r30, 0x40	; 64
    245a:	f8 e0       	ldi	r31, 0x08	; 8
    245c:	81 83       	std	Z+1, r24	; 0x01
    245e:	e0 e0       	ldi	r30, 0x00	; 0
    2460:	f9 e0       	ldi	r31, 0x09	; 9
    2462:	81 83       	std	Z+1, r24	; 0x01
    2464:	e0 e4       	ldi	r30, 0x40	; 64
    2466:	f6 e0       	ldi	r31, 0x06	; 6
    2468:	93 e3       	ldi	r25, 0x33	; 51
    246a:	96 83       	std	Z+6, r25	; 0x06
    246c:	a0 e6       	ldi	r26, 0x60	; 96
    246e:	b6 e0       	ldi	r27, 0x06	; 6
    2470:	16 96       	adiw	r26, 0x06	; 6
    2472:	8c 93       	st	X, r24
    2474:	16 97       	sbiw	r26, 0x06	; 6
    2476:	10 8a       	std	Z+16, r1	; 0x10
    2478:	11 8a       	std	Z+17, r1	; 0x11
    247a:	14 8a       	std	Z+20, r1	; 0x14
    247c:	15 8a       	std	Z+21, r1	; 0x15
    247e:	50 96       	adiw	r26, 0x10	; 16
    2480:	1c 92       	st	X, r1
    2482:	50 97       	sbiw	r26, 0x10	; 16
    2484:	51 96       	adiw	r26, 0x11	; 17
    2486:	1c 92       	st	X, r1
    2488:	10 92 36 2a 	sts	0x2A36, r1
    248c:	80 91 ec 29 	lds	r24, 0x29EC
    2490:	90 91 ed 29 	lds	r25, 0x29ED
    2494:	0c 94 4f 26 	jmp	0x4c9e	; 0x4c9e <remove_task>
    2498:	08 95       	ret

0000249a <is_moving>:
    249a:	80 91 36 2a 	lds	r24, 0x2A36
    249e:	88 23       	and	r24, r24
    24a0:	24 f4       	brge	.+8      	; 0x24aa <is_moving+0x10>
    24a2:	80 91 36 2a 	lds	r24, 0x2A36
    24a6:	87 70       	andi	r24, 0x07	; 7
    24a8:	08 95       	ret
    24aa:	8f ef       	ldi	r24, 0xFF	; 255
    24ac:	08 95       	ret

000024ae <move_steps>:
    24ae:	4f 92       	push	r4
    24b0:	5f 92       	push	r5
    24b2:	6f 92       	push	r6
    24b4:	7f 92       	push	r7
    24b6:	8f 92       	push	r8
    24b8:	9f 92       	push	r9
    24ba:	af 92       	push	r10
    24bc:	bf 92       	push	r11
    24be:	cf 92       	push	r12
    24c0:	df 92       	push	r13
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	29 97       	sbiw	r28, 0x09	; 9
    24d4:	cd bf       	out	0x3d, r28	; 61
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	18 2f       	mov	r17, r24
    24da:	7b 01       	movw	r14, r22
    24dc:	de df       	rcall	.-68     	; 0x249a <is_moving>
    24de:	88 23       	and	r24, r24
    24e0:	0c f0       	brlt	.+2      	; 0x24e4 <move_steps+0x36>
    24e2:	79 c1       	rjmp	.+754    	; 0x27d6 <move_steps+0x328>
    24e4:	81 2f       	mov	r24, r17
    24e6:	87 70       	andi	r24, 0x07	; 7
    24e8:	80 68       	ori	r24, 0x80	; 128
    24ea:	80 93 36 2a 	sts	0x2A36, r24
    24ee:	a0 90 cd 2a 	lds	r10, 0x2ACD
    24f2:	b0 90 ce 2a 	lds	r11, 0x2ACE
    24f6:	aa 0c       	add	r10, r10
    24f8:	bb 1c       	adc	r11, r11
    24fa:	aa 0c       	add	r10, r10
    24fc:	bb 1c       	adc	r11, r11
    24fe:	aa 0c       	add	r10, r10
    2500:	bb 1c       	adc	r11, r11
    2502:	aa 0c       	add	r10, r10
    2504:	bb 1c       	adc	r11, r11
    2506:	aa 0c       	add	r10, r10
    2508:	bb 1c       	adc	r11, r11
    250a:	80 90 ef 2a 	lds	r8, 0x2AEF
    250e:	90 90 f0 2a 	lds	r9, 0x2AF0
    2512:	88 0c       	add	r8, r8
    2514:	99 1c       	adc	r9, r9
    2516:	88 0c       	add	r8, r8
    2518:	99 1c       	adc	r9, r9
    251a:	88 0c       	add	r8, r8
    251c:	99 1c       	adc	r9, r9
    251e:	88 0c       	add	r8, r8
    2520:	99 1c       	adc	r9, r9
    2522:	88 0c       	add	r8, r8
    2524:	99 1c       	adc	r9, r9
    2526:	81 2f       	mov	r24, r17
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	9c 01       	movw	r18, r24
    252c:	22 0f       	add	r18, r18
    252e:	33 1f       	adc	r19, r19
    2530:	82 0f       	add	r24, r18
    2532:	93 1f       	adc	r25, r19
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	85 5d       	subi	r24, 0xD5	; 213
    253a:	93 4d       	sbci	r25, 0xD3	; 211
    253c:	9e 01       	movw	r18, r28
    253e:	29 5f       	subi	r18, 0xF9	; 249
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	69 01       	movw	r12, r18
    2544:	fe 01       	movw	r30, r28
    2546:	31 96       	adiw	r30, 0x01	; 1
    2548:	00 e0       	ldi	r16, 0x00	; 0
    254a:	10 e0       	ldi	r17, 0x00	; 0
    254c:	3c 01       	movw	r6, r24
    254e:	dc 01       	movw	r26, r24
    2550:	4d 91       	ld	r20, X+
    2552:	5c 91       	ld	r21, X
    2554:	41 15       	cp	r20, r1
    2556:	51 05       	cpc	r21, r1
    2558:	29 f4       	brne	.+10     	; 0x2564 <move_steps+0xb6>
    255a:	10 82       	st	Z, r1
    255c:	11 82       	std	Z+1, r1	; 0x01
    255e:	d9 01       	movw	r26, r18
    2560:	1c 92       	st	X, r1
    2562:	18 c0       	rjmp	.+48     	; 0x2594 <move_steps+0xe6>
    2564:	ba 01       	movw	r22, r20
    2566:	55 23       	and	r21, r21
    2568:	24 f4       	brge	.+8      	; 0x2572 <move_steps+0xc4>
    256a:	66 27       	eor	r22, r22
    256c:	77 27       	eor	r23, r23
    256e:	64 1b       	sub	r22, r20
    2570:	75 0b       	sbc	r23, r21
    2572:	6a 0d       	add	r22, r10
    2574:	7b 1d       	adc	r23, r11
    2576:	60 83       	st	Z, r22
    2578:	71 83       	std	Z+1, r23	; 0x01
    257a:	d3 01       	movw	r26, r6
    257c:	11 96       	adiw	r26, 0x01	; 1
    257e:	4c 91       	ld	r20, X
    2580:	44 0f       	add	r20, r20
    2582:	44 0b       	sbc	r20, r20
    2584:	44 0f       	add	r20, r20
    2586:	4f 5f       	subi	r20, 0xFF	; 255
    2588:	d9 01       	movw	r26, r18
    258a:	4c 93       	st	X, r20
    258c:	08 0d       	add	r16, r8
    258e:	19 1d       	adc	r17, r9
    2590:	06 0f       	add	r16, r22
    2592:	17 1f       	adc	r17, r23
    2594:	02 96       	adiw	r24, 0x02	; 2
    2596:	32 96       	adiw	r30, 0x02	; 2
    2598:	2f 5f       	subi	r18, 0xFF	; 255
    259a:	3f 4f       	sbci	r19, 0xFF	; 255
    259c:	ec 15       	cp	r30, r12
    259e:	fd 05       	cpc	r31, r13
    25a0:	a9 f6       	brne	.-86     	; 0x254c <move_steps+0x9e>
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	59 e0       	ldi	r21, 0x09	; 9
    25a6:	fa 01       	movw	r30, r20
    25a8:	06 a3       	std	Z+38, r16	; 0x26
    25aa:	17 a3       	std	Z+39, r17	; 0x27
    25ac:	a0 e4       	ldi	r26, 0x40	; 64
    25ae:	b8 e0       	ldi	r27, 0x08	; 8
    25b0:	96 96       	adiw	r26, 0x26	; 38
    25b2:	0d 93       	st	X+, r16
    25b4:	1c 93       	st	X, r17
    25b6:	97 97       	sbiw	r26, 0x27	; 39
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	98 e0       	ldi	r25, 0x08	; 8
    25bc:	fc 01       	movw	r30, r24
    25be:	06 a3       	std	Z+38, r16	; 0x26
    25c0:	17 a3       	std	Z+39, r17	; 0x27
    25c2:	29 81       	ldd	r18, Y+1	; 0x01
    25c4:	3a 81       	ldd	r19, Y+2	; 0x02
    25c6:	22 a7       	std	Z+42, r18	; 0x2a
    25c8:	33 a7       	std	Z+43, r19	; 0x2b
    25ca:	20 a7       	std	Z+40, r18	; 0x28
    25cc:	31 a7       	std	Z+41, r19	; 0x29
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	9a 96       	adiw	r26, 0x2a	; 42
    25d4:	8d 93       	st	X+, r24
    25d6:	9c 93       	st	X, r25
    25d8:	9b 97       	sbiw	r26, 0x2b	; 43
    25da:	98 96       	adiw	r26, 0x28	; 40
    25dc:	8d 93       	st	X+, r24
    25de:	9c 93       	st	X, r25
    25e0:	99 97       	sbiw	r26, 0x29	; 41
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	da 01       	movw	r26, r20
    25e8:	9a 96       	adiw	r26, 0x2a	; 42
    25ea:	8d 93       	st	X+, r24
    25ec:	9c 93       	st	X, r25
    25ee:	9b 97       	sbiw	r26, 0x2b	; 43
    25f0:	98 96       	adiw	r26, 0x28	; 40
    25f2:	8d 93       	st	X+, r24
    25f4:	9c 93       	st	X, r25
    25f6:	99 97       	sbiw	r26, 0x29	; 41
    25f8:	a0 90 ef 2a 	lds	r10, 0x2AEF
    25fc:	b0 90 f0 2a 	lds	r11, 0x2AF0
    2600:	aa 0c       	add	r10, r10
    2602:	bb 1c       	adc	r11, r11
    2604:	aa 0c       	add	r10, r10
    2606:	bb 1c       	adc	r11, r11
    2608:	aa 0c       	add	r10, r10
    260a:	bb 1c       	adc	r11, r11
    260c:	aa 0c       	add	r10, r10
    260e:	bb 1c       	adc	r11, r11
    2610:	aa 0c       	add	r10, r10
    2612:	bb 1c       	adc	r11, r11
    2614:	fe 01       	movw	r30, r28
    2616:	31 96       	adiw	r30, 0x01	; 1
    2618:	6f 01       	movw	r12, r30
    261a:	40 e0       	ldi	r20, 0x00	; 0
    261c:	e0 e0       	ldi	r30, 0x00	; 0
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	68 94       	set
    2622:	88 24       	eor	r8, r8
    2624:	86 f8       	bld	r8, 6
    2626:	99 24       	eor	r9, r9
    2628:	93 f8       	bld	r9, 3
    262a:	61 2c       	mov	r6, r1
    262c:	68 94       	set
    262e:	77 24       	eor	r7, r7
    2630:	73 f8       	bld	r7, 3
    2632:	0f 2e       	mov	r0, r31
    2634:	41 2c       	mov	r4, r1
    2636:	f9 e0       	ldi	r31, 0x09	; 9
    2638:	5f 2e       	mov	r5, r31
    263a:	f0 2d       	mov	r31, r0
    263c:	d6 01       	movw	r26, r12
    263e:	2d 91       	ld	r18, X+
    2640:	3d 91       	ld	r19, X+
    2642:	6d 01       	movw	r12, r26
    2644:	21 15       	cp	r18, r1
    2646:	31 05       	cpc	r19, r1
    2648:	69 f1       	breq	.+90     	; 0x26a4 <move_steps+0x1f6>
    264a:	41 30       	cpi	r20, 0x01	; 1
    264c:	81 f0       	breq	.+32     	; 0x266e <move_steps+0x1c0>
    264e:	18 f0       	brcs	.+6      	; 0x2656 <move_steps+0x1a8>
    2650:	42 30       	cpi	r20, 0x02	; 2
    2652:	c9 f0       	breq	.+50     	; 0x2686 <move_steps+0x1d8>
    2654:	23 c0       	rjmp	.+70     	; 0x269c <move_steps+0x1ee>
    2656:	c8 01       	movw	r24, r16
    2658:	8e 1b       	sub	r24, r30
    265a:	9f 0b       	sbc	r25, r31
    265c:	b8 01       	movw	r22, r16
    265e:	0e 94 01 3c 	call	0x7802	; 0x7802 <__udivmodhi4>
    2662:	d3 01       	movw	r26, r6
    2664:	90 96       	adiw	r26, 0x20	; 32
    2666:	8d 93       	st	X+, r24
    2668:	9c 93       	st	X, r25
    266a:	91 97       	sbiw	r26, 0x21	; 33
    266c:	17 c0       	rjmp	.+46     	; 0x269c <move_steps+0x1ee>
    266e:	c8 01       	movw	r24, r16
    2670:	8e 1b       	sub	r24, r30
    2672:	9f 0b       	sbc	r25, r31
    2674:	b8 01       	movw	r22, r16
    2676:	0e 94 01 3c 	call	0x7802	; 0x7802 <__udivmodhi4>
    267a:	d4 01       	movw	r26, r8
    267c:	90 96       	adiw	r26, 0x20	; 32
    267e:	8d 93       	st	X+, r24
    2680:	9c 93       	st	X, r25
    2682:	91 97       	sbiw	r26, 0x21	; 33
    2684:	0b c0       	rjmp	.+22     	; 0x269c <move_steps+0x1ee>
    2686:	c8 01       	movw	r24, r16
    2688:	8e 1b       	sub	r24, r30
    268a:	9f 0b       	sbc	r25, r31
    268c:	b8 01       	movw	r22, r16
    268e:	0e 94 01 3c 	call	0x7802	; 0x7802 <__udivmodhi4>
    2692:	d2 01       	movw	r26, r4
    2694:	90 96       	adiw	r26, 0x20	; 32
    2696:	8d 93       	st	X+, r24
    2698:	9c 93       	st	X, r25
    269a:	91 97       	sbiw	r26, 0x21	; 33
    269c:	ea 0d       	add	r30, r10
    269e:	fb 1d       	adc	r31, r11
    26a0:	e2 0f       	add	r30, r18
    26a2:	f3 1f       	adc	r31, r19
    26a4:	4f 5f       	subi	r20, 0xFF	; 255
    26a6:	43 30       	cpi	r20, 0x03	; 3
    26a8:	49 f6       	brne	.-110    	; 0x263c <move_steps+0x18e>
    26aa:	0e 17       	cp	r16, r30
    26ac:	1f 07       	cpc	r17, r31
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <move_steps+0x204>
    26b0:	94 c0       	rjmp	.+296    	; 0x27da <move_steps+0x32c>
    26b2:	1f 93       	push	r17
    26b4:	0f 93       	push	r16
    26b6:	ff 93       	push	r31
    26b8:	ef 93       	push	r30
    26ba:	85 ea       	ldi	r24, 0xA5	; 165
    26bc:	91 e2       	ldi	r25, 0x21	; 33
    26be:	9f 93       	push	r25
    26c0:	8f 93       	push	r24
    26c2:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	0f 90       	pop	r0
    26d2:	83 c0       	rjmp	.+262    	; 0x27da <move_steps+0x32c>
    26d4:	5f 5f       	subi	r21, 0xFF	; 255
    26d6:	4f ef       	ldi	r20, 0xFF	; 255
    26d8:	45 0f       	add	r20, r21
    26da:	e7 e0       	ldi	r30, 0x07	; 7
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	ec 0f       	add	r30, r28
    26e0:	fd 1f       	adc	r31, r29
    26e2:	e4 0f       	add	r30, r20
    26e4:	f1 1d       	adc	r31, r1
    26e6:	60 81       	ld	r22, Z
    26e8:	66 23       	and	r22, r22
    26ea:	64 f5       	brge	.+88     	; 0x2744 <move_steps+0x296>
    26ec:	41 30       	cpi	r20, 0x01	; 1
    26ee:	89 f0       	breq	.+34     	; 0x2712 <move_steps+0x264>
    26f0:	18 f0       	brcs	.+6      	; 0x26f8 <move_steps+0x24a>
    26f2:	42 30       	cpi	r20, 0x02	; 2
    26f4:	d9 f0       	breq	.+54     	; 0x272c <move_steps+0x27e>
    26f6:	54 c0       	rjmp	.+168    	; 0x27a0 <move_steps+0x2f2>
    26f8:	fc 01       	movw	r30, r24
    26fa:	c1 82       	std	Z+1, r12	; 0x01
    26fc:	50 96       	adiw	r26, 0x10	; 16
    26fe:	7c 93       	st	X, r23
    2700:	50 97       	sbiw	r26, 0x10	; 16
    2702:	15 96       	adiw	r26, 0x05	; 5
    2704:	4c 91       	ld	r20, X
    2706:	15 97       	sbiw	r26, 0x05	; 5
    2708:	42 60       	ori	r20, 0x02	; 2
    270a:	15 96       	adiw	r26, 0x05	; 5
    270c:	4c 93       	st	X, r20
    270e:	15 97       	sbiw	r26, 0x05	; 5
    2710:	e1 cf       	rjmp	.-62     	; 0x26d4 <move_steps+0x226>
    2712:	f9 01       	movw	r30, r18
    2714:	c1 82       	std	Z+1, r12	; 0x01
    2716:	54 96       	adiw	r26, 0x14	; 20
    2718:	7c 93       	st	X, r23
    271a:	54 97       	sbiw	r26, 0x14	; 20
    271c:	15 96       	adiw	r26, 0x05	; 5
    271e:	4c 91       	ld	r20, X
    2720:	15 97       	sbiw	r26, 0x05	; 5
    2722:	40 62       	ori	r20, 0x20	; 32
    2724:	15 96       	adiw	r26, 0x05	; 5
    2726:	4c 93       	st	X, r20
    2728:	15 97       	sbiw	r26, 0x05	; 5
    272a:	d4 cf       	rjmp	.-88     	; 0x26d4 <move_steps+0x226>
    272c:	83 e1       	ldi	r24, 0x13	; 19
    272e:	e0 e0       	ldi	r30, 0x00	; 0
    2730:	f9 e0       	ldi	r31, 0x09	; 9
    2732:	81 83       	std	Z+1, r24	; 0x01
    2734:	e0 e6       	ldi	r30, 0x60	; 96
    2736:	f6 e0       	ldi	r31, 0x06	; 6
    2738:	80 e4       	ldi	r24, 0x40	; 64
    273a:	80 8b       	std	Z+16, r24	; 0x10
    273c:	85 81       	ldd	r24, Z+5	; 0x05
    273e:	82 60       	ori	r24, 0x02	; 2
    2740:	85 83       	std	Z+5, r24	; 0x05
    2742:	31 c0       	rjmp	.+98     	; 0x27a6 <move_steps+0x2f8>
    2744:	16 16       	cp	r1, r22
    2746:	64 f5       	brge	.+88     	; 0x27a0 <move_steps+0x2f2>
    2748:	41 30       	cpi	r20, 0x01	; 1
    274a:	89 f0       	breq	.+34     	; 0x276e <move_steps+0x2c0>
    274c:	18 f0       	brcs	.+6      	; 0x2754 <move_steps+0x2a6>
    274e:	42 30       	cpi	r20, 0x02	; 2
    2750:	d9 f0       	breq	.+54     	; 0x2788 <move_steps+0x2da>
    2752:	26 c0       	rjmp	.+76     	; 0x27a0 <move_steps+0x2f2>
    2754:	fc 01       	movw	r30, r24
    2756:	d1 82       	std	Z+1, r13	; 0x01
    2758:	51 96       	adiw	r26, 0x11	; 17
    275a:	7c 93       	st	X, r23
    275c:	51 97       	sbiw	r26, 0x11	; 17
    275e:	15 96       	adiw	r26, 0x05	; 5
    2760:	4c 91       	ld	r20, X
    2762:	15 97       	sbiw	r26, 0x05	; 5
    2764:	41 60       	ori	r20, 0x01	; 1
    2766:	15 96       	adiw	r26, 0x05	; 5
    2768:	4c 93       	st	X, r20
    276a:	15 97       	sbiw	r26, 0x05	; 5
    276c:	b3 cf       	rjmp	.-154    	; 0x26d4 <move_steps+0x226>
    276e:	f9 01       	movw	r30, r18
    2770:	d1 82       	std	Z+1, r13	; 0x01
    2772:	55 96       	adiw	r26, 0x15	; 21
    2774:	7c 93       	st	X, r23
    2776:	55 97       	sbiw	r26, 0x15	; 21
    2778:	15 96       	adiw	r26, 0x05	; 5
    277a:	4c 91       	ld	r20, X
    277c:	15 97       	sbiw	r26, 0x05	; 5
    277e:	40 61       	ori	r20, 0x10	; 16
    2780:	15 96       	adiw	r26, 0x05	; 5
    2782:	4c 93       	st	X, r20
    2784:	15 97       	sbiw	r26, 0x05	; 5
    2786:	a6 cf       	rjmp	.-180    	; 0x26d4 <move_steps+0x226>
    2788:	83 e2       	ldi	r24, 0x23	; 35
    278a:	e0 e0       	ldi	r30, 0x00	; 0
    278c:	f9 e0       	ldi	r31, 0x09	; 9
    278e:	81 83       	std	Z+1, r24	; 0x01
    2790:	e0 e6       	ldi	r30, 0x60	; 96
    2792:	f6 e0       	ldi	r31, 0x06	; 6
    2794:	80 e4       	ldi	r24, 0x40	; 64
    2796:	81 8b       	std	Z+17, r24	; 0x11
    2798:	85 81       	ldd	r24, Z+5	; 0x05
    279a:	81 60       	ori	r24, 0x01	; 1
    279c:	85 83       	std	Z+5, r24	; 0x05
    279e:	03 c0       	rjmp	.+6      	; 0x27a6 <move_steps+0x2f8>
    27a0:	53 30       	cpi	r21, 0x03	; 3
    27a2:	08 f4       	brcc	.+2      	; 0x27a6 <move_steps+0x2f8>
    27a4:	97 cf       	rjmp	.-210    	; 0x26d4 <move_steps+0x226>
    27a6:	98 01       	movw	r18, r16
    27a8:	d7 01       	movw	r26, r14
    27aa:	0e 94 50 3c 	call	0x78a0	; 0x78a0 <__umulhisi3>
    27ae:	68 94       	set
    27b0:	14 f8       	bld	r1, 4
    27b2:	96 95       	lsr	r25
    27b4:	87 95       	ror	r24
    27b6:	77 95       	ror	r23
    27b8:	67 95       	ror	r22
    27ba:	16 94       	lsr	r1
    27bc:	d1 f7       	brne	.-12     	; 0x27b2 <move_steps+0x304>
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	48 e2       	ldi	r20, 0x28	; 40
    27c4:	52 e1       	ldi	r21, 0x12	; 18
    27c6:	0e 94 d6 24 	call	0x49ac	; 0x49ac <schedule_task>
    27ca:	80 93 ec 29 	sts	0x29EC, r24
    27ce:	90 93 ed 29 	sts	0x29ED, r25
    27d2:	81 e0       	ldi	r24, 0x01	; 1
    27d4:	13 c0       	rjmp	.+38     	; 0x27fc <move_steps+0x34e>
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	11 c0       	rjmp	.+34     	; 0x27fc <move_steps+0x34e>
    27da:	51 e0       	ldi	r21, 0x01	; 1
    27dc:	20 e4       	ldi	r18, 0x40	; 64
    27de:	38 e0       	ldi	r19, 0x08	; 8
    27e0:	0f 2e       	mov	r0, r31
    27e2:	f3 e2       	ldi	r31, 0x23	; 35
    27e4:	df 2e       	mov	r13, r31
    27e6:	f0 2d       	mov	r31, r0
    27e8:	a0 e4       	ldi	r26, 0x40	; 64
    27ea:	b6 e0       	ldi	r27, 0x06	; 6
    27ec:	70 e4       	ldi	r23, 0x40	; 64
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	98 e0       	ldi	r25, 0x08	; 8
    27f2:	0f 2e       	mov	r0, r31
    27f4:	f3 e1       	ldi	r31, 0x13	; 19
    27f6:	cf 2e       	mov	r12, r31
    27f8:	f0 2d       	mov	r31, r0
    27fa:	6d cf       	rjmp	.-294    	; 0x26d6 <move_steps+0x228>
    27fc:	29 96       	adiw	r28, 0x09	; 9
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    2806:	1f 91       	pop	r17
    2808:	0f 91       	pop	r16
    280a:	ff 90       	pop	r15
    280c:	ef 90       	pop	r14
    280e:	df 90       	pop	r13
    2810:	cf 90       	pop	r12
    2812:	bf 90       	pop	r11
    2814:	af 90       	pop	r10
    2816:	9f 90       	pop	r9
    2818:	8f 90       	pop	r8
    281a:	7f 90       	pop	r7
    281c:	6f 90       	pop	r6
    281e:	5f 90       	pop	r5
    2820:	4f 90       	pop	r4
    2822:	08 95       	ret

00002824 <walk>:
    2824:	af 92       	push	r10
    2826:	bf 92       	push	r11
    2828:	cf 92       	push	r12
    282a:	df 92       	push	r13
    282c:	ef 92       	push	r14
    282e:	ff 92       	push	r15
    2830:	1f 93       	push	r17
    2832:	cf 93       	push	r28
    2834:	df 93       	push	r29
    2836:	18 2f       	mov	r17, r24
    2838:	eb 01       	movw	r28, r22
    283a:	a8 2e       	mov	r10, r24
    283c:	b1 2c       	mov	r11, r1
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	0e 94 43 36 	call	0x6c86	; 0x6c86 <__floatunsisf>
    2846:	6b 01       	movw	r12, r22
    2848:	7c 01       	movw	r14, r24
    284a:	f5 01       	movw	r30, r10
    284c:	ee 0f       	add	r30, r30
    284e:	ff 1f       	adc	r31, r31
    2850:	e6 5a       	subi	r30, 0xA6	; 166
    2852:	f4 4d       	sbci	r31, 0xD4	; 212
    2854:	60 81       	ld	r22, Z
    2856:	71 81       	ldd	r23, Z+1	; 0x01
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	0e 94 43 36 	call	0x6c86	; 0x6c86 <__floatunsisf>
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4a e7       	ldi	r20, 0x7A	; 122
    2866:	54 e4       	ldi	r21, 0x44	; 68
    2868:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    286c:	9b 01       	movw	r18, r22
    286e:	ac 01       	movw	r20, r24
    2870:	c7 01       	movw	r24, r14
    2872:	b6 01       	movw	r22, r12
    2874:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    2878:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <__fixunssfsi>
    287c:	e6 2e       	mov	r14, r22
    287e:	f7 2e       	mov	r15, r23
    2880:	7f 93       	push	r23
    2882:	6f 93       	push	r22
    2884:	df 93       	push	r29
    2886:	cf 93       	push	r28
    2888:	1f 92       	push	r1
    288a:	1f 93       	push	r17
    288c:	8b ee       	ldi	r24, 0xEB	; 235
    288e:	91 e2       	ldi	r25, 0x21	; 33
    2890:	9f 93       	push	r25
    2892:	8f 93       	push	r24
    2894:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    2898:	6e 2d       	mov	r22, r14
    289a:	7f 2d       	mov	r23, r15
    289c:	81 2f       	mov	r24, r17
    289e:	07 de       	rcall	.-1010   	; 0x24ae <move_steps>
    28a0:	8d b7       	in	r24, 0x3d	; 61
    28a2:	9e b7       	in	r25, 0x3e	; 62
    28a4:	08 96       	adiw	r24, 0x08	; 8
    28a6:	8d bf       	out	0x3d, r24	; 61
    28a8:	9e bf       	out	0x3e, r25	; 62
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	1f 91       	pop	r17
    28b0:	ff 90       	pop	r15
    28b2:	ef 90       	pop	r14
    28b4:	df 90       	pop	r13
    28b6:	cf 90       	pop	r12
    28b8:	bf 90       	pop	r11
    28ba:	af 90       	pop	r10
    28bc:	08 95       	ret

000028be <set_mm_per_kilostep>:
    28be:	e8 2f       	mov	r30, r24
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	ee 0f       	add	r30, r30
    28c4:	ff 1f       	adc	r31, r31
    28c6:	e6 5a       	subi	r30, 0xA6	; 166
    28c8:	f4 4d       	sbci	r31, 0xD4	; 212
    28ca:	60 83       	st	Z, r22
    28cc:	71 83       	std	Z+1, r23	; 0x01
    28ce:	08 95       	ret

000028d0 <read_motor_settings>:
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	cf 93       	push	r28
    28d8:	df 93       	push	r29
    28da:	c0 e0       	ldi	r28, 0x00	; 0
    28dc:	d0 e0       	ldi	r29, 0x00	; 0
    28de:	1b c0       	rjmp	.+54     	; 0x2916 <read_motor_settings+0x46>
    28e0:	ce 01       	movw	r24, r28
    28e2:	40 96       	adiw	r24, 0x10	; 16
    28e4:	0e 94 17 04 	call	0x82e	; 0x82e <EEPROM_read_byte>
    28e8:	f8 2e       	mov	r15, r24
    28ea:	ce 01       	movw	r24, r28
    28ec:	41 96       	adiw	r24, 0x11	; 17
    28ee:	0e 94 17 04 	call	0x82e	; 0x82e <EEPROM_read_byte>
    28f2:	fe 01       	movw	r30, r28
    28f4:	e5 5d       	subi	r30, 0xD5	; 213
    28f6:	f3 4d       	sbci	r31, 0xD3	; 211
    28f8:	2f 2d       	mov	r18, r15
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	32 2f       	mov	r19, r18
    28fe:	22 27       	eor	r18, r18
    2900:	28 2b       	or	r18, r24
    2902:	20 83       	st	Z, r18
    2904:	31 83       	std	Z+1, r19	; 0x01
    2906:	22 96       	adiw	r28, 0x02	; 2
    2908:	c0 17       	cp	r28, r16
    290a:	d1 07       	cpc	r29, r17
    290c:	49 f7       	brne	.-46     	; 0x28e0 <read_motor_settings+0x10>
    290e:	00 33       	cpi	r16, 0x30	; 48
    2910:	11 05       	cpc	r17, r1
    2912:	29 f0       	breq	.+10     	; 0x291e <read_motor_settings+0x4e>
    2914:	e8 01       	movw	r28, r16
    2916:	8e 01       	movw	r16, r28
    2918:	0a 5f       	subi	r16, 0xFA	; 250
    291a:	1f 4f       	sbci	r17, 0xFF	; 255
    291c:	e1 cf       	rjmp	.-62     	; 0x28e0 <read_motor_settings+0x10>
    291e:	0a e5       	ldi	r16, 0x5A	; 90
    2920:	1b e2       	ldi	r17, 0x2B	; 43
    2922:	c0 e4       	ldi	r28, 0x40	; 64
    2924:	d0 e0       	ldi	r29, 0x00	; 0
    2926:	ce 01       	movw	r24, r28
    2928:	0e 94 17 04 	call	0x82e	; 0x82e <EEPROM_read_byte>
    292c:	f8 2e       	mov	r15, r24
    292e:	ce 01       	movw	r24, r28
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	0e 94 17 04 	call	0x82e	; 0x82e <EEPROM_read_byte>
    2936:	2f 2d       	mov	r18, r15
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	32 2f       	mov	r19, r18
    293c:	22 27       	eor	r18, r18
    293e:	28 2b       	or	r18, r24
    2940:	f8 01       	movw	r30, r16
    2942:	21 93       	st	Z+, r18
    2944:	31 93       	st	Z+, r19
    2946:	8f 01       	movw	r16, r30
    2948:	22 96       	adiw	r28, 0x02	; 2
    294a:	c0 35       	cpi	r28, 0x50	; 80
    294c:	d1 05       	cpc	r29, r1
    294e:	59 f7       	brne	.-42     	; 0x2926 <read_motor_settings+0x56>
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	08 95       	ret

0000295c <motor_init>:
    295c:	83 e3       	ldi	r24, 0x33	; 51
    295e:	e0 e4       	ldi	r30, 0x40	; 64
    2960:	f6 e0       	ldi	r31, 0x06	; 6
    2962:	81 83       	std	Z+1, r24	; 0x01
    2964:	83 e0       	ldi	r24, 0x03	; 3
    2966:	e0 e6       	ldi	r30, 0x60	; 96
    2968:	f6 e0       	ldi	r31, 0x06	; 6
    296a:	81 83       	std	Z+1, r24	; 0x01
    296c:	e0 e0       	ldi	r30, 0x00	; 0
    296e:	f8 e0       	ldi	r31, 0x08	; 8
    2970:	97 e0       	ldi	r25, 0x07	; 7
    2972:	90 83       	st	Z, r25
    2974:	81 83       	std	Z+1, r24	; 0x01
    2976:	e0 e4       	ldi	r30, 0x40	; 64
    2978:	f8 e0       	ldi	r31, 0x08	; 8
    297a:	90 83       	st	Z, r25
    297c:	81 83       	std	Z+1, r24	; 0x01
    297e:	e0 e0       	ldi	r30, 0x00	; 0
    2980:	f9 e0       	ldi	r31, 0x09	; 9
    2982:	90 83       	st	Z, r25
    2984:	81 83       	std	Z+1, r24	; 0x01
    2986:	10 92 36 2a 	sts	0x2A36, r1
    298a:	84 e1       	ldi	r24, 0x14	; 20
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	80 93 cd 2a 	sts	0x2ACD, r24
    2992:	90 93 ce 2a 	sts	0x2ACE, r25
    2996:	8e e1       	ldi	r24, 0x1E	; 30
    2998:	90 e0       	ldi	r25, 0x00	; 0
    299a:	80 93 ef 2a 	sts	0x2AEF, r24
    299e:	90 93 f0 2a 	sts	0x2AF0, r25
    29a2:	96 cf       	rjmp	.-212    	; 0x28d0 <read_motor_settings>
    29a4:	08 95       	ret

000029a6 <write_motor_settings>:
    29a6:	ff 92       	push	r15
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	c0 e0       	ldi	r28, 0x00	; 0
    29b2:	d0 e0       	ldi	r29, 0x00	; 0
    29b4:	16 c0       	rjmp	.+44     	; 0x29e2 <write_motor_settings+0x3c>
    29b6:	fe 01       	movw	r30, r28
    29b8:	e5 5d       	subi	r30, 0xD5	; 213
    29ba:	f3 4d       	sbci	r31, 0xD3	; 211
    29bc:	f0 80       	ld	r15, Z
    29be:	61 81       	ldd	r22, Z+1	; 0x01
    29c0:	ce 01       	movw	r24, r28
    29c2:	40 96       	adiw	r24, 0x10	; 16
    29c4:	0e 94 32 04 	call	0x864	; 0x864 <EEPROM_write_byte>
    29c8:	6f 2d       	mov	r22, r15
    29ca:	ce 01       	movw	r24, r28
    29cc:	41 96       	adiw	r24, 0x11	; 17
    29ce:	0e 94 32 04 	call	0x864	; 0x864 <EEPROM_write_byte>
    29d2:	22 96       	adiw	r28, 0x02	; 2
    29d4:	c0 17       	cp	r28, r16
    29d6:	d1 07       	cpc	r29, r17
    29d8:	71 f7       	brne	.-36     	; 0x29b6 <write_motor_settings+0x10>
    29da:	00 33       	cpi	r16, 0x30	; 48
    29dc:	11 05       	cpc	r17, r1
    29de:	29 f0       	breq	.+10     	; 0x29ea <write_motor_settings+0x44>
    29e0:	e8 01       	movw	r28, r16
    29e2:	8e 01       	movw	r16, r28
    29e4:	0a 5f       	subi	r16, 0xFA	; 250
    29e6:	1f 4f       	sbci	r17, 0xFF	; 255
    29e8:	e6 cf       	rjmp	.-52     	; 0x29b6 <write_motor_settings+0x10>
    29ea:	0a e5       	ldi	r16, 0x5A	; 90
    29ec:	1b e2       	ldi	r17, 0x2B	; 43
    29ee:	c0 e4       	ldi	r28, 0x40	; 64
    29f0:	d0 e0       	ldi	r29, 0x00	; 0
    29f2:	f8 01       	movw	r30, r16
    29f4:	f0 80       	ld	r15, Z
    29f6:	61 81       	ldd	r22, Z+1	; 0x01
    29f8:	0e 5f       	subi	r16, 0xFE	; 254
    29fa:	1f 4f       	sbci	r17, 0xFF	; 255
    29fc:	ce 01       	movw	r24, r28
    29fe:	0e 94 32 04 	call	0x864	; 0x864 <EEPROM_write_byte>
    2a02:	6f 2d       	mov	r22, r15
    2a04:	ce 01       	movw	r24, r28
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	0e 94 32 04 	call	0x864	; 0x864 <EEPROM_write_byte>
    2a0c:	22 96       	adiw	r28, 0x02	; 2
    2a0e:	c0 35       	cpi	r28, 0x50	; 80
    2a10:	d1 05       	cpc	r29, r1
    2a12:	79 f7       	brne	.-34     	; 0x29f2 <write_motor_settings+0x4c>
    2a14:	df 91       	pop	r29
    2a16:	cf 91       	pop	r28
    2a18:	1f 91       	pop	r17
    2a1a:	0f 91       	pop	r16
    2a1c:	ff 90       	pop	r15
    2a1e:	08 95       	ret

00002a20 <print_motor_values>:
    2a20:	9f 92       	push	r9
    2a22:	af 92       	push	r10
    2a24:	bf 92       	push	r11
    2a26:	cf 92       	push	r12
    2a28:	df 92       	push	r13
    2a2a:	ef 92       	push	r14
    2a2c:	ff 92       	push	r15
    2a2e:	0f 93       	push	r16
    2a30:	1f 93       	push	r17
    2a32:	cf 93       	push	r28
    2a34:	df 93       	push	r29
    2a36:	88 e2       	ldi	r24, 0x28	; 40
    2a38:	92 e2       	ldi	r25, 0x22	; 34
    2a3a:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    2a3e:	0f 2e       	mov	r0, r31
    2a40:	fb e2       	ldi	r31, 0x2B	; 43
    2a42:	cf 2e       	mov	r12, r31
    2a44:	fc e2       	ldi	r31, 0x2C	; 44
    2a46:	df 2e       	mov	r13, r31
    2a48:	f0 2d       	mov	r31, r0
    2a4a:	e1 2c       	mov	r14, r1
    2a4c:	f1 2c       	mov	r15, r1
    2a4e:	0f 2e       	mov	r0, r31
    2a50:	f6 e3       	ldi	r31, 0x36	; 54
    2a52:	af 2e       	mov	r10, r31
    2a54:	f2 e2       	ldi	r31, 0x22	; 34
    2a56:	bf 2e       	mov	r11, r31
    2a58:	f0 2d       	mov	r31, r0
    2a5a:	0c e3       	ldi	r16, 0x3C	; 60
    2a5c:	12 e2       	ldi	r17, 0x22	; 34
    2a5e:	ff 92       	push	r15
    2a60:	ef 92       	push	r14
    2a62:	bf 92       	push	r11
    2a64:	af 92       	push	r10
    2a66:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    2a6a:	0f 90       	pop	r0
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	e6 01       	movw	r28, r12
    2a74:	91 2c       	mov	r9, r1
    2a76:	88 81       	ld	r24, Y
    2a78:	99 81       	ldd	r25, Y+1	; 0x01
    2a7a:	22 96       	adiw	r28, 0x02	; 2
    2a7c:	9f 93       	push	r25
    2a7e:	8f 93       	push	r24
    2a80:	1f 93       	push	r17
    2a82:	0f 93       	push	r16
    2a84:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    2a88:	93 94       	inc	r9
    2a8a:	0f 90       	pop	r0
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	83 e0       	ldi	r24, 0x03	; 3
    2a94:	98 12       	cpse	r9, r24
    2a96:	ef cf       	rjmp	.-34     	; 0x2a76 <print_motor_values+0x56>
    2a98:	80 ed       	ldi	r24, 0xD0	; 208
    2a9a:	99 e2       	ldi	r25, 0x29	; 41
    2a9c:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    2aa0:	8f ef       	ldi	r24, 0xFF	; 255
    2aa2:	e8 1a       	sub	r14, r24
    2aa4:	f8 0a       	sbc	r15, r24
    2aa6:	86 e0       	ldi	r24, 0x06	; 6
    2aa8:	c8 0e       	add	r12, r24
    2aaa:	d1 1c       	adc	r13, r1
    2aac:	88 e0       	ldi	r24, 0x08	; 8
    2aae:	e8 16       	cp	r14, r24
    2ab0:	f1 04       	cpc	r15, r1
    2ab2:	a9 f6       	brne	.-86     	; 0x2a5e <print_motor_values+0x3e>
    2ab4:	80 ed       	ldi	r24, 0xD0	; 208
    2ab6:	99 e2       	ldi	r25, 0x29	; 41
    2ab8:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ff 90       	pop	r15
    2ac6:	ef 90       	pop	r14
    2ac8:	df 90       	pop	r13
    2aca:	cf 90       	pop	r12
    2acc:	bf 90       	pop	r11
    2ace:	af 90       	pop	r10
    2ad0:	9f 90       	pop	r9
    2ad2:	08 95       	ret

00002ad4 <print_dist_per_step>:
	// TODO: Deprecated?
}

void print_dist_per_step()
{
    2ad4:	ef 92       	push	r14
    2ad6:	ff 92       	push	r15
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
	printf("Dist (mm) per kilostep\r\n");
    2ae0:	80 e4       	ldi	r24, 0x40	; 64
    2ae2:	92 e2       	ldi	r25, 0x22	; 34
    2ae4:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    2ae8:	0a e5       	ldi	r16, 0x5A	; 90
    2aea:	1b e2       	ldi	r17, 0x2B	; 43
    2aec:	c0 e0       	ldi	r28, 0x00	; 0
    2aee:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t direction = 0 ; direction<8; direction++)
	{
		printf("\t%i\t%hu\r\n", direction, mm_per_kilostep[direction]);	
    2af0:	0f 2e       	mov	r0, r31
    2af2:	f8 e5       	ldi	r31, 0x58	; 88
    2af4:	ef 2e       	mov	r14, r31
    2af6:	f2 e2       	ldi	r31, 0x22	; 34
    2af8:	ff 2e       	mov	r15, r31
    2afa:	f0 2d       	mov	r31, r0
    2afc:	f8 01       	movw	r30, r16
    2afe:	80 81       	ld	r24, Z
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	0e 5f       	subi	r16, 0xFE	; 254
    2b04:	1f 4f       	sbci	r17, 0xFF	; 255
    2b06:	9f 93       	push	r25
    2b08:	8f 93       	push	r24
    2b0a:	df 93       	push	r29
    2b0c:	cf 93       	push	r28
    2b0e:	ff 92       	push	r15
    2b10:	ef 92       	push	r14
    2b12:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    2b16:	21 96       	adiw	r28, 0x01	; 1
}

void print_dist_per_step()
{
	printf("Dist (mm) per kilostep\r\n");
	for(uint8_t direction = 0 ; direction<8; direction++)
    2b18:	0f 90       	pop	r0
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	c8 30       	cpi	r28, 0x08	; 8
    2b26:	d1 05       	cpc	r29, r1
    2b28:	49 f7       	brne	.-46     	; 0x2afc <print_dist_per_step+0x28>
	{
		printf("\t%i\t%hu\r\n", direction, mm_per_kilostep[direction]);	
	}
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	1f 91       	pop	r17
    2b30:	0f 91       	pop	r16
    2b32:	ff 90       	pop	r15
    2b34:	ef 90       	pop	r14
    2b36:	08 95       	ret

00002b38 <pc_comm_putchar>:
	serial_in_index = temp_index;
}

int pc_comm_putchar(char c, FILE *stream)
{
	while( (PC_USART.STATUS & USART_DREIF_bm) == 0 ) {}
    2b38:	e0 eb       	ldi	r30, 0xB0	; 176
    2b3a:	f9 e0       	ldi	r31, 0x09	; 9
    2b3c:	91 81       	ldd	r25, Z+1	; 0x01
    2b3e:	95 ff       	sbrs	r25, 5
    2b40:	fd cf       	rjmp	.-6      	; 0x2b3c <pc_comm_putchar+0x4>
	PC_USART.DATA = c;
    2b42:	80 93 b0 09 	sts	0x09B0, r24
	return 1;
}
    2b46:	81 e0       	ldi	r24, 0x01	; 1
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	08 95       	ret

00002b4c <pc_comm_init>:

static FILE mystdout = FDEV_SETUP_STREAM (pc_comm_putchar,NULL,_FDEV_SETUP_WRITE);

void pc_comm_init()
{
	PC_PORT.DIRSET = PIN7_bm; 	// TX as output
    2b4c:	e0 e6       	ldi	r30, 0x60	; 96
    2b4e:	f6 e0       	ldi	r31, 0x06	; 6
    2b50:	80 e8       	ldi	r24, 0x80	; 128
    2b52:	81 83       	std	Z+1, r24	; 0x01
	PC_PORT.DIRCLR = PIN6_bm;	// RX as input
    2b54:	80 e4       	ldi	r24, 0x40	; 64
    2b56:	82 83       	std	Z+2, r24	; 0x02

	PC_USART.CTRLC = (uint8_t) USART_CHSIZE_8BIT_gc | USART_PMODE_DISABLED_gc;
    2b58:	e0 eb       	ldi	r30, 0xB0	; 176
    2b5a:	f9 e0       	ldi	r31, 0x09	; 9
    2b5c:	83 e0       	ldi	r24, 0x03	; 3
    2b5e:	85 83       	std	Z+5, r24	; 0x05

	PC_USART.BAUDCTRLA = 0b00010111;		// Baud rate 115200
    2b60:	87 e1       	ldi	r24, 0x17	; 23
    2b62:	86 83       	std	Z+6, r24	; 0x06
	PC_USART.BAUDCTRLB = 0b10100100;		// BSCALE = -6, BSEL = 1047 @ 32MHz clock
    2b64:	84 ea       	ldi	r24, 0xA4	; 164
    2b66:	87 83       	std	Z+7, r24	; 0x07

	PC_USART.CTRLB |= USART_RXEN_bm;
    2b68:	84 81       	ldd	r24, Z+4	; 0x04
    2b6a:	80 61       	ori	r24, 0x10	; 16
    2b6c:	84 83       	std	Z+4, r24	; 0x04
	PC_USART.CTRLB |= USART_TXEN_bm;
    2b6e:	84 81       	ldd	r24, Z+4	; 0x04
    2b70:	88 60       	ori	r24, 0x08	; 8
    2b72:	84 83       	std	Z+4, r24	; 0x04

	stdout = &mystdout;
    2b74:	82 e1       	ldi	r24, 0x12	; 18
    2b76:	90 e2       	ldi	r25, 0x20	; 32
    2b78:	80 93 c2 2e 	sts	0x2EC2, r24
    2b7c:	90 93 c3 2e 	sts	0x2EC3, r25
	serial_in_index = 0;
    2b80:	10 92 34 2a 	sts	0x2A34, r1
    2b84:	10 92 35 2a 	sts	0x2A35, r1
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_LO_gc;
    2b88:	80 e1       	ldi	r24, 0x10	; 16
    2b8a:	83 83       	std	Z+3, r24	; 0x03
    2b8c:	08 95       	ret

00002b8e <handle_up_arrow>:
		putchar(data);
	}
}

void handle_up_arrow()
{
    2b8e:	1f 93       	push	r17
    2b90:	cf 93       	push	r28
    2b92:	df 93       	push	r29
	uint8_t temp_index = serial_in_index;
    2b94:	80 91 34 2a 	lds	r24, 0x2A34
    2b98:	90 91 35 2a 	lds	r25, 0x2A35
    2b9c:	18 2f       	mov	r17, r24
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	ff 27       	eor	r31, r31
			
	while(serial_in_buffer[temp_index] != '\0')
    2ba2:	ec 50       	subi	r30, 0x0C	; 12
    2ba4:	f6 4d       	sbci	r31, 0xD6	; 214
    2ba6:	80 81       	ld	r24, Z
    2ba8:	88 23       	and	r24, r24
    2baa:	79 f0       	breq	.+30     	; 0x2bca <handle_up_arrow+0x3c>
	{
		putchar(serial_in_buffer[temp_index]);
    2bac:	c2 ec       	ldi	r28, 0xC2	; 194
    2bae:	de e2       	ldi	r29, 0x2E	; 46
    2bb0:	68 81       	ld	r22, Y
    2bb2:	79 81       	ldd	r23, Y+1	; 0x01
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	0e 94 f6 3e 	call	0x7dec	; 0x7dec <fputc>
		temp_index++;
    2bba:	1f 5f       	subi	r17, 0xFF	; 255

void handle_up_arrow()
{
	uint8_t temp_index = serial_in_index;
			
	while(serial_in_buffer[temp_index] != '\0')
    2bbc:	e1 2f       	mov	r30, r17
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	ec 50       	subi	r30, 0x0C	; 12
    2bc2:	f6 4d       	sbci	r31, 0xD6	; 214
    2bc4:	80 81       	ld	r24, Z
    2bc6:	81 11       	cpse	r24, r1
    2bc8:	f3 cf       	rjmp	.-26     	; 0x2bb0 <handle_up_arrow+0x22>
	{
		putchar(serial_in_buffer[temp_index]);
		temp_index++;
	}
				
	serial_in_index = temp_index;
    2bca:	81 2f       	mov	r24, r17
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	80 93 34 2a 	sts	0x2A34, r24
    2bd2:	90 93 35 2a 	sts	0x2A35, r25
}
    2bd6:	df 91       	pop	r29
    2bd8:	cf 91       	pop	r28
    2bda:	1f 91       	pop	r17
    2bdc:	08 95       	ret

00002bde <handle_serial_input>:

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }

void handle_serial_input()
{
	char data = PC_USART.DATA;
    2bde:	80 91 b0 09 	lds	r24, 0x09B0
	if(escaped_arrow==1)
    2be2:	90 91 2a 2c 	lds	r25, 0x2C2A
    2be6:	91 30       	cpi	r25, 0x01	; 1
    2be8:	31 f4       	brne	.+12     	; 0x2bf6 <handle_serial_input+0x18>
	{
		if(data == 65)
    2bea:	81 34       	cpi	r24, 0x41	; 65
    2bec:	09 f4       	brne	.+2      	; 0x2bf0 <handle_serial_input+0x12>
		{
			handle_up_arrow();
    2bee:	cf df       	rcall	.-98     	; 0x2b8e <handle_up_arrow>
		}
		escaped_arrow=0;
    2bf0:	10 92 2a 2c 	sts	0x2C2A, r1
    2bf4:	08 95       	ret
	}
	else if(escaped)
    2bf6:	90 91 f3 29 	lds	r25, 0x29F3
    2bfa:	99 23       	and	r25, r25
    2bfc:	41 f0       	breq	.+16     	; 0x2c0e <handle_serial_input+0x30>
	{
		if(data == 91)
    2bfe:	8b 35       	cpi	r24, 0x5B	; 91
    2c00:	19 f4       	brne	.+6      	; 0x2c08 <handle_serial_input+0x2a>
		{
			escaped_arrow=1;	
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	80 93 2a 2c 	sts	0x2C2A, r24
		}
		escaped=0;
    2c08:	10 92 f3 29 	sts	0x29F3, r1
    2c0c:	08 95       	ret
	}
	else if(data == '\r' || data == '\n') //We got the newline character.
    2c0e:	8d 30       	cpi	r24, 0x0D	; 13
    2c10:	11 f0       	breq	.+4      	; 0x2c16 <handle_serial_input+0x38>
    2c12:	8a 30       	cpi	r24, 0x0A	; 10
    2c14:	a9 f4       	brne	.+42     	; 0x2c40 <handle_serial_input+0x62>
	{
		printf("\r\n");
    2c16:	80 ed       	ldi	r24, 0xD0	; 208
    2c18:	99 e2       	ldi	r25, 0x29	; 41
    2c1a:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
		serial_in_buffer[serial_in_index]='\0';
    2c1e:	60 91 34 2a 	lds	r22, 0x2A34
    2c22:	70 91 35 2a 	lds	r23, 0x2A35
    2c26:	fb 01       	movw	r30, r22
    2c28:	ec 50       	subi	r30, 0x0C	; 12
    2c2a:	f6 4d       	sbci	r31, 0xD6	; 214
    2c2c:	10 82       	st	Z, r1
		handle_serial_command(serial_in_buffer,serial_in_index);
    2c2e:	84 ef       	ldi	r24, 0xF4	; 244
    2c30:	99 e2       	ldi	r25, 0x29	; 41
    2c32:	0e 94 cd 2c 	call	0x599a	; 0x599a <handle_serial_command>
		serial_in_index = 0;
    2c36:	10 92 34 2a 	sts	0x2A34, r1
    2c3a:	10 92 35 2a 	sts	0x2A35, r1
    2c3e:	08 95       	ret
	}
	else if(data == '\b') //We got the backspace character.
    2c40:	88 30       	cpi	r24, 0x08	; 8
    2c42:	a1 f4       	brne	.+40     	; 0x2c6c <handle_serial_input+0x8e>
	{
		if(serial_in_index > 0) serial_in_index--;
    2c44:	80 91 34 2a 	lds	r24, 0x2A34
    2c48:	90 91 35 2a 	lds	r25, 0x2A35
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	29 f0       	breq	.+10     	; 0x2c5a <handle_serial_input+0x7c>
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	80 93 34 2a 	sts	0x2A34, r24
    2c56:	90 93 35 2a 	sts	0x2A35, r25
		printf("\b \b");
    2c5a:	82 e6       	ldi	r24, 0x62	; 98
    2c5c:	92 e2       	ldi	r25, 0x22	; 34
    2c5e:	9f 93       	push	r25
    2c60:	8f 93       	push	r24
    2c62:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    2c66:	0f 90       	pop	r0
    2c68:	0f 90       	pop	r0
    2c6a:	08 95       	ret
	}
	else if(data == 27) //escape pressed.
    2c6c:	8b 31       	cpi	r24, 0x1B	; 27
    2c6e:	21 f4       	brne	.+8      	; 0x2c78 <handle_serial_input+0x9a>
	{
		escaped = 1;
    2c70:	81 e0       	ldi	r24, 0x01	; 1
    2c72:	80 93 f3 29 	sts	0x29F3, r24
    2c76:	08 95       	ret
	}
	else if(serial_in_index==BUFFER_SIZE) //Buffer overflow
    2c78:	20 91 34 2a 	lds	r18, 0x2A34
    2c7c:	30 91 35 2a 	lds	r19, 0x2A35
    2c80:	20 34       	cpi	r18, 0x40	; 64
    2c82:	31 05       	cpc	r19, r1
    2c84:	91 f4       	brne	.+36     	; 0x2caa <handle_serial_input+0xcc>
	{
		printf("\r\nERROR: Serial input buffer capacity of %u characters exceeded.\r\n",BUFFER_SIZE);
    2c86:	1f 92       	push	r1
    2c88:	80 e4       	ldi	r24, 0x40	; 64
    2c8a:	8f 93       	push	r24
    2c8c:	86 e6       	ldi	r24, 0x66	; 102
    2c8e:	92 e2       	ldi	r25, 0x22	; 34
    2c90:	9f 93       	push	r25
    2c92:	8f 93       	push	r24
    2c94:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
		serial_in_index = 0;
    2c98:	10 92 34 2a 	sts	0x2A34, r1
    2c9c:	10 92 35 2a 	sts	0x2A35, r1
    2ca0:	0f 90       	pop	r0
    2ca2:	0f 90       	pop	r0
    2ca4:	0f 90       	pop	r0
    2ca6:	0f 90       	pop	r0
    2ca8:	08 95       	ret
	}
	else //Everything is fine. Add the character to the buffer.
	{
		serial_in_buffer[serial_in_index] = data;
    2caa:	f9 01       	movw	r30, r18
    2cac:	ec 50       	subi	r30, 0x0C	; 12
    2cae:	f6 4d       	sbci	r31, 0xD6	; 214
    2cb0:	80 83       	st	Z, r24
		//printf("Got char '%c'\r\n",data);
		serial_in_index++;
    2cb2:	2f 5f       	subi	r18, 0xFF	; 255
    2cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb6:	20 93 34 2a 	sts	0x2A34, r18
    2cba:	30 93 35 2a 	sts	0x2A35, r19
		putchar(data);
    2cbe:	60 91 c2 2e 	lds	r22, 0x2EC2
    2cc2:	70 91 c3 2e 	lds	r23, 0x2EC3
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	0c 94 f6 3e 	jmp	0x7dec	; 0x7dec <fputc>
    2ccc:	08 95       	ret

00002cce <__vector_91>:
	serial_in_index = 0;
	
	PC_USART.CTRLA = (uint8_t) USART_RXCINTLVL_LO_gc;
}

ISR( USARTD1_RXC_vect ) { handle_serial_input(); }
    2cce:	1f 92       	push	r1
    2cd0:	0f 92       	push	r0
    2cd2:	0f b6       	in	r0, 0x3f	; 63
    2cd4:	0f 92       	push	r0
    2cd6:	11 24       	eor	r1, r1
    2cd8:	0b b6       	in	r0, 0x3b	; 59
    2cda:	0f 92       	push	r0
    2cdc:	2f 93       	push	r18
    2cde:	3f 93       	push	r19
    2ce0:	4f 93       	push	r20
    2ce2:	5f 93       	push	r21
    2ce4:	6f 93       	push	r22
    2ce6:	7f 93       	push	r23
    2ce8:	8f 93       	push	r24
    2cea:	9f 93       	push	r25
    2cec:	af 93       	push	r26
    2cee:	bf 93       	push	r27
    2cf0:	ef 93       	push	r30
    2cf2:	ff 93       	push	r31
    2cf4:	74 df       	rcall	.-280    	; 0x2bde <handle_serial_input>
    2cf6:	ff 91       	pop	r31
    2cf8:	ef 91       	pop	r30
    2cfa:	bf 91       	pop	r27
    2cfc:	af 91       	pop	r26
    2cfe:	9f 91       	pop	r25
    2d00:	8f 91       	pop	r24
    2d02:	7f 91       	pop	r23
    2d04:	6f 91       	pop	r22
    2d06:	5f 91       	pop	r21
    2d08:	4f 91       	pop	r20
    2d0a:	3f 91       	pop	r19
    2d0c:	2f 91       	pop	r18
    2d0e:	0f 90       	pop	r0
    2d10:	0b be       	out	0x3b, r0	; 59
    2d12:	0f 90       	pop	r0
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	0f 90       	pop	r0
    2d18:	1f 90       	pop	r1
    2d1a:	18 95       	reti

00002d1c <cap_monitor_init>:
}


void cap_monitor_init()
{
	PORTB.DIRCLR = PIN0_bm | PIN1_bm;
    2d1c:	83 e0       	ldi	r24, 0x03	; 3
    2d1e:	e0 e2       	ldi	r30, 0x20	; 32
    2d20:	f6 e0       	ldi	r31, 0x06	; 6
    2d22:	82 83       	std	Z+2, r24	; 0x02
	
	ACB.AC0CTRL = AC_ENABLE_bm;
    2d24:	e0 e9       	ldi	r30, 0x90	; 144
    2d26:	f3 e0       	ldi	r31, 0x03	; 3
    2d28:	81 e0       	ldi	r24, 0x01	; 1
    2d2a:	80 83       	st	Z, r24
	ACB.AC1CTRL = AC_ENABLE_bm;
    2d2c:	81 83       	std	Z+1, r24	; 0x01
	
	ACB.AC0MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc; //Changed the muxneg from bandgap
    2d2e:	88 e0       	ldi	r24, 0x08	; 8
    2d30:	82 83       	std	Z+2, r24	; 0x02
	ACB.AC1MUXCTRL = AC_MUXPOS_PIN1_gc | AC_MUXNEG_PIN0_gc;
    2d32:	83 83       	std	Z+3, r24	; 0x03
	
	ACB.WINCTRL = AC_WEN_bm;
    2d34:	80 e1       	ldi	r24, 0x10	; 16
    2d36:	86 83       	std	Z+6, r24	; 0x06
    2d38:	08 95       	ret

00002d3a <leg_monitor_init>:
}

void leg_monitor_init()
{
	PORTA.DIRCLR = PIN0_bm | PIN1_bm | PIN2_bm | PIN3_bm | PIN4_bm;
    2d3a:	8f e1       	ldi	r24, 0x1F	; 31
    2d3c:	e0 e0       	ldi	r30, 0x00	; 0
    2d3e:	f6 e0       	ldi	r31, 0x06	; 6
    2d40:	82 83       	std	Z+2, r24	; 0x02
	
	ACA.AC0CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    2d42:	e0 e8       	ldi	r30, 0x80	; 128
    2d44:	f3 e0       	ldi	r31, 0x03	; 3
    2d46:	89 e0       	ldi	r24, 0x09	; 9
    2d48:	80 83       	st	Z, r24
	ACA.AC1CTRL = AC_HSMODE_bm | AC_ENABLE_bm;
    2d4a:	81 83       	std	Z+1, r24	; 0x01
	
	ACA.AC0MUXCTRL = AC_MUXNEG_PIN0_gc;			// PA0 is VREF_HI
    2d4c:	12 82       	std	Z+2, r1	; 0x02
	ACA.AC1MUXCTRL = AC_MUXNEG_PIN1_gc;			// PA1 is VREF_LO
    2d4e:	81 e0       	ldi	r24, 0x01	; 1
    2d50:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.AC0MUXCTRL |= AC_MUXPOS_PIN2_gc;		// Initially, look at leg1
    2d52:	82 81       	ldd	r24, Z+2	; 0x02
    2d54:	80 61       	ori	r24, 0x10	; 16
    2d56:	82 83       	std	Z+2, r24	; 0x02
	ACA.AC1MUXCTRL |= AC_MUXPOS_PIN2_gc;
    2d58:	83 81       	ldd	r24, Z+3	; 0x03
    2d5a:	80 61       	ori	r24, 0x10	; 16
    2d5c:	83 83       	std	Z+3, r24	; 0x03
	
	ACA.WINCTRL = AC_WEN_bm;					// Enable window mode
    2d5e:	80 e1       	ldi	r24, 0x10	; 16
    2d60:	86 83       	std	Z+6, r24	; 0x06
    2d62:	08 95       	ret

00002d64 <power_init>:
#include "power.h"

void power_init()
{
	cap_monitor_init();
    2d64:	db df       	rcall	.-74     	; 0x2d1c <cap_monitor_init>
	leg_monitor_init();
    2d66:	e9 cf       	rjmp	.-46     	; 0x2d3a <leg_monitor_init>
    2d68:	08 95       	ret

00002d6a <random_init>:
    // Setting this bit will reset the AES crypto module to its initial status on the next positive edge of
    // the peripheral clock. All registers, pointers, and memories in the module are set to their initial
    // value. When written to one, the bit stays high for one clock cycle before it is reset to zero by
    // hardware. (p. 320)

	AES.CTRL = AES_RESET_bm;
    2d6a:	e0 ec       	ldi	r30, 0xC0	; 192
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	80 e2       	ldi	r24, 0x20	; 32
    2d70:	80 83       	st	Z, r24
    // After encryption/decryption is done, the last subkey can be read sequentially, byte-by-byte,
    // through the KEY register.
    // Loading the initial data to the KEY register should be done after setting the appropriate AES
    // mode and direction. (p. 322)

	AES.KEY = PRODSIGNATURES_LOTNUM0;
    2d72:	88 b1       	in	r24, 0x08	; 8
    2d74:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM1;
    2d76:	89 b1       	in	r24, 0x09	; 9
    2d78:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM2;
    2d7a:	8a b1       	in	r24, 0x0a	; 10
    2d7c:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM3;
    2d7e:	8b b1       	in	r24, 0x0b	; 11
    2d80:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_LOTNUM4;
    2d82:	8c b1       	in	r24, 0x0c	; 12
    2d84:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_LOTNUM5;
    2d86:	8d b1       	in	r24, 0x0d	; 13
    2d88:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_WAFNUM;
    2d8a:	80 b3       	in	r24, 0x10	; 16
    2d8c:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDX0;
    2d8e:	82 b3       	in	r24, 0x12	; 18
    2d90:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = PRODSIGNATURES_COORDX1;
    2d92:	83 b3       	in	r24, 0x13	; 19
    2d94:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY0;
    2d96:	84 b3       	in	r24, 0x14	; 20
    2d98:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = PRODSIGNATURES_COORDY1;
    2d9a:	85 b3       	in	r24, 0x15	; 21
    2d9c:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH0.RESL;
    2d9e:	a0 e0       	ldi	r26, 0x00	; 0
    2da0:	b2 e0       	ldi	r27, 0x02	; 2
    2da2:	94 96       	adiw	r26, 0x24	; 36
    2da4:	8c 91       	ld	r24, X
    2da6:	94 97       	sbiw	r26, 0x24	; 36
    2da8:	83 83       	std	Z+3, r24	; 0x03

	AES.KEY = ADCA.CH1.RESL;
    2daa:	9c 96       	adiw	r26, 0x2c	; 44
    2dac:	8c 91       	ld	r24, X
    2dae:	9c 97       	sbiw	r26, 0x2c	; 44
    2db0:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCA.CH2.RESL;
    2db2:	d4 96       	adiw	r26, 0x34	; 52
    2db4:	8c 91       	ld	r24, X
    2db6:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH0.RESL;
    2db8:	a0 e4       	ldi	r26, 0x40	; 64
    2dba:	b2 e0       	ldi	r27, 0x02	; 2
    2dbc:	94 96       	adiw	r26, 0x24	; 36
    2dbe:	8c 91       	ld	r24, X
    2dc0:	94 97       	sbiw	r26, 0x24	; 36
    2dc2:	83 83       	std	Z+3, r24	; 0x03
	AES.KEY = ADCB.CH1.RESL;
    2dc4:	9c 96       	adiw	r26, 0x2c	; 44
    2dc6:	8c 91       	ld	r24, X
    2dc8:	83 83       	std	Z+3, r24	; 0x03

	r_round = 1;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	80 93 a4 2c 	sts	0x2CA4, r24
    2dd0:	80 e1       	ldi	r24, 0x10	; 16
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
		AES.STATE = r_round;
    2dd2:	91 e0       	ldi	r25, 0x01	; 1
    2dd4:	92 83       	std	Z+2, r25	; 0x02
    2dd6:	81 50       	subi	r24, 0x01	; 1
    // After encryption/decryption is done, the ciphertext/plaintext can be read sequentially, byte-by-byte,
    // through the STATE register.
    // Loading the initial data to the STATE register should be done after setting the appropriate AES
    // mode and direction. This register can not be accessed during encryption/decryption. (p. 321)

	for (uint8_t i = 0; i < 16; i++)
    2dd8:	e9 f7       	brne	.-6      	; 0x2dd4 <random_init+0x6a>
    // Setting this bit starts the encryption/decryption procedure, and this bit remains set while the
    // encryption/decryption is ongoing. Writing this bit to zero will stop/abort any ongoing encryption/
    // decryption process. This bit is automatically cleared if the SRIF or the ERROR flags in
    // STATUS are set. (p. 320)

	AES.CTRL = AES_START_bm | AES_XOR_bm;
    2dda:	84 e8       	ldi	r24, 0x84	; 132
    2ddc:	80 93 c0 00 	sts	0x00C0, r24

	r_position = 0;
    2de0:	10 92 a5 2c 	sts	0x2CA5, r1
    2de4:	08 95       	ret

00002de6 <range_algs_init>:
{
	if(power==255)			return 2*(1.36255 + (298.285/((0.691321+r)*(0.691321+r))));
	//else if(power ==250)	return (1100./((r-4.)*(r-4.)))+12.5;
	else					printf("ERROR: Unexpected power: %hhu\r\n",power);
	return 0;
}
    2de6:	8a eb       	ldi	r24, 0xBA	; 186
    2de8:	9c e2       	ldi	r25, 0x2C	; 44
    2dea:	2e eb       	ldi	r18, 0xBE	; 190
    2dec:	3c e2       	ldi	r19, 0x2C	; 44
    2dee:	14 c0       	rjmp	.+40     	; 0x2e18 <range_algs_init+0x32>
    2df0:	df 01       	movw	r26, r30
    2df2:	54 97       	sbiw	r26, 0x14	; 20
    2df4:	1c 92       	st	X, r1
    2df6:	14 96       	adiw	r26, 0x04	; 4
    2df8:	1c 92       	st	X, r1
    2dfa:	14 96       	adiw	r26, 0x04	; 4
    2dfc:	1c 92       	st	X, r1
    2dfe:	14 96       	adiw	r26, 0x04	; 4
    2e00:	1c 92       	st	X, r1
    2e02:	14 96       	adiw	r26, 0x04	; 4
    2e04:	1c 92       	st	X, r1
    2e06:	10 82       	st	Z, r1
    2e08:	4f 5f       	subi	r20, 0xFF	; 255
    2e0a:	78 96       	adiw	r30, 0x18	; 24
    2e0c:	46 30       	cpi	r20, 0x06	; 6
    2e0e:	81 f7       	brne	.-32     	; 0x2df0 <range_algs_init+0xa>
    2e10:	01 96       	adiw	r24, 0x01	; 1
    2e12:	82 17       	cp	r24, r18
    2e14:	93 07       	cpc	r25, r19
    2e16:	19 f0       	breq	.+6      	; 0x2e1e <range_algs_init+0x38>
    2e18:	fc 01       	movw	r30, r24
    2e1a:	40 e0       	ldi	r20, 0x00	; 0
    2e1c:	e9 cf       	rjmp	.-46     	; 0x2df0 <range_algs_init+0xa>
    2e1e:	08 95       	ret

00002e20 <get_bearing>:
    2e20:	2f 92       	push	r2
    2e22:	3f 92       	push	r3
    2e24:	4f 92       	push	r4
    2e26:	5f 92       	push	r5
    2e28:	6f 92       	push	r6
    2e2a:	7f 92       	push	r7
    2e2c:	8f 92       	push	r8
    2e2e:	9f 92       	push	r9
    2e30:	af 92       	push	r10
    2e32:	bf 92       	push	r11
    2e34:	cf 92       	push	r12
    2e36:	df 92       	push	r13
    2e38:	ef 92       	push	r14
    2e3a:	ff 92       	push	r15
    2e3c:	0f 93       	push	r16
    2e3e:	1f 93       	push	r17
    2e40:	cf 93       	push	r28
    2e42:	df 93       	push	r29
    2e44:	c8 e3       	ldi	r28, 0x38	; 56
    2e46:	d0 e2       	ldi	r29, 0x20	; 32
    2e48:	8c 01       	movw	r16, r24
    2e4a:	0f 2e       	mov	r0, r31
    2e4c:	f8 e6       	ldi	r31, 0x68	; 104
    2e4e:	2f 2e       	mov	r2, r31
    2e50:	f0 e2       	ldi	r31, 0x20	; 32
    2e52:	3f 2e       	mov	r3, r31
    2e54:	f0 2d       	mov	r31, r0
    2e56:	81 2c       	mov	r8, r1
    2e58:	91 2c       	mov	r9, r1
    2e5a:	54 01       	movw	r10, r8
    2e5c:	24 01       	movw	r4, r8
    2e5e:	35 01       	movw	r6, r10
    2e60:	f8 01       	movw	r30, r16
    2e62:	61 91       	ld	r22, Z+
    2e64:	8f 01       	movw	r16, r30
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <__floatsisf>
    2e70:	6b 01       	movw	r12, r22
    2e72:	7c 01       	movw	r14, r24
    2e74:	28 81       	ld	r18, Y
    2e76:	39 81       	ldd	r19, Y+1	; 0x01
    2e78:	4a 81       	ldd	r20, Y+2	; 0x02
    2e7a:	5b 81       	ldd	r21, Y+3	; 0x03
    2e7c:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    2e80:	9b 01       	movw	r18, r22
    2e82:	ac 01       	movw	r20, r24
    2e84:	c3 01       	movw	r24, r6
    2e86:	b2 01       	movw	r22, r4
    2e88:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    2e8c:	2b 01       	movw	r4, r22
    2e8e:	3c 01       	movw	r6, r24
    2e90:	2c 81       	ldd	r18, Y+4	; 0x04
    2e92:	3d 81       	ldd	r19, Y+5	; 0x05
    2e94:	4e 81       	ldd	r20, Y+6	; 0x06
    2e96:	5f 81       	ldd	r21, Y+7	; 0x07
    2e98:	c7 01       	movw	r24, r14
    2e9a:	b6 01       	movw	r22, r12
    2e9c:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    2ea0:	9b 01       	movw	r18, r22
    2ea2:	ac 01       	movw	r20, r24
    2ea4:	c5 01       	movw	r24, r10
    2ea6:	b4 01       	movw	r22, r8
    2ea8:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    2eac:	4b 01       	movw	r8, r22
    2eae:	5c 01       	movw	r10, r24
    2eb0:	28 96       	adiw	r28, 0x08	; 8
    2eb2:	c2 15       	cp	r28, r2
    2eb4:	d3 05       	cpc	r29, r3
    2eb6:	a1 f6       	brne	.-88     	; 0x2e60 <get_bearing+0x40>
    2eb8:	a3 01       	movw	r20, r6
    2eba:	92 01       	movw	r18, r4
    2ebc:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <atan2>
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	df 90       	pop	r13
    2ece:	cf 90       	pop	r12
    2ed0:	bf 90       	pop	r11
    2ed2:	af 90       	pop	r10
    2ed4:	9f 90       	pop	r9
    2ed6:	8f 90       	pop	r8
    2ed8:	7f 90       	pop	r7
    2eda:	6f 90       	pop	r6
    2edc:	5f 90       	pop	r5
    2ede:	4f 90       	pop	r4
    2ee0:	3f 90       	pop	r3
    2ee2:	2f 90       	pop	r2
    2ee4:	08 95       	ret

00002ee6 <fill_S_and_T>:
    2ee6:	cf 92       	push	r12
    2ee8:	df 92       	push	r13
    2eea:	ff 92       	push	r15
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	cf 93       	push	r28
    2ef2:	df 93       	push	r29
    2ef4:	f6 2e       	mov	r15, r22
    2ef6:	07 2f       	mov	r16, r23
    2ef8:	a6 2f       	mov	r26, r22
    2efa:	b7 2f       	mov	r27, r23
    2efc:	e4 2f       	mov	r30, r20
    2efe:	f5 2f       	mov	r31, r21
    2f00:	26 e0       	ldi	r18, 0x06	; 6
    2f02:	11 92       	st	Z+, r1
    2f04:	1d 92       	st	X+, r1
    2f06:	21 50       	subi	r18, 0x01	; 1
    2f08:	e1 f7       	brne	.-8      	; 0x2f02 <fill_S_and_T+0x1c>
    2f0a:	c4 2e       	mov	r12, r20
    2f0c:	d5 2e       	mov	r13, r21
    2f0e:	40 e0       	ldi	r20, 0x00	; 0
    2f10:	50 e0       	ldi	r21, 0x00	; 0
    2f12:	17 c0       	rjmp	.+46     	; 0x2f42 <fill_S_and_T+0x5c>
    2f14:	9d 01       	movw	r18, r26
    2f16:	10 81       	ld	r17, Z
    2f18:	7d 91       	ld	r23, X+
    2f1a:	71 0f       	add	r23, r17
    2f1c:	71 93       	st	Z+, r23
    2f1e:	e6 01       	movw	r28, r12
    2f20:	78 81       	ld	r23, Y
    2f22:	e9 01       	movw	r28, r18
    2f24:	28 81       	ld	r18, Y
    2f26:	27 0f       	add	r18, r23
    2f28:	e6 01       	movw	r28, r12
    2f2a:	28 83       	st	Y, r18
    2f2c:	6f 5f       	subi	r22, 0xFF	; 255
    2f2e:	66 30       	cpi	r22, 0x06	; 6
    2f30:	89 f7       	brne	.-30     	; 0x2f14 <fill_S_and_T+0x2e>
    2f32:	4a 5f       	subi	r20, 0xFA	; 250
    2f34:	5f 4f       	sbci	r21, 0xFF	; 255
    2f36:	df ef       	ldi	r29, 0xFF	; 255
    2f38:	cd 1a       	sub	r12, r29
    2f3a:	dd 0a       	sbc	r13, r29
    2f3c:	44 32       	cpi	r20, 0x24	; 36
    2f3e:	51 05       	cpc	r21, r1
    2f40:	39 f0       	breq	.+14     	; 0x2f50 <fill_S_and_T+0x6a>
    2f42:	dc 01       	movw	r26, r24
    2f44:	a4 0f       	add	r26, r20
    2f46:	b5 1f       	adc	r27, r21
    2f48:	ef 2d       	mov	r30, r15
    2f4a:	f0 2f       	mov	r31, r16
    2f4c:	60 e0       	ldi	r22, 0x00	; 0
    2f4e:	e2 cf       	rjmp	.-60     	; 0x2f14 <fill_S_and_T+0x2e>
    2f50:	df 91       	pop	r29
    2f52:	cf 91       	pop	r28
    2f54:	1f 91       	pop	r17
    2f56:	0f 91       	pop	r16
    2f58:	ff 90       	pop	r15
    2f5a:	df 90       	pop	r13
    2f5c:	cf 90       	pop	r12
    2f5e:	08 95       	ret

00002f60 <pack_measurements_into_matrix>:
    2f60:	df 92       	push	r13
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	46 ea       	ldi	r20, 0xA6	; 166
    2f70:	5c e2       	ldi	r21, 0x2C	; 44
    2f72:	66 e3       	ldi	r22, 0x36	; 54
    2f74:	7d e2       	ldi	r23, 0x2D	; 45
    2f76:	e1 2c       	mov	r14, r1
    2f78:	dd 24       	eor	r13, r13
    2f7a:	da 94       	dec	r13
    2f7c:	1e c0       	rjmp	.+60     	; 0x2fba <pack_measurements_into_matrix+0x5a>
    2f7e:	c1 91       	ld	r28, Z+
    2f80:	c1 17       	cp	r28, r17
    2f82:	08 f4       	brcc	.+2      	; 0x2f86 <pack_measurements_into_matrix+0x26>
    2f84:	1c 2f       	mov	r17, r28
    2f86:	0c 17       	cp	r16, r28
    2f88:	08 f4       	brcc	.+2      	; 0x2f8c <pack_measurements_into_matrix+0x2c>
    2f8a:	0c 2f       	mov	r16, r28
    2f8c:	d1 50       	subi	r29, 0x01	; 1
    2f8e:	b9 f7       	brne	.-18     	; 0x2f7e <pack_measurements_into_matrix+0x1e>
    2f90:	01 1b       	sub	r16, r17
    2f92:	e0 16       	cp	r14, r16
    2f94:	08 f4       	brcc	.+2      	; 0x2f98 <pack_measurements_into_matrix+0x38>
    2f96:	e0 2e       	mov	r14, r16
    2f98:	0d 93       	st	X+, r16
    2f9a:	fa 94       	dec	r15
    2f9c:	2c 5f       	subi	r18, 0xFC	; 252
    2f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa0:	ff 20       	and	r15, r15
    2fa2:	29 f0       	breq	.+10     	; 0x2fae <pack_measurements_into_matrix+0x4e>
    2fa4:	f9 01       	movw	r30, r18
    2fa6:	d4 e0       	ldi	r29, 0x04	; 4
    2fa8:	00 e0       	ldi	r16, 0x00	; 0
    2faa:	1d 2d       	mov	r17, r13
    2fac:	e8 cf       	rjmp	.-48     	; 0x2f7e <pack_measurements_into_matrix+0x1e>
    2fae:	06 96       	adiw	r24, 0x06	; 6
    2fb0:	48 5e       	subi	r20, 0xE8	; 232
    2fb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb4:	46 17       	cp	r20, r22
    2fb6:	57 07       	cpc	r21, r23
    2fb8:	39 f0       	breq	.+14     	; 0x2fc8 <pack_measurements_into_matrix+0x68>
    2fba:	9a 01       	movw	r18, r20
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	0f 2e       	mov	r0, r31
    2fc0:	f6 e0       	ldi	r31, 0x06	; 6
    2fc2:	ff 2e       	mov	r15, r31
    2fc4:	f0 2d       	mov	r31, r0
    2fc6:	ee cf       	rjmp	.-36     	; 0x2fa4 <pack_measurements_into_matrix+0x44>
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	8e 15       	cp	r24, r14
    2fcc:	08 f4       	brcc	.+2      	; 0x2fd0 <pack_measurements_into_matrix+0x70>
    2fce:	80 e0       	ldi	r24, 0x00	; 0
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	1f 91       	pop	r17
    2fd6:	0f 91       	pop	r16
    2fd8:	ff 90       	pop	r15
    2fda:	ef 90       	pop	r14
    2fdc:	df 90       	pop	r13
    2fde:	08 95       	ret

00002fe0 <get_baseline_readings>:
    2fe0:	df 92       	push	r13
    2fe2:	ef 92       	push	r14
    2fe4:	ff 92       	push	r15
    2fe6:	0f 93       	push	r16
    2fe8:	1f 93       	push	r17
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	06 ea       	ldi	r16, 0xA6	; 166
    2ff0:	1c e2       	ldi	r17, 0x2C	; 44
    2ff2:	0f 2e       	mov	r0, r31
    2ff4:	f6 e3       	ldi	r31, 0x36	; 54
    2ff6:	ef 2e       	mov	r14, r31
    2ff8:	fd e2       	ldi	r31, 0x2D	; 45
    2ffa:	ff 2e       	mov	r15, r31
    2ffc:	f0 2d       	mov	r31, r0
    2ffe:	0d c0       	rjmp	.+26     	; 0x301a <get_baseline_readings+0x3a>
    3000:	8d 2d       	mov	r24, r13
    3002:	6f d8       	rcall	.-3874   	; 0x20e2 <get_ir_sensor>
    3004:	88 83       	st	Y, r24
    3006:	d3 94       	inc	r13
    3008:	24 96       	adiw	r28, 0x04	; 4
    300a:	86 e0       	ldi	r24, 0x06	; 6
    300c:	d8 12       	cpse	r13, r24
    300e:	f8 cf       	rjmp	.-16     	; 0x3000 <get_baseline_readings+0x20>
    3010:	08 5e       	subi	r16, 0xE8	; 232
    3012:	1f 4f       	sbci	r17, 0xFF	; 255
    3014:	0e 15       	cp	r16, r14
    3016:	1f 05       	cpc	r17, r15
    3018:	19 f0       	breq	.+6      	; 0x3020 <get_baseline_readings+0x40>
    301a:	e8 01       	movw	r28, r16
    301c:	d1 2c       	mov	r13, r1
    301e:	f0 cf       	rjmp	.-32     	; 0x3000 <get_baseline_readings+0x20>
    3020:	df 91       	pop	r29
    3022:	cf 91       	pop	r28
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	ff 90       	pop	r15
    302a:	ef 90       	pop	r14
    302c:	df 90       	pop	r13
    302e:	08 95       	ret

00003030 <ir_range_meas>:
    3030:	2f 92       	push	r2
    3032:	3f 92       	push	r3
    3034:	4f 92       	push	r4
    3036:	5f 92       	push	r5
    3038:	6f 92       	push	r6
    303a:	7f 92       	push	r7
    303c:	8f 92       	push	r8
    303e:	9f 92       	push	r9
    3040:	af 92       	push	r10
    3042:	bf 92       	push	r11
    3044:	cf 92       	push	r12
    3046:	df 92       	push	r13
    3048:	ef 92       	push	r14
    304a:	ff 92       	push	r15
    304c:	0f 93       	push	r16
    304e:	1f 93       	push	r17
    3050:	cf 93       	push	r28
    3052:	df 93       	push	r29
    3054:	8f e5       	ldi	r24, 0x5F	; 95
    3056:	9a ee       	ldi	r25, 0xEA	; 234
    3058:	a0 e0       	ldi	r26, 0x00	; 0
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	a1 09       	sbc	r26, r1
    3060:	b1 09       	sbc	r27, r1
    3062:	00 00       	nop
    3064:	01 f0       	breq	.+0      	; 0x3066 <ir_range_meas+0x36>
    3066:	d1 f7       	brne	.-12     	; 0x305c <ir_range_meas+0x2c>
    3068:	c8 95       	lpm
    306a:	00 00       	nop
    306c:	8f e7       	ldi	r24, 0x7F	; 127
    306e:	9e e3       	ldi	r25, 0x3E	; 62
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <ir_range_meas+0x40>
    3074:	00 00       	nop
    3076:	00 c0       	rjmp	.+0      	; 0x3078 <ir_range_meas+0x48>
    3078:	0f 2e       	mov	r0, r31
    307a:	f7 ea       	ldi	r31, 0xA7	; 167
    307c:	6f 2e       	mov	r6, r31
    307e:	fc e2       	ldi	r31, 0x2C	; 44
    3080:	7f 2e       	mov	r7, r31
    3082:	f0 2d       	mov	r31, r0
    3084:	0f 2e       	mov	r0, r31
    3086:	f7 e3       	ldi	r31, 0x37	; 55
    3088:	4f 2e       	mov	r4, r31
    308a:	fd e2       	ldi	r31, 0x2D	; 45
    308c:	5f 2e       	mov	r5, r31
    308e:	f0 2d       	mov	r31, r0
    3090:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    3094:	4b 01       	movw	r8, r22
    3096:	5c 01       	movw	r10, r24
    3098:	83 01       	movw	r16, r6
    309a:	33 24       	eor	r3, r3
    309c:	33 94       	inc	r3
    309e:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    30a2:	6b 01       	movw	r12, r22
    30a4:	7c 01       	movw	r14, r24
    30a6:	e8 01       	movw	r28, r16
    30a8:	21 2c       	mov	r2, r1
    30aa:	82 2d       	mov	r24, r2
    30ac:	1a d8       	rcall	.-4044   	; 0x20e2 <get_ir_sensor>
    30ae:	88 83       	st	Y, r24
    30b0:	23 94       	inc	r2
    30b2:	24 96       	adiw	r28, 0x04	; 4
    30b4:	86 e0       	ldi	r24, 0x06	; 6
    30b6:	28 12       	cpse	r2, r24
    30b8:	f8 cf       	rjmp	.-16     	; 0x30aa <ir_range_meas+0x7a>
    30ba:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8c 19       	sub	r24, r12
    30c4:	9d 09       	sbc	r25, r13
    30c6:	ae 09       	sbc	r26, r14
    30c8:	bf 09       	sbc	r27, r15
    30ca:	03 97       	sbiw	r24, 0x03	; 3
    30cc:	a1 05       	cpc	r26, r1
    30ce:	b1 05       	cpc	r27, r1
    30d0:	a0 f3       	brcs	.-24     	; 0x30ba <ir_range_meas+0x8a>
    30d2:	82 e0       	ldi	r24, 0x02	; 2
    30d4:	83 15       	cp	r24, r3
    30d6:	20 f0       	brcs	.+8      	; 0x30e0 <ir_range_meas+0xb0>
    30d8:	85 e0       	ldi	r24, 0x05	; 5
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    30e0:	33 94       	inc	r3
    30e2:	0f 5f       	subi	r16, 0xFF	; 255
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	84 e0       	ldi	r24, 0x04	; 4
    30e8:	38 12       	cpse	r3, r24
    30ea:	d9 cf       	rjmp	.-78     	; 0x309e <ir_range_meas+0x6e>
    30ec:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    30f0:	dc 01       	movw	r26, r24
    30f2:	cb 01       	movw	r24, r22
    30f4:	88 19       	sub	r24, r8
    30f6:	99 09       	sbc	r25, r9
    30f8:	aa 09       	sbc	r26, r10
    30fa:	bb 09       	sbc	r27, r11
    30fc:	47 97       	sbiw	r24, 0x17	; 23
    30fe:	a1 05       	cpc	r26, r1
    3100:	b1 05       	cpc	r27, r1
    3102:	a0 f3       	brcs	.-24     	; 0x30ec <ir_range_meas+0xbc>
    3104:	8f e0       	ldi	r24, 0x0F	; 15
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    310c:	88 e1       	ldi	r24, 0x18	; 24
    310e:	68 0e       	add	r6, r24
    3110:	71 1c       	adc	r7, r1
    3112:	64 14       	cp	r6, r4
    3114:	75 04       	cpc	r7, r5
    3116:	09 f0       	breq	.+2      	; 0x311a <ir_range_meas+0xea>
    3118:	bb cf       	rjmp	.-138    	; 0x3090 <ir_range_meas+0x60>
    311a:	df 91       	pop	r29
    311c:	cf 91       	pop	r28
    311e:	1f 91       	pop	r17
    3120:	0f 91       	pop	r16
    3122:	ff 90       	pop	r15
    3124:	ef 90       	pop	r14
    3126:	df 90       	pop	r13
    3128:	cf 90       	pop	r12
    312a:	bf 90       	pop	r11
    312c:	af 90       	pop	r10
    312e:	9f 90       	pop	r9
    3130:	8f 90       	pop	r8
    3132:	7f 90       	pop	r7
    3134:	6f 90       	pop	r6
    3136:	5f 90       	pop	r5
    3138:	4f 90       	pop	r4
    313a:	3f 90       	pop	r3
    313c:	2f 90       	pop	r2
    313e:	08 95       	ret

00003140 <receive_rnb_data>:
    3140:	cf 93       	push	r28
    3142:	df 93       	push	r29
    3144:	1f 92       	push	r1
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	72 df       	rcall	.-284    	; 0x3030 <ir_range_meas>
    314c:	49 df       	rcall	.-366    	; 0x2fe0 <get_baseline_readings>
    314e:	89 e1       	ldi	r24, 0x19	; 25
    3150:	89 83       	std	Y+1, r24	; 0x01
    3152:	9e 01       	movw	r18, r28
    3154:	2f 5f       	subi	r18, 0xFF	; 255
    3156:	3f 4f       	sbci	r19, 0xFF	; 255
    3158:	46 e0       	ldi	r20, 0x06	; 6
    315a:	50 e2       	ldi	r21, 0x20	; 32
    315c:	6a e0       	ldi	r22, 0x0A	; 10
    315e:	70 e0       	ldi	r23, 0x00	; 0
    3160:	80 e0       	ldi	r24, 0x00	; 0
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	0e 94 d6 24 	call	0x49ac	; 0x49ac <schedule_task>
    3168:	0f 90       	pop	r0
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	08 95       	ret

00003170 <ir_emit>:
    3170:	af 92       	push	r10
    3172:	bf 92       	push	r11
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	82 30       	cpi	r24, 0x02	; 2
    3182:	19 f1       	breq	.+70     	; 0x31ca <ir_emit+0x5a>
    3184:	30 f4       	brcc	.+12     	; 0x3192 <ir_emit+0x22>
    3186:	88 23       	and	r24, r24
    3188:	09 f4       	brne	.+2      	; 0x318c <ir_emit+0x1c>
    318a:	5b c0       	rjmp	.+182    	; 0x3242 <ir_emit+0xd2>
    318c:	81 30       	cpi	r24, 0x01	; 1
    318e:	71 f0       	breq	.+28     	; 0x31ac <ir_emit+0x3c>
    3190:	06 c0       	rjmp	.+12     	; 0x319e <ir_emit+0x2e>
    3192:	84 30       	cpi	r24, 0x04	; 4
    3194:	c1 f1       	breq	.+112    	; 0x3206 <ir_emit+0x96>
    3196:	40 f1       	brcs	.+80     	; 0x31e8 <ir_emit+0x78>
    3198:	85 30       	cpi	r24, 0x05	; 5
    319a:	09 f4       	brne	.+2      	; 0x319e <ir_emit+0x2e>
    319c:	43 c0       	rjmp	.+134    	; 0x3224 <ir_emit+0xb4>
    319e:	e1 2c       	mov	r14, r1
    31a0:	f1 2c       	mov	r15, r1
    31a2:	00 e0       	ldi	r16, 0x00	; 0
    31a4:	10 e0       	ldi	r17, 0x00	; 0
    31a6:	c1 2c       	mov	r12, r1
    31a8:	d1 2c       	mov	r13, r1
    31aa:	58 c0       	rjmp	.+176    	; 0x325c <ir_emit+0xec>
    31ac:	0f 2e       	mov	r0, r31
    31ae:	f0 eb       	ldi	r31, 0xB0	; 176
    31b0:	ef 2e       	mov	r14, r31
    31b2:	f8 e0       	ldi	r31, 0x08	; 8
    31b4:	ff 2e       	mov	r15, r31
    31b6:	f0 2d       	mov	r31, r0
    31b8:	00 e4       	ldi	r16, 0x40	; 64
    31ba:	16 e0       	ldi	r17, 0x06	; 6
    31bc:	68 94       	set
    31be:	cc 24       	eor	r12, r12
    31c0:	c7 f8       	bld	r12, 7
    31c2:	68 94       	set
    31c4:	dd 24       	eor	r13, r13
    31c6:	d1 f8       	bld	r13, 1
    31c8:	49 c0       	rjmp	.+146    	; 0x325c <ir_emit+0xec>
    31ca:	0f 2e       	mov	r0, r31
    31cc:	f0 ea       	ldi	r31, 0xA0	; 160
    31ce:	ef 2e       	mov	r14, r31
    31d0:	f9 e0       	ldi	r31, 0x09	; 9
    31d2:	ff 2e       	mov	r15, r31
    31d4:	f0 2d       	mov	r31, r0
    31d6:	00 e6       	ldi	r16, 0x60	; 96
    31d8:	16 e0       	ldi	r17, 0x06	; 6
    31da:	68 94       	set
    31dc:	cc 24       	eor	r12, r12
    31de:	c3 f8       	bld	r12, 3
    31e0:	68 94       	set
    31e2:	dd 24       	eor	r13, r13
    31e4:	d4 f8       	bld	r13, 4
    31e6:	3a c0       	rjmp	.+116    	; 0x325c <ir_emit+0xec>
    31e8:	0f 2e       	mov	r0, r31
    31ea:	f0 ea       	ldi	r31, 0xA0	; 160
    31ec:	ef 2e       	mov	r14, r31
    31ee:	fa e0       	ldi	r31, 0x0A	; 10
    31f0:	ff 2e       	mov	r15, r31
    31f2:	f0 2d       	mov	r31, r0
    31f4:	00 e8       	ldi	r16, 0x80	; 128
    31f6:	16 e0       	ldi	r17, 0x06	; 6
    31f8:	68 94       	set
    31fa:	cc 24       	eor	r12, r12
    31fc:	c3 f8       	bld	r12, 3
    31fe:	68 94       	set
    3200:	dd 24       	eor	r13, r13
    3202:	d5 f8       	bld	r13, 5
    3204:	2b c0       	rjmp	.+86     	; 0x325c <ir_emit+0xec>
    3206:	0f 2e       	mov	r0, r31
    3208:	f0 eb       	ldi	r31, 0xB0	; 176
    320a:	ef 2e       	mov	r14, r31
    320c:	fa e0       	ldi	r31, 0x0A	; 10
    320e:	ff 2e       	mov	r15, r31
    3210:	f0 2d       	mov	r31, r0
    3212:	00 e8       	ldi	r16, 0x80	; 128
    3214:	16 e0       	ldi	r17, 0x06	; 6
    3216:	68 94       	set
    3218:	cc 24       	eor	r12, r12
    321a:	c7 f8       	bld	r12, 7
    321c:	68 94       	set
    321e:	dd 24       	eor	r13, r13
    3220:	d7 f8       	bld	r13, 7
    3222:	1c c0       	rjmp	.+56     	; 0x325c <ir_emit+0xec>
    3224:	0f 2e       	mov	r0, r31
    3226:	f0 ea       	ldi	r31, 0xA0	; 160
    3228:	ef 2e       	mov	r14, r31
    322a:	fb e0       	ldi	r31, 0x0B	; 11
    322c:	ff 2e       	mov	r15, r31
    322e:	f0 2d       	mov	r31, r0
    3230:	00 ea       	ldi	r16, 0xA0	; 160
    3232:	16 e0       	ldi	r17, 0x06	; 6
    3234:	68 94       	set
    3236:	cc 24       	eor	r12, r12
    3238:	c3 f8       	bld	r12, 3
    323a:	68 94       	set
    323c:	dd 24       	eor	r13, r13
    323e:	d6 f8       	bld	r13, 6
    3240:	0d c0       	rjmp	.+26     	; 0x325c <ir_emit+0xec>
    3242:	0f 2e       	mov	r0, r31
    3244:	f0 ea       	ldi	r31, 0xA0	; 160
    3246:	ef 2e       	mov	r14, r31
    3248:	f8 e0       	ldi	r31, 0x08	; 8
    324a:	ff 2e       	mov	r15, r31
    324c:	f0 2d       	mov	r31, r0
    324e:	00 e4       	ldi	r16, 0x40	; 64
    3250:	16 e0       	ldi	r17, 0x06	; 6
    3252:	68 94       	set
    3254:	cc 24       	eor	r12, r12
    3256:	c3 f8       	bld	r12, 3
    3258:	dd 24       	eor	r13, r13
    325a:	d3 94       	inc	r13
    325c:	f7 01       	movw	r30, r14
    325e:	a4 80       	ldd	r10, Z+4	; 0x04
    3260:	e0 e0       	ldi	r30, 0x00	; 0
    3262:	fb e0       	ldi	r31, 0x0B	; 11
    3264:	81 81       	ldd	r24, Z+1	; 0x01
    3266:	bd 2c       	mov	r11, r13
    3268:	b0 94       	com	r11
    326a:	8b 21       	and	r24, r11
    326c:	81 83       	std	Z+1, r24	; 0x01
    326e:	e0 ea       	ldi	r30, 0xA0	; 160
    3270:	f6 e0       	ldi	r31, 0x06	; 6
    3272:	d1 82       	std	Z+1, r13	; 0x01
    3274:	84 81       	ldd	r24, Z+4	; 0x04
    3276:	8d 29       	or	r24, r13
    3278:	84 83       	std	Z+4, r24	; 0x04
    327a:	f7 01       	movw	r30, r14
    327c:	14 82       	std	Z+4, r1	; 0x04
    327e:	f8 01       	movw	r30, r16
    3280:	c1 82       	std	Z+1, r12	; 0x01
    3282:	84 81       	ldd	r24, Z+4	; 0x04
    3284:	9c 2d       	mov	r25, r12
    3286:	90 95       	com	r25
    3288:	89 23       	and	r24, r25
    328a:	84 83       	std	Z+4, r24	; 0x04
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	0e 94 43 36 	call	0x6c86	; 0x6c86 <__floatunsisf>
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	34 e2       	ldi	r19, 0x24	; 36
    329a:	44 ef       	ldi	r20, 0xF4	; 244
    329c:	5b e4       	ldi	r21, 0x4B	; 75
    329e:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    32a2:	20 e0       	ldi	r18, 0x00	; 0
    32a4:	30 e0       	ldi	r19, 0x00	; 0
    32a6:	4a e7       	ldi	r20, 0x7A	; 122
    32a8:	54 e4       	ldi	r21, 0x44	; 68
    32aa:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e0       	ldi	r20, 0x00	; 0
    32b4:	5f e3       	ldi	r21, 0x3F	; 63
    32b6:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    32ba:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <__fixunssfsi>
    32be:	ab 01       	movw	r20, r22
    32c0:	bc 01       	movw	r22, r24
    32c2:	4d 30       	cpi	r20, 0x0D	; 13
    32c4:	51 05       	cpc	r21, r1
    32c6:	61 05       	cpc	r22, r1
    32c8:	71 05       	cpc	r23, r1
    32ca:	08 f4       	brcc	.+2      	; 0x32ce <ir_emit+0x15e>
    32cc:	5d c0       	rjmp	.+186    	; 0x3388 <ir_emit+0x218>
    32ce:	41 30       	cpi	r20, 0x01	; 1
    32d0:	f4 e0       	ldi	r31, 0x04	; 4
    32d2:	5f 07       	cpc	r21, r31
    32d4:	61 05       	cpc	r22, r1
    32d6:	71 05       	cpc	r23, r1
    32d8:	d8 f4       	brcc	.+54     	; 0x3310 <ir_emit+0x1a0>
    32da:	41 50       	subi	r20, 0x01	; 1
    32dc:	51 09       	sbc	r21, r1
    32de:	61 09       	sbc	r22, r1
    32e0:	71 09       	sbc	r23, r1
    32e2:	db 01       	movw	r26, r22
    32e4:	ca 01       	movw	r24, r20
    32e6:	b6 95       	lsr	r27
    32e8:	a7 95       	ror	r26
    32ea:	97 95       	ror	r25
    32ec:	87 95       	ror	r24
    32ee:	b6 95       	lsr	r27
    32f0:	a7 95       	ror	r26
    32f2:	97 95       	ror	r25
    32f4:	87 95       	ror	r24
    32f6:	43 70       	andi	r20, 0x03	; 3
    32f8:	55 27       	eor	r21, r21
    32fa:	66 27       	eor	r22, r22
    32fc:	77 27       	eor	r23, r23
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	a1 05       	cpc	r26, r1
    3302:	b1 05       	cpc	r27, r1
    3304:	09 f4       	brne	.+2      	; 0x3308 <ir_emit+0x198>
    3306:	40 c0       	rjmp	.+128    	; 0x3388 <ir_emit+0x218>
    3308:	8a 95       	dec	r24
    330a:	01 f0       	breq	.+0      	; 0x330c <ir_emit+0x19c>
    330c:	e9 f7       	brne	.-6      	; 0x3308 <ir_emit+0x198>
    330e:	3c c0       	rjmp	.+120    	; 0x3388 <ir_emit+0x218>
    3310:	42 30       	cpi	r20, 0x02	; 2
    3312:	51 05       	cpc	r21, r1
    3314:	84 e0       	ldi	r24, 0x04	; 4
    3316:	68 07       	cpc	r22, r24
    3318:	71 05       	cpc	r23, r1
    331a:	d0 f4       	brcc	.+52     	; 0x3350 <ir_emit+0x1e0>
    331c:	42 50       	subi	r20, 0x02	; 2
    331e:	51 09       	sbc	r21, r1
    3320:	61 09       	sbc	r22, r1
    3322:	71 09       	sbc	r23, r1
    3324:	db 01       	movw	r26, r22
    3326:	ca 01       	movw	r24, r20
    3328:	b6 95       	lsr	r27
    332a:	a7 95       	ror	r26
    332c:	97 95       	ror	r25
    332e:	87 95       	ror	r24
    3330:	b6 95       	lsr	r27
    3332:	a7 95       	ror	r26
    3334:	97 95       	ror	r25
    3336:	87 95       	ror	r24
    3338:	43 70       	andi	r20, 0x03	; 3
    333a:	55 27       	eor	r21, r21
    333c:	66 27       	eor	r22, r22
    333e:	77 27       	eor	r23, r23
    3340:	00 97       	sbiw	r24, 0x00	; 0
    3342:	a1 05       	cpc	r26, r1
    3344:	b1 05       	cpc	r27, r1
    3346:	01 f1       	breq	.+64     	; 0x3388 <ir_emit+0x218>
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	f1 f7       	brne	.-4      	; 0x3348 <ir_emit+0x1d8>
    334c:	00 00       	nop
    334e:	1c c0       	rjmp	.+56     	; 0x3388 <ir_emit+0x218>
    3350:	44 50       	subi	r20, 0x04	; 4
    3352:	51 09       	sbc	r21, r1
    3354:	61 09       	sbc	r22, r1
    3356:	71 09       	sbc	r23, r1
    3358:	db 01       	movw	r26, r22
    335a:	ca 01       	movw	r24, r20
    335c:	68 94       	set
    335e:	12 f8       	bld	r1, 2
    3360:	b6 95       	lsr	r27
    3362:	a7 95       	ror	r26
    3364:	97 95       	ror	r25
    3366:	87 95       	ror	r24
    3368:	16 94       	lsr	r1
    336a:	d1 f7       	brne	.-12     	; 0x3360 <ir_emit+0x1f0>
    336c:	47 70       	andi	r20, 0x07	; 7
    336e:	55 27       	eor	r21, r21
    3370:	66 27       	eor	r22, r22
    3372:	77 27       	eor	r23, r23
    3374:	00 97       	sbiw	r24, 0x00	; 0
    3376:	a1 05       	cpc	r26, r1
    3378:	b1 05       	cpc	r27, r1
    337a:	31 f0       	breq	.+12     	; 0x3388 <ir_emit+0x218>
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	a1 09       	sbc	r26, r1
    3380:	b1 09       	sbc	r27, r1
    3382:	00 00       	nop
    3384:	01 f0       	breq	.+0      	; 0x3386 <ir_emit+0x216>
    3386:	d1 f7       	brne	.-12     	; 0x337c <ir_emit+0x20c>
    3388:	41 30       	cpi	r20, 0x01	; 1
    338a:	51 05       	cpc	r21, r1
    338c:	61 05       	cpc	r22, r1
    338e:	71 05       	cpc	r23, r1
    3390:	11 f4       	brne	.+4      	; 0x3396 <ir_emit+0x226>
    3392:	00 00       	nop
    3394:	0e c0       	rjmp	.+28     	; 0x33b2 <ir_emit+0x242>
    3396:	42 30       	cpi	r20, 0x02	; 2
    3398:	51 05       	cpc	r21, r1
    339a:	61 05       	cpc	r22, r1
    339c:	71 05       	cpc	r23, r1
    339e:	11 f4       	brne	.+4      	; 0x33a4 <ir_emit+0x234>
    33a0:	00 c0       	rjmp	.+0      	; 0x33a2 <ir_emit+0x232>
    33a2:	0f c0       	rjmp	.+30     	; 0x33c2 <ir_emit+0x252>
    33a4:	43 30       	cpi	r20, 0x03	; 3
    33a6:	51 05       	cpc	r21, r1
    33a8:	61 05       	cpc	r22, r1
    33aa:	71 05       	cpc	r23, r1
    33ac:	11 f4       	brne	.+4      	; 0x33b2 <ir_emit+0x242>
    33ae:	c8 95       	lpm
    33b0:	10 c0       	rjmp	.+32     	; 0x33d2 <ir_emit+0x262>
    33b2:	44 30       	cpi	r20, 0x04	; 4
    33b4:	51 05       	cpc	r21, r1
    33b6:	61 05       	cpc	r22, r1
    33b8:	71 05       	cpc	r23, r1
    33ba:	19 f4       	brne	.+6      	; 0x33c2 <ir_emit+0x252>
    33bc:	c8 95       	lpm
    33be:	00 00       	nop
    33c0:	10 c0       	rjmp	.+32     	; 0x33e2 <ir_emit+0x272>
    33c2:	45 30       	cpi	r20, 0x05	; 5
    33c4:	51 05       	cpc	r21, r1
    33c6:	61 05       	cpc	r22, r1
    33c8:	71 05       	cpc	r23, r1
    33ca:	19 f4       	brne	.+6      	; 0x33d2 <ir_emit+0x262>
    33cc:	c8 95       	lpm
    33ce:	00 c0       	rjmp	.+0      	; 0x33d0 <ir_emit+0x260>
    33d0:	11 c0       	rjmp	.+34     	; 0x33f4 <ir_emit+0x284>
    33d2:	46 30       	cpi	r20, 0x06	; 6
    33d4:	51 05       	cpc	r21, r1
    33d6:	61 05       	cpc	r22, r1
    33d8:	71 05       	cpc	r23, r1
    33da:	19 f4       	brne	.+6      	; 0x33e2 <ir_emit+0x272>
    33dc:	c8 95       	lpm
    33de:	c8 95       	lpm
    33e0:	12 c0       	rjmp	.+36     	; 0x3406 <ir_emit+0x296>
    33e2:	47 30       	cpi	r20, 0x07	; 7
    33e4:	51 05       	cpc	r21, r1
    33e6:	61 05       	cpc	r22, r1
    33e8:	71 05       	cpc	r23, r1
    33ea:	21 f4       	brne	.+8      	; 0x33f4 <ir_emit+0x284>
    33ec:	c8 95       	lpm
    33ee:	c8 95       	lpm
    33f0:	00 00       	nop
    33f2:	12 c0       	rjmp	.+36     	; 0x3418 <ir_emit+0x2a8>
    33f4:	48 30       	cpi	r20, 0x08	; 8
    33f6:	51 05       	cpc	r21, r1
    33f8:	61 05       	cpc	r22, r1
    33fa:	71 05       	cpc	r23, r1
    33fc:	21 f4       	brne	.+8      	; 0x3406 <ir_emit+0x296>
    33fe:	c8 95       	lpm
    3400:	c8 95       	lpm
    3402:	00 c0       	rjmp	.+0      	; 0x3404 <ir_emit+0x294>
    3404:	13 c0       	rjmp	.+38     	; 0x342c <ir_emit+0x2bc>
    3406:	49 30       	cpi	r20, 0x09	; 9
    3408:	51 05       	cpc	r21, r1
    340a:	61 05       	cpc	r22, r1
    340c:	71 05       	cpc	r23, r1
    340e:	21 f4       	brne	.+8      	; 0x3418 <ir_emit+0x2a8>
    3410:	c8 95       	lpm
    3412:	c8 95       	lpm
    3414:	c8 95       	lpm
    3416:	14 c0       	rjmp	.+40     	; 0x3440 <ir_emit+0x2d0>
    3418:	4a 30       	cpi	r20, 0x0A	; 10
    341a:	51 05       	cpc	r21, r1
    341c:	61 05       	cpc	r22, r1
    341e:	71 05       	cpc	r23, r1
    3420:	29 f4       	brne	.+10     	; 0x342c <ir_emit+0x2bc>
    3422:	c8 95       	lpm
    3424:	c8 95       	lpm
    3426:	c8 95       	lpm
    3428:	00 00       	nop
    342a:	13 c0       	rjmp	.+38     	; 0x3452 <ir_emit+0x2e2>
    342c:	4b 30       	cpi	r20, 0x0B	; 11
    342e:	51 05       	cpc	r21, r1
    3430:	61 05       	cpc	r22, r1
    3432:	71 05       	cpc	r23, r1
    3434:	29 f4       	brne	.+10     	; 0x3440 <ir_emit+0x2d0>
    3436:	c8 95       	lpm
    3438:	c8 95       	lpm
    343a:	c8 95       	lpm
    343c:	00 c0       	rjmp	.+0      	; 0x343e <ir_emit+0x2ce>
    343e:	09 c0       	rjmp	.+18     	; 0x3452 <ir_emit+0x2e2>
    3440:	4c 30       	cpi	r20, 0x0C	; 12
    3442:	51 05       	cpc	r21, r1
    3444:	61 05       	cpc	r22, r1
    3446:	71 05       	cpc	r23, r1
    3448:	21 f4       	brne	.+8      	; 0x3452 <ir_emit+0x2e2>
    344a:	c8 95       	lpm
    344c:	c8 95       	lpm
    344e:	c8 95       	lpm
    3450:	c8 95       	lpm
    3452:	f8 01       	movw	r30, r16
    3454:	84 81       	ldd	r24, Z+4	; 0x04
    3456:	c8 2a       	or	r12, r24
    3458:	c4 82       	std	Z+4, r12	; 0x04
    345a:	f7 01       	movw	r30, r14
    345c:	a4 82       	std	Z+4, r10	; 0x04
    345e:	e0 ea       	ldi	r30, 0xA0	; 160
    3460:	f6 e0       	ldi	r31, 0x06	; 6
    3462:	84 81       	ldd	r24, Z+4	; 0x04
    3464:	b8 22       	and	r11, r24
    3466:	b4 82       	std	Z+4, r11	; 0x04
    3468:	e0 e0       	ldi	r30, 0x00	; 0
    346a:	fb e0       	ldi	r31, 0x0B	; 11
    346c:	81 81       	ldd	r24, Z+1	; 0x01
    346e:	d8 2a       	or	r13, r24
    3470:	d1 82       	std	Z+1, r13	; 0x01
    3472:	1f 91       	pop	r17
    3474:	0f 91       	pop	r16
    3476:	ff 90       	pop	r15
    3478:	ef 90       	pop	r14
    347a:	df 90       	pop	r13
    347c:	cf 90       	pop	r12
    347e:	bf 90       	pop	r11
    3480:	af 90       	pop	r10
    3482:	08 95       	ret

00003484 <ir_range_blast>:
    3484:	cf 92       	push	r12
    3486:	df 92       	push	r13
    3488:	ef 92       	push	r14
    348a:	ff 92       	push	r15
    348c:	cf 93       	push	r28
    348e:	8f e0       	ldi	r24, 0x0F	; 15
    3490:	90 e0       	ldi	r25, 0x00	; 0
    3492:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    3496:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    349a:	6b 01       	movw	r12, r22
    349c:	7c 01       	movw	r14, r24
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	91 e0       	ldi	r25, 0x01	; 1
    34a2:	0e 94 bf 04 	call	0x97e	; 0x97e <set_all_ir_powers>
    34a6:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    34aa:	dc 01       	movw	r26, r24
    34ac:	cb 01       	movw	r24, r22
    34ae:	8c 19       	sub	r24, r12
    34b0:	9d 09       	sbc	r25, r13
    34b2:	ae 09       	sbc	r26, r14
    34b4:	bf 09       	sbc	r27, r15
    34b6:	02 97       	sbiw	r24, 0x02	; 2
    34b8:	a1 05       	cpc	r26, r1
    34ba:	b1 05       	cpc	r27, r1
    34bc:	a0 f3       	brcs	.-24     	; 0x34a6 <ir_range_blast+0x22>
    34be:	c0 e0       	ldi	r28, 0x00	; 0
    34c0:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    34c4:	6b 01       	movw	r12, r22
    34c6:	7c 01       	movw	r14, r24
    34c8:	67 e1       	ldi	r22, 0x17	; 23
    34ca:	8c 2f       	mov	r24, r28
    34cc:	51 de       	rcall	.-862    	; 0x3170 <ir_emit>
    34ce:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    34d2:	ab 01       	movw	r20, r22
    34d4:	bc 01       	movw	r22, r24
    34d6:	4c 19       	sub	r20, r12
    34d8:	5d 09       	sbc	r21, r13
    34da:	6e 09       	sbc	r22, r14
    34dc:	7f 09       	sbc	r23, r15
    34de:	47 31       	cpi	r20, 0x17	; 23
    34e0:	51 05       	cpc	r21, r1
    34e2:	61 05       	cpc	r22, r1
    34e4:	71 05       	cpc	r23, r1
    34e6:	98 f3       	brcs	.-26     	; 0x34ce <ir_range_blast+0x4a>
    34e8:	8f e0       	ldi	r24, 0x0F	; 15
    34ea:	90 e0       	ldi	r25, 0x00	; 0
    34ec:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    34f0:	cf 5f       	subi	r28, 0xFF	; 255
    34f2:	c6 30       	cpi	r28, 0x06	; 6
    34f4:	29 f7       	brne	.-54     	; 0x34c0 <ir_range_blast+0x3c>
    34f6:	cf 91       	pop	r28
    34f8:	ff 90       	pop	r15
    34fa:	ef 90       	pop	r14
    34fc:	df 90       	pop	r13
    34fe:	cf 90       	pop	r12
    3500:	08 95       	ret

00003502 <broadcast_rnb_data>:
    3502:	ef 92       	push	r14
    3504:	ff 92       	push	r15
    3506:	0f 93       	push	r16
    3508:	1f 93       	push	r17
    350a:	cf 93       	push	r28
    350c:	df 93       	push	r29
    350e:	e0 e4       	ldi	r30, 0x40	; 64
    3510:	fa e0       	ldi	r31, 0x0A	; 10
    3512:	c2 ad       	ldd	r28, Z+58	; 0x3a
    3514:	d3 ad       	ldd	r29, Z+59	; 0x3b
    3516:	00 ad       	ldd	r16, Z+56	; 0x38
    3518:	11 ad       	ldd	r17, Z+57	; 0x39
    351a:	e0 e4       	ldi	r30, 0x40	; 64
    351c:	f9 e0       	ldi	r31, 0x09	; 9
    351e:	e0 ac       	ldd	r14, Z+56	; 0x38
    3520:	f1 ac       	ldd	r15, Z+57	; 0x39
    3522:	4f ef       	ldi	r20, 0xFF	; 255
    3524:	60 e0       	ldi	r22, 0x00	; 0
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	84 d6       	rcall	.+3336   	; 0x4232 <set_rgb>
    352a:	45 e0       	ldi	r20, 0x05	; 5
    352c:	50 e0       	ldi	r21, 0x00	; 0
    352e:	69 ea       	ldi	r22, 0xA9	; 169
    3530:	72 e2       	ldi	r23, 0x22	; 34
    3532:	8f e3       	ldi	r24, 0x3F	; 63
    3534:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ir_cmd>
    3538:	8f e3       	ldi	r24, 0x3F	; 63
    353a:	0e 94 0f 0c 	call	0x181e	; 0x181e <wait_for_ir>
    353e:	8d e5       	ldi	r24, 0x5D	; 93
    3540:	90 e0       	ldi	r25, 0x00	; 0
    3542:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    3546:	4e 2d       	mov	r20, r14
    3548:	60 2f       	mov	r22, r16
    354a:	8c 2f       	mov	r24, r28
    354c:	72 d6       	rcall	.+3300   	; 0x4232 <set_rgb>
    354e:	8f ef       	ldi	r24, 0xFF	; 255
    3550:	99 df       	rcall	.-206    	; 0x3484 <ir_range_blast>
    3552:	df 91       	pop	r29
    3554:	cf 91       	pop	r28
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	ff 90       	pop	r15
    355c:	ef 90       	pop	r14
    355e:	08 95       	ret

00003560 <pretty_angle>:
    3560:	cf 92       	push	r12
    3562:	df 92       	push	r13
    3564:	ef 92       	push	r14
    3566:	ff 92       	push	r15
    3568:	6b 01       	movw	r12, r22
    356a:	7c 01       	movw	r14, r24
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	30 e0       	ldi	r19, 0x00	; 0
    3570:	a9 01       	movw	r20, r18
    3572:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <__gesf2>
    3576:	88 23       	and	r24, r24
    3578:	ac f0       	brlt	.+42     	; 0x35a4 <pretty_angle+0x44>
    357a:	2b ed       	ldi	r18, 0xDB	; 219
    357c:	3f e0       	ldi	r19, 0x0F	; 15
    357e:	49 e4       	ldi	r20, 0x49	; 73
    3580:	50 e4       	ldi	r21, 0x40	; 64
    3582:	c7 01       	movw	r24, r14
    3584:	b6 01       	movw	r22, r12
    3586:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    358a:	2b ed       	ldi	r18, 0xDB	; 219
    358c:	3f e0       	ldi	r19, 0x0F	; 15
    358e:	49 ec       	ldi	r20, 0xC9	; 201
    3590:	50 e4       	ldi	r21, 0x40	; 64
    3592:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <fmod>
    3596:	2b ed       	ldi	r18, 0xDB	; 219
    3598:	3f e0       	ldi	r19, 0x0F	; 15
    359a:	49 e4       	ldi	r20, 0x49	; 73
    359c:	50 e4       	ldi	r21, 0x40	; 64
    359e:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    35a2:	14 c0       	rjmp	.+40     	; 0x35cc <pretty_angle+0x6c>
    35a4:	2b ed       	ldi	r18, 0xDB	; 219
    35a6:	3f e0       	ldi	r19, 0x0F	; 15
    35a8:	49 e4       	ldi	r20, 0x49	; 73
    35aa:	50 e4       	ldi	r21, 0x40	; 64
    35ac:	c7 01       	movw	r24, r14
    35ae:	b6 01       	movw	r22, r12
    35b0:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    35b4:	2b ed       	ldi	r18, 0xDB	; 219
    35b6:	3f e0       	ldi	r19, 0x0F	; 15
    35b8:	49 ec       	ldi	r20, 0xC9	; 201
    35ba:	50 e4       	ldi	r21, 0x40	; 64
    35bc:	0e 94 87 36 	call	0x6d0e	; 0x6d0e <fmod>
    35c0:	2b ed       	ldi	r18, 0xDB	; 219
    35c2:	3f e0       	ldi	r19, 0x0F	; 15
    35c4:	49 e4       	ldi	r20, 0x49	; 73
    35c6:	50 e4       	ldi	r21, 0x40	; 64
    35c8:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    35cc:	ff 90       	pop	r15
    35ce:	ef 90       	pop	r14
    35d0:	df 90       	pop	r13
    35d2:	cf 90       	pop	r12
    35d4:	08 95       	ret

000035d6 <get_heading>:
    35d6:	2f 92       	push	r2
    35d8:	3f 92       	push	r3
    35da:	6f 92       	push	r6
    35dc:	7f 92       	push	r7
    35de:	8f 92       	push	r8
    35e0:	9f 92       	push	r9
    35e2:	af 92       	push	r10
    35e4:	bf 92       	push	r11
    35e6:	cf 92       	push	r12
    35e8:	df 92       	push	r13
    35ea:	ef 92       	push	r14
    35ec:	ff 92       	push	r15
    35ee:	0f 93       	push	r16
    35f0:	1f 93       	push	r17
    35f2:	cf 93       	push	r28
    35f4:	df 93       	push	r29
    35f6:	cd b7       	in	r28, 0x3d	; 61
    35f8:	de b7       	in	r29, 0x3e	; 62
    35fa:	60 97       	sbiw	r28, 0x10	; 16
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	de bf       	out	0x3e, r29	; 62
    3600:	4d 87       	std	Y+13, r20	; 0x0d
    3602:	5e 87       	std	Y+14, r21	; 0x0e
    3604:	6f 87       	std	Y+15, r22	; 0x0f
    3606:	78 8b       	std	Y+16, r23	; 0x10
    3608:	19 82       	std	Y+1, r1	; 0x01
    360a:	1a 82       	std	Y+2, r1	; 0x02
    360c:	1b 82       	std	Y+3, r1	; 0x03
    360e:	1c 82       	std	Y+4, r1	; 0x04
    3610:	1d 82       	std	Y+5, r1	; 0x05
    3612:	1e 82       	std	Y+6, r1	; 0x06
    3614:	1f 82       	std	Y+7, r1	; 0x07
    3616:	18 86       	std	Y+8, r1	; 0x08
    3618:	08 e3       	ldi	r16, 0x38	; 56
    361a:	10 e2       	ldi	r17, 0x20	; 32
    361c:	1c 01       	movw	r2, r24
    361e:	0f 2e       	mov	r0, r31
    3620:	f8 e6       	ldi	r31, 0x68	; 104
    3622:	6f 2e       	mov	r6, r31
    3624:	f0 e2       	ldi	r31, 0x20	; 32
    3626:	7f 2e       	mov	r7, r31
    3628:	f0 2d       	mov	r31, r0
    362a:	f1 01       	movw	r30, r2
    362c:	61 91       	ld	r22, Z+
    362e:	1f 01       	movw	r2, r30
    3630:	70 e0       	ldi	r23, 0x00	; 0
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <__floatsisf>
    363a:	6b 01       	movw	r12, r22
    363c:	7c 01       	movw	r14, r24
    363e:	89 80       	ldd	r8, Y+1	; 0x01
    3640:	9a 80       	ldd	r9, Y+2	; 0x02
    3642:	ab 80       	ldd	r10, Y+3	; 0x03
    3644:	bc 80       	ldd	r11, Y+4	; 0x04
    3646:	f8 01       	movw	r30, r16
    3648:	20 81       	ld	r18, Z
    364a:	31 81       	ldd	r19, Z+1	; 0x01
    364c:	42 81       	ldd	r20, Z+2	; 0x02
    364e:	53 81       	ldd	r21, Z+3	; 0x03
    3650:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3654:	a5 01       	movw	r20, r10
    3656:	94 01       	movw	r18, r8
    3658:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    365c:	69 83       	std	Y+1, r22	; 0x01
    365e:	7a 83       	std	Y+2, r23	; 0x02
    3660:	8b 83       	std	Y+3, r24	; 0x03
    3662:	9c 83       	std	Y+4, r25	; 0x04
    3664:	8d 80       	ldd	r8, Y+5	; 0x05
    3666:	9e 80       	ldd	r9, Y+6	; 0x06
    3668:	af 80       	ldd	r10, Y+7	; 0x07
    366a:	b8 84       	ldd	r11, Y+8	; 0x08
    366c:	f8 01       	movw	r30, r16
    366e:	24 81       	ldd	r18, Z+4	; 0x04
    3670:	35 81       	ldd	r19, Z+5	; 0x05
    3672:	46 81       	ldd	r20, Z+6	; 0x06
    3674:	57 81       	ldd	r21, Z+7	; 0x07
    3676:	c7 01       	movw	r24, r14
    3678:	b6 01       	movw	r22, r12
    367a:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    367e:	a5 01       	movw	r20, r10
    3680:	94 01       	movw	r18, r8
    3682:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    3686:	6d 83       	std	Y+5, r22	; 0x05
    3688:	7e 83       	std	Y+6, r23	; 0x06
    368a:	8f 83       	std	Y+7, r24	; 0x07
    368c:	98 87       	std	Y+8, r25	; 0x08
    368e:	08 5f       	subi	r16, 0xF8	; 248
    3690:	1f 4f       	sbci	r17, 0xFF	; 255
    3692:	06 15       	cp	r16, r6
    3694:	17 05       	cpc	r17, r7
    3696:	49 f6       	brne	.-110    	; 0x362a <get_heading+0x54>
    3698:	29 81       	ldd	r18, Y+1	; 0x01
    369a:	3a 81       	ldd	r19, Y+2	; 0x02
    369c:	4b 81       	ldd	r20, Y+3	; 0x03
    369e:	5c 81       	ldd	r21, Y+4	; 0x04
    36a0:	6d 81       	ldd	r22, Y+5	; 0x05
    36a2:	7e 81       	ldd	r23, Y+6	; 0x06
    36a4:	8f 81       	ldd	r24, Y+7	; 0x07
    36a6:	98 85       	ldd	r25, Y+8	; 0x08
    36a8:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <atan2>
    36ac:	69 87       	std	Y+9, r22	; 0x09
    36ae:	7a 87       	std	Y+10, r23	; 0x0a
    36b0:	8b 87       	std	Y+11, r24	; 0x0b
    36b2:	9c 87       	std	Y+12, r25	; 0x0c
    36b4:	c9 84       	ldd	r12, Y+9	; 0x09
    36b6:	da 84       	ldd	r13, Y+10	; 0x0a
    36b8:	eb 84       	ldd	r14, Y+11	; 0x0b
    36ba:	fc 84       	ldd	r15, Y+12	; 0x0c
    36bc:	2b ed       	ldi	r18, 0xDB	; 219
    36be:	3f e0       	ldi	r19, 0x0F	; 15
    36c0:	49 e4       	ldi	r20, 0x49	; 73
    36c2:	50 e4       	ldi	r21, 0x40	; 64
    36c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    36c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    36c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    36ca:	98 89       	ldd	r25, Y+16	; 0x10
    36cc:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    36d0:	a7 01       	movw	r20, r14
    36d2:	96 01       	movw	r18, r12
    36d4:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    36d8:	43 df       	rcall	.-378    	; 0x3560 <pretty_angle>
    36da:	60 96       	adiw	r28, 0x10	; 16
    36dc:	cd bf       	out	0x3d, r28	; 61
    36de:	de bf       	out	0x3e, r29	; 62
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	ff 90       	pop	r15
    36ea:	ef 90       	pop	r14
    36ec:	df 90       	pop	r13
    36ee:	cf 90       	pop	r12
    36f0:	bf 90       	pop	r11
    36f2:	af 90       	pop	r10
    36f4:	9f 90       	pop	r9
    36f6:	8f 90       	pop	r8
    36f8:	7f 90       	pop	r7
    36fa:	6f 90       	pop	r6
    36fc:	3f 90       	pop	r3
    36fe:	2f 90       	pop	r2
    3700:	08 95       	ret

00003702 <rad_to_deg>:
    3702:	2e df       	rcall	.-420    	; 0x3560 <pretty_angle>
    3704:	2b ed       	ldi	r18, 0xDB	; 219
    3706:	3f e0       	ldi	r19, 0x0F	; 15
    3708:	49 e4       	ldi	r20, 0x49	; 73
    370a:	50 e4       	ldi	r21, 0x40	; 64
    370c:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	44 e3       	ldi	r20, 0x34	; 52
    3716:	53 e4       	ldi	r21, 0x43	; 67
    3718:	0c 94 ba 37 	jmp	0x6f74	; 0x6f74 <__mulsf3>
    371c:	08 95       	ret

0000371e <sensor_model>:
    371e:	cf 92       	push	r12
    3720:	df 92       	push	r13
    3722:	ef 92       	push	r14
    3724:	ff 92       	push	r15
    3726:	6b 01       	movw	r12, r22
    3728:	7c 01       	movw	r14, r24
    372a:	2b ed       	ldi	r18, 0xDB	; 219
    372c:	3f e0       	ldi	r19, 0x0F	; 15
    372e:	49 ec       	ldi	r20, 0xC9	; 201
    3730:	5f eb       	ldi	r21, 0xBF	; 191
    3732:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <__gesf2>
    3736:	18 16       	cp	r1, r24
    3738:	7c f4       	brge	.+30     	; 0x3758 <sensor_model+0x3a>
    373a:	2b ed       	ldi	r18, 0xDB	; 219
    373c:	3f e0       	ldi	r19, 0x0F	; 15
    373e:	49 ec       	ldi	r20, 0xC9	; 201
    3740:	5f e3       	ldi	r21, 0x3F	; 63
    3742:	c7 01       	movw	r24, r14
    3744:	b6 01       	movw	r22, r12
    3746:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <__cmpsf2>
    374a:	88 23       	and	r24, r24
    374c:	4c f4       	brge	.+18     	; 0x3760 <sensor_model+0x42>
    374e:	c7 01       	movw	r24, r14
    3750:	b6 01       	movw	r22, r12
    3752:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <cos>
    3756:	07 c0       	rjmp	.+14     	; 0x3766 <sensor_model+0x48>
    3758:	60 e0       	ldi	r22, 0x00	; 0
    375a:	70 e0       	ldi	r23, 0x00	; 0
    375c:	cb 01       	movw	r24, r22
    375e:	03 c0       	rjmp	.+6      	; 0x3766 <sensor_model+0x48>
    3760:	60 e0       	ldi	r22, 0x00	; 0
    3762:	70 e0       	ldi	r23, 0x00	; 0
    3764:	cb 01       	movw	r24, r22
    3766:	ff 90       	pop	r15
    3768:	ef 90       	pop	r14
    376a:	df 90       	pop	r13
    376c:	cf 90       	pop	r12
    376e:	08 95       	ret

00003770 <emitter_model>:
    3770:	cf 92       	push	r12
    3772:	df 92       	push	r13
    3774:	ef 92       	push	r14
    3776:	ff 92       	push	r15
    3778:	6b 01       	movw	r12, r22
    377a:	7c 01       	movw	r14, r24
    377c:	2b ed       	ldi	r18, 0xDB	; 219
    377e:	3f e0       	ldi	r19, 0x0F	; 15
    3780:	49 ec       	ldi	r20, 0xC9	; 201
    3782:	5f eb       	ldi	r21, 0xBF	; 191
    3784:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <__gesf2>
    3788:	18 16       	cp	r1, r24
    378a:	7c f4       	brge	.+30     	; 0x37aa <emitter_model+0x3a>
    378c:	2b ed       	ldi	r18, 0xDB	; 219
    378e:	3f e0       	ldi	r19, 0x0F	; 15
    3790:	49 ec       	ldi	r20, 0xC9	; 201
    3792:	5f e3       	ldi	r21, 0x3F	; 63
    3794:	c7 01       	movw	r24, r14
    3796:	b6 01       	movw	r22, r12
    3798:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <__cmpsf2>
    379c:	88 23       	and	r24, r24
    379e:	4c f4       	brge	.+18     	; 0x37b2 <emitter_model+0x42>
    37a0:	c7 01       	movw	r24, r14
    37a2:	b6 01       	movw	r22, r12
    37a4:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <cos>
    37a8:	07 c0       	rjmp	.+14     	; 0x37b8 <emitter_model+0x48>
    37aa:	60 e0       	ldi	r22, 0x00	; 0
    37ac:	70 e0       	ldi	r23, 0x00	; 0
    37ae:	cb 01       	movw	r24, r22
    37b0:	03 c0       	rjmp	.+6      	; 0x37b8 <emitter_model+0x48>
    37b2:	60 e0       	ldi	r22, 0x00	; 0
    37b4:	70 e0       	ldi	r23, 0x00	; 0
    37b6:	cb 01       	movw	r24, r22
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	df 90       	pop	r13
    37be:	cf 90       	pop	r12
    37c0:	08 95       	ret

000037c2 <inverse_amplitude_model>:

float inverse_amplitude_model(float ADC_val, uint8_t power)
{
	if(power == 255)		return (19.6587/sqrtf(ADC_val/2.-1.36255)) - 1.19672;
    37c2:	4f 3f       	cpi	r20, 0xFF	; 255
    37c4:	e1 f4       	brne	.+56     	; 0x37fe <inverse_amplitude_model+0x3c>
    37c6:	20 e0       	ldi	r18, 0x00	; 0
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	40 e0       	ldi	r20, 0x00	; 0
    37cc:	5f e3       	ldi	r21, 0x3F	; 63
    37ce:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    37d2:	2a e0       	ldi	r18, 0x0A	; 10
    37d4:	38 e6       	ldi	r19, 0x68	; 104
    37d6:	4e ea       	ldi	r20, 0xAE	; 174
    37d8:	5f e3       	ldi	r21, 0x3F	; 63
    37da:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    37de:	0e 94 27 38 	call	0x704e	; 0x704e <sqrt>
    37e2:	9b 01       	movw	r18, r22
    37e4:	ac 01       	movw	r20, r24
    37e6:	65 e0       	ldi	r22, 0x05	; 5
    37e8:	75 e4       	ldi	r23, 0x45	; 69
    37ea:	8d e9       	ldi	r24, 0x9D	; 157
    37ec:	91 e4       	ldi	r25, 0x41	; 65
    37ee:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    37f2:	2f e1       	ldi	r18, 0x1F	; 31
    37f4:	3e e2       	ldi	r19, 0x2E	; 46
    37f6:	49 e9       	ldi	r20, 0x99	; 153
    37f8:	5f e3       	ldi	r21, 0x3F	; 63
    37fa:	0c 94 dc 34 	jmp	0x69b8	; 0x69b8 <__subsf3>
	//else if(power == 250) return (33.166/sqrtf(ADC_val - 12.5)) + 4;
	else					printf("ERROR: Unexpected power: %hhu\r\n",power);
    37fe:	1f 92       	push	r1
    3800:	4f 93       	push	r20
    3802:	8f ea       	ldi	r24, 0xAF	; 175
    3804:	92 e2       	ldi	r25, 0x22	; 34
    3806:	9f 93       	push	r25
    3808:	8f 93       	push	r24
    380a:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
	return 0;
    380e:	0f 90       	pop	r0
    3810:	0f 90       	pop	r0
    3812:	0f 90       	pop	r0
    3814:	0f 90       	pop	r0
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	70 e0       	ldi	r23, 0x00	; 0
    381a:	cb 01       	movw	r24, r22
}
    381c:	08 95       	ret

0000381e <get_initial_range_guess>:
	
	return pretty_angle(heading);
}

float get_initial_range_guess(float bearing, float heading, uint8_t power, uint8_t sensor_total[6], uint8_t emitter_total[6], uint8_t brightness_matrix[6][6])
{
    381e:	4f 92       	push	r4
    3820:	5f 92       	push	r5
    3822:	6f 92       	push	r6
    3824:	7f 92       	push	r7
    3826:	8f 92       	push	r8
    3828:	9f 92       	push	r9
    382a:	af 92       	push	r10
    382c:	bf 92       	push	r11
    382e:	cf 92       	push	r12
    3830:	df 92       	push	r13
    3832:	ef 92       	push	r14
    3834:	ff 92       	push	r15
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	cf 93       	push	r28
    383c:	df 93       	push	r29
    383e:	00 d0       	rcall	.+0      	; 0x3840 <get_initial_range_guess+0x22>
    3840:	1f 92       	push	r1
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	2b 01       	movw	r4, r22
    3848:	3c 01       	movw	r6, r24
    384a:	29 83       	std	Y+1, r18	; 0x01
    384c:	3a 83       	std	Y+2, r19	; 0x02
    384e:	4b 83       	std	Y+3, r20	; 0x03
    3850:	5c 83       	std	Y+4, r21	; 0x04
    3852:	ac 2d       	mov	r26, r12
    3854:	bd 2d       	mov	r27, r13
    3856:	ee 2d       	mov	r30, r14
    3858:	ff 2d       	mov	r31, r15
	uint8_t best_e=255, best_s=255;
	uint16_t biggest_e_val = 0;
	uint16_t biggest_s_val = 0;

	for(uint8_t i = 0; i < 6; i++)
    385a:	60 e0       	ldi	r22, 0x00	; 0

float get_initial_range_guess(float bearing, float heading, uint8_t power, uint8_t sensor_total[6], uint8_t emitter_total[6], uint8_t brightness_matrix[6][6])
{
	uint8_t best_e=255, best_s=255;
	uint16_t biggest_e_val = 0;
	uint16_t biggest_s_val = 0;
    385c:	40 e0       	ldi	r20, 0x00	; 0
    385e:	50 e0       	ldi	r21, 0x00	; 0
}

float get_initial_range_guess(float bearing, float heading, uint8_t power, uint8_t sensor_total[6], uint8_t emitter_total[6], uint8_t brightness_matrix[6][6])
{
	uint8_t best_e=255, best_s=255;
	uint16_t biggest_e_val = 0;
    3860:	20 e0       	ldi	r18, 0x00	; 0
    3862:	30 e0       	ldi	r19, 0x00	; 0
	return pretty_angle(heading);
}

float get_initial_range_guess(float bearing, float heading, uint8_t power, uint8_t sensor_total[6], uint8_t emitter_total[6], uint8_t brightness_matrix[6][6])
{
	uint8_t best_e=255, best_s=255;
    3864:	7f ef       	ldi	r23, 0xFF	; 255
    3866:	1f ef       	ldi	r17, 0xFF	; 255
	uint16_t biggest_e_val = 0;
	uint16_t biggest_s_val = 0;

	for(uint8_t i = 0; i < 6; i++)
	{
		if(emitter_total[i] > biggest_e_val)
    3868:	8d 91       	ld	r24, X+
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	28 17       	cp	r18, r24
    386e:	39 07       	cpc	r19, r25
    3870:	10 f4       	brcc	.+4      	; 0x3876 <get_initial_range_guess+0x58>
		{
			best_e = i;
			biggest_e_val = emitter_total[best_e];
    3872:	9c 01       	movw	r18, r24
    3874:	16 2f       	mov	r17, r22
		}
		if(sensor_total[i] > biggest_s_val)
    3876:	81 91       	ld	r24, Z+
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	48 17       	cp	r20, r24
    387c:	59 07       	cpc	r21, r25
    387e:	10 f4       	brcc	.+4      	; 0x3884 <get_initial_range_guess+0x66>
		{
			best_s = i;
			biggest_s_val = sensor_total[best_s];
    3880:	ac 01       	movw	r20, r24
    3882:	76 2f       	mov	r23, r22
{
	uint8_t best_e=255, best_s=255;
	uint16_t biggest_e_val = 0;
	uint16_t biggest_s_val = 0;

	for(uint8_t i = 0; i < 6; i++)
    3884:	6f 5f       	subi	r22, 0xFF	; 255
    3886:	66 30       	cpi	r22, 0x06	; 6
    3888:	79 f7       	brne	.-34     	; 0x3868 <get_initial_range_guess+0x4a>
	}
	
	float alpha, beta;
	
	// find alpha using infinite approximation
	alpha = bearing - basis_angle[best_s];
    388a:	87 2e       	mov	r8, r23
    388c:	91 2c       	mov	r9, r1
    388e:	f4 01       	movw	r30, r8
    3890:	ee 0f       	add	r30, r30
    3892:	ff 1f       	adc	r31, r31
    3894:	ee 0f       	add	r30, r30
    3896:	ff 1f       	adc	r31, r31
    3898:	e0 5e       	subi	r30, 0xE0	; 224
    389a:	ff 4d       	sbci	r31, 0xDF	; 223
    389c:	20 81       	ld	r18, Z
    389e:	31 81       	ldd	r19, Z+1	; 0x01
    38a0:	42 81       	ldd	r20, Z+2	; 0x02
    38a2:	53 81       	ldd	r21, Z+3	; 0x03
    38a4:	c3 01       	movw	r24, r6
    38a6:	b2 01       	movw	r22, r4
    38a8:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    38ac:	6b 01       	movw	r12, r22
    38ae:	7c 01       	movw	r14, r24
	if((alpha > M_PI_2) || (alpha < -M_PI_2))
    38b0:	2b ed       	ldi	r18, 0xDB	; 219
    38b2:	3f e0       	ldi	r19, 0x0F	; 15
    38b4:	49 ec       	ldi	r20, 0xC9	; 201
    38b6:	5f e3       	ldi	r21, 0x3F	; 63
    38b8:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <__gesf2>
    38bc:	18 16       	cp	r1, r24
    38be:	0c f4       	brge	.+2      	; 0x38c2 <get_initial_range_guess+0xa4>
    38c0:	76 c0       	rjmp	.+236    	; 0x39ae <get_initial_range_guess+0x190>
    38c2:	2b ed       	ldi	r18, 0xDB	; 219
    38c4:	3f e0       	ldi	r19, 0x0F	; 15
    38c6:	49 ec       	ldi	r20, 0xC9	; 201
    38c8:	5f eb       	ldi	r21, 0xBF	; 191
    38ca:	c7 01       	movw	r24, r14
    38cc:	b6 01       	movw	r22, r12
    38ce:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <__cmpsf2>
    38d2:	88 23       	and	r24, r24
    38d4:	0c f4       	brge	.+2      	; 0x38d8 <get_initial_range_guess+0xba>
    38d6:	6f c0       	rjmp	.+222    	; 0x39b6 <get_initial_range_guess+0x198>
		//printf("ERROR: alpha out of range (alpha: %f, sensor %u)\r\n", alpha, best_s); 
		return 0;
	}
	
	// find beta using infinite approximation
	beta = bearing - heading - basis_angle[best_e] - M_PI;
    38d8:	29 81       	ldd	r18, Y+1	; 0x01
    38da:	3a 81       	ldd	r19, Y+2	; 0x02
    38dc:	4b 81       	ldd	r20, Y+3	; 0x03
    38de:	5c 81       	ldd	r21, Y+4	; 0x04
    38e0:	c3 01       	movw	r24, r6
    38e2:	b2 01       	movw	r22, r4
    38e4:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    38e8:	e1 2f       	mov	r30, r17
    38ea:	f0 e0       	ldi	r31, 0x00	; 0
    38ec:	ee 0f       	add	r30, r30
    38ee:	ff 1f       	adc	r31, r31
    38f0:	ee 0f       	add	r30, r30
    38f2:	ff 1f       	adc	r31, r31
    38f4:	e0 5e       	subi	r30, 0xE0	; 224
    38f6:	ff 4d       	sbci	r31, 0xDF	; 223
    38f8:	20 81       	ld	r18, Z
    38fa:	31 81       	ldd	r19, Z+1	; 0x01
    38fc:	42 81       	ldd	r20, Z+2	; 0x02
    38fe:	53 81       	ldd	r21, Z+3	; 0x03
    3900:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3904:	2b ed       	ldi	r18, 0xDB	; 219
    3906:	3f e0       	ldi	r19, 0x0F	; 15
    3908:	49 e4       	ldi	r20, 0x49	; 73
    390a:	50 e4       	ldi	r21, 0x40	; 64
    390c:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
	beta = pretty_angle(beta);
    3910:	27 de       	rcall	.-946    	; 0x3560 <pretty_angle>
    3912:	2b 01       	movw	r4, r22
    3914:	3c 01       	movw	r6, r24
	if((beta > M_PI_2)  || (beta < -M_PI_2))
    3916:	2b ed       	ldi	r18, 0xDB	; 219
    3918:	3f e0       	ldi	r19, 0x0F	; 15
    391a:	49 ec       	ldi	r20, 0xC9	; 201
    391c:	5f e3       	ldi	r21, 0x3F	; 63
    391e:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <__gesf2>
    3922:	18 16       	cp	r1, r24
    3924:	0c f4       	brge	.+2      	; 0x3928 <get_initial_range_guess+0x10a>
    3926:	4b c0       	rjmp	.+150    	; 0x39be <get_initial_range_guess+0x1a0>
    3928:	2b ed       	ldi	r18, 0xDB	; 219
    392a:	3f e0       	ldi	r19, 0x0F	; 15
    392c:	49 ec       	ldi	r20, 0xC9	; 201
    392e:	5f eb       	ldi	r21, 0xBF	; 191
    3930:	c3 01       	movw	r24, r6
    3932:	b2 01       	movw	r22, r4
    3934:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <__cmpsf2>
    3938:	88 23       	and	r24, r24
    393a:	0c f4       	brge	.+2      	; 0x393e <get_initial_range_guess+0x120>
    393c:	44 c0       	rjmp	.+136    	; 0x39c6 <get_initial_range_guess+0x1a8>
		return 0;
	}
	
	// expected contribution (using infinite distance approximation)
	float amplitude;
	float exp_con = sensor_model(alpha)*emitter_model(beta);
    393e:	c7 01       	movw	r24, r14
    3940:	b6 01       	movw	r22, r12
    3942:	ed de       	rcall	.-550    	; 0x371e <sensor_model>
    3944:	6b 01       	movw	r12, r22
    3946:	7c 01       	movw	r14, r24
    3948:	c3 01       	movw	r24, r6
    394a:	b2 01       	movw	r22, r4
    394c:	11 df       	rcall	.-478    	; 0x3770 <emitter_model>
    394e:	9b 01       	movw	r18, r22
    3950:	ac 01       	movw	r20, r24
    3952:	c7 01       	movw	r24, r14
    3954:	b6 01       	movw	r22, r12
    3956:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    395a:	6b 01       	movw	r12, r22
    395c:	7c 01       	movw	r14, r24
	
	if(exp_con > 0)	amplitude = brightness_matrix[best_e][best_s]/exp_con;	
    395e:	20 e0       	ldi	r18, 0x00	; 0
    3960:	30 e0       	ldi	r19, 0x00	; 0
    3962:	a9 01       	movw	r20, r18
    3964:	0e 94 af 37 	call	0x6f5e	; 0x6f5e <__gesf2>
    3968:	18 16       	cp	r1, r24
    396a:	8c f5       	brge	.+98     	; 0x39ce <get_initial_range_guess+0x1b0>
    396c:	81 2f       	mov	r24, r17
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	9c 01       	movw	r18, r24
    3972:	22 0f       	add	r18, r18
    3974:	33 1f       	adc	r19, r19
    3976:	82 0f       	add	r24, r18
    3978:	93 1f       	adc	r25, r19
    397a:	88 0f       	add	r24, r24
    397c:	99 1f       	adc	r25, r25
    397e:	a8 0e       	add	r10, r24
    3980:	b9 1e       	adc	r11, r25
    3982:	f4 01       	movw	r30, r8
    3984:	ea 0d       	add	r30, r10
    3986:	fb 1d       	adc	r31, r11
    3988:	60 81       	ld	r22, Z
    398a:	70 e0       	ldi	r23, 0x00	; 0
    398c:	80 e0       	ldi	r24, 0x00	; 0
    398e:	90 e0       	ldi	r25, 0x00	; 0
    3990:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <__floatsisf>
    3994:	a7 01       	movw	r20, r14
    3996:	96 01       	movw	r18, r12
    3998:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
	{
		//printf("ERROR: exp_con (%f) is negative (or zero)!\r\n", exp_con); 
		return 0;
	}

	return inverse_amplitude_model(amplitude, power) + 2*DROPLET_RADIUS;
    399c:	40 2f       	mov	r20, r16
    399e:	11 df       	rcall	.-478    	; 0x37c2 <inverse_amplitude_model>
    39a0:	28 e9       	ldi	r18, 0x98	; 152
    39a2:	3c e4       	ldi	r19, 0x4C	; 76
    39a4:	45 e8       	ldi	r20, 0x85	; 133
    39a6:	50 e4       	ldi	r21, 0x40	; 64
    39a8:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    39ac:	13 c0       	rjmp	.+38     	; 0x39d4 <get_initial_range_guess+0x1b6>
	// find alpha using infinite approximation
	alpha = bearing - basis_angle[best_s];
	if((alpha > M_PI_2) || (alpha < -M_PI_2))
	{
		//printf("ERROR: alpha out of range (alpha: %f, sensor %u)\r\n", alpha, best_s); 
		return 0;
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	70 e0       	ldi	r23, 0x00	; 0
    39b2:	cb 01       	movw	r24, r22
    39b4:	0f c0       	rjmp	.+30     	; 0x39d4 <get_initial_range_guess+0x1b6>
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	70 e0       	ldi	r23, 0x00	; 0
    39ba:	cb 01       	movw	r24, r22
    39bc:	0b c0       	rjmp	.+22     	; 0x39d4 <get_initial_range_guess+0x1b6>
	beta = bearing - heading - basis_angle[best_e] - M_PI;
	beta = pretty_angle(beta);
	if((beta > M_PI_2)  || (beta < -M_PI_2))
	{
		//printf("ERROR: beta out of range (beta: %f, emitter %u)\r\n",  beta, best_e); 
		return 0;
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	70 e0       	ldi	r23, 0x00	; 0
    39c2:	cb 01       	movw	r24, r22
    39c4:	07 c0       	rjmp	.+14     	; 0x39d4 <get_initial_range_guess+0x1b6>
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	70 e0       	ldi	r23, 0x00	; 0
    39ca:	cb 01       	movw	r24, r22
    39cc:	03 c0       	rjmp	.+6      	; 0x39d4 <get_initial_range_guess+0x1b6>
	
	if(exp_con > 0)	amplitude = brightness_matrix[best_e][best_s]/exp_con;	
	else
	{
		//printf("ERROR: exp_con (%f) is negative (or zero)!\r\n", exp_con); 
		return 0;
    39ce:	60 e0       	ldi	r22, 0x00	; 0
    39d0:	70 e0       	ldi	r23, 0x00	; 0
    39d2:	cb 01       	movw	r24, r22
	}

	return inverse_amplitude_model(amplitude, power) + 2*DROPLET_RADIUS;
}
    39d4:	24 96       	adiw	r28, 0x04	; 4
    39d6:	cd bf       	out	0x3d, r28	; 61
    39d8:	de bf       	out	0x3e, r29	; 62
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	ff 90       	pop	r15
    39e4:	ef 90       	pop	r14
    39e6:	df 90       	pop	r13
    39e8:	cf 90       	pop	r12
    39ea:	bf 90       	pop	r11
    39ec:	af 90       	pop	r10
    39ee:	9f 90       	pop	r9
    39f0:	8f 90       	pop	r8
    39f2:	7f 90       	pop	r7
    39f4:	6f 90       	pop	r6
    39f6:	5f 90       	pop	r5
    39f8:	4f 90       	pop	r4
    39fa:	08 95       	ret

000039fc <range_estimate>:

float range_estimate(float init_range, float bearing, float heading, uint8_t power, uint8_t brightness_matrix[6][6])
{
    39fc:	2f 92       	push	r2
    39fe:	3f 92       	push	r3
    3a00:	4f 92       	push	r4
    3a02:	5f 92       	push	r5
    3a04:	6f 92       	push	r6
    3a06:	7f 92       	push	r7
    3a08:	8f 92       	push	r8
    3a0a:	9f 92       	push	r9
    3a0c:	af 92       	push	r10
    3a0e:	bf 92       	push	r11
    3a10:	cf 92       	push	r12
    3a12:	df 92       	push	r13
    3a14:	ef 92       	push	r14
    3a16:	ff 92       	push	r15
    3a18:	0f 93       	push	r16
    3a1a:	1f 93       	push	r17
    3a1c:	cf 93       	push	r28
    3a1e:	df 93       	push	r29
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	c7 5b       	subi	r28, 0xB7	; 183
    3a26:	d1 09       	sbc	r29, r1
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	de bf       	out	0x3e, r29	; 62
    3a2c:	cd 55       	subi	r28, 0x5D	; 93
    3a2e:	df 4f       	sbci	r29, 0xFF	; 255
    3a30:	68 83       	st	Y, r22
    3a32:	79 83       	std	Y+1, r23	; 0x01
    3a34:	8a 83       	std	Y+2, r24	; 0x02
    3a36:	9b 83       	std	Y+3, r25	; 0x03
    3a38:	c3 5a       	subi	r28, 0xA3	; 163
    3a3a:	d0 40       	sbci	r29, 0x00	; 0
    3a3c:	c9 55       	subi	r28, 0x59	; 89
    3a3e:	df 4f       	sbci	r29, 0xFF	; 255
    3a40:	28 83       	st	Y, r18
    3a42:	39 83       	std	Y+1, r19	; 0x01
    3a44:	4a 83       	std	Y+2, r20	; 0x02
    3a46:	5b 83       	std	Y+3, r21	; 0x03
    3a48:	c7 5a       	subi	r28, 0xA7	; 167
    3a4a:	d0 40       	sbci	r29, 0x00	; 0
    3a4c:	cf 54       	subi	r28, 0x4F	; 79
    3a4e:	df 4f       	sbci	r29, 0xFF	; 255
    3a50:	e8 82       	st	Y, r14
    3a52:	f9 82       	std	Y+1, r15	; 0x01
    3a54:	0a 83       	std	Y+2, r16	; 0x02
    3a56:	1b 83       	std	Y+3, r17	; 0x03
    3a58:	c1 5b       	subi	r28, 0xB1	; 177
    3a5a:	d0 40       	sbci	r29, 0x00	; 0
    3a5c:	cb 54       	subi	r28, 0x4B	; 75
    3a5e:	df 4f       	sbci	r29, 0xFF	; 255
    3a60:	c8 82       	st	Y, r12
    3a62:	c5 5b       	subi	r28, 0xB5	; 181
    3a64:	d0 40       	sbci	r29, 0x00	; 0
    3a66:	c3 56       	subi	r28, 0x63	; 99
    3a68:	df 4f       	sbci	r29, 0xFF	; 255
    3a6a:	a8 82       	st	Y, r10
    3a6c:	cd 59       	subi	r28, 0x9D	; 157
    3a6e:	d0 40       	sbci	r29, 0x00	; 0
    3a70:	c2 56       	subi	r28, 0x62	; 98
    3a72:	df 4f       	sbci	r29, 0xFF	; 255
    3a74:	b8 82       	st	Y, r11
    3a76:	ce 59       	subi	r28, 0x9E	; 158
    3a78:	d0 40       	sbci	r29, 0x00	; 0
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	01 96       	adiw	r24, 0x01	; 1
    3a7e:	ca 54       	subi	r28, 0x4A	; 74
    3a80:	df 4f       	sbci	r29, 0xFF	; 255
    3a82:	88 83       	st	Y, r24
    3a84:	99 83       	std	Y+1, r25	; 0x01
    3a86:	c6 5b       	subi	r28, 0xB6	; 182
    3a88:	d0 40       	sbci	r29, 0x00	; 0
	{
		for(uint8_t s = 0; s < 6; s++)
		{
			if(brightness_matrix[e][s]>maxBright)
			{
				maxBright = brightness_matrix[e][s];
    3a8a:	e0 e2       	ldi	r30, 0x20	; 32
    3a8c:	f0 e2       	ldi	r31, 0x20	; 32
    3a8e:	c5 55       	subi	r28, 0x55	; 85
    3a90:	df 4f       	sbci	r29, 0xFF	; 255
    3a92:	e8 83       	st	Y, r30
    3a94:	f9 83       	std	Y+1, r31	; 0x01
    3a96:	cb 5a       	subi	r28, 0xAB	; 171
    3a98:	d0 40       	sbci	r29, 0x00	; 0
    3a9a:	88 e3       	ldi	r24, 0x38	; 56
    3a9c:	90 e2       	ldi	r25, 0x20	; 32
    3a9e:	c5 56       	subi	r28, 0x65	; 101
    3aa0:	df 4f       	sbci	r29, 0xFF	; 255
    3aa2:	88 83       	st	Y, r24
    3aa4:	99 83       	std	Y+1, r25	; 0x01
    3aa6:	cb 59       	subi	r28, 0x9B	; 155
    3aa8:	d0 40       	sbci	r29, 0x00	; 0
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
	uint8_t maxE=255;
	uint8_t maxS=255;
	for(uint8_t e = 0; e < 6; e++)
    3aaa:	c3 55       	subi	r28, 0x53	; 83
    3aac:	df 4f       	sbci	r29, 0xFF	; 255
    3aae:	18 82       	st	Y, r1
    3ab0:	cd 5a       	subi	r28, 0xAD	; 173
    3ab2:	d0 40       	sbci	r29, 0x00	; 0
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
	uint8_t maxE=255;
	uint8_t maxS=255;
    3ab4:	9f ef       	ldi	r25, 0xFF	; 255
    3ab6:	c0 55       	subi	r28, 0x50	; 80
    3ab8:	df 4f       	sbci	r29, 0xFF	; 255
    3aba:	98 83       	st	Y, r25
    3abc:	c0 5b       	subi	r28, 0xB0	; 176
    3abe:	d0 40       	sbci	r29, 0x00	; 0
	float sensorRXx, sensorRXy, sensorTXx, sensorTXy;
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
	uint8_t maxE=255;
    3ac0:	ef ef       	ldi	r30, 0xFF	; 255
    3ac2:	c1 55       	subi	r28, 0x51	; 81
    3ac4:	df 4f       	sbci	r29, 0xFF	; 255
    3ac6:	e8 83       	st	Y, r30
    3ac8:	cf 5a       	subi	r28, 0xAF	; 175
    3aca:	d0 40       	sbci	r29, 0x00	; 0
	
	float sensorRXx, sensorRXy, sensorTXx, sensorTXy;
	float alpha, beta, sense_emit_contr;
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
    3acc:	00 e0       	ldi	r16, 0x00	; 0
    3ace:	36 c2       	rjmp	.+1132   	; 0x3f3c <range_estimate+0x540>
    3ad0:	cf 56       	subi	r28, 0x6F	; 111
    3ad2:	df 4f       	sbci	r29, 0xFF	; 255
    3ad4:	88 81       	ld	r24, Y
    3ad6:	c1 59       	subi	r28, 0x91	; 145
    3ad8:	d0 40       	sbci	r29, 0x00	; 0
    3ada:	c3 56       	subi	r28, 0x63	; 99
    3adc:	df 4f       	sbci	r29, 0xFF	; 255
    3ade:	f8 81       	ld	r31, Y
    3ae0:	cd 59       	subi	r28, 0x9D	; 157
    3ae2:	d0 40       	sbci	r29, 0x00	; 0
    3ae4:	8f 1b       	sub	r24, r31
	uint8_t maxS=255;
	for(uint8_t e = 0; e < 6; e++)
	{
		for(uint8_t s = 0; s < 6; s++)
		{
			if(brightness_matrix[e][s]>maxBright)
    3ae6:	cf 56       	subi	r28, 0x6F	; 111
    3ae8:	df 4f       	sbci	r29, 0xFF	; 255
    3aea:	e8 81       	ld	r30, Y
    3aec:	f9 81       	ldd	r31, Y+1	; 0x01
    3aee:	c1 59       	subi	r28, 0x91	; 145
    3af0:	d0 40       	sbci	r29, 0x00	; 0
    3af2:	11 91       	ld	r17, Z+
    3af4:	cf 56       	subi	r28, 0x6F	; 111
    3af6:	df 4f       	sbci	r29, 0xFF	; 255
    3af8:	e8 83       	st	Y, r30
    3afa:	f9 83       	std	Y+1, r31	; 0x01
    3afc:	c1 59       	subi	r28, 0x91	; 145
    3afe:	d0 40       	sbci	r29, 0x00	; 0
    3b00:	01 17       	cp	r16, r17
    3b02:	80 f4       	brcc	.+32     	; 0x3b24 <range_estimate+0x128>
    3b04:	c0 55       	subi	r28, 0x50	; 80
    3b06:	df 4f       	sbci	r29, 0xFF	; 255
    3b08:	88 83       	st	Y, r24
    3b0a:	c0 5b       	subi	r28, 0xB0	; 176
    3b0c:	d0 40       	sbci	r29, 0x00	; 0
    3b0e:	c2 55       	subi	r28, 0x52	; 82
    3b10:	df 4f       	sbci	r29, 0xFF	; 255
    3b12:	f8 81       	ld	r31, Y
    3b14:	ce 5a       	subi	r28, 0xAE	; 174
    3b16:	d0 40       	sbci	r29, 0x00	; 0
    3b18:	c1 55       	subi	r28, 0x51	; 81
    3b1a:	df 4f       	sbci	r29, 0xFF	; 255
    3b1c:	f8 83       	st	Y, r31
    3b1e:	cf 5a       	subi	r28, 0xAF	; 175
    3b20:	d0 40       	sbci	r29, 0x00	; 0
			{
				maxBright = brightness_matrix[e][s];
    3b22:	01 2f       	mov	r16, r17
				maxE = e;
				maxS = s;
			}
			
			if(brightness_matrix[e][s] > BASELINE_NOISE_THRESHOLD)
    3b24:	12 30       	cpi	r17, 0x02	; 2
    3b26:	08 f4       	brcc	.+2      	; 0x3b2a <range_estimate+0x12e>
    3b28:	9b c1       	rjmp	.+822    	; 0x3e60 <range_estimate+0x464>
			{				
				sensorRXx = DROPLET_SENSOR_RADIUS*basis[s][0];
    3b2a:	28 e9       	ldi	r18, 0x98	; 152
    3b2c:	3c e4       	ldi	r19, 0x4C	; 76
    3b2e:	45 e0       	ldi	r20, 0x05	; 5
    3b30:	50 e4       	ldi	r21, 0x40	; 64
    3b32:	f1 01       	movw	r30, r2
    3b34:	60 81       	ld	r22, Z
    3b36:	71 81       	ldd	r23, Z+1	; 0x01
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	93 81       	ldd	r25, Z+3	; 0x03
    3b3c:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3b40:	c9 56       	subi	r28, 0x69	; 105
    3b42:	df 4f       	sbci	r29, 0xFF	; 255
    3b44:	68 83       	st	Y, r22
    3b46:	79 83       	std	Y+1, r23	; 0x01
    3b48:	8a 83       	std	Y+2, r24	; 0x02
    3b4a:	9b 83       	std	Y+3, r25	; 0x03
    3b4c:	c7 59       	subi	r28, 0x97	; 151
    3b4e:	d0 40       	sbci	r29, 0x00	; 0
				sensorRXy = DROPLET_SENSOR_RADIUS*basis[s][1];
    3b50:	28 e9       	ldi	r18, 0x98	; 152
    3b52:	3c e4       	ldi	r19, 0x4C	; 76
    3b54:	45 e0       	ldi	r20, 0x05	; 5
    3b56:	50 e4       	ldi	r21, 0x40	; 64
    3b58:	f1 01       	movw	r30, r2
    3b5a:	64 81       	ldd	r22, Z+4	; 0x04
    3b5c:	75 81       	ldd	r23, Z+5	; 0x05
    3b5e:	86 81       	ldd	r24, Z+6	; 0x06
    3b60:	97 81       	ldd	r25, Z+7	; 0x07
    3b62:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3b66:	c1 56       	subi	r28, 0x61	; 97
    3b68:	df 4f       	sbci	r29, 0xFF	; 255
    3b6a:	68 83       	st	Y, r22
    3b6c:	79 83       	std	Y+1, r23	; 0x01
    3b6e:	8a 83       	std	Y+2, r24	; 0x02
    3b70:	9b 83       	std	Y+3, r25	; 0x03
    3b72:	cf 59       	subi	r28, 0x9F	; 159
    3b74:	d0 40       	sbci	r29, 0x00	; 0
				sensorTXx = DROPLET_SENSOR_RADIUS*basis[e][0] + init_range*cosf(bearing);
    3b76:	c9 55       	subi	r28, 0x59	; 89
    3b78:	df 4f       	sbci	r29, 0xFF	; 255
    3b7a:	68 81       	ld	r22, Y
    3b7c:	79 81       	ldd	r23, Y+1	; 0x01
    3b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3b80:	9b 81       	ldd	r25, Y+3	; 0x03
    3b82:	c7 5a       	subi	r28, 0xA7	; 167
    3b84:	d0 40       	sbci	r29, 0x00	; 0
    3b86:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <cos>
    3b8a:	4b 01       	movw	r8, r22
    3b8c:	5c 01       	movw	r10, r24
    3b8e:	28 e9       	ldi	r18, 0x98	; 152
    3b90:	3c e4       	ldi	r19, 0x4C	; 76
    3b92:	45 e0       	ldi	r20, 0x05	; 5
    3b94:	50 e4       	ldi	r21, 0x40	; 64
    3b96:	c5 56       	subi	r28, 0x65	; 101
    3b98:	df 4f       	sbci	r29, 0xFF	; 255
    3b9a:	e8 81       	ld	r30, Y
    3b9c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b9e:	cb 59       	subi	r28, 0x9B	; 155
    3ba0:	d0 40       	sbci	r29, 0x00	; 0
    3ba2:	60 81       	ld	r22, Z
    3ba4:	71 81       	ldd	r23, Z+1	; 0x01
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	93 81       	ldd	r25, Z+3	; 0x03
    3baa:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3bae:	6b 01       	movw	r12, r22
    3bb0:	7c 01       	movw	r14, r24
    3bb2:	cd 55       	subi	r28, 0x5D	; 93
    3bb4:	df 4f       	sbci	r29, 0xFF	; 255
    3bb6:	28 81       	ld	r18, Y
    3bb8:	39 81       	ldd	r19, Y+1	; 0x01
    3bba:	4a 81       	ldd	r20, Y+2	; 0x02
    3bbc:	5b 81       	ldd	r21, Y+3	; 0x03
    3bbe:	c3 5a       	subi	r28, 0xA3	; 163
    3bc0:	d0 40       	sbci	r29, 0x00	; 0
    3bc2:	c5 01       	movw	r24, r10
    3bc4:	b4 01       	movw	r22, r8
    3bc6:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3bca:	9b 01       	movw	r18, r22
    3bcc:	ac 01       	movw	r20, r24
    3bce:	c7 01       	movw	r24, r14
    3bd0:	b6 01       	movw	r22, r12
    3bd2:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    3bd6:	4b 01       	movw	r8, r22
    3bd8:	5c 01       	movw	r10, r24
				sensorTXy = DROPLET_SENSOR_RADIUS*basis[e][1] + init_range*sinf(bearing);
    3bda:	c9 55       	subi	r28, 0x59	; 89
    3bdc:	df 4f       	sbci	r29, 0xFF	; 255
    3bde:	68 81       	ld	r22, Y
    3be0:	79 81       	ldd	r23, Y+1	; 0x01
    3be2:	8a 81       	ldd	r24, Y+2	; 0x02
    3be4:	9b 81       	ldd	r25, Y+3	; 0x03
    3be6:	c7 5a       	subi	r28, 0xA7	; 167
    3be8:	d0 40       	sbci	r29, 0x00	; 0
    3bea:	0e 94 1d 38 	call	0x703a	; 0x703a <sin>
    3bee:	2b 01       	movw	r4, r22
    3bf0:	3c 01       	movw	r6, r24
    3bf2:	28 e9       	ldi	r18, 0x98	; 152
    3bf4:	3c e4       	ldi	r19, 0x4C	; 76
    3bf6:	45 e0       	ldi	r20, 0x05	; 5
    3bf8:	50 e4       	ldi	r21, 0x40	; 64
    3bfa:	c5 56       	subi	r28, 0x65	; 101
    3bfc:	df 4f       	sbci	r29, 0xFF	; 255
    3bfe:	e8 81       	ld	r30, Y
    3c00:	f9 81       	ldd	r31, Y+1	; 0x01
    3c02:	cb 59       	subi	r28, 0x9B	; 155
    3c04:	d0 40       	sbci	r29, 0x00	; 0
    3c06:	64 81       	ldd	r22, Z+4	; 0x04
    3c08:	75 81       	ldd	r23, Z+5	; 0x05
    3c0a:	86 81       	ldd	r24, Z+6	; 0x06
    3c0c:	97 81       	ldd	r25, Z+7	; 0x07
    3c0e:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3c12:	6b 01       	movw	r12, r22
    3c14:	7c 01       	movw	r14, r24
    3c16:	cd 55       	subi	r28, 0x5D	; 93
    3c18:	df 4f       	sbci	r29, 0xFF	; 255
    3c1a:	28 81       	ld	r18, Y
    3c1c:	39 81       	ldd	r19, Y+1	; 0x01
    3c1e:	4a 81       	ldd	r20, Y+2	; 0x02
    3c20:	5b 81       	ldd	r21, Y+3	; 0x03
    3c22:	c3 5a       	subi	r28, 0xA3	; 163
    3c24:	d0 40       	sbci	r29, 0x00	; 0
    3c26:	c3 01       	movw	r24, r6
    3c28:	b2 01       	movw	r22, r4
    3c2a:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3c2e:	9b 01       	movw	r18, r22
    3c30:	ac 01       	movw	r20, r24
    3c32:	c7 01       	movw	r24, r14
    3c34:	b6 01       	movw	r22, r12
    3c36:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    3c3a:	6b 01       	movw	r12, r22
    3c3c:	7c 01       	movw	r14, r24

				alpha = atan2f(sensorTXy-sensorRXy,sensorTXx-sensorRXx) - basis_angle[s];
    3c3e:	c9 56       	subi	r28, 0x69	; 105
    3c40:	df 4f       	sbci	r29, 0xFF	; 255
    3c42:	28 81       	ld	r18, Y
    3c44:	39 81       	ldd	r19, Y+1	; 0x01
    3c46:	4a 81       	ldd	r20, Y+2	; 0x02
    3c48:	5b 81       	ldd	r21, Y+3	; 0x03
    3c4a:	c7 59       	subi	r28, 0x97	; 151
    3c4c:	d0 40       	sbci	r29, 0x00	; 0
    3c4e:	c5 01       	movw	r24, r10
    3c50:	b4 01       	movw	r22, r8
    3c52:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3c56:	2b 01       	movw	r4, r22
    3c58:	3c 01       	movw	r6, r24
    3c5a:	c1 56       	subi	r28, 0x61	; 97
    3c5c:	df 4f       	sbci	r29, 0xFF	; 255
    3c5e:	28 81       	ld	r18, Y
    3c60:	39 81       	ldd	r19, Y+1	; 0x01
    3c62:	4a 81       	ldd	r20, Y+2	; 0x02
    3c64:	5b 81       	ldd	r21, Y+3	; 0x03
    3c66:	cf 59       	subi	r28, 0x9F	; 159
    3c68:	d0 40       	sbci	r29, 0x00	; 0
    3c6a:	c7 01       	movw	r24, r14
    3c6c:	b6 01       	movw	r22, r12
    3c6e:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3c72:	a3 01       	movw	r20, r6
    3c74:	92 01       	movw	r18, r4
    3c76:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <atan2>
    3c7a:	cb 56       	subi	r28, 0x6B	; 107
    3c7c:	df 4f       	sbci	r29, 0xFF	; 255
    3c7e:	e8 81       	ld	r30, Y
    3c80:	f9 81       	ldd	r31, Y+1	; 0x01
    3c82:	c5 59       	subi	r28, 0x95	; 149
    3c84:	d0 40       	sbci	r29, 0x00	; 0
    3c86:	20 81       	ld	r18, Z
    3c88:	31 81       	ldd	r19, Z+1	; 0x01
    3c8a:	42 81       	ldd	r20, Z+2	; 0x02
    3c8c:	53 81       	ldd	r21, Z+3	; 0x03
    3c8e:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3c92:	2b 01       	movw	r4, r22
    3c94:	3c 01       	movw	r6, r24
				beta = atan2f(sensorRXy-sensorTXy,sensorRXx-sensorTXx) - basis_angle[e] - heading;
    3c96:	a5 01       	movw	r20, r10
    3c98:	94 01       	movw	r18, r8
    3c9a:	c9 56       	subi	r28, 0x69	; 105
    3c9c:	df 4f       	sbci	r29, 0xFF	; 255
    3c9e:	68 81       	ld	r22, Y
    3ca0:	79 81       	ldd	r23, Y+1	; 0x01
    3ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca6:	c7 59       	subi	r28, 0x97	; 151
    3ca8:	d0 40       	sbci	r29, 0x00	; 0
    3caa:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3cae:	4b 01       	movw	r8, r22
    3cb0:	5c 01       	movw	r10, r24
    3cb2:	a7 01       	movw	r20, r14
    3cb4:	96 01       	movw	r18, r12
    3cb6:	c1 56       	subi	r28, 0x61	; 97
    3cb8:	df 4f       	sbci	r29, 0xFF	; 255
    3cba:	68 81       	ld	r22, Y
    3cbc:	79 81       	ldd	r23, Y+1	; 0x01
    3cbe:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc0:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc2:	cf 59       	subi	r28, 0x9F	; 159
    3cc4:	d0 40       	sbci	r29, 0x00	; 0
    3cc6:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3cca:	a5 01       	movw	r20, r10
    3ccc:	94 01       	movw	r18, r8
    3cce:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <atan2>
    3cd2:	c5 55       	subi	r28, 0x55	; 85
    3cd4:	df 4f       	sbci	r29, 0xFF	; 255
    3cd6:	e8 81       	ld	r30, Y
    3cd8:	f9 81       	ldd	r31, Y+1	; 0x01
    3cda:	cb 5a       	subi	r28, 0xAB	; 171
    3cdc:	d0 40       	sbci	r29, 0x00	; 0
    3cde:	20 81       	ld	r18, Z
    3ce0:	31 81       	ldd	r19, Z+1	; 0x01
    3ce2:	42 81       	ldd	r20, Z+2	; 0x02
    3ce4:	53 81       	ldd	r21, Z+3	; 0x03
    3ce6:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3cea:	cf 54       	subi	r28, 0x4F	; 79
    3cec:	df 4f       	sbci	r29, 0xFF	; 255
    3cee:	28 81       	ld	r18, Y
    3cf0:	39 81       	ldd	r19, Y+1	; 0x01
    3cf2:	4a 81       	ldd	r20, Y+2	; 0x02
    3cf4:	5b 81       	ldd	r21, Y+3	; 0x03
    3cf6:	c1 5b       	subi	r28, 0xB1	; 177
    3cf8:	d0 40       	sbci	r29, 0x00	; 0
    3cfa:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3cfe:	6b 01       	movw	r12, r22
    3d00:	7c 01       	movw	r14, r24

				alpha = pretty_angle(alpha);
    3d02:	c3 01       	movw	r24, r6
    3d04:	b2 01       	movw	r22, r4
    3d06:	2c dc       	rcall	.-1960   	; 0x3560 <pretty_angle>
    3d08:	2b 01       	movw	r4, r22
    3d0a:	3c 01       	movw	r6, r24
				beta = pretty_angle(beta);
    3d0c:	c7 01       	movw	r24, r14
    3d0e:	b6 01       	movw	r22, r12
    3d10:	27 dc       	rcall	.-1970   	; 0x3560 <pretty_angle>
    3d12:	6b 01       	movw	r12, r22
    3d14:	7c 01       	movw	r14, r24
				
				sense_emit_contr = sensor_model(alpha)*emitter_model(beta);
    3d16:	c3 01       	movw	r24, r6
    3d18:	b2 01       	movw	r22, r4
    3d1a:	01 dd       	rcall	.-1534   	; 0x371e <sensor_model>
    3d1c:	c9 56       	subi	r28, 0x69	; 105
    3d1e:	df 4f       	sbci	r29, 0xFF	; 255
    3d20:	68 83       	st	Y, r22
    3d22:	79 83       	std	Y+1, r23	; 0x01
    3d24:	8a 83       	std	Y+2, r24	; 0x02
    3d26:	9b 83       	std	Y+3, r25	; 0x03
    3d28:	c7 59       	subi	r28, 0x97	; 151
    3d2a:	d0 40       	sbci	r29, 0x00	; 0
    3d2c:	c7 01       	movw	r24, r14
    3d2e:	b6 01       	movw	r22, r12
    3d30:	1f dd       	rcall	.-1474   	; 0x3770 <emitter_model>
    3d32:	6b 01       	movw	r12, r22
    3d34:	7c 01       	movw	r14, r24

				calcRIJmag = inverse_amplitude_model(brightness_matrix[e][s]/sense_emit_contr, power);
    3d36:	61 2f       	mov	r22, r17
    3d38:	70 e0       	ldi	r23, 0x00	; 0
    3d3a:	80 e0       	ldi	r24, 0x00	; 0
    3d3c:	90 e0       	ldi	r25, 0x00	; 0
    3d3e:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <__floatsisf>
    3d42:	4b 01       	movw	r8, r22
    3d44:	5c 01       	movw	r10, r24
				beta = atan2f(sensorRXy-sensorTXy,sensorRXx-sensorTXx) - basis_angle[e] - heading;

				alpha = pretty_angle(alpha);
				beta = pretty_angle(beta);
				
				sense_emit_contr = sensor_model(alpha)*emitter_model(beta);
    3d46:	a7 01       	movw	r20, r14
    3d48:	96 01       	movw	r18, r12
    3d4a:	c9 56       	subi	r28, 0x69	; 105
    3d4c:	df 4f       	sbci	r29, 0xFF	; 255
    3d4e:	68 81       	ld	r22, Y
    3d50:	79 81       	ldd	r23, Y+1	; 0x01
    3d52:	8a 81       	ldd	r24, Y+2	; 0x02
    3d54:	9b 81       	ldd	r25, Y+3	; 0x03
    3d56:	c7 59       	subi	r28, 0x97	; 151
    3d58:	d0 40       	sbci	r29, 0x00	; 0
    3d5a:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3d5e:	9b 01       	movw	r18, r22
    3d60:	ac 01       	movw	r20, r24

				calcRIJmag = inverse_amplitude_model(brightness_matrix[e][s]/sense_emit_contr, power);
    3d62:	c5 01       	movw	r24, r10
    3d64:	b4 01       	movw	r22, r8
    3d66:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    3d6a:	cb 54       	subi	r28, 0x4B	; 75
    3d6c:	df 4f       	sbci	r29, 0xFF	; 255
    3d6e:	48 81       	ld	r20, Y
    3d70:	c5 5b       	subi	r28, 0xB5	; 181
    3d72:	d0 40       	sbci	r29, 0x00	; 0
    3d74:	26 dd       	rcall	.-1460   	; 0x37c2 <inverse_amplitude_model>
    3d76:	4b 01       	movw	r8, r22
    3d78:	5c 01       	movw	r10, r24
				calcRx = calcRIJmag*cosf(alpha) + DROPLET_SENSOR_RADIUS*(basis[s][0] - basis[e][0]);
    3d7a:	c3 01       	movw	r24, r6
    3d7c:	b2 01       	movw	r22, r4
    3d7e:	0e 94 a7 35 	call	0x6b4e	; 0x6b4e <cos>
    3d82:	a5 01       	movw	r20, r10
    3d84:	94 01       	movw	r18, r8
    3d86:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3d8a:	6b 01       	movw	r12, r22
    3d8c:	7c 01       	movw	r14, r24
    3d8e:	c5 56       	subi	r28, 0x65	; 101
    3d90:	df 4f       	sbci	r29, 0xFF	; 255
    3d92:	e8 81       	ld	r30, Y
    3d94:	f9 81       	ldd	r31, Y+1	; 0x01
    3d96:	cb 59       	subi	r28, 0x9B	; 155
    3d98:	d0 40       	sbci	r29, 0x00	; 0
    3d9a:	20 81       	ld	r18, Z
    3d9c:	31 81       	ldd	r19, Z+1	; 0x01
    3d9e:	42 81       	ldd	r20, Z+2	; 0x02
    3da0:	53 81       	ldd	r21, Z+3	; 0x03
    3da2:	f1 01       	movw	r30, r2
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3db0:	28 e9       	ldi	r18, 0x98	; 152
    3db2:	3c e4       	ldi	r19, 0x4C	; 76
    3db4:	45 e0       	ldi	r20, 0x05	; 5
    3db6:	50 e4       	ldi	r21, 0x40	; 64
    3db8:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3dbc:	9b 01       	movw	r18, r22
    3dbe:	ac 01       	movw	r20, r24
    3dc0:	c7 01       	movw	r24, r14
    3dc2:	b6 01       	movw	r22, r12
    3dc4:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    3dc8:	6b 01       	movw	r12, r22
    3dca:	7c 01       	movw	r14, r24
				calcRy = calcRIJmag*sinf(alpha) + DROPLET_SENSOR_RADIUS*(basis[s][1] - basis[e][1]);
    3dcc:	c3 01       	movw	r24, r6
    3dce:	b2 01       	movw	r22, r4
    3dd0:	0e 94 1d 38 	call	0x703a	; 0x703a <sin>
    3dd4:	a5 01       	movw	r20, r10
    3dd6:	94 01       	movw	r18, r8
    3dd8:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3ddc:	4b 01       	movw	r8, r22
    3dde:	5c 01       	movw	r10, r24
    3de0:	c5 56       	subi	r28, 0x65	; 101
    3de2:	df 4f       	sbci	r29, 0xFF	; 255
    3de4:	e8 81       	ld	r30, Y
    3de6:	f9 81       	ldd	r31, Y+1	; 0x01
    3de8:	cb 59       	subi	r28, 0x9B	; 155
    3dea:	d0 40       	sbci	r29, 0x00	; 0
    3dec:	24 81       	ldd	r18, Z+4	; 0x04
    3dee:	35 81       	ldd	r19, Z+5	; 0x05
    3df0:	46 81       	ldd	r20, Z+6	; 0x06
    3df2:	57 81       	ldd	r21, Z+7	; 0x07
    3df4:	f1 01       	movw	r30, r2
    3df6:	64 81       	ldd	r22, Z+4	; 0x04
    3df8:	75 81       	ldd	r23, Z+5	; 0x05
    3dfa:	86 81       	ldd	r24, Z+6	; 0x06
    3dfc:	97 81       	ldd	r25, Z+7	; 0x07
    3dfe:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    3e02:	28 e9       	ldi	r18, 0x98	; 152
    3e04:	3c e4       	ldi	r19, 0x4C	; 76
    3e06:	45 e0       	ldi	r20, 0x05	; 5
    3e08:	50 e4       	ldi	r21, 0x40	; 64
    3e0a:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3e0e:	9b 01       	movw	r18, r22
    3e10:	ac 01       	movw	r20, r24
    3e12:	c5 01       	movw	r24, r10
    3e14:	b4 01       	movw	r22, r8
    3e16:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    3e1a:	4b 01       	movw	r8, r22
    3e1c:	5c 01       	movw	r10, r24
				range_matrix[e][s] = sqrt(calcRx*calcRx + calcRy*calcRy);
    3e1e:	a7 01       	movw	r20, r14
    3e20:	96 01       	movw	r18, r12
    3e22:	c7 01       	movw	r24, r14
    3e24:	b6 01       	movw	r22, r12
    3e26:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3e2a:	6b 01       	movw	r12, r22
    3e2c:	7c 01       	movw	r14, r24
    3e2e:	a5 01       	movw	r20, r10
    3e30:	94 01       	movw	r18, r8
    3e32:	c5 01       	movw	r24, r10
    3e34:	b4 01       	movw	r22, r8
    3e36:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    3e3a:	9b 01       	movw	r18, r22
    3e3c:	ac 01       	movw	r20, r24
    3e3e:	c7 01       	movw	r24, r14
    3e40:	b6 01       	movw	r22, r12
    3e42:	0e 94 dd 34 	call	0x69ba	; 0x69ba <__addsf3>
    3e46:	0e 94 27 38 	call	0x704e	; 0x704e <sqrt>
    3e4a:	cd 56       	subi	r28, 0x6D	; 109
    3e4c:	df 4f       	sbci	r29, 0xFF	; 255
    3e4e:	e8 81       	ld	r30, Y
    3e50:	f9 81       	ldd	r31, Y+1	; 0x01
    3e52:	c3 59       	subi	r28, 0x93	; 147
    3e54:	d0 40       	sbci	r29, 0x00	; 0
    3e56:	60 83       	st	Z, r22
    3e58:	71 83       	std	Z+1, r23	; 0x01
    3e5a:	82 83       	std	Z+2, r24	; 0x02
    3e5c:	93 83       	std	Z+3, r25	; 0x03
				continue;
    3e5e:	0a c0       	rjmp	.+20     	; 0x3e74 <range_estimate+0x478>
			}
			range_matrix[e][s]=0;
    3e60:	cd 56       	subi	r28, 0x6D	; 109
    3e62:	df 4f       	sbci	r29, 0xFF	; 255
    3e64:	e8 81       	ld	r30, Y
    3e66:	f9 81       	ldd	r31, Y+1	; 0x01
    3e68:	c3 59       	subi	r28, 0x93	; 147
    3e6a:	d0 40       	sbci	r29, 0x00	; 0
    3e6c:	10 82       	st	Z, r1
    3e6e:	11 82       	std	Z+1, r1	; 0x01
    3e70:	12 82       	std	Z+2, r1	; 0x02
    3e72:	13 82       	std	Z+3, r1	; 0x03
    3e74:	f8 e0       	ldi	r31, 0x08	; 8
    3e76:	2f 0e       	add	r2, r31
    3e78:	31 1c       	adc	r3, r1
    3e7a:	cb 56       	subi	r28, 0x6B	; 107
    3e7c:	df 4f       	sbci	r29, 0xFF	; 255
    3e7e:	88 81       	ld	r24, Y
    3e80:	99 81       	ldd	r25, Y+1	; 0x01
    3e82:	c5 59       	subi	r28, 0x95	; 149
    3e84:	d0 40       	sbci	r29, 0x00	; 0
    3e86:	04 96       	adiw	r24, 0x04	; 4
    3e88:	cb 56       	subi	r28, 0x6B	; 107
    3e8a:	df 4f       	sbci	r29, 0xFF	; 255
    3e8c:	88 83       	st	Y, r24
    3e8e:	99 83       	std	Y+1, r25	; 0x01
    3e90:	c5 59       	subi	r28, 0x95	; 149
    3e92:	d0 40       	sbci	r29, 0x00	; 0
    3e94:	cd 56       	subi	r28, 0x6D	; 109
    3e96:	df 4f       	sbci	r29, 0xFF	; 255
    3e98:	e8 81       	ld	r30, Y
    3e9a:	f9 81       	ldd	r31, Y+1	; 0x01
    3e9c:	c3 59       	subi	r28, 0x93	; 147
    3e9e:	d0 40       	sbci	r29, 0x00	; 0
    3ea0:	34 96       	adiw	r30, 0x04	; 4
    3ea2:	cd 56       	subi	r28, 0x6D	; 109
    3ea4:	df 4f       	sbci	r29, 0xFF	; 255
    3ea6:	e8 83       	st	Y, r30
    3ea8:	f9 83       	std	Y+1, r31	; 0x01
    3eaa:	c3 59       	subi	r28, 0x93	; 147
    3eac:	d0 40       	sbci	r29, 0x00	; 0
	uint8_t maxBright = 0;
	uint8_t maxE=255;
	uint8_t maxS=255;
	for(uint8_t e = 0; e < 6; e++)
	{
		for(uint8_t s = 0; s < 6; s++)
    3eae:	f8 e6       	ldi	r31, 0x68	; 104
    3eb0:	2f 16       	cp	r2, r31
    3eb2:	f0 e2       	ldi	r31, 0x20	; 32
    3eb4:	3f 06       	cpc	r3, r31
    3eb6:	09 f0       	breq	.+2      	; 0x3eba <range_estimate+0x4be>
    3eb8:	0b ce       	rjmp	.-1002   	; 0x3ad0 <range_estimate+0xd4>
	float calcRIJmag, calcRx, calcRy;

	uint8_t maxBright = 0;
	uint8_t maxE=255;
	uint8_t maxS=255;
	for(uint8_t e = 0; e < 6; e++)
    3eba:	c3 55       	subi	r28, 0x53	; 83
    3ebc:	df 4f       	sbci	r29, 0xFF	; 255
    3ebe:	28 81       	ld	r18, Y
    3ec0:	cd 5a       	subi	r28, 0xAD	; 173
    3ec2:	d0 40       	sbci	r29, 0x00	; 0
    3ec4:	2f 5f       	subi	r18, 0xFF	; 255
    3ec6:	c3 55       	subi	r28, 0x53	; 83
    3ec8:	df 4f       	sbci	r29, 0xFF	; 255
    3eca:	28 83       	st	Y, r18
    3ecc:	cd 5a       	subi	r28, 0xAD	; 173
    3ece:	d0 40       	sbci	r29, 0x00	; 0
    3ed0:	c5 56       	subi	r28, 0x65	; 101
    3ed2:	df 4f       	sbci	r29, 0xFF	; 255
    3ed4:	88 81       	ld	r24, Y
    3ed6:	99 81       	ldd	r25, Y+1	; 0x01
    3ed8:	cb 59       	subi	r28, 0x9B	; 155
    3eda:	d0 40       	sbci	r29, 0x00	; 0
    3edc:	08 96       	adiw	r24, 0x08	; 8
    3ede:	c5 56       	subi	r28, 0x65	; 101
    3ee0:	df 4f       	sbci	r29, 0xFF	; 255
    3ee2:	88 83       	st	Y, r24
    3ee4:	99 83       	std	Y+1, r25	; 0x01
    3ee6:	cb 59       	subi	r28, 0x9B	; 155
    3ee8:	d0 40       	sbci	r29, 0x00	; 0
    3eea:	c5 55       	subi	r28, 0x55	; 85
    3eec:	df 4f       	sbci	r29, 0xFF	; 255
    3eee:	e8 81       	ld	r30, Y
    3ef0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ef2:	cb 5a       	subi	r28, 0xAB	; 171
    3ef4:	d0 40       	sbci	r29, 0x00	; 0
    3ef6:	34 96       	adiw	r30, 0x04	; 4
    3ef8:	c5 55       	subi	r28, 0x55	; 85
    3efa:	df 4f       	sbci	r29, 0xFF	; 255
    3efc:	e8 83       	st	Y, r30
    3efe:	f9 83       	std	Y+1, r31	; 0x01
    3f00:	cb 5a       	subi	r28, 0xAB	; 171
    3f02:	d0 40       	sbci	r29, 0x00	; 0
    3f04:	c3 56       	subi	r28, 0x63	; 99
    3f06:	df 4f       	sbci	r29, 0xFF	; 255
    3f08:	88 81       	ld	r24, Y
    3f0a:	99 81       	ldd	r25, Y+1	; 0x01
    3f0c:	cd 59       	subi	r28, 0x9D	; 157
    3f0e:	d0 40       	sbci	r29, 0x00	; 0
    3f10:	06 96       	adiw	r24, 0x06	; 6
    3f12:	c3 56       	subi	r28, 0x63	; 99
    3f14:	df 4f       	sbci	r29, 0xFF	; 255
    3f16:	88 83       	st	Y, r24
    3f18:	99 83       	std	Y+1, r25	; 0x01
    3f1a:	cd 59       	subi	r28, 0x9D	; 157
    3f1c:	d0 40       	sbci	r29, 0x00	; 0
    3f1e:	ca 54       	subi	r28, 0x4A	; 74
    3f20:	df 4f       	sbci	r29, 0xFF	; 255
    3f22:	e8 81       	ld	r30, Y
    3f24:	f9 81       	ldd	r31, Y+1	; 0x01
    3f26:	c6 5b       	subi	r28, 0xB6	; 182
    3f28:	d0 40       	sbci	r29, 0x00	; 0
    3f2a:	78 96       	adiw	r30, 0x18	; 24
    3f2c:	ca 54       	subi	r28, 0x4A	; 74
    3f2e:	df 4f       	sbci	r29, 0xFF	; 255
    3f30:	e8 83       	st	Y, r30
    3f32:	f9 83       	std	Y+1, r31	; 0x01
    3f34:	c6 5b       	subi	r28, 0xB6	; 182
    3f36:	d0 40       	sbci	r29, 0x00	; 0
    3f38:	26 30       	cpi	r18, 0x06	; 6
    3f3a:	89 f1       	breq	.+98     	; 0x3f9e <range_estimate+0x5a2>

	return inverse_amplitude_model(amplitude, power) + 2*DROPLET_RADIUS;
}

float range_estimate(float init_range, float bearing, float heading, uint8_t power, uint8_t brightness_matrix[6][6])
{
    3f3c:	ca 54       	subi	r28, 0x4A	; 74
    3f3e:	df 4f       	sbci	r29, 0xFF	; 255
    3f40:	88 81       	ld	r24, Y
    3f42:	99 81       	ldd	r25, Y+1	; 0x01
    3f44:	c6 5b       	subi	r28, 0xB6	; 182
    3f46:	d0 40       	sbci	r29, 0x00	; 0
    3f48:	cd 56       	subi	r28, 0x6D	; 109
    3f4a:	df 4f       	sbci	r29, 0xFF	; 255
    3f4c:	88 83       	st	Y, r24
    3f4e:	99 83       	std	Y+1, r25	; 0x01
    3f50:	c3 59       	subi	r28, 0x93	; 147
    3f52:	d0 40       	sbci	r29, 0x00	; 0
    3f54:	e0 e2       	ldi	r30, 0x20	; 32
    3f56:	f0 e2       	ldi	r31, 0x20	; 32
    3f58:	cb 56       	subi	r28, 0x6B	; 107
    3f5a:	df 4f       	sbci	r29, 0xFF	; 255
    3f5c:	e8 83       	st	Y, r30
    3f5e:	f9 83       	std	Y+1, r31	; 0x01
    3f60:	c5 59       	subi	r28, 0x95	; 149
    3f62:	d0 40       	sbci	r29, 0x00	; 0
    3f64:	0f 2e       	mov	r0, r31
    3f66:	f8 e3       	ldi	r31, 0x38	; 56
    3f68:	2f 2e       	mov	r2, r31
    3f6a:	f0 e2       	ldi	r31, 0x20	; 32
    3f6c:	3f 2e       	mov	r3, r31
    3f6e:	f0 2d       	mov	r31, r0
    3f70:	c3 56       	subi	r28, 0x63	; 99
    3f72:	df 4f       	sbci	r29, 0xFF	; 255
    3f74:	88 81       	ld	r24, Y
    3f76:	99 81       	ldd	r25, Y+1	; 0x01
    3f78:	cd 59       	subi	r28, 0x9D	; 157
    3f7a:	d0 40       	sbci	r29, 0x00	; 0
    3f7c:	cf 56       	subi	r28, 0x6F	; 111
    3f7e:	df 4f       	sbci	r29, 0xFF	; 255
    3f80:	88 83       	st	Y, r24
    3f82:	99 83       	std	Y+1, r25	; 0x01
    3f84:	c1 59       	subi	r28, 0x91	; 145
    3f86:	d0 40       	sbci	r29, 0x00	; 0
    3f88:	c3 55       	subi	r28, 0x53	; 83
    3f8a:	df 4f       	sbci	r29, 0xFF	; 255
    3f8c:	98 81       	ld	r25, Y
    3f8e:	cd 5a       	subi	r28, 0xAD	; 173
    3f90:	d0 40       	sbci	r29, 0x00	; 0
    3f92:	c2 55       	subi	r28, 0x52	; 82
    3f94:	df 4f       	sbci	r29, 0xFF	; 255
    3f96:	98 83       	st	Y, r25
    3f98:	ce 5a       	subi	r28, 0xAE	; 174
    3f9a:	d0 40       	sbci	r29, 0x00	; 0
    3f9c:	99 cd       	rjmp	.-1230   	; 0x3ad0 <range_estimate+0xd4>
			}
			range_matrix[e][s]=0;
		}
	}
	
	float range = range_matrix[maxE][maxS];
    3f9e:	c1 55       	subi	r28, 0x51	; 81
    3fa0:	df 4f       	sbci	r29, 0xFF	; 255
    3fa2:	e8 81       	ld	r30, Y
    3fa4:	cf 5a       	subi	r28, 0xAF	; 175
    3fa6:	d0 40       	sbci	r29, 0x00	; 0
    3fa8:	8e 2f       	mov	r24, r30
    3faa:	90 e0       	ldi	r25, 0x00	; 0
    3fac:	fc 01       	movw	r30, r24
    3fae:	ee 0f       	add	r30, r30
    3fb0:	ff 1f       	adc	r31, r31
    3fb2:	8e 0f       	add	r24, r30
    3fb4:	9f 1f       	adc	r25, r31
    3fb6:	fc 01       	movw	r30, r24
    3fb8:	ee 0f       	add	r30, r30
    3fba:	ff 1f       	adc	r31, r31
    3fbc:	c0 55       	subi	r28, 0x50	; 80
    3fbe:	df 4f       	sbci	r29, 0xFF	; 255
    3fc0:	28 81       	ld	r18, Y
    3fc2:	c0 5b       	subi	r28, 0xB0	; 176
    3fc4:	d0 40       	sbci	r29, 0x00	; 0
    3fc6:	e2 0f       	add	r30, r18
    3fc8:	f1 1d       	adc	r31, r1
    3fca:	ee 0f       	add	r30, r30
    3fcc:	ff 1f       	adc	r31, r31
    3fce:	ee 0f       	add	r30, r30
    3fd0:	ff 1f       	adc	r31, r31
    3fd2:	ec 0f       	add	r30, r28
    3fd4:	fd 1f       	adc	r31, r29
    3fd6:	61 81       	ldd	r22, Z+1	; 0x01
    3fd8:	72 81       	ldd	r23, Z+2	; 0x02
    3fda:	83 81       	ldd	r24, Z+3	; 0x03
    3fdc:	94 81       	ldd	r25, Z+4	; 0x04
	return range;
}
    3fde:	c9 54       	subi	r28, 0x49	; 73
    3fe0:	df 4f       	sbci	r29, 0xFF	; 255
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	de bf       	out	0x3e, r29	; 62
    3fe6:	df 91       	pop	r29
    3fe8:	cf 91       	pop	r28
    3fea:	1f 91       	pop	r17
    3fec:	0f 91       	pop	r16
    3fee:	ff 90       	pop	r15
    3ff0:	ef 90       	pop	r14
    3ff2:	df 90       	pop	r13
    3ff4:	cf 90       	pop	r12
    3ff6:	bf 90       	pop	r11
    3ff8:	af 90       	pop	r10
    3ffa:	9f 90       	pop	r9
    3ffc:	8f 90       	pop	r8
    3ffe:	7f 90       	pop	r7
    4000:	6f 90       	pop	r6
    4002:	5f 90       	pop	r5
    4004:	4f 90       	pop	r4
    4006:	3f 90       	pop	r3
    4008:	2f 90       	pop	r2
    400a:	08 95       	ret

0000400c <use_rnb_data>:
	//schedule_task(10,brightness_meas_printout_mathematica,NULL);
	schedule_task(10, use_rnb_data, (void*)(&power));
}

void use_rnb_data(uint8_t power)
{
    400c:	4f 92       	push	r4
    400e:	5f 92       	push	r5
    4010:	6f 92       	push	r6
    4012:	7f 92       	push	r7
    4014:	8f 92       	push	r8
    4016:	9f 92       	push	r9
    4018:	af 92       	push	r10
    401a:	bf 92       	push	r11
    401c:	cf 92       	push	r12
    401e:	df 92       	push	r13
    4020:	ef 92       	push	r14
    4022:	ff 92       	push	r15
    4024:	0f 93       	push	r16
    4026:	1f 93       	push	r17
    4028:	cf 93       	push	r28
    402a:	df 93       	push	r29
    402c:	cd b7       	in	r28, 0x3d	; 61
    402e:	de b7       	in	r29, 0x3e	; 62
    4030:	e8 97       	sbiw	r28, 0x38	; 56
    4032:	cd bf       	out	0x3d, r28	; 61
    4034:	de bf       	out	0x3e, r29	; 62
	power = 255;
	uint8_t brightness_matrix[6][6];
	uint8_t error = pack_measurements_into_matrix(brightness_matrix);
    4036:	ce 01       	movw	r24, r28
    4038:	01 96       	adiw	r24, 0x01	; 1
    403a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <pack_measurements_into_matrix>
	if(error) return;
    403e:	81 11       	cpse	r24, r1
    4040:	6c c0       	rjmp	.+216    	; 0x411a <use_rnb_data+0x10e>
	*/
	//print_brightness_matrix(brightness_matrix);
	
	uint8_t emitter_total[6];
	uint8_t sensor_total[6];
	fill_S_and_T(brightness_matrix, sensor_total, emitter_total);
    4042:	ae 01       	movw	r20, r28
    4044:	4b 5d       	subi	r20, 0xDB	; 219
    4046:	5f 4f       	sbci	r21, 0xFF	; 255
    4048:	be 01       	movw	r22, r28
    404a:	65 5d       	subi	r22, 0xD5	; 213
    404c:	7f 4f       	sbci	r23, 0xFF	; 255
    404e:	ce 01       	movw	r24, r28
    4050:	01 96       	adiw	r24, 0x01	; 1
    4052:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <fill_S_and_T>
	
	float bearing = get_bearing(sensor_total);
    4056:	ce 01       	movw	r24, r28
    4058:	8b 96       	adiw	r24, 0x2b	; 43
    405a:	0e 94 10 17 	call	0x2e20	; 0x2e20 <get_bearing>
    405e:	2b 01       	movw	r4, r22
    4060:	3c 01       	movw	r6, r24
	float heading = get_heading(emitter_total, bearing);
    4062:	ab 01       	movw	r20, r22
    4064:	bc 01       	movw	r22, r24
    4066:	ce 01       	movw	r24, r28
    4068:	85 96       	adiw	r24, 0x25	; 37
    406a:	b5 da       	rcall	.-2710   	; 0x35d6 <get_heading>
    406c:	69 ab       	std	Y+49, r22	; 0x31
    406e:	7a ab       	std	Y+50, r23	; 0x32
    4070:	8b ab       	std	Y+51, r24	; 0x33
    4072:	9c ab       	std	Y+52, r25	; 0x34
	
	float initial_range = get_initial_range_guess(bearing, heading, power, sensor_total, emitter_total, brightness_matrix);
    4074:	ce 01       	movw	r24, r28
    4076:	01 96       	adiw	r24, 0x01	; 1
    4078:	5c 01       	movw	r10, r24
    407a:	de 01       	movw	r26, r28
    407c:	95 96       	adiw	r26, 0x25	; 37
    407e:	6d 01       	movw	r12, r26
    4080:	8a 96       	adiw	r24, 0x2a	; 42
    4082:	7c 01       	movw	r14, r24
    4084:	0f ef       	ldi	r16, 0xFF	; 255
    4086:	29 a9       	ldd	r18, Y+49	; 0x31
    4088:	3a a9       	ldd	r19, Y+50	; 0x32
    408a:	4b a9       	ldd	r20, Y+51	; 0x33
    408c:	5c a9       	ldd	r21, Y+52	; 0x34
    408e:	c3 01       	movw	r24, r6
    4090:	b2 01       	movw	r22, r4
    4092:	c5 db       	rcall	.-2166   	; 0x381e <get_initial_range_guess>
    4094:	6d ab       	std	Y+53, r22	; 0x35
    4096:	7e ab       	std	Y+54, r23	; 0x36
    4098:	8f ab       	std	Y+55, r24	; 0x37
    409a:	98 af       	std	Y+56, r25	; 0x38
	if(initial_range==0) return; //Some error occurred.
    409c:	20 e0       	ldi	r18, 0x00	; 0
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	a9 01       	movw	r20, r18
    40a2:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <__cmpsf2>
    40a6:	88 23       	and	r24, r24
    40a8:	c1 f1       	breq	.+112    	; 0x411a <use_rnb_data+0x10e>
	float range = range_estimate(initial_range, bearing, heading, power, brightness_matrix);
    40aa:	cc 24       	eor	r12, r12
    40ac:	ca 94       	dec	r12
    40ae:	e9 a8       	ldd	r14, Y+49	; 0x31
    40b0:	fa a8       	ldd	r15, Y+50	; 0x32
    40b2:	0b a9       	ldd	r16, Y+51	; 0x33
    40b4:	1c a9       	ldd	r17, Y+52	; 0x34
    40b6:	a3 01       	movw	r20, r6
    40b8:	92 01       	movw	r18, r4
    40ba:	6d a9       	ldd	r22, Y+53	; 0x35
    40bc:	7e a9       	ldd	r23, Y+54	; 0x36
    40be:	8f a9       	ldd	r24, Y+55	; 0x37
    40c0:	98 ad       	ldd	r25, Y+56	; 0x38
    40c2:	9c dc       	rcall	.-1736   	; 0x39fc <range_estimate>
	
	last_good_rnb.range = range;
    40c4:	60 93 d2 2a 	sts	0x2AD2, r22
    40c8:	70 93 d3 2a 	sts	0x2AD3, r23
    40cc:	80 93 d4 2a 	sts	0x2AD4, r24
    40d0:	90 93 d5 2a 	sts	0x2AD5, r25
	last_good_rnb.bearing = bearing;
    40d4:	40 92 d6 2a 	sts	0x2AD6, r4
    40d8:	50 92 d7 2a 	sts	0x2AD7, r5
    40dc:	60 92 d8 2a 	sts	0x2AD8, r6
    40e0:	70 92 d9 2a 	sts	0x2AD9, r7
	last_good_rnb.heading = heading;
    40e4:	89 a9       	ldd	r24, Y+49	; 0x31
    40e6:	9a a9       	ldd	r25, Y+50	; 0x32
    40e8:	ab a9       	ldd	r26, Y+51	; 0x33
    40ea:	bc a9       	ldd	r27, Y+52	; 0x34
    40ec:	80 93 da 2a 	sts	0x2ADA, r24
    40f0:	90 93 db 2a 	sts	0x2ADB, r25
    40f4:	a0 93 dc 2a 	sts	0x2ADC, r26
    40f8:	b0 93 dd 2a 	sts	0x2ADD, r27
	last_good_rnb.brightness_matrix_ptr = brightness_matrix;
    40fc:	a0 92 de 2a 	sts	0x2ADE, r10
    4100:	b0 92 df 2a 	sts	0x2ADF, r11
	last_good_rnb.id_number = cmd_sender_id;
    4104:	80 91 c9 2a 	lds	r24, 0x2AC9
    4108:	90 91 ca 2a 	lds	r25, 0x2ACA
    410c:	80 93 e0 2a 	sts	0x2AE0, r24
    4110:	90 93 e1 2a 	sts	0x2AE1, r25
	
	rnb_updated=1;
    4114:	81 e0       	ldi	r24, 0x01	; 1
    4116:	80 93 ee 2a 	sts	0x2AEE, r24
}
    411a:	e8 96       	adiw	r28, 0x38	; 56
    411c:	cd bf       	out	0x3d, r28	; 61
    411e:	de bf       	out	0x3e, r29	; 62
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	1f 91       	pop	r17
    4126:	0f 91       	pop	r16
    4128:	ff 90       	pop	r15
    412a:	ef 90       	pop	r14
    412c:	df 90       	pop	r13
    412e:	cf 90       	pop	r12
    4130:	bf 90       	pop	r11
    4132:	af 90       	pop	r10
    4134:	9f 90       	pop	r9
    4136:	8f 90       	pop	r8
    4138:	7f 90       	pop	r7
    413a:	6f 90       	pop	r6
    413c:	5f 90       	pop	r5
    413e:	4f 90       	pop	r4
    4140:	08 95       	ret

00004142 <collect_rnb_data>:
		}
	}
}

void collect_rnb_data(uint16_t target_id, uint8_t power)
{	
    4142:	ff 92       	push	r15
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	cf 93       	push	r28
    414a:	df 93       	push	r29
    414c:	cd b7       	in	r28, 0x3d	; 61
    414e:	de b7       	in	r29, 0x3e	; 62
    4150:	27 97       	sbiw	r28, 0x07	; 7
    4152:	cd bf       	out	0x3d, r28	; 61
    4154:	de bf       	out	0x3e, r29	; 62
    4156:	8c 01       	movw	r16, r24
    4158:	f6 2e       	mov	r15, r22
	char cmd[7] = "rnb_t ";
    415a:	87 e0       	ldi	r24, 0x07	; 7
    415c:	ef ec       	ldi	r30, 0xCF	; 207
    415e:	f2 e2       	ldi	r31, 0x22	; 34
    4160:	de 01       	movw	r26, r28
    4162:	11 96       	adiw	r26, 0x01	; 1
    4164:	01 90       	ld	r0, Z+
    4166:	0d 92       	st	X+, r0
    4168:	8a 95       	dec	r24
    416a:	e1 f7       	brne	.-8      	; 0x4164 <collect_rnb_data+0x22>
	cmd[6] = power;
    416c:	6f 83       	std	Y+7, r22	; 0x07
	get_baseline_readings(bright_meas);
    416e:	86 ea       	ldi	r24, 0xA6	; 166
    4170:	9c e2       	ldi	r25, 0x2C	; 44
    4172:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <get_baseline_readings>
	
	ir_targeted_cmd(ALL_DIRS, cmd, 7, target_id);
    4176:	98 01       	movw	r18, r16
    4178:	47 e0       	ldi	r20, 0x07	; 7
    417a:	50 e0       	ldi	r21, 0x00	; 0
    417c:	be 01       	movw	r22, r28
    417e:	6f 5f       	subi	r22, 0xFF	; 255
    4180:	7f 4f       	sbci	r23, 0xFF	; 255
    4182:	8f e3       	ldi	r24, 0x3F	; 63
    4184:	0e 94 31 0c 	call	0x1862	; 0x1862 <ir_targeted_cmd>
	wait_for_ir(ALL_DIRS);
    4188:	8f e3       	ldi	r24, 0x3F	; 63
    418a:	0e 94 0f 0c 	call	0x181e	; 0x181e <wait_for_ir>
	delay_ms(POST_MESSAGE_DELAY);
    418e:	8d e5       	ldi	r24, 0x5D	; 93
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	e6 d3       	rcall	.+1996   	; 0x4960 <delay_ms>
	ir_range_meas();
    4194:	0e 94 18 18 	call	0x3030	; 0x3030 <ir_range_meas>
	//brightness_meas_printout_mathematica();
	use_rnb_data(power);
    4198:	8f 2d       	mov	r24, r15
    419a:	38 df       	rcall	.-400    	; 0x400c <use_rnb_data>
}
    419c:	27 96       	adiw	r28, 0x07	; 7
    419e:	cd bf       	out	0x3d, r28	; 61
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	df 91       	pop	r29
    41a4:	cf 91       	pop	r28
    41a6:	1f 91       	pop	r17
    41a8:	0f 91       	pop	r16
    41aa:	ff 90       	pop	r15
    41ac:	08 95       	ret

000041ae <rgb_led_init>:
#include "rgb_led.h"

void rgb_led_init()
{
	// LED Pins as output
	LED_R_PORT.DIRSET = LED_R_PIN_bm;
    41ae:	e0 e8       	ldi	r30, 0x80	; 128
    41b0:	f6 e0       	ldi	r31, 0x06	; 6
    41b2:	80 e2       	ldi	r24, 0x20	; 32
    41b4:	81 83       	std	Z+1, r24	; 0x01
	LED_G_PORT.DIRSET = LED_G_PIN_bm;
    41b6:	80 e1       	ldi	r24, 0x10	; 16
    41b8:	81 83       	std	Z+1, r24	; 0x01
	LED_B_PORT.DIRSET = LED_B_PIN_bm;
    41ba:	e0 e6       	ldi	r30, 0x60	; 96
    41bc:	f6 e0       	ldi	r31, 0x06	; 6
    41be:	81 83       	std	Z+1, r24	; 0x01
	
	//---------RED-----------
	LED_R_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    41c0:	e0 e4       	ldi	r30, 0x40	; 64
    41c2:	fa e0       	ldi	r31, 0x0A	; 10
    41c4:	8f ef       	ldi	r24, 0xFF	; 255
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	86 a3       	std	Z+38, r24	; 0x26
    41ca:	97 a3       	std	Z+39, r25	; 0x27
	LED_R_TC.CCB = 0;							// initially fill the CCB register with a value
    41cc:	12 a6       	std	Z+42, r1	; 0x2a
    41ce:	13 a6       	std	Z+43, r1	; 0x2b
	LED_R_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    41d0:	20 81       	ld	r18, Z
    41d2:	21 60       	ori	r18, 0x01	; 1
    41d4:	20 83       	st	Z, r18
	LED_R_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    41d6:	21 81       	ldd	r18, Z+1	; 0x01
    41d8:	23 60       	ori	r18, 0x03	; 3
    41da:	21 83       	std	Z+1, r18	; 0x01
	LED_R_TC.CTRLB |= TC1_CCBEN_bm;				// enable waveform output on OCnB (setting WGM operation overrides the port output register for this output pin)
    41dc:	21 81       	ldd	r18, Z+1	; 0x01
    41de:	20 62       	ori	r18, 0x20	; 32
    41e0:	21 83       	std	Z+1, r18	; 0x01
	
	//---------GREEN-----------
	// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
	LED_G_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    41e2:	86 a3       	std	Z+38, r24	; 0x26
    41e4:	97 a3       	std	Z+39, r25	; 0x27
	LED_G_TC.CCA = 0;							// initially fill the CCB register with a value
    41e6:	10 a6       	std	Z+40, r1	; 0x28
    41e8:	11 a6       	std	Z+41, r1	; 0x29
	LED_G_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    41ea:	20 81       	ld	r18, Z
    41ec:	21 60       	ori	r18, 0x01	; 1
    41ee:	20 83       	st	Z, r18
	LED_G_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    41f0:	21 81       	ldd	r18, Z+1	; 0x01
    41f2:	23 60       	ori	r18, 0x03	; 3
    41f4:	21 83       	std	Z+1, r18	; 0x01
	LED_G_TC.CTRLB |= TC1_CCAEN_bm;				// enable waveform output on OCnA (setting WGM operation overrides the port output register for this output pin)
    41f6:	21 81       	ldd	r18, Z+1	; 0x01
    41f8:	20 61       	ori	r18, 0x10	; 16
    41fa:	21 83       	std	Z+1, r18	; 0x01
	
	//---------BLUE-----------
	// Begin a timer-counter that will reach TOP (overflow) every 20ms (servo signal is 50 Hz)
	LED_B_TC.PER = 255;							// Set period (~500KHz -> abt. 500 ticks/ms) 
    41fc:	e0 e4       	ldi	r30, 0x40	; 64
    41fe:	f9 e0       	ldi	r31, 0x09	; 9
    4200:	86 a3       	std	Z+38, r24	; 0x26
    4202:	97 a3       	std	Z+39, r25	; 0x27
	LED_B_TC.CCA = 0;							// initially fill the CCB register with a value
    4204:	10 a6       	std	Z+40, r1	; 0x28
    4206:	11 a6       	std	Z+41, r1	; 0x29
	LED_B_TC.CTRLA |= TC_CLKSEL_DIV1_gc;		// Set clock and prescaler, 32MHz/64 = 500KHz ** 
    4208:	80 81       	ld	r24, Z
    420a:	81 60       	ori	r24, 0x01	; 1
    420c:	80 83       	st	Z, r24
	LED_B_TC.CTRLB |= TC_WGMODE_SS_gc;			// enable Single Slope PWM (Waveform Generation Mode)
    420e:	81 81       	ldd	r24, Z+1	; 0x01
    4210:	83 60       	ori	r24, 0x03	; 3
    4212:	81 83       	std	Z+1, r24	; 0x01
	LED_B_TC.CTRLB |= TC1_CCAEN_bm;				// enable waveform output on OCnA (setting WGM operation overrides the port output register for this output pin)
    4214:	81 81       	ldd	r24, Z+1	; 0x01
    4216:	80 61       	ori	r24, 0x10	; 16
    4218:	81 83       	std	Z+1, r24	; 0x01
    421a:	08 95       	ret

0000421c <led_off>:
}

void led_off()
{ 
	LED_B_TC.CCABUF = 0;
    421c:	e0 e4       	ldi	r30, 0x40	; 64
    421e:	f9 e0       	ldi	r31, 0x09	; 9
    4220:	10 ae       	std	Z+56, r1	; 0x38
    4222:	11 ae       	std	Z+57, r1	; 0x39
	LED_G_TC.CCABUF = 0;
    4224:	e0 e4       	ldi	r30, 0x40	; 64
    4226:	fa e0       	ldi	r31, 0x0A	; 10
    4228:	10 ae       	std	Z+56, r1	; 0x38
    422a:	11 ae       	std	Z+57, r1	; 0x39
	LED_R_TC.CCBBUF = 0; 
    422c:	12 ae       	std	Z+58, r1	; 0x3a
    422e:	13 ae       	std	Z+59, r1	; 0x3b
    4230:	08 95       	ret

00004232 <set_rgb>:

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	e0 e4       	ldi	r30, 0x40	; 64
    4236:	fa e0       	ldi	r31, 0x0A	; 10
    4238:	82 af       	std	Z+58, r24	; 0x3a
    423a:	93 af       	std	Z+59, r25	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    423c:	70 e0       	ldi	r23, 0x00	; 0
    423e:	60 af       	std	Z+56, r22	; 0x38
    4240:	71 af       	std	Z+57, r23	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    4242:	50 e0       	ldi	r21, 0x00	; 0
    4244:	e0 e4       	ldi	r30, 0x40	; 64
    4246:	f9 e0       	ldi	r31, 0x09	; 9
    4248:	40 af       	std	Z+56, r20	; 0x38
    424a:	51 af       	std	Z+57, r21	; 0x39
    424c:	08 95       	ret

0000424e <hsv_to_rgb>:
	set_rgb(r,g,b);
}

//Adapted from cs.rit.edu/~ncs/color/t_convert.html
void hsv_to_rgb(uint16_t hue, uint8_t saturation, uint8_t val, uint8_t* red, uint8_t* green, uint8_t* blue)
{
    424e:	2f 92       	push	r2
    4250:	3f 92       	push	r3
    4252:	4f 92       	push	r4
    4254:	5f 92       	push	r5
    4256:	6f 92       	push	r6
    4258:	7f 92       	push	r7
    425a:	8f 92       	push	r8
    425c:	9f 92       	push	r9
    425e:	af 92       	push	r10
    4260:	bf 92       	push	r11
    4262:	cf 92       	push	r12
    4264:	df 92       	push	r13
    4266:	ef 92       	push	r14
    4268:	ff 92       	push	r15
    426a:	0f 93       	push	r16
    426c:	1f 93       	push	r17
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	cd b7       	in	r28, 0x3d	; 61
    4274:	de b7       	in	r29, 0x3e	; 62
    4276:	2b 97       	sbiw	r28, 0x0b	; 11
    4278:	cd bf       	out	0x3d, r28	; 61
    427a:	de bf       	out	0x3e, r29	; 62
    427c:	fc 01       	movw	r30, r24
    427e:	d6 2e       	mov	r13, r22
    4280:	b4 2e       	mov	r11, r20
    4282:	2c 83       	std	Y+4, r18	; 0x04
    4284:	3d 83       	std	Y+5, r19	; 0x05
    4286:	18 01       	movw	r2, r16
    4288:	ea 82       	std	Y+2, r14	; 0x02
    428a:	fb 82       	std	Y+3, r15	; 0x03
	float h = (hue%360)*1.0;
    428c:	9c 01       	movw	r18, r24
    428e:	a3 e8       	ldi	r26, 0x83	; 131
    4290:	bd e2       	ldi	r27, 0x2D	; 45
    4292:	0e 94 50 3c 	call	0x78a0	; 0x78a0 <__umulhisi3>
    4296:	00 24       	eor	r0, r0
    4298:	88 0f       	add	r24, r24
    429a:	99 1f       	adc	r25, r25
    429c:	00 1c       	adc	r0, r0
    429e:	88 0f       	add	r24, r24
    42a0:	99 1f       	adc	r25, r25
    42a2:	00 1c       	adc	r0, r0
    42a4:	89 2f       	mov	r24, r25
    42a6:	90 2d       	mov	r25, r0
    42a8:	48 e6       	ldi	r20, 0x68	; 104
    42aa:	51 e0       	ldi	r21, 0x01	; 1
    42ac:	84 9f       	mul	r24, r20
    42ae:	90 01       	movw	r18, r0
    42b0:	85 9f       	mul	r24, r21
    42b2:	30 0d       	add	r19, r0
    42b4:	94 9f       	mul	r25, r20
    42b6:	30 0d       	add	r19, r0
    42b8:	11 24       	eor	r1, r1
    42ba:	bf 01       	movw	r22, r30
    42bc:	62 1b       	sub	r22, r18
    42be:	73 0b       	sbc	r23, r19
    42c0:	80 e0       	ldi	r24, 0x00	; 0
    42c2:	90 e0       	ldi	r25, 0x00	; 0
    42c4:	0e 94 43 36 	call	0x6c86	; 0x6c86 <__floatunsisf>
    42c8:	2b 01       	movw	r4, r22
    42ca:	3c 01       	movw	r6, r24
	float s = saturation/255.0;
    42cc:	6d 2d       	mov	r22, r13
    42ce:	70 e0       	ldi	r23, 0x00	; 0
    42d0:	80 e0       	ldi	r24, 0x00	; 0
    42d2:	90 e0       	ldi	r25, 0x00	; 0
    42d4:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <__floatsisf>
    42d8:	20 e0       	ldi	r18, 0x00	; 0
    42da:	30 e0       	ldi	r19, 0x00	; 0
    42dc:	4f e7       	ldi	r20, 0x7F	; 127
    42de:	53 e4       	ldi	r21, 0x43	; 67
    42e0:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    42e4:	6b 01       	movw	r12, r22
    42e6:	7c 01       	movw	r14, r24
	float v = val/255.0;
    42e8:	6b 2d       	mov	r22, r11
    42ea:	70 e0       	ldi	r23, 0x00	; 0
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	90 e0       	ldi	r25, 0x00	; 0
    42f0:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <__floatsisf>
    42f4:	20 e0       	ldi	r18, 0x00	; 0
    42f6:	30 e0       	ldi	r19, 0x00	; 0
    42f8:	4f e7       	ldi	r20, 0x7F	; 127
    42fa:	53 e4       	ldi	r21, 0x43	; 67
    42fc:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    4300:	06 2f       	mov	r16, r22
    4302:	17 2f       	mov	r17, r23
    4304:	8b 87       	std	Y+11, r24	; 0x0b
    4306:	9a 87       	std	Y+10, r25	; 0x0a
	float f, p, q, t;
	float r=0, g=0, b=0;
	
	if (abs(s)<0.00001)
    4308:	c7 01       	movw	r24, r14
    430a:	b6 01       	movw	r22, r12
    430c:	0e 94 12 36 	call	0x6c24	; 0x6c24 <__fixsfsi>
    4310:	9b 01       	movw	r18, r22
    4312:	77 23       	and	r23, r23
    4314:	24 f4       	brge	.+8      	; 0x431e <hsv_to_rgb+0xd0>
    4316:	22 27       	eor	r18, r18
    4318:	33 27       	eor	r19, r19
    431a:	26 1b       	sub	r18, r22
    431c:	37 0b       	sbc	r19, r23
    431e:	b9 01       	movw	r22, r18
    4320:	88 27       	eor	r24, r24
    4322:	77 fd       	sbrc	r23, 7
    4324:	80 95       	com	r24
    4326:	98 2f       	mov	r25, r24
    4328:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <__floatsisf>
    432c:	2c ea       	ldi	r18, 0xAC	; 172
    432e:	35 ec       	ldi	r19, 0xC5	; 197
    4330:	47 e2       	ldi	r20, 0x27	; 39
    4332:	57 e3       	ldi	r21, 0x37	; 55
    4334:	0e 94 a3 35 	call	0x6b46	; 0x6b46 <__cmpsf2>
    4338:	88 23       	and	r24, r24
    433a:	2c f4       	brge	.+10     	; 0x4346 <hsv_to_rgb+0xf8>
	{
		*red = *green = *blue = val;
    433c:	aa 81       	ldd	r26, Y+2	; 0x02
    433e:	bb 81       	ldd	r27, Y+3	; 0x03
    4340:	bc 92       	st	X, r11
    4342:	f1 01       	movw	r30, r2
    4344:	b0 82       	st	Z, r11
	}
	
	h = h / 60.0;
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	40 e7       	ldi	r20, 0x70	; 112
    434c:	52 e4       	ldi	r21, 0x42	; 66
    434e:	c3 01       	movw	r24, r6
    4350:	b2 01       	movw	r22, r4
    4352:	0e 94 aa 35 	call	0x6b54	; 0x6b54 <__divsf3>
    4356:	4b 01       	movw	r8, r22
    4358:	5c 01       	movw	r10, r24
	uint8_t i = (uint8_t)h;
    435a:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <__fixunssfsi>
    435e:	69 83       	std	Y+1, r22	; 0x01
	f = h - i;
    4360:	70 e0       	ldi	r23, 0x00	; 0
    4362:	80 e0       	ldi	r24, 0x00	; 0
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	0e 94 45 36 	call	0x6c8a	; 0x6c8a <__floatsisf>
    436a:	9b 01       	movw	r18, r22
    436c:	ac 01       	movw	r20, r24
    436e:	c5 01       	movw	r24, r10
    4370:	b4 01       	movw	r22, r8
    4372:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    4376:	4b 01       	movw	r8, r22
    4378:	5c 01       	movw	r10, r24
	
	p = v*(1-s);
    437a:	a7 01       	movw	r20, r14
    437c:	96 01       	movw	r18, r12
    437e:	60 e0       	ldi	r22, 0x00	; 0
    4380:	70 e0       	ldi	r23, 0x00	; 0
    4382:	80 e8       	ldi	r24, 0x80	; 128
    4384:	9f e3       	ldi	r25, 0x3F	; 63
    4386:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    438a:	20 2f       	mov	r18, r16
    438c:	31 2f       	mov	r19, r17
    438e:	4b 85       	ldd	r20, Y+11	; 0x0b
    4390:	5a 85       	ldd	r21, Y+10	; 0x0a
    4392:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    4396:	66 2e       	mov	r6, r22
    4398:	77 2e       	mov	r7, r23
    439a:	48 2e       	mov	r4, r24
    439c:	59 2e       	mov	r5, r25
	q = v*(1-s*f);
    439e:	a5 01       	movw	r20, r10
    43a0:	94 01       	movw	r18, r8
    43a2:	c7 01       	movw	r24, r14
    43a4:	b6 01       	movw	r22, r12
    43a6:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    43aa:	9b 01       	movw	r18, r22
    43ac:	ac 01       	movw	r20, r24
    43ae:	60 e0       	ldi	r22, 0x00	; 0
    43b0:	70 e0       	ldi	r23, 0x00	; 0
    43b2:	80 e8       	ldi	r24, 0x80	; 128
    43b4:	9f e3       	ldi	r25, 0x3F	; 63
    43b6:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    43ba:	20 2f       	mov	r18, r16
    43bc:	31 2f       	mov	r19, r17
    43be:	4b 85       	ldd	r20, Y+11	; 0x0b
    43c0:	5a 85       	ldd	r21, Y+10	; 0x0a
    43c2:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    43c6:	6e 83       	std	Y+6, r22	; 0x06
    43c8:	7f 83       	std	Y+7, r23	; 0x07
    43ca:	88 87       	std	Y+8, r24	; 0x08
    43cc:	99 87       	std	Y+9, r25	; 0x09
	t = v*(1-s*(1-f));
    43ce:	a5 01       	movw	r20, r10
    43d0:	94 01       	movw	r18, r8
    43d2:	60 e0       	ldi	r22, 0x00	; 0
    43d4:	70 e0       	ldi	r23, 0x00	; 0
    43d6:	80 e8       	ldi	r24, 0x80	; 128
    43d8:	9f e3       	ldi	r25, 0x3F	; 63
    43da:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    43de:	a7 01       	movw	r20, r14
    43e0:	96 01       	movw	r18, r12
    43e2:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    43e6:	9b 01       	movw	r18, r22
    43e8:	ac 01       	movw	r20, r24
    43ea:	60 e0       	ldi	r22, 0x00	; 0
    43ec:	70 e0       	ldi	r23, 0x00	; 0
    43ee:	80 e8       	ldi	r24, 0x80	; 128
    43f0:	9f e3       	ldi	r25, 0x3F	; 63
    43f2:	0e 94 dc 34 	call	0x69b8	; 0x69b8 <__subsf3>
    43f6:	20 2f       	mov	r18, r16
    43f8:	31 2f       	mov	r19, r17
    43fa:	4b 85       	ldd	r20, Y+11	; 0x0b
    43fc:	5a 85       	ldd	r21, Y+10	; 0x0a
    43fe:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    4402:	c6 2e       	mov	r12, r22
    4404:	d7 2e       	mov	r13, r23
    4406:	e8 2e       	mov	r14, r24
    4408:	f9 2e       	mov	r15, r25
	
	switch(i)
    440a:	f9 81       	ldd	r31, Y+1	; 0x01
    440c:	f2 30       	cpi	r31, 0x02	; 2
    440e:	31 f1       	breq	.+76     	; 0x445c <hsv_to_rgb+0x20e>
    4410:	30 f4       	brcc	.+12     	; 0x441e <hsv_to_rgb+0x1d0>
    4412:	ff 23       	and	r31, r31
    4414:	09 f4       	brne	.+2      	; 0x4418 <hsv_to_rgb+0x1ca>
    4416:	5d c0       	rjmp	.+186    	; 0x44d2 <hsv_to_rgb+0x284>
    4418:	f1 30       	cpi	r31, 0x01	; 1
    441a:	a9 f0       	breq	.+42     	; 0x4446 <hsv_to_rgb+0x1f8>
    441c:	07 c0       	rjmp	.+14     	; 0x442c <hsv_to_rgb+0x1de>
    441e:	29 81       	ldd	r18, Y+1	; 0x01
    4420:	24 30       	cpi	r18, 0x04	; 4
    4422:	f1 f1       	breq	.+124    	; 0x44a0 <hsv_to_rgb+0x252>
    4424:	60 f1       	brcs	.+88     	; 0x447e <hsv_to_rgb+0x230>
    4426:	25 30       	cpi	r18, 0x05	; 5
    4428:	09 f4       	brne	.+2      	; 0x442c <hsv_to_rgb+0x1de>
    442a:	4b c0       	rjmp	.+150    	; 0x44c2 <hsv_to_rgb+0x274>
{
	float h = (hue%360)*1.0;
	float s = saturation/255.0;
	float v = val/255.0;
	float f, p, q, t;
	float r=0, g=0, b=0;
    442c:	61 2c       	mov	r6, r1
    442e:	71 2c       	mov	r7, r1
    4430:	41 2c       	mov	r4, r1
    4432:	51 2c       	mov	r5, r1
    4434:	c1 2c       	mov	r12, r1
    4436:	d1 2c       	mov	r13, r1
    4438:	e1 2c       	mov	r14, r1
    443a:	f1 2c       	mov	r15, r1
    443c:	00 e0       	ldi	r16, 0x00	; 0
    443e:	10 e0       	ldi	r17, 0x00	; 0
    4440:	1b 86       	std	Y+11, r1	; 0x0b
    4442:	1a 86       	std	Y+10, r1	; 0x0a
    4444:	46 c0       	rjmp	.+140    	; 0x44d2 <hsv_to_rgb+0x284>
			g = t;
			b = p;
			break;
		case 1:
			r = q;
			g = v;
    4446:	c0 2e       	mov	r12, r16
    4448:	d1 2e       	mov	r13, r17
    444a:	eb 84       	ldd	r14, Y+11	; 0x0b
    444c:	fa 84       	ldd	r15, Y+10	; 0x0a
			r = v;
			g = t;
			b = p;
			break;
		case 1:
			r = q;
    444e:	0e 81       	ldd	r16, Y+6	; 0x06
    4450:	1f 81       	ldd	r17, Y+7	; 0x07
    4452:	88 85       	ldd	r24, Y+8	; 0x08
    4454:	8b 87       	std	Y+11, r24	; 0x0b
    4456:	a9 85       	ldd	r26, Y+9	; 0x09
    4458:	aa 87       	std	Y+10, r26	; 0x0a
			g = v;
			b = p;
			break;
    445a:	3b c0       	rjmp	.+118    	; 0x44d2 <hsv_to_rgb+0x284>
		case 2:
			r = p;
			g = v;
			b = t;
			break;
    445c:	30 2f       	mov	r19, r16
    445e:	21 2f       	mov	r18, r17
    4460:	9b 85       	ldd	r25, Y+11	; 0x0b
    4462:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = q;
			g = v;
			b = p;
			break;
		case 2:
			r = p;
    4464:	06 2d       	mov	r16, r6
    4466:	17 2d       	mov	r17, r7
    4468:	4b 86       	std	Y+11, r4	; 0x0b
    446a:	5a 86       	std	Y+10, r5	; 0x0a
			g = v;
			b = t;
    446c:	6c 2c       	mov	r6, r12
    446e:	7d 2c       	mov	r7, r13
    4470:	4e 2c       	mov	r4, r14
    4472:	5f 2c       	mov	r5, r15
			g = v;
			b = p;
			break;
		case 2:
			r = p;
			g = v;
    4474:	c3 2e       	mov	r12, r19
    4476:	d2 2e       	mov	r13, r18
    4478:	e9 2e       	mov	r14, r25
    447a:	f8 2e       	mov	r15, r24
			b = t;
			break;
    447c:	2a c0       	rjmp	.+84     	; 0x44d2 <hsv_to_rgb+0x284>
		case 3:
			r = p;
			g = q;
    447e:	ce 80       	ldd	r12, Y+6	; 0x06
    4480:	df 80       	ldd	r13, Y+7	; 0x07
    4482:	e8 84       	ldd	r14, Y+8	; 0x08
    4484:	f9 84       	ldd	r15, Y+9	; 0x09
			b = v;
			break;
    4486:	30 2f       	mov	r19, r16
    4488:	21 2f       	mov	r18, r17
    448a:	9b 85       	ldd	r25, Y+11	; 0x0b
    448c:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = p;
			g = v;
			b = t;
			break;
		case 3:
			r = p;
    448e:	06 2d       	mov	r16, r6
    4490:	17 2d       	mov	r17, r7
    4492:	4b 86       	std	Y+11, r4	; 0x0b
    4494:	5a 86       	std	Y+10, r5	; 0x0a
			g = q;
			b = v;
    4496:	63 2e       	mov	r6, r19
    4498:	72 2e       	mov	r7, r18
    449a:	49 2e       	mov	r4, r25
    449c:	58 2e       	mov	r5, r24
			break;
    449e:	19 c0       	rjmp	.+50     	; 0x44d2 <hsv_to_rgb+0x284>
		case 4:
			r = t;
			g = p;
			b = v;
			break;
    44a0:	30 2f       	mov	r19, r16
    44a2:	21 2f       	mov	r18, r17
    44a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    44a6:	8a 85       	ldd	r24, Y+10	; 0x0a
			r = p;
			g = q;
			b = v;
			break;
		case 4:
			r = t;
    44a8:	0c 2d       	mov	r16, r12
    44aa:	1d 2d       	mov	r17, r13
    44ac:	eb 86       	std	Y+11, r14	; 0x0b
    44ae:	fa 86       	std	Y+10, r15	; 0x0a
			g = p;
    44b0:	c6 2c       	mov	r12, r6
    44b2:	d7 2c       	mov	r13, r7
    44b4:	e4 2c       	mov	r14, r4
    44b6:	f5 2c       	mov	r15, r5
			b = v;
    44b8:	63 2e       	mov	r6, r19
    44ba:	72 2e       	mov	r7, r18
    44bc:	49 2e       	mov	r4, r25
    44be:	58 2e       	mov	r5, r24
			break;
    44c0:	08 c0       	rjmp	.+16     	; 0x44d2 <hsv_to_rgb+0x284>
		case 5:
			r = v;
			g = p;
    44c2:	c6 2c       	mov	r12, r6
    44c4:	d7 2c       	mov	r13, r7
    44c6:	e4 2c       	mov	r14, r4
    44c8:	f5 2c       	mov	r15, r5
			b = q;
    44ca:	6e 80       	ldd	r6, Y+6	; 0x06
    44cc:	7f 80       	ldd	r7, Y+7	; 0x07
    44ce:	48 84       	ldd	r4, Y+8	; 0x08
    44d0:	59 84       	ldd	r5, Y+9	; 0x09
			break;
		default:
			//printf("SHOULD NEVER SEE THIS. i: %hhu",i);
			break;
	}
	*red = (uint8_t)(r*255);
    44d2:	20 e0       	ldi	r18, 0x00	; 0
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	4f e7       	ldi	r20, 0x7F	; 127
    44d8:	53 e4       	ldi	r21, 0x43	; 67
    44da:	60 2f       	mov	r22, r16
    44dc:	71 2f       	mov	r23, r17
    44de:	8b 85       	ldd	r24, Y+11	; 0x0b
    44e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e2:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    44e6:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <__fixunssfsi>
    44ea:	ec 81       	ldd	r30, Y+4	; 0x04
    44ec:	fd 81       	ldd	r31, Y+5	; 0x05
    44ee:	60 83       	st	Z, r22
	*blue = (uint8_t)(b*255);
    44f0:	20 e0       	ldi	r18, 0x00	; 0
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	4f e7       	ldi	r20, 0x7F	; 127
    44f6:	53 e4       	ldi	r21, 0x43	; 67
    44f8:	66 2d       	mov	r22, r6
    44fa:	77 2d       	mov	r23, r7
    44fc:	84 2d       	mov	r24, r4
    44fe:	95 2d       	mov	r25, r5
    4500:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    4504:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <__fixunssfsi>
    4508:	aa 81       	ldd	r26, Y+2	; 0x02
    450a:	bb 81       	ldd	r27, Y+3	; 0x03
    450c:	6c 93       	st	X, r22
	*green = (uint8_t)(g*255);
    450e:	20 e0       	ldi	r18, 0x00	; 0
    4510:	30 e0       	ldi	r19, 0x00	; 0
    4512:	4f e7       	ldi	r20, 0x7F	; 127
    4514:	53 e4       	ldi	r21, 0x43	; 67
    4516:	6c 2d       	mov	r22, r12
    4518:	7d 2d       	mov	r23, r13
    451a:	8e 2d       	mov	r24, r14
    451c:	9f 2d       	mov	r25, r15
    451e:	0e 94 ba 37 	call	0x6f74	; 0x6f74 <__mulsf3>
    4522:	0e 94 17 36 	call	0x6c2e	; 0x6c2e <__fixunssfsi>
    4526:	f1 01       	movw	r30, r2
    4528:	60 83       	st	Z, r22
    452a:	2b 96       	adiw	r28, 0x0b	; 11
    452c:	cd bf       	out	0x3d, r28	; 61
    452e:	de bf       	out	0x3e, r29	; 62
    4530:	df 91       	pop	r29
    4532:	cf 91       	pop	r28
    4534:	1f 91       	pop	r17
    4536:	0f 91       	pop	r16
    4538:	ff 90       	pop	r15
    453a:	ef 90       	pop	r14
    453c:	df 90       	pop	r13
    453e:	cf 90       	pop	r12
    4540:	bf 90       	pop	r11
    4542:	af 90       	pop	r10
    4544:	9f 90       	pop	r9
    4546:	8f 90       	pop	r8
    4548:	7f 90       	pop	r7
    454a:	6f 90       	pop	r6
    454c:	5f 90       	pop	r5
    454e:	4f 90       	pop	r4
    4550:	3f 90       	pop	r3
    4552:	2f 90       	pop	r2
    4554:	08 95       	ret

00004556 <set_hsv>:
Hue should be between 0 and 360 (though it gets modulo'd with 360, so should be okay)
Saturation and value can be between 0 and 255, where 255 is brightest/most saturated,
and 0 is dimmest/least saturated.
*/
void set_hsv(uint16_t h, uint8_t s, uint8_t v)
{
    4556:	ef 92       	push	r14
    4558:	ff 92       	push	r15
    455a:	0f 93       	push	r16
    455c:	1f 93       	push	r17
    455e:	cf 93       	push	r28
    4560:	df 93       	push	r29
    4562:	00 d0       	rcall	.+0      	; 0x4564 <set_hsv+0xe>
    4564:	cd b7       	in	r28, 0x3d	; 61
    4566:	de b7       	in	r29, 0x3e	; 62
	uint8_t r,g,b;
	hsv_to_rgb(h,s,v,&r,&g,&b);
    4568:	9e 01       	movw	r18, r28
    456a:	2d 5f       	subi	r18, 0xFD	; 253
    456c:	3f 4f       	sbci	r19, 0xFF	; 255
    456e:	79 01       	movw	r14, r18
    4570:	8e 01       	movw	r16, r28
    4572:	0e 5f       	subi	r16, 0xFE	; 254
    4574:	1f 4f       	sbci	r17, 0xFF	; 255
    4576:	22 50       	subi	r18, 0x02	; 2
    4578:	31 09       	sbc	r19, r1
    457a:	69 de       	rcall	.-814    	; 0x424e <hsv_to_rgb>
	set_rgb(r,g,b);
    457c:	8b 81       	ldd	r24, Y+3	; 0x03
    457e:	2a 81       	ldd	r18, Y+2	; 0x02

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    4580:	49 81       	ldd	r20, Y+1	; 0x01
    4582:	50 e0       	ldi	r21, 0x00	; 0
    4584:	e0 e4       	ldi	r30, 0x40	; 64
    4586:	fa e0       	ldi	r31, 0x0A	; 10
    4588:	42 af       	std	Z+58, r20	; 0x3a
    458a:	53 af       	std	Z+59, r21	; 0x3b

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	20 af       	std	Z+56, r18	; 0x38
    4590:	31 af       	std	Z+57, r19	; 0x39
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    4592:	90 e0       	ldi	r25, 0x00	; 0
    4594:	e0 e4       	ldi	r30, 0x40	; 64
    4596:	f9 e0       	ldi	r31, 0x09	; 9
    4598:	80 af       	std	Z+56, r24	; 0x38
    459a:	91 af       	std	Z+57, r25	; 0x39
}
    459c:	23 96       	adiw	r28, 0x03	; 3
    459e:	cd bf       	out	0x3d, r28	; 61
    45a0:	de bf       	out	0x3e, r29	; 62
    45a2:	df 91       	pop	r29
    45a4:	cf 91       	pop	r28
    45a6:	1f 91       	pop	r17
    45a8:	0f 91       	pop	r16
    45aa:	ff 90       	pop	r15
    45ac:	ef 90       	pop	r14
    45ae:	08 95       	ret

000045b0 <get_red_sensor>:
	//
	////printf("%3hu %3hu %3hu\t->\t%3hu %3hu %3hu\r\n",tmpR,tmpG,tmpB,*r,*g,*b);
//}

int16_t get_red_sensor()
{
    45b0:	cf 93       	push	r28
    45b2:	df 93       	push	r29
    45b4:	cd b7       	in	r28, 0x3d	; 61
    45b6:	de b7       	in	r29, 0x3e	; 62
    45b8:	2a 97       	sbiw	r28, 0x0a	; 10
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	de bf       	out	0x3e, r29	; 62
    45be:	de 01       	movw	r26, r28
    45c0:	11 96       	adiw	r26, 0x01	; 1
    45c2:	9e 01       	movw	r18, r28
    45c4:	25 5f       	subi	r18, 0xF5	; 245
    45c6:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    45c8:	e0 e0       	ldi	r30, 0x00	; 0
    45ca:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    45cc:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
    45ce:	80 a1       	ldd	r24, Z+32	; 0x20
    45d0:	80 68       	ori	r24, 0x80	; 128
    45d2:	80 a3       	std	Z+32, r24	; 0x20
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
    45d4:	83 a1       	ldd	r24, Z+35	; 0x23
    45d6:	88 23       	and	r24, r24
    45d8:	e9 f3       	breq	.-6      	; 0x45d4 <get_red_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
    45da:	45 a1       	ldd	r20, Z+37	; 0x25
    45dc:	84 a1       	ldd	r24, Z+36	; 0x24
    45de:	90 e0       	ldi	r25, 0x00	; 0
    45e0:	94 2b       	or	r25, r20
    45e2:	95 95       	asr	r25
    45e4:	87 95       	ror	r24
    45e6:	95 95       	asr	r25
    45e8:	87 95       	ror	r24
    45ea:	95 95       	asr	r25
    45ec:	87 95       	ror	r24
    45ee:	95 95       	asr	r25
    45f0:	87 95       	ror	r24
    45f2:	8d 93       	st	X+, r24
    45f4:	9d 93       	st	X+, r25
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
    45f6:	53 a3       	std	Z+35, r21	; 0x23

int16_t get_red_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t red_val;	
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    45f8:	a2 17       	cp	r26, r18
    45fa:	b3 07       	cpc	r27, r19
    45fc:	41 f7       	brne	.-48     	; 0x45ce <get_red_sensor+0x1e>
		ADCA.CH0.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH0.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH0.RESH))<<8)|((int16_t)ADCA.CH0.RESL))>>4;	
		ADCA.CH0.INTFLAGS=1; // clear the complete flag				
	}
	red_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    45fe:	63 e0       	ldi	r22, 0x03	; 3
    4600:	ce 01       	movw	r24, r28
    4602:	05 96       	adiw	r24, 0x05	; 5
    4604:	0e 94 13 10 	call	0x2026	; 0x2026 <meas_find_median>
	//printf("%d\t", red_val);
	return red_val;
}
    4608:	2a 96       	adiw	r28, 0x0a	; 10
    460a:	cd bf       	out	0x3d, r28	; 61
    460c:	de bf       	out	0x3e, r29	; 62
    460e:	df 91       	pop	r29
    4610:	cf 91       	pop	r28
    4612:	08 95       	ret

00004614 <get_green_sensor>:

int16_t get_green_sensor()
{
    4614:	cf 93       	push	r28
    4616:	df 93       	push	r29
    4618:	cd b7       	in	r28, 0x3d	; 61
    461a:	de b7       	in	r29, 0x3e	; 62
    461c:	2a 97       	sbiw	r28, 0x0a	; 10
    461e:	cd bf       	out	0x3d, r28	; 61
    4620:	de bf       	out	0x3e, r29	; 62
    4622:	de 01       	movw	r26, r28
    4624:	11 96       	adiw	r26, 0x01	; 1
    4626:	9e 01       	movw	r18, r28
    4628:	25 5f       	subi	r18, 0xF5	; 245
    462a:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    462c:	e0 e0       	ldi	r30, 0x00	; 0
    462e:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
    4630:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
    4632:	80 a5       	ldd	r24, Z+40	; 0x28
    4634:	80 68       	ori	r24, 0x80	; 128
    4636:	80 a7       	std	Z+40, r24	; 0x28
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
    4638:	83 a5       	ldd	r24, Z+43	; 0x2b
    463a:	88 23       	and	r24, r24
    463c:	e9 f3       	breq	.-6      	; 0x4638 <get_green_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
    463e:	45 a5       	ldd	r20, Z+45	; 0x2d
    4640:	84 a5       	ldd	r24, Z+44	; 0x2c
    4642:	90 e0       	ldi	r25, 0x00	; 0
    4644:	94 2b       	or	r25, r20
    4646:	95 95       	asr	r25
    4648:	87 95       	ror	r24
    464a:	95 95       	asr	r25
    464c:	87 95       	ror	r24
    464e:	95 95       	asr	r25
    4650:	87 95       	ror	r24
    4652:	95 95       	asr	r25
    4654:	87 95       	ror	r24
    4656:	8d 93       	st	X+, r24
    4658:	9d 93       	st	X+, r25
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
    465a:	53 a7       	std	Z+43, r21	; 0x2b

int16_t get_green_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t green_val;		
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    465c:	a2 17       	cp	r26, r18
    465e:	b3 07       	cpc	r27, r19
    4660:	41 f7       	brne	.-48     	; 0x4632 <get_green_sensor+0x1e>
		ADCA.CH1.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH1.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH1.RESH))<<8)|((int16_t)ADCA.CH1.RESL))>>4;		
		ADCA.CH1.INTFLAGS=1; // clear the complete flag		
	}
	green_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    4662:	63 e0       	ldi	r22, 0x03	; 3
    4664:	ce 01       	movw	r24, r28
    4666:	05 96       	adiw	r24, 0x05	; 5
    4668:	0e 94 13 10 	call	0x2026	; 0x2026 <meas_find_median>
	//printf("%d\t", green_val);
	return green_val;
}
    466c:	2a 96       	adiw	r28, 0x0a	; 10
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	de bf       	out	0x3e, r29	; 62
    4672:	df 91       	pop	r29
    4674:	cf 91       	pop	r28
    4676:	08 95       	ret

00004678 <get_blue_sensor>:

int16_t get_blue_sensor()
{
    4678:	cf 93       	push	r28
    467a:	df 93       	push	r29
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
    4680:	2a 97       	sbiw	r28, 0x0a	; 10
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	de bf       	out	0x3e, r29	; 62
    4686:	de 01       	movw	r26, r28
    4688:	11 96       	adiw	r26, 0x01	; 1
    468a:	9e 01       	movw	r18, r28
    468c:	25 5f       	subi	r18, 0xF5	; 245
    468e:	3f 4f       	sbci	r19, 0xFF	; 255
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    4690:	e0 e0       	ldi	r30, 0x00	; 0
    4692:	f2 e0       	ldi	r31, 0x02	; 2
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    4694:	51 e0       	ldi	r21, 0x01	; 1
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
	{
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
    4696:	80 a9       	ldd	r24, Z+48	; 0x30
    4698:	80 68       	ori	r24, 0x80	; 128
    469a:	80 ab       	std	Z+48, r24	; 0x30
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
    469c:	83 a9       	ldd	r24, Z+51	; 0x33
    469e:	88 23       	and	r24, r24
    46a0:	e9 f3       	breq	.-6      	; 0x469c <get_blue_sensor+0x24>
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
    46a2:	45 a9       	ldd	r20, Z+53	; 0x35
    46a4:	84 a9       	ldd	r24, Z+52	; 0x34
    46a6:	90 e0       	ldi	r25, 0x00	; 0
    46a8:	94 2b       	or	r25, r20
    46aa:	95 95       	asr	r25
    46ac:	87 95       	ror	r24
    46ae:	95 95       	asr	r25
    46b0:	87 95       	ror	r24
    46b2:	95 95       	asr	r25
    46b4:	87 95       	ror	r24
    46b6:	95 95       	asr	r25
    46b8:	87 95       	ror	r24
    46ba:	8d 93       	st	X+, r24
    46bc:	9d 93       	st	X+, r25
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
    46be:	53 ab       	std	Z+51, r21	; 0x33

int16_t get_blue_sensor()
{
	int16_t meas[RGB_MEAS_COUNT];
	int16_t blue_val;
	for(uint8_t meas_count=0; meas_count<RGB_MEAS_COUNT; meas_count++)
    46c0:	a2 17       	cp	r26, r18
    46c2:	b3 07       	cpc	r27, r19
    46c4:	41 f7       	brne	.-48     	; 0x4696 <get_blue_sensor+0x1e>
		ADCA.CH2.CTRL |= ADC_CH_START_bm;
		while (ADCA.CH2.INTFLAGS==0){};		// wait for measurement to complete
		meas[meas_count] = ((((int16_t)(ADCA.CH2.RESH))<<8)|((int16_t)ADCA.CH2.RESL))>>4;
		ADCA.CH2.INTFLAGS=1; // clear the complete flag		
	}		
	blue_val=meas_find_median(&meas[2], RGB_MEAS_COUNT-2);
    46c6:	63 e0       	ldi	r22, 0x03	; 3
    46c8:	ce 01       	movw	r24, r28
    46ca:	05 96       	adiw	r24, 0x05	; 5
    46cc:	0e 94 13 10 	call	0x2026	; 0x2026 <meas_find_median>
	//printf("%d\t", blue_val);	
	return blue_val;
}
    46d0:	2a 96       	adiw	r28, 0x0a	; 10
    46d2:	cd bf       	out	0x3d, r28	; 61
    46d4:	de bf       	out	0x3e, r29	; 62
    46d6:	df 91       	pop	r29
    46d8:	cf 91       	pop	r28
    46da:	08 95       	ret

000046dc <rgb_sensor_init>:
#include "rgb_sensor.h"

void rgb_sensor_init()
{
    46dc:	df 92       	push	r13
    46de:	ef 92       	push	r14
    46e0:	ff 92       	push	r15
    46e2:	0f 93       	push	r16
    46e4:	1f 93       	push	r17
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29
	RGB_SENSOR_PORT.DIRCLR = RGB_SENSOR_R_PIN_bm | RGB_SENSOR_G_PIN_bm | RGB_SENSOR_B_PIN_bm;
    46ea:	80 ee       	ldi	r24, 0xE0	; 224
    46ec:	e0 e0       	ldi	r30, 0x00	; 0
    46ee:	f6 e0       	ldi	r31, 0x06	; 6
    46f0:	82 83       	std	Z+2, r24	; 0x02

	ADCA.REFCTRL = ADC_REFSEL_AREFA_gc;
    46f2:	e0 e0       	ldi	r30, 0x00	; 0
    46f4:	f2 e0       	ldi	r31, 0x02	; 2
    46f6:	80 e2       	ldi	r24, 0x20	; 32
    46f8:	82 83       	std	Z+2, r24	; 0x02
	ADCA.CTRLB = ADC_RESOLUTION_LEFT12BIT_gc | ADC_CONMODE_bm;
    46fa:	86 e1       	ldi	r24, 0x16	; 22
    46fc:	81 83       	std	Z+1, r24	; 0x01
	ADCA.PRESCALER = ADC_PRESCALER_DIV256_gc;
    46fe:	86 e0       	ldi	r24, 0x06	; 6
    4700:	84 83       	std	Z+4, r24	; 0x04
	/* When differential input is used, signed mode must be used. (sec. 28.6 of Manual) */

	ADCA.CH0.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    4702:	83 e0       	ldi	r24, 0x03	; 3
    4704:	80 a3       	std	Z+32, r24	; 0x20
	ADCA.CH1.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_1X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    4706:	80 a7       	std	Z+40, r24	; 0x28
	ADCA.CH2.CTRL = ADC_CH_INPUTMODE_DIFFWGAIN_gc | ADC_CH_GAIN_2X_gc;	//Probably should turn the gain back up to 4X when we put the shells on.
    4708:	87 e0       	ldi	r24, 0x07	; 7
    470a:	80 ab       	std	Z+48, r24	; 0x30
	
	ADCA.CH0.MUXCTRL = ADC_CH_MUXPOS_PIN5_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Red sensor on ADC A channel 0
    470c:	8c e2       	ldi	r24, 0x2C	; 44
    470e:	81 a3       	std	Z+33, r24	; 0x21
	ADCA.CH1.MUXCTRL = ADC_CH_MUXPOS_PIN6_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Green sensor on ADC A channel 1
    4710:	84 e3       	ldi	r24, 0x34	; 52
    4712:	81 a7       	std	Z+41, r24	; 0x29
	ADCA.CH2.MUXCTRL = ADC_CH_MUXPOS_PIN7_gc | ADC_CH_MUXNEG_INTGND_MODE4_gc;	// Blue sensor on ADC A channel 2
    4714:	8c e3       	ldi	r24, 0x3C	; 60
    4716:	81 ab       	std	Z+49, r24	; 0x31
	
	ADCA.CALL = PRODSIGNATURES_ADCACAL0;
    4718:	80 b5       	in	r24, 0x20	; 32
    471a:	84 87       	std	Z+12, r24	; 0x0c
	ADCA.CALH = PRODSIGNATURES_ADCACAL1;	
    471c:	81 b5       	in	r24, 0x21	; 33
    471e:	85 87       	std	Z+13, r24	; 0x0d

	ADCA.CTRLA = ADC_ENABLE_bm;
    4720:	81 e0       	ldi	r24, 0x01	; 1
    4722:	80 83       	st	Z, r24
    4724:	8f e8       	ldi	r24, 0x8F	; 143
    4726:	91 e0       	ldi	r25, 0x01	; 1
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	f1 f7       	brne	.-4      	; 0x4728 <rgb_sensor_init+0x4c>
    472c:	00 c0       	rjmp	.+0      	; 0x472e <rgb_sensor_init+0x52>
    472e:	00 00       	nop
	
	//read_color_settings();
	
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
    4730:	3f df       	rcall	.-386    	; 0x45b0 <get_red_sensor>
    4732:	a2 df       	rcall	.-188    	; 0x4678 <get_blue_sensor>
    4734:	6f df       	rcall	.-290    	; 0x4614 <get_green_sensor>
	delay_ms(10);
    4736:	8a e0       	ldi	r24, 0x0A	; 10
    4738:	90 e0       	ldi	r25, 0x00	; 0
    473a:	12 d1       	rcall	.+548    	; 0x4960 <delay_ms>
	int16_t r_avg=0, g_avg=0, b_avg=0;
	for(uint8_t i=0; i<num_samples; i++)
    473c:	d1 2c       	mov	r13, r1
	
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
	delay_ms(10);
	int16_t r_avg=0, g_avg=0, b_avg=0;
    473e:	c0 e0       	ldi	r28, 0x00	; 0
    4740:	d0 e0       	ldi	r29, 0x00	; 0
    4742:	00 e0       	ldi	r16, 0x00	; 0
    4744:	10 e0       	ldi	r17, 0x00	; 0
    4746:	e1 2c       	mov	r14, r1
    4748:	f1 2c       	mov	r15, r1
	for(uint8_t i=0; i<num_samples; i++)
	{
		r_avg+=get_red_sensor();
    474a:	32 df       	rcall	.-412    	; 0x45b0 <get_red_sensor>
    474c:	e8 0e       	add	r14, r24
    474e:	f9 1e       	adc	r15, r25
		g_avg+=get_green_sensor();
    4750:	61 df       	rcall	.-318    	; 0x4614 <get_green_sensor>
    4752:	08 0f       	add	r16, r24
    4754:	19 1f       	adc	r17, r25
		b_avg+=get_blue_sensor();
    4756:	90 df       	rcall	.-224    	; 0x4678 <get_blue_sensor>
    4758:	c8 0f       	add	r28, r24
    475a:	d9 1f       	adc	r29, r25
		delay_ms(10);
    475c:	8a e0       	ldi	r24, 0x0A	; 10
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	ff d0       	rcall	.+510    	; 0x4960 <delay_ms>
		printf("\r\n");
    4762:	80 ed       	ldi	r24, 0xD0	; 208
    4764:	99 e2       	ldi	r25, 0x29	; 41
    4766:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
	delay_us(50);
	const int8_t num_samples = 3;
	get_red_sensor(); get_blue_sensor(); get_green_sensor();
	delay_ms(10);
	int16_t r_avg=0, g_avg=0, b_avg=0;
	for(uint8_t i=0; i<num_samples; i++)
    476a:	d3 94       	inc	r13
    476c:	93 e0       	ldi	r25, 0x03	; 3
    476e:	d9 12       	cpse	r13, r25
    4770:	ec cf       	rjmp	.-40     	; 0x474a <rgb_sensor_init+0x6e>
		g_avg+=get_green_sensor();
		b_avg+=get_blue_sensor();
		delay_ms(10);
		printf("\r\n");
	}
	r_baseline= r_avg/num_samples;
    4772:	23 e0       	ldi	r18, 0x03	; 3
    4774:	30 e0       	ldi	r19, 0x00	; 0
    4776:	c7 01       	movw	r24, r14
    4778:	b9 01       	movw	r22, r18
    477a:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
    477e:	46 2f       	mov	r20, r22
    4780:	e7 2f       	mov	r30, r23
    4782:	60 93 58 2b 	sts	0x2B58, r22
    4786:	70 93 59 2b 	sts	0x2B59, r23
	g_baseline= g_avg/num_samples;
    478a:	c8 01       	movw	r24, r16
    478c:	b9 01       	movw	r22, r18
    478e:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
    4792:	f6 2f       	mov	r31, r22
    4794:	17 2f       	mov	r17, r23
    4796:	60 93 cf 2a 	sts	0x2ACF, r22
    479a:	70 93 d0 2a 	sts	0x2AD0, r23
	b_baseline= b_avg/num_samples;
    479e:	ce 01       	movw	r24, r28
    47a0:	b9 01       	movw	r22, r18
    47a2:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
    47a6:	60 93 c7 2a 	sts	0x2AC7, r22
    47aa:	70 93 c8 2a 	sts	0x2AC8, r23
	printf("Baselines:\r\n%3d  %3d  %3d\r\n", r_baseline, g_baseline, b_baseline);
    47ae:	7f 93       	push	r23
    47b0:	6f 93       	push	r22
    47b2:	1f 93       	push	r17
    47b4:	ff 93       	push	r31
    47b6:	ef 93       	push	r30
    47b8:	4f 93       	push	r20
    47ba:	8c e1       	ldi	r24, 0x1C	; 28
    47bc:	93 e2       	ldi	r25, 0x23	; 35
    47be:	9f 93       	push	r25
    47c0:	8f 93       	push	r24
    47c2:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    47c6:	8d b7       	in	r24, 0x3d	; 61
    47c8:	9e b7       	in	r25, 0x3e	; 62
    47ca:	08 96       	adiw	r24, 0x08	; 8
    47cc:	8d bf       	out	0x3d, r24	; 61
    47ce:	9e bf       	out	0x3e, r25	; 62
}
    47d0:	df 91       	pop	r29
    47d2:	cf 91       	pop	r28
    47d4:	1f 91       	pop	r17
    47d6:	0f 91       	pop	r16
    47d8:	ff 90       	pop	r15
    47da:	ef 90       	pop	r14
    47dc:	df 90       	pop	r13
    47de:	08 95       	ret

000047e0 <get_rgb_sensors>:

// Still not convinced that we should have the conditional, instead of just telling people
// that if their lights are on they won't get good values, here.
void get_rgb_sensors(int8_t* r, int8_t* g, int8_t* b)
{
    47e0:	3f 92       	push	r3
    47e2:	4f 92       	push	r4
    47e4:	5f 92       	push	r5
    47e6:	6f 92       	push	r6
    47e8:	7f 92       	push	r7
    47ea:	8f 92       	push	r8
    47ec:	9f 92       	push	r9
    47ee:	af 92       	push	r10
    47f0:	bf 92       	push	r11
    47f2:	cf 92       	push	r12
    47f4:	df 92       	push	r13
    47f6:	ef 92       	push	r14
    47f8:	ff 92       	push	r15
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
    47fe:	cf 93       	push	r28
    4800:	df 93       	push	r29
    4802:	5c 01       	movw	r10, r24
    4804:	6b 01       	movw	r12, r22
    4806:	7a 01       	movw	r14, r20
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    4808:	e0 e4       	ldi	r30, 0x40	; 64
    480a:	fa e0       	ldi	r31, 0x0A	; 10
    480c:	82 ac       	ldd	r8, Z+58	; 0x3a
    480e:	93 ac       	ldd	r9, Z+59	; 0x3b
    4810:	78 2c       	mov	r7, r8
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    4812:	c0 ad       	ldd	r28, Z+56	; 0x38
    4814:	d1 ad       	ldd	r29, Z+57	; 0x39
    4816:	6c 2e       	mov	r6, r28
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    4818:	e0 e4       	ldi	r30, 0x40	; 64
    481a:	f9 e0       	ldi	r31, 0x09	; 9
    481c:	00 ad       	ldd	r16, Z+56	; 0x38
    481e:	11 ad       	ldd	r17, Z+57	; 0x39
    4820:	30 2e       	mov	r3, r16
	uint8_t led_r = get_red_led();
	uint8_t led_g = get_green_led();
	uint8_t led_b = get_blue_led();
	
	if(led_r || led_g || led_b)
    4822:	81 10       	cpse	r8, r1
    4824:	04 c0       	rjmp	.+8      	; 0x482e <get_rgb_sensors+0x4e>
    4826:	c1 11       	cpse	r28, r1
    4828:	02 c0       	rjmp	.+4      	; 0x482e <get_rgb_sensors+0x4e>
    482a:	00 23       	and	r16, r16
    482c:	39 f0       	breq	.+14     	; 0x483c <get_rgb_sensors+0x5c>
	{
		set_rgb(0,0,0);
    482e:	40 e0       	ldi	r20, 0x00	; 0
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	80 e0       	ldi	r24, 0x00	; 0
    4834:	fe dc       	rcall	.-1540   	; 0x4232 <set_rgb>
		delay_ms(LED_OFF_DELAY_MS);
    4836:	86 e9       	ldi	r24, 0x96	; 150
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	92 d0       	rcall	.+292    	; 0x4960 <delay_ms>
	//*g = (int8_t)((((gResH&0x08)<<4)|((gResH&0x01)<<6))|((gResL&0xFC)>>2));	
	//*b = (int8_t)((((bResH&0x08)<<4)|((bResH&0x01)<<6))|((bResL&0xFC)>>2));	

	int8_t rTemp,gTemp,bTemp;
	
	rTemp = get_red_sensor();
    483c:	b9 de       	rcall	.-654    	; 0x45b0 <get_red_sensor>
    483e:	48 2e       	mov	r4, r24
	gTemp = get_green_sensor();		
    4840:	e9 de       	rcall	.-558    	; 0x4614 <get_green_sensor>
    4842:	58 2e       	mov	r5, r24
	bTemp = get_blue_sensor();	
    4844:	19 df       	rcall	.-462    	; 0x4678 <get_blue_sensor>

	rTemp=rTemp-r_baseline;
    4846:	90 91 58 2b 	lds	r25, 0x2B58
    484a:	49 1a       	sub	r4, r25
	gTemp=gTemp-g_baseline;
    484c:	90 91 cf 2a 	lds	r25, 0x2ACF
    4850:	59 1a       	sub	r5, r25
	bTemp=bTemp-b_baseline;
    4852:	90 91 c7 2a 	lds	r25, 0x2AC7
    4856:	89 1b       	sub	r24, r25
	else if(rTemp<=-128)	rTemp=-128;
	if(gTemp>=127)			gTemp=127;
	else if(gTemp<=-128)	gTemp=-128;
	if(bTemp>=127)			bTemp=127;
	else if(bTemp<=-128)	bTemp=-128;		
	if(r!=NULL) *r=(int8_t)rTemp;
    4858:	a1 14       	cp	r10, r1
    485a:	b1 04       	cpc	r11, r1
    485c:	11 f0       	breq	.+4      	; 0x4862 <get_rgb_sensors+0x82>
    485e:	f5 01       	movw	r30, r10
    4860:	40 82       	st	Z, r4
	if(g!=NULL) *g=(int8_t)gTemp;
    4862:	c1 14       	cp	r12, r1
    4864:	d1 04       	cpc	r13, r1
    4866:	11 f0       	breq	.+4      	; 0x486c <get_rgb_sensors+0x8c>
    4868:	f6 01       	movw	r30, r12
    486a:	50 82       	st	Z, r5
	if(b!=NULL) *b=(int8_t)bTemp;	
    486c:	e1 14       	cp	r14, r1
    486e:	f1 04       	cpc	r15, r1
    4870:	11 f0       	breq	.+4      	; 0x4876 <get_rgb_sensors+0x96>
    4872:	f7 01       	movw	r30, r14
    4874:	80 83       	st	Z, r24
		
	if(led_r || led_g || led_b) set_rgb(led_r, led_g, led_b);
    4876:	71 10       	cpse	r7, r1
    4878:	04 c0       	rjmp	.+8      	; 0x4882 <get_rgb_sensors+0xa2>
    487a:	61 10       	cpse	r6, r1
    487c:	02 c0       	rjmp	.+4      	; 0x4882 <get_rgb_sensors+0xa2>
    487e:	33 20       	and	r3, r3
    4880:	21 f0       	breq	.+8      	; 0x488a <get_rgb_sensors+0xaa>
    4882:	40 2f       	mov	r20, r16
    4884:	6c 2f       	mov	r22, r28
    4886:	88 2d       	mov	r24, r8
    4888:	d4 dc       	rcall	.-1624   	; 0x4232 <set_rgb>
}
    488a:	df 91       	pop	r29
    488c:	cf 91       	pop	r28
    488e:	1f 91       	pop	r17
    4890:	0f 91       	pop	r16
    4892:	ff 90       	pop	r15
    4894:	ef 90       	pop	r14
    4896:	df 90       	pop	r13
    4898:	cf 90       	pop	r12
    489a:	bf 90       	pop	r11
    489c:	af 90       	pop	r10
    489e:	9f 90       	pop	r9
    48a0:	8f 90       	pop	r8
    48a2:	7f 90       	pop	r7
    48a4:	6f 90       	pop	r6
    48a6:	5f 90       	pop	r5
    48a8:	4f 90       	pop	r4
    48aa:	3f 90       	pop	r3
    48ac:	08 95       	ret

000048ae <scheduler_init>:
	}
}

void scheduler_init()
{
	task_list = NULL;
    48ae:	10 92 5f 2c 	sts	0x2C5F, r1
    48b2:	10 92 60 2c 	sts	0x2C60, r1
	num_tasks = 0;
    48b6:	10 92 cc 2a 	sts	0x2ACC, r1
	num_executing_tasks = 0;
    48ba:	10 92 d1 2a 	sts	0x2AD1, r1
	curr_pointer = 0;
    48be:	10 92 36 2d 	sts	0x2D36, r1
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during initialization
    48c2:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    48c4:	f8 94       	cli
	{
		// Clear current task list, if necessary
		// (Should only be necessary if scheduler is re-initialized at runtime)
		
		// Set up real-time clock
		rtc_epoch = 0;
    48c6:	10 92 f1 29 	sts	0x29F1, r1
    48ca:	10 92 f2 29 	sts	0x29F2, r1
		CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;
    48ce:	85 e0       	ldi	r24, 0x05	; 5
    48d0:	e0 e4       	ldi	r30, 0x40	; 64
    48d2:	f0 e0       	ldi	r31, 0x00	; 0
    48d4:	83 83       	std	Z+3, r24	; 0x03
		RTC.INTCTRL = RTC_OVFINTLVL_HI_gc;		// High level overflow interrupt to increment the epoch counter
    48d6:	83 e0       	ldi	r24, 0x03	; 3
    48d8:	e0 e0       	ldi	r30, 0x00	; 0
    48da:	f4 e0       	ldi	r31, 0x04	; 4
    48dc:	82 83       	std	Z+2, r24	; 0x02
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    48de:	81 81       	ldd	r24, Z+1	; 0x01
    48e0:	80 fd       	sbrc	r24, 0
    48e2:	fd cf       	rjmp	.-6      	; 0x48de <scheduler_init+0x30>
		RTC.PER = 0xFFFF;
    48e4:	8f ef       	ldi	r24, 0xFF	; 255
    48e6:	9f ef       	ldi	r25, 0xFF	; 255
    48e8:	e0 e0       	ldi	r30, 0x00	; 0
    48ea:	f4 e0       	ldi	r31, 0x04	; 4
    48ec:	82 87       	std	Z+10, r24	; 0x0a
    48ee:	93 87       	std	Z+11, r25	; 0x0b
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    48f0:	81 81       	ldd	r24, Z+1	; 0x01
    48f2:	80 fd       	sbrc	r24, 0
    48f4:	fd cf       	rjmp	.-6      	; 0x48f0 <scheduler_init+0x42>
		RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    48f6:	81 e0       	ldi	r24, 0x01	; 1
    48f8:	80 93 00 04 	sts	0x0400, r24
		while (RTC.STATUS & RTC_SYNCBUSY_bm);
    48fc:	e0 e0       	ldi	r30, 0x00	; 0
    48fe:	f4 e0       	ldi	r31, 0x04	; 4
    4900:	81 81       	ldd	r24, Z+1	; 0x01
    4902:	80 fd       	sbrc	r24, 0
    4904:	fd cf       	rjmp	.-6      	; 0x4900 <scheduler_init+0x52>
		RTC.CNT = 0;
    4906:	e0 e0       	ldi	r30, 0x00	; 0
    4908:	f4 e0       	ldi	r31, 0x04	; 4
    490a:	10 86       	std	Z+8, r1	; 0x08
    490c:	11 86       	std	Z+9, r1	; 0x09
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    490e:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    4910:	08 95       	ret

00004912 <Config32MHzClock>:
}

void Config32MHzClock(void)
{
	// Set system clock to 32 MHz
	CCP = CCP_IOREG_gc;
    4912:	88 ed       	ldi	r24, 0xD8	; 216
    4914:	84 bf       	out	0x34, r24	; 52
	OSC.CTRL = OSC_RC32MEN_bm;
    4916:	82 e0       	ldi	r24, 0x02	; 2
    4918:	80 93 50 00 	sts	0x0050, r24
	while(!(OSC.STATUS & OSC_RC32MRDY_bm));
    491c:	e0 e5       	ldi	r30, 0x50	; 80
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	81 81       	ldd	r24, Z+1	; 0x01
    4922:	81 ff       	sbrs	r24, 1
    4924:	fd cf       	rjmp	.-6      	; 0x4920 <Config32MHzClock+0xe>
	CCP = CCP_IOREG_gc;
    4926:	88 ed       	ldi	r24, 0xD8	; 216
    4928:	84 bf       	out	0x34, r24	; 52
	CLK.CTRL = 0x01;
    492a:	e0 e4       	ldi	r30, 0x40	; 64
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	80 83       	st	Z, r24
	
	// Set up real-time clock
	CLK.RTCCTRL = CLK_RTCSRC_RCOSC_gc | CLK_RTCEN_bm;	// per Dustin: RTCSRC is a 1 kHz oscillator, needs to be verified
    4932:	85 e0       	ldi	r24, 0x05	; 5
    4934:	83 83       	std	Z+3, r24	; 0x03
	//RTC.INTCTRL = RTC_OVFINTLVL_LO_gc;
	while (RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    4936:	e0 e0       	ldi	r30, 0x00	; 0
    4938:	f4 e0       	ldi	r31, 0x04	; 4
    493a:	81 81       	ldd	r24, Z+1	; 0x01
    493c:	80 fd       	sbrc	r24, 0
    493e:	fd cf       	rjmp	.-6      	; 0x493a <Config32MHzClock+0x28>
	
	RTC.PER = 0xFFFF;		//	0xFFFF == 0b1111111111111111 = (2^16)-1
    4940:	e0 e0       	ldi	r30, 0x00	; 0
    4942:	f4 e0       	ldi	r31, 0x04	; 4
    4944:	8f ef       	ldi	r24, 0xFF	; 255
    4946:	9f ef       	ldi	r25, 0xFF	; 255
    4948:	82 87       	std	Z+10, r24	; 0x0a
    494a:	93 87       	std	Z+11, r25	; 0x0b
	// (2^16)-1 milliseconds is 65.535 seconds

	RTC.CTRL = RTC_PRESCALER_DIV1_gc;
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	80 83       	st	Z, r24

	// reset RTC to 0, important for after a reboot:
	while(RTC.STATUS & RTC_SYNCBUSY_bm);	// wait for SYNCBUSY to clear
    4950:	81 81       	ldd	r24, Z+1	; 0x01
    4952:	80 fd       	sbrc	r24, 0
    4954:	fd cf       	rjmp	.-6      	; 0x4950 <Config32MHzClock+0x3e>
	
	RTC.CNT = 0;
    4956:	e0 e0       	ldi	r30, 0x00	; 0
    4958:	f4 e0       	ldi	r31, 0x04	; 4
    495a:	10 86       	std	Z+8, r1	; 0x08
    495c:	11 86       	std	Z+9, r1	; 0x09
    495e:	08 95       	ret

00004960 <delay_ms>:
}

// Delay ms milliseconds
// (the built-in _delay_ms only takes constant arguments, not variables)
void delay_ms(uint16_t ms)
{
    4960:	cf 92       	push	r12
    4962:	df 92       	push	r13
    4964:	ef 92       	push	r14
    4966:	ff 92       	push	r15
    4968:	7c 01       	movw	r14, r24
	uint32_t cur_time, end_time;
	cli(); cur_time = get_time(); sei();
    496a:	f8 94       	cli
    496c:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4970:	78 94       	sei
	end_time = cur_time + ms;
    4972:	9b 01       	movw	r18, r22
    4974:	ac 01       	movw	r20, r24
    4976:	2e 0d       	add	r18, r14
    4978:	3f 1d       	adc	r19, r15
    497a:	41 1d       	adc	r20, r1
    497c:	51 1d       	adc	r21, r1
    497e:	69 01       	movw	r12, r18
    4980:	7a 01       	movw	r14, r20
	while (1)
	{
		cli();
    4982:	f8 94       	cli
		if (get_time() >= end_time)
    4984:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4988:	6c 15       	cp	r22, r12
    498a:	7d 05       	cpc	r23, r13
    498c:	8e 05       	cpc	r24, r14
    498e:	9f 05       	cpc	r25, r15
    4990:	10 f0       	brcs	.+4      	; 0x4996 <delay_ms+0x36>
		{
			sei();
    4992:	78 94       	sei
    4994:	06 c0       	rjmp	.+12     	; 0x49a2 <delay_ms+0x42>
			return;
		}
		sei();
    4996:	78 94       	sei
    4998:	3a e6       	ldi	r19, 0x6A	; 106
    499a:	3a 95       	dec	r19
    499c:	f1 f7       	brne	.-4      	; 0x499a <delay_ms+0x3a>
    499e:	00 c0       	rjmp	.+0      	; 0x49a0 <delay_ms+0x40>
    49a0:	f0 cf       	rjmp	.-32     	; 0x4982 <delay_ms+0x22>
		delay_us(10);
	}
}
    49a2:	ff 90       	pop	r15
    49a4:	ef 90       	pop	r14
    49a6:	df 90       	pop	r13
    49a8:	cf 90       	pop	r12
    49aa:	08 95       	ret

000049ac <schedule_task>:
// Adds a new task to the task queue
// time is number of milliseconds until function is executed
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
    49ac:	2f 92       	push	r2
    49ae:	3f 92       	push	r3
    49b0:	4f 92       	push	r4
    49b2:	5f 92       	push	r5
    49b4:	6f 92       	push	r6
    49b6:	7f 92       	push	r7
    49b8:	8f 92       	push	r8
    49ba:	9f 92       	push	r9
    49bc:	af 92       	push	r10
    49be:	bf 92       	push	r11
    49c0:	cf 92       	push	r12
    49c2:	df 92       	push	r13
    49c4:	ef 92       	push	r14
    49c6:	ff 92       	push	r15
    49c8:	0f 93       	push	r16
    49ca:	1f 93       	push	r17
    49cc:	cf 93       	push	r28
    49ce:	df 93       	push	r29
    49d0:	cd b7       	in	r28, 0x3d	; 61
    49d2:	de b7       	in	r29, 0x3e	; 62
    49d4:	25 97       	sbiw	r28, 0x05	; 5
    49d6:	cd bf       	out	0x3d, r28	; 61
    49d8:	de bf       	out	0x3e, r29	; 62
    49da:	69 83       	std	Y+1, r22	; 0x01
    49dc:	7a 83       	std	Y+2, r23	; 0x02
    49de:	8b 83       	std	Y+3, r24	; 0x03
    49e0:	9c 83       	std	Y+4, r25	; 0x04
    49e2:	6a 01       	movw	r12, r20
    49e4:	89 01       	movw	r16, r18
Task_t task_storage_arr[MAX_NUM_SCHEDULED_TASKS];
uint8_t curr_pointer;

inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
    49e6:	80 91 cc 2a 	lds	r24, 0x2ACC
    49ea:	8a 30       	cpi	r24, 0x0A	; 10
    49ec:	08 f0       	brcs	.+2      	; 0x49f0 <schedule_task+0x44>
    49ee:	3e c1       	rjmp	.+636    	; 0x4c6c <schedule_task+0x2c0>
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    49f0:	40 91 36 2d 	lds	r20, 0x2D36
    49f4:	84 2f       	mov	r24, r20
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	01 96       	adiw	r24, 0x01	; 1
    49fa:	6a e0       	ldi	r22, 0x0A	; 10
    49fc:	70 e0       	ldi	r23, 0x00	; 0
    49fe:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
    4a02:	58 2f       	mov	r21, r24
    4a04:	48 17       	cp	r20, r24
    4a06:	91 f1       	breq	.+100    	; 0x4a6c <schedule_task+0xc0>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
    4a08:	99 27       	eor	r25, r25
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	ee 0f       	add	r30, r30
    4a0e:	ff 1f       	adc	r31, r31
    4a10:	9c 01       	movw	r18, r24
    4a12:	22 0f       	add	r18, r18
    4a14:	33 1f       	adc	r19, r19
    4a16:	22 0f       	add	r18, r18
    4a18:	33 1f       	adc	r19, r19
    4a1a:	22 0f       	add	r18, r18
    4a1c:	33 1f       	adc	r19, r19
    4a1e:	e2 0f       	add	r30, r18
    4a20:	f3 1f       	adc	r31, r19
    4a22:	e9 5c       	subi	r30, 0xC9	; 201
    4a24:	f2 4d       	sbci	r31, 0xD2	; 210
    4a26:	24 81       	ldd	r18, Z+4	; 0x04
    4a28:	35 81       	ldd	r19, Z+5	; 0x05
    4a2a:	23 2b       	or	r18, r19
    4a2c:	f9 f0       	breq	.+62     	; 0x4a6c <schedule_task+0xc0>
inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    4a2e:	ea e0       	ldi	r30, 0x0A	; 10
    4a30:	f0 e0       	ldi	r31, 0x00	; 0
    4a32:	15 c0       	rjmp	.+42     	; 0x4a5e <schedule_task+0xb2>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
    4a34:	99 27       	eor	r25, r25
    4a36:	dc 01       	movw	r26, r24
    4a38:	aa 0f       	add	r26, r26
    4a3a:	bb 1f       	adc	r27, r27
    4a3c:	9c 01       	movw	r18, r24
    4a3e:	22 0f       	add	r18, r18
    4a40:	33 1f       	adc	r19, r19
    4a42:	22 0f       	add	r18, r18
    4a44:	33 1f       	adc	r19, r19
    4a46:	22 0f       	add	r18, r18
    4a48:	33 1f       	adc	r19, r19
    4a4a:	a2 0f       	add	r26, r18
    4a4c:	b3 1f       	adc	r27, r19
    4a4e:	a9 5c       	subi	r26, 0xC9	; 201
    4a50:	b2 4d       	sbci	r27, 0xD2	; 210
    4a52:	14 96       	adiw	r26, 0x04	; 4
    4a54:	2d 91       	ld	r18, X+
    4a56:	3c 91       	ld	r19, X
    4a58:	15 97       	sbiw	r26, 0x05	; 5
    4a5a:	23 2b       	or	r18, r19
    4a5c:	39 f0       	breq	.+14     	; 0x4a6c <schedule_task+0xc0>
inline Task_t* scheduler_malloc()
{
	if(num_tasks>=MAX_NUM_SCHEDULED_TASKS) return NULL;
	
	uint8_t tmp;
	for(tmp=(curr_pointer+1)%MAX_NUM_SCHEDULED_TASKS ; tmp!=curr_pointer ; tmp=(tmp+1)%MAX_NUM_SCHEDULED_TASKS)
    4a5e:	01 96       	adiw	r24, 0x01	; 1
    4a60:	bf 01       	movw	r22, r30
    4a62:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
    4a66:	58 2f       	mov	r21, r24
    4a68:	48 13       	cpse	r20, r24
    4a6a:	e4 cf       	rjmp	.-56     	; 0x4a34 <schedule_task+0x88>
	{
		//This code assumes that all tasks will have non-null function pointers.
		if(task_storage_arr[tmp].task_function == NULL) break;
	}
	curr_pointer = tmp;
    4a6c:	50 93 36 2d 	sts	0x2D36, r21
	return &(task_storage_arr[curr_pointer]);
    4a70:	85 2f       	mov	r24, r21
    4a72:	90 e0       	ldi	r25, 0x00	; 0
    4a74:	7c 01       	movw	r14, r24
    4a76:	ee 0c       	add	r14, r14
    4a78:	ff 1c       	adc	r15, r15
    4a7a:	88 0f       	add	r24, r24
    4a7c:	99 1f       	adc	r25, r25
    4a7e:	88 0f       	add	r24, r24
    4a80:	99 1f       	adc	r25, r25
    4a82:	88 0f       	add	r24, r24
    4a84:	99 1f       	adc	r25, r25
    4a86:	8e 0d       	add	r24, r14
    4a88:	9f 1d       	adc	r25, r15
    4a8a:	9c 01       	movw	r18, r24
    4a8c:	29 5c       	subi	r18, 0xC9	; 201
    4a8e:	32 4d       	sbci	r19, 0xD2	; 210
    4a90:	79 01       	movw	r14, r18
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
    4a92:	21 15       	cp	r18, r1
    4a94:	31 05       	cpc	r19, r1
    4a96:	09 f4       	brne	.+2      	; 0x4a9a <schedule_task+0xee>
    4a98:	eb c0       	rjmp	.+470    	; 0x4c70 <schedule_task+0x2c4>
	
	new_task->scheduled_time = time + get_time();
    4a9a:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4a9e:	89 80       	ldd	r8, Y+1	; 0x01
    4aa0:	9a 80       	ldd	r9, Y+2	; 0x02
    4aa2:	ab 80       	ldd	r10, Y+3	; 0x03
    4aa4:	bc 80       	ldd	r11, Y+4	; 0x04
    4aa6:	dc 01       	movw	r26, r24
    4aa8:	cb 01       	movw	r24, r22
    4aaa:	88 0d       	add	r24, r8
    4aac:	99 1d       	adc	r25, r9
    4aae:	aa 1d       	adc	r26, r10
    4ab0:	bb 1d       	adc	r27, r11
	if ((uint16_t)(new_task->scheduled_time) < 2) new_task->scheduled_time += 4;
    4ab2:	82 30       	cpi	r24, 0x02	; 2
    4ab4:	91 05       	cpc	r25, r1
    4ab6:	30 f0       	brcs	.+12     	; 0x4ac4 <schedule_task+0x118>
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
	
	new_task->scheduled_time = time + get_time();
    4ab8:	f7 01       	movw	r30, r14
    4aba:	80 83       	st	Z, r24
    4abc:	91 83       	std	Z+1, r25	; 0x01
    4abe:	a2 83       	std	Z+2, r26	; 0x02
    4ac0:	b3 83       	std	Z+3, r27	; 0x03
    4ac2:	08 c0       	rjmp	.+16     	; 0x4ad4 <schedule_task+0x128>
	if ((uint16_t)(new_task->scheduled_time) < 2) new_task->scheduled_time += 4;
    4ac4:	04 96       	adiw	r24, 0x04	; 4
    4ac6:	a1 1d       	adc	r26, r1
    4ac8:	b1 1d       	adc	r27, r1
    4aca:	f7 01       	movw	r30, r14
    4acc:	80 83       	st	Z, r24
    4ace:	91 83       	std	Z+1, r25	; 0x01
    4ad0:	a2 83       	std	Z+2, r26	; 0x02
    4ad2:	b3 83       	std	Z+3, r27	; 0x03
	new_task->arg = arg;
    4ad4:	d7 01       	movw	r26, r14
    4ad6:	16 96       	adiw	r26, 0x06	; 6
    4ad8:	0d 93       	st	X+, r16
    4ada:	1c 93       	st	X, r17
    4adc:	17 97       	sbiw	r26, 0x07	; 7
	new_task->task_function = function;
    4ade:	14 96       	adiw	r26, 0x04	; 4
    4ae0:	cd 92       	st	X+, r12
    4ae2:	dc 92       	st	X, r13
    4ae4:	15 97       	sbiw	r26, 0x05	; 5
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    4ae6:	e0 e4       	ldi	r30, 0x40	; 64
    4ae8:	fa e0       	ldi	r31, 0x0A	; 10
    4aea:	c2 ac       	ldd	r12, Z+58	; 0x3a
    4aec:	d3 ac       	ldd	r13, Z+59	; 0x3b
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    4aee:	a0 ac       	ldd	r10, Z+56	; 0x38
    4af0:	b1 ac       	ldd	r11, Z+57	; 0x39
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    4af2:	e0 e4       	ldi	r30, 0x40	; 64
    4af4:	f9 e0       	ldi	r31, 0x09	; 9
    4af6:	80 ac       	ldd	r8, Z+56	; 0x38
    4af8:	91 ac       	ldd	r9, Z+57	; 0x39
	uint8_t r=get_red_led(), g=get_green_led(), b=get_blue_led();
	
	// Turn off interrupts so we don't muck up the task list during this function
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4afa:	bf b7       	in	r27, 0x3f	; 63
    4afc:	bd 83       	std	Y+5, r27	; 0x05
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4afe:	f8 94       	cli
	{
		set_rgb(255,50,0);		
    4b00:	40 e0       	ldi	r20, 0x00	; 0
    4b02:	62 e3       	ldi	r22, 0x32	; 50
    4b04:	8f ef       	ldi	r24, 0xFF	; 255
    4b06:	95 db       	rcall	.-2262   	; 0x4232 <set_rgb>
		// Find the new task's proper spot in the list of tasks
		// task_list is a linked list sorted by scheduled_time, smallest first
		new_task->next = task_list;
    4b08:	20 91 5f 2c 	lds	r18, 0x2C5F
    4b0c:	30 91 60 2c 	lds	r19, 0x2C60
    4b10:	f7 01       	movw	r30, r14
    4b12:	20 87       	std	Z+8, r18	; 0x08
    4b14:	31 87       	std	Z+9, r19	; 0x09
		//printf("schedule_task atomic_block start\r\n");
		//printf("New Task %p (%p) scheduled at %lu, %lu current\r\n", new_task, new_task->task_function, new_task->scheduled_time, get_time());
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || new_task->scheduled_time <= task_list->scheduled_time)
    4b16:	21 15       	cp	r18, r1
    4b18:	31 05       	cpc	r19, r1
    4b1a:	09 f1       	breq	.+66     	; 0x4b5e <schedule_task+0x1b2>
    4b1c:	80 81       	ld	r24, Z
    4b1e:	91 81       	ldd	r25, Z+1	; 0x01
    4b20:	a2 81       	ldd	r26, Z+2	; 0x02
    4b22:	b3 81       	ldd	r27, Z+3	; 0x03
    4b24:	f9 01       	movw	r30, r18
    4b26:	40 81       	ld	r20, Z
    4b28:	51 81       	ldd	r21, Z+1	; 0x01
    4b2a:	62 81       	ldd	r22, Z+2	; 0x02
    4b2c:	73 81       	ldd	r23, Z+3	; 0x03
    4b2e:	48 17       	cp	r20, r24
    4b30:	59 07       	cpc	r21, r25
    4b32:	6a 07       	cpc	r22, r26
    4b34:	7b 07       	cpc	r23, r27
    4b36:	98 f4       	brcc	.+38     	; 0x4b5e <schedule_task+0x1b2>
		{
			Task_t* tmp_task_ptr = task_list;
			//printf("\tNew task not next.\r\n");
			//print_task_queue();
			//printf("\tWhile loop:\r\n");
			while (tmp_task_ptr->next != NULL && new_task->scheduled_time > tmp_task_ptr->next->scheduled_time)
    4b38:	00 85       	ldd	r16, Z+8	; 0x08
    4b3a:	11 85       	ldd	r17, Z+9	; 0x09
    4b3c:	01 15       	cp	r16, r1
    4b3e:	11 05       	cpc	r17, r1
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <schedule_task+0x198>
    4b42:	7e c0       	rjmp	.+252    	; 0x4c40 <schedule_task+0x294>
    4b44:	f8 01       	movw	r30, r16
    4b46:	40 81       	ld	r20, Z
    4b48:	51 81       	ldd	r21, Z+1	; 0x01
    4b4a:	62 81       	ldd	r22, Z+2	; 0x02
    4b4c:	73 81       	ldd	r23, Z+3	; 0x03
    4b4e:	48 17       	cp	r20, r24
    4b50:	59 07       	cpc	r21, r25
    4b52:	6a 07       	cpc	r22, r26
    4b54:	7b 07       	cpc	r23, r27
    4b56:	a8 f1       	brcs	.+106    	; 0x4bc2 <schedule_task+0x216>
    4b58:	d8 01       	movw	r26, r16
    4b5a:	89 01       	movw	r16, r18
    4b5c:	73 c0       	rjmp	.+230    	; 0x4c44 <schedule_task+0x298>
		// If the new task is the next to be executed, put it at the front of the list
		if (task_list == NULL || new_task->scheduled_time <= task_list->scheduled_time)
		{
			//printf("\tNew task is next. \r\n");
			//print_task_queue();
			task_list = new_task;
    4b5e:	e0 92 5f 2c 	sts	0x2C5F, r14
    4b62:	f0 92 60 2c 	sts	0x2C60, r15
			// If scheduled_time is in the current epoch, set the RTC compare interrupt
			if (new_task->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4b66:	f7 01       	movw	r30, r14
    4b68:	80 81       	ld	r24, Z
    4b6a:	91 81       	ldd	r25, Z+1	; 0x01
    4b6c:	a2 81       	ldd	r26, Z+2	; 0x02
    4b6e:	b3 81       	ldd	r27, Z+3	; 0x03
    4b70:	40 91 f1 29 	lds	r20, 0x29F1
    4b74:	50 91 f2 29 	lds	r21, 0x29F2
    4b78:	e0 e0       	ldi	r30, 0x00	; 0
    4b7a:	f4 e0       	ldi	r31, 0x04	; 4
    4b7c:	02 85       	ldd	r16, Z+10	; 0x0a
    4b7e:	13 85       	ldd	r17, Z+11	; 0x0b
    4b80:	60 e0       	ldi	r22, 0x00	; 0
    4b82:	70 e0       	ldi	r23, 0x00	; 0
    4b84:	ba 01       	movw	r22, r20
    4b86:	55 27       	eor	r21, r21
    4b88:	44 27       	eor	r20, r20
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	40 2b       	or	r20, r16
    4b90:	51 2b       	or	r21, r17
    4b92:	62 2b       	or	r22, r18
    4b94:	73 2b       	or	r23, r19
    4b96:	48 17       	cp	r20, r24
    4b98:	59 07       	cpc	r21, r25
    4b9a:	6a 07       	cpc	r22, r26
    4b9c:	7b 07       	cpc	r23, r27
    4b9e:	58 f0       	brcs	.+22     	; 0x4bb6 <schedule_task+0x20a>
			{
				while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4ba0:	21 81       	ldd	r18, Z+1	; 0x01
    4ba2:	20 fd       	sbrc	r18, 0
    4ba4:	fd cf       	rjmp	.-6      	; 0x4ba0 <schedule_task+0x1f4>
				RTC.COMP = (uint16_t)(new_task->scheduled_time);
    4ba6:	e0 e0       	ldi	r30, 0x00	; 0
    4ba8:	f4 e0       	ldi	r31, 0x04	; 4
    4baa:	84 87       	std	Z+12, r24	; 0x0c
    4bac:	95 87       	std	Z+13, r25	; 0x0d
				RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    4bae:	82 81       	ldd	r24, Z+2	; 0x02
    4bb0:	84 60       	ori	r24, 0x04	; 4
    4bb2:	82 83       	std	Z+2, r24	; 0x02
    4bb4:	4f c0       	rjmp	.+158    	; 0x4c54 <schedule_task+0x2a8>
			}
			else
			{
				RTC.INTCTRL &= ~RTC_COMPINTLVL_LO_gc;
    4bb6:	e0 e0       	ldi	r30, 0x00	; 0
    4bb8:	f4 e0       	ldi	r31, 0x04	; 4
    4bba:	82 81       	ldd	r24, Z+2	; 0x02
    4bbc:	8b 7f       	andi	r24, 0xFB	; 251
    4bbe:	82 83       	std	Z+2, r24	; 0x02
    4bc0:	49 c0       	rjmp	.+146    	; 0x4c54 <schedule_task+0x2a8>
			//print_task_queue();
			//printf("\tWhile loop:\r\n");
			while (tmp_task_ptr->next != NULL && new_task->scheduled_time > tmp_task_ptr->next->scheduled_time)
			{
				tmp_task_ptr = tmp_task_ptr->next;
				printf("\t\tIn while loop. tmp_task_ptr: %p (%p) scheduled at %lu, %lu current. Next: %p\r\n", tmp_task_ptr, tmp_task_ptr->task_function, tmp_task_ptr->scheduled_time, get_time(), tmp_task_ptr->next);
    4bc2:	0f 2e       	mov	r0, r31
    4bc4:	fa e5       	ldi	r31, 0x5A	; 90
    4bc6:	6f 2e       	mov	r6, r31
    4bc8:	f3 e2       	ldi	r31, 0x23	; 35
    4bca:	7f 2e       	mov	r7, r31
    4bcc:	f0 2d       	mov	r31, r0
    4bce:	d8 01       	movw	r26, r16
    4bd0:	18 96       	adiw	r26, 0x08	; 8
    4bd2:	4c 90       	ld	r4, X
    4bd4:	18 97       	sbiw	r26, 0x08	; 8
    4bd6:	19 96       	adiw	r26, 0x09	; 9
    4bd8:	3c 90       	ld	r3, X
    4bda:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4bde:	3f 92       	push	r3
    4be0:	4f 92       	push	r4
    4be2:	9f 93       	push	r25
    4be4:	8f 93       	push	r24
    4be6:	7f 93       	push	r23
    4be8:	6f 93       	push	r22
    4bea:	f8 01       	movw	r30, r16
    4bec:	83 81       	ldd	r24, Z+3	; 0x03
    4bee:	8f 93       	push	r24
    4bf0:	82 81       	ldd	r24, Z+2	; 0x02
    4bf2:	8f 93       	push	r24
    4bf4:	81 81       	ldd	r24, Z+1	; 0x01
    4bf6:	8f 93       	push	r24
    4bf8:	80 81       	ld	r24, Z
    4bfa:	8f 93       	push	r24
    4bfc:	85 81       	ldd	r24, Z+5	; 0x05
    4bfe:	8f 93       	push	r24
    4c00:	84 81       	ldd	r24, Z+4	; 0x04
    4c02:	8f 93       	push	r24
    4c04:	1f 93       	push	r17
    4c06:	0f 93       	push	r16
    4c08:	7f 92       	push	r7
    4c0a:	6f 92       	push	r6
    4c0c:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
		{
			Task_t* tmp_task_ptr = task_list;
			//printf("\tNew task not next.\r\n");
			//print_task_queue();
			//printf("\tWhile loop:\r\n");
			while (tmp_task_ptr->next != NULL && new_task->scheduled_time > tmp_task_ptr->next->scheduled_time)
    4c10:	f8 01       	movw	r30, r16
    4c12:	a0 85       	ldd	r26, Z+8	; 0x08
    4c14:	b1 85       	ldd	r27, Z+9	; 0x09
    4c16:	cd bf       	out	0x3d, r28	; 61
    4c18:	de bf       	out	0x3e, r29	; 62
    4c1a:	10 97       	sbiw	r26, 0x00	; 0
    4c1c:	99 f0       	breq	.+38     	; 0x4c44 <schedule_task+0x298>
    4c1e:	f7 01       	movw	r30, r14
    4c20:	20 80       	ld	r2, Z
    4c22:	31 80       	ldd	r3, Z+1	; 0x01
    4c24:	42 80       	ldd	r4, Z+2	; 0x02
    4c26:	53 80       	ldd	r5, Z+3	; 0x03
    4c28:	4d 91       	ld	r20, X+
    4c2a:	5d 91       	ld	r21, X+
    4c2c:	6d 91       	ld	r22, X+
    4c2e:	7c 91       	ld	r23, X
    4c30:	13 97       	sbiw	r26, 0x03	; 3
    4c32:	42 15       	cp	r20, r2
    4c34:	53 05       	cpc	r21, r3
    4c36:	64 05       	cpc	r22, r4
    4c38:	75 05       	cpc	r23, r5
    4c3a:	20 f4       	brcc	.+8      	; 0x4c44 <schedule_task+0x298>
    4c3c:	8d 01       	movw	r16, r26
    4c3e:	c7 cf       	rjmp	.-114    	; 0x4bce <schedule_task+0x222>
    4c40:	d8 01       	movw	r26, r16
    4c42:	89 01       	movw	r16, r18
			{
				tmp_task_ptr = tmp_task_ptr->next;
				printf("\t\tIn while loop. tmp_task_ptr: %p (%p) scheduled at %lu, %lu current. Next: %p\r\n", tmp_task_ptr, tmp_task_ptr->task_function, tmp_task_ptr->scheduled_time, get_time(), tmp_task_ptr->next);
			}
			new_task->next = tmp_task_ptr->next;
    4c44:	f7 01       	movw	r30, r14
    4c46:	a0 87       	std	Z+8, r26	; 0x08
    4c48:	b1 87       	std	Z+9, r27	; 0x09
			tmp_task_ptr->next = new_task;
    4c4a:	d8 01       	movw	r26, r16
    4c4c:	18 96       	adiw	r26, 0x08	; 8
    4c4e:	ed 92       	st	X+, r14
    4c50:	fc 92       	st	X, r15
    4c52:	19 97       	sbiw	r26, 0x09	; 9
		}


		num_tasks++;
    4c54:	80 91 cc 2a 	lds	r24, 0x2ACC
    4c58:	8f 5f       	subi	r24, 0xFF	; 255
    4c5a:	80 93 cc 2a 	sts	0x2ACC, r24
		set_rgb(r,g,b);
    4c5e:	48 2d       	mov	r20, r8
    4c60:	6a 2d       	mov	r22, r10
    4c62:	8c 2d       	mov	r24, r12
    4c64:	e6 da       	rcall	.-2612   	; 0x4232 <set_rgb>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4c66:	bd 81       	ldd	r27, Y+5	; 0x05
    4c68:	bf bf       	out	0x3f, r27	; 63
	}

	return new_task;
    4c6a:	02 c0       	rjmp	.+4      	; 0x4c70 <schedule_task+0x2c4>
// function is a function pointer to execute
// arg is the argument to supply to function
Task_t* schedule_task(volatile uint32_t time, void (*function)(void*), void* arg)
{
	Task_t* new_task = (Task_t*)scheduler_malloc();
	if (new_task == NULL) return NULL;
    4c6c:	e1 2c       	mov	r14, r1
    4c6e:	f1 2c       	mov	r15, r1
		num_tasks++;
		set_rgb(r,g,b);
	}

	return new_task;
}
    4c70:	c7 01       	movw	r24, r14
    4c72:	25 96       	adiw	r28, 0x05	; 5
    4c74:	cd bf       	out	0x3d, r28	; 61
    4c76:	de bf       	out	0x3e, r29	; 62
    4c78:	df 91       	pop	r29
    4c7a:	cf 91       	pop	r28
    4c7c:	1f 91       	pop	r17
    4c7e:	0f 91       	pop	r16
    4c80:	ff 90       	pop	r15
    4c82:	ef 90       	pop	r14
    4c84:	df 90       	pop	r13
    4c86:	cf 90       	pop	r12
    4c88:	bf 90       	pop	r11
    4c8a:	af 90       	pop	r10
    4c8c:	9f 90       	pop	r9
    4c8e:	8f 90       	pop	r8
    4c90:	7f 90       	pop	r7
    4c92:	6f 90       	pop	r6
    4c94:	5f 90       	pop	r5
    4c96:	4f 90       	pop	r4
    4c98:	3f 90       	pop	r3
    4c9a:	2f 90       	pop	r2
    4c9c:	08 95       	ret

00004c9e <remove_task>:

// Remove a task from the task queue
void remove_task(Task_t* task)
{
    4c9e:	1f 93       	push	r17
    4ca0:	cf 93       	push	r28
    4ca2:	df 93       	push	r29
    4ca4:	fc 01       	movw	r30, r24
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
    4ca6:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4ca8:	f8 94       	cli
	{
		if(task_list==NULL) return;
    4caa:	a0 91 5f 2c 	lds	r26, 0x2C5F
    4cae:	b0 91 60 2c 	lds	r27, 0x2C60
    4cb2:	10 97       	sbiw	r26, 0x00	; 0
    4cb4:	09 f4       	brne	.+2      	; 0x4cb8 <remove_task+0x1a>
    4cb6:	b1 c0       	rjmp	.+354    	; 0x4e1a <remove_task+0x17c>
		if(task_list==task)
    4cb8:	8a 17       	cp	r24, r26
    4cba:	9b 07       	cpc	r25, r27
    4cbc:	09 f0       	breq	.+2      	; 0x4cc0 <remove_task+0x22>
    4cbe:	50 c0       	rjmp	.+160    	; 0x4d60 <remove_task+0xc2>
		{
			task_list=task->next;
    4cc0:	80 85       	ldd	r24, Z+8	; 0x08
    4cc2:	91 85       	ldd	r25, Z+9	; 0x09
    4cc4:	80 93 5f 2c 	sts	0x2C5F, r24
    4cc8:	90 93 60 2c 	sts	0x2C60, r25

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4ccc:	80 91 36 2d 	lds	r24, 0x2D36
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	ac 01       	movw	r20, r24
    4cd4:	44 0f       	add	r20, r20
    4cd6:	55 1f       	adc	r21, r21
    4cd8:	9c 01       	movw	r18, r24
    4cda:	22 0f       	add	r18, r18
    4cdc:	33 1f       	adc	r19, r19
    4cde:	22 0f       	add	r18, r18
    4ce0:	33 1f       	adc	r19, r19
    4ce2:	22 0f       	add	r18, r18
    4ce4:	33 1f       	adc	r19, r19
    4ce6:	24 0f       	add	r18, r20
    4ce8:	35 1f       	adc	r19, r21
    4cea:	29 5c       	subi	r18, 0xC9	; 201
    4cec:	32 4d       	sbci	r19, 0xD2	; 210
    4cee:	e2 17       	cp	r30, r18
    4cf0:	f3 07       	cpc	r31, r19
    4cf2:	e9 f4       	brne	.+58     	; 0x4d2e <remove_task+0x90>
		{
			task_storage_arr[tmp].task_function = NULL;
    4cf4:	fc 01       	movw	r30, r24
    4cf6:	ee 0f       	add	r30, r30
    4cf8:	ff 1f       	adc	r31, r31
    4cfa:	9c 01       	movw	r18, r24
    4cfc:	22 0f       	add	r18, r18
    4cfe:	33 1f       	adc	r19, r19
    4d00:	22 0f       	add	r18, r18
    4d02:	33 1f       	adc	r19, r19
    4d04:	22 0f       	add	r18, r18
    4d06:	33 1f       	adc	r19, r19
    4d08:	e2 0f       	add	r30, r18
    4d0a:	f3 1f       	adc	r31, r19
    4d0c:	e9 5c       	subi	r30, 0xC9	; 201
    4d0e:	f2 4d       	sbci	r31, 0xD2	; 210
    4d10:	14 82       	std	Z+4, r1	; 0x04
    4d12:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4d14:	09 96       	adiw	r24, 0x09	; 9
    4d16:	6a e0       	ldi	r22, 0x0A	; 10
    4d18:	70 e0       	ldi	r23, 0x00	; 0
    4d1a:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
    4d1e:	80 93 36 2d 	sts	0x2D36, r24
		if(task_list==task)
		{
			task_list=task->next;
			scheduler_free(task);
			task = NULL;
			num_tasks--;
    4d22:	80 91 cc 2a 	lds	r24, 0x2ACC
    4d26:	81 50       	subi	r24, 0x01	; 1
    4d28:	80 93 cc 2a 	sts	0x2ACC, r24
    4d2c:	78 c0       	rjmp	.+240    	; 0x4e1e <remove_task+0x180>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4d2e:	ca e0       	ldi	r28, 0x0A	; 10
    4d30:	d0 e0       	ldi	r29, 0x00	; 0
    4d32:	09 96       	adiw	r24, 0x09	; 9
    4d34:	be 01       	movw	r22, r28
    4d36:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4d3a:	99 27       	eor	r25, r25
    4d3c:	ac 01       	movw	r20, r24
    4d3e:	44 0f       	add	r20, r20
    4d40:	55 1f       	adc	r21, r21
    4d42:	9c 01       	movw	r18, r24
    4d44:	22 0f       	add	r18, r18
    4d46:	33 1f       	adc	r19, r19
    4d48:	22 0f       	add	r18, r18
    4d4a:	33 1f       	adc	r19, r19
    4d4c:	22 0f       	add	r18, r18
    4d4e:	33 1f       	adc	r19, r19
    4d50:	24 0f       	add	r18, r20
    4d52:	35 1f       	adc	r19, r21
    4d54:	29 5c       	subi	r18, 0xC9	; 201
    4d56:	32 4d       	sbci	r19, 0xD2	; 210
    4d58:	e2 17       	cp	r30, r18
    4d5a:	f3 07       	cpc	r31, r19
    4d5c:	51 f7       	brne	.-44     	; 0x4d32 <remove_task+0x94>
    4d5e:	ca cf       	rjmp	.-108    	; 0x4cf4 <remove_task+0x56>
			num_tasks--;
		}
		else
		{
			Task_t* tmp_task = task_list;
			while (tmp_task->next != NULL && tmp_task->next != task) tmp_task = tmp_task->next;
    4d60:	18 96       	adiw	r26, 0x08	; 8
    4d62:	2d 91       	ld	r18, X+
    4d64:	3c 91       	ld	r19, X
    4d66:	19 97       	sbiw	r26, 0x09	; 9
    4d68:	21 15       	cp	r18, r1
    4d6a:	31 05       	cpc	r19, r1
    4d6c:	09 f4       	brne	.+2      	; 0x4d70 <remove_task+0xd2>
    4d6e:	57 c0       	rjmp	.+174    	; 0x4e1e <remove_task+0x180>
    4d70:	e2 17       	cp	r30, r18
    4d72:	f3 07       	cpc	r31, r19
    4d74:	11 f0       	breq	.+4      	; 0x4d7a <remove_task+0xdc>
    4d76:	d9 01       	movw	r26, r18
    4d78:	f3 cf       	rjmp	.-26     	; 0x4d60 <remove_task+0xc2>
			if (tmp_task->next != NULL)
			{
				tmp_task->next = task->next;
    4d7a:	80 85       	ldd	r24, Z+8	; 0x08
    4d7c:	91 85       	ldd	r25, Z+9	; 0x09
    4d7e:	18 96       	adiw	r26, 0x08	; 8
    4d80:	8d 93       	st	X+, r24
    4d82:	9c 93       	st	X, r25
    4d84:	19 97       	sbiw	r26, 0x09	; 9

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4d86:	80 91 36 2d 	lds	r24, 0x2D36
    4d8a:	90 e0       	ldi	r25, 0x00	; 0
    4d8c:	ac 01       	movw	r20, r24
    4d8e:	44 0f       	add	r20, r20
    4d90:	55 1f       	adc	r21, r21
    4d92:	9c 01       	movw	r18, r24
    4d94:	22 0f       	add	r18, r18
    4d96:	33 1f       	adc	r19, r19
    4d98:	22 0f       	add	r18, r18
    4d9a:	33 1f       	adc	r19, r19
    4d9c:	22 0f       	add	r18, r18
    4d9e:	33 1f       	adc	r19, r19
    4da0:	24 0f       	add	r18, r20
    4da2:	35 1f       	adc	r19, r21
    4da4:	29 5c       	subi	r18, 0xC9	; 201
    4da6:	32 4d       	sbci	r19, 0xD2	; 210
    4da8:	e2 17       	cp	r30, r18
    4daa:	f3 07       	cpc	r31, r19
    4dac:	e9 f4       	brne	.+58     	; 0x4de8 <remove_task+0x14a>
		{
			task_storage_arr[tmp].task_function = NULL;
    4dae:	fc 01       	movw	r30, r24
    4db0:	ee 0f       	add	r30, r30
    4db2:	ff 1f       	adc	r31, r31
    4db4:	9c 01       	movw	r18, r24
    4db6:	22 0f       	add	r18, r18
    4db8:	33 1f       	adc	r19, r19
    4dba:	22 0f       	add	r18, r18
    4dbc:	33 1f       	adc	r19, r19
    4dbe:	22 0f       	add	r18, r18
    4dc0:	33 1f       	adc	r19, r19
    4dc2:	e2 0f       	add	r30, r18
    4dc4:	f3 1f       	adc	r31, r19
    4dc6:	e9 5c       	subi	r30, 0xC9	; 201
    4dc8:	f2 4d       	sbci	r31, 0xD2	; 210
    4dca:	14 82       	std	Z+4, r1	; 0x04
    4dcc:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4dce:	09 96       	adiw	r24, 0x09	; 9
    4dd0:	6a e0       	ldi	r22, 0x0A	; 10
    4dd2:	70 e0       	ldi	r23, 0x00	; 0
    4dd4:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
    4dd8:	80 93 36 2d 	sts	0x2D36, r24
			if (tmp_task->next != NULL)
			{
				tmp_task->next = task->next;
				scheduler_free(task);
				task = NULL;
				num_tasks--;
    4ddc:	80 91 cc 2a 	lds	r24, 0x2ACC
    4de0:	81 50       	subi	r24, 0x01	; 1
    4de2:	80 93 cc 2a 	sts	0x2ACC, r24
    4de6:	1b c0       	rjmp	.+54     	; 0x4e1e <remove_task+0x180>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4de8:	ca e0       	ldi	r28, 0x0A	; 10
    4dea:	d0 e0       	ldi	r29, 0x00	; 0
    4dec:	09 96       	adiw	r24, 0x09	; 9
    4dee:	be 01       	movw	r22, r28
    4df0:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4df4:	99 27       	eor	r25, r25
    4df6:	ac 01       	movw	r20, r24
    4df8:	44 0f       	add	r20, r20
    4dfa:	55 1f       	adc	r21, r21
    4dfc:	9c 01       	movw	r18, r24
    4dfe:	22 0f       	add	r18, r18
    4e00:	33 1f       	adc	r19, r19
    4e02:	22 0f       	add	r18, r18
    4e04:	33 1f       	adc	r19, r19
    4e06:	22 0f       	add	r18, r18
    4e08:	33 1f       	adc	r19, r19
    4e0a:	24 0f       	add	r18, r20
    4e0c:	35 1f       	adc	r19, r21
    4e0e:	29 5c       	subi	r18, 0xC9	; 201
    4e10:	32 4d       	sbci	r19, 0xD2	; 210
    4e12:	e2 17       	cp	r30, r18
    4e14:	f3 07       	cpc	r31, r19
    4e16:	51 f7       	brne	.-44     	; 0x4dec <remove_task+0x14e>
    4e18:	ca cf       	rjmp	.-108    	; 0x4dae <remove_task+0x110>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4e1a:	1f bf       	out	0x3f, r17	; 63
    __asm__ volatile ("" ::: "memory");
    4e1c:	01 c0       	rjmp	.+2      	; 0x4e20 <remove_task+0x182>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4e1e:	1f bf       	out	0x3f, r17	; 63
			}
		}

	}

}
    4e20:	df 91       	pop	r29
    4e22:	cf 91       	pop	r28
    4e24:	1f 91       	pop	r17
    4e26:	08 95       	ret

00004e28 <print_task_queue>:

void print_task_queue()
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE)  // Disable interrupts during printing
    4e28:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4e2a:	f8 94       	cli
	{
		Task_t* cur_task = task_list;
    4e2c:	e0 91 5f 2c 	lds	r30, 0x2C5F
    4e30:	f0 91 60 2c 	lds	r31, 0x2C60
		
		//printf("\t\tTask Queue (%hhu tasks, %hhu executing):\r\n", num_tasks, num_executing_tasks);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    4e34:	30 97       	sbiw	r30, 0x00	; 0
    4e36:	29 f0       	breq	.+10     	; 0x4e42 <print_task_queue+0x1a>
		{
			//printf("\t\t\tTask %p (%p) scheduled at %lu, %lu current\r\n", cur_task, cur_task->task_function, cur_task->scheduled_time, get_time());
			cur_task = cur_task->next;
    4e38:	00 84       	ldd	r0, Z+8	; 0x08
    4e3a:	f1 85       	ldd	r31, Z+9	; 0x09
    4e3c:	e0 2d       	mov	r30, r0
		Task_t* cur_task = task_list;
		
		//printf("\t\tTask Queue (%hhu tasks, %hhu executing):\r\n", num_tasks, num_executing_tasks);
		
		// Iterate through the list of tasks, printing name, function, and scheduled time of each
		while (cur_task != NULL)
    4e3e:	30 97       	sbiw	r30, 0x00	; 0
    4e40:	d9 f7       	brne	.-10     	; 0x4e38 <print_task_queue+0x10>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4e42:	8f bf       	out	0x3f, r24	; 63
    __asm__ volatile ("" ::: "memory");
    4e44:	08 95       	ret

00004e46 <run_tasks>:

// TO BE CALLED FROM INTERRUPT HANDLER ONLY
// DO NOT CALL
void run_tasks()
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    4e46:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4e48:	f8 94       	cli
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4e4a:	e0 91 5f 2c 	lds	r30, 0x2C5F
    4e4e:	f0 91 60 2c 	lds	r31, 0x2C60
    4e52:	30 97       	sbiw	r30, 0x00	; 0
    4e54:	09 f0       	breq	.+2      	; 0x4e58 <run_tasks+0x12>
    4e56:	67 c0       	rjmp	.+206    	; 0x4f26 <run_tasks+0xe0>
    4e58:	a6 c0       	rjmp	.+332    	; 0x4fa6 <run_tasks+0x160>
		{
			Task_t* cur_task = task_list;
    4e5a:	e0 90 5f 2c 	lds	r14, 0x2C5F
    4e5e:	f0 90 60 2c 	lds	r15, 0x2C60
			task_list = cur_task->next;
    4e62:	d7 01       	movw	r26, r14
    4e64:	18 96       	adiw	r26, 0x08	; 8
    4e66:	8d 91       	ld	r24, X+
    4e68:	9c 91       	ld	r25, X
    4e6a:	19 97       	sbiw	r26, 0x09	; 9
    4e6c:	80 93 5f 2c 	sts	0x2C5F, r24
    4e70:	90 93 60 2c 	sts	0x2C60, r25

#if !defined(__DOXYGEN__)
/* Internal helper functions. */
static __inline__ uint8_t __iSeiRetVal(void)
{
    sei();
    4e74:	78 94       	sei
			NONATOMIC_BLOCK(NONATOMIC_FORCEOFF) // Enable interrupts during tasks
			{
				cur_task->task_function(cur_task->arg); // run the task
    4e76:	d7 01       	movw	r26, r14
    4e78:	14 96       	adiw	r26, 0x04	; 4
    4e7a:	ed 91       	ld	r30, X+
    4e7c:	fc 91       	ld	r31, X
    4e7e:	15 97       	sbiw	r26, 0x05	; 5
    4e80:	16 96       	adiw	r26, 0x06	; 6
    4e82:	8d 91       	ld	r24, X+
    4e84:	9c 91       	ld	r25, X
    4e86:	17 97       	sbiw	r26, 0x07	; 7
    4e88:	19 95       	eicall
    (void)__s;
}

static __inline__ void __iCliParam(const uint8_t *__s)
{
    cli();
    4e8a:	f8 94       	cli

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
	{
		if(&(task_storage_arr[tmp])==tgt)
    4e8c:	80 91 36 2d 	lds	r24, 0x2D36
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	ac 01       	movw	r20, r24
    4e94:	44 0f       	add	r20, r20
    4e96:	55 1f       	adc	r21, r21
    4e98:	9c 01       	movw	r18, r24
    4e9a:	22 0f       	add	r18, r18
    4e9c:	33 1f       	adc	r19, r19
    4e9e:	22 0f       	add	r18, r18
    4ea0:	33 1f       	adc	r19, r19
    4ea2:	22 0f       	add	r18, r18
    4ea4:	33 1f       	adc	r19, r19
    4ea6:	24 0f       	add	r18, r20
    4ea8:	35 1f       	adc	r19, r21
    4eaa:	29 5c       	subi	r18, 0xC9	; 201
    4eac:	32 4d       	sbci	r19, 0xD2	; 210
    4eae:	e2 16       	cp	r14, r18
    4eb0:	f3 06       	cpc	r15, r19
    4eb2:	11 f5       	brne	.+68     	; 0x4ef8 <run_tasks+0xb2>
		{
			task_storage_arr[tmp].task_function = NULL;
    4eb4:	fc 01       	movw	r30, r24
    4eb6:	ee 0f       	add	r30, r30
    4eb8:	ff 1f       	adc	r31, r31
    4eba:	9c 01       	movw	r18, r24
    4ebc:	22 0f       	add	r18, r18
    4ebe:	33 1f       	adc	r19, r19
    4ec0:	22 0f       	add	r18, r18
    4ec2:	33 1f       	adc	r19, r19
    4ec4:	22 0f       	add	r18, r18
    4ec6:	33 1f       	adc	r19, r19
    4ec8:	e2 0f       	add	r30, r18
    4eca:	f3 1f       	adc	r31, r19
    4ecc:	e9 5c       	subi	r30, 0xC9	; 201
    4ece:	f2 4d       	sbci	r31, 0xD2	; 210
    4ed0:	14 82       	std	Z+4, r1	; 0x04
    4ed2:	15 82       	std	Z+5, r1	; 0x05
			curr_pointer = ((tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS);
    4ed4:	09 96       	adiw	r24, 0x09	; 9
    4ed6:	be 01       	movw	r22, r28
    4ed8:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
    4edc:	80 93 36 2d 	sts	0x2D36, r24
			{
				cur_task->task_function(cur_task->arg); // run the task
			}
			scheduler_free(cur_task);
			cur_task = NULL;
			num_tasks--;
    4ee0:	80 91 cc 2a 	lds	r24, 0x2ACC
    4ee4:	81 50       	subi	r24, 0x01	; 1
    4ee6:	80 93 cc 2a 	sts	0x2ACC, r24
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4eea:	e0 91 5f 2c 	lds	r30, 0x2C5F
    4eee:	f0 91 60 2c 	lds	r31, 0x2C60
    4ef2:	30 97       	sbiw	r30, 0x00	; 0
    4ef4:	d1 f4       	brne	.+52     	; 0x4f2a <run_tasks+0xe4>
    4ef6:	57 c0       	rjmp	.+174    	; 0x4fa6 <run_tasks+0x160>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4ef8:	09 96       	adiw	r24, 0x09	; 9
    4efa:	be 01       	movw	r22, r28
    4efc:	0e 94 15 3c 	call	0x782a	; 0x782a <__divmodhi4>
	{
		if(&(task_storage_arr[tmp])==tgt)
    4f00:	99 27       	eor	r25, r25
    4f02:	ac 01       	movw	r20, r24
    4f04:	44 0f       	add	r20, r20
    4f06:	55 1f       	adc	r21, r21
    4f08:	9c 01       	movw	r18, r24
    4f0a:	22 0f       	add	r18, r18
    4f0c:	33 1f       	adc	r19, r19
    4f0e:	22 0f       	add	r18, r18
    4f10:	33 1f       	adc	r19, r19
    4f12:	22 0f       	add	r18, r18
    4f14:	33 1f       	adc	r19, r19
    4f16:	24 0f       	add	r18, r20
    4f18:	35 1f       	adc	r19, r21
    4f1a:	29 5c       	subi	r18, 0xC9	; 201
    4f1c:	32 4d       	sbci	r19, 0xD2	; 210
    4f1e:	e2 16       	cp	r14, r18
    4f20:	f3 06       	cpc	r15, r19
    4f22:	51 f7       	brne	.-44     	; 0x4ef8 <run_tasks+0xb2>
    4f24:	c7 cf       	rjmp	.-114    	; 0x4eb4 <run_tasks+0x6e>
	return &(task_storage_arr[curr_pointer]);
}

inline void scheduler_free(Task_t* tgt)
{
	for(uint8_t tmp=(curr_pointer); ; tmp = (tmp+(MAX_NUM_SCHEDULED_TASKS-1))%MAX_NUM_SCHEDULED_TASKS)
    4f26:	ca e0       	ldi	r28, 0x0A	; 10
    4f28:	d0 e0       	ldi	r29, 0x00	; 0
{
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
	{
		// Run all tasks that are scheduled to execute in the next 2ms
		// (The RTC compare register takes 2 RTC clock cycles to update)
		while (task_list != NULL && task_list->scheduled_time <= get_time() + 2)
    4f2a:	c0 80       	ld	r12, Z
    4f2c:	d1 80       	ldd	r13, Z+1	; 0x01
    4f2e:	e2 80       	ldd	r14, Z+2	; 0x02
    4f30:	f3 80       	ldd	r15, Z+3	; 0x03
    4f32:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    4f36:	dc 01       	movw	r26, r24
    4f38:	cb 01       	movw	r24, r22
    4f3a:	02 96       	adiw	r24, 0x02	; 2
    4f3c:	a1 1d       	adc	r26, r1
    4f3e:	b1 1d       	adc	r27, r1
    4f40:	8c 15       	cp	r24, r12
    4f42:	9d 05       	cpc	r25, r13
    4f44:	ae 05       	cpc	r26, r14
    4f46:	bf 05       	cpc	r27, r15
    4f48:	08 f0       	brcs	.+2      	; 0x4f4c <run_tasks+0x106>
    4f4a:	87 cf       	rjmp	.-242    	; 0x4e5a <run_tasks+0x14>
			scheduler_free(cur_task);
			cur_task = NULL;
			num_tasks--;
		}
		// If the next task to be executed is in the current epoch, set the RTC compare register and interrupt
		if (task_list != NULL && task_list->scheduled_time <= ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4f4c:	e0 91 5f 2c 	lds	r30, 0x2C5F
    4f50:	f0 91 60 2c 	lds	r31, 0x2C60
    4f54:	30 97       	sbiw	r30, 0x00	; 0
    4f56:	39 f1       	breq	.+78     	; 0x4fa6 <run_tasks+0x160>
    4f58:	80 81       	ld	r24, Z
    4f5a:	91 81       	ldd	r25, Z+1	; 0x01
    4f5c:	a2 81       	ldd	r26, Z+2	; 0x02
    4f5e:	b3 81       	ldd	r27, Z+3	; 0x03
    4f60:	40 91 f1 29 	lds	r20, 0x29F1
    4f64:	50 91 f2 29 	lds	r21, 0x29F2
    4f68:	e0 e0       	ldi	r30, 0x00	; 0
    4f6a:	f4 e0       	ldi	r31, 0x04	; 4
    4f6c:	c2 84       	ldd	r12, Z+10	; 0x0a
    4f6e:	d3 84       	ldd	r13, Z+11	; 0x0b
    4f70:	60 e0       	ldi	r22, 0x00	; 0
    4f72:	70 e0       	ldi	r23, 0x00	; 0
    4f74:	ba 01       	movw	r22, r20
    4f76:	55 27       	eor	r21, r21
    4f78:	44 27       	eor	r20, r20
    4f7a:	e1 2c       	mov	r14, r1
    4f7c:	f1 2c       	mov	r15, r1
    4f7e:	4c 29       	or	r20, r12
    4f80:	5d 29       	or	r21, r13
    4f82:	6e 29       	or	r22, r14
    4f84:	7f 29       	or	r23, r15
    4f86:	48 17       	cp	r20, r24
    4f88:	59 07       	cpc	r21, r25
    4f8a:	6a 07       	cpc	r22, r26
    4f8c:	7b 07       	cpc	r23, r27
    4f8e:	58 f0       	brcs	.+22     	; 0x4fa6 <run_tasks+0x160>
		{
			while (RTC.STATUS & RTC_SYNCBUSY_bm);
    4f90:	21 81       	ldd	r18, Z+1	; 0x01
    4f92:	20 fd       	sbrc	r18, 0
    4f94:	fd cf       	rjmp	.-6      	; 0x4f90 <run_tasks+0x14a>
			RTC.COMP = (uint16_t)(task_list->scheduled_time);
    4f96:	e0 e0       	ldi	r30, 0x00	; 0
    4f98:	f4 e0       	ldi	r31, 0x04	; 4
    4f9a:	84 87       	std	Z+12, r24	; 0x0c
    4f9c:	95 87       	std	Z+13, r25	; 0x0d
			RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    4f9e:	82 81       	ldd	r24, Z+2	; 0x02
    4fa0:	84 60       	ori	r24, 0x04	; 4
    4fa2:	82 83       	std	Z+2, r24	; 0x02
    4fa4:	05 c0       	rjmp	.+10     	; 0x4fb0 <run_tasks+0x16a>
		}
		else
		{
			RTC.INTCTRL &= ~RTC_COMPINTLVL_LO_gc;
    4fa6:	e0 e0       	ldi	r30, 0x00	; 0
    4fa8:	f4 e0       	ldi	r31, 0x04	; 4
    4faa:	82 81       	ldd	r24, Z+2	; 0x02
    4fac:	8b 7f       	andi	r24, 0xFB	; 251
    4fae:	82 83       	std	Z+2, r24	; 0x02
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    4fb0:	1f bf       	out	0x3f, r17	; 63
	}
	
	// Jump to the code that restores the registers to the state they were in
	// before the RTC interrupt.  Program control will return to where it was before the interrupt
	// on return from restore_registers
	asm("jmp restore_registers");	 // must include scheduler_asm.c in the project
    4fb2:	0c 94 73 02 	jmp	0x4e6	; 0x4e6 <restore_registers>

00004fb6 <__vector_10>:
}

// Increment rtc_epoch on RTC overflow
// Must be atomic so no reads of get_time() occur between RTC overflow and updating of epoch
ISR( RTC_OVF_vect )
{
    4fb6:	1f 92       	push	r1
    4fb8:	0f 92       	push	r0
    4fba:	0f b6       	in	r0, 0x3f	; 63
    4fbc:	0f 92       	push	r0
    4fbe:	11 24       	eor	r1, r1
    4fc0:	0b b6       	in	r0, 0x3b	; 59
    4fc2:	0f 92       	push	r0
    4fc4:	cf 92       	push	r12
    4fc6:	df 92       	push	r13
    4fc8:	ef 92       	push	r14
    4fca:	ff 92       	push	r15
    4fcc:	2f 93       	push	r18
    4fce:	3f 93       	push	r19
    4fd0:	4f 93       	push	r20
    4fd2:	5f 93       	push	r21
    4fd4:	6f 93       	push	r22
    4fd6:	7f 93       	push	r23
    4fd8:	8f 93       	push	r24
    4fda:	9f 93       	push	r25
    4fdc:	af 93       	push	r26
    4fde:	bf 93       	push	r27
    4fe0:	cf 93       	push	r28
    4fe2:	ef 93       	push	r30
    4fe4:	ff 93       	push	r31
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) // Disable interrupts
    4fe6:	cf b7       	in	r28, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    4fe8:	f8 94       	cli
	{
		rtc_epoch++;
    4fea:	80 91 f1 29 	lds	r24, 0x29F1
    4fee:	90 91 f2 29 	lds	r25, 0x29F2
    4ff2:	01 96       	adiw	r24, 0x01	; 1
    4ff4:	80 93 f1 29 	sts	0x29F1, r24
    4ff8:	90 93 f2 29 	sts	0x29F2, r25
		//printf("RTC Overflow. Current time %u\n", get_time());
		//print_task_queue();

		// If the next task to run is in the current epoch, update the RTC compare value and interrupt
		if (task_list != NULL && task_list->scheduled_time < ((((uint32_t)rtc_epoch) << 16) | (uint32_t)RTC.PER))
    4ffc:	e0 91 5f 2c 	lds	r30, 0x2C5F
    5000:	f0 91 60 2c 	lds	r31, 0x2C60
    5004:	30 97       	sbiw	r30, 0x00	; 0
    5006:	09 f4       	brne	.+2      	; 0x500a <__vector_10+0x54>
    5008:	3f c0       	rjmp	.+126    	; 0x5088 <__vector_10+0xd2>
    500a:	c0 80       	ld	r12, Z
    500c:	d1 80       	ldd	r13, Z+1	; 0x01
    500e:	e2 80       	ldd	r14, Z+2	; 0x02
    5010:	f3 80       	ldd	r15, Z+3	; 0x03
    5012:	80 91 f1 29 	lds	r24, 0x29F1
    5016:	90 91 f2 29 	lds	r25, 0x29F2
    501a:	e0 e0       	ldi	r30, 0x00	; 0
    501c:	f4 e0       	ldi	r31, 0x04	; 4
    501e:	42 85       	ldd	r20, Z+10	; 0x0a
    5020:	53 85       	ldd	r21, Z+11	; 0x0b
    5022:	a0 e0       	ldi	r26, 0x00	; 0
    5024:	b0 e0       	ldi	r27, 0x00	; 0
    5026:	dc 01       	movw	r26, r24
    5028:	99 27       	eor	r25, r25
    502a:	88 27       	eor	r24, r24
    502c:	60 e0       	ldi	r22, 0x00	; 0
    502e:	70 e0       	ldi	r23, 0x00	; 0
    5030:	84 2b       	or	r24, r20
    5032:	95 2b       	or	r25, r21
    5034:	a6 2b       	or	r26, r22
    5036:	b7 2b       	or	r27, r23
    5038:	c8 16       	cp	r12, r24
    503a:	d9 06       	cpc	r13, r25
    503c:	ea 06       	cpc	r14, r26
    503e:	fb 06       	cpc	r15, r27
    5040:	18 f5       	brcc	.+70     	; 0x5088 <__vector_10+0xd2>
		{
			// updating RTC.COMP takes 2 RTC clock cycles, so only update the compare value and
			// interrupt if the scheduled_time is more than 2ms away
			if (task_list->scheduled_time > get_time() + 2)
    5042:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    5046:	dc 01       	movw	r26, r24
    5048:	cb 01       	movw	r24, r22
    504a:	02 96       	adiw	r24, 0x02	; 2
    504c:	a1 1d       	adc	r26, r1
    504e:	b1 1d       	adc	r27, r1
    5050:	8c 15       	cp	r24, r12
    5052:	9d 05       	cpc	r25, r13
    5054:	ae 05       	cpc	r26, r14
    5056:	bf 05       	cpc	r27, r15
    5058:	98 f4       	brcc	.+38     	; 0x5080 <__vector_10+0xca>
			{
				while (RTC.STATUS & RTC_SYNCBUSY_bm);
    505a:	e0 e0       	ldi	r30, 0x00	; 0
    505c:	f4 e0       	ldi	r31, 0x04	; 4
    505e:	81 81       	ldd	r24, Z+1	; 0x01
    5060:	80 fd       	sbrc	r24, 0
    5062:	fd cf       	rjmp	.-6      	; 0x505e <__vector_10+0xa8>
				RTC.COMP = (uint16_t)(task_list->scheduled_time);
    5064:	e0 91 5f 2c 	lds	r30, 0x2C5F
    5068:	f0 91 60 2c 	lds	r31, 0x2C60
    506c:	80 81       	ld	r24, Z
    506e:	91 81       	ldd	r25, Z+1	; 0x01
    5070:	e0 e0       	ldi	r30, 0x00	; 0
    5072:	f4 e0       	ldi	r31, 0x04	; 4
    5074:	84 87       	std	Z+12, r24	; 0x0c
    5076:	95 87       	std	Z+13, r25	; 0x0d
				RTC.INTCTRL |= RTC_COMPINTLVL_LO_gc;
    5078:	82 81       	ldd	r24, Z+2	; 0x02
    507a:	84 60       	ori	r24, 0x04	; 4
    507c:	82 83       	std	Z+2, r24	; 0x02
				return; // return from ISR
    507e:	02 c0       	rjmp	.+4      	; 0x5084 <__vector_10+0xce>
			// If we get here, that means there's a task to execute in less than 2ms.  Jump to the ISR
			// to handle that.
			else
			{
				//RTC.INTFLAGS |= RTC_COMPIF_bm;
				asm("jmp rtc_compare_isr"); // must include scheduler_asm.S in the project
    5080:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_11>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5084:	cf bf       	out	0x3f, r28	; 63
    __asm__ volatile ("" ::: "memory");
    5086:	01 c0       	rjmp	.+2      	; 0x508a <__vector_10+0xd4>
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    5088:	cf bf       	out	0x3f, r28	; 63
				return;
			}
		}
	}
    508a:	ff 91       	pop	r31
    508c:	ef 91       	pop	r30
    508e:	cf 91       	pop	r28
    5090:	bf 91       	pop	r27
    5092:	af 91       	pop	r26
    5094:	9f 91       	pop	r25
    5096:	8f 91       	pop	r24
    5098:	7f 91       	pop	r23
    509a:	6f 91       	pop	r22
    509c:	5f 91       	pop	r21
    509e:	4f 91       	pop	r20
    50a0:	3f 91       	pop	r19
    50a2:	2f 91       	pop	r18
    50a4:	ff 90       	pop	r15
    50a6:	ef 90       	pop	r14
    50a8:	df 90       	pop	r13
    50aa:	cf 90       	pop	r12
    50ac:	0f 90       	pop	r0
    50ae:	0b be       	out	0x3b, r0	; 59
    50b0:	0f 90       	pop	r0
    50b2:	0f be       	out	0x3f, r0	; 63
    50b4:	0f 90       	pop	r0
    50b6:	1f 90       	pop	r1
    50b8:	18 95       	reti

000050ba <send_id>:
{
	printf("My ID is: %04X\r\n",get_droplet_id());
}

void send_id()
{
    50ba:	08 95       	ret

000050bc <collect_rnb_data_wrapper>:

// This function is used so we can make a transparent call to collect_rnb_data with 
// multiple arguments, but still leave the interrupt handler.
void collect_rnb_data_wrapper(void* arg)
{
	uint32_t wrapper_arg = *((uint32_t*)arg);
    50bc:	fc 01       	movw	r30, r24
    50be:	80 81       	ld	r24, Z
    50c0:	91 81       	ldd	r25, Z+1	; 0x01
    50c2:	a2 81       	ldd	r26, Z+2	; 0x02
    50c4:	b3 81       	ldd	r27, Z+3	; 0x03
	uint16_t id_val = (wrapper_arg&0xFFFF);
	uint8_t power_val = ((wrapper_arg>>16)&0xFF);
    50c6:	ad 01       	movw	r20, r26
    50c8:	66 27       	eor	r22, r22
    50ca:	77 27       	eor	r23, r23
	collect_rnb_data(id_val, power_val);
    50cc:	64 2f       	mov	r22, r20
    50ce:	39 c8       	rjmp	.-3982   	; 0x4142 <collect_rnb_data>
    50d0:	08 95       	ret

000050d2 <handle_check_collisions>:
		else														printf("\tCommand ( %s ) not recognized.\r\n",command_word);
	}
}

void handle_check_collisions()
{
    50d2:	ef 92       	push	r14
    50d4:	ff 92       	push	r15
    50d6:	0f 93       	push	r16
    50d8:	1f 93       	push	r17
    50da:	cf 93       	push	r28
    50dc:	df 93       	push	r29
	uint8_t dirs = check_collisions();
    50de:	0e 94 19 11 	call	0x2232	; 0x2232 <check_collisions>
    50e2:	c0 e0       	ldi	r28, 0x00	; 0
    50e4:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t found=0;
    50e6:	90 e0       	ldi	r25, 0x00	; 0
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    50e8:	08 2f       	mov	r16, r24
    50ea:	10 e0       	ldi	r17, 0x00	; 0
			found=1;
			printf("%hhu",i);
    50ec:	0f 2e       	mov	r0, r31
    50ee:	fb ea       	ldi	r31, 0xAB	; 171
    50f0:	ef 2e       	mov	r14, r31
    50f2:	f3 e2       	ldi	r31, 0x23	; 35
    50f4:	ff 2e       	mov	r15, r31
    50f6:	f0 2d       	mov	r31, r0
void handle_check_collisions()
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
    50f8:	98 01       	movw	r18, r16
    50fa:	0c 2e       	mov	r0, r28
    50fc:	02 c0       	rjmp	.+4      	; 0x5102 <handle_check_collisions+0x30>
    50fe:	35 95       	asr	r19
    5100:	27 95       	ror	r18
    5102:	0a 94       	dec	r0
    5104:	e2 f7       	brpl	.-8      	; 0x50fe <handle_check_collisions+0x2c>
    5106:	20 ff       	sbrs	r18, 0
    5108:	0b c0       	rjmp	.+22     	; 0x5120 <handle_check_collisions+0x4e>
			found=1;
			printf("%hhu",i);
    510a:	df 93       	push	r29
    510c:	cf 93       	push	r28
    510e:	ff 92       	push	r15
    5110:	ef 92       	push	r14
    5112:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5116:	0f 90       	pop	r0
    5118:	0f 90       	pop	r0
    511a:	0f 90       	pop	r0
    511c:	0f 90       	pop	r0
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
		if(dirs&(1<<i)){
			found=1;
    511e:	91 e0       	ldi	r25, 0x01	; 1
    5120:	21 96       	adiw	r28, 0x01	; 1

void handle_check_collisions()
{
	uint8_t dirs = check_collisions();
	uint8_t found=0;
	for(uint8_t i=0;i<6;i++){
    5122:	c6 30       	cpi	r28, 0x06	; 6
    5124:	d1 05       	cpc	r29, r1
    5126:	41 f7       	brne	.-48     	; 0x50f8 <handle_check_collisions+0x26>
		if(dirs&(1<<i)){
			found=1;
			printf("%hhu",i);
		}
	}
	if(!found) printf("None");
    5128:	91 11       	cpse	r25, r1
    512a:	08 c0       	rjmp	.+16     	; 0x513c <handle_check_collisions+0x6a>
    512c:	80 eb       	ldi	r24, 0xB0	; 176
    512e:	93 e2       	ldi	r25, 0x23	; 35
    5130:	9f 93       	push	r25
    5132:	8f 93       	push	r24
    5134:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5138:	0f 90       	pop	r0
    513a:	0f 90       	pop	r0
	printf("\r\n");
    513c:	80 ed       	ldi	r24, 0xD0	; 208
    513e:	99 e2       	ldi	r25, 0x29	; 41
    5140:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
}
    5144:	df 91       	pop	r29
    5146:	cf 91       	pop	r28
    5148:	1f 91       	pop	r17
    514a:	0f 91       	pop	r16
    514c:	ff 90       	pop	r15
    514e:	ef 90       	pop	r14
    5150:	08 95       	ret

00005152 <handle_move_steps>:

void handle_move_steps(char* command_args)
{
    5152:	ff 92       	push	r15
    5154:	0f 93       	push	r16
    5156:	1f 93       	push	r17
    5158:	cf 93       	push	r28
    515a:	df 93       	push	r29
    515c:	1f 92       	push	r1
    515e:	1f 92       	push	r1
    5160:	cd b7       	in	r28, 0x3d	; 61
    5162:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5164:	20 e2       	ldi	r18, 0x20	; 32
    5166:	30 e0       	ldi	r19, 0x00	; 0
    5168:	29 83       	std	Y+1, r18	; 0x01
    516a:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    516c:	be 01       	movw	r22, r28
    516e:	6f 5f       	subi	r22, 0xFF	; 255
    5170:	7f 4f       	sbci	r23, 0xFF	; 255
    5172:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	uint8_t direction = token[0]-'0';
    5176:	fc 01       	movw	r30, r24
    5178:	f0 80       	ld	r15, Z

	token = strtok(NULL,delim);
    517a:	be 01       	movw	r22, r28
    517c:	6f 5f       	subi	r22, 0xFF	; 255
    517e:	7f 4f       	sbci	r23, 0xFF	; 255
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	90 e0       	ldi	r25, 0x00	; 0
    5184:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	uint16_t num_steps = (uint16_t)atoi(token);
    5188:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    518c:	8c 01       	movw	r16, r24
	if (num_steps > 0)
    518e:	00 97       	sbiw	r24, 0x00	; 0
    5190:	f1 f0       	breq	.+60     	; 0x51ce <handle_move_steps+0x7c>
void handle_move_steps(char* command_args)
{
	const char delim[2] = " ";
	
	char* token = strtok(command_args,delim);
	uint8_t direction = token[0]-'0';
    5192:	f0 ed       	ldi	r31, 0xD0	; 208
    5194:	ff 0e       	add	r15, r31

	token = strtok(NULL,delim);
	uint16_t num_steps = (uint16_t)atoi(token);
	if (num_steps > 0)
	{
		set_rgb(0,0,200);		
    5196:	48 ec       	ldi	r20, 0xC8	; 200
    5198:	60 e0       	ldi	r22, 0x00	; 0
    519a:	80 e0       	ldi	r24, 0x00	; 0
    519c:	4a d8       	rcall	.-3948   	; 0x4232 <set_rgb>
		printf("walk direction %u, num_steps %u\r\n", direction, num_steps);	
    519e:	1f 93       	push	r17
    51a0:	0f 93       	push	r16
    51a2:	1f 92       	push	r1
    51a4:	ff 92       	push	r15
    51a6:	25 eb       	ldi	r18, 0xB5	; 181
    51a8:	33 e2       	ldi	r19, 0x23	; 35
    51aa:	3f 93       	push	r19
    51ac:	2f 93       	push	r18
    51ae:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
		move_steps(direction, num_steps);
    51b2:	b8 01       	movw	r22, r16
    51b4:	8f 2d       	mov	r24, r15
    51b6:	0e 94 57 12 	call	0x24ae	; 0x24ae <move_steps>
		set_rgb(0,0,0);
    51ba:	40 e0       	ldi	r20, 0x00	; 0
    51bc:	60 e0       	ldi	r22, 0x00	; 0
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	38 d8       	rcall	.-3984   	; 0x4232 <set_rgb>
    51c2:	0f 90       	pop	r0
    51c4:	0f 90       	pop	r0
    51c6:	0f 90       	pop	r0
    51c8:	0f 90       	pop	r0
    51ca:	0f 90       	pop	r0
    51cc:	0f 90       	pop	r0
	}	
}	
    51ce:	0f 90       	pop	r0
    51d0:	0f 90       	pop	r0
    51d2:	df 91       	pop	r29
    51d4:	cf 91       	pop	r28
    51d6:	1f 91       	pop	r17
    51d8:	0f 91       	pop	r16
    51da:	ff 90       	pop	r15
    51dc:	08 95       	ret

000051de <handle_walk>:

void handle_walk(char* command_args)
{	
    51de:	1f 93       	push	r17
    51e0:	cf 93       	push	r28
    51e2:	df 93       	push	r29
    51e4:	1f 92       	push	r1
    51e6:	1f 92       	push	r1
    51e8:	cd b7       	in	r28, 0x3d	; 61
    51ea:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    51ec:	20 e2       	ldi	r18, 0x20	; 32
    51ee:	30 e0       	ldi	r19, 0x00	; 0
    51f0:	29 83       	std	Y+1, r18	; 0x01
    51f2:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    51f4:	be 01       	movw	r22, r28
    51f6:	6f 5f       	subi	r22, 0xFF	; 255
    51f8:	7f 4f       	sbci	r23, 0xFF	; 255
    51fa:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	uint8_t direction = token[0]-'0';
    51fe:	fc 01       	movw	r30, r24
    5200:	10 81       	ld	r17, Z
    5202:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    5204:	be 01       	movw	r22, r28
    5206:	6f 5f       	subi	r22, 0xFF	; 255
    5208:	7f 4f       	sbci	r23, 0xFF	; 255
    520a:	80 e0       	ldi	r24, 0x00	; 0
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	uint16_t distance_mm = (uint16_t)atoi(token);
    5212:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    5216:	bc 01       	movw	r22, r24
	
	walk(direction, distance_mm);
    5218:	81 2f       	mov	r24, r17
    521a:	0e 94 12 14 	call	0x2824	; 0x2824 <walk>
}
    521e:	0f 90       	pop	r0
    5220:	0f 90       	pop	r0
    5222:	df 91       	pop	r29
    5224:	cf 91       	pop	r28
    5226:	1f 91       	pop	r17
    5228:	08 95       	ret

0000522a <handle_get_rgb>:

void handle_get_rgb()
{
    522a:	cf 93       	push	r28
    522c:	df 93       	push	r29
    522e:	00 d0       	rcall	.+0      	; 0x5230 <handle_get_rgb+0x6>
    5230:	cd b7       	in	r28, 0x3d	; 61
    5232:	de b7       	in	r29, 0x3e	; 62
	uint8_t r, g, b;
	get_rgb_sensors(&r, &g, &b);
    5234:	ae 01       	movw	r20, r28
    5236:	4d 5f       	subi	r20, 0xFD	; 253
    5238:	5f 4f       	sbci	r21, 0xFF	; 255
    523a:	be 01       	movw	r22, r28
    523c:	6e 5f       	subi	r22, 0xFE	; 254
    523e:	7f 4f       	sbci	r23, 0xFF	; 255
    5240:	ce 01       	movw	r24, r28
    5242:	01 96       	adiw	r24, 0x01	; 1
    5244:	cd da       	rcall	.-2662   	; 0x47e0 <get_rgb_sensors>
	printf("r: %hu, g: %hu, b: %hu\r\n", r, g, b);
    5246:	8b 81       	ldd	r24, Y+3	; 0x03
    5248:	1f 92       	push	r1
    524a:	8f 93       	push	r24
    524c:	8a 81       	ldd	r24, Y+2	; 0x02
    524e:	1f 92       	push	r1
    5250:	8f 93       	push	r24
    5252:	89 81       	ldd	r24, Y+1	; 0x01
    5254:	1f 92       	push	r1
    5256:	8f 93       	push	r24
    5258:	87 ed       	ldi	r24, 0xD7	; 215
    525a:	93 e2       	ldi	r25, 0x23	; 35
    525c:	9f 93       	push	r25
    525e:	8f 93       	push	r24
    5260:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5264:	cd bf       	out	0x3d, r28	; 61
    5266:	de bf       	out	0x3e, r29	; 62
}
    5268:	23 96       	adiw	r28, 0x03	; 3
    526a:	cd bf       	out	0x3d, r28	; 61
    526c:	de bf       	out	0x3e, r29	; 62
    526e:	df 91       	pop	r29
    5270:	cf 91       	pop	r28
    5272:	08 95       	ret

00005274 <handle_set_ir>:

void handle_set_ir(char* command_args)
{
    5274:	cf 93       	push	r28
    5276:	df 93       	push	r29
    5278:	1f 92       	push	r1
    527a:	1f 92       	push	r1
    527c:	cd b7       	in	r28, 0x3d	; 61
    527e:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5280:	20 e2       	ldi	r18, 0x20	; 32
    5282:	30 e0       	ldi	r19, 0x00	; 0
    5284:	29 83       	std	Y+1, r18	; 0x01
    5286:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5288:	be 01       	movw	r22, r28
    528a:	6f 5f       	subi	r22, 0xFF	; 255
    528c:	7f 4f       	sbci	r23, 0xFF	; 255
    528e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	uint16_t ir_val = (uint16_t)atoi(token);
    5292:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
	
	set_all_ir_powers(ir_val);
    5296:	0e 94 bf 04 	call	0x97e	; 0x97e <set_all_ir_powers>
}
    529a:	0f 90       	pop	r0
    529c:	0f 90       	pop	r0
    529e:	df 91       	pop	r29
    52a0:	cf 91       	pop	r28
    52a2:	08 95       	ret

000052a4 <handle_stop_walk>:

void handle_stop_walk()
{
	set_rgb(180,0,0);
    52a4:	40 e0       	ldi	r20, 0x00	; 0
    52a6:	60 e0       	ldi	r22, 0x00	; 0
    52a8:	84 eb       	ldi	r24, 0xB4	; 180
    52aa:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
	stop(0);
    52ae:	80 e0       	ldi	r24, 0x00	; 0
    52b0:	90 e0       	ldi	r25, 0x00	; 0
    52b2:	0e 94 28 12 	call	0x2450	; 0x2450 <stop>
	set_rgb(0,0,0);
    52b6:	40 e0       	ldi	r20, 0x00	; 0
    52b8:	60 e0       	ldi	r22, 0x00	; 0
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	0c 94 19 21 	jmp	0x4232	; 0x4232 <set_rgb>
    52c0:	08 95       	ret

000052c2 <handle_set_motors>:
	//
	//theta = val;
//}

void handle_set_motors(char* command_args)
{	
    52c2:	0f 93       	push	r16
    52c4:	1f 93       	push	r17
    52c6:	cf 93       	push	r28
    52c8:	df 93       	push	r29
    52ca:	1f 92       	push	r1
    52cc:	1f 92       	push	r1
    52ce:	cd b7       	in	r28, 0x3d	; 61
    52d0:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    52d2:	20 e2       	ldi	r18, 0x20	; 32
    52d4:	30 e0       	ldi	r19, 0x00	; 0
    52d6:	29 83       	std	Y+1, r18	; 0x01
    52d8:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    52da:	be 01       	movw	r22, r28
    52dc:	6f 5f       	subi	r22, 0xFF	; 255
    52de:	7f 4f       	sbci	r23, 0xFF	; 255
    52e0:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	if(token==NULL){ printf("strtok returned NULL on direction.\r\n"); return;}
    52e4:	00 97       	sbiw	r24, 0x00	; 0
    52e6:	29 f4       	brne	.+10     	; 0x52f2 <handle_set_motors+0x30>
    52e8:	80 ef       	ldi	r24, 0xF0	; 240
    52ea:	93 e2       	ldi	r25, 0x23	; 35
    52ec:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    52f0:	79 c0       	rjmp	.+242    	; 0x53e4 <handle_set_motors+0x122>
	uint8_t direction = atoi(token);
    52f2:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    52f6:	8c 01       	movw	r16, r24
	if(direction> 7){ printf("Bad direction. Got: %hhu.\r\n", direction); return;}
    52f8:	88 30       	cpi	r24, 0x08	; 8
    52fa:	70 f0       	brcs	.+28     	; 0x5318 <handle_set_motors+0x56>
    52fc:	11 27       	eor	r17, r17
    52fe:	1f 93       	push	r17
    5300:	0f 93       	push	r16
    5302:	84 e1       	ldi	r24, 0x14	; 20
    5304:	94 e2       	ldi	r25, 0x24	; 36
    5306:	9f 93       	push	r25
    5308:	8f 93       	push	r24
    530a:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    530e:	0f 90       	pop	r0
    5310:	0f 90       	pop	r0
    5312:	0f 90       	pop	r0
    5314:	0f 90       	pop	r0
    5316:	66 c0       	rjmp	.+204    	; 0x53e4 <handle_set_motors+0x122>

	token = strtok(NULL,delim);
    5318:	be 01       	movw	r22, r28
    531a:	6f 5f       	subi	r22, 0xFF	; 255
    531c:	7f 4f       	sbci	r23, 0xFF	; 255
    531e:	80 e0       	ldi	r24, 0x00	; 0
    5320:	90 e0       	ldi	r25, 0x00	; 0
    5322:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	if(token==NULL){ printf("strtok returned NULL on first val.\r\n"); return;}	
    5326:	00 97       	sbiw	r24, 0x00	; 0
    5328:	29 f4       	brne	.+10     	; 0x5334 <handle_set_motors+0x72>
    532a:	80 e3       	ldi	r24, 0x30	; 48
    532c:	94 e2       	ldi	r25, 0x24	; 36
    532e:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    5332:	58 c0       	rjmp	.+176    	; 0x53e4 <handle_set_motors+0x122>
	motor_adjusts[direction][0] = atoi(token);
    5334:	11 27       	eor	r17, r17
    5336:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    533a:	f8 01       	movw	r30, r16
    533c:	ee 0f       	add	r30, r30
    533e:	ff 1f       	adc	r31, r31
    5340:	e0 0f       	add	r30, r16
    5342:	f1 1f       	adc	r31, r17
    5344:	ee 0f       	add	r30, r30
    5346:	ff 1f       	adc	r31, r31
    5348:	e5 5d       	subi	r30, 0xD5	; 213
    534a:	f3 4d       	sbci	r31, 0xD3	; 211
    534c:	80 83       	st	Z, r24
    534e:	91 83       	std	Z+1, r25	; 0x01
	
	token = strtok(NULL,delim);
    5350:	be 01       	movw	r22, r28
    5352:	6f 5f       	subi	r22, 0xFF	; 255
    5354:	7f 4f       	sbci	r23, 0xFF	; 255
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	if(token==NULL){ printf("strtok returned NULL on second val.\r\n"); return;}
    535e:	00 97       	sbiw	r24, 0x00	; 0
    5360:	29 f4       	brne	.+10     	; 0x536c <handle_set_motors+0xaa>
    5362:	84 e5       	ldi	r24, 0x54	; 84
    5364:	94 e2       	ldi	r25, 0x24	; 36
    5366:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    536a:	3c c0       	rjmp	.+120    	; 0x53e4 <handle_set_motors+0x122>
	motor_adjusts[direction][1] = atoi(token);
    536c:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    5370:	f8 01       	movw	r30, r16
    5372:	ee 0f       	add	r30, r30
    5374:	ff 1f       	adc	r31, r31
    5376:	e0 0f       	add	r30, r16
    5378:	f1 1f       	adc	r31, r17
    537a:	ee 0f       	add	r30, r30
    537c:	ff 1f       	adc	r31, r31
    537e:	e5 5d       	subi	r30, 0xD5	; 213
    5380:	f3 4d       	sbci	r31, 0xD3	; 211
    5382:	82 83       	std	Z+2, r24	; 0x02
    5384:	93 83       	std	Z+3, r25	; 0x03
	
	token = strtok(NULL,delim);
    5386:	be 01       	movw	r22, r28
    5388:	6f 5f       	subi	r22, 0xFF	; 255
    538a:	7f 4f       	sbci	r23, 0xFF	; 255
    538c:	80 e0       	ldi	r24, 0x00	; 0
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	if(token==NULL){ printf("strtok returned NULL on third val.\r\n"); return;}
    5394:	00 97       	sbiw	r24, 0x00	; 0
    5396:	29 f4       	brne	.+10     	; 0x53a2 <handle_set_motors+0xe0>
    5398:	89 e7       	ldi	r24, 0x79	; 121
    539a:	94 e2       	ldi	r25, 0x24	; 36
    539c:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    53a0:	21 c0       	rjmp	.+66     	; 0x53e4 <handle_set_motors+0x122>
	motor_adjusts[direction][2] = atoi(token);	
    53a2:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    53a6:	f8 01       	movw	r30, r16
    53a8:	ee 0f       	add	r30, r30
    53aa:	ff 1f       	adc	r31, r31
    53ac:	e0 0f       	add	r30, r16
    53ae:	f1 1f       	adc	r31, r17
    53b0:	ee 0f       	add	r30, r30
    53b2:	ff 1f       	adc	r31, r31
    53b4:	e5 5d       	subi	r30, 0xD5	; 213
    53b6:	f3 4d       	sbci	r31, 0xD3	; 211
    53b8:	84 83       	std	Z+4, r24	; 0x04
    53ba:	95 83       	std	Z+5, r25	; 0x05

	printf("Got set_motors command. direction: %hhu, vals: (%d, %d, %d)\r\n", direction, motor_adjusts[direction][0], motor_adjusts[direction][1], motor_adjusts[direction][2]);
    53bc:	9f 93       	push	r25
    53be:	8f 93       	push	r24
    53c0:	83 81       	ldd	r24, Z+3	; 0x03
    53c2:	8f 93       	push	r24
    53c4:	82 81       	ldd	r24, Z+2	; 0x02
    53c6:	8f 93       	push	r24
    53c8:	81 81       	ldd	r24, Z+1	; 0x01
    53ca:	8f 93       	push	r24
    53cc:	80 81       	ld	r24, Z
    53ce:	8f 93       	push	r24
    53d0:	1f 93       	push	r17
    53d2:	0f 93       	push	r16
    53d4:	8d e9       	ldi	r24, 0x9D	; 157
    53d6:	94 e2       	ldi	r25, 0x24	; 36
    53d8:	9f 93       	push	r25
    53da:	8f 93       	push	r24
    53dc:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    53e0:	cd bf       	out	0x3d, r28	; 61
    53e2:	de bf       	out	0x3e, r29	; 62
}
    53e4:	0f 90       	pop	r0
    53e6:	0f 90       	pop	r0
    53e8:	df 91       	pop	r29
    53ea:	cf 91       	pop	r28
    53ec:	1f 91       	pop	r17
    53ee:	0f 91       	pop	r16
    53f0:	08 95       	ret

000053f2 <handle_set_mm_per_kilostep>:

void handle_set_mm_per_kilostep(char* command_args)
{
    53f2:	1f 93       	push	r17
    53f4:	cf 93       	push	r28
    53f6:	df 93       	push	r29
    53f8:	1f 92       	push	r1
    53fa:	1f 92       	push	r1
    53fc:	cd b7       	in	r28, 0x3d	; 61
    53fe:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5400:	20 e2       	ldi	r18, 0x20	; 32
    5402:	30 e0       	ldi	r19, 0x00	; 0
    5404:	29 83       	std	Y+1, r18	; 0x01
    5406:	3a 83       	std	Y+2, r19	; 0x02
	
	char* token = strtok(command_args,delim);
    5408:	be 01       	movw	r22, r28
    540a:	6f 5f       	subi	r22, 0xFF	; 255
    540c:	7f 4f       	sbci	r23, 0xFF	; 255
    540e:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	uint8_t direction = token[0]-'0';
    5412:	fc 01       	movw	r30, r24
    5414:	10 81       	ld	r17, Z
    5416:	10 53       	subi	r17, 0x30	; 48
	
	token = strtok(NULL,delim);
    5418:	be 01       	movw	r22, r28
    541a:	6f 5f       	subi	r22, 0xFF	; 255
    541c:	7f 4f       	sbci	r23, 0xFF	; 255
    541e:	80 e0       	ldi	r24, 0x00	; 0
    5420:	90 e0       	ldi	r25, 0x00	; 0
    5422:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
	uint16_t mm_per_kilostep = atoi(token);
    5426:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    542a:	bc 01       	movw	r22, r24

	set_mm_per_kilostep(direction, mm_per_kilostep);
    542c:	81 2f       	mov	r24, r17
    542e:	0e 94 5f 14 	call	0x28be	; 0x28be <set_mm_per_kilostep>
	
}
    5432:	0f 90       	pop	r0
    5434:	0f 90       	pop	r0
    5436:	df 91       	pop	r29
    5438:	cf 91       	pop	r28
    543a:	1f 91       	pop	r17
    543c:	08 95       	ret

0000543e <handle_rnb_broadcast>:
/* This tells the droplet that it should tell other droplets nearby their rnb to it.
 * In other words, this tells nearby droplets to listen, and then performs an ir_range_blast.
 */
void handle_rnb_broadcast()
{
	schedule_task(5,broadcast_rnb_data,NULL);
    543e:	20 e0       	ldi	r18, 0x00	; 0
    5440:	30 e0       	ldi	r19, 0x00	; 0
    5442:	41 e8       	ldi	r20, 0x81	; 129
    5444:	5a e1       	ldi	r21, 0x1A	; 26
    5446:	65 e0       	ldi	r22, 0x05	; 5
    5448:	70 e0       	ldi	r23, 0x00	; 0
    544a:	80 e0       	ldi	r24, 0x00	; 0
    544c:	90 e0       	ldi	r25, 0x00	; 0
    544e:	ae ca       	rjmp	.-2724   	; 0x49ac <schedule_task>
    5450:	08 95       	ret

00005452 <handle_rnb_collect>:

/* This tells the droplet that it should ask nearby droplets to do an 
 * ir_range_blast so it can learn their rnb.
 */
void handle_rnb_collect(char* command_args)
{
    5452:	0f 93       	push	r16
    5454:	1f 93       	push	r17
    5456:	cf 93       	push	r28
    5458:	df 93       	push	r29
    545a:	00 d0       	rcall	.+0      	; 0x545c <handle_rnb_collect+0xa>
    545c:	00 d0       	rcall	.+0      	; 0x545e <handle_rnb_collect+0xc>
    545e:	cd b7       	in	r28, 0x3d	; 61
    5460:	de b7       	in	r29, 0x3e	; 62
	const char delim[2] = " ";
    5462:	20 e2       	ldi	r18, 0x20	; 32
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	29 83       	std	Y+1, r18	; 0x01
    5468:	3a 83       	std	Y+2, r19	; 0x02
		
	uint16_t id_val = atoi(strtok(command_args, delim));
    546a:	be 01       	movw	r22, r28
    546c:	6f 5f       	subi	r22, 0xFF	; 255
    546e:	7f 4f       	sbci	r23, 0xFF	; 255
    5470:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
    5474:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    5478:	8c 01       	movw	r16, r24
	uint8_t power_val = atoi(strtok(NULL, delim));
    547a:	be 01       	movw	r22, r28
    547c:	6f 5f       	subi	r22, 0xFF	; 255
    547e:	7f 4f       	sbci	r23, 0xFF	; 255
    5480:	80 e0       	ldi	r24, 0x00	; 0
    5482:	90 e0       	ldi	r25, 0x00	; 0
    5484:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
    5488:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
	
	uint32_t wrapper_arg = (((uint32_t)id_val)|(((uint32_t)power_val)<<16));
    548c:	a8 01       	movw	r20, r16
    548e:	60 e0       	ldi	r22, 0x00	; 0
    5490:	70 e0       	ldi	r23, 0x00	; 0
    5492:	68 2b       	or	r22, r24
    5494:	4b 83       	std	Y+3, r20	; 0x03
    5496:	5c 83       	std	Y+4, r21	; 0x04
    5498:	6d 83       	std	Y+5, r22	; 0x05
    549a:	7e 83       	std	Y+6, r23	; 0x06
	schedule_task(5,collect_rnb_data_wrapper, (void*)&wrapper_arg);
    549c:	9e 01       	movw	r18, r28
    549e:	2d 5f       	subi	r18, 0xFD	; 253
    54a0:	3f 4f       	sbci	r19, 0xFF	; 255
    54a2:	4e e5       	ldi	r20, 0x5E	; 94
    54a4:	58 e2       	ldi	r21, 0x28	; 40
    54a6:	65 e0       	ldi	r22, 0x05	; 5
    54a8:	70 e0       	ldi	r23, 0x00	; 0
    54aa:	80 e0       	ldi	r24, 0x00	; 0
    54ac:	90 e0       	ldi	r25, 0x00	; 0
    54ae:	7e da       	rcall	.-2820   	; 0x49ac <schedule_task>
}
    54b0:	26 96       	adiw	r28, 0x06	; 6
    54b2:	cd bf       	out	0x3d, r28	; 61
    54b4:	de bf       	out	0x3e, r29	; 62
    54b6:	df 91       	pop	r29
    54b8:	cf 91       	pop	r28
    54ba:	1f 91       	pop	r17
    54bc:	0f 91       	pop	r16
    54be:	08 95       	ret

000054c0 <handle_rnb_transmit>:

/* This should only be called when another droplet asks this droplet 
 * to do an ir_range_blast (ie., by using handle_rnb_collect).
 */
void handle_rnb_transmit(char* command_args)
{
    54c0:	0f 93       	push	r16
    54c2:	1f 93       	push	r17
    54c4:	cf 93       	push	r28
    54c6:	df 93       	push	r29
    54c8:	ec 01       	movw	r28, r24
	uint32_t time_since_arrival = (get_time()-cmd_arrival_time+6);
    54ca:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    54ce:	00 91 5b 2c 	lds	r16, 0x2C5B
    54d2:	10 91 5c 2c 	lds	r17, 0x2C5C
    54d6:	20 91 5d 2c 	lds	r18, 0x2C5D
    54da:	30 91 5e 2c 	lds	r19, 0x2C5E
    54de:	ab 01       	movw	r20, r22
    54e0:	bc 01       	movw	r22, r24
    54e2:	40 1b       	sub	r20, r16
    54e4:	51 0b       	sbc	r21, r17
    54e6:	62 0b       	sbc	r22, r18
    54e8:	73 0b       	sbc	r23, r19
    54ea:	4a 5f       	subi	r20, 0xFA	; 250
    54ec:	5f 4f       	sbci	r21, 0xFF	; 255
    54ee:	6f 4f       	sbci	r22, 0xFF	; 255
    54f0:	7f 4f       	sbci	r23, 0xFF	; 255
	if(time_since_arrival<POST_MESSAGE_DELAY) delay_ms(POST_MESSAGE_DELAY - time_since_arrival);
    54f2:	4d 35       	cpi	r20, 0x5D	; 93
    54f4:	51 05       	cpc	r21, r1
    54f6:	61 05       	cpc	r22, r1
    54f8:	71 05       	cpc	r23, r1
    54fa:	28 f4       	brcc	.+10     	; 0x5506 <handle_rnb_transmit+0x46>
    54fc:	8d e5       	ldi	r24, 0x5D	; 93
    54fe:	90 e0       	ldi	r25, 0x00	; 0
    5500:	84 1b       	sub	r24, r20
    5502:	95 0b       	sbc	r25, r21
    5504:	2d da       	rcall	.-2982   	; 0x4960 <delay_ms>
	uint16_t power = (uint16_t)command_args[0] + 2;
    5506:	88 81       	ld	r24, Y
	ir_range_blast(power);
    5508:	8e 5f       	subi	r24, 0xFE	; 254
    550a:	0e 94 42 1a 	call	0x3484	; 0x3484 <ir_range_blast>
}
    550e:	df 91       	pop	r29
    5510:	cf 91       	pop	r28
    5512:	1f 91       	pop	r17
    5514:	0f 91       	pop	r16
    5516:	08 95       	ret

00005518 <handle_rnb_receive>:

/* This should only be called when another droplet is about to 
 * broadcast its rnb_data (ie., by using handle_rnb_broadcast()).
 */
void handle_rnb_receive()
{
    5518:	0f 93       	push	r16
    551a:	1f 93       	push	r17
	uint32_t time_since_arrival = (get_time()-cmd_arrival_time+5);
    551c:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    5520:	00 91 5b 2c 	lds	r16, 0x2C5B
    5524:	10 91 5c 2c 	lds	r17, 0x2C5C
    5528:	20 91 5d 2c 	lds	r18, 0x2C5D
    552c:	30 91 5e 2c 	lds	r19, 0x2C5E
    5530:	ab 01       	movw	r20, r22
    5532:	bc 01       	movw	r22, r24
    5534:	40 1b       	sub	r20, r16
    5536:	51 0b       	sbc	r21, r17
    5538:	62 0b       	sbc	r22, r18
    553a:	73 0b       	sbc	r23, r19
    553c:	4b 5f       	subi	r20, 0xFB	; 251
    553e:	5f 4f       	sbci	r21, 0xFF	; 255
    5540:	6f 4f       	sbci	r22, 0xFF	; 255
    5542:	7f 4f       	sbci	r23, 0xFF	; 255
	if(time_since_arrival<POST_MESSAGE_DELAY) delay_ms(POST_MESSAGE_DELAY - time_since_arrival);	
    5544:	4d 35       	cpi	r20, 0x5D	; 93
    5546:	51 05       	cpc	r21, r1
    5548:	61 05       	cpc	r22, r1
    554a:	71 05       	cpc	r23, r1
    554c:	28 f4       	brcc	.+10     	; 0x5558 <handle_rnb_receive+0x40>
    554e:	8d e5       	ldi	r24, 0x5D	; 93
    5550:	90 e0       	ldi	r25, 0x00	; 0
    5552:	84 1b       	sub	r24, r20
    5554:	95 0b       	sbc	r25, r21
    5556:	04 da       	rcall	.-3064   	; 0x4960 <delay_ms>
	receive_rnb_data();
    5558:	0e 94 a0 18 	call	0x3140	; 0x3140 <receive_rnb_data>
	rnb_updated = 0;
    555c:	10 92 ee 2a 	sts	0x2AEE, r1
	//last_good_rnb.id_number = (uint16_t)last_command_source_id; TODO: re-add this.
}
    5560:	1f 91       	pop	r17
    5562:	0f 91       	pop	r16
    5564:	08 95       	ret

00005566 <handle_set_led>:

void handle_set_led(char* command_args)
{
    5566:	6f 92       	push	r6
    5568:	7f 92       	push	r7
    556a:	8f 92       	push	r8
    556c:	9f 92       	push	r9
    556e:	af 92       	push	r10
    5570:	bf 92       	push	r11
    5572:	cf 92       	push	r12
    5574:	df 92       	push	r13
    5576:	ef 92       	push	r14
    5578:	ff 92       	push	r15
    557a:	0f 93       	push	r16
    557c:	1f 93       	push	r17
    557e:	cf 93       	push	r28
    5580:	df 93       	push	r29
    5582:	1f 92       	push	r1
    5584:	1f 92       	push	r1
    5586:	cd b7       	in	r28, 0x3d	; 61
    5588:	de b7       	in	r29, 0x3e	; 62
    558a:	78 2e       	mov	r7, r24
    558c:	69 2e       	mov	r6, r25
	const char delim[2] = " ";
    558e:	80 e2       	ldi	r24, 0x20	; 32
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	89 83       	std	Y+1, r24	; 0x01
    5594:	9a 83       	std	Y+2, r25	; 0x02
	char* token;

	uint8_t successful_read = 0;
	
	char* colors = strtok(command_args,delim);
    5596:	be 01       	movw	r22, r28
    5598:	6f 5f       	subi	r22, 0xFF	; 255
    559a:	7f 4f       	sbci	r23, 0xFF	; 255
    559c:	87 2d       	mov	r24, r7
    559e:	96 2d       	mov	r25, r6
    55a0:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
    55a4:	7c 01       	movw	r14, r24
	
	int length = strlen(colors);
    55a6:	fc 01       	movw	r30, r24
    55a8:	01 90       	ld	r0, Z+
    55aa:	00 20       	and	r0, r0
    55ac:	e9 f7       	brne	.-6      	; 0x55a8 <handle_set_led+0x42>
    55ae:	31 97       	sbiw	r30, 0x01	; 1
    55b0:	6f 01       	movw	r12, r30
    55b2:	c8 1a       	sub	r12, r24
    55b4:	d9 0a       	sbc	r13, r25

	if(strcmp(colors,"hsv")==0)
    55b6:	6b ed       	ldi	r22, 0xDB	; 219
    55b8:	74 e2       	ldi	r23, 0x24	; 36
    55ba:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    55be:	89 2b       	or	r24, r25
    55c0:	21 f0       	breq	.+8      	; 0x55ca <handle_set_led+0x64>
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    55c2:	1c 14       	cp	r1, r12
    55c4:	1d 04       	cpc	r1, r13
    55c6:	24 f1       	brlt	.+72     	; 0x5610 <handle_set_led+0xaa>
    55c8:	5c c0       	rjmp	.+184    	; 0x5682 <handle_set_led+0x11c>

	if(strcmp(colors,"hsv")==0)
	{
		uint16_t hVal;
		uint8_t sVal, vVal;
		token = strtok(NULL,delim);
    55ca:	be 01       	movw	r22, r28
    55cc:	6f 5f       	subi	r22, 0xFF	; 255
    55ce:	7f 4f       	sbci	r23, 0xFF	; 255
    55d0:	80 e0       	ldi	r24, 0x00	; 0
    55d2:	90 e0       	ldi	r25, 0x00	; 0
    55d4:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
		hVal = atoi(token);
    55d8:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    55dc:	8c 01       	movw	r16, r24
		token = strtok(NULL,delim);
    55de:	be 01       	movw	r22, r28
    55e0:	6f 5f       	subi	r22, 0xFF	; 255
    55e2:	7f 4f       	sbci	r23, 0xFF	; 255
    55e4:	80 e0       	ldi	r24, 0x00	; 0
    55e6:	90 e0       	ldi	r25, 0x00	; 0
    55e8:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
		sVal = atoi(token);
    55ec:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    55f0:	f8 2e       	mov	r15, r24
		token = strtok(NULL,delim);	
    55f2:	be 01       	movw	r22, r28
    55f4:	6f 5f       	subi	r22, 0xFF	; 255
    55f6:	7f 4f       	sbci	r23, 0xFF	; 255
    55f8:	80 e0       	ldi	r24, 0x00	; 0
    55fa:	90 e0       	ldi	r25, 0x00	; 0
    55fc:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
		vVal = atoi(token);
    5600:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
		set_hsv(hVal,sVal,vVal);
    5604:	48 2f       	mov	r20, r24
    5606:	6f 2d       	mov	r22, r15
    5608:	c8 01       	movw	r24, r16
    560a:	0e 94 ab 22 	call	0x4556	; 0x4556 <set_hsv>
    560e:	51 c0       	rjmp	.+162    	; 0x56b2 <handle_set_led+0x14c>
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    5610:	00 e0       	ldi	r16, 0x00	; 0
    5612:	10 e0       	ldi	r17, 0x00	; 0
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    5614:	0f 2e       	mov	r0, r31
    5616:	f0 e4       	ldi	r31, 0x40	; 64
    5618:	af 2e       	mov	r10, r31
    561a:	f9 e0       	ldi	r31, 0x09	; 9
    561c:	bf 2e       	mov	r11, r31
    561e:	f0 2d       	mov	r31, r0
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    5620:	0f 2e       	mov	r0, r31
    5622:	f0 e4       	ldi	r31, 0x40	; 64
    5624:	8f 2e       	mov	r8, r31
    5626:	fa e0       	ldi	r31, 0x0A	; 10
    5628:	9f 2e       	mov	r9, r31
    562a:	f0 2d       	mov	r31, r0
		{
			token = strtok(NULL,delim);
    562c:	be 01       	movw	r22, r28
    562e:	6f 5f       	subi	r22, 0xFF	; 255
    5630:	7f 4f       	sbci	r23, 0xFF	; 255
    5632:	80 e0       	ldi	r24, 0x00	; 0
    5634:	90 e0       	ldi	r25, 0x00	; 0
    5636:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <strtok>
			if(colors[i]=='r')
    563a:	f7 01       	movw	r30, r14
    563c:	21 91       	ld	r18, Z+
    563e:	7f 01       	movw	r14, r30
    5640:	22 37       	cpi	r18, 0x72	; 114
    5642:	39 f4       	brne	.+14     	; 0x5652 <handle_set_led+0xec>
			{
				set_red_led(atoi(token));
    5644:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    5648:	99 27       	eor	r25, r25

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }
    564a:	f4 01       	movw	r30, r8
    564c:	82 af       	std	Z+58, r24	; 0x3a
    564e:	93 af       	std	Z+59, r25	; 0x3b
    5650:	12 c0       	rjmp	.+36     	; 0x5676 <handle_set_led+0x110>
				successful_read=1;
			}
			else if(colors[i]=='g')
    5652:	27 36       	cpi	r18, 0x67	; 103
    5654:	39 f4       	brne	.+14     	; 0x5664 <handle_set_led+0xfe>
			{
				set_green_led(atoi(token));
    5656:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    565a:	99 27       	eor	r25, r25

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
    565c:	f4 01       	movw	r30, r8
    565e:	80 af       	std	Z+56, r24	; 0x38
    5660:	91 af       	std	Z+57, r25	; 0x39
    5662:	09 c0       	rjmp	.+18     	; 0x5676 <handle_set_led+0x110>
				successful_read=1;
			}
			else if(colors[i]=='b')
    5664:	22 36       	cpi	r18, 0x62	; 98
    5666:	69 f4       	brne	.+26     	; 0x5682 <handle_set_led+0x11c>
			{
				set_blue_led(atoi(token));
    5668:	0e 94 7a 3d 	call	0x7af4	; 0x7af4 <atoi>
    566c:	9c 01       	movw	r18, r24
    566e:	33 27       	eor	r19, r19
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
inline void set_blue_led(uint8_t saturation) { LED_B_TC.CCABUF = saturation; }
    5670:	f5 01       	movw	r30, r10
    5672:	20 af       	std	Z+56, r18	; 0x38
    5674:	31 af       	std	Z+57, r19	; 0x39
		set_hsv(hVal,sVal,vVal);
		successful_read=1;
	}
	else
	{
		for(int i=0 ; i < length ; i++)
    5676:	0f 5f       	subi	r16, 0xFF	; 255
    5678:	1f 4f       	sbci	r17, 0xFF	; 255
    567a:	c0 16       	cp	r12, r16
    567c:	d1 06       	cpc	r13, r17
    567e:	b1 f6       	brne	.-84     	; 0x562c <handle_set_led+0xc6>
    5680:	18 c0       	rjmp	.+48     	; 0x56b2 <handle_set_led+0x14c>
		}
	}

	if(successful_read!=1)
	{
		printf("\tGot command set_led, but arguments (%s) were invalid. Format should be:\r\n",command_args);
    5682:	6f 92       	push	r6
    5684:	7f 92       	push	r7
    5686:	8f ed       	ldi	r24, 0xDF	; 223
    5688:	94 e2       	ldi	r25, 0x24	; 36
    568a:	9f 93       	push	r25
    568c:	8f 93       	push	r24
    568e:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
		printf("\t Letters r,g,b, in any order, followed by values 0-255, in same \r\n");
    5692:	8a e2       	ldi	r24, 0x2A	; 42
    5694:	95 e2       	ldi	r25, 0x25	; 37
    5696:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
		printf("\t order, indicating the brightness of the associated LEDs. Example: \r\n");
    569a:	8d e6       	ldi	r24, 0x6D	; 109
    569c:	95 e2       	ldi	r25, 0x25	; 37
    569e:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
		printf("\t \"set_led bgr 5 30 0\" gives a bluish green.\r\n");
    56a2:	83 eb       	ldi	r24, 0xB3	; 179
    56a4:	95 e2       	ldi	r25, 0x25	; 37
    56a6:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    56aa:	0f 90       	pop	r0
    56ac:	0f 90       	pop	r0
    56ae:	0f 90       	pop	r0
    56b0:	0f 90       	pop	r0
	}
}
    56b2:	0f 90       	pop	r0
    56b4:	0f 90       	pop	r0
    56b6:	df 91       	pop	r29
    56b8:	cf 91       	pop	r28
    56ba:	1f 91       	pop	r17
    56bc:	0f 91       	pop	r16
    56be:	ff 90       	pop	r15
    56c0:	ef 90       	pop	r14
    56c2:	df 90       	pop	r13
    56c4:	cf 90       	pop	r12
    56c6:	bf 90       	pop	r11
    56c8:	af 90       	pop	r10
    56ca:	9f 90       	pop	r9
    56cc:	8f 90       	pop	r8
    56ce:	7f 90       	pop	r7
    56d0:	6f 90       	pop	r6
    56d2:	08 95       	ret

000056d4 <handle_broadcast_id>:
void handle_broadcast_id()
{
	schedule_task(5,send_id, NULL);
    56d4:	20 e0       	ldi	r18, 0x00	; 0
    56d6:	30 e0       	ldi	r19, 0x00	; 0
    56d8:	4d e5       	ldi	r20, 0x5D	; 93
    56da:	58 e2       	ldi	r21, 0x28	; 40
    56dc:	65 e0       	ldi	r22, 0x05	; 5
    56de:	70 e0       	ldi	r23, 0x00	; 0
    56e0:	80 e0       	ldi	r24, 0x00	; 0
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	63 c9       	rjmp	.-3386   	; 0x49ac <schedule_task>
    56e6:	08 95       	ret

000056e8 <handle_get_id>:
}

void handle_get_id()
{
	printf("My ID is: %04X\r\n",get_droplet_id());
    56e8:	80 91 d5 29 	lds	r24, 0x29D5
    56ec:	8f 93       	push	r24
    56ee:	80 91 d4 29 	lds	r24, 0x29D4
    56f2:	8f 93       	push	r24
    56f4:	81 ee       	ldi	r24, 0xE1	; 225
    56f6:	95 e2       	ldi	r25, 0x25	; 37
    56f8:	9f 93       	push	r25
    56fa:	8f 93       	push	r24
    56fc:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5700:	0f 90       	pop	r0
    5702:	0f 90       	pop	r0
    5704:	0f 90       	pop	r0
    5706:	0f 90       	pop	r0
    5708:	08 95       	ret

0000570a <handle_cmd>:
		//set_rgb(0,0,0);
	//}
}

void handle_cmd(char* command_args)
{
    570a:	cf 93       	push	r28
    570c:	df 93       	push	r29
    570e:	d8 2f       	mov	r29, r24
    5710:	c9 2f       	mov	r28, r25
	printf("Broadcasting command: \"%s\", of length %i.\r\n",(uint8_t*)command_args, strlen(command_args));
    5712:	e8 2f       	mov	r30, r24
    5714:	f9 2f       	mov	r31, r25
    5716:	df 01       	movw	r26, r30
    5718:	0d 90       	ld	r0, X+
    571a:	00 20       	and	r0, r0
    571c:	e9 f7       	brne	.-6      	; 0x5718 <handle_cmd+0xe>
    571e:	11 97       	sbiw	r26, 0x01	; 1
    5720:	ae 1b       	sub	r26, r30
    5722:	bf 0b       	sbc	r27, r31
    5724:	bf 93       	push	r27
    5726:	af 93       	push	r26
    5728:	9f 93       	push	r25
    572a:	8f 93       	push	r24
    572c:	22 ef       	ldi	r18, 0xF2	; 242
    572e:	35 e2       	ldi	r19, 0x25	; 37
    5730:	3f 93       	push	r19
    5732:	2f 93       	push	r18
    5734:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
	#ifdef IS_SPECIAL
	ir_cmd(DIR0|DIR1|DIR3|DIR4, command_args,strlen(command_args));
	#else
	ir_cmd(ALL_DIRS, command_args,strlen(command_args));
    5738:	ed 2f       	mov	r30, r29
    573a:	fc 2f       	mov	r31, r28
    573c:	df 01       	movw	r26, r30
    573e:	0d 90       	ld	r0, X+
    5740:	00 20       	and	r0, r0
    5742:	e9 f7       	brne	.-6      	; 0x573e <handle_cmd+0x34>
    5744:	11 97       	sbiw	r26, 0x01	; 1
    5746:	ad 01       	movw	r20, r26
    5748:	4e 1b       	sub	r20, r30
    574a:	5f 0b       	sbc	r21, r31
    574c:	6d 2f       	mov	r22, r29
    574e:	7c 2f       	mov	r23, r28
    5750:	8f e3       	ldi	r24, 0x3F	; 63
    5752:	0e 94 77 0c 	call	0x18ee	; 0x18ee <ir_cmd>
    5756:	0f 90       	pop	r0
    5758:	0f 90       	pop	r0
    575a:	0f 90       	pop	r0
    575c:	0f 90       	pop	r0
    575e:	0f 90       	pop	r0
    5760:	0f 90       	pop	r0
	//
	//else
	//{
		//printf("\tIt wasn't OK to send command\r\n");
	//}
}
    5762:	df 91       	pop	r29
    5764:	cf 91       	pop	r28
    5766:	08 95       	ret

00005768 <handle_targeted_cmd>:

void handle_targeted_cmd(char* command_args)
{
    5768:	cf 92       	push	r12
    576a:	df 92       	push	r13
    576c:	ef 92       	push	r14
    576e:	ff 92       	push	r15
    5770:	0f 93       	push	r16
    5772:	1f 93       	push	r17
    5774:	cf 93       	push	r28
    5776:	df 93       	push	r29
    5778:	cd b7       	in	r28, 0x3d	; 61
    577a:	de b7       	in	r29, 0x3e	; 62
    577c:	a5 97       	sbiw	r28, 0x25	; 37
    577e:	cd bf       	out	0x3d, r28	; 61
    5780:	de bf       	out	0x3e, r29	; 62
    5782:	8c 01       	movw	r16, r24
	uint8_t loc = strcspn(command_args, " ");
    5784:	66 ea       	ldi	r22, 0xA6	; 166
    5786:	78 e2       	ldi	r23, 0x28	; 40
    5788:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <strcspn>
	char targetString[5];
	char cmdString[32];
	
	strncpy(targetString, command_args, loc);
    578c:	7c 01       	movw	r14, r24
    578e:	ff 24       	eor	r15, r15
    5790:	a7 01       	movw	r20, r14
    5792:	b8 01       	movw	r22, r16
    5794:	ce 01       	movw	r24, r28
    5796:	01 96       	adiw	r24, 0x01	; 1
    5798:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <strncpy>
	strcpy(cmdString, command_args+loc+1);
    579c:	8f ef       	ldi	r24, 0xFF	; 255
    579e:	e8 1a       	sub	r14, r24
    57a0:	f8 0a       	sbc	r15, r24
    57a2:	b8 01       	movw	r22, r16
    57a4:	6e 0d       	add	r22, r14
    57a6:	7f 1d       	adc	r23, r15
    57a8:	8e 01       	movw	r16, r28
    57aa:	0a 5f       	subi	r16, 0xFA	; 250
    57ac:	1f 4f       	sbci	r17, 0xFF	; 255
    57ae:	c8 01       	movw	r24, r16
    57b0:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <strcpy>
	
	uint16_t target = strtoul(targetString, NULL, 16);
    57b4:	40 e1       	ldi	r20, 0x10	; 16
    57b6:	50 e0       	ldi	r21, 0x00	; 0
    57b8:	60 e0       	ldi	r22, 0x00	; 0
    57ba:	70 e0       	ldi	r23, 0x00	; 0
    57bc:	ce 01       	movw	r24, r28
    57be:	01 96       	adiw	r24, 0x01	; 1
    57c0:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <strtoul>
    57c4:	6b 01       	movw	r12, r22
    57c6:	7c 01       	movw	r14, r24
	printf("command string: %s, length: %d\r\n",cmdString, strlen(cmdString));
    57c8:	f8 01       	movw	r30, r16
    57ca:	01 90       	ld	r0, Z+
    57cc:	00 20       	and	r0, r0
    57ce:	e9 f7       	brne	.-6      	; 0x57ca <handle_targeted_cmd+0x62>
    57d0:	31 97       	sbiw	r30, 0x01	; 1
    57d2:	e0 1b       	sub	r30, r16
    57d4:	f1 0b       	sbc	r31, r17
    57d6:	ff 93       	push	r31
    57d8:	ef 93       	push	r30
    57da:	1f 93       	push	r17
    57dc:	0f 93       	push	r16
    57de:	8e e1       	ldi	r24, 0x1E	; 30
    57e0:	96 e2       	ldi	r25, 0x26	; 38
    57e2:	9f 93       	push	r25
    57e4:	8f 93       	push	r24
    57e6:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
	#ifdef IS_SPECIAL
	ir_targeted_cmd(DIR0|DIR1|DIR3|DIR4, cmdString,strlen(cmdString), target);
	#else
	ir_targeted_cmd(ALL_DIRS, cmdString,strlen(cmdString), target);
    57ea:	f8 01       	movw	r30, r16
    57ec:	01 90       	ld	r0, Z+
    57ee:	00 20       	and	r0, r0
    57f0:	e9 f7       	brne	.-6      	; 0x57ec <handle_targeted_cmd+0x84>
    57f2:	31 97       	sbiw	r30, 0x01	; 1
    57f4:	af 01       	movw	r20, r30
    57f6:	40 1b       	sub	r20, r16
    57f8:	51 0b       	sbc	r21, r17
    57fa:	96 01       	movw	r18, r12
    57fc:	b8 01       	movw	r22, r16
    57fe:	8f e3       	ldi	r24, 0x3F	; 63
    5800:	0e 94 31 0c 	call	0x1862	; 0x1862 <ir_targeted_cmd>
    5804:	0f 90       	pop	r0
    5806:	0f 90       	pop	r0
    5808:	0f 90       	pop	r0
    580a:	0f 90       	pop	r0
    580c:	0f 90       	pop	r0
    580e:	0f 90       	pop	r0
	#endif	
}
    5810:	a5 96       	adiw	r28, 0x25	; 37
    5812:	cd bf       	out	0x3d, r28	; 61
    5814:	de bf       	out	0x3e, r29	; 62
    5816:	df 91       	pop	r29
    5818:	cf 91       	pop	r28
    581a:	1f 91       	pop	r17
    581c:	0f 91       	pop	r16
    581e:	ff 90       	pop	r15
    5820:	ef 90       	pop	r14
    5822:	df 90       	pop	r13
    5824:	cf 90       	pop	r12
    5826:	08 95       	ret

00005828 <handle_shout>:

void handle_shout(char* command_args)
{
    5828:	fc 01       	movw	r30, r24
	if(strlen(command_args)==0) command_args = "Unique New York.";
    582a:	80 81       	ld	r24, Z
    582c:	88 23       	and	r24, r24
    582e:	e1 f0       	breq	.+56     	; 0x5868 <handle_shout+0x40>
	else if(strlen(command_args)>IR_BUFFER_SIZE)
    5830:	df 01       	movw	r26, r30
    5832:	0d 90       	ld	r0, X+
    5834:	00 20       	and	r0, r0
    5836:	e9 f7       	brne	.-6      	; 0x5832 <handle_shout+0xa>
    5838:	11 97       	sbiw	r26, 0x01	; 1
    583a:	ae 1b       	sub	r26, r30
    583c:	bf 0b       	sbc	r27, r31
    583e:	a1 31       	cpi	r26, 0x11	; 17
    5840:	b1 05       	cpc	r27, r1
    5842:	a0 f0       	brcs	.+40     	; 0x586c <handle_shout+0x44>
	{ 
		printf("Message length was %d chars, which exceeds the maximum of %d", strlen(command_args), IR_BUFFER_SIZE);
    5844:	1f 92       	push	r1
    5846:	80 e1       	ldi	r24, 0x10	; 16
    5848:	8f 93       	push	r24
    584a:	bf 93       	push	r27
    584c:	af 93       	push	r26
    584e:	80 e5       	ldi	r24, 0x50	; 80
    5850:	96 e2       	ldi	r25, 0x26	; 38
    5852:	9f 93       	push	r25
    5854:	8f 93       	push	r24
    5856:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
		return;
    585a:	0f 90       	pop	r0
    585c:	0f 90       	pop	r0
    585e:	0f 90       	pop	r0
    5860:	0f 90       	pop	r0
    5862:	0f 90       	pop	r0
    5864:	0f 90       	pop	r0
    5866:	08 95       	ret
	#endif	
}

void handle_shout(char* command_args)
{
	if(strlen(command_args)==0) command_args = "Unique New York.";
    5868:	ef e3       	ldi	r30, 0x3F	; 63
    586a:	f6 e2       	ldi	r31, 0x26	; 38
		return;
	}
	#ifdef IS_SPECIAL
	ir_send(DIR0|DIR1|DIR3|DIR4, command_args,strlen(command_args));
	#else
	ir_send(ALL_DIRS, command_args,strlen(command_args));
    586c:	df 01       	movw	r26, r30
    586e:	0d 90       	ld	r0, X+
    5870:	00 20       	and	r0, r0
    5872:	e9 f7       	brne	.-6      	; 0x586e <handle_shout+0x46>
    5874:	11 97       	sbiw	r26, 0x01	; 1
    5876:	ad 01       	movw	r20, r26
    5878:	4e 1b       	sub	r20, r30
    587a:	5f 0b       	sbc	r21, r31
    587c:	bf 01       	movw	r22, r30
    587e:	8f e3       	ldi	r24, 0x3F	; 63
    5880:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <ir_send>
    5884:	08 95       	ret

00005886 <handle_target>:
	#endif
}

void handle_target(char* command_args)
{
    5886:	ef 92       	push	r14
    5888:	ff 92       	push	r15
    588a:	0f 93       	push	r16
    588c:	1f 93       	push	r17
    588e:	cf 93       	push	r28
    5890:	df 93       	push	r29
    5892:	cd b7       	in	r28, 0x3d	; 61
    5894:	de b7       	in	r29, 0x3e	; 62
    5896:	a5 97       	sbiw	r28, 0x25	; 37
    5898:	cd bf       	out	0x3d, r28	; 61
    589a:	de bf       	out	0x3e, r29	; 62
    589c:	8c 01       	movw	r16, r24
	uint8_t loc = strcspn(command_args, " ");
    589e:	66 ea       	ldi	r22, 0xA6	; 166
    58a0:	78 e2       	ldi	r23, 0x28	; 40
    58a2:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <strcspn>
	char targetString[5];
	char msgString[32];
	
	strncpy(targetString, command_args, loc);
    58a6:	7c 01       	movw	r14, r24
    58a8:	ff 24       	eor	r15, r15
    58aa:	a7 01       	movw	r20, r14
    58ac:	b8 01       	movw	r22, r16
    58ae:	ce 01       	movw	r24, r28
    58b0:	01 96       	adiw	r24, 0x01	; 1
    58b2:	0e 94 ad 3e 	call	0x7d5a	; 0x7d5a <strncpy>
	strcpy(msgString, command_args+loc);
    58b6:	b8 01       	movw	r22, r16
    58b8:	6e 0d       	add	r22, r14
    58ba:	7f 1d       	adc	r23, r15
    58bc:	8e 01       	movw	r16, r28
    58be:	0a 5f       	subi	r16, 0xFA	; 250
    58c0:	1f 4f       	sbci	r17, 0xFF	; 255
    58c2:	c8 01       	movw	r24, r16
    58c4:	0e 94 97 3e 	call	0x7d2e	; 0x7d2e <strcpy>
	
	
	uint16_t target = strtoul(targetString, NULL, 16);
    58c8:	40 e1       	ldi	r20, 0x10	; 16
    58ca:	50 e0       	ldi	r21, 0x00	; 0
    58cc:	60 e0       	ldi	r22, 0x00	; 0
    58ce:	70 e0       	ldi	r23, 0x00	; 0
    58d0:	ce 01       	movw	r24, r28
    58d2:	01 96       	adiw	r24, 0x01	; 1
    58d4:	0e 94 69 3c 	call	0x78d2	; 0x78d2 <strtoul>
	
	//printf("Target: %04X\r\n",target);
	#ifdef IS_SPECIAL
	ir_targeted_send(DIR0|DIR1|DIR3|DIR4, msgString,strlen(msgString), target);
	#else	
	ir_targeted_send(ALL_DIRS, msgString,strlen(msgString), target);
    58d8:	f8 01       	movw	r30, r16
    58da:	01 90       	ld	r0, Z+
    58dc:	00 20       	and	r0, r0
    58de:	e9 f7       	brne	.-6      	; 0x58da <handle_target+0x54>
    58e0:	31 97       	sbiw	r30, 0x01	; 1
    58e2:	af 01       	movw	r20, r30
    58e4:	40 1b       	sub	r20, r16
    58e6:	51 0b       	sbc	r21, r17
    58e8:	9b 01       	movw	r18, r22
    58ea:	b8 01       	movw	r22, r16
    58ec:	8f e3       	ldi	r24, 0x3F	; 63
    58ee:	0e 94 bf 0c 	call	0x197e	; 0x197e <ir_targeted_send>
	#endif
} 
    58f2:	a5 96       	adiw	r28, 0x25	; 37
    58f4:	cd bf       	out	0x3d, r28	; 61
    58f6:	de bf       	out	0x3e, r29	; 62
    58f8:	df 91       	pop	r29
    58fa:	cf 91       	pop	r28
    58fc:	1f 91       	pop	r17
    58fe:	0f 91       	pop	r16
    5900:	ff 90       	pop	r15
    5902:	ef 90       	pop	r14
    5904:	08 95       	ret

00005906 <get_command_word_and_args>:


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
    5906:	0f 93       	push	r16
    5908:	1f 93       	push	r17
    590a:	cf 93       	push	r28
    590c:	df 93       	push	r29
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    590e:	61 15       	cp	r22, r1
    5910:	71 05       	cpc	r23, r1
    5912:	79 f1       	breq	.+94     	; 0x5972 <get_command_word_and_args+0x6c>
	{
		if(command[i]=='\0')
    5914:	fc 01       	movw	r30, r24
    5916:	10 81       	ld	r17, Z
    5918:	11 23       	and	r17, r17
    591a:	71 f1       	breq	.+92     	; 0x5978 <get_command_word_and_args+0x72>
    591c:	dc 01       	movw	r26, r24
    591e:	11 96       	adiw	r26, 0x01	; 1
    5920:	68 0f       	add	r22, r24
    5922:	79 1f       	adc	r23, r25


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
    5924:	01 e0       	ldi	r16, 0x01	; 1
} 


void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
    5926:	e0 e0       	ldi	r30, 0x00	; 0
    5928:	f0 e0       	ldi	r31, 0x00	; 0
    592a:	03 c0       	rjmp	.+6      	; 0x5932 <get_command_word_and_args+0x2c>
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
	{
		if(command[i]=='\0')
    592c:	1d 91       	ld	r17, X+
    592e:	11 23       	and	r17, r17
    5930:	e1 f0       	breq	.+56     	; 0x596a <get_command_word_and_args+0x64>
		{
			break;
		}
		else if(command[i]==' ' && writing_word_boole == 1)
    5932:	10 32       	cpi	r17, 0x20	; 32
    5934:	49 f4       	brne	.+18     	; 0x5948 <get_command_word_and_args+0x42>
    5936:	01 30       	cpi	r16, 0x01	; 1
    5938:	71 f4       	brne	.+28     	; 0x5956 <get_command_word_and_args+0x50>
		{
			command_word[write_index]='\0';
    593a:	e4 0f       	add	r30, r20
    593c:	f5 1f       	adc	r31, r21
    593e:	10 82       	st	Z, r1
			write_index = 0;
			writing_word_boole = 0;
    5940:	00 e0       	ldi	r16, 0x00	; 0
			break;
		}
		else if(command[i]==' ' && writing_word_boole == 1)
		{
			command_word[write_index]='\0';
			write_index = 0;
    5942:	e0 e0       	ldi	r30, 0x00	; 0
    5944:	f0 e0       	ldi	r31, 0x00	; 0
			writing_word_boole = 0;
    5946:	0c c0       	rjmp	.+24     	; 0x5960 <get_command_word_and_args+0x5a>
		}
		else
		{
			if(writing_word_boole==1)
    5948:	01 30       	cpi	r16, 0x01	; 1
    594a:	29 f4       	brne	.+10     	; 0x5956 <get_command_word_and_args+0x50>
			{
				command_word[write_index] = command[i];
    594c:	ea 01       	movw	r28, r20
    594e:	ce 0f       	add	r28, r30
    5950:	df 1f       	adc	r29, r31
    5952:	18 83       	st	Y, r17
    5954:	04 c0       	rjmp	.+8      	; 0x595e <get_command_word_and_args+0x58>
			}
			else
			{
				command_args[write_index] = command[i];
    5956:	e9 01       	movw	r28, r18
    5958:	ce 0f       	add	r28, r30
    595a:	df 1f       	adc	r29, r31
    595c:	18 83       	st	Y, r17
			}
			write_index++;
    595e:	31 96       	adiw	r30, 0x01	; 1

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    5960:	a6 17       	cp	r26, r22
    5962:	b7 07       	cpc	r27, r23
    5964:	19 f7       	brne	.-58     	; 0x592c <get_command_word_and_args+0x26>
    5966:	cf 01       	movw	r24, r30
    5968:	01 c0       	rjmp	.+2      	; 0x596c <get_command_word_and_args+0x66>
    596a:	cf 01       	movw	r24, r30
				command_args[write_index] = command[i];
			}
			write_index++;
		}
	}
	if(writing_word_boole==1)
    596c:	01 30       	cpi	r16, 0x01	; 1
    596e:	61 f4       	brne	.+24     	; 0x5988 <get_command_word_and_args+0x82>
    5970:	05 c0       	rjmp	.+10     	; 0x597c <get_command_word_and_args+0x76>

void get_command_word_and_args(char* command, uint16_t command_length, char* command_word, char* command_args)
{
	uint16_t write_index = 0;
	uint8_t writing_word_boole = 1;
	for(uint16_t i=0 ; i<command_length ; i++)
    5972:	e0 e0       	ldi	r30, 0x00	; 0
    5974:	f0 e0       	ldi	r31, 0x00	; 0
    5976:	02 c0       	rjmp	.+4      	; 0x597c <get_command_word_and_args+0x76>
	{
		if(command[i]=='\0')
    5978:	e0 e0       	ldi	r30, 0x00	; 0
    597a:	f0 e0       	ldi	r31, 0x00	; 0
			write_index++;
		}
	}
	if(writing_word_boole==1)
	{
		command_word[write_index] = '\0';
    597c:	e4 0f       	add	r30, r20
    597e:	f5 1f       	adc	r31, r21
    5980:	10 82       	st	Z, r1
		command_args[0] = '\0';
    5982:	f9 01       	movw	r30, r18
    5984:	10 82       	st	Z, r1
    5986:	04 c0       	rjmp	.+8      	; 0x5990 <get_command_word_and_args+0x8a>
	}
	else
	{
		command_args[write_index] = '\0';
    5988:	f9 01       	movw	r30, r18
    598a:	e8 0f       	add	r30, r24
    598c:	f9 1f       	adc	r31, r25
    598e:	10 82       	st	Z, r1
	}
}
    5990:	df 91       	pop	r29
    5992:	cf 91       	pop	r28
    5994:	1f 91       	pop	r17
    5996:	0f 91       	pop	r16
    5998:	08 95       	ret

0000599a <handle_serial_command>:
//#define IS_SPECIAL 1

uint8_t user_handle_command(char* command_word, char* command_args) __attribute__((weak));

void handle_serial_command(char* command, uint16_t command_length)
{
    599a:	cf 93       	push	r28
    599c:	df 93       	push	r29
    599e:	cd b7       	in	r28, 0x3d	; 61
    59a0:	de b7       	in	r29, 0x3e	; 62
    59a2:	c0 58       	subi	r28, 0x80	; 128
    59a4:	d1 09       	sbc	r29, r1
    59a6:	cd bf       	out	0x3d, r28	; 61
    59a8:	de bf       	out	0x3e, r29	; 62
	//last_serial_command_time = command_time;
	//printf("Got command \"%s\".\r\n",command);
	//printf("command_time: %lu | last_command_time: %lu\r\n", command_time, last_serial_command_time);
	if(command[0]!='\0') //Not much to handle if we get an empty string.
    59aa:	fc 01       	movw	r30, r24
    59ac:	20 81       	ld	r18, Z
    59ae:	22 23       	and	r18, r18
    59b0:	09 f4       	brne	.+2      	; 0x59b4 <handle_serial_command+0x1a>
    59b2:	4e c1       	rjmp	.+668    	; 0x5c50 <handle_serial_command+0x2b6>
	{
		char command_word[BUFFER_SIZE];
		char command_args[BUFFER_SIZE];
		get_command_word_and_args(command,command_length,command_word,command_args);
    59b4:	9e 01       	movw	r18, r28
    59b6:	2f 5f       	subi	r18, 0xFF	; 255
    59b8:	3f 4f       	sbci	r19, 0xFF	; 255
    59ba:	ae 01       	movw	r20, r28
    59bc:	4f 5b       	subi	r20, 0xBF	; 191
    59be:	5f 4f       	sbci	r21, 0xFF	; 255
    59c0:	a2 df       	rcall	.-188    	; 0x5906 <get_command_word_and_args>
		if(strcmp(command_word,"move_steps")==0)					handle_move_steps(command_args);
    59c2:	6d e8       	ldi	r22, 0x8D	; 141
    59c4:	76 e2       	ldi	r23, 0x26	; 38
    59c6:	ce 01       	movw	r24, r28
    59c8:	8f 5b       	subi	r24, 0xBF	; 191
    59ca:	9f 4f       	sbci	r25, 0xFF	; 255
    59cc:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    59d0:	89 2b       	or	r24, r25
    59d2:	21 f4       	brne	.+8      	; 0x59dc <handle_serial_command+0x42>
    59d4:	ce 01       	movw	r24, r28
    59d6:	01 96       	adiw	r24, 0x01	; 1
    59d8:	bc db       	rcall	.-2184   	; 0x5152 <handle_move_steps>
    59da:	3a c1       	rjmp	.+628    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"walk")==0)						handle_walk(command_args);
    59dc:	61 eb       	ldi	r22, 0xB1	; 177
    59de:	76 e2       	ldi	r23, 0x26	; 38
    59e0:	ce 01       	movw	r24, r28
    59e2:	8f 5b       	subi	r24, 0xBF	; 191
    59e4:	9f 4f       	sbci	r25, 0xFF	; 255
    59e6:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    59ea:	89 2b       	or	r24, r25
    59ec:	21 f4       	brne	.+8      	; 0x59f6 <handle_serial_command+0x5c>
    59ee:	ce 01       	movw	r24, r28
    59f0:	01 96       	adiw	r24, 0x01	; 1
    59f2:	f5 db       	rcall	.-2070   	; 0x51de <handle_walk>
    59f4:	2d c1       	rjmp	.+602    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word, "get_rgb")==0)					handle_get_rgb();
    59f6:	68 e9       	ldi	r22, 0x98	; 152
    59f8:	76 e2       	ldi	r23, 0x26	; 38
    59fa:	ce 01       	movw	r24, r28
    59fc:	8f 5b       	subi	r24, 0xBF	; 191
    59fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5a00:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5a04:	89 2b       	or	r24, r25
    5a06:	11 f4       	brne	.+4      	; 0x5a0c <handle_serial_command+0x72>
    5a08:	10 dc       	rcall	.-2016   	; 0x522a <handle_get_rgb>
    5a0a:	22 c1       	rjmp	.+580    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"set_ir")==0)					handle_set_ir(command_args);
    5a0c:	60 ea       	ldi	r22, 0xA0	; 160
    5a0e:	76 e2       	ldi	r23, 0x26	; 38
    5a10:	ce 01       	movw	r24, r28
    5a12:	8f 5b       	subi	r24, 0xBF	; 191
    5a14:	9f 4f       	sbci	r25, 0xFF	; 255
    5a16:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5a1a:	89 2b       	or	r24, r25
    5a1c:	21 f4       	brne	.+8      	; 0x5a26 <handle_serial_command+0x8c>
    5a1e:	ce 01       	movw	r24, r28
    5a20:	01 96       	adiw	r24, 0x01	; 1
    5a22:	28 dc       	rcall	.-1968   	; 0x5274 <handle_set_ir>
    5a24:	15 c1       	rjmp	.+554    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"coll")==0)						handle_check_collisions();
    5a26:	67 ea       	ldi	r22, 0xA7	; 167
    5a28:	76 e2       	ldi	r23, 0x26	; 38
    5a2a:	ce 01       	movw	r24, r28
    5a2c:	8f 5b       	subi	r24, 0xBF	; 191
    5a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a30:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5a34:	89 2b       	or	r24, r25
    5a36:	11 f4       	brne	.+4      	; 0x5a3c <handle_serial_command+0xa2>
    5a38:	4c db       	rcall	.-2408   	; 0x50d2 <handle_check_collisions>
    5a3a:	0a c1       	rjmp	.+532    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"stop_walk")==0)				handle_stop_walk();
    5a3c:	6c ea       	ldi	r22, 0xAC	; 172
    5a3e:	76 e2       	ldi	r23, 0x26	; 38
    5a40:	ce 01       	movw	r24, r28
    5a42:	8f 5b       	subi	r24, 0xBF	; 191
    5a44:	9f 4f       	sbci	r25, 0xFF	; 255
    5a46:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5a4a:	89 2b       	or	r24, r25
    5a4c:	11 f4       	brne	.+4      	; 0x5a52 <handle_serial_command+0xb8>
    5a4e:	2a dc       	rcall	.-1964   	; 0x52a4 <handle_stop_walk>
    5a50:	ff c0       	rjmp	.+510    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"set_motors")==0)				handle_set_motors(command_args);
    5a52:	66 eb       	ldi	r22, 0xB6	; 182
    5a54:	76 e2       	ldi	r23, 0x26	; 38
    5a56:	ce 01       	movw	r24, r28
    5a58:	8f 5b       	subi	r24, 0xBF	; 191
    5a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a5c:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5a60:	89 2b       	or	r24, r25
    5a62:	21 f4       	brne	.+8      	; 0x5a6c <handle_serial_command+0xd2>
    5a64:	ce 01       	movw	r24, r28
    5a66:	01 96       	adiw	r24, 0x01	; 1
    5a68:	2c dc       	rcall	.-1960   	; 0x52c2 <handle_set_motors>
    5a6a:	f2 c0       	rjmp	.+484    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"set_dist_per_step")==0)		handle_set_mm_per_kilostep(command_args);
    5a6c:	61 ec       	ldi	r22, 0xC1	; 193
    5a6e:	76 e2       	ldi	r23, 0x26	; 38
    5a70:	ce 01       	movw	r24, r28
    5a72:	8f 5b       	subi	r24, 0xBF	; 191
    5a74:	9f 4f       	sbci	r25, 0xFF	; 255
    5a76:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5a7a:	89 2b       	or	r24, r25
    5a7c:	21 f4       	brne	.+8      	; 0x5a86 <handle_serial_command+0xec>
    5a7e:	ce 01       	movw	r24, r28
    5a80:	01 96       	adiw	r24, 0x01	; 1
    5a82:	b7 dc       	rcall	.-1682   	; 0x53f2 <handle_set_mm_per_kilostep>
    5a84:	e5 c0       	rjmp	.+458    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"rnb_b")==0)					handle_rnb_broadcast();
    5a86:	63 ed       	ldi	r22, 0xD3	; 211
    5a88:	76 e2       	ldi	r23, 0x26	; 38
    5a8a:	ce 01       	movw	r24, r28
    5a8c:	8f 5b       	subi	r24, 0xBF	; 191
    5a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a90:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5a94:	89 2b       	or	r24, r25
    5a96:	11 f4       	brne	.+4      	; 0x5a9c <handle_serial_command+0x102>
    5a98:	d2 dc       	rcall	.-1628   	; 0x543e <handle_rnb_broadcast>
    5a9a:	da c0       	rjmp	.+436    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"rnb_c")==0)					handle_rnb_collect(command_args);
    5a9c:	69 ed       	ldi	r22, 0xD9	; 217
    5a9e:	76 e2       	ldi	r23, 0x26	; 38
    5aa0:	ce 01       	movw	r24, r28
    5aa2:	8f 5b       	subi	r24, 0xBF	; 191
    5aa4:	9f 4f       	sbci	r25, 0xFF	; 255
    5aa6:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5aaa:	89 2b       	or	r24, r25
    5aac:	21 f4       	brne	.+8      	; 0x5ab6 <handle_serial_command+0x11c>
    5aae:	ce 01       	movw	r24, r28
    5ab0:	01 96       	adiw	r24, 0x01	; 1
    5ab2:	cf dc       	rcall	.-1634   	; 0x5452 <handle_rnb_collect>
    5ab4:	cd c0       	rjmp	.+410    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word, "rnb_t")==0)					handle_rnb_transmit(command_args);
    5ab6:	6f ed       	ldi	r22, 0xDF	; 223
    5ab8:	76 e2       	ldi	r23, 0x26	; 38
    5aba:	ce 01       	movw	r24, r28
    5abc:	8f 5b       	subi	r24, 0xBF	; 191
    5abe:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac0:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5ac4:	89 2b       	or	r24, r25
    5ac6:	21 f4       	brne	.+8      	; 0x5ad0 <handle_serial_command+0x136>
    5ac8:	ce 01       	movw	r24, r28
    5aca:	01 96       	adiw	r24, 0x01	; 1
    5acc:	f9 dc       	rcall	.-1550   	; 0x54c0 <handle_rnb_transmit>
    5ace:	c0 c0       	rjmp	.+384    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"rnb_r")==0)					handle_rnb_receive();
    5ad0:	69 ea       	ldi	r22, 0xA9	; 169
    5ad2:	72 e2       	ldi	r23, 0x22	; 34
    5ad4:	ce 01       	movw	r24, r28
    5ad6:	8f 5b       	subi	r24, 0xBF	; 191
    5ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    5ada:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5ade:	89 2b       	or	r24, r25
    5ae0:	11 f4       	brne	.+4      	; 0x5ae6 <handle_serial_command+0x14c>
    5ae2:	1a dd       	rcall	.-1484   	; 0x5518 <handle_rnb_receive>
    5ae4:	b5 c0       	rjmp	.+362    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"set_led")==0)					handle_set_led(command_args);
    5ae6:	65 ee       	ldi	r22, 0xE5	; 229
    5ae8:	76 e2       	ldi	r23, 0x26	; 38
    5aea:	ce 01       	movw	r24, r28
    5aec:	8f 5b       	subi	r24, 0xBF	; 191
    5aee:	9f 4f       	sbci	r25, 0xFF	; 255
    5af0:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5af4:	89 2b       	or	r24, r25
    5af6:	21 f4       	brne	.+8      	; 0x5b00 <handle_serial_command+0x166>
    5af8:	ce 01       	movw	r24, r28
    5afa:	01 96       	adiw	r24, 0x01	; 1
    5afc:	34 dd       	rcall	.-1432   	; 0x5566 <handle_set_led>
    5afe:	a8 c0       	rjmp	.+336    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"get_id")==0)					handle_get_id();
    5b00:	6d ee       	ldi	r22, 0xED	; 237
    5b02:	76 e2       	ldi	r23, 0x26	; 38
    5b04:	ce 01       	movw	r24, r28
    5b06:	8f 5b       	subi	r24, 0xBF	; 191
    5b08:	9f 4f       	sbci	r25, 0xFF	; 255
    5b0a:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5b0e:	89 2b       	or	r24, r25
    5b10:	11 f4       	brne	.+4      	; 0x5b16 <handle_serial_command+0x17c>
    5b12:	ea dd       	rcall	.-1068   	; 0x56e8 <handle_get_id>
    5b14:	9d c0       	rjmp	.+314    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"broadcast_id")==0)				handle_broadcast_id();
    5b16:	64 ef       	ldi	r22, 0xF4	; 244
    5b18:	76 e2       	ldi	r23, 0x26	; 38
    5b1a:	ce 01       	movw	r24, r28
    5b1c:	8f 5b       	subi	r24, 0xBF	; 191
    5b1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b20:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5b24:	89 2b       	or	r24, r25
    5b26:	11 f4       	brne	.+4      	; 0x5b2c <handle_serial_command+0x192>
    5b28:	d5 dd       	rcall	.-1110   	; 0x56d4 <handle_broadcast_id>
    5b2a:	92 c0       	rjmp	.+292    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"cmd")==0)						handle_cmd(command_args);
    5b2c:	65 e0       	ldi	r22, 0x05	; 5
    5b2e:	77 e2       	ldi	r23, 0x27	; 39
    5b30:	ce 01       	movw	r24, r28
    5b32:	8f 5b       	subi	r24, 0xBF	; 191
    5b34:	9f 4f       	sbci	r25, 0xFF	; 255
    5b36:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5b3a:	89 2b       	or	r24, r25
    5b3c:	21 f4       	brne	.+8      	; 0x5b46 <handle_serial_command+0x1ac>
    5b3e:	ce 01       	movw	r24, r28
    5b40:	01 96       	adiw	r24, 0x01	; 1
    5b42:	e3 dd       	rcall	.-1082   	; 0x570a <handle_cmd>
    5b44:	85 c0       	rjmp	.+266    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"tgt_cmd")==0)					handle_targeted_cmd(command_args);
    5b46:	61 e0       	ldi	r22, 0x01	; 1
    5b48:	77 e2       	ldi	r23, 0x27	; 39
    5b4a:	ce 01       	movw	r24, r28
    5b4c:	8f 5b       	subi	r24, 0xBF	; 191
    5b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b50:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5b54:	89 2b       	or	r24, r25
    5b56:	21 f4       	brne	.+8      	; 0x5b60 <handle_serial_command+0x1c6>
    5b58:	ce 01       	movw	r24, r28
    5b5a:	01 96       	adiw	r24, 0x01	; 1
    5b5c:	05 de       	rcall	.-1014   	; 0x5768 <handle_targeted_cmd>
    5b5e:	78 c0       	rjmp	.+240    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"msg")==0)						handle_shout(command_args);
    5b60:	69 e0       	ldi	r22, 0x09	; 9
    5b62:	77 e2       	ldi	r23, 0x27	; 39
    5b64:	ce 01       	movw	r24, r28
    5b66:	8f 5b       	subi	r24, 0xBF	; 191
    5b68:	9f 4f       	sbci	r25, 0xFF	; 255
    5b6a:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5b6e:	89 2b       	or	r24, r25
    5b70:	21 f4       	brne	.+8      	; 0x5b7a <handle_serial_command+0x1e0>
    5b72:	ce 01       	movw	r24, r28
    5b74:	01 96       	adiw	r24, 0x01	; 1
    5b76:	58 de       	rcall	.-848    	; 0x5828 <handle_shout>
    5b78:	6b c0       	rjmp	.+214    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"tgt")==0)						handle_target(command_args);
    5b7a:	6d e0       	ldi	r22, 0x0D	; 13
    5b7c:	77 e2       	ldi	r23, 0x27	; 39
    5b7e:	ce 01       	movw	r24, r28
    5b80:	8f 5b       	subi	r24, 0xBF	; 191
    5b82:	9f 4f       	sbci	r25, 0xFF	; 255
    5b84:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5b88:	89 2b       	or	r24, r25
    5b8a:	21 f4       	brne	.+8      	; 0x5b94 <handle_serial_command+0x1fa>
    5b8c:	ce 01       	movw	r24, r28
    5b8e:	01 96       	adiw	r24, 0x01	; 1
    5b90:	7a de       	rcall	.-780    	; 0x5886 <handle_target>
    5b92:	5e c0       	rjmp	.+188    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"tasks")==0)					print_task_queue();
    5b94:	61 e1       	ldi	r22, 0x11	; 17
    5b96:	77 e2       	ldi	r23, 0x27	; 39
    5b98:	ce 01       	movw	r24, r28
    5b9a:	8f 5b       	subi	r24, 0xBF	; 191
    5b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    5b9e:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5ba2:	89 2b       	or	r24, r25
    5ba4:	11 f4       	brne	.+4      	; 0x5baa <handle_serial_command+0x210>
    5ba6:	40 d9       	rcall	.-3456   	; 0x4e28 <print_task_queue>
    5ba8:	53 c0       	rjmp	.+166    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"reset")==0)					handle_reset();
    5baa:	67 e1       	ldi	r22, 0x17	; 23
    5bac:	77 e2       	ldi	r23, 0x27	; 39
    5bae:	ce 01       	movw	r24, r28
    5bb0:	8f 5b       	subi	r24, 0xBF	; 191
    5bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb4:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5bb8:	89 2b       	or	r24, r25
    5bba:	19 f4       	brne	.+6      	; 0x5bc2 <handle_serial_command+0x228>
	}
}

void handle_reset()
{
	droplet_reboot();
    5bbc:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <droplet_reboot>
    5bc0:	47 c0       	rjmp	.+142    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"tgt_cmd")==0)					handle_targeted_cmd(command_args);
		else if(strcmp(command_word,"msg")==0)						handle_shout(command_args);
		else if(strcmp(command_word,"tgt")==0)						handle_target(command_args);
		else if(strcmp(command_word,"tasks")==0)					print_task_queue();
		else if(strcmp(command_word,"reset")==0)					handle_reset();
		else if(strcmp(command_word,"write_motor_settings")==0)		write_motor_settings();
    5bc2:	6d e1       	ldi	r22, 0x1D	; 29
    5bc4:	77 e2       	ldi	r23, 0x27	; 39
    5bc6:	ce 01       	movw	r24, r28
    5bc8:	8f 5b       	subi	r24, 0xBF	; 191
    5bca:	9f 4f       	sbci	r25, 0xFF	; 255
    5bcc:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5bd0:	89 2b       	or	r24, r25
    5bd2:	19 f4       	brne	.+6      	; 0x5bda <handle_serial_command+0x240>
    5bd4:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <write_motor_settings>
    5bd8:	3b c0       	rjmp	.+118    	; 0x5c50 <handle_serial_command+0x2b6>
		else if(strcmp(command_word,"print_motor_settings")==0){
    5bda:	62 e3       	ldi	r22, 0x32	; 50
    5bdc:	77 e2       	ldi	r23, 0x27	; 39
    5bde:	ce 01       	movw	r24, r28
    5be0:	8f 5b       	subi	r24, 0xBF	; 191
    5be2:	9f 4f       	sbci	r25, 0xFF	; 255
    5be4:	0e 94 8e 3e 	call	0x7d1c	; 0x7d1c <strcmp>
    5be8:	89 2b       	or	r24, r25
    5bea:	29 f4       	brne	.+10     	; 0x5bf6 <handle_serial_command+0x25c>
																	print_motor_values();
    5bec:	0e 94 10 15 	call	0x2a20	; 0x2a20 <print_motor_values>
																	print_dist_per_step();																	
    5bf0:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <print_dist_per_step>
    5bf4:	2d c0       	rjmp	.+90     	; 0x5c50 <handle_serial_command+0x2b6>
		}else if(user_handle_command) //First, make sure the function is defined
    5bf6:	80 e0       	ldi	r24, 0x00	; 0
    5bf8:	90 e0       	ldi	r25, 0x00	; 0
    5bfa:	89 2b       	or	r24, r25
    5bfc:	d1 f0       	breq	.+52     	; 0x5c32 <handle_serial_command+0x298>
		{
			if(!user_handle_command(command_word, command_args))	printf("\tCommand ( %s ) not recognized.\r\n",command_word);
    5bfe:	be 01       	movw	r22, r28
    5c00:	6f 5f       	subi	r22, 0xFF	; 255
    5c02:	7f 4f       	sbci	r23, 0xFF	; 255
    5c04:	ce 01       	movw	r24, r28
    5c06:	8f 5b       	subi	r24, 0xBF	; 191
    5c08:	9f 4f       	sbci	r25, 0xFF	; 255
    5c0a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    5c0e:	81 11       	cpse	r24, r1
    5c10:	1f c0       	rjmp	.+62     	; 0x5c50 <handle_serial_command+0x2b6>
    5c12:	ce 01       	movw	r24, r28
    5c14:	8f 5b       	subi	r24, 0xBF	; 191
    5c16:	9f 4f       	sbci	r25, 0xFF	; 255
    5c18:	9f 93       	push	r25
    5c1a:	8f 93       	push	r24
    5c1c:	87 e4       	ldi	r24, 0x47	; 71
    5c1e:	97 e2       	ldi	r25, 0x27	; 39
    5c20:	9f 93       	push	r25
    5c22:	8f 93       	push	r24
    5c24:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5c28:	0f 90       	pop	r0
    5c2a:	0f 90       	pop	r0
    5c2c:	0f 90       	pop	r0
    5c2e:	0f 90       	pop	r0
    5c30:	0f c0       	rjmp	.+30     	; 0x5c50 <handle_serial_command+0x2b6>
		}
		else														printf("\tCommand ( %s ) not recognized.\r\n",command_word);
    5c32:	ce 01       	movw	r24, r28
    5c34:	8f 5b       	subi	r24, 0xBF	; 191
    5c36:	9f 4f       	sbci	r25, 0xFF	; 255
    5c38:	9f 93       	push	r25
    5c3a:	8f 93       	push	r24
    5c3c:	87 e4       	ldi	r24, 0x47	; 71
    5c3e:	97 e2       	ldi	r25, 0x27	; 39
    5c40:	9f 93       	push	r25
    5c42:	8f 93       	push	r24
    5c44:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5c48:	0f 90       	pop	r0
    5c4a:	0f 90       	pop	r0
    5c4c:	0f 90       	pop	r0
    5c4e:	0f 90       	pop	r0
	}
}
    5c50:	c0 58       	subi	r28, 0x80	; 128
    5c52:	df 4f       	sbci	r29, 0xFF	; 255
    5c54:	cd bf       	out	0x3d, r28	; 61
    5c56:	de bf       	out	0x3e, r29	; 62
    5c58:	df 91       	pop	r29
    5c5a:	cf 91       	pop	r28
    5c5c:	08 95       	ret

00005c5e <update_near_atoms>:
	for(uint8_t i = 0; i < 8; i++)
	{
		if(myID.valence[i] == 0) return 0; //false
	}
	return 1; //true
}
    5c5e:	e9 ea       	ldi	r30, 0xA9	; 169
    5c60:	fd e2       	ldi	r31, 0x2D	; 45
    5c62:	21 eb       	ldi	r18, 0xB1	; 177
    5c64:	3e e2       	ldi	r19, 0x2E	; 46
    5c66:	a0 eb       	ldi	r26, 0xB0	; 176
    5c68:	bd e2       	ldi	r27, 0x2D	; 45
    5c6a:	80 81       	ld	r24, Z
    5c6c:	91 81       	ldd	r25, Z+1	; 0x01
    5c6e:	89 2b       	or	r24, r25
    5c70:	19 f0       	breq	.+6      	; 0x5c78 <update_near_atoms+0x1a>
    5c72:	8c 91       	ld	r24, X
    5c74:	8c 59       	subi	r24, 0x9C	; 156
    5c76:	8c 93       	st	X, r24
    5c78:	76 96       	adiw	r30, 0x16	; 22
    5c7a:	e2 17       	cp	r30, r18
    5c7c:	f3 07       	cpc	r31, r19
    5c7e:	a9 f7       	brne	.-22     	; 0x5c6a <update_near_atoms+0xc>
    5c80:	20 e0       	ldi	r18, 0x00	; 0
    5c82:	30 e0       	ldi	r19, 0x00	; 0
    5c84:	4f e2       	ldi	r20, 0x2F	; 47
    5c86:	5e e2       	ldi	r21, 0x2E	; 46
    5c88:	6c e2       	ldi	r22, 0x2C	; 44
    5c8a:	71 e0       	ldi	r23, 0x01	; 1
    5c8c:	80 e0       	ldi	r24, 0x00	; 0
    5c8e:	90 e0       	ldi	r25, 0x00	; 0
    5c90:	0c 94 d6 24 	jmp	0x49ac	; 0x49ac <schedule_task>
    5c94:	08 95       	ret

00005c96 <print_near_atoms>:
    5c96:	cf 92       	push	r12
    5c98:	df 92       	push	r13
    5c9a:	ef 92       	push	r14
    5c9c:	ff 92       	push	r15
    5c9e:	0f 93       	push	r16
    5ca0:	1f 93       	push	r17
    5ca2:	cf 93       	push	r28
    5ca4:	df 93       	push	r29
    5ca6:	89 e6       	ldi	r24, 0x69	; 105
    5ca8:	97 e2       	ldi	r25, 0x27	; 39
    5caa:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    5cae:	80 91 a9 2d 	lds	r24, 0x2DA9
    5cb2:	90 91 aa 2d 	lds	r25, 0x2DAA
    5cb6:	00 97       	sbiw	r24, 0x00	; 0
    5cb8:	09 f0       	breq	.+2      	; 0x5cbc <print_near_atoms+0x26>
    5cba:	43 c0       	rjmp	.+134    	; 0x5d42 <print_near_atoms+0xac>
    5cbc:	1b c0       	rjmp	.+54     	; 0x5cf4 <print_near_atoms+0x5e>
    5cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    5cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    5cc2:	00 97       	sbiw	r24, 0x00	; 0
    5cc4:	b9 f0       	breq	.+46     	; 0x5cf4 <print_near_atoms+0x5e>
    5cc6:	9f 93       	push	r25
    5cc8:	8f 93       	push	r24
    5cca:	f8 01       	movw	r30, r16
    5ccc:	80 81       	ld	r24, Z
    5cce:	1f 92       	push	r1
    5cd0:	8f 93       	push	r24
    5cd2:	df 93       	push	r29
    5cd4:	cf 93       	push	r28
    5cd6:	ff 92       	push	r15
    5cd8:	ef 92       	push	r14
    5cda:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5cde:	0a 5e       	subi	r16, 0xEA	; 234
    5ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    5ce2:	66 96       	adiw	r28, 0x16	; 22
    5ce4:	ed b7       	in	r30, 0x3d	; 61
    5ce6:	fe b7       	in	r31, 0x3e	; 62
    5ce8:	38 96       	adiw	r30, 0x08	; 8
    5cea:	ed bf       	out	0x3d, r30	; 61
    5cec:	fe bf       	out	0x3e, r31	; 62
    5cee:	cc 15       	cp	r28, r12
    5cf0:	dd 05       	cpc	r29, r13
    5cf2:	29 f7       	brne	.-54     	; 0x5cbe <print_near_atoms+0x28>
    5cf4:	80 ed       	ldi	r24, 0xD0	; 208
    5cf6:	99 e2       	ldi	r25, 0x29	; 41
    5cf8:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    5cfc:	80 ed       	ldi	r24, 0xD0	; 208
    5cfe:	99 e2       	ldi	r25, 0x29	; 41
    5d00:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    5d04:	8f e9       	ldi	r24, 0x9F	; 159
    5d06:	97 e2       	ldi	r25, 0x27	; 39
    5d08:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    5d0c:	c6 ea       	ldi	r28, 0xA6	; 166
    5d0e:	de e2       	ldi	r29, 0x2E	; 46
    5d10:	0f 2e       	mov	r0, r31
    5d12:	f2 eb       	ldi	r31, 0xB2	; 178
    5d14:	ef 2e       	mov	r14, r31
    5d16:	fe e2       	ldi	r31, 0x2E	; 46
    5d18:	ff 2e       	mov	r15, r31
    5d1a:	f0 2d       	mov	r31, r0
    5d1c:	04 eb       	ldi	r16, 0xB4	; 180
    5d1e:	17 e2       	ldi	r17, 0x27	; 39
    5d20:	88 81       	ld	r24, Y
    5d22:	99 81       	ldd	r25, Y+1	; 0x01
    5d24:	22 96       	adiw	r28, 0x02	; 2
    5d26:	9f 93       	push	r25
    5d28:	8f 93       	push	r24
    5d2a:	1f 93       	push	r17
    5d2c:	0f 93       	push	r16
    5d2e:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5d32:	0f 90       	pop	r0
    5d34:	0f 90       	pop	r0
    5d36:	0f 90       	pop	r0
    5d38:	0f 90       	pop	r0
    5d3a:	ce 15       	cp	r28, r14
    5d3c:	df 05       	cpc	r29, r15
    5d3e:	81 f7       	brne	.-32     	; 0x5d20 <print_near_atoms+0x8a>
    5d40:	26 c0       	rjmp	.+76     	; 0x5d8e <print_near_atoms+0xf8>
    5d42:	9f 93       	push	r25
    5d44:	8f 93       	push	r24
    5d46:	80 91 ab 2d 	lds	r24, 0x2DAB
    5d4a:	1f 92       	push	r1
    5d4c:	8f 93       	push	r24
    5d4e:	84 ea       	ldi	r24, 0xA4	; 164
    5d50:	9d e2       	ldi	r25, 0x2D	; 45
    5d52:	9f 93       	push	r25
    5d54:	8f 93       	push	r24
    5d56:	80 e8       	ldi	r24, 0x80	; 128
    5d58:	97 e2       	ldi	r25, 0x27	; 39
    5d5a:	9f 93       	push	r25
    5d5c:	8f 93       	push	r24
    5d5e:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5d62:	01 ec       	ldi	r16, 0xC1	; 193
    5d64:	1d e2       	ldi	r17, 0x2D	; 45
    5d66:	ca eb       	ldi	r28, 0xBA	; 186
    5d68:	dd e2       	ldi	r29, 0x2D	; 45
    5d6a:	0f 2e       	mov	r0, r31
    5d6c:	fc ea       	ldi	r31, 0xAC	; 172
    5d6e:	cf 2e       	mov	r12, r31
    5d70:	fe e2       	ldi	r31, 0x2E	; 46
    5d72:	df 2e       	mov	r13, r31
    5d74:	f0 2d       	mov	r31, r0
    5d76:	8d b7       	in	r24, 0x3d	; 61
    5d78:	9e b7       	in	r25, 0x3e	; 62
    5d7a:	08 96       	adiw	r24, 0x08	; 8
    5d7c:	8d bf       	out	0x3d, r24	; 61
    5d7e:	9e bf       	out	0x3e, r25	; 62
    5d80:	0f 2e       	mov	r0, r31
    5d82:	f0 e8       	ldi	r31, 0x80	; 128
    5d84:	ef 2e       	mov	r14, r31
    5d86:	f7 e2       	ldi	r31, 0x27	; 39
    5d88:	ff 2e       	mov	r15, r31
    5d8a:	f0 2d       	mov	r31, r0
    5d8c:	98 cf       	rjmp	.-208    	; 0x5cbe <print_near_atoms+0x28>
    5d8e:	df 91       	pop	r29
    5d90:	cf 91       	pop	r28
    5d92:	1f 91       	pop	r17
    5d94:	0f 91       	pop	r16
    5d96:	ff 90       	pop	r15
    5d98:	ef 90       	pop	r14
    5d9a:	df 90       	pop	r13
    5d9c:	cf 90       	pop	r12
    5d9e:	08 95       	ret

00005da0 <add_to_near_atoms>:
    5da0:	cf 93       	push	r28
    5da2:	df 93       	push	r29
    5da4:	cd b7       	in	r28, 0x3d	; 61
    5da6:	de b7       	in	r29, 0x3e	; 62
    5da8:	80 91 a9 2d 	lds	r24, 0x2DA9
    5dac:	90 91 aa 2d 	lds	r25, 0x2DAA
    5db0:	89 2b       	or	r24, r25
    5db2:	51 f0       	breq	.+20     	; 0x5dc8 <add_to_near_atoms+0x28>
    5db4:	ef eb       	ldi	r30, 0xBF	; 191
    5db6:	fd e2       	ldi	r31, 0x2D	; 45
    5db8:	81 e0       	ldi	r24, 0x01	; 1
    5dba:	90 e0       	ldi	r25, 0x00	; 0
    5dbc:	ac 01       	movw	r20, r24
    5dbe:	20 81       	ld	r18, Z
    5dc0:	31 81       	ldd	r19, Z+1	; 0x01
    5dc2:	23 2b       	or	r18, r19
    5dc4:	01 f5       	brne	.+64     	; 0x5e06 <add_to_near_atoms+0x66>
    5dc6:	02 c0       	rjmp	.+4      	; 0x5dcc <add_to_near_atoms+0x2c>
    5dc8:	40 e0       	ldi	r20, 0x00	; 0
    5dca:	50 e0       	ldi	r21, 0x00	; 0
    5dcc:	86 e1       	ldi	r24, 0x16	; 22
    5dce:	84 9f       	mul	r24, r20
    5dd0:	d0 01       	movw	r26, r0
    5dd2:	85 9f       	mul	r24, r21
    5dd4:	b0 0d       	add	r27, r0
    5dd6:	11 24       	eor	r1, r1
    5dd8:	a4 56       	subi	r26, 0x64	; 100
    5dda:	b2 4d       	sbci	r27, 0xD2	; 210
    5ddc:	fe 01       	movw	r30, r28
    5dde:	36 96       	adiw	r30, 0x06	; 6
    5de0:	01 90       	ld	r0, Z+
    5de2:	0d 92       	st	X+, r0
    5de4:	8a 95       	dec	r24
    5de6:	e1 f7       	brne	.-8      	; 0x5de0 <add_to_near_atoms+0x40>
    5de8:	ce 01       	movw	r24, r28
    5dea:	0e 96       	adiw	r24, 0x0e	; 14
    5dec:	9f 93       	push	r25
    5dee:	8f 93       	push	r24
    5df0:	8e eb       	ldi	r24, 0xBE	; 190
    5df2:	97 e2       	ldi	r25, 0x27	; 39
    5df4:	9f 93       	push	r25
    5df6:	8f 93       	push	r24
    5df8:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5dfc:	0f 90       	pop	r0
    5dfe:	0f 90       	pop	r0
    5e00:	0f 90       	pop	r0
    5e02:	0f 90       	pop	r0
    5e04:	09 c0       	rjmp	.+18     	; 0x5e18 <add_to_near_atoms+0x78>
    5e06:	01 96       	adiw	r24, 0x01	; 1
    5e08:	76 96       	adiw	r30, 0x16	; 22
    5e0a:	8c 30       	cpi	r24, 0x0C	; 12
    5e0c:	91 05       	cpc	r25, r1
    5e0e:	b1 f6       	brne	.-84     	; 0x5dbc <add_to_near_atoms+0x1c>
    5e10:	8b ec       	ldi	r24, 0xCB	; 203
    5e12:	97 e2       	ldi	r25, 0x27	; 39
    5e14:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
    5e18:	df 91       	pop	r29
    5e1a:	cf 91       	pop	r28
    5e1c:	08 95       	ret

00005e1e <getAtomFromAtomicNum>:
    5e1e:	cf 93       	push	r28
    5e20:	df 93       	push	r29
    5e22:	ec 01       	movw	r28, r24
    5e24:	46 2f       	mov	r20, r22
    5e26:	50 e0       	ldi	r21, 0x00	; 0
    5e28:	fa 01       	movw	r30, r20
    5e2a:	31 97       	sbiw	r30, 0x01	; 1
    5e2c:	e5 33       	cpi	r30, 0x35	; 53
    5e2e:	f1 05       	cpc	r31, r1
    5e30:	08 f0       	brcs	.+2      	; 0x5e34 <getAtomFromAtomicNum+0x16>
    5e32:	9e c0       	rjmp	.+316    	; 0x5f70 <getAtomFromAtomicNum+0x152>
    5e34:	ed 5e       	subi	r30, 0xED	; 237
    5e36:	fe 4f       	sbci	r31, 0xFE	; 254
    5e38:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <__tablejump2__>
    5e3c:	40 e0       	ldi	r20, 0x00	; 0
    5e3e:	68 ec       	ldi	r22, 0xC8	; 200
    5e40:	8f ef       	ldi	r24, 0xFF	; 255
    5e42:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5e46:	8d e0       	ldi	r24, 0x0D	; 13
    5e48:	ea ee       	ldi	r30, 0xEA	; 234
    5e4a:	f0 e2       	ldi	r31, 0x20	; 32
    5e4c:	de 01       	movw	r26, r28
    5e4e:	01 90       	ld	r0, Z+
    5e50:	0d 92       	st	X+, r0
    5e52:	8a 95       	dec	r24
    5e54:	e1 f7       	brne	.-8      	; 0x5e4e <getAtomFromAtomicNum+0x30>
    5e56:	94 c0       	rjmp	.+296    	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5e58:	40 e0       	ldi	r20, 0x00	; 0
    5e5a:	62 e3       	ldi	r22, 0x32	; 50
    5e5c:	8f ef       	ldi	r24, 0xFF	; 255
    5e5e:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5e62:	8d e0       	ldi	r24, 0x0D	; 13
    5e64:	ed ed       	ldi	r30, 0xDD	; 221
    5e66:	f0 e2       	ldi	r31, 0x20	; 32
    5e68:	de 01       	movw	r26, r28
    5e6a:	01 90       	ld	r0, Z+
    5e6c:	0d 92       	st	X+, r0
    5e6e:	8a 95       	dec	r24
    5e70:	e1 f7       	brne	.-8      	; 0x5e6a <getAtomFromAtomicNum+0x4c>
    5e72:	86 c0       	rjmp	.+268    	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5e74:	4f ef       	ldi	r20, 0xFF	; 255
    5e76:	64 e6       	ldi	r22, 0x64	; 100
    5e78:	84 e6       	ldi	r24, 0x64	; 100
    5e7a:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5e7e:	8d e0       	ldi	r24, 0x0D	; 13
    5e80:	e0 ed       	ldi	r30, 0xD0	; 208
    5e82:	f0 e2       	ldi	r31, 0x20	; 32
    5e84:	de 01       	movw	r26, r28
    5e86:	01 90       	ld	r0, Z+
    5e88:	0d 92       	st	X+, r0
    5e8a:	8a 95       	dec	r24
    5e8c:	e1 f7       	brne	.-8      	; 0x5e86 <getAtomFromAtomicNum+0x68>
    5e8e:	78 c0       	rjmp	.+240    	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5e90:	44 e6       	ldi	r20, 0x64	; 100
    5e92:	6f ef       	ldi	r22, 0xFF	; 255
    5e94:	84 e6       	ldi	r24, 0x64	; 100
    5e96:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5e9a:	8d e0       	ldi	r24, 0x0D	; 13
    5e9c:	e3 ec       	ldi	r30, 0xC3	; 195
    5e9e:	f0 e2       	ldi	r31, 0x20	; 32
    5ea0:	de 01       	movw	r26, r28
    5ea2:	01 90       	ld	r0, Z+
    5ea4:	0d 92       	st	X+, r0
    5ea6:	8a 95       	dec	r24
    5ea8:	e1 f7       	brne	.-8      	; 0x5ea2 <getAtomFromAtomicNum+0x84>
    5eaa:	6a c0       	rjmp	.+212    	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5eac:	4f ef       	ldi	r20, 0xFF	; 255
    5eae:	60 e0       	ldi	r22, 0x00	; 0
    5eb0:	84 e6       	ldi	r24, 0x64	; 100
    5eb2:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5eb6:	8d e0       	ldi	r24, 0x0D	; 13
    5eb8:	e6 eb       	ldi	r30, 0xB6	; 182
    5eba:	f0 e2       	ldi	r31, 0x20	; 32
    5ebc:	de 01       	movw	r26, r28
    5ebe:	01 90       	ld	r0, Z+
    5ec0:	0d 92       	st	X+, r0
    5ec2:	8a 95       	dec	r24
    5ec4:	e1 f7       	brne	.-8      	; 0x5ebe <getAtomFromAtomicNum+0xa0>
    5ec6:	5c c0       	rjmp	.+184    	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5ec8:	4a e0       	ldi	r20, 0x0A	; 10
    5eca:	6a e0       	ldi	r22, 0x0A	; 10
    5ecc:	88 ec       	ldi	r24, 0xC8	; 200
    5ece:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5ed2:	8d e0       	ldi	r24, 0x0D	; 13
    5ed4:	e9 ea       	ldi	r30, 0xA9	; 169
    5ed6:	f0 e2       	ldi	r31, 0x20	; 32
    5ed8:	de 01       	movw	r26, r28
    5eda:	01 90       	ld	r0, Z+
    5edc:	0d 92       	st	X+, r0
    5ede:	8a 95       	dec	r24
    5ee0:	e1 f7       	brne	.-8      	; 0x5eda <getAtomFromAtomicNum+0xbc>
    5ee2:	4e c0       	rjmp	.+156    	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5ee4:	4f ef       	ldi	r20, 0xFF	; 255
    5ee6:	60 e0       	ldi	r22, 0x00	; 0
    5ee8:	80 e0       	ldi	r24, 0x00	; 0
    5eea:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5eee:	8d e0       	ldi	r24, 0x0D	; 13
    5ef0:	ec e9       	ldi	r30, 0x9C	; 156
    5ef2:	f0 e2       	ldi	r31, 0x20	; 32
    5ef4:	de 01       	movw	r26, r28
    5ef6:	01 90       	ld	r0, Z+
    5ef8:	0d 92       	st	X+, r0
    5efa:	8a 95       	dec	r24
    5efc:	e1 f7       	brne	.-8      	; 0x5ef6 <getAtomFromAtomicNum+0xd8>
    5efe:	40 c0       	rjmp	.+128    	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5f00:	40 e0       	ldi	r20, 0x00	; 0
    5f02:	6f ef       	ldi	r22, 0xFF	; 255
    5f04:	80 e0       	ldi	r24, 0x00	; 0
    5f06:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5f0a:	8d e0       	ldi	r24, 0x0D	; 13
    5f0c:	ef e8       	ldi	r30, 0x8F	; 143
    5f0e:	f0 e2       	ldi	r31, 0x20	; 32
    5f10:	de 01       	movw	r26, r28
    5f12:	01 90       	ld	r0, Z+
    5f14:	0d 92       	st	X+, r0
    5f16:	8a 95       	dec	r24
    5f18:	e1 f7       	brne	.-8      	; 0x5f12 <getAtomFromAtomicNum+0xf4>
    5f1a:	32 c0       	rjmp	.+100    	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5f1c:	40 e0       	ldi	r20, 0x00	; 0
    5f1e:	6f ef       	ldi	r22, 0xFF	; 255
    5f20:	80 e0       	ldi	r24, 0x00	; 0
    5f22:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5f26:	8d e0       	ldi	r24, 0x0D	; 13
    5f28:	e2 e8       	ldi	r30, 0x82	; 130
    5f2a:	f0 e2       	ldi	r31, 0x20	; 32
    5f2c:	de 01       	movw	r26, r28
    5f2e:	01 90       	ld	r0, Z+
    5f30:	0d 92       	st	X+, r0
    5f32:	8a 95       	dec	r24
    5f34:	e1 f7       	brne	.-8      	; 0x5f2e <getAtomFromAtomicNum+0x110>
    5f36:	24 c0       	rjmp	.+72     	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5f38:	40 e0       	ldi	r20, 0x00	; 0
    5f3a:	6f ef       	ldi	r22, 0xFF	; 255
    5f3c:	80 e0       	ldi	r24, 0x00	; 0
    5f3e:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5f42:	8d e0       	ldi	r24, 0x0D	; 13
    5f44:	e5 e7       	ldi	r30, 0x75	; 117
    5f46:	f0 e2       	ldi	r31, 0x20	; 32
    5f48:	de 01       	movw	r26, r28
    5f4a:	01 90       	ld	r0, Z+
    5f4c:	0d 92       	st	X+, r0
    5f4e:	8a 95       	dec	r24
    5f50:	e1 f7       	brne	.-8      	; 0x5f4a <getAtomFromAtomicNum+0x12c>
    5f52:	16 c0       	rjmp	.+44     	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5f54:	40 e0       	ldi	r20, 0x00	; 0
    5f56:	6f ef       	ldi	r22, 0xFF	; 255
    5f58:	80 e0       	ldi	r24, 0x00	; 0
    5f5a:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5f5e:	8d e0       	ldi	r24, 0x0D	; 13
    5f60:	e8 e6       	ldi	r30, 0x68	; 104
    5f62:	f0 e2       	ldi	r31, 0x20	; 32
    5f64:	de 01       	movw	r26, r28
    5f66:	01 90       	ld	r0, Z+
    5f68:	0d 92       	st	X+, r0
    5f6a:	8a 95       	dec	r24
    5f6c:	e1 f7       	brne	.-8      	; 0x5f66 <getAtomFromAtomicNum+0x148>
    5f6e:	08 c0       	rjmp	.+16     	; 0x5f80 <getAtomFromAtomicNum+0x162>
    5f70:	8d ee       	ldi	r24, 0xED	; 237
    5f72:	97 e2       	ldi	r25, 0x27	; 39
    5f74:	9f 93       	push	r25
    5f76:	8f 93       	push	r24
    5f78:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    5f7c:	0f 90       	pop	r0
    5f7e:	0f 90       	pop	r0
    5f80:	ce 01       	movw	r24, r28
    5f82:	df 91       	pop	r29
    5f84:	cf 91       	pop	r28
    5f86:	08 95       	ret

00005f88 <setAtomColor>:
    5f88:	cf 92       	push	r12
    5f8a:	df 92       	push	r13
    5f8c:	ef 92       	push	r14
    5f8e:	ff 92       	push	r15
    5f90:	0f 93       	push	r16
    5f92:	1f 93       	push	r17
    5f94:	cf 93       	push	r28
    5f96:	df 93       	push	r29
    5f98:	cd b7       	in	r28, 0x3d	; 61
    5f9a:	de b7       	in	r29, 0x3e	; 62
    5f9c:	2d 97       	sbiw	r28, 0x0d	; 13
    5f9e:	cd bf       	out	0x3d, r28	; 61
    5fa0:	de bf       	out	0x3e, r29	; 62
    5fa2:	90 e0       	ldi	r25, 0x00	; 0
    5fa4:	fc 01       	movw	r30, r24
    5fa6:	31 97       	sbiw	r30, 0x01	; 1
    5fa8:	e5 33       	cpi	r30, 0x35	; 53
    5faa:	f1 05       	cpc	r31, r1
    5fac:	08 f0       	brcs	.+2      	; 0x5fb0 <setAtomColor+0x28>
    5fae:	46 c0       	rjmp	.+140    	; 0x603c <setAtomColor+0xb4>
    5fb0:	e8 5b       	subi	r30, 0xB8	; 184
    5fb2:	fe 4f       	sbci	r31, 0xFE	; 254
    5fb4:	0c 94 4a 3c 	jmp	0x7894	; 0x7894 <__tablejump2__>
    5fb8:	40 e0       	ldi	r20, 0x00	; 0
    5fba:	68 ec       	ldi	r22, 0xC8	; 200
    5fbc:	8f ef       	ldi	r24, 0xFF	; 255
    5fbe:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5fc2:	44 c0       	rjmp	.+136    	; 0x604c <setAtomColor+0xc4>
    5fc4:	40 e0       	ldi	r20, 0x00	; 0
    5fc6:	62 e3       	ldi	r22, 0x32	; 50
    5fc8:	8f ef       	ldi	r24, 0xFF	; 255
    5fca:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5fce:	3e c0       	rjmp	.+124    	; 0x604c <setAtomColor+0xc4>
    5fd0:	4f ef       	ldi	r20, 0xFF	; 255
    5fd2:	64 e6       	ldi	r22, 0x64	; 100
    5fd4:	84 e6       	ldi	r24, 0x64	; 100
    5fd6:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5fda:	38 c0       	rjmp	.+112    	; 0x604c <setAtomColor+0xc4>
    5fdc:	44 e6       	ldi	r20, 0x64	; 100
    5fde:	6f ef       	ldi	r22, 0xFF	; 255
    5fe0:	84 e6       	ldi	r24, 0x64	; 100
    5fe2:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5fe6:	32 c0       	rjmp	.+100    	; 0x604c <setAtomColor+0xc4>
    5fe8:	4f ef       	ldi	r20, 0xFF	; 255
    5fea:	60 e0       	ldi	r22, 0x00	; 0
    5fec:	84 e6       	ldi	r24, 0x64	; 100
    5fee:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5ff2:	2c c0       	rjmp	.+88     	; 0x604c <setAtomColor+0xc4>
    5ff4:	4a e0       	ldi	r20, 0x0A	; 10
    5ff6:	6a e0       	ldi	r22, 0x0A	; 10
    5ff8:	88 ec       	ldi	r24, 0xC8	; 200
    5ffa:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    5ffe:	26 c0       	rjmp	.+76     	; 0x604c <setAtomColor+0xc4>
    6000:	4f ef       	ldi	r20, 0xFF	; 255
    6002:	60 e0       	ldi	r22, 0x00	; 0
    6004:	80 e0       	ldi	r24, 0x00	; 0
    6006:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    600a:	20 c0       	rjmp	.+64     	; 0x604c <setAtomColor+0xc4>
    600c:	40 e0       	ldi	r20, 0x00	; 0
    600e:	6f ef       	ldi	r22, 0xFF	; 255
    6010:	80 e0       	ldi	r24, 0x00	; 0
    6012:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    6016:	1a c0       	rjmp	.+52     	; 0x604c <setAtomColor+0xc4>
    6018:	40 e0       	ldi	r20, 0x00	; 0
    601a:	6f ef       	ldi	r22, 0xFF	; 255
    601c:	80 e0       	ldi	r24, 0x00	; 0
    601e:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    6022:	14 c0       	rjmp	.+40     	; 0x604c <setAtomColor+0xc4>
    6024:	40 e0       	ldi	r20, 0x00	; 0
    6026:	6f ef       	ldi	r22, 0xFF	; 255
    6028:	80 e0       	ldi	r24, 0x00	; 0
    602a:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    602e:	0e c0       	rjmp	.+28     	; 0x604c <setAtomColor+0xc4>
    6030:	40 e0       	ldi	r20, 0x00	; 0
    6032:	6f ef       	ldi	r22, 0xFF	; 255
    6034:	80 e0       	ldi	r24, 0x00	; 0
    6036:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    603a:	08 c0       	rjmp	.+16     	; 0x604c <setAtomColor+0xc4>
    603c:	8d ee       	ldi	r24, 0xED	; 237
    603e:	97 e2       	ldi	r25, 0x27	; 39
    6040:	9f 93       	push	r25
    6042:	8f 93       	push	r24
    6044:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    6048:	0f 90       	pop	r0
    604a:	0f 90       	pop	r0
    604c:	2d 96       	adiw	r28, 0x0d	; 13
    604e:	cd bf       	out	0x3d, r28	; 61
    6050:	de bf       	out	0x3e, r29	; 62
    6052:	df 91       	pop	r29
    6054:	cf 91       	pop	r28
    6056:	1f 91       	pop	r17
    6058:	0f 91       	pop	r16
    605a:	ff 90       	pop	r15
    605c:	ef 90       	pop	r14
    605e:	df 90       	pop	r13
    6060:	cf 90       	pop	r12
    6062:	08 95       	ret

00006064 <found_bond_routine>:
    6064:	cf 92       	push	r12
    6066:	df 92       	push	r13
    6068:	ef 92       	push	r14
    606a:	ff 92       	push	r15
    606c:	0f 93       	push	r16
    606e:	1f 93       	push	r17
    6070:	40 e0       	ldi	r20, 0x00	; 0
    6072:	60 e0       	ldi	r22, 0x00	; 0
    6074:	8f ef       	ldi	r24, 0xFF	; 255
    6076:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    607a:	8c e2       	ldi	r24, 0x2C	; 44
    607c:	91 e0       	ldi	r25, 0x01	; 1
    607e:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    6082:	c0 90 b2 2e 	lds	r12, 0x2EB2
    6086:	d0 90 b3 2e 	lds	r13, 0x2EB3
    608a:	e0 90 b4 2e 	lds	r14, 0x2EB4
    608e:	f0 90 b5 2e 	lds	r15, 0x2EB5
    6092:	00 91 b6 2e 	lds	r16, 0x2EB6
    6096:	10 91 b7 2e 	lds	r17, 0x2EB7
    609a:	20 91 b8 2e 	lds	r18, 0x2EB8
    609e:	30 91 b9 2e 	lds	r19, 0x2EB9
    60a2:	40 91 ba 2e 	lds	r20, 0x2EBA
    60a6:	50 91 bb 2e 	lds	r21, 0x2EBB
    60aa:	60 91 bc 2e 	lds	r22, 0x2EBC
    60ae:	70 91 bd 2e 	lds	r23, 0x2EBD
    60b2:	80 91 be 2e 	lds	r24, 0x2EBE
    60b6:	68 df       	rcall	.-304    	; 0x5f88 <setAtomColor>
    60b8:	8c e2       	ldi	r24, 0x2C	; 44
    60ba:	91 e0       	ldi	r25, 0x01	; 1
    60bc:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    60c0:	40 e0       	ldi	r20, 0x00	; 0
    60c2:	60 e0       	ldi	r22, 0x00	; 0
    60c4:	8f ef       	ldi	r24, 0xFF	; 255
    60c6:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    60ca:	8c e2       	ldi	r24, 0x2C	; 44
    60cc:	91 e0       	ldi	r25, 0x01	; 1
    60ce:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    60d2:	c0 90 b2 2e 	lds	r12, 0x2EB2
    60d6:	d0 90 b3 2e 	lds	r13, 0x2EB3
    60da:	e0 90 b4 2e 	lds	r14, 0x2EB4
    60de:	f0 90 b5 2e 	lds	r15, 0x2EB5
    60e2:	00 91 b6 2e 	lds	r16, 0x2EB6
    60e6:	10 91 b7 2e 	lds	r17, 0x2EB7
    60ea:	20 91 b8 2e 	lds	r18, 0x2EB8
    60ee:	30 91 b9 2e 	lds	r19, 0x2EB9
    60f2:	40 91 ba 2e 	lds	r20, 0x2EBA
    60f6:	50 91 bb 2e 	lds	r21, 0x2EBB
    60fa:	60 91 bc 2e 	lds	r22, 0x2EBC
    60fe:	70 91 bd 2e 	lds	r23, 0x2EBD
    6102:	80 91 be 2e 	lds	r24, 0x2EBE
    6106:	40 df       	rcall	.-384    	; 0x5f88 <setAtomColor>
    6108:	1f 91       	pop	r17
    610a:	0f 91       	pop	r16
    610c:	ff 90       	pop	r15
    610e:	ef 90       	pop	r14
    6110:	df 90       	pop	r13
    6112:	cf 90       	pop	r12
    6114:	08 95       	ret

00006116 <broadcastChemID>:
    6116:	cf 92       	push	r12
    6118:	df 92       	push	r13
    611a:	ef 92       	push	r14
    611c:	ff 92       	push	r15
    611e:	0f 93       	push	r16
    6120:	1f 93       	push	r17
    6122:	cf 93       	push	r28
    6124:	df 93       	push	r29
    6126:	cd b7       	in	r28, 0x3d	; 61
    6128:	de b7       	in	r29, 0x3e	; 62
    612a:	2d 97       	sbiw	r28, 0x0d	; 13
    612c:	cd bf       	out	0x3d, r28	; 61
    612e:	de bf       	out	0x3e, r29	; 62
    6130:	c9 82       	std	Y+1, r12	; 0x01
    6132:	da 82       	std	Y+2, r13	; 0x02
    6134:	eb 82       	std	Y+3, r14	; 0x03
    6136:	fc 82       	std	Y+4, r15	; 0x04
    6138:	0d 83       	std	Y+5, r16	; 0x05
    613a:	1e 83       	std	Y+6, r17	; 0x06
    613c:	2f 83       	std	Y+7, r18	; 0x07
    613e:	38 87       	std	Y+8, r19	; 0x08
    6140:	49 87       	std	Y+9, r20	; 0x09
    6142:	5a 87       	std	Y+10, r21	; 0x0a
    6144:	6b 87       	std	Y+11, r22	; 0x0b
    6146:	7c 87       	std	Y+12, r23	; 0x0c
    6148:	8d 87       	std	Y+13, r24	; 0x0d
    614a:	8d ef       	ldi	r24, 0xFD	; 253
    614c:	97 e2       	ldi	r25, 0x27	; 39
    614e:	9f 93       	push	r25
    6150:	8f 93       	push	r24
    6152:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    6156:	e0 e4       	ldi	r30, 0x40	; 64
    6158:	fa e0       	ldi	r31, 0x0A	; 10
    615a:	02 ad       	ldd	r16, Z+58	; 0x3a
    615c:	13 ad       	ldd	r17, Z+59	; 0x3b
    615e:	e0 ac       	ldd	r14, Z+56	; 0x38
    6160:	f1 ac       	ldd	r15, Z+57	; 0x39
    6162:	e0 e4       	ldi	r30, 0x40	; 64
    6164:	f9 e0       	ldi	r31, 0x09	; 9
    6166:	c0 ac       	ldd	r12, Z+56	; 0x38
    6168:	d1 ac       	ldd	r13, Z+57	; 0x39
    616a:	4f ef       	ldi	r20, 0xFF	; 255
    616c:	6f ef       	ldi	r22, 0xFF	; 255
    616e:	8f ef       	ldi	r24, 0xFF	; 255
    6170:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    6174:	4d e0       	ldi	r20, 0x0D	; 13
    6176:	be 01       	movw	r22, r28
    6178:	6f 5f       	subi	r22, 0xFF	; 255
    617a:	7f 4f       	sbci	r23, 0xFF	; 255
    617c:	8f e3       	ldi	r24, 0x3F	; 63
    617e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <ir_send>
    6182:	84 e6       	ldi	r24, 0x64	; 100
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
    618a:	4c 2d       	mov	r20, r12
    618c:	6e 2d       	mov	r22, r14
    618e:	80 2f       	mov	r24, r16
    6190:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    6194:	0f 90       	pop	r0
    6196:	0f 90       	pop	r0
    6198:	2d 96       	adiw	r28, 0x0d	; 13
    619a:	cd bf       	out	0x3d, r28	; 61
    619c:	de bf       	out	0x3e, r29	; 62
    619e:	df 91       	pop	r29
    61a0:	cf 91       	pop	r28
    61a2:	1f 91       	pop	r17
    61a4:	0f 91       	pop	r16
    61a6:	ff 90       	pop	r15
    61a8:	ef 90       	pop	r14
    61aa:	df 90       	pop	r13
    61ac:	cf 90       	pop	r12
    61ae:	08 95       	ret

000061b0 <detectOtherDroplets>:

void detectOtherDroplets()
{
    61b0:	2f 92       	push	r2
    61b2:	3f 92       	push	r3
    61b4:	4f 92       	push	r4
    61b6:	5f 92       	push	r5
    61b8:	6f 92       	push	r6
    61ba:	7f 92       	push	r7
    61bc:	8f 92       	push	r8
    61be:	9f 92       	push	r9
    61c0:	af 92       	push	r10
    61c2:	bf 92       	push	r11
    61c4:	cf 92       	push	r12
    61c6:	df 92       	push	r13
    61c8:	ef 92       	push	r14
    61ca:	ff 92       	push	r15
    61cc:	0f 93       	push	r16
    61ce:	1f 93       	push	r17
    61d0:	cf 93       	push	r28
    61d2:	df 93       	push	r29
	uint16_t received_id;
	float received_range;
	float received_bearing;
	float received_heading;
	uint8_t dir_mask = check_collisions();
    61d4:	0e 94 19 11 	call	0x2232	; 0x2232 <check_collisions>
	//printf("Collisions: %02hX \r\n", dir_mask);
	
	if(rnb_updated)
    61d8:	80 91 ee 2a 	lds	r24, 0x2AEE
    61dc:	88 23       	and	r24, r24
    61de:	09 f4       	brne	.+2      	; 0x61e2 <detectOtherDroplets+0x32>
    61e0:	82 c0       	rjmp	.+260    	; 0x62e6 <detectOtherDroplets+0x136>
	{
		received_id = last_good_rnb.id_number;
    61e2:	00 91 e0 2a 	lds	r16, 0x2AE0
    61e6:	10 91 e1 2a 	lds	r17, 0x2AE1
		received_range = last_good_rnb.range;
    61ea:	40 90 d2 2a 	lds	r4, 0x2AD2
    61ee:	50 90 d3 2a 	lds	r5, 0x2AD3
    61f2:	60 90 d4 2a 	lds	r6, 0x2AD4
    61f6:	70 90 d5 2a 	lds	r7, 0x2AD5
		received_bearing = last_good_rnb.bearing;
    61fa:	60 91 d6 2a 	lds	r22, 0x2AD6
    61fe:	70 91 d7 2a 	lds	r23, 0x2AD7
    6202:	80 91 d8 2a 	lds	r24, 0x2AD8
    6206:	90 91 d9 2a 	lds	r25, 0x2AD9
		received_heading = last_good_rnb.heading;
    620a:	c0 90 da 2a 	lds	r12, 0x2ADA
    620e:	d0 90 db 2a 	lds	r13, 0x2ADB
    6212:	e0 90 dc 2a 	lds	r14, 0x2ADC
    6216:	f0 90 dd 2a 	lds	r15, 0x2ADD
		//convert to degrees from radians
		received_bearing = rad_to_deg(received_bearing);
    621a:	0e 94 81 1b 	call	0x3702	; 0x3702 <rad_to_deg>
    621e:	4b 01       	movw	r8, r22
    6220:	5c 01       	movw	r10, r24
		received_heading = rad_to_deg(received_heading);
    6222:	c7 01       	movw	r24, r14
    6224:	b6 01       	movw	r22, r12
    6226:	0e 94 81 1b 	call	0x3702	; 0x3702 <rad_to_deg>
    622a:	6b 01       	movw	r12, r22
    622c:	7c 01       	movw	r14, r24
		//scaling the range to mm.
		received_range = received_range*10;
    622e:	20 e0       	ldi	r18, 0x00	; 0
    6230:	30 e0       	ldi	r19, 0x00	; 0
    6232:	40 e2       	ldi	r20, 0x20	; 32
    6234:	51 e4       	ldi	r21, 0x41	; 65
    6236:	c3 01       	movw	r24, r6
    6238:	b2 01       	movw	r22, r4
    623a:	9c d6       	rcall	.+3384   	; 0x6f74 <__mulsf3>
    623c:	46 2e       	mov	r4, r22
    623e:	57 2e       	mov	r5, r23
    6240:	38 2e       	mov	r3, r24
    6242:	29 2e       	mov	r2, r25
		printf("range: %f\r\n", received_range);
    6244:	9f 93       	push	r25
    6246:	8f 93       	push	r24
    6248:	7f 93       	push	r23
    624a:	6f 93       	push	r22
    624c:	84 e1       	ldi	r24, 0x14	; 20
    624e:	98 e2       	ldi	r25, 0x28	; 40
    6250:	9f 93       	push	r25
    6252:	8f 93       	push	r24
    6254:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    6258:	cb ea       	ldi	r28, 0xAB	; 171
    625a:	dd e2       	ldi	r29, 0x2D	; 45
    625c:	0f 2e       	mov	r0, r31
    625e:	f3 eb       	ldi	r31, 0xB3	; 179
    6260:	6f 2e       	mov	r6, r31
    6262:	fe e2       	ldi	r31, 0x2E	; 46
    6264:	7f 2e       	mov	r7, r31
    6266:	f0 2d       	mov	r31, r0
    6268:	0f 90       	pop	r0
    626a:	0f 90       	pop	r0
    626c:	0f 90       	pop	r0
    626e:	0f 90       	pop	r0
    6270:	0f 90       	pop	r0
    6272:	0f 90       	pop	r0
    6274:	fe 01       	movw	r30, r28
    6276:	32 97       	sbiw	r30, 0x02	; 2
		
		for(uint8_t i = 0; i < 12; i++)
		{
			if(near_atoms[i].id == received_id)
    6278:	80 81       	ld	r24, Z
    627a:	91 81       	ldd	r25, Z+1	; 0x01
    627c:	80 17       	cp	r24, r16
    627e:	91 07       	cpc	r25, r17
    6280:	81 f4       	brne	.+32     	; 0x62a2 <detectOtherDroplets+0xf2>
			{
				near_atoms[i].bearing = (int16_t)received_bearing;
    6282:	c5 01       	movw	r24, r10
    6284:	b4 01       	movw	r22, r8
    6286:	ce d4       	rcall	.+2460   	; 0x6c24 <__fixsfsi>
    6288:	69 83       	std	Y+1, r22	; 0x01
    628a:	7a 83       	std	Y+2, r23	; 0x02
				near_atoms[i].heading = (int16_t)received_heading;
    628c:	c7 01       	movw	r24, r14
    628e:	b6 01       	movw	r22, r12
    6290:	c9 d4       	rcall	.+2450   	; 0x6c24 <__fixsfsi>
    6292:	6b 83       	std	Y+3, r22	; 0x03
    6294:	7c 83       	std	Y+4, r23	; 0x04
				near_atoms[i].range = (uint8_t)received_range;
    6296:	64 2d       	mov	r22, r4
    6298:	75 2d       	mov	r23, r5
    629a:	83 2d       	mov	r24, r3
    629c:	92 2d       	mov	r25, r2
    629e:	c7 d4       	rcall	.+2446   	; 0x6c2e <__fixunssfsi>
    62a0:	68 83       	st	Y, r22
    62a2:	66 96       	adiw	r28, 0x16	; 22
		received_heading = rad_to_deg(received_heading);
		//scaling the range to mm.
		received_range = received_range*10;
		printf("range: %f\r\n", received_range);
		
		for(uint8_t i = 0; i < 12; i++)
    62a4:	c6 15       	cp	r28, r6
    62a6:	d7 05       	cpc	r29, r7
    62a8:	29 f7       	brne	.-54     	; 0x6274 <detectOtherDroplets+0xc4>
				near_atoms[i].bearing = (int16_t)received_bearing;
				near_atoms[i].heading = (int16_t)received_heading;
				near_atoms[i].range = (uint8_t)received_range;
			}
		}
		print_near_atoms();
    62aa:	f5 dc       	rcall	.-1558   	; 0x5c96 <print_near_atoms>
		broadcastChemID(myID);
    62ac:	c0 90 b2 2e 	lds	r12, 0x2EB2
    62b0:	d0 90 b3 2e 	lds	r13, 0x2EB3
    62b4:	e0 90 b4 2e 	lds	r14, 0x2EB4
    62b8:	f0 90 b5 2e 	lds	r15, 0x2EB5
    62bc:	00 91 b6 2e 	lds	r16, 0x2EB6
    62c0:	10 91 b7 2e 	lds	r17, 0x2EB7
    62c4:	20 91 b8 2e 	lds	r18, 0x2EB8
    62c8:	30 91 b9 2e 	lds	r19, 0x2EB9
    62cc:	40 91 ba 2e 	lds	r20, 0x2EBA
    62d0:	50 91 bb 2e 	lds	r21, 0x2EBB
    62d4:	60 91 bc 2e 	lds	r22, 0x2EBC
    62d8:	70 91 bd 2e 	lds	r23, 0x2EBD
    62dc:	80 91 be 2e 	lds	r24, 0x2EBE
    62e0:	1a df       	rcall	.-460    	; 0x6116 <broadcastChemID>
		rnb_updated=0;
    62e2:	10 92 ee 2a 	sts	0x2AEE, r1
	}
}
    62e6:	df 91       	pop	r29
    62e8:	cf 91       	pop	r28
    62ea:	1f 91       	pop	r17
    62ec:	0f 91       	pop	r16
    62ee:	ff 90       	pop	r15
    62f0:	ef 90       	pop	r14
    62f2:	df 90       	pop	r13
    62f4:	cf 90       	pop	r12
    62f6:	bf 90       	pop	r11
    62f8:	af 90       	pop	r10
    62fa:	9f 90       	pop	r9
    62fc:	8f 90       	pop	r8
    62fe:	7f 90       	pop	r7
    6300:	6f 90       	pop	r6
    6302:	5f 90       	pop	r5
    6304:	4f 90       	pop	r4
    6306:	3f 90       	pop	r3
    6308:	2f 90       	pop	r2
    630a:	08 95       	ret

0000630c <checkPossibleBonds>:

//Checks to see what kind of bonds the newly discovered near_atom can make with me
uint8_t checkPossibleBonds(Atom near_atom, uint16_t senderID)
{
    630c:	4f 92       	push	r4
    630e:	5f 92       	push	r5
    6310:	6f 92       	push	r6
    6312:	7f 92       	push	r7
    6314:	8f 92       	push	r8
    6316:	9f 92       	push	r9
    6318:	af 92       	push	r10
    631a:	bf 92       	push	r11
    631c:	cf 92       	push	r12
    631e:	df 92       	push	r13
    6320:	ef 92       	push	r14
    6322:	ff 92       	push	r15
    6324:	0f 93       	push	r16
    6326:	1f 93       	push	r17
    6328:	cf 93       	push	r28
    632a:	df 93       	push	r29
    632c:	cd b7       	in	r28, 0x3d	; 61
    632e:	de b7       	in	r29, 0x3e	; 62
    6330:	66 97       	sbiw	r28, 0x16	; 22
    6332:	cd bf       	out	0x3d, r28	; 61
    6334:	de bf       	out	0x3e, r29	; 62
    6336:	ca 86       	std	Y+10, r12	; 0x0a
    6338:	db 86       	std	Y+11, r13	; 0x0b
    633a:	ec 86       	std	Y+12, r14	; 0x0c
    633c:	fd 86       	std	Y+13, r15	; 0x0d
    633e:	0e 87       	std	Y+14, r16	; 0x0e
    6340:	1f 87       	std	Y+15, r17	; 0x0f
    6342:	28 8b       	std	Y+16, r18	; 0x10
    6344:	39 8b       	std	Y+17, r19	; 0x11
    6346:	4a 8b       	std	Y+18, r20	; 0x12
    6348:	5b 8b       	std	Y+19, r21	; 0x13
    634a:	6c 8b       	std	Y+20, r22	; 0x14
    634c:	7d 8b       	std	Y+21, r23	; 0x15
    634e:	8e 8b       	std	Y+22, r24	; 0x16
    6350:	7e 01       	movw	r14, r28
    6352:	82 e1       	ldi	r24, 0x12	; 18
    6354:	e8 0e       	add	r14, r24
    6356:	f1 1c       	adc	r15, r1
    6358:	8e 01       	movw	r16, r28
    635a:	06 5f       	subi	r16, 0xF6	; 246
    635c:	1f 4f       	sbci	r17, 0xFF	; 255
	unsigned char diatomic[9];
	uint8_t diatomicPossible = 1;
	
	uint8_t empty_spaces = 0;
    635e:	71 2c       	mov	r7, r1

//Checks to see what kind of bonds the newly discovered near_atom can make with me
uint8_t checkPossibleBonds(Atom near_atom, uint16_t senderID)
{
	unsigned char diatomic[9];
	uint8_t diatomicPossible = 1;
    6360:	91 e0       	ldi	r25, 0x01	; 1
	for(uint8_t i = 0; i < 8; i++)
	{
		if(near_atom.valence[i] == 0) empty_spaces = empty_spaces + 1;
		if(near_atom.valence[i] == 2)
		{
			printf("This atom is already bonded to something, it can't form a diatomic bond");
    6362:	0f 2e       	mov	r0, r31
    6364:	f0 e2       	ldi	r31, 0x20	; 32
    6366:	cf 2e       	mov	r12, r31
    6368:	f8 e2       	ldi	r31, 0x28	; 40
    636a:	df 2e       	mov	r13, r31
    636c:	f0 2d       	mov	r31, r0
	uint8_t diatomicPossible = 1;
	
	uint8_t empty_spaces = 0;
	for(uint8_t i = 0; i < 8; i++)
	{
		if(near_atom.valence[i] == 0) empty_spaces = empty_spaces + 1;
    636e:	f8 01       	movw	r30, r16
    6370:	81 91       	ld	r24, Z+
    6372:	8f 01       	movw	r16, r30
    6374:	81 11       	cpse	r24, r1
    6376:	02 c0       	rjmp	.+4      	; 0x637c <checkPossibleBonds+0x70>
    6378:	73 94       	inc	r7
    637a:	09 c0       	rjmp	.+18     	; 0x638e <checkPossibleBonds+0x82>
		if(near_atom.valence[i] == 2)
    637c:	82 30       	cpi	r24, 0x02	; 2
    637e:	39 f4       	brne	.+14     	; 0x638e <checkPossibleBonds+0x82>
		{
			printf("This atom is already bonded to something, it can't form a diatomic bond");
    6380:	df 92       	push	r13
    6382:	cf 92       	push	r12
    6384:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    6388:	0f 90       	pop	r0
    638a:	0f 90       	pop	r0
			diatomicPossible = 0;
    638c:	90 e0       	ldi	r25, 0x00	; 0
{
	unsigned char diatomic[9];
	uint8_t diatomicPossible = 1;
	
	uint8_t empty_spaces = 0;
	for(uint8_t i = 0; i < 8; i++)
    638e:	0e 15       	cp	r16, r14
    6390:	1f 05       	cpc	r17, r15
    6392:	69 f7       	brne	.-38     	; 0x636e <checkPossibleBonds+0x62>
			diatomicPossible = 0;
		}
	}
	
	//Diatomic bond?
	if(near_atom.diatomic == 1 && near_atom.atomicNum == myID.atomicNum && VALENCE_FULL == 0 && diatomicPossible == 1)
    6394:	8d 89       	ldd	r24, Y+21	; 0x15
    6396:	81 30       	cpi	r24, 0x01	; 1
    6398:	09 f0       	breq	.+2      	; 0x639c <checkPossibleBonds+0x90>
    639a:	b1 c0       	rjmp	.+354    	; 0x64fe <checkPossibleBonds+0x1f2>
    639c:	2e 89       	ldd	r18, Y+22	; 0x16
    639e:	80 91 be 2e 	lds	r24, 0x2EBE
    63a2:	28 13       	cpse	r18, r24
    63a4:	ac c0       	rjmp	.+344    	; 0x64fe <checkPossibleBonds+0x1f2>
    63a6:	80 91 9b 2d 	lds	r24, 0x2D9B
    63aa:	81 11       	cpse	r24, r1
    63ac:	a8 c0       	rjmp	.+336    	; 0x64fe <checkPossibleBonds+0x1f2>
    63ae:	91 30       	cpi	r25, 0x01	; 1
    63b0:	09 f0       	breq	.+2      	; 0x63b4 <checkPossibleBonds+0xa8>
    63b2:	a5 c0       	rjmp	.+330    	; 0x64fe <checkPossibleBonds+0x1f2>
	{
		printf("\tEntered diatomic if statement.\r\n");
    63b4:	88 e6       	ldi	r24, 0x68	; 104
    63b6:	98 e2       	ldi	r25, 0x28	; 40
    63b8:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
		diatomic[0] = 'd';
    63bc:	84 e6       	ldi	r24, 0x64	; 100
    63be:	89 83       	std	Y+1, r24	; 0x01
    63c0:	6e 01       	movw	r12, r28
    63c2:	f2 e0       	ldi	r31, 0x02	; 2
    63c4:	cf 0e       	add	r12, r31
    63c6:	d1 1c       	adc	r13, r1
    63c8:	8e 01       	movw	r16, r28
    63ca:	06 5f       	subi	r16, 0xF6	; 246
    63cc:	1f 4f       	sbci	r17, 0xFF	; 255
    63ce:	57 2c       	mov	r5, r7
		uint8_t empty_slot_counter = empty_spaces;
		uint8_t free_electron_counter = empty_spaces;
		for(uint8_t i = 1; i < 9; i++)
		{
			printf("near_atom.valence[i] = %hd \r\n ", near_atom.valence[i-1]);
    63d0:	0f 2e       	mov	r0, r31
    63d2:	f9 e8       	ldi	r31, 0x89	; 137
    63d4:	8f 2e       	mov	r8, r31
    63d6:	f8 e2       	ldi	r31, 0x28	; 40
    63d8:	9f 2e       	mov	r9, r31
    63da:	f0 2d       	mov	r31, r0
				diatomic[i] = 2;
				empty_slot_counter = empty_slot_counter - 1;
			}
			else if(near_atom.valence[i-1] == 1 && free_electron_counter > 0)
			{
				diatomic[i] = 2;
    63dc:	68 94       	set
    63de:	44 24       	eor	r4, r4
    63e0:	41 f8       	bld	r4, 1
		diatomic[0] = 'd';
		uint8_t empty_slot_counter = empty_spaces;
		uint8_t free_electron_counter = empty_spaces;
		for(uint8_t i = 1; i < 9; i++)
		{
			printf("near_atom.valence[i] = %hd \r\n ", near_atom.valence[i-1]);
    63e2:	f8 01       	movw	r30, r16
    63e4:	61 90       	ld	r6, Z+
    63e6:	8f 01       	movw	r16, r30
    63e8:	86 2d       	mov	r24, r6
    63ea:	99 27       	eor	r25, r25
    63ec:	87 fd       	sbrc	r24, 7
    63ee:	90 95       	com	r25
    63f0:	9f 93       	push	r25
    63f2:	6f 92       	push	r6
    63f4:	9f 92       	push	r9
    63f6:	8f 92       	push	r8
    63f8:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
			if(near_atom.valence[i-1] == 0 && empty_slot_counter > 0)
    63fc:	0f 90       	pop	r0
    63fe:	0f 90       	pop	r0
    6400:	0f 90       	pop	r0
    6402:	0f 90       	pop	r0
    6404:	61 10       	cpse	r6, r1
    6406:	06 c0       	rjmp	.+12     	; 0x6414 <checkPossibleBonds+0x108>
    6408:	77 20       	and	r7, r7
    640a:	69 f0       	breq	.+26     	; 0x6426 <checkPossibleBonds+0x11a>
			{
				diatomic[i] = 2;
    640c:	f6 01       	movw	r30, r12
    640e:	40 82       	st	Z, r4
				empty_slot_counter = empty_slot_counter - 1;
    6410:	7a 94       	dec	r7
    6412:	0b c0       	rjmp	.+22     	; 0x642a <checkPossibleBonds+0x11e>
			}
			else if(near_atom.valence[i-1] == 1 && free_electron_counter > 0)
    6414:	f1 e0       	ldi	r31, 0x01	; 1
    6416:	6f 12       	cpse	r6, r31
    6418:	06 c0       	rjmp	.+12     	; 0x6426 <checkPossibleBonds+0x11a>
    641a:	55 20       	and	r5, r5
    641c:	21 f0       	breq	.+8      	; 0x6426 <checkPossibleBonds+0x11a>
			{
				diatomic[i] = 2;
    641e:	f6 01       	movw	r30, r12
    6420:	40 82       	st	Z, r4
				free_electron_counter = free_electron_counter - 1;
    6422:	5a 94       	dec	r5
    6424:	02 c0       	rjmp	.+4      	; 0x642a <checkPossibleBonds+0x11e>
			}
			else diatomic[i] = near_atom.valence[i-1];
    6426:	f6 01       	movw	r30, r12
    6428:	60 82       	st	Z, r6
    642a:	ff ef       	ldi	r31, 0xFF	; 255
    642c:	cf 1a       	sub	r12, r31
    642e:	df 0a       	sbc	r13, r31
	{
		printf("\tEntered diatomic if statement.\r\n");
		diatomic[0] = 'd';
		uint8_t empty_slot_counter = empty_spaces;
		uint8_t free_electron_counter = empty_spaces;
		for(uint8_t i = 1; i < 9; i++)
    6430:	e0 16       	cp	r14, r16
    6432:	f1 06       	cpc	r15, r17
    6434:	b1 f6       	brne	.-84     	; 0x63e2 <checkPossibleBonds+0xd6>
				diatomic[i] = 2;
				free_electron_counter = free_electron_counter - 1;
			}
			else diatomic[i] = near_atom.valence[i-1];
		}
		printf("At the end of the diatomic statement in checkPossibleBonds, valence is: ");
    6436:	88 ea       	ldi	r24, 0xA8	; 168
    6438:	98 e2       	ldi	r25, 0x28	; 40
    643a:	9f 93       	push	r25
    643c:	8f 93       	push	r24
    643e:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    6442:	8e 01       	movw	r16, r28
    6444:	0f 5f       	subi	r16, 0xFF	; 255
    6446:	1f 4f       	sbci	r17, 0xFF	; 255
    6448:	6e 01       	movw	r12, r28
    644a:	8a e0       	ldi	r24, 0x0A	; 10
    644c:	c8 0e       	add	r12, r24
    644e:	d1 1c       	adc	r13, r1
    6450:	0f 90       	pop	r0
    6452:	0f 90       	pop	r0
		//printValence(diatomic);
		for(uint8_t i=0; i<9; i++) printf(" %hd ", (int8_t)diatomic[i]); 
    6454:	0f 2e       	mov	r0, r31
    6456:	f1 ef       	ldi	r31, 0xF1	; 241
    6458:	ef 2e       	mov	r14, r31
    645a:	f8 e2       	ldi	r31, 0x28	; 40
    645c:	ff 2e       	mov	r15, r31
    645e:	f0 2d       	mov	r31, r0
    6460:	f8 01       	movw	r30, r16
    6462:	21 91       	ld	r18, Z+
    6464:	8f 01       	movw	r16, r30
    6466:	82 2f       	mov	r24, r18
    6468:	99 27       	eor	r25, r25
    646a:	87 fd       	sbrc	r24, 7
    646c:	90 95       	com	r25
    646e:	9f 93       	push	r25
    6470:	2f 93       	push	r18
    6472:	ff 92       	push	r15
    6474:	ef 92       	push	r14
    6476:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
    647a:	0f 90       	pop	r0
    647c:	0f 90       	pop	r0
    647e:	0f 90       	pop	r0
    6480:	0f 90       	pop	r0
    6482:	0c 15       	cp	r16, r12
    6484:	1d 05       	cpc	r17, r13
    6486:	61 f7       	brne	.-40     	; 0x6460 <checkPossibleBonds+0x154>
		printf("\r\n");
    6488:	80 ed       	ldi	r24, 0xD0	; 208
    648a:	99 e2       	ldi	r25, 0x29	; 41
    648c:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
		found_bond_routine();
    6490:	e9 dd       	rcall	.-1070   	; 0x6064 <found_bond_routine>
		VALENCE_FULL = 1;
    6492:	81 e0       	ldi	r24, 0x01	; 1
    6494:	80 93 9b 2d 	sts	0x2D9B, r24
		for(uint8_t i = 0; i < 6; i++)
		{
			if(bonded_atoms[i] == 0 || bonded_atoms[i] == senderID)
    6498:	80 91 a6 2e 	lds	r24, 0x2EA6
    649c:	90 91 a7 2e 	lds	r25, 0x2EA7
    64a0:	00 97       	sbiw	r24, 0x00	; 0
    64a2:	89 f0       	breq	.+34     	; 0x64c6 <checkPossibleBonds+0x1ba>
    64a4:	8a 15       	cp	r24, r10
    64a6:	9b 05       	cpc	r25, r11
    64a8:	89 f0       	breq	.+34     	; 0x64cc <checkPossibleBonds+0x1c0>
    64aa:	e8 ea       	ldi	r30, 0xA8	; 168
    64ac:	fe e2       	ldi	r31, 0x2E	; 46
    64ae:	81 e0       	ldi	r24, 0x01	; 1
    64b0:	90 e0       	ldi	r25, 0x00	; 0
    64b2:	ac 01       	movw	r20, r24
    64b4:	21 91       	ld	r18, Z+
    64b6:	31 91       	ld	r19, Z+
    64b8:	21 15       	cp	r18, r1
    64ba:	31 05       	cpc	r19, r1
    64bc:	49 f0       	breq	.+18     	; 0x64d0 <checkPossibleBonds+0x1c4>
    64be:	2a 15       	cp	r18, r10
    64c0:	3b 05       	cpc	r19, r11
    64c2:	71 f4       	brne	.+28     	; 0x64e0 <checkPossibleBonds+0x1d4>
    64c4:	05 c0       	rjmp	.+10     	; 0x64d0 <checkPossibleBonds+0x1c4>
    64c6:	40 e0       	ldi	r20, 0x00	; 0
    64c8:	50 e0       	ldi	r21, 0x00	; 0
    64ca:	02 c0       	rjmp	.+4      	; 0x64d0 <checkPossibleBonds+0x1c4>
    64cc:	40 e0       	ldi	r20, 0x00	; 0
    64ce:	50 e0       	ldi	r21, 0x00	; 0
			{
				bonded_atoms[i] = senderID;
    64d0:	44 0f       	add	r20, r20
    64d2:	55 1f       	adc	r21, r21
    64d4:	fa 01       	movw	r30, r20
    64d6:	ea 55       	subi	r30, 0x5A	; 90
    64d8:	f1 4d       	sbci	r31, 0xD1	; 209
    64da:	a0 82       	st	Z, r10
    64dc:	b1 82       	std	Z+1, r11	; 0x01
				break;
    64de:	04 c0       	rjmp	.+8      	; 0x64e8 <checkPossibleBonds+0x1dc>
    64e0:	01 96       	adiw	r24, 0x01	; 1
		//printValence(diatomic);
		for(uint8_t i=0; i<9; i++) printf(" %hd ", (int8_t)diatomic[i]); 
		printf("\r\n");
		found_bond_routine();
		VALENCE_FULL = 1;
		for(uint8_t i = 0; i < 6; i++)
    64e2:	86 30       	cpi	r24, 0x06	; 6
    64e4:	91 05       	cpc	r25, r1
    64e6:	29 f7       	brne	.-54     	; 0x64b2 <checkPossibleBonds+0x1a6>
			{
				bonded_atoms[i] = senderID;
				break;
			}
		}
		ir_targeted_send(ALL_DIRS, diatomic, 9, senderID);
    64e8:	95 01       	movw	r18, r10
    64ea:	49 e0       	ldi	r20, 0x09	; 9
    64ec:	50 e0       	ldi	r21, 0x00	; 0
    64ee:	be 01       	movw	r22, r28
    64f0:	6f 5f       	subi	r22, 0xFF	; 255
    64f2:	7f 4f       	sbci	r23, 0xFF	; 255
    64f4:	8f e3       	ldi	r24, 0x3F	; 63
    64f6:	0e 94 bf 0c 	call	0x197e	; 0x197e <ir_targeted_send>
		return 1;
    64fa:	81 e0       	ldi	r24, 0x01	; 1
    64fc:	00 c0       	rjmp	.+0      	; 0x64fe <checkPossibleBonds+0x1f2>
	}

}
    64fe:	66 96       	adiw	r28, 0x16	; 22
    6500:	cd bf       	out	0x3d, r28	; 61
    6502:	de bf       	out	0x3e, r29	; 62
    6504:	df 91       	pop	r29
    6506:	cf 91       	pop	r28
    6508:	1f 91       	pop	r17
    650a:	0f 91       	pop	r16
    650c:	ff 90       	pop	r15
    650e:	ef 90       	pop	r14
    6510:	df 90       	pop	r13
    6512:	cf 90       	pop	r12
    6514:	bf 90       	pop	r11
    6516:	af 90       	pop	r10
    6518:	9f 90       	pop	r9
    651a:	8f 90       	pop	r8
    651c:	7f 90       	pop	r7
    651e:	6f 90       	pop	r6
    6520:	5f 90       	pop	r5
    6522:	4f 90       	pop	r4
    6524:	08 95       	ret

00006526 <printValence>:

void printValence(int8_t valence[])
{
    6526:	ff 92       	push	r15
    6528:	0f 93       	push	r16
    652a:	1f 93       	push	r17
    652c:	cf 93       	push	r28
    652e:	df 93       	push	r29
    6530:	8c 01       	movw	r16, r24
	for(uint8_t i = 0; i < 8; i++)
    6532:	f1 2c       	mov	r15, r1
	{
		printf(" %hd ", valence[i]);
    6534:	c1 ef       	ldi	r28, 0xF1	; 241
    6536:	d8 e2       	ldi	r29, 0x28	; 40
    6538:	f8 01       	movw	r30, r16
    653a:	21 91       	ld	r18, Z+
    653c:	8f 01       	movw	r16, r30
    653e:	82 2f       	mov	r24, r18
    6540:	99 27       	eor	r25, r25
    6542:	87 fd       	sbrc	r24, 7
    6544:	90 95       	com	r25
    6546:	9f 93       	push	r25
    6548:	2f 93       	push	r18
    654a:	df 93       	push	r29
    654c:	cf 93       	push	r28
    654e:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>

}

void printValence(int8_t valence[])
{
	for(uint8_t i = 0; i < 8; i++)
    6552:	f3 94       	inc	r15
    6554:	0f 90       	pop	r0
    6556:	0f 90       	pop	r0
    6558:	0f 90       	pop	r0
    655a:	0f 90       	pop	r0
    655c:	e8 e0       	ldi	r30, 0x08	; 8
    655e:	fe 12       	cpse	r15, r30
    6560:	eb cf       	rjmp	.-42     	; 0x6538 <printValence+0x12>
	{
		printf(" %hd ", valence[i]);
	}
	printf("\r\n");
    6562:	80 ed       	ldi	r24, 0xD0	; 208
    6564:	99 e2       	ldi	r25, 0x29	; 41
    6566:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
}
    656a:	df 91       	pop	r29
    656c:	cf 91       	pop	r28
    656e:	1f 91       	pop	r17
    6570:	0f 91       	pop	r16
    6572:	ff 90       	pop	r15
    6574:	08 95       	ret

00006576 <init>:

/*
 * Any code in this function will be run once, when the robot starts.
 */
void init()
{
    6576:	cf 93       	push	r28
    6578:	df 93       	push	r29
    657a:	cd b7       	in	r28, 0x3d	; 61
    657c:	de b7       	in	r29, 0x3e	; 62
    657e:	2d 97       	sbiw	r28, 0x0d	; 13
    6580:	cd bf       	out	0x3d, r28	; 61
    6582:	de bf       	out	0x3e, r29	; 62
	switch(get_droplet_id()){
    6584:	80 91 d4 29 	lds	r24, 0x29D4
    6588:	90 91 d5 29 	lds	r25, 0x29D5
    658c:	88 3d       	cpi	r24, 0xD8	; 216
    658e:	2f ea       	ldi	r18, 0xAF	; 175
    6590:	92 07       	cpc	r25, r18
    6592:	19 f1       	breq	.+70     	; 0x65da <init+0x64>
    6594:	88 f4       	brcc	.+34     	; 0x65b8 <init+0x42>
    6596:	81 3a       	cpi	r24, 0xA1	; 161
    6598:	26 e4       	ldi	r18, 0x46	; 70
    659a:	92 07       	cpc	r25, r18
    659c:	f1 f1       	breq	.+124    	; 0x661a <init+0xa4>
    659e:	20 f4       	brcc	.+8      	; 0x65a8 <init+0x32>
    65a0:	82 36       	cpi	r24, 0x62	; 98
    65a2:	90 43       	sbci	r25, 0x30	; 48
    65a4:	f1 f0       	breq	.+60     	; 0x65e2 <init+0x6c>
    65a6:	3d c0       	rjmp	.+122    	; 0x6622 <init+0xac>
    65a8:	8f 36       	cpi	r24, 0x6F	; 111
    65aa:	2b e6       	ldi	r18, 0x6B	; 107
    65ac:	92 07       	cpc	r25, r18
    65ae:	69 f1       	breq	.+90     	; 0x660a <init+0x94>
    65b0:	8f 36       	cpi	r24, 0x6F	; 111
    65b2:	9c 46       	sbci	r25, 0x6C	; 108
    65b4:	f1 f0       	breq	.+60     	; 0x65f2 <init+0x7c>
    65b6:	35 c0       	rjmp	.+106    	; 0x6622 <init+0xac>
    65b8:	8e 36       	cpi	r24, 0x6E	; 110
    65ba:	2c eb       	ldi	r18, 0xBC	; 188
    65bc:	92 07       	cpc	r25, r18
    65be:	49 f1       	breq	.+82     	; 0x6612 <init+0x9c>
    65c0:	20 f4       	brcc	.+8      	; 0x65ca <init+0x54>
    65c2:	8f 36       	cpi	r24, 0x6F	; 111
    65c4:	93 4b       	sbci	r25, 0xB3	; 179
    65c6:	e9 f0       	breq	.+58     	; 0x6602 <init+0x8c>
    65c8:	2c c0       	rjmp	.+88     	; 0x6622 <init+0xac>
    65ca:	8c 36       	cpi	r24, 0x6C	; 108
    65cc:	28 ed       	ldi	r18, 0xD8	; 216
    65ce:	92 07       	cpc	r25, r18
    65d0:	a1 f0       	breq	.+40     	; 0x65fa <init+0x84>
    65d2:	8f 36       	cpi	r24, 0x6F	; 111
    65d4:	9a 4f       	sbci	r25, 0xFA	; 250
    65d6:	49 f0       	breq	.+18     	; 0x65ea <init+0x74>
    65d8:	24 c0       	rjmp	.+72     	; 0x6622 <init+0xac>
		case 0xAFD8: MY_CHEM_ID = 3; break;
    65da:	83 e0       	ldi	r24, 0x03	; 3
    65dc:	80 93 bf 2e 	sts	0x2EBF, r24
    65e0:	23 c0       	rjmp	.+70     	; 0x6628 <init+0xb2>
		case 0x3062: MY_CHEM_ID = 8; break;
    65e2:	88 e0       	ldi	r24, 0x08	; 8
    65e4:	80 93 bf 2e 	sts	0x2EBF, r24
    65e8:	1f c0       	rjmp	.+62     	; 0x6628 <init+0xb2>
		case 0xFA6F: MY_CHEM_ID = 6; break;
    65ea:	86 e0       	ldi	r24, 0x06	; 6
    65ec:	80 93 bf 2e 	sts	0x2EBF, r24
    65f0:	1b c0       	rjmp	.+54     	; 0x6628 <init+0xb2>
		case 0x6C6F: MY_CHEM_ID = 7; break;
    65f2:	87 e0       	ldi	r24, 0x07	; 7
    65f4:	80 93 bf 2e 	sts	0x2EBF, r24
    65f8:	17 c0       	rjmp	.+46     	; 0x6628 <init+0xb2>
		case 0xD86C: MY_CHEM_ID = 8; break;
    65fa:	88 e0       	ldi	r24, 0x08	; 8
    65fc:	80 93 bf 2e 	sts	0x2EBF, r24
    6600:	13 c0       	rjmp	.+38     	; 0x6628 <init+0xb2>
		case 0xB36F: MY_CHEM_ID = 8; break;
    6602:	88 e0       	ldi	r24, 0x08	; 8
    6604:	80 93 bf 2e 	sts	0x2EBF, r24
    6608:	0f c0       	rjmp	.+30     	; 0x6628 <init+0xb2>
		case 0x6B6F: MY_CHEM_ID = 17; break;
    660a:	81 e1       	ldi	r24, 0x11	; 17
    660c:	80 93 bf 2e 	sts	0x2EBF, r24
    6610:	0b c0       	rjmp	.+22     	; 0x6628 <init+0xb2>
		case 0xBC6E: MY_CHEM_ID = 17; break;
    6612:	81 e1       	ldi	r24, 0x11	; 17
    6614:	80 93 bf 2e 	sts	0x2EBF, r24
    6618:	07 c0       	rjmp	.+14     	; 0x6628 <init+0xb2>
		case 0x46A1: MY_CHEM_ID = 4; break;
    661a:	84 e0       	ldi	r24, 0x04	; 4
    661c:	80 93 bf 2e 	sts	0x2EBF, r24
    6620:	03 c0       	rjmp	.+6      	; 0x6628 <init+0xb2>
		default:     MY_CHEM_ID = 1; break;
    6622:	81 e0       	ldi	r24, 0x01	; 1
    6624:	80 93 bf 2e 	sts	0x2EBF, r24
	}
	
	VALENCE_FULL = 0;
    6628:	10 92 9b 2d 	sts	0x2D9B, r1
    662c:	8c e9       	ldi	r24, 0x9C	; 156
    662e:	9d e2       	ldi	r25, 0x2D	; 45
    6630:	24 ea       	ldi	r18, 0xA4	; 164
    6632:	3e e2       	ldi	r19, 0x2E	; 46
	for(uint8_t i = 0; i < 12; i++)
	{
		near_atoms[i] = NULL_NEAR_ATOM;
    6634:	46 e1       	ldi	r20, 0x16	; 22
    6636:	e6 ed       	ldi	r30, 0xD6	; 214
    6638:	f9 e2       	ldi	r31, 0x29	; 41
    663a:	dc 01       	movw	r26, r24
    663c:	54 2f       	mov	r21, r20
    663e:	01 90       	ld	r0, Z+
    6640:	0d 92       	st	X+, r0
    6642:	5a 95       	dec	r21
    6644:	e1 f7       	brne	.-8      	; 0x663e <init+0xc8>
    6646:	46 96       	adiw	r24, 0x16	; 22
		case 0x46A1: MY_CHEM_ID = 4; break;
		default:     MY_CHEM_ID = 1; break;
	}
	
	VALENCE_FULL = 0;
	for(uint8_t i = 0; i < 12; i++)
    6648:	82 17       	cp	r24, r18
    664a:	93 07       	cpc	r25, r19
    664c:	a1 f7       	brne	.-24     	; 0x6636 <init+0xc0>
	{
		near_atoms[i] = NULL_NEAR_ATOM;
	}
	//set_rgb(10, 255, 255); //this is a test line
	myID = getAtomFromAtomicNum(MY_CHEM_ID);
    664e:	60 91 bf 2e 	lds	r22, 0x2EBF
    6652:	ce 01       	movw	r24, r28
    6654:	01 96       	adiw	r24, 0x01	; 1
    6656:	e3 db       	rcall	.-2106   	; 0x5e1e <getAtomFromAtomicNum>
    6658:	8d e0       	ldi	r24, 0x0D	; 13
    665a:	fe 01       	movw	r30, r28
    665c:	31 96       	adiw	r30, 0x01	; 1
    665e:	a2 eb       	ldi	r26, 0xB2	; 178
    6660:	be e2       	ldi	r27, 0x2E	; 46
    6662:	01 90       	ld	r0, Z+
    6664:	0d 92       	st	X+, r0
    6666:	8a 95       	dec	r24
    6668:	e1 f7       	brne	.-8      	; 0x6662 <init+0xec>
	update_near_atoms();
    666a:	f9 da       	rcall	.-2574   	; 0x5c5e <update_near_atoms>
}
    666c:	2d 96       	adiw	r28, 0x0d	; 13
    666e:	cd bf       	out	0x3d, r28	; 61
    6670:	de bf       	out	0x3e, r29	; 62
    6672:	df 91       	pop	r29
    6674:	cf 91       	pop	r28
    6676:	08 95       	ret

00006678 <loop>:
/*
 * The code in this function will be called repeatedly, as fast as it can execute.
 */
void loop()
{
	delay_ms(500);
    6678:	84 ef       	ldi	r24, 0xF4	; 244
    667a:	91 e0       	ldi	r25, 0x01	; 1
    667c:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
	detectOtherDroplets();
    6680:	97 dd       	rcall	.-1234   	; 0x61b0 <detectOtherDroplets>
	uint32_t time_floor = ((get_time()/500)*500);
    6682:	0e 94 9b 02 	call	0x536	; 0x536 <get_time>
    6686:	24 ef       	ldi	r18, 0xF4	; 244
    6688:	31 e0       	ldi	r19, 0x01	; 1
    668a:	40 e0       	ldi	r20, 0x00	; 0
    668c:	50 e0       	ldi	r21, 0x00	; 0
    668e:	0e 94 28 3c 	call	0x7850	; 0x7850 <__udivmodsi4>
    6692:	a4 ef       	ldi	r26, 0xF4	; 244
    6694:	b1 e0       	ldi	r27, 0x01	; 1
    6696:	0e 94 5f 3c 	call	0x78be	; 0x78be <__muluhisi3>
	if(time_floor%4000==0){
    669a:	20 ea       	ldi	r18, 0xA0	; 160
    669c:	3f e0       	ldi	r19, 0x0F	; 15
    669e:	40 e0       	ldi	r20, 0x00	; 0
    66a0:	50 e0       	ldi	r21, 0x00	; 0
    66a2:	0e 94 28 3c 	call	0x7850	; 0x7850 <__udivmodsi4>
    66a6:	67 2b       	or	r22, r23
    66a8:	68 2b       	or	r22, r24
    66aa:	69 2b       	or	r22, r25
    66ac:	61 f4       	brne	.+24     	; 0x66c6 <loop+0x4e>
		printf("sent bonded_atoms\r\n");
    66ae:	87 ef       	ldi	r24, 0xF7	; 247
    66b0:	98 e2       	ldi	r25, 0x28	; 40
    66b2:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
		broadcast_rnb_data();
    66b6:	0e 94 81 1a 	call	0x3502	; 0x3502 <broadcast_rnb_data>
		ir_send(ALL_DIRS, bonded_atoms, 12); //Should this be here or inside the 5 second loop? Also, do I have the last parameter right? 12 bytes?
    66ba:	4c e0       	ldi	r20, 0x0C	; 12
    66bc:	66 ea       	ldi	r22, 0xA6	; 166
    66be:	7e e2       	ldi	r23, 0x2E	; 46
    66c0:	8f e3       	ldi	r24, 0x3F	; 63
    66c2:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <ir_send>
    66c6:	08 95       	ret

000066c8 <handle_msg>:
/*
 * After each pass through loop(), the robot checks for all messages it has 
 * received, and calls this function once for each message.
 */
void handle_msg(ir_msg* msg_struct)
{
    66c8:	4f 92       	push	r4
    66ca:	5f 92       	push	r5
    66cc:	6f 92       	push	r6
    66ce:	7f 92       	push	r7
    66d0:	8f 92       	push	r8
    66d2:	9f 92       	push	r9
    66d4:	af 92       	push	r10
    66d6:	bf 92       	push	r11
    66d8:	cf 92       	push	r12
    66da:	df 92       	push	r13
    66dc:	ef 92       	push	r14
    66de:	ff 92       	push	r15
    66e0:	0f 93       	push	r16
    66e2:	1f 93       	push	r17
    66e4:	cf 93       	push	r28
    66e6:	df 93       	push	r29
    66e8:	cd b7       	in	r28, 0x3d	; 61
    66ea:	de b7       	in	r29, 0x3e	; 62
    66ec:	66 97       	sbiw	r28, 0x16	; 22
    66ee:	cd bf       	out	0x3d, r28	; 61
    66f0:	de bf       	out	0x3e, r29	; 62
    66f2:	8c 01       	movw	r16, r24
#define LED_B_TC				TCD1		// rationale: BLUE LED is on OC1x pins

void rgb_led_init(void); // Set RGB LED pins as output & initialize timers for PWM

// Get and set intensity for red LED
inline uint8_t get_red_led() { return LED_R_TC.CCBBUF; }
    66f4:	e0 e4       	ldi	r30, 0x40	; 64
    66f6:	fa e0       	ldi	r31, 0x0A	; 10
    66f8:	82 ac       	ldd	r8, Z+58	; 0x3a
    66fa:	93 ac       	ldd	r9, Z+59	; 0x3b
inline void set_red_led(uint8_t saturation) { LED_R_TC.CCBBUF = saturation; }

// Get and set intensity for green LED
inline uint8_t get_green_led() { return LED_G_TC.CCABUF; }
    66fc:	60 ac       	ldd	r6, Z+56	; 0x38
    66fe:	71 ac       	ldd	r7, Z+57	; 0x39
inline void set_green_led(uint8_t saturation) { LED_G_TC.CCABUF = saturation; }
	
// Get and set intensity for blue LED
inline uint8_t get_blue_led() { return LED_B_TC.CCABUF; }
    6700:	e0 e4       	ldi	r30, 0x40	; 64
    6702:	f9 e0       	ldi	r31, 0x09	; 9
    6704:	40 ac       	ldd	r4, Z+56	; 0x38
    6706:	51 ac       	ldd	r5, Z+57	; 0x39
	uint8_t r=get_red_led(), g=get_green_led(), b=get_blue_led();
	set_rgb(0,0,0);
    6708:	40 e0       	ldi	r20, 0x00	; 0
    670a:	60 e0       	ldi	r22, 0x00	; 0
    670c:	80 e0       	ldi	r24, 0x00	; 0
    670e:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
	delay_ms(50);
    6712:	82 e3       	ldi	r24, 0x32	; 50
    6714:	90 e0       	ldi	r25, 0x00	; 0
    6716:	0e 94 b0 24 	call	0x4960	; 0x4960 <delay_ms>
	Atom* near_atom;
	
	//Message is an Atom struct
	if(msg_struct->length==sizeof(Atom))
    671a:	d8 01       	movw	r26, r16
    671c:	19 96       	adiw	r26, 0x09	; 9
    671e:	9c 91       	ld	r25, X
    6720:	9d 30       	cpi	r25, 0x0D	; 13
    6722:	09 f0       	breq	.+2      	; 0x6726 <handle_msg+0x5e>
    6724:	43 c0       	rjmp	.+134    	; 0x67ac <handle_msg+0xe4>
	{
		printf("Received atom struct \r\n");
    6726:	8a e0       	ldi	r24, 0x0A	; 10
    6728:	99 e2       	ldi	r25, 0x29	; 41
    672a:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
		near_atom = (Atom*)(msg_struct->msg); //do some kind of check to make sure this is actually an atom.
    672e:	f8 01       	movw	r30, r16
    6730:	86 81       	ldd	r24, Z+6	; 0x06
    6732:	97 81       	ldd	r25, Z+7	; 0x07
		//If this droplet isn't in our list, add it. If it is, update its last_msg_t to 0.
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
		{
			//printf("near_atoms[i].id = %u and msg_struct.sender_id is %u \r\n", near_atoms[i].id, msg_struct->sender_ID);
			if(near_atoms[i].id ==msg_struct->sender_ID)
    6734:	64 81       	ldd	r22, Z+4	; 0x04
    6736:	75 81       	ldd	r23, Z+5	; 0x05
    6738:	20 91 a9 2d 	lds	r18, 0x2DA9
    673c:	30 91 aa 2d 	lds	r19, 0x2DAA
    6740:	26 17       	cp	r18, r22
    6742:	37 07       	cpc	r19, r23
    6744:	59 f0       	breq	.+22     	; 0x675c <handle_msg+0x94>
    6746:	ef eb       	ldi	r30, 0xBF	; 191
    6748:	fd e2       	ldi	r31, 0x2D	; 45
    674a:	21 e0       	ldi	r18, 0x01	; 1
    674c:	30 e0       	ldi	r19, 0x00	; 0
    674e:	d9 01       	movw	r26, r18
    6750:	40 81       	ld	r20, Z
    6752:	51 81       	ldd	r21, Z+1	; 0x01
    6754:	46 17       	cp	r20, r22
    6756:	57 07       	cpc	r21, r23
    6758:	69 f4       	brne	.+26     	; 0x6774 <handle_msg+0xac>
    675a:	02 c0       	rjmp	.+4      	; 0x6760 <handle_msg+0x98>
    675c:	a0 e0       	ldi	r26, 0x00	; 0
    675e:	b0 e0       	ldi	r27, 0x00	; 0
			{
				near_atoms[i].last_msg_t = 0;
    6760:	86 e1       	ldi	r24, 0x16	; 22
    6762:	8a 9f       	mul	r24, r26
    6764:	f0 01       	movw	r30, r0
    6766:	8b 9f       	mul	r24, r27
    6768:	f0 0d       	add	r31, r0
    676a:	11 24       	eor	r1, r1
    676c:	e4 56       	subi	r30, 0x64	; 100
    676e:	f2 4d       	sbci	r31, 0xD2	; 210
    6770:	14 8a       	std	Z+20, r1	; 0x14
    6772:	b5 c0       	rjmp	.+362    	; 0x68de <handle_msg+0x216>
    6774:	2f 5f       	subi	r18, 0xFF	; 255
    6776:	3f 4f       	sbci	r19, 0xFF	; 255
    6778:	76 96       	adiw	r30, 0x16	; 22
		//printf("Printing near_atom.valence before modification: ");
		//printValence(near_atom->valence);
		
		//If this droplet isn't in our list, add it. If it is, update its last_msg_t to 0.
		uint8_t found = 0;
		for(uint8_t i = 0; i < 12; i++)
    677a:	2c 30       	cpi	r18, 0x0C	; 12
    677c:	31 05       	cpc	r19, r1
    677e:	39 f7       	brne	.-50     	; 0x674e <handle_msg+0x86>
    6780:	b4 c0       	rjmp	.+360    	; 0x68ea <handle_msg+0x222>
		if (found == 0) //add new droplet to near_atoms
		{
			Near_Atom close_atom = {*near_atom, msg_struct->sender_ID, 0, 0, 0, 0, 0};
			//printf("\t\tMsg_struct.sender_id is: %u and close_atom.id is: %u \r\n", msg_struct->sender_ID, close_atom.id);
			uint8_t isBonded = checkPossibleBonds(*near_atom, msg_struct->sender_ID);
			if(isBonded) close_atom.bonded = 1;
    6782:	81 e0       	ldi	r24, 0x01	; 1
    6784:	8e 8b       	std	Y+22, r24	; 0x16
			add_to_near_atoms(close_atom);
    6786:	8d b7       	in	r24, 0x3d	; 61
    6788:	9e b7       	in	r25, 0x3e	; 62
    678a:	46 97       	sbiw	r24, 0x16	; 22
    678c:	8d bf       	out	0x3d, r24	; 61
    678e:	9e bf       	out	0x3e, r25	; 62
    6790:	ad b7       	in	r26, 0x3d	; 61
    6792:	be b7       	in	r27, 0x3e	; 62
    6794:	11 96       	adiw	r26, 0x01	; 1
    6796:	86 e1       	ldi	r24, 0x16	; 22
    6798:	fe 01       	movw	r30, r28
    679a:	31 96       	adiw	r30, 0x01	; 1
    679c:	01 90       	ld	r0, Z+
    679e:	0d 92       	st	X+, r0
    67a0:	8a 95       	dec	r24
    67a2:	e1 f7       	brne	.-8      	; 0x679c <handle_msg+0xd4>
    67a4:	fd da       	rcall	.-2566   	; 0x5da0 <add_to_near_atoms>
    67a6:	cd bf       	out	0x3d, r28	; 61
    67a8:	de bf       	out	0x3e, r29	; 62
    67aa:	99 c0       	rjmp	.+306    	; 0x68de <handle_msg+0x216>
		}
	}
	
	//Message is that a diatomic bond was formed
	else if(msg_struct->msg[0] == 'd')
    67ac:	f8 01       	movw	r30, r16
    67ae:	a6 81       	ldd	r26, Z+6	; 0x06
    67b0:	b7 81       	ldd	r27, Z+7	; 0x07
    67b2:	4c 91       	ld	r20, X
    67b4:	44 36       	cpi	r20, 0x64	; 100
    67b6:	09 f0       	breq	.+2      	; 0x67ba <handle_msg+0xf2>
    67b8:	56 c0       	rjmp	.+172    	; 0x6866 <handle_msg+0x19e>
	{
		printf("Got 'bond found' message.\r\n");
    67ba:	81 e2       	ldi	r24, 0x21	; 33
    67bc:	99 e2       	ldi	r25, 0x29	; 41
    67be:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
		found_bond_routine();
    67c2:	50 dc       	rcall	.-1888   	; 0x6064 <found_bond_routine>
		VALENCE_FULL = 1;
    67c4:	81 e0       	ldi	r24, 0x01	; 1
    67c6:	80 93 9b 2d 	sts	0x2D9B, r24
    67ca:	e2 eb       	ldi	r30, 0xB2	; 178
    67cc:	fe e2       	ldi	r31, 0x2E	; 46
    67ce:	81 e0       	ldi	r24, 0x01	; 1
    67d0:	90 e0       	ldi	r25, 0x00	; 0
		for(uint8_t i = 0; i < 8; i++)
		{
			myID.valence[i] = msg_struct->msg[i+1];
    67d2:	d8 01       	movw	r26, r16
    67d4:	16 96       	adiw	r26, 0x06	; 6
    67d6:	2d 91       	ld	r18, X+
    67d8:	3c 91       	ld	r19, X
    67da:	17 97       	sbiw	r26, 0x07	; 7
    67dc:	d9 01       	movw	r26, r18
    67de:	a8 0f       	add	r26, r24
    67e0:	b9 1f       	adc	r27, r25
    67e2:	2c 91       	ld	r18, X
    67e4:	21 93       	st	Z+, r18
    67e6:	01 96       	adiw	r24, 0x01	; 1
	else if(msg_struct->msg[0] == 'd')
	{
		printf("Got 'bond found' message.\r\n");
		found_bond_routine();
		VALENCE_FULL = 1;
		for(uint8_t i = 0; i < 8; i++)
    67e8:	89 30       	cpi	r24, 0x09	; 9
    67ea:	91 05       	cpc	r25, r1
    67ec:	91 f7       	brne	.-28     	; 0x67d2 <handle_msg+0x10a>
		{
			myID.valence[i] = msg_struct->msg[i+1];
		}
		printf("After receiving the 'bond found' message, valence is: ");
    67ee:	8c e3       	ldi	r24, 0x3C	; 60
    67f0:	99 e2       	ldi	r25, 0x29	; 41
    67f2:	9f 93       	push	r25
    67f4:	8f 93       	push	r24
    67f6:	0e 94 28 3f 	call	0x7e50	; 0x7e50 <printf>
		printValence(myID.valence);
    67fa:	82 eb       	ldi	r24, 0xB2	; 178
    67fc:	9e e2       	ldi	r25, 0x2E	; 46
    67fe:	93 de       	rcall	.-730    	; 0x6526 <printValence>
		for(uint8_t i = 0; i < 6; i++)
		{
			if(bonded_atoms[i] == 0 || bonded_atoms[i] == msg_struct->sender_ID)
    6800:	80 91 a6 2e 	lds	r24, 0x2EA6
    6804:	90 91 a7 2e 	lds	r25, 0x2EA7
    6808:	0f 90       	pop	r0
    680a:	0f 90       	pop	r0
    680c:	00 97       	sbiw	r24, 0x00	; 0
    680e:	a1 f0       	breq	.+40     	; 0x6838 <handle_msg+0x170>
    6810:	f8 01       	movw	r30, r16
    6812:	44 81       	ldd	r20, Z+4	; 0x04
    6814:	55 81       	ldd	r21, Z+5	; 0x05
    6816:	84 17       	cp	r24, r20
    6818:	95 07       	cpc	r25, r21
    681a:	89 f0       	breq	.+34     	; 0x683e <handle_msg+0x176>
    681c:	e8 ea       	ldi	r30, 0xA8	; 168
    681e:	fe e2       	ldi	r31, 0x2E	; 46
    6820:	81 e0       	ldi	r24, 0x01	; 1
    6822:	90 e0       	ldi	r25, 0x00	; 0
    6824:	bc 01       	movw	r22, r24
    6826:	21 91       	ld	r18, Z+
    6828:	31 91       	ld	r19, Z+
    682a:	21 15       	cp	r18, r1
    682c:	31 05       	cpc	r19, r1
    682e:	49 f0       	breq	.+18     	; 0x6842 <handle_msg+0x17a>
    6830:	24 17       	cp	r18, r20
    6832:	35 07       	cpc	r19, r21
    6834:	99 f4       	brne	.+38     	; 0x685c <handle_msg+0x194>
    6836:	05 c0       	rjmp	.+10     	; 0x6842 <handle_msg+0x17a>
    6838:	60 e0       	ldi	r22, 0x00	; 0
    683a:	70 e0       	ldi	r23, 0x00	; 0
    683c:	02 c0       	rjmp	.+4      	; 0x6842 <handle_msg+0x17a>
    683e:	60 e0       	ldi	r22, 0x00	; 0
    6840:	70 e0       	ldi	r23, 0x00	; 0
			{
				bonded_atoms[i] = msg_struct->sender_ID;
    6842:	d8 01       	movw	r26, r16
    6844:	14 96       	adiw	r26, 0x04	; 4
    6846:	8d 91       	ld	r24, X+
    6848:	9c 91       	ld	r25, X
    684a:	15 97       	sbiw	r26, 0x05	; 5
    684c:	fb 01       	movw	r30, r22
    684e:	ee 0f       	add	r30, r30
    6850:	ff 1f       	adc	r31, r31
    6852:	ea 55       	subi	r30, 0x5A	; 90
    6854:	f1 4d       	sbci	r31, 0xD1	; 209
    6856:	80 83       	st	Z, r24
    6858:	91 83       	std	Z+1, r25	; 0x01
				break;
    685a:	41 c0       	rjmp	.+130    	; 0x68de <handle_msg+0x216>
    685c:	01 96       	adiw	r24, 0x01	; 1
		{
			myID.valence[i] = msg_struct->msg[i+1];
		}
		printf("After receiving the 'bond found' message, valence is: ");
		printValence(myID.valence);
		for(uint8_t i = 0; i < 6; i++)
    685e:	86 30       	cpi	r24, 0x06	; 6
    6860:	91 05       	cpc	r25, r1
    6862:	01 f7       	brne	.-64     	; 0x6824 <handle_msg+0x15c>
    6864:	3c c0       	rjmp	.+120    	; 0x68de <handle_msg+0x216>
			}
		}
	}
	
	//Message is another Droplet's bonded_atoms array
	else if(msg_struct->length == sizeof(bonded_atoms))
    6866:	9c 30       	cpi	r25, 0x0C	; 12
    6868:	d1 f5       	brne	.+116    	; 0x68de <handle_msg+0x216>
		//Check to see if I'm bonded to the droplet who just sent me his bonded_atoms array
		uint16_t senderIDFound = 0;
		uint8_t i;
		for(i = 0; i < 6; i++)
		{
			if(bonded_atoms[i] == msg_struct->sender_ID)
    686a:	f8 01       	movw	r30, r16
    686c:	24 81       	ldd	r18, Z+4	; 0x04
    686e:	35 81       	ldd	r19, Z+5	; 0x05
    6870:	80 91 a6 2e 	lds	r24, 0x2EA6
    6874:	90 91 a7 2e 	lds	r25, 0x2EA7
    6878:	82 17       	cp	r24, r18
    687a:	93 07       	cpc	r25, r19
    687c:	09 f4       	brne	.+2      	; 0x6880 <handle_msg+0x1b8>
    687e:	5d c0       	rjmp	.+186    	; 0x693a <handle_msg+0x272>
    6880:	e8 ea       	ldi	r30, 0xA8	; 168
    6882:	fe e2       	ldi	r31, 0x2E	; 46
		//printf("Received bonded_atoms \r\n");
		//How does the code know this is an array of uint16_ts? Can I iterate through it like usual?
		//Check to see if I'm bonded to the droplet who just sent me his bonded_atoms array
		uint16_t senderIDFound = 0;
		uint8_t i;
		for(i = 0; i < 6; i++)
    6884:	ff 24       	eor	r15, r15
    6886:	f3 94       	inc	r15
		{
			if(bonded_atoms[i] == msg_struct->sender_ID)
    6888:	81 91       	ld	r24, Z+
    688a:	91 91       	ld	r25, Z+
    688c:	82 17       	cp	r24, r18
    688e:	93 07       	cpc	r25, r19
    6890:	09 f4       	brne	.+2      	; 0x6894 <handle_msg+0x1cc>
    6892:	54 c0       	rjmp	.+168    	; 0x693c <handle_msg+0x274>
		//printf("Received bonded_atoms \r\n");
		//How does the code know this is an array of uint16_ts? Can I iterate through it like usual?
		//Check to see if I'm bonded to the droplet who just sent me his bonded_atoms array
		uint16_t senderIDFound = 0;
		uint8_t i;
		for(i = 0; i < 6; i++)
    6894:	f3 94       	inc	r15
    6896:	86 e0       	ldi	r24, 0x06	; 6
    6898:	f8 12       	cpse	r15, r24
    689a:	f6 cf       	rjmp	.-20     	; 0x6888 <handle_msg+0x1c0>
    689c:	20 c0       	rjmp	.+64     	; 0x68de <handle_msg+0x216>
		if(senderIDFound == 1)
		{
			uint8_t myIdFound = 0;
			for(uint8_t j = 0; j < 6; j++)
			{
				if(msg_struct->msg[j] == get_droplet_id())
    689e:	8d 91       	ld	r24, X+
    68a0:	90 e0       	ldi	r25, 0x00	; 0
    68a2:	82 17       	cp	r24, r18
    68a4:	93 07       	cpc	r25, r19
    68a6:	d9 f0       	breq	.+54     	; 0x68de <handle_msg+0x216>
    68a8:	41 50       	subi	r20, 0x01	; 1
		}
		//If so, check to see if he's bonded to me. If he isn't, break my bond.
		if(senderIDFound == 1)
		{
			uint8_t myIdFound = 0;
			for(uint8_t j = 0; j < 6; j++)
    68aa:	c9 f7       	brne	.-14     	; 0x689e <handle_msg+0x1d6>
    68ac:	53 c0       	rjmp	.+166    	; 0x6954 <handle_msg+0x28c>
				printf("I think I'm bonded to a droplet who doesn't think he's bonded to me. I'm breaking that bond. \r\n");
				//Remove other droplet from bonded_atoms and remove the bonded flag from near_atoms
				bonded_atoms[i] = 0;
				for(uint8_t k = 0; k < 12; k++)
				{
					if(near_atoms[k].id == msg_struct->sender_ID) 
    68ae:	bc 01       	movw	r22, r24
    68b0:	20 81       	ld	r18, Z
    68b2:	31 81       	ldd	r19, Z+1	; 0x01
    68b4:	24 17       	cp	r18, r20
    68b6:	35 07       	cpc	r19, r21
    68b8:	69 f4       	brne	.+26     	; 0x68d4 <handle_msg+0x20c>
    68ba:	02 c0       	rjmp	.+4      	; 0x68c0 <handle_msg+0x1f8>
    68bc:	60 e0       	ldi	r22, 0x00	; 0
    68be:	70 e0       	ldi	r23, 0x00	; 0
					{
						near_atoms[k].bonded = 0;
    68c0:	86 e1       	ldi	r24, 0x16	; 22
    68c2:	86 9f       	mul	r24, r22
    68c4:	f0 01       	movw	r30, r0
    68c6:	87 9f       	mul	r24, r23
    68c8:	f0 0d       	add	r31, r0
    68ca:	11 24       	eor	r1, r1
    68cc:	e4 56       	subi	r30, 0x64	; 100
    68ce:	f2 4d       	sbci	r31, 0xD2	; 210
    68d0:	15 8a       	std	Z+21, r1	; 0x15
						break;
    68d2:	05 c0       	rjmp	.+10     	; 0x68de <handle_msg+0x216>
    68d4:	01 96       	adiw	r24, 0x01	; 1
    68d6:	76 96       	adiw	r30, 0x16	; 22
			if(myIdFound == 0)
			{
				printf("I think I'm bonded to a droplet who doesn't think he's bonded to me. I'm breaking that bond. \r\n");
				//Remove other droplet from bonded_atoms and remove the bonded flag from near_atoms
				bonded_atoms[i] = 0;
				for(uint8_t k = 0; k < 12; k++)
    68d8:	8c 30       	cpi	r24, 0x0C	; 12
    68da:	91 05       	cpc	r25, r1
    68dc:	41 f7       	brne	.-48     	; 0x68ae <handle_msg+0x1e6>
				}
			}
		}
		
	}
	set_rgb(r,g,b);
    68de:	44 2d       	mov	r20, r4
    68e0:	66 2d       	mov	r22, r6
    68e2:	88 2d       	mov	r24, r8
    68e4:	0e 94 19 21 	call	0x4232	; 0x4232 <set_rgb>
    68e8:	53 c0       	rjmp	.+166    	; 0x6990 <handle_msg+0x2c8>
				break;
			}
		}
		if (found == 0) //add new droplet to near_atoms
		{
			Near_Atom close_atom = {*near_atom, msg_struct->sender_ID, 0, 0, 0, 0, 0};
    68ea:	2d e0       	ldi	r18, 0x0D	; 13
    68ec:	fc 01       	movw	r30, r24
    68ee:	de 01       	movw	r26, r28
    68f0:	11 96       	adiw	r26, 0x01	; 1
    68f2:	01 90       	ld	r0, Z+
    68f4:	0d 92       	st	X+, r0
    68f6:	2a 95       	dec	r18
    68f8:	e1 f7       	brne	.-8      	; 0x68f2 <handle_msg+0x22a>
    68fa:	d8 01       	movw	r26, r16
    68fc:	14 96       	adiw	r26, 0x04	; 4
    68fe:	ad 90       	ld	r10, X+
    6900:	bc 90       	ld	r11, X
    6902:	15 97       	sbiw	r26, 0x05	; 5
    6904:	ae 86       	std	Y+14, r10	; 0x0e
    6906:	bf 86       	std	Y+15, r11	; 0x0f
    6908:	18 8a       	std	Y+16, r1	; 0x10
    690a:	19 8a       	std	Y+17, r1	; 0x11
    690c:	1a 8a       	std	Y+18, r1	; 0x12
    690e:	1b 8a       	std	Y+19, r1	; 0x13
    6910:	1c 8a       	std	Y+20, r1	; 0x14
    6912:	1d 8a       	std	Y+21, r1	; 0x15
    6914:	1e 8a       	std	Y+22, r1	; 0x16
			//printf("\t\tMsg_struct.sender_id is: %u and close_atom.id is: %u \r\n", msg_struct->sender_ID, close_atom.id);
			uint8_t isBonded = checkPossibleBonds(*near_atom, msg_struct->sender_ID);
    6916:	fc 01       	movw	r30, r24
    6918:	c0 80       	ld	r12, Z
    691a:	d1 80       	ldd	r13, Z+1	; 0x01
    691c:	e2 80       	ldd	r14, Z+2	; 0x02
    691e:	f3 80       	ldd	r15, Z+3	; 0x03
    6920:	04 81       	ldd	r16, Z+4	; 0x04
    6922:	15 81       	ldd	r17, Z+5	; 0x05
    6924:	26 81       	ldd	r18, Z+6	; 0x06
    6926:	37 81       	ldd	r19, Z+7	; 0x07
    6928:	40 85       	ldd	r20, Z+8	; 0x08
    692a:	51 85       	ldd	r21, Z+9	; 0x09
    692c:	62 85       	ldd	r22, Z+10	; 0x0a
    692e:	73 85       	ldd	r23, Z+11	; 0x0b
    6930:	84 85       	ldd	r24, Z+12	; 0x0c
    6932:	ec dc       	rcall	.-1576   	; 0x630c <checkPossibleBonds>
			if(isBonded) close_atom.bonded = 1;
    6934:	81 11       	cpse	r24, r1
    6936:	25 cf       	rjmp	.-438    	; 0x6782 <handle_msg+0xba>
    6938:	26 cf       	rjmp	.-436    	; 0x6786 <handle_msg+0xbe>
		//Check to see if I'm bonded to the droplet who just sent me his bonded_atoms array
		uint16_t senderIDFound = 0;
		uint8_t i;
		for(i = 0; i < 6; i++)
		{
			if(bonded_atoms[i] == msg_struct->sender_ID)
    693a:	f1 2c       	mov	r15, r1
extern uint8_t user_handle_command(char* command_word, char* command_args);

/**
 * \brief Returns this Droplet's unique 16-bit identifier. 0 will never be an identifier.
 */
inline uint16_t get_droplet_id(){ return droplet_ID; }
    693c:	20 91 d4 29 	lds	r18, 0x29D4
    6940:	30 91 d5 29 	lds	r19, 0x29D5
		if(senderIDFound == 1)
		{
			uint8_t myIdFound = 0;
			for(uint8_t j = 0; j < 6; j++)
			{
				if(msg_struct->msg[j] == get_droplet_id())
    6944:	84 2f       	mov	r24, r20
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	82 17       	cp	r24, r18
    694a:	93 07       	cpc	r25, r19
    694c:	41 f2       	breq	.-112    	; 0x68de <handle_msg+0x216>
    694e:	11 96       	adiw	r26, 0x01	; 1
    6950:	45 e0       	ldi	r20, 0x05	; 5
    6952:	a5 cf       	rjmp	.-182    	; 0x689e <handle_msg+0x1d6>
					break;
				}
			}
			if(myIdFound == 0)
			{
				printf("I think I'm bonded to a droplet who doesn't think he's bonded to me. I'm breaking that bond. \r\n");
    6954:	83 e7       	ldi	r24, 0x73	; 115
    6956:	99 e2       	ldi	r25, 0x29	; 41
    6958:	0e 94 39 3f 	call	0x7e72	; 0x7e72 <puts>
				//Remove other droplet from bonded_atoms and remove the bonded flag from near_atoms
				bonded_atoms[i] = 0;
    695c:	ef 2d       	mov	r30, r15
    695e:	f0 e0       	ldi	r31, 0x00	; 0
    6960:	ee 0f       	add	r30, r30
    6962:	ff 1f       	adc	r31, r31
    6964:	ea 55       	subi	r30, 0x5A	; 90
    6966:	f1 4d       	sbci	r31, 0xD1	; 209
    6968:	10 82       	st	Z, r1
    696a:	11 82       	std	Z+1, r1	; 0x01
				for(uint8_t k = 0; k < 12; k++)
				{
					if(near_atoms[k].id == msg_struct->sender_ID) 
    696c:	d8 01       	movw	r26, r16
    696e:	14 96       	adiw	r26, 0x04	; 4
    6970:	4d 91       	ld	r20, X+
    6972:	5c 91       	ld	r21, X
    6974:	15 97       	sbiw	r26, 0x05	; 5
    6976:	80 91 a9 2d 	lds	r24, 0x2DA9
    697a:	90 91 aa 2d 	lds	r25, 0x2DAA
    697e:	84 17       	cp	r24, r20
    6980:	95 07       	cpc	r25, r21
    6982:	09 f4       	brne	.+2      	; 0x6986 <handle_msg+0x2be>
    6984:	9b cf       	rjmp	.-202    	; 0x68bc <handle_msg+0x1f4>
    6986:	ef eb       	ldi	r30, 0xBF	; 191
    6988:	fd e2       	ldi	r31, 0x2D	; 45
    698a:	81 e0       	ldi	r24, 0x01	; 1
    698c:	90 e0       	ldi	r25, 0x00	; 0
    698e:	8f cf       	rjmp	.-226    	; 0x68ae <handle_msg+0x1e6>
			}
		}
		
	}
	set_rgb(r,g,b);
}
    6990:	66 96       	adiw	r28, 0x16	; 22
    6992:	cd bf       	out	0x3d, r28	; 61
    6994:	de bf       	out	0x3e, r29	; 62
    6996:	df 91       	pop	r29
    6998:	cf 91       	pop	r28
    699a:	1f 91       	pop	r17
    699c:	0f 91       	pop	r16
    699e:	ff 90       	pop	r15
    69a0:	ef 90       	pop	r14
    69a2:	df 90       	pop	r13
    69a4:	cf 90       	pop	r12
    69a6:	bf 90       	pop	r11
    69a8:	af 90       	pop	r10
    69aa:	9f 90       	pop	r9
    69ac:	8f 90       	pop	r8
    69ae:	7f 90       	pop	r7
    69b0:	6f 90       	pop	r6
    69b2:	5f 90       	pop	r5
    69b4:	4f 90       	pop	r4
    69b6:	08 95       	ret

000069b8 <__subsf3>:
    69b8:	50 58       	subi	r21, 0x80	; 128

000069ba <__addsf3>:
    69ba:	bb 27       	eor	r27, r27
    69bc:	aa 27       	eor	r26, r26
    69be:	0e d0       	rcall	.+28     	; 0x69dc <__addsf3x>
    69c0:	83 c2       	rjmp	.+1286   	; 0x6ec8 <__fp_round>
    69c2:	4c d2       	rcall	.+1176   	; 0x6e5c <__fp_pscA>
    69c4:	30 f0       	brcs	.+12     	; 0x69d2 <__addsf3+0x18>
    69c6:	51 d2       	rcall	.+1186   	; 0x6e6a <__fp_pscB>
    69c8:	20 f0       	brcs	.+8      	; 0x69d2 <__addsf3+0x18>
    69ca:	31 f4       	brne	.+12     	; 0x69d8 <__addsf3+0x1e>
    69cc:	9f 3f       	cpi	r25, 0xFF	; 255
    69ce:	11 f4       	brne	.+4      	; 0x69d4 <__addsf3+0x1a>
    69d0:	1e f4       	brtc	.+6      	; 0x69d8 <__addsf3+0x1e>
    69d2:	1c c2       	rjmp	.+1080   	; 0x6e0c <__fp_nan>
    69d4:	0e f4       	brtc	.+2      	; 0x69d8 <__addsf3+0x1e>
    69d6:	e0 95       	com	r30
    69d8:	e7 fb       	bst	r30, 7
    69da:	04 c2       	rjmp	.+1032   	; 0x6de4 <__fp_inf>

000069dc <__addsf3x>:
    69dc:	e9 2f       	mov	r30, r25
    69de:	96 d2       	rcall	.+1324   	; 0x6f0c <__fp_split3>
    69e0:	80 f3       	brcs	.-32     	; 0x69c2 <__addsf3+0x8>
    69e2:	ba 17       	cp	r27, r26
    69e4:	62 07       	cpc	r22, r18
    69e6:	73 07       	cpc	r23, r19
    69e8:	84 07       	cpc	r24, r20
    69ea:	95 07       	cpc	r25, r21
    69ec:	18 f0       	brcs	.+6      	; 0x69f4 <__addsf3x+0x18>
    69ee:	71 f4       	brne	.+28     	; 0x6a0c <__addsf3x+0x30>
    69f0:	9e f5       	brtc	.+102    	; 0x6a58 <__addsf3x+0x7c>
    69f2:	ae c2       	rjmp	.+1372   	; 0x6f50 <__fp_zero>
    69f4:	0e f4       	brtc	.+2      	; 0x69f8 <__addsf3x+0x1c>
    69f6:	e0 95       	com	r30
    69f8:	0b 2e       	mov	r0, r27
    69fa:	ba 2f       	mov	r27, r26
    69fc:	a0 2d       	mov	r26, r0
    69fe:	0b 01       	movw	r0, r22
    6a00:	b9 01       	movw	r22, r18
    6a02:	90 01       	movw	r18, r0
    6a04:	0c 01       	movw	r0, r24
    6a06:	ca 01       	movw	r24, r20
    6a08:	a0 01       	movw	r20, r0
    6a0a:	11 24       	eor	r1, r1
    6a0c:	ff 27       	eor	r31, r31
    6a0e:	59 1b       	sub	r21, r25
    6a10:	99 f0       	breq	.+38     	; 0x6a38 <__addsf3x+0x5c>
    6a12:	59 3f       	cpi	r21, 0xF9	; 249
    6a14:	50 f4       	brcc	.+20     	; 0x6a2a <__addsf3x+0x4e>
    6a16:	50 3e       	cpi	r21, 0xE0	; 224
    6a18:	68 f1       	brcs	.+90     	; 0x6a74 <__addsf3x+0x98>
    6a1a:	1a 16       	cp	r1, r26
    6a1c:	f0 40       	sbci	r31, 0x00	; 0
    6a1e:	a2 2f       	mov	r26, r18
    6a20:	23 2f       	mov	r18, r19
    6a22:	34 2f       	mov	r19, r20
    6a24:	44 27       	eor	r20, r20
    6a26:	58 5f       	subi	r21, 0xF8	; 248
    6a28:	f3 cf       	rjmp	.-26     	; 0x6a10 <__addsf3x+0x34>
    6a2a:	46 95       	lsr	r20
    6a2c:	37 95       	ror	r19
    6a2e:	27 95       	ror	r18
    6a30:	a7 95       	ror	r26
    6a32:	f0 40       	sbci	r31, 0x00	; 0
    6a34:	53 95       	inc	r21
    6a36:	c9 f7       	brne	.-14     	; 0x6a2a <__addsf3x+0x4e>
    6a38:	7e f4       	brtc	.+30     	; 0x6a58 <__addsf3x+0x7c>
    6a3a:	1f 16       	cp	r1, r31
    6a3c:	ba 0b       	sbc	r27, r26
    6a3e:	62 0b       	sbc	r22, r18
    6a40:	73 0b       	sbc	r23, r19
    6a42:	84 0b       	sbc	r24, r20
    6a44:	ba f0       	brmi	.+46     	; 0x6a74 <__addsf3x+0x98>
    6a46:	91 50       	subi	r25, 0x01	; 1
    6a48:	a1 f0       	breq	.+40     	; 0x6a72 <__addsf3x+0x96>
    6a4a:	ff 0f       	add	r31, r31
    6a4c:	bb 1f       	adc	r27, r27
    6a4e:	66 1f       	adc	r22, r22
    6a50:	77 1f       	adc	r23, r23
    6a52:	88 1f       	adc	r24, r24
    6a54:	c2 f7       	brpl	.-16     	; 0x6a46 <__addsf3x+0x6a>
    6a56:	0e c0       	rjmp	.+28     	; 0x6a74 <__addsf3x+0x98>
    6a58:	ba 0f       	add	r27, r26
    6a5a:	62 1f       	adc	r22, r18
    6a5c:	73 1f       	adc	r23, r19
    6a5e:	84 1f       	adc	r24, r20
    6a60:	48 f4       	brcc	.+18     	; 0x6a74 <__addsf3x+0x98>
    6a62:	87 95       	ror	r24
    6a64:	77 95       	ror	r23
    6a66:	67 95       	ror	r22
    6a68:	b7 95       	ror	r27
    6a6a:	f7 95       	ror	r31
    6a6c:	9e 3f       	cpi	r25, 0xFE	; 254
    6a6e:	08 f0       	brcs	.+2      	; 0x6a72 <__addsf3x+0x96>
    6a70:	b3 cf       	rjmp	.-154    	; 0x69d8 <__addsf3+0x1e>
    6a72:	93 95       	inc	r25
    6a74:	88 0f       	add	r24, r24
    6a76:	08 f0       	brcs	.+2      	; 0x6a7a <__addsf3x+0x9e>
    6a78:	99 27       	eor	r25, r25
    6a7a:	ee 0f       	add	r30, r30
    6a7c:	97 95       	ror	r25
    6a7e:	87 95       	ror	r24
    6a80:	08 95       	ret
    6a82:	ec d1       	rcall	.+984    	; 0x6e5c <__fp_pscA>
    6a84:	58 f0       	brcs	.+22     	; 0x6a9c <__addsf3x+0xc0>
    6a86:	80 e8       	ldi	r24, 0x80	; 128
    6a88:	91 e0       	ldi	r25, 0x01	; 1
    6a8a:	09 f4       	brne	.+2      	; 0x6a8e <__addsf3x+0xb2>
    6a8c:	9e ef       	ldi	r25, 0xFE	; 254
    6a8e:	ed d1       	rcall	.+986    	; 0x6e6a <__fp_pscB>
    6a90:	28 f0       	brcs	.+10     	; 0x6a9c <__addsf3x+0xc0>
    6a92:	40 e8       	ldi	r20, 0x80	; 128
    6a94:	51 e0       	ldi	r21, 0x01	; 1
    6a96:	59 f4       	brne	.+22     	; 0x6aae <atan2+0xe>
    6a98:	5e ef       	ldi	r21, 0xFE	; 254
    6a9a:	09 c0       	rjmp	.+18     	; 0x6aae <atan2+0xe>
    6a9c:	b7 c1       	rjmp	.+878    	; 0x6e0c <__fp_nan>
    6a9e:	58 c2       	rjmp	.+1200   	; 0x6f50 <__fp_zero>

00006aa0 <atan2>:
    6aa0:	e9 2f       	mov	r30, r25
    6aa2:	e0 78       	andi	r30, 0x80	; 128
    6aa4:	33 d2       	rcall	.+1126   	; 0x6f0c <__fp_split3>
    6aa6:	68 f3       	brcs	.-38     	; 0x6a82 <__addsf3x+0xa6>
    6aa8:	09 2e       	mov	r0, r25
    6aaa:	05 2a       	or	r0, r21
    6aac:	c1 f3       	breq	.-16     	; 0x6a9e <__addsf3x+0xc2>
    6aae:	26 17       	cp	r18, r22
    6ab0:	37 07       	cpc	r19, r23
    6ab2:	48 07       	cpc	r20, r24
    6ab4:	59 07       	cpc	r21, r25
    6ab6:	38 f0       	brcs	.+14     	; 0x6ac6 <atan2+0x26>
    6ab8:	0e 2e       	mov	r0, r30
    6aba:	07 f8       	bld	r0, 7
    6abc:	e0 25       	eor	r30, r0
    6abe:	69 f0       	breq	.+26     	; 0x6ada <atan2+0x3a>
    6ac0:	e0 25       	eor	r30, r0
    6ac2:	e0 64       	ori	r30, 0x40	; 64
    6ac4:	0a c0       	rjmp	.+20     	; 0x6ada <atan2+0x3a>
    6ac6:	ef 63       	ori	r30, 0x3F	; 63
    6ac8:	07 f8       	bld	r0, 7
    6aca:	00 94       	com	r0
    6acc:	07 fa       	bst	r0, 7
    6ace:	db 01       	movw	r26, r22
    6ad0:	b9 01       	movw	r22, r18
    6ad2:	9d 01       	movw	r18, r26
    6ad4:	dc 01       	movw	r26, r24
    6ad6:	ca 01       	movw	r24, r20
    6ad8:	ad 01       	movw	r20, r26
    6ada:	ef 93       	push	r30
    6adc:	4a d0       	rcall	.+148    	; 0x6b72 <__divsf3_pse>
    6ade:	f4 d1       	rcall	.+1000   	; 0x6ec8 <__fp_round>
    6ae0:	0a d0       	rcall	.+20     	; 0x6af6 <atan>
    6ae2:	5f 91       	pop	r21
    6ae4:	55 23       	and	r21, r21
    6ae6:	31 f0       	breq	.+12     	; 0x6af4 <atan2+0x54>
    6ae8:	2b ed       	ldi	r18, 0xDB	; 219
    6aea:	3f e0       	ldi	r19, 0x0F	; 15
    6aec:	49 e4       	ldi	r20, 0x49	; 73
    6aee:	50 fd       	sbrc	r21, 0
    6af0:	49 ec       	ldi	r20, 0xC9	; 201
    6af2:	63 cf       	rjmp	.-314    	; 0x69ba <__addsf3>
    6af4:	08 95       	ret

00006af6 <atan>:
    6af6:	df 93       	push	r29
    6af8:	dd 27       	eor	r29, r29
    6afa:	b9 2f       	mov	r27, r25
    6afc:	bf 77       	andi	r27, 0x7F	; 127
    6afe:	40 e8       	ldi	r20, 0x80	; 128
    6b00:	5f e3       	ldi	r21, 0x3F	; 63
    6b02:	16 16       	cp	r1, r22
    6b04:	17 06       	cpc	r1, r23
    6b06:	48 07       	cpc	r20, r24
    6b08:	5b 07       	cpc	r21, r27
    6b0a:	10 f4       	brcc	.+4      	; 0x6b10 <atan+0x1a>
    6b0c:	d9 2f       	mov	r29, r25
    6b0e:	2b d2       	rcall	.+1110   	; 0x6f66 <inverse>
    6b10:	9f 93       	push	r25
    6b12:	8f 93       	push	r24
    6b14:	7f 93       	push	r23
    6b16:	6f 93       	push	r22
    6b18:	d8 d2       	rcall	.+1456   	; 0x70ca <square>
    6b1a:	ea ef       	ldi	r30, 0xFA	; 250
    6b1c:	f2 e0       	ldi	r31, 0x02	; 2
    6b1e:	79 d1       	rcall	.+754    	; 0x6e12 <__fp_powser>
    6b20:	d3 d1       	rcall	.+934    	; 0x6ec8 <__fp_round>
    6b22:	2f 91       	pop	r18
    6b24:	3f 91       	pop	r19
    6b26:	4f 91       	pop	r20
    6b28:	5f 91       	pop	r21
    6b2a:	30 d2       	rcall	.+1120   	; 0x6f8c <__mulsf3x>
    6b2c:	dd 23       	and	r29, r29
    6b2e:	49 f0       	breq	.+18     	; 0x6b42 <atan+0x4c>
    6b30:	90 58       	subi	r25, 0x80	; 128
    6b32:	a2 ea       	ldi	r26, 0xA2	; 162
    6b34:	2a ed       	ldi	r18, 0xDA	; 218
    6b36:	3f e0       	ldi	r19, 0x0F	; 15
    6b38:	49 ec       	ldi	r20, 0xC9	; 201
    6b3a:	5f e3       	ldi	r21, 0x3F	; 63
    6b3c:	d0 78       	andi	r29, 0x80	; 128
    6b3e:	5d 27       	eor	r21, r29
    6b40:	4d df       	rcall	.-358    	; 0x69dc <__addsf3x>
    6b42:	df 91       	pop	r29
    6b44:	c1 c1       	rjmp	.+898    	; 0x6ec8 <__fp_round>

00006b46 <__cmpsf2>:
    6b46:	2a d1       	rcall	.+596    	; 0x6d9c <__fp_cmp>
    6b48:	08 f4       	brcc	.+2      	; 0x6b4c <__cmpsf2+0x6>
    6b4a:	81 e0       	ldi	r24, 0x01	; 1
    6b4c:	08 95       	ret

00006b4e <cos>:
    6b4e:	95 d1       	rcall	.+810    	; 0x6e7a <__fp_rempio2>
    6b50:	e3 95       	inc	r30
    6b52:	cb c1       	rjmp	.+918    	; 0x6eea <__fp_sinus>

00006b54 <__divsf3>:
    6b54:	0c d0       	rcall	.+24     	; 0x6b6e <__divsf3x>
    6b56:	b8 c1       	rjmp	.+880    	; 0x6ec8 <__fp_round>
    6b58:	88 d1       	rcall	.+784    	; 0x6e6a <__fp_pscB>
    6b5a:	40 f0       	brcs	.+16     	; 0x6b6c <__divsf3+0x18>
    6b5c:	7f d1       	rcall	.+766    	; 0x6e5c <__fp_pscA>
    6b5e:	30 f0       	brcs	.+12     	; 0x6b6c <__divsf3+0x18>
    6b60:	21 f4       	brne	.+8      	; 0x6b6a <__divsf3+0x16>
    6b62:	5f 3f       	cpi	r21, 0xFF	; 255
    6b64:	19 f0       	breq	.+6      	; 0x6b6c <__divsf3+0x18>
    6b66:	3e c1       	rjmp	.+636    	; 0x6de4 <__fp_inf>
    6b68:	51 11       	cpse	r21, r1
    6b6a:	f3 c1       	rjmp	.+998    	; 0x6f52 <__fp_szero>
    6b6c:	4f c1       	rjmp	.+670    	; 0x6e0c <__fp_nan>

00006b6e <__divsf3x>:
    6b6e:	ce d1       	rcall	.+924    	; 0x6f0c <__fp_split3>
    6b70:	98 f3       	brcs	.-26     	; 0x6b58 <__divsf3+0x4>

00006b72 <__divsf3_pse>:
    6b72:	99 23       	and	r25, r25
    6b74:	c9 f3       	breq	.-14     	; 0x6b68 <__divsf3+0x14>
    6b76:	55 23       	and	r21, r21
    6b78:	b1 f3       	breq	.-20     	; 0x6b66 <__divsf3+0x12>
    6b7a:	95 1b       	sub	r25, r21
    6b7c:	55 0b       	sbc	r21, r21
    6b7e:	bb 27       	eor	r27, r27
    6b80:	aa 27       	eor	r26, r26
    6b82:	62 17       	cp	r22, r18
    6b84:	73 07       	cpc	r23, r19
    6b86:	84 07       	cpc	r24, r20
    6b88:	38 f0       	brcs	.+14     	; 0x6b98 <__divsf3_pse+0x26>
    6b8a:	9f 5f       	subi	r25, 0xFF	; 255
    6b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    6b8e:	22 0f       	add	r18, r18
    6b90:	33 1f       	adc	r19, r19
    6b92:	44 1f       	adc	r20, r20
    6b94:	aa 1f       	adc	r26, r26
    6b96:	a9 f3       	breq	.-22     	; 0x6b82 <__divsf3_pse+0x10>
    6b98:	33 d0       	rcall	.+102    	; 0x6c00 <__divsf3_pse+0x8e>
    6b9a:	0e 2e       	mov	r0, r30
    6b9c:	3a f0       	brmi	.+14     	; 0x6bac <__divsf3_pse+0x3a>
    6b9e:	e0 e8       	ldi	r30, 0x80	; 128
    6ba0:	30 d0       	rcall	.+96     	; 0x6c02 <__divsf3_pse+0x90>
    6ba2:	91 50       	subi	r25, 0x01	; 1
    6ba4:	50 40       	sbci	r21, 0x00	; 0
    6ba6:	e6 95       	lsr	r30
    6ba8:	00 1c       	adc	r0, r0
    6baa:	ca f7       	brpl	.-14     	; 0x6b9e <__divsf3_pse+0x2c>
    6bac:	29 d0       	rcall	.+82     	; 0x6c00 <__divsf3_pse+0x8e>
    6bae:	fe 2f       	mov	r31, r30
    6bb0:	27 d0       	rcall	.+78     	; 0x6c00 <__divsf3_pse+0x8e>
    6bb2:	66 0f       	add	r22, r22
    6bb4:	77 1f       	adc	r23, r23
    6bb6:	88 1f       	adc	r24, r24
    6bb8:	bb 1f       	adc	r27, r27
    6bba:	26 17       	cp	r18, r22
    6bbc:	37 07       	cpc	r19, r23
    6bbe:	48 07       	cpc	r20, r24
    6bc0:	ab 07       	cpc	r26, r27
    6bc2:	b0 e8       	ldi	r27, 0x80	; 128
    6bc4:	09 f0       	breq	.+2      	; 0x6bc8 <__divsf3_pse+0x56>
    6bc6:	bb 0b       	sbc	r27, r27
    6bc8:	80 2d       	mov	r24, r0
    6bca:	bf 01       	movw	r22, r30
    6bcc:	ff 27       	eor	r31, r31
    6bce:	93 58       	subi	r25, 0x83	; 131
    6bd0:	5f 4f       	sbci	r21, 0xFF	; 255
    6bd2:	2a f0       	brmi	.+10     	; 0x6bde <__divsf3_pse+0x6c>
    6bd4:	9e 3f       	cpi	r25, 0xFE	; 254
    6bd6:	51 05       	cpc	r21, r1
    6bd8:	68 f0       	brcs	.+26     	; 0x6bf4 <__divsf3_pse+0x82>
    6bda:	04 c1       	rjmp	.+520    	; 0x6de4 <__fp_inf>
    6bdc:	ba c1       	rjmp	.+884    	; 0x6f52 <__fp_szero>
    6bde:	5f 3f       	cpi	r21, 0xFF	; 255
    6be0:	ec f3       	brlt	.-6      	; 0x6bdc <__divsf3_pse+0x6a>
    6be2:	98 3e       	cpi	r25, 0xE8	; 232
    6be4:	dc f3       	brlt	.-10     	; 0x6bdc <__divsf3_pse+0x6a>
    6be6:	86 95       	lsr	r24
    6be8:	77 95       	ror	r23
    6bea:	67 95       	ror	r22
    6bec:	b7 95       	ror	r27
    6bee:	f7 95       	ror	r31
    6bf0:	9f 5f       	subi	r25, 0xFF	; 255
    6bf2:	c9 f7       	brne	.-14     	; 0x6be6 <__divsf3_pse+0x74>
    6bf4:	88 0f       	add	r24, r24
    6bf6:	91 1d       	adc	r25, r1
    6bf8:	96 95       	lsr	r25
    6bfa:	87 95       	ror	r24
    6bfc:	97 f9       	bld	r25, 7
    6bfe:	08 95       	ret
    6c00:	e1 e0       	ldi	r30, 0x01	; 1
    6c02:	66 0f       	add	r22, r22
    6c04:	77 1f       	adc	r23, r23
    6c06:	88 1f       	adc	r24, r24
    6c08:	bb 1f       	adc	r27, r27
    6c0a:	62 17       	cp	r22, r18
    6c0c:	73 07       	cpc	r23, r19
    6c0e:	84 07       	cpc	r24, r20
    6c10:	ba 07       	cpc	r27, r26
    6c12:	20 f0       	brcs	.+8      	; 0x6c1c <__divsf3_pse+0xaa>
    6c14:	62 1b       	sub	r22, r18
    6c16:	73 0b       	sbc	r23, r19
    6c18:	84 0b       	sbc	r24, r20
    6c1a:	ba 0b       	sbc	r27, r26
    6c1c:	ee 1f       	adc	r30, r30
    6c1e:	88 f7       	brcc	.-30     	; 0x6c02 <__divsf3_pse+0x90>
    6c20:	e0 95       	com	r30
    6c22:	08 95       	ret

00006c24 <__fixsfsi>:
    6c24:	04 d0       	rcall	.+8      	; 0x6c2e <__fixunssfsi>
    6c26:	68 94       	set
    6c28:	b1 11       	cpse	r27, r1
    6c2a:	93 c1       	rjmp	.+806    	; 0x6f52 <__fp_szero>
    6c2c:	08 95       	ret

00006c2e <__fixunssfsi>:
    6c2e:	76 d1       	rcall	.+748    	; 0x6f1c <__fp_splitA>
    6c30:	88 f0       	brcs	.+34     	; 0x6c54 <__fixunssfsi+0x26>
    6c32:	9f 57       	subi	r25, 0x7F	; 127
    6c34:	90 f0       	brcs	.+36     	; 0x6c5a <__fixunssfsi+0x2c>
    6c36:	b9 2f       	mov	r27, r25
    6c38:	99 27       	eor	r25, r25
    6c3a:	b7 51       	subi	r27, 0x17	; 23
    6c3c:	a0 f0       	brcs	.+40     	; 0x6c66 <__fixunssfsi+0x38>
    6c3e:	d1 f0       	breq	.+52     	; 0x6c74 <__fixunssfsi+0x46>
    6c40:	66 0f       	add	r22, r22
    6c42:	77 1f       	adc	r23, r23
    6c44:	88 1f       	adc	r24, r24
    6c46:	99 1f       	adc	r25, r25
    6c48:	1a f0       	brmi	.+6      	; 0x6c50 <__fixunssfsi+0x22>
    6c4a:	ba 95       	dec	r27
    6c4c:	c9 f7       	brne	.-14     	; 0x6c40 <__fixunssfsi+0x12>
    6c4e:	12 c0       	rjmp	.+36     	; 0x6c74 <__fixunssfsi+0x46>
    6c50:	b1 30       	cpi	r27, 0x01	; 1
    6c52:	81 f0       	breq	.+32     	; 0x6c74 <__fixunssfsi+0x46>
    6c54:	7d d1       	rcall	.+762    	; 0x6f50 <__fp_zero>
    6c56:	b1 e0       	ldi	r27, 0x01	; 1
    6c58:	08 95       	ret
    6c5a:	7a c1       	rjmp	.+756    	; 0x6f50 <__fp_zero>
    6c5c:	67 2f       	mov	r22, r23
    6c5e:	78 2f       	mov	r23, r24
    6c60:	88 27       	eor	r24, r24
    6c62:	b8 5f       	subi	r27, 0xF8	; 248
    6c64:	39 f0       	breq	.+14     	; 0x6c74 <__fixunssfsi+0x46>
    6c66:	b9 3f       	cpi	r27, 0xF9	; 249
    6c68:	cc f3       	brlt	.-14     	; 0x6c5c <__fixunssfsi+0x2e>
    6c6a:	86 95       	lsr	r24
    6c6c:	77 95       	ror	r23
    6c6e:	67 95       	ror	r22
    6c70:	b3 95       	inc	r27
    6c72:	d9 f7       	brne	.-10     	; 0x6c6a <__fixunssfsi+0x3c>
    6c74:	3e f4       	brtc	.+14     	; 0x6c84 <__fixunssfsi+0x56>
    6c76:	90 95       	com	r25
    6c78:	80 95       	com	r24
    6c7a:	70 95       	com	r23
    6c7c:	61 95       	neg	r22
    6c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    6c80:	8f 4f       	sbci	r24, 0xFF	; 255
    6c82:	9f 4f       	sbci	r25, 0xFF	; 255
    6c84:	08 95       	ret

00006c86 <__floatunsisf>:
    6c86:	e8 94       	clt
    6c88:	09 c0       	rjmp	.+18     	; 0x6c9c <__floatsisf+0x12>

00006c8a <__floatsisf>:
    6c8a:	97 fb       	bst	r25, 7
    6c8c:	3e f4       	brtc	.+14     	; 0x6c9c <__floatsisf+0x12>
    6c8e:	90 95       	com	r25
    6c90:	80 95       	com	r24
    6c92:	70 95       	com	r23
    6c94:	61 95       	neg	r22
    6c96:	7f 4f       	sbci	r23, 0xFF	; 255
    6c98:	8f 4f       	sbci	r24, 0xFF	; 255
    6c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    6c9c:	99 23       	and	r25, r25
    6c9e:	a9 f0       	breq	.+42     	; 0x6cca <__floatsisf+0x40>
    6ca0:	f9 2f       	mov	r31, r25
    6ca2:	96 e9       	ldi	r25, 0x96	; 150
    6ca4:	bb 27       	eor	r27, r27
    6ca6:	93 95       	inc	r25
    6ca8:	f6 95       	lsr	r31
    6caa:	87 95       	ror	r24
    6cac:	77 95       	ror	r23
    6cae:	67 95       	ror	r22
    6cb0:	b7 95       	ror	r27
    6cb2:	f1 11       	cpse	r31, r1
    6cb4:	f8 cf       	rjmp	.-16     	; 0x6ca6 <__floatsisf+0x1c>
    6cb6:	fa f4       	brpl	.+62     	; 0x6cf6 <__floatsisf+0x6c>
    6cb8:	bb 0f       	add	r27, r27
    6cba:	11 f4       	brne	.+4      	; 0x6cc0 <__floatsisf+0x36>
    6cbc:	60 ff       	sbrs	r22, 0
    6cbe:	1b c0       	rjmp	.+54     	; 0x6cf6 <__floatsisf+0x6c>
    6cc0:	6f 5f       	subi	r22, 0xFF	; 255
    6cc2:	7f 4f       	sbci	r23, 0xFF	; 255
    6cc4:	8f 4f       	sbci	r24, 0xFF	; 255
    6cc6:	9f 4f       	sbci	r25, 0xFF	; 255
    6cc8:	16 c0       	rjmp	.+44     	; 0x6cf6 <__floatsisf+0x6c>
    6cca:	88 23       	and	r24, r24
    6ccc:	11 f0       	breq	.+4      	; 0x6cd2 <__floatsisf+0x48>
    6cce:	96 e9       	ldi	r25, 0x96	; 150
    6cd0:	11 c0       	rjmp	.+34     	; 0x6cf4 <__floatsisf+0x6a>
    6cd2:	77 23       	and	r23, r23
    6cd4:	21 f0       	breq	.+8      	; 0x6cde <__floatsisf+0x54>
    6cd6:	9e e8       	ldi	r25, 0x8E	; 142
    6cd8:	87 2f       	mov	r24, r23
    6cda:	76 2f       	mov	r23, r22
    6cdc:	05 c0       	rjmp	.+10     	; 0x6ce8 <__floatsisf+0x5e>
    6cde:	66 23       	and	r22, r22
    6ce0:	71 f0       	breq	.+28     	; 0x6cfe <__floatsisf+0x74>
    6ce2:	96 e8       	ldi	r25, 0x86	; 134
    6ce4:	86 2f       	mov	r24, r22
    6ce6:	70 e0       	ldi	r23, 0x00	; 0
    6ce8:	60 e0       	ldi	r22, 0x00	; 0
    6cea:	2a f0       	brmi	.+10     	; 0x6cf6 <__floatsisf+0x6c>
    6cec:	9a 95       	dec	r25
    6cee:	66 0f       	add	r22, r22
    6cf0:	77 1f       	adc	r23, r23
    6cf2:	88 1f       	adc	r24, r24
    6cf4:	da f7       	brpl	.-10     	; 0x6cec <__floatsisf+0x62>
    6cf6:	88 0f       	add	r24, r24
    6cf8:	96 95       	lsr	r25
    6cfa:	87 95       	ror	r24
    6cfc:	97 f9       	bld	r25, 7
    6cfe:	08 95       	ret
    6d00:	ad d0       	rcall	.+346    	; 0x6e5c <__fp_pscA>
    6d02:	18 f0       	brcs	.+6      	; 0x6d0a <__floatsisf+0x80>
    6d04:	11 f0       	breq	.+4      	; 0x6d0a <__floatsisf+0x80>
    6d06:	b1 d0       	rcall	.+354    	; 0x6e6a <__fp_pscB>
    6d08:	38 f4       	brcc	.+14     	; 0x6d18 <fmod+0xa>
    6d0a:	80 c0       	rjmp	.+256    	; 0x6e0c <__fp_nan>
    6d0c:	22 c1       	rjmp	.+580    	; 0x6f52 <__fp_szero>

00006d0e <fmod>:
    6d0e:	e9 2f       	mov	r30, r25
    6d10:	fd d0       	rcall	.+506    	; 0x6f0c <__fp_split3>
    6d12:	b0 f3       	brcs	.-20     	; 0x6d00 <__floatsisf+0x76>
    6d14:	55 23       	and	r21, r21
    6d16:	c9 f3       	breq	.-14     	; 0x6d0a <__floatsisf+0x80>
    6d18:	e7 fb       	bst	r30, 7
    6d1a:	62 17       	cp	r22, r18
    6d1c:	73 07       	cpc	r23, r19
    6d1e:	84 07       	cpc	r24, r20
    6d20:	95 07       	cpc	r25, r21
    6d22:	a8 f1       	brcs	.+106    	; 0x6d8e <fmod+0x80>
    6d24:	99 f3       	breq	.-26     	; 0x6d0c <__floatsisf+0x82>
    6d26:	e9 2f       	mov	r30, r25
    6d28:	ff 27       	eor	r31, r31
    6d2a:	88 23       	and	r24, r24
    6d2c:	2a f0       	brmi	.+10     	; 0x6d38 <fmod+0x2a>
    6d2e:	31 97       	sbiw	r30, 0x01	; 1
    6d30:	66 0f       	add	r22, r22
    6d32:	77 1f       	adc	r23, r23
    6d34:	88 1f       	adc	r24, r24
    6d36:	da f7       	brpl	.-10     	; 0x6d2e <fmod+0x20>
    6d38:	95 2f       	mov	r25, r21
    6d3a:	55 27       	eor	r21, r21
    6d3c:	44 23       	and	r20, r20
    6d3e:	32 f0       	brmi	.+12     	; 0x6d4c <fmod+0x3e>
    6d40:	91 50       	subi	r25, 0x01	; 1
    6d42:	50 40       	sbci	r21, 0x00	; 0
    6d44:	22 0f       	add	r18, r18
    6d46:	33 1f       	adc	r19, r19
    6d48:	44 1f       	adc	r20, r20
    6d4a:	d2 f7       	brpl	.-12     	; 0x6d40 <fmod+0x32>
    6d4c:	bb 27       	eor	r27, r27
    6d4e:	e9 1b       	sub	r30, r25
    6d50:	f5 0b       	sbc	r31, r21
    6d52:	62 1b       	sub	r22, r18
    6d54:	73 0b       	sbc	r23, r19
    6d56:	84 0b       	sbc	r24, r20
    6d58:	b1 09       	sbc	r27, r1
    6d5a:	c1 f2       	breq	.-80     	; 0x6d0c <__floatsisf+0x82>
    6d5c:	22 f4       	brpl	.+8      	; 0x6d66 <fmod+0x58>
    6d5e:	62 0f       	add	r22, r18
    6d60:	73 1f       	adc	r23, r19
    6d62:	84 1f       	adc	r24, r20
    6d64:	b1 1d       	adc	r27, r1
    6d66:	31 97       	sbiw	r30, 0x01	; 1
    6d68:	2a f0       	brmi	.+10     	; 0x6d74 <fmod+0x66>
    6d6a:	66 0f       	add	r22, r22
    6d6c:	77 1f       	adc	r23, r23
    6d6e:	88 1f       	adc	r24, r24
    6d70:	bb 1f       	adc	r27, r27
    6d72:	ef cf       	rjmp	.-34     	; 0x6d52 <fmod+0x44>
    6d74:	91 50       	subi	r25, 0x01	; 1
    6d76:	50 40       	sbci	r21, 0x00	; 0
    6d78:	5a f0       	brmi	.+22     	; 0x6d90 <fmod+0x82>
    6d7a:	41 f0       	breq	.+16     	; 0x6d8c <fmod+0x7e>
    6d7c:	88 23       	and	r24, r24
    6d7e:	32 f0       	brmi	.+12     	; 0x6d8c <fmod+0x7e>
    6d80:	66 0f       	add	r22, r22
    6d82:	77 1f       	adc	r23, r23
    6d84:	88 1f       	adc	r24, r24
    6d86:	91 50       	subi	r25, 0x01	; 1
    6d88:	50 40       	sbci	r21, 0x00	; 0
    6d8a:	c1 f7       	brne	.-16     	; 0x6d7c <fmod+0x6e>
    6d8c:	93 95       	inc	r25
    6d8e:	30 c0       	rjmp	.+96     	; 0x6df0 <__fp_mpack>
    6d90:	86 95       	lsr	r24
    6d92:	77 95       	ror	r23
    6d94:	67 95       	ror	r22
    6d96:	9f 5f       	subi	r25, 0xFF	; 255
    6d98:	d9 f7       	brne	.-10     	; 0x6d90 <fmod+0x82>
    6d9a:	f8 cf       	rjmp	.-16     	; 0x6d8c <fmod+0x7e>

00006d9c <__fp_cmp>:
    6d9c:	99 0f       	add	r25, r25
    6d9e:	00 08       	sbc	r0, r0
    6da0:	55 0f       	add	r21, r21
    6da2:	aa 0b       	sbc	r26, r26
    6da4:	e0 e8       	ldi	r30, 0x80	; 128
    6da6:	fe ef       	ldi	r31, 0xFE	; 254
    6da8:	16 16       	cp	r1, r22
    6daa:	17 06       	cpc	r1, r23
    6dac:	e8 07       	cpc	r30, r24
    6dae:	f9 07       	cpc	r31, r25
    6db0:	c0 f0       	brcs	.+48     	; 0x6de2 <__fp_cmp+0x46>
    6db2:	12 16       	cp	r1, r18
    6db4:	13 06       	cpc	r1, r19
    6db6:	e4 07       	cpc	r30, r20
    6db8:	f5 07       	cpc	r31, r21
    6dba:	98 f0       	brcs	.+38     	; 0x6de2 <__fp_cmp+0x46>
    6dbc:	62 1b       	sub	r22, r18
    6dbe:	73 0b       	sbc	r23, r19
    6dc0:	84 0b       	sbc	r24, r20
    6dc2:	95 0b       	sbc	r25, r21
    6dc4:	39 f4       	brne	.+14     	; 0x6dd4 <__fp_cmp+0x38>
    6dc6:	0a 26       	eor	r0, r26
    6dc8:	61 f0       	breq	.+24     	; 0x6de2 <__fp_cmp+0x46>
    6dca:	23 2b       	or	r18, r19
    6dcc:	24 2b       	or	r18, r20
    6dce:	25 2b       	or	r18, r21
    6dd0:	21 f4       	brne	.+8      	; 0x6dda <__fp_cmp+0x3e>
    6dd2:	08 95       	ret
    6dd4:	0a 26       	eor	r0, r26
    6dd6:	09 f4       	brne	.+2      	; 0x6dda <__fp_cmp+0x3e>
    6dd8:	a1 40       	sbci	r26, 0x01	; 1
    6dda:	a6 95       	lsr	r26
    6ddc:	8f ef       	ldi	r24, 0xFF	; 255
    6dde:	81 1d       	adc	r24, r1
    6de0:	81 1d       	adc	r24, r1
    6de2:	08 95       	ret

00006de4 <__fp_inf>:
    6de4:	97 f9       	bld	r25, 7
    6de6:	9f 67       	ori	r25, 0x7F	; 127
    6de8:	80 e8       	ldi	r24, 0x80	; 128
    6dea:	70 e0       	ldi	r23, 0x00	; 0
    6dec:	60 e0       	ldi	r22, 0x00	; 0
    6dee:	08 95       	ret

00006df0 <__fp_mpack>:
    6df0:	9f 3f       	cpi	r25, 0xFF	; 255
    6df2:	31 f0       	breq	.+12     	; 0x6e00 <__fp_mpack_finite+0xc>

00006df4 <__fp_mpack_finite>:
    6df4:	91 50       	subi	r25, 0x01	; 1
    6df6:	20 f4       	brcc	.+8      	; 0x6e00 <__fp_mpack_finite+0xc>
    6df8:	87 95       	ror	r24
    6dfa:	77 95       	ror	r23
    6dfc:	67 95       	ror	r22
    6dfe:	b7 95       	ror	r27
    6e00:	88 0f       	add	r24, r24
    6e02:	91 1d       	adc	r25, r1
    6e04:	96 95       	lsr	r25
    6e06:	87 95       	ror	r24
    6e08:	97 f9       	bld	r25, 7
    6e0a:	08 95       	ret

00006e0c <__fp_nan>:
    6e0c:	9f ef       	ldi	r25, 0xFF	; 255
    6e0e:	80 ec       	ldi	r24, 0xC0	; 192
    6e10:	08 95       	ret

00006e12 <__fp_powser>:
    6e12:	df 93       	push	r29
    6e14:	cf 93       	push	r28
    6e16:	1f 93       	push	r17
    6e18:	0f 93       	push	r16
    6e1a:	ff 92       	push	r15
    6e1c:	ef 92       	push	r14
    6e1e:	df 92       	push	r13
    6e20:	7b 01       	movw	r14, r22
    6e22:	8c 01       	movw	r16, r24
    6e24:	68 94       	set
    6e26:	05 c0       	rjmp	.+10     	; 0x6e32 <__fp_powser+0x20>
    6e28:	da 2e       	mov	r13, r26
    6e2a:	ef 01       	movw	r28, r30
    6e2c:	af d0       	rcall	.+350    	; 0x6f8c <__mulsf3x>
    6e2e:	fe 01       	movw	r30, r28
    6e30:	e8 94       	clt
    6e32:	a5 91       	lpm	r26, Z+
    6e34:	25 91       	lpm	r18, Z+
    6e36:	35 91       	lpm	r19, Z+
    6e38:	45 91       	lpm	r20, Z+
    6e3a:	55 91       	lpm	r21, Z+
    6e3c:	ae f3       	brts	.-22     	; 0x6e28 <__fp_powser+0x16>
    6e3e:	ef 01       	movw	r28, r30
    6e40:	cd dd       	rcall	.-1126   	; 0x69dc <__addsf3x>
    6e42:	fe 01       	movw	r30, r28
    6e44:	97 01       	movw	r18, r14
    6e46:	a8 01       	movw	r20, r16
    6e48:	da 94       	dec	r13
    6e4a:	79 f7       	brne	.-34     	; 0x6e2a <__fp_powser+0x18>
    6e4c:	df 90       	pop	r13
    6e4e:	ef 90       	pop	r14
    6e50:	ff 90       	pop	r15
    6e52:	0f 91       	pop	r16
    6e54:	1f 91       	pop	r17
    6e56:	cf 91       	pop	r28
    6e58:	df 91       	pop	r29
    6e5a:	08 95       	ret

00006e5c <__fp_pscA>:
    6e5c:	00 24       	eor	r0, r0
    6e5e:	0a 94       	dec	r0
    6e60:	16 16       	cp	r1, r22
    6e62:	17 06       	cpc	r1, r23
    6e64:	18 06       	cpc	r1, r24
    6e66:	09 06       	cpc	r0, r25
    6e68:	08 95       	ret

00006e6a <__fp_pscB>:
    6e6a:	00 24       	eor	r0, r0
    6e6c:	0a 94       	dec	r0
    6e6e:	12 16       	cp	r1, r18
    6e70:	13 06       	cpc	r1, r19
    6e72:	14 06       	cpc	r1, r20
    6e74:	05 06       	cpc	r0, r21
    6e76:	08 95       	ret
    6e78:	c9 cf       	rjmp	.-110    	; 0x6e0c <__fp_nan>

00006e7a <__fp_rempio2>:
    6e7a:	50 d0       	rcall	.+160    	; 0x6f1c <__fp_splitA>
    6e7c:	e8 f3       	brcs	.-6      	; 0x6e78 <__fp_pscB+0xe>
    6e7e:	e8 94       	clt
    6e80:	e0 e0       	ldi	r30, 0x00	; 0
    6e82:	bb 27       	eor	r27, r27
    6e84:	9f 57       	subi	r25, 0x7F	; 127
    6e86:	f0 f0       	brcs	.+60     	; 0x6ec4 <__fp_rempio2+0x4a>
    6e88:	2a ed       	ldi	r18, 0xDA	; 218
    6e8a:	3f e0       	ldi	r19, 0x0F	; 15
    6e8c:	49 ec       	ldi	r20, 0xC9	; 201
    6e8e:	06 c0       	rjmp	.+12     	; 0x6e9c <__fp_rempio2+0x22>
    6e90:	ee 0f       	add	r30, r30
    6e92:	bb 0f       	add	r27, r27
    6e94:	66 1f       	adc	r22, r22
    6e96:	77 1f       	adc	r23, r23
    6e98:	88 1f       	adc	r24, r24
    6e9a:	28 f0       	brcs	.+10     	; 0x6ea6 <__fp_rempio2+0x2c>
    6e9c:	b2 3a       	cpi	r27, 0xA2	; 162
    6e9e:	62 07       	cpc	r22, r18
    6ea0:	73 07       	cpc	r23, r19
    6ea2:	84 07       	cpc	r24, r20
    6ea4:	28 f0       	brcs	.+10     	; 0x6eb0 <__fp_rempio2+0x36>
    6ea6:	b2 5a       	subi	r27, 0xA2	; 162
    6ea8:	62 0b       	sbc	r22, r18
    6eaa:	73 0b       	sbc	r23, r19
    6eac:	84 0b       	sbc	r24, r20
    6eae:	e3 95       	inc	r30
    6eb0:	9a 95       	dec	r25
    6eb2:	72 f7       	brpl	.-36     	; 0x6e90 <__fp_rempio2+0x16>
    6eb4:	80 38       	cpi	r24, 0x80	; 128
    6eb6:	30 f4       	brcc	.+12     	; 0x6ec4 <__fp_rempio2+0x4a>
    6eb8:	9a 95       	dec	r25
    6eba:	bb 0f       	add	r27, r27
    6ebc:	66 1f       	adc	r22, r22
    6ebe:	77 1f       	adc	r23, r23
    6ec0:	88 1f       	adc	r24, r24
    6ec2:	d2 f7       	brpl	.-12     	; 0x6eb8 <__fp_rempio2+0x3e>
    6ec4:	90 48       	sbci	r25, 0x80	; 128
    6ec6:	96 cf       	rjmp	.-212    	; 0x6df4 <__fp_mpack_finite>

00006ec8 <__fp_round>:
    6ec8:	09 2e       	mov	r0, r25
    6eca:	03 94       	inc	r0
    6ecc:	00 0c       	add	r0, r0
    6ece:	11 f4       	brne	.+4      	; 0x6ed4 <__fp_round+0xc>
    6ed0:	88 23       	and	r24, r24
    6ed2:	52 f0       	brmi	.+20     	; 0x6ee8 <__fp_round+0x20>
    6ed4:	bb 0f       	add	r27, r27
    6ed6:	40 f4       	brcc	.+16     	; 0x6ee8 <__fp_round+0x20>
    6ed8:	bf 2b       	or	r27, r31
    6eda:	11 f4       	brne	.+4      	; 0x6ee0 <__fp_round+0x18>
    6edc:	60 ff       	sbrs	r22, 0
    6ede:	04 c0       	rjmp	.+8      	; 0x6ee8 <__fp_round+0x20>
    6ee0:	6f 5f       	subi	r22, 0xFF	; 255
    6ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ee4:	8f 4f       	sbci	r24, 0xFF	; 255
    6ee6:	9f 4f       	sbci	r25, 0xFF	; 255
    6ee8:	08 95       	ret

00006eea <__fp_sinus>:
    6eea:	ef 93       	push	r30
    6eec:	e0 ff       	sbrs	r30, 0
    6eee:	06 c0       	rjmp	.+12     	; 0x6efc <__fp_sinus+0x12>
    6ef0:	a2 ea       	ldi	r26, 0xA2	; 162
    6ef2:	2a ed       	ldi	r18, 0xDA	; 218
    6ef4:	3f e0       	ldi	r19, 0x0F	; 15
    6ef6:	49 ec       	ldi	r20, 0xC9	; 201
    6ef8:	5f eb       	ldi	r21, 0xBF	; 191
    6efa:	70 dd       	rcall	.-1312   	; 0x69dc <__addsf3x>
    6efc:	e5 df       	rcall	.-54     	; 0x6ec8 <__fp_round>
    6efe:	0f 90       	pop	r0
    6f00:	03 94       	inc	r0
    6f02:	01 fc       	sbrc	r0, 1
    6f04:	90 58       	subi	r25, 0x80	; 128
    6f06:	e7 e2       	ldi	r30, 0x27	; 39
    6f08:	f3 e0       	ldi	r31, 0x03	; 3
    6f0a:	e9 c0       	rjmp	.+466    	; 0x70de <__fp_powsodd>

00006f0c <__fp_split3>:
    6f0c:	57 fd       	sbrc	r21, 7
    6f0e:	90 58       	subi	r25, 0x80	; 128
    6f10:	44 0f       	add	r20, r20
    6f12:	55 1f       	adc	r21, r21
    6f14:	59 f0       	breq	.+22     	; 0x6f2c <__fp_splitA+0x10>
    6f16:	5f 3f       	cpi	r21, 0xFF	; 255
    6f18:	71 f0       	breq	.+28     	; 0x6f36 <__fp_splitA+0x1a>
    6f1a:	47 95       	ror	r20

00006f1c <__fp_splitA>:
    6f1c:	88 0f       	add	r24, r24
    6f1e:	97 fb       	bst	r25, 7
    6f20:	99 1f       	adc	r25, r25
    6f22:	61 f0       	breq	.+24     	; 0x6f3c <__fp_splitA+0x20>
    6f24:	9f 3f       	cpi	r25, 0xFF	; 255
    6f26:	79 f0       	breq	.+30     	; 0x6f46 <__fp_splitA+0x2a>
    6f28:	87 95       	ror	r24
    6f2a:	08 95       	ret
    6f2c:	12 16       	cp	r1, r18
    6f2e:	13 06       	cpc	r1, r19
    6f30:	14 06       	cpc	r1, r20
    6f32:	55 1f       	adc	r21, r21
    6f34:	f2 cf       	rjmp	.-28     	; 0x6f1a <__fp_split3+0xe>
    6f36:	46 95       	lsr	r20
    6f38:	f1 df       	rcall	.-30     	; 0x6f1c <__fp_splitA>
    6f3a:	08 c0       	rjmp	.+16     	; 0x6f4c <__fp_splitA+0x30>
    6f3c:	16 16       	cp	r1, r22
    6f3e:	17 06       	cpc	r1, r23
    6f40:	18 06       	cpc	r1, r24
    6f42:	99 1f       	adc	r25, r25
    6f44:	f1 cf       	rjmp	.-30     	; 0x6f28 <__fp_splitA+0xc>
    6f46:	86 95       	lsr	r24
    6f48:	71 05       	cpc	r23, r1
    6f4a:	61 05       	cpc	r22, r1
    6f4c:	08 94       	sec
    6f4e:	08 95       	ret

00006f50 <__fp_zero>:
    6f50:	e8 94       	clt

00006f52 <__fp_szero>:
    6f52:	bb 27       	eor	r27, r27
    6f54:	66 27       	eor	r22, r22
    6f56:	77 27       	eor	r23, r23
    6f58:	cb 01       	movw	r24, r22
    6f5a:	97 f9       	bld	r25, 7
    6f5c:	08 95       	ret

00006f5e <__gesf2>:
    6f5e:	1e df       	rcall	.-452    	; 0x6d9c <__fp_cmp>
    6f60:	08 f4       	brcc	.+2      	; 0x6f64 <__gesf2+0x6>
    6f62:	8f ef       	ldi	r24, 0xFF	; 255
    6f64:	08 95       	ret

00006f66 <inverse>:
    6f66:	9b 01       	movw	r18, r22
    6f68:	ac 01       	movw	r20, r24
    6f6a:	60 e0       	ldi	r22, 0x00	; 0
    6f6c:	70 e0       	ldi	r23, 0x00	; 0
    6f6e:	80 e8       	ldi	r24, 0x80	; 128
    6f70:	9f e3       	ldi	r25, 0x3F	; 63
    6f72:	f0 cd       	rjmp	.-1056   	; 0x6b54 <__divsf3>

00006f74 <__mulsf3>:
    6f74:	0b d0       	rcall	.+22     	; 0x6f8c <__mulsf3x>
    6f76:	a8 cf       	rjmp	.-176    	; 0x6ec8 <__fp_round>
    6f78:	71 df       	rcall	.-286    	; 0x6e5c <__fp_pscA>
    6f7a:	28 f0       	brcs	.+10     	; 0x6f86 <__mulsf3+0x12>
    6f7c:	76 df       	rcall	.-276    	; 0x6e6a <__fp_pscB>
    6f7e:	18 f0       	brcs	.+6      	; 0x6f86 <__mulsf3+0x12>
    6f80:	95 23       	and	r25, r21
    6f82:	09 f0       	breq	.+2      	; 0x6f86 <__mulsf3+0x12>
    6f84:	2f cf       	rjmp	.-418    	; 0x6de4 <__fp_inf>
    6f86:	42 cf       	rjmp	.-380    	; 0x6e0c <__fp_nan>
    6f88:	11 24       	eor	r1, r1
    6f8a:	e3 cf       	rjmp	.-58     	; 0x6f52 <__fp_szero>

00006f8c <__mulsf3x>:
    6f8c:	bf df       	rcall	.-130    	; 0x6f0c <__fp_split3>
    6f8e:	a0 f3       	brcs	.-24     	; 0x6f78 <__mulsf3+0x4>

00006f90 <__mulsf3_pse>:
    6f90:	95 9f       	mul	r25, r21
    6f92:	d1 f3       	breq	.-12     	; 0x6f88 <__mulsf3+0x14>
    6f94:	95 0f       	add	r25, r21
    6f96:	50 e0       	ldi	r21, 0x00	; 0
    6f98:	55 1f       	adc	r21, r21
    6f9a:	62 9f       	mul	r22, r18
    6f9c:	f0 01       	movw	r30, r0
    6f9e:	72 9f       	mul	r23, r18
    6fa0:	bb 27       	eor	r27, r27
    6fa2:	f0 0d       	add	r31, r0
    6fa4:	b1 1d       	adc	r27, r1
    6fa6:	63 9f       	mul	r22, r19
    6fa8:	aa 27       	eor	r26, r26
    6faa:	f0 0d       	add	r31, r0
    6fac:	b1 1d       	adc	r27, r1
    6fae:	aa 1f       	adc	r26, r26
    6fb0:	64 9f       	mul	r22, r20
    6fb2:	66 27       	eor	r22, r22
    6fb4:	b0 0d       	add	r27, r0
    6fb6:	a1 1d       	adc	r26, r1
    6fb8:	66 1f       	adc	r22, r22
    6fba:	82 9f       	mul	r24, r18
    6fbc:	22 27       	eor	r18, r18
    6fbe:	b0 0d       	add	r27, r0
    6fc0:	a1 1d       	adc	r26, r1
    6fc2:	62 1f       	adc	r22, r18
    6fc4:	73 9f       	mul	r23, r19
    6fc6:	b0 0d       	add	r27, r0
    6fc8:	a1 1d       	adc	r26, r1
    6fca:	62 1f       	adc	r22, r18
    6fcc:	83 9f       	mul	r24, r19
    6fce:	a0 0d       	add	r26, r0
    6fd0:	61 1d       	adc	r22, r1
    6fd2:	22 1f       	adc	r18, r18
    6fd4:	74 9f       	mul	r23, r20
    6fd6:	33 27       	eor	r19, r19
    6fd8:	a0 0d       	add	r26, r0
    6fda:	61 1d       	adc	r22, r1
    6fdc:	23 1f       	adc	r18, r19
    6fde:	84 9f       	mul	r24, r20
    6fe0:	60 0d       	add	r22, r0
    6fe2:	21 1d       	adc	r18, r1
    6fe4:	82 2f       	mov	r24, r18
    6fe6:	76 2f       	mov	r23, r22
    6fe8:	6a 2f       	mov	r22, r26
    6fea:	11 24       	eor	r1, r1
    6fec:	9f 57       	subi	r25, 0x7F	; 127
    6fee:	50 40       	sbci	r21, 0x00	; 0
    6ff0:	8a f0       	brmi	.+34     	; 0x7014 <__mulsf3_pse+0x84>
    6ff2:	e1 f0       	breq	.+56     	; 0x702c <__mulsf3_pse+0x9c>
    6ff4:	88 23       	and	r24, r24
    6ff6:	4a f0       	brmi	.+18     	; 0x700a <__mulsf3_pse+0x7a>
    6ff8:	ee 0f       	add	r30, r30
    6ffa:	ff 1f       	adc	r31, r31
    6ffc:	bb 1f       	adc	r27, r27
    6ffe:	66 1f       	adc	r22, r22
    7000:	77 1f       	adc	r23, r23
    7002:	88 1f       	adc	r24, r24
    7004:	91 50       	subi	r25, 0x01	; 1
    7006:	50 40       	sbci	r21, 0x00	; 0
    7008:	a9 f7       	brne	.-22     	; 0x6ff4 <__mulsf3_pse+0x64>
    700a:	9e 3f       	cpi	r25, 0xFE	; 254
    700c:	51 05       	cpc	r21, r1
    700e:	70 f0       	brcs	.+28     	; 0x702c <__mulsf3_pse+0x9c>
    7010:	e9 ce       	rjmp	.-558    	; 0x6de4 <__fp_inf>
    7012:	9f cf       	rjmp	.-194    	; 0x6f52 <__fp_szero>
    7014:	5f 3f       	cpi	r21, 0xFF	; 255
    7016:	ec f3       	brlt	.-6      	; 0x7012 <__mulsf3_pse+0x82>
    7018:	98 3e       	cpi	r25, 0xE8	; 232
    701a:	dc f3       	brlt	.-10     	; 0x7012 <__mulsf3_pse+0x82>
    701c:	86 95       	lsr	r24
    701e:	77 95       	ror	r23
    7020:	67 95       	ror	r22
    7022:	b7 95       	ror	r27
    7024:	f7 95       	ror	r31
    7026:	e7 95       	ror	r30
    7028:	9f 5f       	subi	r25, 0xFF	; 255
    702a:	c1 f7       	brne	.-16     	; 0x701c <__mulsf3_pse+0x8c>
    702c:	fe 2b       	or	r31, r30
    702e:	88 0f       	add	r24, r24
    7030:	91 1d       	adc	r25, r1
    7032:	96 95       	lsr	r25
    7034:	87 95       	ror	r24
    7036:	97 f9       	bld	r25, 7
    7038:	08 95       	ret

0000703a <sin>:
    703a:	9f 93       	push	r25
    703c:	1e df       	rcall	.-452    	; 0x6e7a <__fp_rempio2>
    703e:	0f 90       	pop	r0
    7040:	07 fc       	sbrc	r0, 7
    7042:	ee 5f       	subi	r30, 0xFE	; 254
    7044:	52 cf       	rjmp	.-348    	; 0x6eea <__fp_sinus>
    7046:	11 f4       	brne	.+4      	; 0x704c <sin+0x12>
    7048:	0e f4       	brtc	.+2      	; 0x704c <sin+0x12>
    704a:	e0 ce       	rjmp	.-576    	; 0x6e0c <__fp_nan>
    704c:	d1 ce       	rjmp	.-606    	; 0x6df0 <__fp_mpack>

0000704e <sqrt>:
    704e:	66 df       	rcall	.-308    	; 0x6f1c <__fp_splitA>
    7050:	d0 f3       	brcs	.-12     	; 0x7046 <sin+0xc>
    7052:	99 23       	and	r25, r25
    7054:	d9 f3       	breq	.-10     	; 0x704c <sin+0x12>
    7056:	ce f3       	brts	.-14     	; 0x704a <sin+0x10>
    7058:	9f 57       	subi	r25, 0x7F	; 127
    705a:	55 0b       	sbc	r21, r21
    705c:	87 ff       	sbrs	r24, 7
    705e:	38 d0       	rcall	.+112    	; 0x70d0 <__fp_norm2>
    7060:	00 24       	eor	r0, r0
    7062:	a0 e6       	ldi	r26, 0x60	; 96
    7064:	40 ea       	ldi	r20, 0xA0	; 160
    7066:	90 01       	movw	r18, r0
    7068:	80 58       	subi	r24, 0x80	; 128
    706a:	56 95       	lsr	r21
    706c:	97 95       	ror	r25
    706e:	28 f4       	brcc	.+10     	; 0x707a <sqrt+0x2c>
    7070:	80 5c       	subi	r24, 0xC0	; 192
    7072:	66 0f       	add	r22, r22
    7074:	77 1f       	adc	r23, r23
    7076:	88 1f       	adc	r24, r24
    7078:	20 f0       	brcs	.+8      	; 0x7082 <sqrt+0x34>
    707a:	26 17       	cp	r18, r22
    707c:	37 07       	cpc	r19, r23
    707e:	48 07       	cpc	r20, r24
    7080:	30 f4       	brcc	.+12     	; 0x708e <sqrt+0x40>
    7082:	62 1b       	sub	r22, r18
    7084:	73 0b       	sbc	r23, r19
    7086:	84 0b       	sbc	r24, r20
    7088:	20 29       	or	r18, r0
    708a:	31 29       	or	r19, r1
    708c:	4a 2b       	or	r20, r26
    708e:	a6 95       	lsr	r26
    7090:	17 94       	ror	r1
    7092:	07 94       	ror	r0
    7094:	20 25       	eor	r18, r0
    7096:	31 25       	eor	r19, r1
    7098:	4a 27       	eor	r20, r26
    709a:	58 f7       	brcc	.-42     	; 0x7072 <sqrt+0x24>
    709c:	66 0f       	add	r22, r22
    709e:	77 1f       	adc	r23, r23
    70a0:	88 1f       	adc	r24, r24
    70a2:	20 f0       	brcs	.+8      	; 0x70ac <sqrt+0x5e>
    70a4:	26 17       	cp	r18, r22
    70a6:	37 07       	cpc	r19, r23
    70a8:	48 07       	cpc	r20, r24
    70aa:	30 f4       	brcc	.+12     	; 0x70b8 <sqrt+0x6a>
    70ac:	62 0b       	sbc	r22, r18
    70ae:	73 0b       	sbc	r23, r19
    70b0:	84 0b       	sbc	r24, r20
    70b2:	20 0d       	add	r18, r0
    70b4:	31 1d       	adc	r19, r1
    70b6:	41 1d       	adc	r20, r1
    70b8:	a0 95       	com	r26
    70ba:	81 f7       	brne	.-32     	; 0x709c <sqrt+0x4e>
    70bc:	b9 01       	movw	r22, r18
    70be:	84 2f       	mov	r24, r20
    70c0:	91 58       	subi	r25, 0x81	; 129
    70c2:	88 0f       	add	r24, r24
    70c4:	96 95       	lsr	r25
    70c6:	87 95       	ror	r24
    70c8:	08 95       	ret

000070ca <square>:
    70ca:	9b 01       	movw	r18, r22
    70cc:	ac 01       	movw	r20, r24
    70ce:	52 cf       	rjmp	.-348    	; 0x6f74 <__mulsf3>

000070d0 <__fp_norm2>:
    70d0:	91 50       	subi	r25, 0x01	; 1
    70d2:	50 40       	sbci	r21, 0x00	; 0
    70d4:	66 0f       	add	r22, r22
    70d6:	77 1f       	adc	r23, r23
    70d8:	88 1f       	adc	r24, r24
    70da:	d2 f7       	brpl	.-12     	; 0x70d0 <__fp_norm2>
    70dc:	08 95       	ret

000070de <__fp_powsodd>:
    70de:	9f 93       	push	r25
    70e0:	8f 93       	push	r24
    70e2:	7f 93       	push	r23
    70e4:	6f 93       	push	r22
    70e6:	ff 93       	push	r31
    70e8:	ef 93       	push	r30
    70ea:	9b 01       	movw	r18, r22
    70ec:	ac 01       	movw	r20, r24
    70ee:	42 df       	rcall	.-380    	; 0x6f74 <__mulsf3>
    70f0:	ef 91       	pop	r30
    70f2:	ff 91       	pop	r31
    70f4:	8e de       	rcall	.-740    	; 0x6e12 <__fp_powser>
    70f6:	2f 91       	pop	r18
    70f8:	3f 91       	pop	r19
    70fa:	4f 91       	pop	r20
    70fc:	5f 91       	pop	r21
    70fe:	3a cf       	rjmp	.-396    	; 0x6f74 <__mulsf3>

00007100 <vfprintf>:
    7100:	2f 92       	push	r2
    7102:	3f 92       	push	r3
    7104:	4f 92       	push	r4
    7106:	5f 92       	push	r5
    7108:	6f 92       	push	r6
    710a:	7f 92       	push	r7
    710c:	8f 92       	push	r8
    710e:	9f 92       	push	r9
    7110:	af 92       	push	r10
    7112:	bf 92       	push	r11
    7114:	cf 92       	push	r12
    7116:	df 92       	push	r13
    7118:	ef 92       	push	r14
    711a:	ff 92       	push	r15
    711c:	0f 93       	push	r16
    711e:	1f 93       	push	r17
    7120:	cf 93       	push	r28
    7122:	df 93       	push	r29
    7124:	cd b7       	in	r28, 0x3d	; 61
    7126:	de b7       	in	r29, 0x3e	; 62
    7128:	63 97       	sbiw	r28, 0x13	; 19
    712a:	cd bf       	out	0x3d, r28	; 61
    712c:	de bf       	out	0x3e, r29	; 62
    712e:	7c 01       	movw	r14, r24
    7130:	1b 01       	movw	r2, r22
    7132:	6a 01       	movw	r12, r20
    7134:	fc 01       	movw	r30, r24
    7136:	16 82       	std	Z+6, r1	; 0x06
    7138:	17 82       	std	Z+7, r1	; 0x07
    713a:	83 81       	ldd	r24, Z+3	; 0x03
    713c:	81 ff       	sbrs	r24, 1
    713e:	49 c3       	rjmp	.+1682   	; 0x77d2 <vfprintf+0x6d2>
    7140:	be 01       	movw	r22, r28
    7142:	6f 5f       	subi	r22, 0xFF	; 255
    7144:	7f 4f       	sbci	r23, 0xFF	; 255
    7146:	4b 01       	movw	r8, r22
    7148:	f7 01       	movw	r30, r14
    714a:	93 81       	ldd	r25, Z+3	; 0x03
    714c:	f1 01       	movw	r30, r2
    714e:	93 fd       	sbrc	r25, 3
    7150:	85 91       	lpm	r24, Z+
    7152:	93 ff       	sbrs	r25, 3
    7154:	81 91       	ld	r24, Z+
    7156:	1f 01       	movw	r2, r30
    7158:	88 23       	and	r24, r24
    715a:	09 f4       	brne	.+2      	; 0x715e <vfprintf+0x5e>
    715c:	36 c3       	rjmp	.+1644   	; 0x77ca <vfprintf+0x6ca>
    715e:	85 32       	cpi	r24, 0x25	; 37
    7160:	39 f4       	brne	.+14     	; 0x7170 <vfprintf+0x70>
    7162:	93 fd       	sbrc	r25, 3
    7164:	85 91       	lpm	r24, Z+
    7166:	93 ff       	sbrs	r25, 3
    7168:	81 91       	ld	r24, Z+
    716a:	1f 01       	movw	r2, r30
    716c:	85 32       	cpi	r24, 0x25	; 37
    716e:	31 f4       	brne	.+12     	; 0x717c <vfprintf+0x7c>
    7170:	b7 01       	movw	r22, r14
    7172:	90 e0       	ldi	r25, 0x00	; 0
    7174:	3b d6       	rcall	.+3190   	; 0x7dec <fputc>
    7176:	56 01       	movw	r10, r12
    7178:	65 01       	movw	r12, r10
    717a:	e6 cf       	rjmp	.-52     	; 0x7148 <vfprintf+0x48>
    717c:	10 e0       	ldi	r17, 0x00	; 0
    717e:	51 2c       	mov	r5, r1
    7180:	20 e0       	ldi	r18, 0x00	; 0
    7182:	20 32       	cpi	r18, 0x20	; 32
    7184:	a0 f4       	brcc	.+40     	; 0x71ae <vfprintf+0xae>
    7186:	8b 32       	cpi	r24, 0x2B	; 43
    7188:	69 f0       	breq	.+26     	; 0x71a4 <vfprintf+0xa4>
    718a:	30 f4       	brcc	.+12     	; 0x7198 <vfprintf+0x98>
    718c:	80 32       	cpi	r24, 0x20	; 32
    718e:	59 f0       	breq	.+22     	; 0x71a6 <vfprintf+0xa6>
    7190:	83 32       	cpi	r24, 0x23	; 35
    7192:	69 f4       	brne	.+26     	; 0x71ae <vfprintf+0xae>
    7194:	20 61       	ori	r18, 0x10	; 16
    7196:	2c c0       	rjmp	.+88     	; 0x71f0 <vfprintf+0xf0>
    7198:	8d 32       	cpi	r24, 0x2D	; 45
    719a:	39 f0       	breq	.+14     	; 0x71aa <vfprintf+0xaa>
    719c:	80 33       	cpi	r24, 0x30	; 48
    719e:	39 f4       	brne	.+14     	; 0x71ae <vfprintf+0xae>
    71a0:	21 60       	ori	r18, 0x01	; 1
    71a2:	26 c0       	rjmp	.+76     	; 0x71f0 <vfprintf+0xf0>
    71a4:	22 60       	ori	r18, 0x02	; 2
    71a6:	24 60       	ori	r18, 0x04	; 4
    71a8:	23 c0       	rjmp	.+70     	; 0x71f0 <vfprintf+0xf0>
    71aa:	28 60       	ori	r18, 0x08	; 8
    71ac:	21 c0       	rjmp	.+66     	; 0x71f0 <vfprintf+0xf0>
    71ae:	27 fd       	sbrc	r18, 7
    71b0:	27 c0       	rjmp	.+78     	; 0x7200 <vfprintf+0x100>
    71b2:	30 ed       	ldi	r19, 0xD0	; 208
    71b4:	38 0f       	add	r19, r24
    71b6:	3a 30       	cpi	r19, 0x0A	; 10
    71b8:	78 f4       	brcc	.+30     	; 0x71d8 <vfprintf+0xd8>
    71ba:	26 ff       	sbrs	r18, 6
    71bc:	06 c0       	rjmp	.+12     	; 0x71ca <vfprintf+0xca>
    71be:	fa e0       	ldi	r31, 0x0A	; 10
    71c0:	1f 9f       	mul	r17, r31
    71c2:	30 0d       	add	r19, r0
    71c4:	11 24       	eor	r1, r1
    71c6:	13 2f       	mov	r17, r19
    71c8:	13 c0       	rjmp	.+38     	; 0x71f0 <vfprintf+0xf0>
    71ca:	6a e0       	ldi	r22, 0x0A	; 10
    71cc:	56 9e       	mul	r5, r22
    71ce:	30 0d       	add	r19, r0
    71d0:	11 24       	eor	r1, r1
    71d2:	53 2e       	mov	r5, r19
    71d4:	20 62       	ori	r18, 0x20	; 32
    71d6:	0c c0       	rjmp	.+24     	; 0x71f0 <vfprintf+0xf0>
    71d8:	8e 32       	cpi	r24, 0x2E	; 46
    71da:	21 f4       	brne	.+8      	; 0x71e4 <vfprintf+0xe4>
    71dc:	26 fd       	sbrc	r18, 6
    71de:	f5 c2       	rjmp	.+1514   	; 0x77ca <vfprintf+0x6ca>
    71e0:	20 64       	ori	r18, 0x40	; 64
    71e2:	06 c0       	rjmp	.+12     	; 0x71f0 <vfprintf+0xf0>
    71e4:	8c 36       	cpi	r24, 0x6C	; 108
    71e6:	11 f4       	brne	.+4      	; 0x71ec <vfprintf+0xec>
    71e8:	20 68       	ori	r18, 0x80	; 128
    71ea:	02 c0       	rjmp	.+4      	; 0x71f0 <vfprintf+0xf0>
    71ec:	88 36       	cpi	r24, 0x68	; 104
    71ee:	41 f4       	brne	.+16     	; 0x7200 <vfprintf+0x100>
    71f0:	f1 01       	movw	r30, r2
    71f2:	93 fd       	sbrc	r25, 3
    71f4:	85 91       	lpm	r24, Z+
    71f6:	93 ff       	sbrs	r25, 3
    71f8:	81 91       	ld	r24, Z+
    71fa:	1f 01       	movw	r2, r30
    71fc:	81 11       	cpse	r24, r1
    71fe:	c1 cf       	rjmp	.-126    	; 0x7182 <vfprintf+0x82>
    7200:	9b eb       	ldi	r25, 0xBB	; 187
    7202:	98 0f       	add	r25, r24
    7204:	93 30       	cpi	r25, 0x03	; 3
    7206:	18 f4       	brcc	.+6      	; 0x720e <vfprintf+0x10e>
    7208:	20 61       	ori	r18, 0x10	; 16
    720a:	80 5e       	subi	r24, 0xE0	; 224
    720c:	06 c0       	rjmp	.+12     	; 0x721a <vfprintf+0x11a>
    720e:	9b e9       	ldi	r25, 0x9B	; 155
    7210:	98 0f       	add	r25, r24
    7212:	93 30       	cpi	r25, 0x03	; 3
    7214:	08 f0       	brcs	.+2      	; 0x7218 <vfprintf+0x118>
    7216:	9a c1       	rjmp	.+820    	; 0x754c <vfprintf+0x44c>
    7218:	2f 7e       	andi	r18, 0xEF	; 239
    721a:	26 ff       	sbrs	r18, 6
    721c:	16 e0       	ldi	r17, 0x06	; 6
    721e:	2f 73       	andi	r18, 0x3F	; 63
    7220:	72 2e       	mov	r7, r18
    7222:	85 36       	cpi	r24, 0x65	; 101
    7224:	21 f4       	brne	.+8      	; 0x722e <vfprintf+0x12e>
    7226:	f2 2f       	mov	r31, r18
    7228:	f0 64       	ori	r31, 0x40	; 64
    722a:	7f 2e       	mov	r7, r31
    722c:	08 c0       	rjmp	.+16     	; 0x723e <vfprintf+0x13e>
    722e:	86 36       	cpi	r24, 0x66	; 102
    7230:	21 f4       	brne	.+8      	; 0x723a <vfprintf+0x13a>
    7232:	62 2f       	mov	r22, r18
    7234:	60 68       	ori	r22, 0x80	; 128
    7236:	76 2e       	mov	r7, r22
    7238:	02 c0       	rjmp	.+4      	; 0x723e <vfprintf+0x13e>
    723a:	11 11       	cpse	r17, r1
    723c:	11 50       	subi	r17, 0x01	; 1
    723e:	77 fe       	sbrs	r7, 7
    7240:	07 c0       	rjmp	.+14     	; 0x7250 <vfprintf+0x150>
    7242:	1c 33       	cpi	r17, 0x3C	; 60
    7244:	48 f4       	brcc	.+18     	; 0x7258 <vfprintf+0x158>
    7246:	44 24       	eor	r4, r4
    7248:	43 94       	inc	r4
    724a:	41 0e       	add	r4, r17
    724c:	27 e0       	ldi	r18, 0x07	; 7
    724e:	0b c0       	rjmp	.+22     	; 0x7266 <vfprintf+0x166>
    7250:	18 30       	cpi	r17, 0x08	; 8
    7252:	30 f4       	brcc	.+12     	; 0x7260 <vfprintf+0x160>
    7254:	21 2f       	mov	r18, r17
    7256:	06 c0       	rjmp	.+12     	; 0x7264 <vfprintf+0x164>
    7258:	27 e0       	ldi	r18, 0x07	; 7
    725a:	4c e3       	ldi	r20, 0x3C	; 60
    725c:	44 2e       	mov	r4, r20
    725e:	03 c0       	rjmp	.+6      	; 0x7266 <vfprintf+0x166>
    7260:	27 e0       	ldi	r18, 0x07	; 7
    7262:	17 e0       	ldi	r17, 0x07	; 7
    7264:	41 2c       	mov	r4, r1
    7266:	56 01       	movw	r10, r12
    7268:	74 e0       	ldi	r23, 0x04	; 4
    726a:	a7 0e       	add	r10, r23
    726c:	b1 1c       	adc	r11, r1
    726e:	f6 01       	movw	r30, r12
    7270:	60 81       	ld	r22, Z
    7272:	71 81       	ldd	r23, Z+1	; 0x01
    7274:	82 81       	ldd	r24, Z+2	; 0x02
    7276:	93 81       	ldd	r25, Z+3	; 0x03
    7278:	04 2d       	mov	r16, r4
    727a:	a4 01       	movw	r20, r8
    727c:	58 d4       	rcall	.+2224   	; 0x7b2e <__ftoa_engine>
    727e:	6c 01       	movw	r12, r24
    7280:	09 81       	ldd	r16, Y+1	; 0x01
    7282:	00 ff       	sbrs	r16, 0
    7284:	02 c0       	rjmp	.+4      	; 0x728a <vfprintf+0x18a>
    7286:	03 ff       	sbrs	r16, 3
    7288:	06 c0       	rjmp	.+12     	; 0x7296 <vfprintf+0x196>
    728a:	71 fc       	sbrc	r7, 1
    728c:	07 c0       	rjmp	.+14     	; 0x729c <vfprintf+0x19c>
    728e:	72 fc       	sbrc	r7, 2
    7290:	08 c0       	rjmp	.+16     	; 0x72a2 <vfprintf+0x1a2>
    7292:	61 2c       	mov	r6, r1
    7294:	08 c0       	rjmp	.+16     	; 0x72a6 <vfprintf+0x1a6>
    7296:	3d e2       	ldi	r19, 0x2D	; 45
    7298:	63 2e       	mov	r6, r19
    729a:	05 c0       	rjmp	.+10     	; 0x72a6 <vfprintf+0x1a6>
    729c:	2b e2       	ldi	r18, 0x2B	; 43
    729e:	62 2e       	mov	r6, r18
    72a0:	02 c0       	rjmp	.+4      	; 0x72a6 <vfprintf+0x1a6>
    72a2:	90 e2       	ldi	r25, 0x20	; 32
    72a4:	69 2e       	mov	r6, r25
    72a6:	80 2f       	mov	r24, r16
    72a8:	8c 70       	andi	r24, 0x0C	; 12
    72aa:	81 f1       	breq	.+96     	; 0x730c <vfprintf+0x20c>
    72ac:	66 20       	and	r6, r6
    72ae:	11 f0       	breq	.+4      	; 0x72b4 <vfprintf+0x1b4>
    72b0:	84 e0       	ldi	r24, 0x04	; 4
    72b2:	01 c0       	rjmp	.+2      	; 0x72b6 <vfprintf+0x1b6>
    72b4:	83 e0       	ldi	r24, 0x03	; 3
    72b6:	85 15       	cp	r24, r5
    72b8:	10 f0       	brcs	.+4      	; 0x72be <vfprintf+0x1be>
    72ba:	51 2c       	mov	r5, r1
    72bc:	0a c0       	rjmp	.+20     	; 0x72d2 <vfprintf+0x1d2>
    72be:	58 1a       	sub	r5, r24
    72c0:	73 fc       	sbrc	r7, 3
    72c2:	07 c0       	rjmp	.+14     	; 0x72d2 <vfprintf+0x1d2>
    72c4:	b7 01       	movw	r22, r14
    72c6:	80 e2       	ldi	r24, 0x20	; 32
    72c8:	90 e0       	ldi	r25, 0x00	; 0
    72ca:	90 d5       	rcall	.+2848   	; 0x7dec <fputc>
    72cc:	5a 94       	dec	r5
    72ce:	d1 f7       	brne	.-12     	; 0x72c4 <vfprintf+0x1c4>
    72d0:	f4 cf       	rjmp	.-24     	; 0x72ba <vfprintf+0x1ba>
    72d2:	66 20       	and	r6, r6
    72d4:	21 f0       	breq	.+8      	; 0x72de <vfprintf+0x1de>
    72d6:	b7 01       	movw	r22, r14
    72d8:	86 2d       	mov	r24, r6
    72da:	90 e0       	ldi	r25, 0x00	; 0
    72dc:	87 d5       	rcall	.+2830   	; 0x7dec <fputc>
    72de:	03 fd       	sbrc	r16, 3
    72e0:	03 c0       	rjmp	.+6      	; 0x72e8 <vfprintf+0x1e8>
    72e2:	0a e4       	ldi	r16, 0x4A	; 74
    72e4:	13 e0       	ldi	r17, 0x03	; 3
    72e6:	02 c0       	rjmp	.+4      	; 0x72ec <vfprintf+0x1ec>
    72e8:	06 e4       	ldi	r16, 0x46	; 70
    72ea:	13 e0       	ldi	r17, 0x03	; 3
    72ec:	f7 2d       	mov	r31, r7
    72ee:	f0 71       	andi	r31, 0x10	; 16
    72f0:	7f 2e       	mov	r7, r31
    72f2:	f8 01       	movw	r30, r16
    72f4:	84 91       	lpm	r24, Z
    72f6:	88 23       	and	r24, r24
    72f8:	09 f4       	brne	.+2      	; 0x72fc <vfprintf+0x1fc>
    72fa:	5e c2       	rjmp	.+1212   	; 0x77b8 <vfprintf+0x6b8>
    72fc:	71 10       	cpse	r7, r1
    72fe:	80 52       	subi	r24, 0x20	; 32
    7300:	b7 01       	movw	r22, r14
    7302:	90 e0       	ldi	r25, 0x00	; 0
    7304:	73 d5       	rcall	.+2790   	; 0x7dec <fputc>
    7306:	0f 5f       	subi	r16, 0xFF	; 255
    7308:	1f 4f       	sbci	r17, 0xFF	; 255
    730a:	f3 cf       	rjmp	.-26     	; 0x72f2 <vfprintf+0x1f2>
    730c:	77 fe       	sbrs	r7, 7
    730e:	0f c0       	rjmp	.+30     	; 0x732e <vfprintf+0x22e>
    7310:	4c 0c       	add	r4, r12
    7312:	04 ff       	sbrs	r16, 4
    7314:	04 c0       	rjmp	.+8      	; 0x731e <vfprintf+0x21e>
    7316:	8a 81       	ldd	r24, Y+2	; 0x02
    7318:	81 33       	cpi	r24, 0x31	; 49
    731a:	09 f4       	brne	.+2      	; 0x731e <vfprintf+0x21e>
    731c:	4a 94       	dec	r4
    731e:	14 14       	cp	r1, r4
    7320:	74 f5       	brge	.+92     	; 0x737e <vfprintf+0x27e>
    7322:	f8 e0       	ldi	r31, 0x08	; 8
    7324:	f4 15       	cp	r31, r4
    7326:	78 f5       	brcc	.+94     	; 0x7386 <vfprintf+0x286>
    7328:	88 e0       	ldi	r24, 0x08	; 8
    732a:	48 2e       	mov	r4, r24
    732c:	2c c0       	rjmp	.+88     	; 0x7386 <vfprintf+0x286>
    732e:	76 fc       	sbrc	r7, 6
    7330:	2a c0       	rjmp	.+84     	; 0x7386 <vfprintf+0x286>
    7332:	81 2f       	mov	r24, r17
    7334:	90 e0       	ldi	r25, 0x00	; 0
    7336:	8c 15       	cp	r24, r12
    7338:	9d 05       	cpc	r25, r13
    733a:	9c f0       	brlt	.+38     	; 0x7362 <vfprintf+0x262>
    733c:	6c ef       	ldi	r22, 0xFC	; 252
    733e:	c6 16       	cp	r12, r22
    7340:	6f ef       	ldi	r22, 0xFF	; 255
    7342:	d6 06       	cpc	r13, r22
    7344:	74 f0       	brlt	.+28     	; 0x7362 <vfprintf+0x262>
    7346:	77 2d       	mov	r23, r7
    7348:	70 68       	ori	r23, 0x80	; 128
    734a:	77 2e       	mov	r7, r23
    734c:	0a c0       	rjmp	.+20     	; 0x7362 <vfprintf+0x262>
    734e:	e2 e0       	ldi	r30, 0x02	; 2
    7350:	f0 e0       	ldi	r31, 0x00	; 0
    7352:	ec 0f       	add	r30, r28
    7354:	fd 1f       	adc	r31, r29
    7356:	e1 0f       	add	r30, r17
    7358:	f1 1d       	adc	r31, r1
    735a:	80 81       	ld	r24, Z
    735c:	80 33       	cpi	r24, 0x30	; 48
    735e:	19 f4       	brne	.+6      	; 0x7366 <vfprintf+0x266>
    7360:	11 50       	subi	r17, 0x01	; 1
    7362:	11 11       	cpse	r17, r1
    7364:	f4 cf       	rjmp	.-24     	; 0x734e <vfprintf+0x24e>
    7366:	77 fe       	sbrs	r7, 7
    7368:	0e c0       	rjmp	.+28     	; 0x7386 <vfprintf+0x286>
    736a:	44 24       	eor	r4, r4
    736c:	43 94       	inc	r4
    736e:	41 0e       	add	r4, r17
    7370:	81 2f       	mov	r24, r17
    7372:	90 e0       	ldi	r25, 0x00	; 0
    7374:	c8 16       	cp	r12, r24
    7376:	d9 06       	cpc	r13, r25
    7378:	2c f4       	brge	.+10     	; 0x7384 <vfprintf+0x284>
    737a:	1c 19       	sub	r17, r12
    737c:	04 c0       	rjmp	.+8      	; 0x7386 <vfprintf+0x286>
    737e:	44 24       	eor	r4, r4
    7380:	43 94       	inc	r4
    7382:	01 c0       	rjmp	.+2      	; 0x7386 <vfprintf+0x286>
    7384:	10 e0       	ldi	r17, 0x00	; 0
    7386:	77 fe       	sbrs	r7, 7
    7388:	07 c0       	rjmp	.+14     	; 0x7398 <vfprintf+0x298>
    738a:	1c 14       	cp	r1, r12
    738c:	1d 04       	cpc	r1, r13
    738e:	3c f4       	brge	.+14     	; 0x739e <vfprintf+0x29e>
    7390:	96 01       	movw	r18, r12
    7392:	2f 5f       	subi	r18, 0xFF	; 255
    7394:	3f 4f       	sbci	r19, 0xFF	; 255
    7396:	05 c0       	rjmp	.+10     	; 0x73a2 <vfprintf+0x2a2>
    7398:	25 e0       	ldi	r18, 0x05	; 5
    739a:	30 e0       	ldi	r19, 0x00	; 0
    739c:	02 c0       	rjmp	.+4      	; 0x73a2 <vfprintf+0x2a2>
    739e:	21 e0       	ldi	r18, 0x01	; 1
    73a0:	30 e0       	ldi	r19, 0x00	; 0
    73a2:	66 20       	and	r6, r6
    73a4:	11 f0       	breq	.+4      	; 0x73aa <vfprintf+0x2aa>
    73a6:	2f 5f       	subi	r18, 0xFF	; 255
    73a8:	3f 4f       	sbci	r19, 0xFF	; 255
    73aa:	11 23       	and	r17, r17
    73ac:	31 f0       	breq	.+12     	; 0x73ba <vfprintf+0x2ba>
    73ae:	41 2f       	mov	r20, r17
    73b0:	50 e0       	ldi	r21, 0x00	; 0
    73b2:	4f 5f       	subi	r20, 0xFF	; 255
    73b4:	5f 4f       	sbci	r21, 0xFF	; 255
    73b6:	24 0f       	add	r18, r20
    73b8:	35 1f       	adc	r19, r21
    73ba:	45 2d       	mov	r20, r5
    73bc:	50 e0       	ldi	r21, 0x00	; 0
    73be:	24 17       	cp	r18, r20
    73c0:	35 07       	cpc	r19, r21
    73c2:	14 f4       	brge	.+4      	; 0x73c8 <vfprintf+0x2c8>
    73c4:	52 1a       	sub	r5, r18
    73c6:	01 c0       	rjmp	.+2      	; 0x73ca <vfprintf+0x2ca>
    73c8:	51 2c       	mov	r5, r1
    73ca:	87 2d       	mov	r24, r7
    73cc:	89 70       	andi	r24, 0x09	; 9
    73ce:	41 f4       	brne	.+16     	; 0x73e0 <vfprintf+0x2e0>
    73d0:	55 20       	and	r5, r5
    73d2:	31 f0       	breq	.+12     	; 0x73e0 <vfprintf+0x2e0>
    73d4:	b7 01       	movw	r22, r14
    73d6:	80 e2       	ldi	r24, 0x20	; 32
    73d8:	90 e0       	ldi	r25, 0x00	; 0
    73da:	08 d5       	rcall	.+2576   	; 0x7dec <fputc>
    73dc:	5a 94       	dec	r5
    73de:	f8 cf       	rjmp	.-16     	; 0x73d0 <vfprintf+0x2d0>
    73e0:	66 20       	and	r6, r6
    73e2:	21 f0       	breq	.+8      	; 0x73ec <vfprintf+0x2ec>
    73e4:	b7 01       	movw	r22, r14
    73e6:	86 2d       	mov	r24, r6
    73e8:	90 e0       	ldi	r25, 0x00	; 0
    73ea:	00 d5       	rcall	.+2560   	; 0x7dec <fputc>
    73ec:	73 fc       	sbrc	r7, 3
    73ee:	08 c0       	rjmp	.+16     	; 0x7400 <vfprintf+0x300>
    73f0:	55 20       	and	r5, r5
    73f2:	31 f0       	breq	.+12     	; 0x7400 <vfprintf+0x300>
    73f4:	b7 01       	movw	r22, r14
    73f6:	80 e3       	ldi	r24, 0x30	; 48
    73f8:	90 e0       	ldi	r25, 0x00	; 0
    73fa:	f8 d4       	rcall	.+2544   	; 0x7dec <fputc>
    73fc:	5a 94       	dec	r5
    73fe:	f8 cf       	rjmp	.-16     	; 0x73f0 <vfprintf+0x2f0>
    7400:	77 fe       	sbrs	r7, 7
    7402:	5d c0       	rjmp	.+186    	; 0x74be <vfprintf+0x3be>
    7404:	9c 2d       	mov	r25, r12
    7406:	8d 2d       	mov	r24, r13
    7408:	d7 fe       	sbrs	r13, 7
    740a:	02 c0       	rjmp	.+4      	; 0x7410 <vfprintf+0x310>
    740c:	90 e0       	ldi	r25, 0x00	; 0
    740e:	80 e0       	ldi	r24, 0x00	; 0
    7410:	69 2e       	mov	r6, r25
    7412:	78 2e       	mov	r7, r24
    7414:	40 e0       	ldi	r20, 0x00	; 0
    7416:	50 e0       	ldi	r21, 0x00	; 0
    7418:	c6 01       	movw	r24, r12
    741a:	84 19       	sub	r24, r4
    741c:	91 09       	sbc	r25, r1
    741e:	8c 87       	std	Y+12, r24	; 0x0c
    7420:	9d 87       	std	Y+13, r25	; 0x0d
    7422:	96 01       	movw	r18, r12
    7424:	26 19       	sub	r18, r6
    7426:	37 09       	sbc	r19, r7
    7428:	28 0d       	add	r18, r8
    742a:	39 1d       	adc	r19, r9
    742c:	81 2f       	mov	r24, r17
    742e:	90 e0       	ldi	r25, 0x00	; 0
    7430:	ee 27       	eor	r30, r30
    7432:	ff 27       	eor	r31, r31
    7434:	e8 1b       	sub	r30, r24
    7436:	f9 0b       	sbc	r31, r25
    7438:	ee 87       	std	Y+14, r30	; 0x0e
    743a:	ff 87       	std	Y+15, r31	; 0x0f
    743c:	ff ef       	ldi	r31, 0xFF	; 255
    743e:	6f 16       	cp	r6, r31
    7440:	7f 06       	cpc	r7, r31
    7442:	61 f4       	brne	.+24     	; 0x745c <vfprintf+0x35c>
    7444:	b7 01       	movw	r22, r14
    7446:	8e e2       	ldi	r24, 0x2E	; 46
    7448:	90 e0       	ldi	r25, 0x00	; 0
    744a:	2b 8b       	std	Y+19, r18	; 0x13
    744c:	3a 8b       	std	Y+18, r19	; 0x12
    744e:	48 8b       	std	Y+16, r20	; 0x10
    7450:	59 8b       	std	Y+17, r21	; 0x11
    7452:	cc d4       	rcall	.+2456   	; 0x7dec <fputc>
    7454:	59 89       	ldd	r21, Y+17	; 0x11
    7456:	48 89       	ldd	r20, Y+16	; 0x10
    7458:	3a 89       	ldd	r19, Y+18	; 0x12
    745a:	2b 89       	ldd	r18, Y+19	; 0x13
    745c:	c6 14       	cp	r12, r6
    745e:	d7 04       	cpc	r13, r7
    7460:	54 f0       	brlt	.+20     	; 0x7476 <vfprintf+0x376>
    7462:	6c 85       	ldd	r22, Y+12	; 0x0c
    7464:	7d 85       	ldd	r23, Y+13	; 0x0d
    7466:	66 15       	cp	r22, r6
    7468:	77 05       	cpc	r23, r7
    746a:	2c f4       	brge	.+10     	; 0x7476 <vfprintf+0x376>
    746c:	f9 01       	movw	r30, r18
    746e:	e4 0f       	add	r30, r20
    7470:	f5 1f       	adc	r31, r21
    7472:	81 81       	ldd	r24, Z+1	; 0x01
    7474:	01 c0       	rjmp	.+2      	; 0x7478 <vfprintf+0x378>
    7476:	80 e3       	ldi	r24, 0x30	; 48
    7478:	71 e0       	ldi	r23, 0x01	; 1
    747a:	67 1a       	sub	r6, r23
    747c:	71 08       	sbc	r7, r1
    747e:	4f 5f       	subi	r20, 0xFF	; 255
    7480:	5f 4f       	sbci	r21, 0xFF	; 255
    7482:	ee 85       	ldd	r30, Y+14	; 0x0e
    7484:	ff 85       	ldd	r31, Y+15	; 0x0f
    7486:	6e 16       	cp	r6, r30
    7488:	7f 06       	cpc	r7, r31
    748a:	64 f0       	brlt	.+24     	; 0x74a4 <vfprintf+0x3a4>
    748c:	b7 01       	movw	r22, r14
    748e:	90 e0       	ldi	r25, 0x00	; 0
    7490:	2b 8b       	std	Y+19, r18	; 0x13
    7492:	3a 8b       	std	Y+18, r19	; 0x12
    7494:	48 8b       	std	Y+16, r20	; 0x10
    7496:	59 8b       	std	Y+17, r21	; 0x11
    7498:	a9 d4       	rcall	.+2386   	; 0x7dec <fputc>
    749a:	2b 89       	ldd	r18, Y+19	; 0x13
    749c:	3a 89       	ldd	r19, Y+18	; 0x12
    749e:	48 89       	ldd	r20, Y+16	; 0x10
    74a0:	59 89       	ldd	r21, Y+17	; 0x11
    74a2:	cc cf       	rjmp	.-104    	; 0x743c <vfprintf+0x33c>
    74a4:	6c 14       	cp	r6, r12
    74a6:	7d 04       	cpc	r7, r13
    74a8:	39 f4       	brne	.+14     	; 0x74b8 <vfprintf+0x3b8>
    74aa:	9a 81       	ldd	r25, Y+2	; 0x02
    74ac:	96 33       	cpi	r25, 0x36	; 54
    74ae:	18 f4       	brcc	.+6      	; 0x74b6 <vfprintf+0x3b6>
    74b0:	95 33       	cpi	r25, 0x35	; 53
    74b2:	11 f4       	brne	.+4      	; 0x74b8 <vfprintf+0x3b8>
    74b4:	04 ff       	sbrs	r16, 4
    74b6:	81 e3       	ldi	r24, 0x31	; 49
    74b8:	b7 01       	movw	r22, r14
    74ba:	90 e0       	ldi	r25, 0x00	; 0
    74bc:	45 c0       	rjmp	.+138    	; 0x7548 <vfprintf+0x448>
    74be:	8a 81       	ldd	r24, Y+2	; 0x02
    74c0:	81 33       	cpi	r24, 0x31	; 49
    74c2:	09 f0       	breq	.+2      	; 0x74c6 <vfprintf+0x3c6>
    74c4:	0f 7e       	andi	r16, 0xEF	; 239
    74c6:	b7 01       	movw	r22, r14
    74c8:	90 e0       	ldi	r25, 0x00	; 0
    74ca:	90 d4       	rcall	.+2336   	; 0x7dec <fputc>
    74cc:	11 11       	cpse	r17, r1
    74ce:	05 c0       	rjmp	.+10     	; 0x74da <vfprintf+0x3da>
    74d0:	74 fe       	sbrs	r7, 4
    74d2:	16 c0       	rjmp	.+44     	; 0x7500 <vfprintf+0x400>
    74d4:	85 e4       	ldi	r24, 0x45	; 69
    74d6:	90 e0       	ldi	r25, 0x00	; 0
    74d8:	15 c0       	rjmp	.+42     	; 0x7504 <vfprintf+0x404>
    74da:	b7 01       	movw	r22, r14
    74dc:	8e e2       	ldi	r24, 0x2E	; 46
    74de:	90 e0       	ldi	r25, 0x00	; 0
    74e0:	85 d4       	rcall	.+2314   	; 0x7dec <fputc>
    74e2:	82 e0       	ldi	r24, 0x02	; 2
    74e4:	66 24       	eor	r6, r6
    74e6:	63 94       	inc	r6
    74e8:	68 0e       	add	r6, r24
    74ea:	f4 01       	movw	r30, r8
    74ec:	e8 0f       	add	r30, r24
    74ee:	f1 1d       	adc	r31, r1
    74f0:	80 81       	ld	r24, Z
    74f2:	b7 01       	movw	r22, r14
    74f4:	90 e0       	ldi	r25, 0x00	; 0
    74f6:	7a d4       	rcall	.+2292   	; 0x7dec <fputc>
    74f8:	11 50       	subi	r17, 0x01	; 1
    74fa:	51 f3       	breq	.-44     	; 0x74d0 <vfprintf+0x3d0>
    74fc:	86 2d       	mov	r24, r6
    74fe:	f2 cf       	rjmp	.-28     	; 0x74e4 <vfprintf+0x3e4>
    7500:	85 e6       	ldi	r24, 0x65	; 101
    7502:	90 e0       	ldi	r25, 0x00	; 0
    7504:	b7 01       	movw	r22, r14
    7506:	72 d4       	rcall	.+2276   	; 0x7dec <fputc>
    7508:	d7 fc       	sbrc	r13, 7
    750a:	05 c0       	rjmp	.+10     	; 0x7516 <vfprintf+0x416>
    750c:	c1 14       	cp	r12, r1
    750e:	d1 04       	cpc	r13, r1
    7510:	39 f4       	brne	.+14     	; 0x7520 <vfprintf+0x420>
    7512:	04 ff       	sbrs	r16, 4
    7514:	05 c0       	rjmp	.+10     	; 0x7520 <vfprintf+0x420>
    7516:	d1 94       	neg	r13
    7518:	c1 94       	neg	r12
    751a:	d1 08       	sbc	r13, r1
    751c:	8d e2       	ldi	r24, 0x2D	; 45
    751e:	01 c0       	rjmp	.+2      	; 0x7522 <vfprintf+0x422>
    7520:	8b e2       	ldi	r24, 0x2B	; 43
    7522:	b7 01       	movw	r22, r14
    7524:	90 e0       	ldi	r25, 0x00	; 0
    7526:	62 d4       	rcall	.+2244   	; 0x7dec <fputc>
    7528:	80 e3       	ldi	r24, 0x30	; 48
    752a:	6a e0       	ldi	r22, 0x0A	; 10
    752c:	c6 16       	cp	r12, r22
    752e:	d1 04       	cpc	r13, r1
    7530:	2c f0       	brlt	.+10     	; 0x753c <vfprintf+0x43c>
    7532:	8f 5f       	subi	r24, 0xFF	; 255
    7534:	fa e0       	ldi	r31, 0x0A	; 10
    7536:	cf 1a       	sub	r12, r31
    7538:	d1 08       	sbc	r13, r1
    753a:	f7 cf       	rjmp	.-18     	; 0x752a <vfprintf+0x42a>
    753c:	b7 01       	movw	r22, r14
    753e:	90 e0       	ldi	r25, 0x00	; 0
    7540:	55 d4       	rcall	.+2218   	; 0x7dec <fputc>
    7542:	b7 01       	movw	r22, r14
    7544:	c6 01       	movw	r24, r12
    7546:	c0 96       	adiw	r24, 0x30	; 48
    7548:	51 d4       	rcall	.+2210   	; 0x7dec <fputc>
    754a:	36 c1       	rjmp	.+620    	; 0x77b8 <vfprintf+0x6b8>
    754c:	83 36       	cpi	r24, 0x63	; 99
    754e:	31 f0       	breq	.+12     	; 0x755c <vfprintf+0x45c>
    7550:	83 37       	cpi	r24, 0x73	; 115
    7552:	79 f0       	breq	.+30     	; 0x7572 <vfprintf+0x472>
    7554:	83 35       	cpi	r24, 0x53	; 83
    7556:	09 f0       	breq	.+2      	; 0x755a <vfprintf+0x45a>
    7558:	54 c0       	rjmp	.+168    	; 0x7602 <vfprintf+0x502>
    755a:	20 c0       	rjmp	.+64     	; 0x759c <vfprintf+0x49c>
    755c:	56 01       	movw	r10, r12
    755e:	72 e0       	ldi	r23, 0x02	; 2
    7560:	a7 0e       	add	r10, r23
    7562:	b1 1c       	adc	r11, r1
    7564:	f6 01       	movw	r30, r12
    7566:	80 81       	ld	r24, Z
    7568:	89 83       	std	Y+1, r24	; 0x01
    756a:	01 e0       	ldi	r16, 0x01	; 1
    756c:	10 e0       	ldi	r17, 0x00	; 0
    756e:	64 01       	movw	r12, r8
    7570:	13 c0       	rjmp	.+38     	; 0x7598 <vfprintf+0x498>
    7572:	56 01       	movw	r10, r12
    7574:	f2 e0       	ldi	r31, 0x02	; 2
    7576:	af 0e       	add	r10, r31
    7578:	b1 1c       	adc	r11, r1
    757a:	f6 01       	movw	r30, r12
    757c:	c0 80       	ld	r12, Z
    757e:	d1 80       	ldd	r13, Z+1	; 0x01
    7580:	26 ff       	sbrs	r18, 6
    7582:	03 c0       	rjmp	.+6      	; 0x758a <vfprintf+0x48a>
    7584:	61 2f       	mov	r22, r17
    7586:	70 e0       	ldi	r23, 0x00	; 0
    7588:	02 c0       	rjmp	.+4      	; 0x758e <vfprintf+0x48e>
    758a:	6f ef       	ldi	r22, 0xFF	; 255
    758c:	7f ef       	ldi	r23, 0xFF	; 255
    758e:	c6 01       	movw	r24, r12
    7590:	2b 8b       	std	Y+19, r18	; 0x13
    7592:	f2 d3       	rcall	.+2020   	; 0x7d78 <strnlen>
    7594:	8c 01       	movw	r16, r24
    7596:	2b 89       	ldd	r18, Y+19	; 0x13
    7598:	2f 77       	andi	r18, 0x7F	; 127
    759a:	14 c0       	rjmp	.+40     	; 0x75c4 <vfprintf+0x4c4>
    759c:	56 01       	movw	r10, r12
    759e:	f2 e0       	ldi	r31, 0x02	; 2
    75a0:	af 0e       	add	r10, r31
    75a2:	b1 1c       	adc	r11, r1
    75a4:	f6 01       	movw	r30, r12
    75a6:	c0 80       	ld	r12, Z
    75a8:	d1 80       	ldd	r13, Z+1	; 0x01
    75aa:	26 ff       	sbrs	r18, 6
    75ac:	03 c0       	rjmp	.+6      	; 0x75b4 <vfprintf+0x4b4>
    75ae:	61 2f       	mov	r22, r17
    75b0:	70 e0       	ldi	r23, 0x00	; 0
    75b2:	02 c0       	rjmp	.+4      	; 0x75b8 <vfprintf+0x4b8>
    75b4:	6f ef       	ldi	r22, 0xFF	; 255
    75b6:	7f ef       	ldi	r23, 0xFF	; 255
    75b8:	c6 01       	movw	r24, r12
    75ba:	2b 8b       	std	Y+19, r18	; 0x13
    75bc:	98 d3       	rcall	.+1840   	; 0x7cee <strnlen_P>
    75be:	8c 01       	movw	r16, r24
    75c0:	2b 89       	ldd	r18, Y+19	; 0x13
    75c2:	20 68       	ori	r18, 0x80	; 128
    75c4:	72 2e       	mov	r7, r18
    75c6:	23 fd       	sbrc	r18, 3
    75c8:	18 c0       	rjmp	.+48     	; 0x75fa <vfprintf+0x4fa>
    75ca:	85 2d       	mov	r24, r5
    75cc:	90 e0       	ldi	r25, 0x00	; 0
    75ce:	08 17       	cp	r16, r24
    75d0:	19 07       	cpc	r17, r25
    75d2:	98 f4       	brcc	.+38     	; 0x75fa <vfprintf+0x4fa>
    75d4:	b7 01       	movw	r22, r14
    75d6:	80 e2       	ldi	r24, 0x20	; 32
    75d8:	90 e0       	ldi	r25, 0x00	; 0
    75da:	08 d4       	rcall	.+2064   	; 0x7dec <fputc>
    75dc:	5a 94       	dec	r5
    75de:	f5 cf       	rjmp	.-22     	; 0x75ca <vfprintf+0x4ca>
    75e0:	f6 01       	movw	r30, r12
    75e2:	77 fc       	sbrc	r7, 7
    75e4:	85 91       	lpm	r24, Z+
    75e6:	77 fe       	sbrs	r7, 7
    75e8:	81 91       	ld	r24, Z+
    75ea:	6f 01       	movw	r12, r30
    75ec:	b7 01       	movw	r22, r14
    75ee:	90 e0       	ldi	r25, 0x00	; 0
    75f0:	fd d3       	rcall	.+2042   	; 0x7dec <fputc>
    75f2:	51 10       	cpse	r5, r1
    75f4:	5a 94       	dec	r5
    75f6:	01 50       	subi	r16, 0x01	; 1
    75f8:	11 09       	sbc	r17, r1
    75fa:	01 15       	cp	r16, r1
    75fc:	11 05       	cpc	r17, r1
    75fe:	81 f7       	brne	.-32     	; 0x75e0 <vfprintf+0x4e0>
    7600:	db c0       	rjmp	.+438    	; 0x77b8 <vfprintf+0x6b8>
    7602:	84 36       	cpi	r24, 0x64	; 100
    7604:	11 f0       	breq	.+4      	; 0x760a <vfprintf+0x50a>
    7606:	89 36       	cpi	r24, 0x69	; 105
    7608:	49 f5       	brne	.+82     	; 0x765c <vfprintf+0x55c>
    760a:	56 01       	movw	r10, r12
    760c:	27 ff       	sbrs	r18, 7
    760e:	09 c0       	rjmp	.+18     	; 0x7622 <vfprintf+0x522>
    7610:	f4 e0       	ldi	r31, 0x04	; 4
    7612:	af 0e       	add	r10, r31
    7614:	b1 1c       	adc	r11, r1
    7616:	f6 01       	movw	r30, r12
    7618:	60 81       	ld	r22, Z
    761a:	71 81       	ldd	r23, Z+1	; 0x01
    761c:	82 81       	ldd	r24, Z+2	; 0x02
    761e:	93 81       	ldd	r25, Z+3	; 0x03
    7620:	0a c0       	rjmp	.+20     	; 0x7636 <vfprintf+0x536>
    7622:	f2 e0       	ldi	r31, 0x02	; 2
    7624:	af 0e       	add	r10, r31
    7626:	b1 1c       	adc	r11, r1
    7628:	f6 01       	movw	r30, r12
    762a:	60 81       	ld	r22, Z
    762c:	71 81       	ldd	r23, Z+1	; 0x01
    762e:	88 27       	eor	r24, r24
    7630:	77 fd       	sbrc	r23, 7
    7632:	80 95       	com	r24
    7634:	98 2f       	mov	r25, r24
    7636:	02 2f       	mov	r16, r18
    7638:	0f 76       	andi	r16, 0x6F	; 111
    763a:	97 ff       	sbrs	r25, 7
    763c:	08 c0       	rjmp	.+16     	; 0x764e <vfprintf+0x54e>
    763e:	90 95       	com	r25
    7640:	80 95       	com	r24
    7642:	70 95       	com	r23
    7644:	61 95       	neg	r22
    7646:	7f 4f       	sbci	r23, 0xFF	; 255
    7648:	8f 4f       	sbci	r24, 0xFF	; 255
    764a:	9f 4f       	sbci	r25, 0xFF	; 255
    764c:	00 68       	ori	r16, 0x80	; 128
    764e:	2a e0       	ldi	r18, 0x0A	; 10
    7650:	30 e0       	ldi	r19, 0x00	; 0
    7652:	a4 01       	movw	r20, r8
    7654:	3b d4       	rcall	.+2166   	; 0x7ecc <__ultoa_invert>
    7656:	c8 2e       	mov	r12, r24
    7658:	c8 18       	sub	r12, r8
    765a:	3d c0       	rjmp	.+122    	; 0x76d6 <vfprintf+0x5d6>
    765c:	02 2f       	mov	r16, r18
    765e:	85 37       	cpi	r24, 0x75	; 117
    7660:	21 f4       	brne	.+8      	; 0x766a <vfprintf+0x56a>
    7662:	0f 7e       	andi	r16, 0xEF	; 239
    7664:	2a e0       	ldi	r18, 0x0A	; 10
    7666:	30 e0       	ldi	r19, 0x00	; 0
    7668:	1d c0       	rjmp	.+58     	; 0x76a4 <vfprintf+0x5a4>
    766a:	09 7f       	andi	r16, 0xF9	; 249
    766c:	8f 36       	cpi	r24, 0x6F	; 111
    766e:	91 f0       	breq	.+36     	; 0x7694 <vfprintf+0x594>
    7670:	18 f4       	brcc	.+6      	; 0x7678 <vfprintf+0x578>
    7672:	88 35       	cpi	r24, 0x58	; 88
    7674:	59 f0       	breq	.+22     	; 0x768c <vfprintf+0x58c>
    7676:	a9 c0       	rjmp	.+338    	; 0x77ca <vfprintf+0x6ca>
    7678:	80 37       	cpi	r24, 0x70	; 112
    767a:	19 f0       	breq	.+6      	; 0x7682 <vfprintf+0x582>
    767c:	88 37       	cpi	r24, 0x78	; 120
    767e:	11 f0       	breq	.+4      	; 0x7684 <vfprintf+0x584>
    7680:	a4 c0       	rjmp	.+328    	; 0x77ca <vfprintf+0x6ca>
    7682:	00 61       	ori	r16, 0x10	; 16
    7684:	04 ff       	sbrs	r16, 4
    7686:	09 c0       	rjmp	.+18     	; 0x769a <vfprintf+0x59a>
    7688:	04 60       	ori	r16, 0x04	; 4
    768a:	07 c0       	rjmp	.+14     	; 0x769a <vfprintf+0x59a>
    768c:	24 ff       	sbrs	r18, 4
    768e:	08 c0       	rjmp	.+16     	; 0x76a0 <vfprintf+0x5a0>
    7690:	06 60       	ori	r16, 0x06	; 6
    7692:	06 c0       	rjmp	.+12     	; 0x76a0 <vfprintf+0x5a0>
    7694:	28 e0       	ldi	r18, 0x08	; 8
    7696:	30 e0       	ldi	r19, 0x00	; 0
    7698:	05 c0       	rjmp	.+10     	; 0x76a4 <vfprintf+0x5a4>
    769a:	20 e1       	ldi	r18, 0x10	; 16
    769c:	30 e0       	ldi	r19, 0x00	; 0
    769e:	02 c0       	rjmp	.+4      	; 0x76a4 <vfprintf+0x5a4>
    76a0:	20 e1       	ldi	r18, 0x10	; 16
    76a2:	32 e0       	ldi	r19, 0x02	; 2
    76a4:	56 01       	movw	r10, r12
    76a6:	07 ff       	sbrs	r16, 7
    76a8:	09 c0       	rjmp	.+18     	; 0x76bc <vfprintf+0x5bc>
    76aa:	f4 e0       	ldi	r31, 0x04	; 4
    76ac:	af 0e       	add	r10, r31
    76ae:	b1 1c       	adc	r11, r1
    76b0:	f6 01       	movw	r30, r12
    76b2:	60 81       	ld	r22, Z
    76b4:	71 81       	ldd	r23, Z+1	; 0x01
    76b6:	82 81       	ldd	r24, Z+2	; 0x02
    76b8:	93 81       	ldd	r25, Z+3	; 0x03
    76ba:	08 c0       	rjmp	.+16     	; 0x76cc <vfprintf+0x5cc>
    76bc:	f2 e0       	ldi	r31, 0x02	; 2
    76be:	af 0e       	add	r10, r31
    76c0:	b1 1c       	adc	r11, r1
    76c2:	f6 01       	movw	r30, r12
    76c4:	60 81       	ld	r22, Z
    76c6:	71 81       	ldd	r23, Z+1	; 0x01
    76c8:	80 e0       	ldi	r24, 0x00	; 0
    76ca:	90 e0       	ldi	r25, 0x00	; 0
    76cc:	a4 01       	movw	r20, r8
    76ce:	fe d3       	rcall	.+2044   	; 0x7ecc <__ultoa_invert>
    76d0:	c8 2e       	mov	r12, r24
    76d2:	c8 18       	sub	r12, r8
    76d4:	0f 77       	andi	r16, 0x7F	; 127
    76d6:	06 ff       	sbrs	r16, 6
    76d8:	0b c0       	rjmp	.+22     	; 0x76f0 <vfprintf+0x5f0>
    76da:	20 2f       	mov	r18, r16
    76dc:	2e 7f       	andi	r18, 0xFE	; 254
    76de:	c1 16       	cp	r12, r17
    76e0:	50 f4       	brcc	.+20     	; 0x76f6 <vfprintf+0x5f6>
    76e2:	04 ff       	sbrs	r16, 4
    76e4:	0a c0       	rjmp	.+20     	; 0x76fa <vfprintf+0x5fa>
    76e6:	02 fd       	sbrc	r16, 2
    76e8:	08 c0       	rjmp	.+16     	; 0x76fa <vfprintf+0x5fa>
    76ea:	20 2f       	mov	r18, r16
    76ec:	2e 7e       	andi	r18, 0xEE	; 238
    76ee:	05 c0       	rjmp	.+10     	; 0x76fa <vfprintf+0x5fa>
    76f0:	dc 2c       	mov	r13, r12
    76f2:	20 2f       	mov	r18, r16
    76f4:	03 c0       	rjmp	.+6      	; 0x76fc <vfprintf+0x5fc>
    76f6:	dc 2c       	mov	r13, r12
    76f8:	01 c0       	rjmp	.+2      	; 0x76fc <vfprintf+0x5fc>
    76fa:	d1 2e       	mov	r13, r17
    76fc:	24 ff       	sbrs	r18, 4
    76fe:	0d c0       	rjmp	.+26     	; 0x771a <vfprintf+0x61a>
    7700:	fe 01       	movw	r30, r28
    7702:	ec 0d       	add	r30, r12
    7704:	f1 1d       	adc	r31, r1
    7706:	80 81       	ld	r24, Z
    7708:	80 33       	cpi	r24, 0x30	; 48
    770a:	11 f4       	brne	.+4      	; 0x7710 <vfprintf+0x610>
    770c:	29 7e       	andi	r18, 0xE9	; 233
    770e:	09 c0       	rjmp	.+18     	; 0x7722 <vfprintf+0x622>
    7710:	22 ff       	sbrs	r18, 2
    7712:	06 c0       	rjmp	.+12     	; 0x7720 <vfprintf+0x620>
    7714:	d3 94       	inc	r13
    7716:	d3 94       	inc	r13
    7718:	04 c0       	rjmp	.+8      	; 0x7722 <vfprintf+0x622>
    771a:	82 2f       	mov	r24, r18
    771c:	86 78       	andi	r24, 0x86	; 134
    771e:	09 f0       	breq	.+2      	; 0x7722 <vfprintf+0x622>
    7720:	d3 94       	inc	r13
    7722:	23 fd       	sbrc	r18, 3
    7724:	12 c0       	rjmp	.+36     	; 0x774a <vfprintf+0x64a>
    7726:	20 ff       	sbrs	r18, 0
    7728:	06 c0       	rjmp	.+12     	; 0x7736 <vfprintf+0x636>
    772a:	1c 2d       	mov	r17, r12
    772c:	d5 14       	cp	r13, r5
    772e:	18 f4       	brcc	.+6      	; 0x7736 <vfprintf+0x636>
    7730:	15 0d       	add	r17, r5
    7732:	1d 19       	sub	r17, r13
    7734:	d5 2c       	mov	r13, r5
    7736:	d5 14       	cp	r13, r5
    7738:	60 f4       	brcc	.+24     	; 0x7752 <vfprintf+0x652>
    773a:	b7 01       	movw	r22, r14
    773c:	80 e2       	ldi	r24, 0x20	; 32
    773e:	90 e0       	ldi	r25, 0x00	; 0
    7740:	2b 8b       	std	Y+19, r18	; 0x13
    7742:	54 d3       	rcall	.+1704   	; 0x7dec <fputc>
    7744:	d3 94       	inc	r13
    7746:	2b 89       	ldd	r18, Y+19	; 0x13
    7748:	f6 cf       	rjmp	.-20     	; 0x7736 <vfprintf+0x636>
    774a:	d5 14       	cp	r13, r5
    774c:	10 f4       	brcc	.+4      	; 0x7752 <vfprintf+0x652>
    774e:	5d 18       	sub	r5, r13
    7750:	01 c0       	rjmp	.+2      	; 0x7754 <vfprintf+0x654>
    7752:	51 2c       	mov	r5, r1
    7754:	24 ff       	sbrs	r18, 4
    7756:	11 c0       	rjmp	.+34     	; 0x777a <vfprintf+0x67a>
    7758:	b7 01       	movw	r22, r14
    775a:	80 e3       	ldi	r24, 0x30	; 48
    775c:	90 e0       	ldi	r25, 0x00	; 0
    775e:	2b 8b       	std	Y+19, r18	; 0x13
    7760:	45 d3       	rcall	.+1674   	; 0x7dec <fputc>
    7762:	2b 89       	ldd	r18, Y+19	; 0x13
    7764:	22 ff       	sbrs	r18, 2
    7766:	16 c0       	rjmp	.+44     	; 0x7794 <vfprintf+0x694>
    7768:	21 ff       	sbrs	r18, 1
    776a:	03 c0       	rjmp	.+6      	; 0x7772 <vfprintf+0x672>
    776c:	88 e5       	ldi	r24, 0x58	; 88
    776e:	90 e0       	ldi	r25, 0x00	; 0
    7770:	02 c0       	rjmp	.+4      	; 0x7776 <vfprintf+0x676>
    7772:	88 e7       	ldi	r24, 0x78	; 120
    7774:	90 e0       	ldi	r25, 0x00	; 0
    7776:	b7 01       	movw	r22, r14
    7778:	0c c0       	rjmp	.+24     	; 0x7792 <vfprintf+0x692>
    777a:	82 2f       	mov	r24, r18
    777c:	86 78       	andi	r24, 0x86	; 134
    777e:	51 f0       	breq	.+20     	; 0x7794 <vfprintf+0x694>
    7780:	21 fd       	sbrc	r18, 1
    7782:	02 c0       	rjmp	.+4      	; 0x7788 <vfprintf+0x688>
    7784:	80 e2       	ldi	r24, 0x20	; 32
    7786:	01 c0       	rjmp	.+2      	; 0x778a <vfprintf+0x68a>
    7788:	8b e2       	ldi	r24, 0x2B	; 43
    778a:	27 fd       	sbrc	r18, 7
    778c:	8d e2       	ldi	r24, 0x2D	; 45
    778e:	b7 01       	movw	r22, r14
    7790:	90 e0       	ldi	r25, 0x00	; 0
    7792:	2c d3       	rcall	.+1624   	; 0x7dec <fputc>
    7794:	c1 16       	cp	r12, r17
    7796:	30 f4       	brcc	.+12     	; 0x77a4 <vfprintf+0x6a4>
    7798:	b7 01       	movw	r22, r14
    779a:	80 e3       	ldi	r24, 0x30	; 48
    779c:	90 e0       	ldi	r25, 0x00	; 0
    779e:	26 d3       	rcall	.+1612   	; 0x7dec <fputc>
    77a0:	11 50       	subi	r17, 0x01	; 1
    77a2:	f8 cf       	rjmp	.-16     	; 0x7794 <vfprintf+0x694>
    77a4:	ca 94       	dec	r12
    77a6:	f4 01       	movw	r30, r8
    77a8:	ec 0d       	add	r30, r12
    77aa:	f1 1d       	adc	r31, r1
    77ac:	80 81       	ld	r24, Z
    77ae:	b7 01       	movw	r22, r14
    77b0:	90 e0       	ldi	r25, 0x00	; 0
    77b2:	1c d3       	rcall	.+1592   	; 0x7dec <fputc>
    77b4:	c1 10       	cpse	r12, r1
    77b6:	f6 cf       	rjmp	.-20     	; 0x77a4 <vfprintf+0x6a4>
    77b8:	55 20       	and	r5, r5
    77ba:	09 f4       	brne	.+2      	; 0x77be <vfprintf+0x6be>
    77bc:	dd cc       	rjmp	.-1606   	; 0x7178 <vfprintf+0x78>
    77be:	b7 01       	movw	r22, r14
    77c0:	80 e2       	ldi	r24, 0x20	; 32
    77c2:	90 e0       	ldi	r25, 0x00	; 0
    77c4:	13 d3       	rcall	.+1574   	; 0x7dec <fputc>
    77c6:	5a 94       	dec	r5
    77c8:	f7 cf       	rjmp	.-18     	; 0x77b8 <vfprintf+0x6b8>
    77ca:	f7 01       	movw	r30, r14
    77cc:	86 81       	ldd	r24, Z+6	; 0x06
    77ce:	97 81       	ldd	r25, Z+7	; 0x07
    77d0:	02 c0       	rjmp	.+4      	; 0x77d6 <vfprintf+0x6d6>
    77d2:	8f ef       	ldi	r24, 0xFF	; 255
    77d4:	9f ef       	ldi	r25, 0xFF	; 255
    77d6:	63 96       	adiw	r28, 0x13	; 19
    77d8:	cd bf       	out	0x3d, r28	; 61
    77da:	de bf       	out	0x3e, r29	; 62
    77dc:	df 91       	pop	r29
    77de:	cf 91       	pop	r28
    77e0:	1f 91       	pop	r17
    77e2:	0f 91       	pop	r16
    77e4:	ff 90       	pop	r15
    77e6:	ef 90       	pop	r14
    77e8:	df 90       	pop	r13
    77ea:	cf 90       	pop	r12
    77ec:	bf 90       	pop	r11
    77ee:	af 90       	pop	r10
    77f0:	9f 90       	pop	r9
    77f2:	8f 90       	pop	r8
    77f4:	7f 90       	pop	r7
    77f6:	6f 90       	pop	r6
    77f8:	5f 90       	pop	r5
    77fa:	4f 90       	pop	r4
    77fc:	3f 90       	pop	r3
    77fe:	2f 90       	pop	r2
    7800:	08 95       	ret

00007802 <__udivmodhi4>:
    7802:	aa 1b       	sub	r26, r26
    7804:	bb 1b       	sub	r27, r27
    7806:	51 e1       	ldi	r21, 0x11	; 17
    7808:	07 c0       	rjmp	.+14     	; 0x7818 <__udivmodhi4_ep>

0000780a <__udivmodhi4_loop>:
    780a:	aa 1f       	adc	r26, r26
    780c:	bb 1f       	adc	r27, r27
    780e:	a6 17       	cp	r26, r22
    7810:	b7 07       	cpc	r27, r23
    7812:	10 f0       	brcs	.+4      	; 0x7818 <__udivmodhi4_ep>
    7814:	a6 1b       	sub	r26, r22
    7816:	b7 0b       	sbc	r27, r23

00007818 <__udivmodhi4_ep>:
    7818:	88 1f       	adc	r24, r24
    781a:	99 1f       	adc	r25, r25
    781c:	5a 95       	dec	r21
    781e:	a9 f7       	brne	.-22     	; 0x780a <__udivmodhi4_loop>
    7820:	80 95       	com	r24
    7822:	90 95       	com	r25
    7824:	bc 01       	movw	r22, r24
    7826:	cd 01       	movw	r24, r26
    7828:	08 95       	ret

0000782a <__divmodhi4>:
    782a:	97 fb       	bst	r25, 7
    782c:	07 2e       	mov	r0, r23
    782e:	16 f4       	brtc	.+4      	; 0x7834 <__divmodhi4+0xa>
    7830:	00 94       	com	r0
    7832:	06 d0       	rcall	.+12     	; 0x7840 <__divmodhi4_neg1>
    7834:	77 fd       	sbrc	r23, 7
    7836:	08 d0       	rcall	.+16     	; 0x7848 <__divmodhi4_neg2>
    7838:	e4 df       	rcall	.-56     	; 0x7802 <__udivmodhi4>
    783a:	07 fc       	sbrc	r0, 7
    783c:	05 d0       	rcall	.+10     	; 0x7848 <__divmodhi4_neg2>
    783e:	3e f4       	brtc	.+14     	; 0x784e <__divmodhi4_exit>

00007840 <__divmodhi4_neg1>:
    7840:	90 95       	com	r25
    7842:	81 95       	neg	r24
    7844:	9f 4f       	sbci	r25, 0xFF	; 255
    7846:	08 95       	ret

00007848 <__divmodhi4_neg2>:
    7848:	70 95       	com	r23
    784a:	61 95       	neg	r22
    784c:	7f 4f       	sbci	r23, 0xFF	; 255

0000784e <__divmodhi4_exit>:
    784e:	08 95       	ret

00007850 <__udivmodsi4>:
    7850:	a1 e2       	ldi	r26, 0x21	; 33
    7852:	1a 2e       	mov	r1, r26
    7854:	aa 1b       	sub	r26, r26
    7856:	bb 1b       	sub	r27, r27
    7858:	fd 01       	movw	r30, r26
    785a:	0d c0       	rjmp	.+26     	; 0x7876 <__udivmodsi4_ep>

0000785c <__udivmodsi4_loop>:
    785c:	aa 1f       	adc	r26, r26
    785e:	bb 1f       	adc	r27, r27
    7860:	ee 1f       	adc	r30, r30
    7862:	ff 1f       	adc	r31, r31
    7864:	a2 17       	cp	r26, r18
    7866:	b3 07       	cpc	r27, r19
    7868:	e4 07       	cpc	r30, r20
    786a:	f5 07       	cpc	r31, r21
    786c:	20 f0       	brcs	.+8      	; 0x7876 <__udivmodsi4_ep>
    786e:	a2 1b       	sub	r26, r18
    7870:	b3 0b       	sbc	r27, r19
    7872:	e4 0b       	sbc	r30, r20
    7874:	f5 0b       	sbc	r31, r21

00007876 <__udivmodsi4_ep>:
    7876:	66 1f       	adc	r22, r22
    7878:	77 1f       	adc	r23, r23
    787a:	88 1f       	adc	r24, r24
    787c:	99 1f       	adc	r25, r25
    787e:	1a 94       	dec	r1
    7880:	69 f7       	brne	.-38     	; 0x785c <__udivmodsi4_loop>
    7882:	60 95       	com	r22
    7884:	70 95       	com	r23
    7886:	80 95       	com	r24
    7888:	90 95       	com	r25
    788a:	9b 01       	movw	r18, r22
    788c:	ac 01       	movw	r20, r24
    788e:	bd 01       	movw	r22, r26
    7890:	cf 01       	movw	r24, r30
    7892:	08 95       	ret

00007894 <__tablejump2__>:
    7894:	ee 0f       	add	r30, r30
    7896:	ff 1f       	adc	r31, r31

00007898 <__tablejump__>:
    7898:	05 90       	lpm	r0, Z+
    789a:	f4 91       	lpm	r31, Z
    789c:	e0 2d       	mov	r30, r0
    789e:	19 94       	eijmp

000078a0 <__umulhisi3>:
    78a0:	a2 9f       	mul	r26, r18
    78a2:	b0 01       	movw	r22, r0
    78a4:	b3 9f       	mul	r27, r19
    78a6:	c0 01       	movw	r24, r0
    78a8:	a3 9f       	mul	r26, r19
    78aa:	70 0d       	add	r23, r0
    78ac:	81 1d       	adc	r24, r1
    78ae:	11 24       	eor	r1, r1
    78b0:	91 1d       	adc	r25, r1
    78b2:	b2 9f       	mul	r27, r18
    78b4:	70 0d       	add	r23, r0
    78b6:	81 1d       	adc	r24, r1
    78b8:	11 24       	eor	r1, r1
    78ba:	91 1d       	adc	r25, r1
    78bc:	08 95       	ret

000078be <__muluhisi3>:
    78be:	f0 df       	rcall	.-32     	; 0x78a0 <__umulhisi3>
    78c0:	a5 9f       	mul	r26, r21
    78c2:	90 0d       	add	r25, r0
    78c4:	b4 9f       	mul	r27, r20
    78c6:	90 0d       	add	r25, r0
    78c8:	a4 9f       	mul	r26, r20
    78ca:	80 0d       	add	r24, r0
    78cc:	91 1d       	adc	r25, r1
    78ce:	11 24       	eor	r1, r1
    78d0:	08 95       	ret

000078d2 <strtoul>:
    78d2:	2f 92       	push	r2
    78d4:	3f 92       	push	r3
    78d6:	5f 92       	push	r5
    78d8:	6f 92       	push	r6
    78da:	7f 92       	push	r7
    78dc:	8f 92       	push	r8
    78de:	9f 92       	push	r9
    78e0:	af 92       	push	r10
    78e2:	bf 92       	push	r11
    78e4:	cf 92       	push	r12
    78e6:	df 92       	push	r13
    78e8:	ef 92       	push	r14
    78ea:	ff 92       	push	r15
    78ec:	0f 93       	push	r16
    78ee:	1f 93       	push	r17
    78f0:	cf 93       	push	r28
    78f2:	df 93       	push	r29
    78f4:	8b 01       	movw	r16, r22
    78f6:	ea 01       	movw	r28, r20
    78f8:	61 15       	cp	r22, r1
    78fa:	71 05       	cpc	r23, r1
    78fc:	21 f0       	breq	.+8      	; 0x7906 <strtoul+0x34>
    78fe:	db 01       	movw	r26, r22
    7900:	8c 93       	st	X, r24
    7902:	11 96       	adiw	r26, 0x01	; 1
    7904:	9c 93       	st	X, r25
    7906:	20 97       	sbiw	r28, 0x00	; 0
    7908:	39 f0       	breq	.+14     	; 0x7918 <strtoul+0x46>
    790a:	9e 01       	movw	r18, r28
    790c:	22 50       	subi	r18, 0x02	; 2
    790e:	31 09       	sbc	r19, r1
    7910:	23 32       	cpi	r18, 0x23	; 35
    7912:	31 05       	cpc	r19, r1
    7914:	08 f0       	brcs	.+2      	; 0x7918 <strtoul+0x46>
    7916:	d5 c0       	rjmp	.+426    	; 0x7ac2 <strtoul+0x1f0>
    7918:	7c 01       	movw	r14, r24
    791a:	67 01       	movw	r12, r14
    791c:	bf ef       	ldi	r27, 0xFF	; 255
    791e:	cb 1a       	sub	r12, r27
    7920:	db 0a       	sbc	r13, r27
    7922:	56 01       	movw	r10, r12
    7924:	f7 01       	movw	r30, r14
    7926:	60 80       	ld	r6, Z
    7928:	86 2d       	mov	r24, r6
    792a:	90 e0       	ldi	r25, 0x00	; 0
    792c:	d8 d1       	rcall	.+944    	; 0x7cde <isspace>
    792e:	89 2b       	or	r24, r25
    7930:	11 f0       	breq	.+4      	; 0x7936 <strtoul+0x64>
    7932:	76 01       	movw	r14, r12
    7934:	f2 cf       	rjmp	.-28     	; 0x791a <strtoul+0x48>
    7936:	fd e2       	ldi	r31, 0x2D	; 45
    7938:	6f 12       	cpse	r6, r31
    793a:	0a c0       	rjmp	.+20     	; 0x7950 <strtoul+0x7e>
    793c:	57 01       	movw	r10, r14
    793e:	82 e0       	ldi	r24, 0x02	; 2
    7940:	a8 0e       	add	r10, r24
    7942:	b1 1c       	adc	r11, r1
    7944:	d7 01       	movw	r26, r14
    7946:	11 96       	adiw	r26, 0x01	; 1
    7948:	6c 90       	ld	r6, X
    794a:	77 24       	eor	r7, r7
    794c:	73 94       	inc	r7
    794e:	0b c0       	rjmp	.+22     	; 0x7966 <strtoul+0x94>
    7950:	bb e2       	ldi	r27, 0x2B	; 43
    7952:	6b 12       	cpse	r6, r27
    7954:	07 c0       	rjmp	.+14     	; 0x7964 <strtoul+0x92>
    7956:	57 01       	movw	r10, r14
    7958:	e2 e0       	ldi	r30, 0x02	; 2
    795a:	ae 0e       	add	r10, r30
    795c:	b1 1c       	adc	r11, r1
    795e:	d7 01       	movw	r26, r14
    7960:	11 96       	adiw	r26, 0x01	; 1
    7962:	6c 90       	ld	r6, X
    7964:	71 2c       	mov	r7, r1
    7966:	ce 01       	movw	r24, r28
    7968:	8f 7e       	andi	r24, 0xEF	; 239
    796a:	89 2b       	or	r24, r25
    796c:	89 f4       	brne	.+34     	; 0x7990 <strtoul+0xbe>
    796e:	b0 e3       	ldi	r27, 0x30	; 48
    7970:	6b 12       	cpse	r6, r27
    7972:	36 c0       	rjmp	.+108    	; 0x79e0 <strtoul+0x10e>
    7974:	f5 01       	movw	r30, r10
    7976:	80 81       	ld	r24, Z
    7978:	8f 7d       	andi	r24, 0xDF	; 223
    797a:	88 35       	cpi	r24, 0x58	; 88
    797c:	d1 f4       	brne	.+52     	; 0x79b2 <strtoul+0xe0>
    797e:	61 80       	ldd	r6, Z+1	; 0x01
    7980:	f2 e0       	ldi	r31, 0x02	; 2
    7982:	af 0e       	add	r10, r31
    7984:	b1 1c       	adc	r11, r1
    7986:	87 2d       	mov	r24, r7
    7988:	82 60       	ori	r24, 0x02	; 2
    798a:	78 2e       	mov	r7, r24
    798c:	c0 e1       	ldi	r28, 0x10	; 16
    798e:	d0 e0       	ldi	r29, 0x00	; 0
    7990:	ca 30       	cpi	r28, 0x0A	; 10
    7992:	d1 05       	cpc	r29, r1
    7994:	49 f1       	breq	.+82     	; 0x79e8 <strtoul+0x116>
    7996:	c0 31       	cpi	r28, 0x10	; 16
    7998:	d1 05       	cpc	r29, r1
    799a:	21 f0       	breq	.+8      	; 0x79a4 <strtoul+0xd2>
    799c:	c8 30       	cpi	r28, 0x08	; 8
    799e:	d1 05       	cpc	r29, r1
    79a0:	99 f4       	brne	.+38     	; 0x79c8 <strtoul+0xf6>
    79a2:	09 c0       	rjmp	.+18     	; 0x79b6 <strtoul+0xe4>
    79a4:	cc 24       	eor	r12, r12
    79a6:	ca 94       	dec	r12
    79a8:	dc 2c       	mov	r13, r12
    79aa:	ec 2c       	mov	r14, r12
    79ac:	af e0       	ldi	r26, 0x0F	; 15
    79ae:	fa 2e       	mov	r15, r26
    79b0:	21 c0       	rjmp	.+66     	; 0x79f4 <strtoul+0x122>
    79b2:	20 97       	sbiw	r28, 0x00	; 0
    79b4:	69 f7       	brne	.-38     	; 0x7990 <strtoul+0xbe>
    79b6:	c8 e0       	ldi	r28, 0x08	; 8
    79b8:	d0 e0       	ldi	r29, 0x00	; 0
    79ba:	cc 24       	eor	r12, r12
    79bc:	ca 94       	dec	r12
    79be:	dc 2c       	mov	r13, r12
    79c0:	ec 2c       	mov	r14, r12
    79c2:	ff e1       	ldi	r31, 0x1F	; 31
    79c4:	ff 2e       	mov	r15, r31
    79c6:	16 c0       	rjmp	.+44     	; 0x79f4 <strtoul+0x122>
    79c8:	6f ef       	ldi	r22, 0xFF	; 255
    79ca:	7f ef       	ldi	r23, 0xFF	; 255
    79cc:	cb 01       	movw	r24, r22
    79ce:	9e 01       	movw	r18, r28
    79d0:	44 27       	eor	r20, r20
    79d2:	37 fd       	sbrc	r19, 7
    79d4:	40 95       	com	r20
    79d6:	54 2f       	mov	r21, r20
    79d8:	3b df       	rcall	.-394    	; 0x7850 <__udivmodsi4>
    79da:	69 01       	movw	r12, r18
    79dc:	7a 01       	movw	r14, r20
    79de:	0a c0       	rjmp	.+20     	; 0x79f4 <strtoul+0x122>
    79e0:	20 97       	sbiw	r28, 0x00	; 0
    79e2:	b1 f6       	brne	.-84     	; 0x7990 <strtoul+0xbe>
    79e4:	ca e0       	ldi	r28, 0x0A	; 10
    79e6:	d0 e0       	ldi	r29, 0x00	; 0
    79e8:	e9 e9       	ldi	r30, 0x99	; 153
    79ea:	ce 2e       	mov	r12, r30
    79ec:	dc 2c       	mov	r13, r12
    79ee:	ec 2c       	mov	r14, r12
    79f0:	e9 e1       	ldi	r30, 0x19	; 25
    79f2:	fe 2e       	mov	r15, r30
    79f4:	f5 01       	movw	r30, r10
    79f6:	60 e0       	ldi	r22, 0x00	; 0
    79f8:	20 e0       	ldi	r18, 0x00	; 0
    79fa:	30 e0       	ldi	r19, 0x00	; 0
    79fc:	a9 01       	movw	r20, r18
    79fe:	4e 01       	movw	r8, r28
    7a00:	aa 24       	eor	r10, r10
    7a02:	97 fc       	sbrc	r9, 7
    7a04:	a0 94       	com	r10
    7a06:	ba 2c       	mov	r11, r10
    7a08:	1f 01       	movw	r2, r30
    7a0a:	70 ed       	ldi	r23, 0xD0	; 208
    7a0c:	57 2e       	mov	r5, r23
    7a0e:	56 0c       	add	r5, r6
    7a10:	a9 e0       	ldi	r26, 0x09	; 9
    7a12:	a5 15       	cp	r26, r5
    7a14:	70 f4       	brcc	.+28     	; 0x7a32 <strtoul+0x160>
    7a16:	8f eb       	ldi	r24, 0xBF	; 191
    7a18:	86 0d       	add	r24, r6
    7a1a:	8a 31       	cpi	r24, 0x1A	; 26
    7a1c:	18 f4       	brcc	.+6      	; 0x7a24 <strtoul+0x152>
    7a1e:	99 ec       	ldi	r25, 0xC9	; 201
    7a20:	59 2e       	mov	r5, r25
    7a22:	06 c0       	rjmp	.+12     	; 0x7a30 <strtoul+0x15e>
    7a24:	8f e9       	ldi	r24, 0x9F	; 159
    7a26:	86 0d       	add	r24, r6
    7a28:	8a 31       	cpi	r24, 0x1A	; 26
    7a2a:	40 f5       	brcc	.+80     	; 0x7a7c <strtoul+0x1aa>
    7a2c:	89 ea       	ldi	r24, 0xA9	; 169
    7a2e:	58 2e       	mov	r5, r24
    7a30:	56 0c       	add	r5, r6
    7a32:	85 2d       	mov	r24, r5
    7a34:	90 e0       	ldi	r25, 0x00	; 0
    7a36:	8c 17       	cp	r24, r28
    7a38:	9d 07       	cpc	r25, r29
    7a3a:	04 f5       	brge	.+64     	; 0x7a7c <strtoul+0x1aa>
    7a3c:	6f 3f       	cpi	r22, 0xFF	; 255
    7a3e:	d1 f0       	breq	.+52     	; 0x7a74 <strtoul+0x1a2>
    7a40:	c2 16       	cp	r12, r18
    7a42:	d3 06       	cpc	r13, r19
    7a44:	e4 06       	cpc	r14, r20
    7a46:	f5 06       	cpc	r15, r21
    7a48:	90 f0       	brcs	.+36     	; 0x7a6e <strtoul+0x19c>
    7a4a:	c5 01       	movw	r24, r10
    7a4c:	b4 01       	movw	r22, r8
    7a4e:	9f d2       	rcall	.+1342   	; 0x7f8e <__mulsi3>
    7a50:	9b 01       	movw	r18, r22
    7a52:	ac 01       	movw	r20, r24
    7a54:	85 2d       	mov	r24, r5
    7a56:	90 e0       	ldi	r25, 0x00	; 0
    7a58:	a0 e0       	ldi	r26, 0x00	; 0
    7a5a:	b0 e0       	ldi	r27, 0x00	; 0
    7a5c:	28 0f       	add	r18, r24
    7a5e:	39 1f       	adc	r19, r25
    7a60:	4a 1f       	adc	r20, r26
    7a62:	5b 1f       	adc	r21, r27
    7a64:	28 17       	cp	r18, r24
    7a66:	39 07       	cpc	r19, r25
    7a68:	4a 07       	cpc	r20, r26
    7a6a:	5b 07       	cpc	r21, r27
    7a6c:	10 f4       	brcc	.+4      	; 0x7a72 <strtoul+0x1a0>
    7a6e:	6f ef       	ldi	r22, 0xFF	; 255
    7a70:	01 c0       	rjmp	.+2      	; 0x7a74 <strtoul+0x1a2>
    7a72:	61 e0       	ldi	r22, 0x01	; 1
    7a74:	31 96       	adiw	r30, 0x01	; 1
    7a76:	d1 01       	movw	r26, r2
    7a78:	6c 90       	ld	r6, X
    7a7a:	c6 cf       	rjmp	.-116    	; 0x7a08 <strtoul+0x136>
    7a7c:	01 15       	cp	r16, r1
    7a7e:	11 05       	cpc	r17, r1
    7a80:	51 f0       	breq	.+20     	; 0x7a96 <strtoul+0x1c4>
    7a82:	66 23       	and	r22, r22
    7a84:	11 f0       	breq	.+4      	; 0x7a8a <strtoul+0x1b8>
    7a86:	31 97       	sbiw	r30, 0x01	; 1
    7a88:	03 c0       	rjmp	.+6      	; 0x7a90 <strtoul+0x1be>
    7a8a:	71 fe       	sbrs	r7, 1
    7a8c:	04 c0       	rjmp	.+8      	; 0x7a96 <strtoul+0x1c4>
    7a8e:	32 97       	sbiw	r30, 0x02	; 2
    7a90:	d8 01       	movw	r26, r16
    7a92:	ed 93       	st	X+, r30
    7a94:	fc 93       	st	X, r31
    7a96:	70 fe       	sbrs	r7, 0
    7a98:	07 c0       	rjmp	.+14     	; 0x7aa8 <strtoul+0x1d6>
    7a9a:	50 95       	com	r21
    7a9c:	40 95       	com	r20
    7a9e:	30 95       	com	r19
    7aa0:	21 95       	neg	r18
    7aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    7aa4:	4f 4f       	sbci	r20, 0xFF	; 255
    7aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    7aa8:	67 ff       	sbrs	r22, 7
    7aaa:	10 c0       	rjmp	.+32     	; 0x7acc <strtoul+0x1fa>
    7aac:	82 e2       	ldi	r24, 0x22	; 34
    7aae:	90 e0       	ldi	r25, 0x00	; 0
    7ab0:	80 93 c6 2e 	sts	0x2EC6, r24
    7ab4:	90 93 c7 2e 	sts	0x2EC7, r25
    7ab8:	6f ef       	ldi	r22, 0xFF	; 255
    7aba:	7f ef       	ldi	r23, 0xFF	; 255
    7abc:	8f ef       	ldi	r24, 0xFF	; 255
    7abe:	9f ef       	ldi	r25, 0xFF	; 255
    7ac0:	07 c0       	rjmp	.+14     	; 0x7ad0 <strtoul+0x1fe>
    7ac2:	60 e0       	ldi	r22, 0x00	; 0
    7ac4:	70 e0       	ldi	r23, 0x00	; 0
    7ac6:	80 e0       	ldi	r24, 0x00	; 0
    7ac8:	90 e0       	ldi	r25, 0x00	; 0
    7aca:	02 c0       	rjmp	.+4      	; 0x7ad0 <strtoul+0x1fe>
    7acc:	b9 01       	movw	r22, r18
    7ace:	ca 01       	movw	r24, r20
    7ad0:	df 91       	pop	r29
    7ad2:	cf 91       	pop	r28
    7ad4:	1f 91       	pop	r17
    7ad6:	0f 91       	pop	r16
    7ad8:	ff 90       	pop	r15
    7ada:	ef 90       	pop	r14
    7adc:	df 90       	pop	r13
    7ade:	cf 90       	pop	r12
    7ae0:	bf 90       	pop	r11
    7ae2:	af 90       	pop	r10
    7ae4:	9f 90       	pop	r9
    7ae6:	8f 90       	pop	r8
    7ae8:	7f 90       	pop	r7
    7aea:	6f 90       	pop	r6
    7aec:	5f 90       	pop	r5
    7aee:	3f 90       	pop	r3
    7af0:	2f 90       	pop	r2
    7af2:	08 95       	ret

00007af4 <atoi>:
    7af4:	fc 01       	movw	r30, r24
    7af6:	88 27       	eor	r24, r24
    7af8:	99 27       	eor	r25, r25
    7afa:	e8 94       	clt
    7afc:	21 91       	ld	r18, Z+
    7afe:	20 32       	cpi	r18, 0x20	; 32
    7b00:	e9 f3       	breq	.-6      	; 0x7afc <atoi+0x8>
    7b02:	29 30       	cpi	r18, 0x09	; 9
    7b04:	10 f0       	brcs	.+4      	; 0x7b0a <atoi+0x16>
    7b06:	2e 30       	cpi	r18, 0x0E	; 14
    7b08:	c8 f3       	brcs	.-14     	; 0x7afc <atoi+0x8>
    7b0a:	2b 32       	cpi	r18, 0x2B	; 43
    7b0c:	39 f0       	breq	.+14     	; 0x7b1c <atoi+0x28>
    7b0e:	2d 32       	cpi	r18, 0x2D	; 45
    7b10:	31 f4       	brne	.+12     	; 0x7b1e <atoi+0x2a>
    7b12:	68 94       	set
    7b14:	03 c0       	rjmp	.+6      	; 0x7b1c <atoi+0x28>
    7b16:	62 d1       	rcall	.+708    	; 0x7ddc <__mulhi_const_10>
    7b18:	82 0f       	add	r24, r18
    7b1a:	91 1d       	adc	r25, r1
    7b1c:	21 91       	ld	r18, Z+
    7b1e:	20 53       	subi	r18, 0x30	; 48
    7b20:	2a 30       	cpi	r18, 0x0A	; 10
    7b22:	c8 f3       	brcs	.-14     	; 0x7b16 <atoi+0x22>
    7b24:	1e f4       	brtc	.+6      	; 0x7b2c <atoi+0x38>
    7b26:	90 95       	com	r25
    7b28:	81 95       	neg	r24
    7b2a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b2c:	08 95       	ret

00007b2e <__ftoa_engine>:
    7b2e:	28 30       	cpi	r18, 0x08	; 8
    7b30:	08 f0       	brcs	.+2      	; 0x7b34 <__ftoa_engine+0x6>
    7b32:	27 e0       	ldi	r18, 0x07	; 7
    7b34:	33 27       	eor	r19, r19
    7b36:	da 01       	movw	r26, r20
    7b38:	99 0f       	add	r25, r25
    7b3a:	31 1d       	adc	r19, r1
    7b3c:	87 fd       	sbrc	r24, 7
    7b3e:	91 60       	ori	r25, 0x01	; 1
    7b40:	00 96       	adiw	r24, 0x00	; 0
    7b42:	61 05       	cpc	r22, r1
    7b44:	71 05       	cpc	r23, r1
    7b46:	39 f4       	brne	.+14     	; 0x7b56 <__ftoa_engine+0x28>
    7b48:	32 60       	ori	r19, 0x02	; 2
    7b4a:	2e 5f       	subi	r18, 0xFE	; 254
    7b4c:	3d 93       	st	X+, r19
    7b4e:	30 e3       	ldi	r19, 0x30	; 48
    7b50:	2a 95       	dec	r18
    7b52:	e1 f7       	brne	.-8      	; 0x7b4c <__ftoa_engine+0x1e>
    7b54:	08 95       	ret
    7b56:	9f 3f       	cpi	r25, 0xFF	; 255
    7b58:	30 f0       	brcs	.+12     	; 0x7b66 <__ftoa_engine+0x38>
    7b5a:	80 38       	cpi	r24, 0x80	; 128
    7b5c:	71 05       	cpc	r23, r1
    7b5e:	61 05       	cpc	r22, r1
    7b60:	09 f0       	breq	.+2      	; 0x7b64 <__ftoa_engine+0x36>
    7b62:	3c 5f       	subi	r19, 0xFC	; 252
    7b64:	3c 5f       	subi	r19, 0xFC	; 252
    7b66:	3d 93       	st	X+, r19
    7b68:	91 30       	cpi	r25, 0x01	; 1
    7b6a:	08 f0       	brcs	.+2      	; 0x7b6e <__ftoa_engine+0x40>
    7b6c:	80 68       	ori	r24, 0x80	; 128
    7b6e:	91 1d       	adc	r25, r1
    7b70:	df 93       	push	r29
    7b72:	cf 93       	push	r28
    7b74:	1f 93       	push	r17
    7b76:	0f 93       	push	r16
    7b78:	ff 92       	push	r15
    7b7a:	ef 92       	push	r14
    7b7c:	19 2f       	mov	r17, r25
    7b7e:	98 7f       	andi	r25, 0xF8	; 248
    7b80:	96 95       	lsr	r25
    7b82:	e9 2f       	mov	r30, r25
    7b84:	96 95       	lsr	r25
    7b86:	96 95       	lsr	r25
    7b88:	e9 0f       	add	r30, r25
    7b8a:	ff 27       	eor	r31, r31
    7b8c:	e8 55       	subi	r30, 0x58	; 88
    7b8e:	fc 4f       	sbci	r31, 0xFC	; 252
    7b90:	99 27       	eor	r25, r25
    7b92:	33 27       	eor	r19, r19
    7b94:	ee 24       	eor	r14, r14
    7b96:	ff 24       	eor	r15, r15
    7b98:	a7 01       	movw	r20, r14
    7b9a:	e7 01       	movw	r28, r14
    7b9c:	05 90       	lpm	r0, Z+
    7b9e:	08 94       	sec
    7ba0:	07 94       	ror	r0
    7ba2:	28 f4       	brcc	.+10     	; 0x7bae <__ftoa_engine+0x80>
    7ba4:	36 0f       	add	r19, r22
    7ba6:	e7 1e       	adc	r14, r23
    7ba8:	f8 1e       	adc	r15, r24
    7baa:	49 1f       	adc	r20, r25
    7bac:	51 1d       	adc	r21, r1
    7bae:	66 0f       	add	r22, r22
    7bb0:	77 1f       	adc	r23, r23
    7bb2:	88 1f       	adc	r24, r24
    7bb4:	99 1f       	adc	r25, r25
    7bb6:	06 94       	lsr	r0
    7bb8:	a1 f7       	brne	.-24     	; 0x7ba2 <__ftoa_engine+0x74>
    7bba:	05 90       	lpm	r0, Z+
    7bbc:	07 94       	ror	r0
    7bbe:	28 f4       	brcc	.+10     	; 0x7bca <__ftoa_engine+0x9c>
    7bc0:	e7 0e       	add	r14, r23
    7bc2:	f8 1e       	adc	r15, r24
    7bc4:	49 1f       	adc	r20, r25
    7bc6:	56 1f       	adc	r21, r22
    7bc8:	c1 1d       	adc	r28, r1
    7bca:	77 0f       	add	r23, r23
    7bcc:	88 1f       	adc	r24, r24
    7bce:	99 1f       	adc	r25, r25
    7bd0:	66 1f       	adc	r22, r22
    7bd2:	06 94       	lsr	r0
    7bd4:	a1 f7       	brne	.-24     	; 0x7bbe <__ftoa_engine+0x90>
    7bd6:	05 90       	lpm	r0, Z+
    7bd8:	07 94       	ror	r0
    7bda:	28 f4       	brcc	.+10     	; 0x7be6 <__ftoa_engine+0xb8>
    7bdc:	f8 0e       	add	r15, r24
    7bde:	49 1f       	adc	r20, r25
    7be0:	56 1f       	adc	r21, r22
    7be2:	c7 1f       	adc	r28, r23
    7be4:	d1 1d       	adc	r29, r1
    7be6:	88 0f       	add	r24, r24
    7be8:	99 1f       	adc	r25, r25
    7bea:	66 1f       	adc	r22, r22
    7bec:	77 1f       	adc	r23, r23
    7bee:	06 94       	lsr	r0
    7bf0:	a1 f7       	brne	.-24     	; 0x7bda <__ftoa_engine+0xac>
    7bf2:	05 90       	lpm	r0, Z+
    7bf4:	07 94       	ror	r0
    7bf6:	20 f4       	brcc	.+8      	; 0x7c00 <__ftoa_engine+0xd2>
    7bf8:	49 0f       	add	r20, r25
    7bfa:	56 1f       	adc	r21, r22
    7bfc:	c7 1f       	adc	r28, r23
    7bfe:	d8 1f       	adc	r29, r24
    7c00:	99 0f       	add	r25, r25
    7c02:	66 1f       	adc	r22, r22
    7c04:	77 1f       	adc	r23, r23
    7c06:	88 1f       	adc	r24, r24
    7c08:	06 94       	lsr	r0
    7c0a:	a9 f7       	brne	.-22     	; 0x7bf6 <__ftoa_engine+0xc8>
    7c0c:	84 91       	lpm	r24, Z
    7c0e:	10 95       	com	r17
    7c10:	17 70       	andi	r17, 0x07	; 7
    7c12:	41 f0       	breq	.+16     	; 0x7c24 <__ftoa_engine+0xf6>
    7c14:	d6 95       	lsr	r29
    7c16:	c7 95       	ror	r28
    7c18:	57 95       	ror	r21
    7c1a:	47 95       	ror	r20
    7c1c:	f7 94       	ror	r15
    7c1e:	e7 94       	ror	r14
    7c20:	1a 95       	dec	r17
    7c22:	c1 f7       	brne	.-16     	; 0x7c14 <__ftoa_engine+0xe6>
    7c24:	ee e4       	ldi	r30, 0x4E	; 78
    7c26:	f3 e0       	ldi	r31, 0x03	; 3
    7c28:	68 94       	set
    7c2a:	15 90       	lpm	r1, Z+
    7c2c:	15 91       	lpm	r17, Z+
    7c2e:	35 91       	lpm	r19, Z+
    7c30:	65 91       	lpm	r22, Z+
    7c32:	95 91       	lpm	r25, Z+
    7c34:	05 90       	lpm	r0, Z+
    7c36:	7f e2       	ldi	r23, 0x2F	; 47
    7c38:	73 95       	inc	r23
    7c3a:	e1 18       	sub	r14, r1
    7c3c:	f1 0a       	sbc	r15, r17
    7c3e:	43 0b       	sbc	r20, r19
    7c40:	56 0b       	sbc	r21, r22
    7c42:	c9 0b       	sbc	r28, r25
    7c44:	d0 09       	sbc	r29, r0
    7c46:	c0 f7       	brcc	.-16     	; 0x7c38 <__ftoa_engine+0x10a>
    7c48:	e1 0c       	add	r14, r1
    7c4a:	f1 1e       	adc	r15, r17
    7c4c:	43 1f       	adc	r20, r19
    7c4e:	56 1f       	adc	r21, r22
    7c50:	c9 1f       	adc	r28, r25
    7c52:	d0 1d       	adc	r29, r0
    7c54:	7e f4       	brtc	.+30     	; 0x7c74 <__ftoa_engine+0x146>
    7c56:	70 33       	cpi	r23, 0x30	; 48
    7c58:	11 f4       	brne	.+4      	; 0x7c5e <__ftoa_engine+0x130>
    7c5a:	8a 95       	dec	r24
    7c5c:	e6 cf       	rjmp	.-52     	; 0x7c2a <__ftoa_engine+0xfc>
    7c5e:	e8 94       	clt
    7c60:	01 50       	subi	r16, 0x01	; 1
    7c62:	30 f0       	brcs	.+12     	; 0x7c70 <__ftoa_engine+0x142>
    7c64:	08 0f       	add	r16, r24
    7c66:	0a f4       	brpl	.+2      	; 0x7c6a <__ftoa_engine+0x13c>
    7c68:	00 27       	eor	r16, r16
    7c6a:	02 17       	cp	r16, r18
    7c6c:	08 f4       	brcc	.+2      	; 0x7c70 <__ftoa_engine+0x142>
    7c6e:	20 2f       	mov	r18, r16
    7c70:	23 95       	inc	r18
    7c72:	02 2f       	mov	r16, r18
    7c74:	7a 33       	cpi	r23, 0x3A	; 58
    7c76:	28 f0       	brcs	.+10     	; 0x7c82 <__ftoa_engine+0x154>
    7c78:	79 e3       	ldi	r23, 0x39	; 57
    7c7a:	7d 93       	st	X+, r23
    7c7c:	2a 95       	dec	r18
    7c7e:	e9 f7       	brne	.-6      	; 0x7c7a <__ftoa_engine+0x14c>
    7c80:	10 c0       	rjmp	.+32     	; 0x7ca2 <__ftoa_engine+0x174>
    7c82:	7d 93       	st	X+, r23
    7c84:	2a 95       	dec	r18
    7c86:	89 f6       	brne	.-94     	; 0x7c2a <__ftoa_engine+0xfc>
    7c88:	06 94       	lsr	r0
    7c8a:	97 95       	ror	r25
    7c8c:	67 95       	ror	r22
    7c8e:	37 95       	ror	r19
    7c90:	17 95       	ror	r17
    7c92:	17 94       	ror	r1
    7c94:	e1 18       	sub	r14, r1
    7c96:	f1 0a       	sbc	r15, r17
    7c98:	43 0b       	sbc	r20, r19
    7c9a:	56 0b       	sbc	r21, r22
    7c9c:	c9 0b       	sbc	r28, r25
    7c9e:	d0 09       	sbc	r29, r0
    7ca0:	98 f0       	brcs	.+38     	; 0x7cc8 <__ftoa_engine+0x19a>
    7ca2:	23 95       	inc	r18
    7ca4:	7e 91       	ld	r23, -X
    7ca6:	73 95       	inc	r23
    7ca8:	7a 33       	cpi	r23, 0x3A	; 58
    7caa:	08 f0       	brcs	.+2      	; 0x7cae <__ftoa_engine+0x180>
    7cac:	70 e3       	ldi	r23, 0x30	; 48
    7cae:	7c 93       	st	X, r23
    7cb0:	20 13       	cpse	r18, r16
    7cb2:	b8 f7       	brcc	.-18     	; 0x7ca2 <__ftoa_engine+0x174>
    7cb4:	7e 91       	ld	r23, -X
    7cb6:	70 61       	ori	r23, 0x10	; 16
    7cb8:	7d 93       	st	X+, r23
    7cba:	30 f0       	brcs	.+12     	; 0x7cc8 <__ftoa_engine+0x19a>
    7cbc:	83 95       	inc	r24
    7cbe:	71 e3       	ldi	r23, 0x31	; 49
    7cc0:	7d 93       	st	X+, r23
    7cc2:	70 e3       	ldi	r23, 0x30	; 48
    7cc4:	2a 95       	dec	r18
    7cc6:	e1 f7       	brne	.-8      	; 0x7cc0 <__ftoa_engine+0x192>
    7cc8:	11 24       	eor	r1, r1
    7cca:	ef 90       	pop	r14
    7ccc:	ff 90       	pop	r15
    7cce:	0f 91       	pop	r16
    7cd0:	1f 91       	pop	r17
    7cd2:	cf 91       	pop	r28
    7cd4:	df 91       	pop	r29
    7cd6:	99 27       	eor	r25, r25
    7cd8:	87 fd       	sbrc	r24, 7
    7cda:	90 95       	com	r25
    7cdc:	08 95       	ret

00007cde <isspace>:
    7cde:	91 11       	cpse	r25, r1
    7ce0:	53 c1       	rjmp	.+678    	; 0x7f88 <__ctype_isfalse>
    7ce2:	80 32       	cpi	r24, 0x20	; 32
    7ce4:	19 f0       	breq	.+6      	; 0x7cec <isspace+0xe>
    7ce6:	89 50       	subi	r24, 0x09	; 9
    7ce8:	85 50       	subi	r24, 0x05	; 5
    7cea:	d0 f7       	brcc	.-12     	; 0x7ce0 <isspace+0x2>
    7cec:	08 95       	ret

00007cee <strnlen_P>:
    7cee:	fc 01       	movw	r30, r24
    7cf0:	05 90       	lpm	r0, Z+
    7cf2:	61 50       	subi	r22, 0x01	; 1
    7cf4:	70 40       	sbci	r23, 0x00	; 0
    7cf6:	01 10       	cpse	r0, r1
    7cf8:	d8 f7       	brcc	.-10     	; 0x7cf0 <strnlen_P+0x2>
    7cfa:	80 95       	com	r24
    7cfc:	90 95       	com	r25
    7cfe:	8e 0f       	add	r24, r30
    7d00:	9f 1f       	adc	r25, r31
    7d02:	08 95       	ret

00007d04 <strtok>:
    7d04:	42 ed       	ldi	r20, 0xD2	; 210
    7d06:	59 e2       	ldi	r21, 0x29	; 41
    7d08:	42 c0       	rjmp	.+132    	; 0x7d8e <strtok_r>

00007d0a <memcpy>:
    7d0a:	fb 01       	movw	r30, r22
    7d0c:	dc 01       	movw	r26, r24
    7d0e:	02 c0       	rjmp	.+4      	; 0x7d14 <memcpy+0xa>
    7d10:	01 90       	ld	r0, Z+
    7d12:	0d 92       	st	X+, r0
    7d14:	41 50       	subi	r20, 0x01	; 1
    7d16:	50 40       	sbci	r21, 0x00	; 0
    7d18:	d8 f7       	brcc	.-10     	; 0x7d10 <memcpy+0x6>
    7d1a:	08 95       	ret

00007d1c <strcmp>:
    7d1c:	fb 01       	movw	r30, r22
    7d1e:	dc 01       	movw	r26, r24
    7d20:	8d 91       	ld	r24, X+
    7d22:	01 90       	ld	r0, Z+
    7d24:	80 19       	sub	r24, r0
    7d26:	01 10       	cpse	r0, r1
    7d28:	d9 f3       	breq	.-10     	; 0x7d20 <strcmp+0x4>
    7d2a:	99 0b       	sbc	r25, r25
    7d2c:	08 95       	ret

00007d2e <strcpy>:
    7d2e:	fb 01       	movw	r30, r22
    7d30:	dc 01       	movw	r26, r24
    7d32:	01 90       	ld	r0, Z+
    7d34:	0d 92       	st	X+, r0
    7d36:	00 20       	and	r0, r0
    7d38:	e1 f7       	brne	.-8      	; 0x7d32 <strcpy+0x4>
    7d3a:	08 95       	ret

00007d3c <strcspn>:
    7d3c:	dc 01       	movw	r26, r24
    7d3e:	5d 91       	ld	r21, X+
    7d40:	55 23       	and	r21, r21
    7d42:	31 f0       	breq	.+12     	; 0x7d50 <strcspn+0x14>
    7d44:	fb 01       	movw	r30, r22
    7d46:	01 90       	ld	r0, Z+
    7d48:	05 16       	cp	r0, r21
    7d4a:	01 10       	cpse	r0, r1
    7d4c:	e1 f7       	brne	.-8      	; 0x7d46 <strcspn+0xa>
    7d4e:	b9 f7       	brne	.-18     	; 0x7d3e <strcspn+0x2>
    7d50:	80 95       	com	r24
    7d52:	90 95       	com	r25
    7d54:	8a 0f       	add	r24, r26
    7d56:	9b 1f       	adc	r25, r27
    7d58:	08 95       	ret

00007d5a <strncpy>:
    7d5a:	fb 01       	movw	r30, r22
    7d5c:	dc 01       	movw	r26, r24
    7d5e:	41 50       	subi	r20, 0x01	; 1
    7d60:	50 40       	sbci	r21, 0x00	; 0
    7d62:	48 f0       	brcs	.+18     	; 0x7d76 <strncpy+0x1c>
    7d64:	01 90       	ld	r0, Z+
    7d66:	0d 92       	st	X+, r0
    7d68:	00 20       	and	r0, r0
    7d6a:	c9 f7       	brne	.-14     	; 0x7d5e <strncpy+0x4>
    7d6c:	01 c0       	rjmp	.+2      	; 0x7d70 <strncpy+0x16>
    7d6e:	1d 92       	st	X+, r1
    7d70:	41 50       	subi	r20, 0x01	; 1
    7d72:	50 40       	sbci	r21, 0x00	; 0
    7d74:	e0 f7       	brcc	.-8      	; 0x7d6e <strncpy+0x14>
    7d76:	08 95       	ret

00007d78 <strnlen>:
    7d78:	fc 01       	movw	r30, r24
    7d7a:	61 50       	subi	r22, 0x01	; 1
    7d7c:	70 40       	sbci	r23, 0x00	; 0
    7d7e:	01 90       	ld	r0, Z+
    7d80:	01 10       	cpse	r0, r1
    7d82:	d8 f7       	brcc	.-10     	; 0x7d7a <strnlen+0x2>
    7d84:	80 95       	com	r24
    7d86:	90 95       	com	r25
    7d88:	8e 0f       	add	r24, r30
    7d8a:	9f 1f       	adc	r25, r31
    7d8c:	08 95       	ret

00007d8e <strtok_r>:
    7d8e:	fa 01       	movw	r30, r20
    7d90:	a1 91       	ld	r26, Z+
    7d92:	b0 81       	ld	r27, Z
    7d94:	00 97       	sbiw	r24, 0x00	; 0
    7d96:	19 f4       	brne	.+6      	; 0x7d9e <strtok_r+0x10>
    7d98:	10 97       	sbiw	r26, 0x00	; 0
    7d9a:	e1 f0       	breq	.+56     	; 0x7dd4 <strtok_r+0x46>
    7d9c:	cd 01       	movw	r24, r26
    7d9e:	dc 01       	movw	r26, r24
    7da0:	cd 01       	movw	r24, r26
    7da2:	0d 90       	ld	r0, X+
    7da4:	00 20       	and	r0, r0
    7da6:	11 f4       	brne	.+4      	; 0x7dac <strtok_r+0x1e>
    7da8:	c0 01       	movw	r24, r0
    7daa:	13 c0       	rjmp	.+38     	; 0x7dd2 <strtok_r+0x44>
    7dac:	fb 01       	movw	r30, r22
    7dae:	21 91       	ld	r18, Z+
    7db0:	22 23       	and	r18, r18
    7db2:	19 f0       	breq	.+6      	; 0x7dba <strtok_r+0x2c>
    7db4:	20 15       	cp	r18, r0
    7db6:	d9 f7       	brne	.-10     	; 0x7dae <strtok_r+0x20>
    7db8:	f3 cf       	rjmp	.-26     	; 0x7da0 <strtok_r+0x12>
    7dba:	fb 01       	movw	r30, r22
    7dbc:	21 91       	ld	r18, Z+
    7dbe:	20 15       	cp	r18, r0
    7dc0:	19 f4       	brne	.+6      	; 0x7dc8 <strtok_r+0x3a>
    7dc2:	1e 92       	st	-X, r1
    7dc4:	11 96       	adiw	r26, 0x01	; 1
    7dc6:	06 c0       	rjmp	.+12     	; 0x7dd4 <strtok_r+0x46>
    7dc8:	22 23       	and	r18, r18
    7dca:	c1 f7       	brne	.-16     	; 0x7dbc <strtok_r+0x2e>
    7dcc:	0d 90       	ld	r0, X+
    7dce:	00 20       	and	r0, r0
    7dd0:	a1 f7       	brne	.-24     	; 0x7dba <strtok_r+0x2c>
    7dd2:	d0 01       	movw	r26, r0
    7dd4:	fa 01       	movw	r30, r20
    7dd6:	a1 93       	st	Z+, r26
    7dd8:	b0 83       	st	Z, r27
    7dda:	08 95       	ret

00007ddc <__mulhi_const_10>:
    7ddc:	7a e0       	ldi	r23, 0x0A	; 10
    7dde:	97 9f       	mul	r25, r23
    7de0:	90 2d       	mov	r25, r0
    7de2:	87 9f       	mul	r24, r23
    7de4:	80 2d       	mov	r24, r0
    7de6:	91 0d       	add	r25, r1
    7de8:	11 24       	eor	r1, r1
    7dea:	08 95       	ret

00007dec <fputc>:
    7dec:	0f 93       	push	r16
    7dee:	1f 93       	push	r17
    7df0:	cf 93       	push	r28
    7df2:	df 93       	push	r29
    7df4:	18 2f       	mov	r17, r24
    7df6:	09 2f       	mov	r16, r25
    7df8:	eb 01       	movw	r28, r22
    7dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    7dfc:	81 fd       	sbrc	r24, 1
    7dfe:	03 c0       	rjmp	.+6      	; 0x7e06 <fputc+0x1a>
    7e00:	8f ef       	ldi	r24, 0xFF	; 255
    7e02:	9f ef       	ldi	r25, 0xFF	; 255
    7e04:	20 c0       	rjmp	.+64     	; 0x7e46 <fputc+0x5a>
    7e06:	82 ff       	sbrs	r24, 2
    7e08:	10 c0       	rjmp	.+32     	; 0x7e2a <fputc+0x3e>
    7e0a:	4e 81       	ldd	r20, Y+6	; 0x06
    7e0c:	5f 81       	ldd	r21, Y+7	; 0x07
    7e0e:	2c 81       	ldd	r18, Y+4	; 0x04
    7e10:	3d 81       	ldd	r19, Y+5	; 0x05
    7e12:	42 17       	cp	r20, r18
    7e14:	53 07       	cpc	r21, r19
    7e16:	7c f4       	brge	.+30     	; 0x7e36 <fputc+0x4a>
    7e18:	e8 81       	ld	r30, Y
    7e1a:	f9 81       	ldd	r31, Y+1	; 0x01
    7e1c:	9f 01       	movw	r18, r30
    7e1e:	2f 5f       	subi	r18, 0xFF	; 255
    7e20:	3f 4f       	sbci	r19, 0xFF	; 255
    7e22:	28 83       	st	Y, r18
    7e24:	39 83       	std	Y+1, r19	; 0x01
    7e26:	10 83       	st	Z, r17
    7e28:	06 c0       	rjmp	.+12     	; 0x7e36 <fputc+0x4a>
    7e2a:	e8 85       	ldd	r30, Y+8	; 0x08
    7e2c:	f9 85       	ldd	r31, Y+9	; 0x09
    7e2e:	81 2f       	mov	r24, r17
    7e30:	19 95       	eicall
    7e32:	89 2b       	or	r24, r25
    7e34:	29 f7       	brne	.-54     	; 0x7e00 <fputc+0x14>
    7e36:	2e 81       	ldd	r18, Y+6	; 0x06
    7e38:	3f 81       	ldd	r19, Y+7	; 0x07
    7e3a:	2f 5f       	subi	r18, 0xFF	; 255
    7e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7e3e:	2e 83       	std	Y+6, r18	; 0x06
    7e40:	3f 83       	std	Y+7, r19	; 0x07
    7e42:	81 2f       	mov	r24, r17
    7e44:	90 2f       	mov	r25, r16
    7e46:	df 91       	pop	r29
    7e48:	cf 91       	pop	r28
    7e4a:	1f 91       	pop	r17
    7e4c:	0f 91       	pop	r16
    7e4e:	08 95       	ret

00007e50 <printf>:
    7e50:	cf 93       	push	r28
    7e52:	df 93       	push	r29
    7e54:	cd b7       	in	r28, 0x3d	; 61
    7e56:	de b7       	in	r29, 0x3e	; 62
    7e58:	fe 01       	movw	r30, r28
    7e5a:	36 96       	adiw	r30, 0x06	; 6
    7e5c:	61 91       	ld	r22, Z+
    7e5e:	71 91       	ld	r23, Z+
    7e60:	af 01       	movw	r20, r30
    7e62:	80 91 c2 2e 	lds	r24, 0x2EC2
    7e66:	90 91 c3 2e 	lds	r25, 0x2EC3
    7e6a:	4a d9       	rcall	.-3436   	; 0x7100 <vfprintf>
    7e6c:	df 91       	pop	r29
    7e6e:	cf 91       	pop	r28
    7e70:	08 95       	ret

00007e72 <puts>:
    7e72:	0f 93       	push	r16
    7e74:	1f 93       	push	r17
    7e76:	cf 93       	push	r28
    7e78:	df 93       	push	r29
    7e7a:	e0 91 c2 2e 	lds	r30, 0x2EC2
    7e7e:	f0 91 c3 2e 	lds	r31, 0x2EC3
    7e82:	23 81       	ldd	r18, Z+3	; 0x03
    7e84:	21 ff       	sbrs	r18, 1
    7e86:	1b c0       	rjmp	.+54     	; 0x7ebe <puts+0x4c>
    7e88:	ec 01       	movw	r28, r24
    7e8a:	00 e0       	ldi	r16, 0x00	; 0
    7e8c:	10 e0       	ldi	r17, 0x00	; 0
    7e8e:	89 91       	ld	r24, Y+
    7e90:	60 91 c2 2e 	lds	r22, 0x2EC2
    7e94:	70 91 c3 2e 	lds	r23, 0x2EC3
    7e98:	db 01       	movw	r26, r22
    7e9a:	18 96       	adiw	r26, 0x08	; 8
    7e9c:	ed 91       	ld	r30, X+
    7e9e:	fc 91       	ld	r31, X
    7ea0:	19 97       	sbiw	r26, 0x09	; 9
    7ea2:	88 23       	and	r24, r24
    7ea4:	31 f0       	breq	.+12     	; 0x7eb2 <puts+0x40>
    7ea6:	19 95       	eicall
    7ea8:	89 2b       	or	r24, r25
    7eaa:	89 f3       	breq	.-30     	; 0x7e8e <puts+0x1c>
    7eac:	0f ef       	ldi	r16, 0xFF	; 255
    7eae:	1f ef       	ldi	r17, 0xFF	; 255
    7eb0:	ee cf       	rjmp	.-36     	; 0x7e8e <puts+0x1c>
    7eb2:	8a e0       	ldi	r24, 0x0A	; 10
    7eb4:	19 95       	eicall
    7eb6:	89 2b       	or	r24, r25
    7eb8:	11 f4       	brne	.+4      	; 0x7ebe <puts+0x4c>
    7eba:	c8 01       	movw	r24, r16
    7ebc:	02 c0       	rjmp	.+4      	; 0x7ec2 <puts+0x50>
    7ebe:	8f ef       	ldi	r24, 0xFF	; 255
    7ec0:	9f ef       	ldi	r25, 0xFF	; 255
    7ec2:	df 91       	pop	r29
    7ec4:	cf 91       	pop	r28
    7ec6:	1f 91       	pop	r17
    7ec8:	0f 91       	pop	r16
    7eca:	08 95       	ret

00007ecc <__ultoa_invert>:
    7ecc:	fa 01       	movw	r30, r20
    7ece:	aa 27       	eor	r26, r26
    7ed0:	28 30       	cpi	r18, 0x08	; 8
    7ed2:	51 f1       	breq	.+84     	; 0x7f28 <__ultoa_invert+0x5c>
    7ed4:	20 31       	cpi	r18, 0x10	; 16
    7ed6:	81 f1       	breq	.+96     	; 0x7f38 <__ultoa_invert+0x6c>
    7ed8:	e8 94       	clt
    7eda:	6f 93       	push	r22
    7edc:	6e 7f       	andi	r22, 0xFE	; 254
    7ede:	6e 5f       	subi	r22, 0xFE	; 254
    7ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ee2:	8f 4f       	sbci	r24, 0xFF	; 255
    7ee4:	9f 4f       	sbci	r25, 0xFF	; 255
    7ee6:	af 4f       	sbci	r26, 0xFF	; 255
    7ee8:	b1 e0       	ldi	r27, 0x01	; 1
    7eea:	3e d0       	rcall	.+124    	; 0x7f68 <__ultoa_invert+0x9c>
    7eec:	b4 e0       	ldi	r27, 0x04	; 4
    7eee:	3c d0       	rcall	.+120    	; 0x7f68 <__ultoa_invert+0x9c>
    7ef0:	67 0f       	add	r22, r23
    7ef2:	78 1f       	adc	r23, r24
    7ef4:	89 1f       	adc	r24, r25
    7ef6:	9a 1f       	adc	r25, r26
    7ef8:	a1 1d       	adc	r26, r1
    7efa:	68 0f       	add	r22, r24
    7efc:	79 1f       	adc	r23, r25
    7efe:	8a 1f       	adc	r24, r26
    7f00:	91 1d       	adc	r25, r1
    7f02:	a1 1d       	adc	r26, r1
    7f04:	6a 0f       	add	r22, r26
    7f06:	71 1d       	adc	r23, r1
    7f08:	81 1d       	adc	r24, r1
    7f0a:	91 1d       	adc	r25, r1
    7f0c:	a1 1d       	adc	r26, r1
    7f0e:	20 d0       	rcall	.+64     	; 0x7f50 <__ultoa_invert+0x84>
    7f10:	09 f4       	brne	.+2      	; 0x7f14 <__ultoa_invert+0x48>
    7f12:	68 94       	set
    7f14:	3f 91       	pop	r19
    7f16:	2a e0       	ldi	r18, 0x0A	; 10
    7f18:	26 9f       	mul	r18, r22
    7f1a:	11 24       	eor	r1, r1
    7f1c:	30 19       	sub	r19, r0
    7f1e:	30 5d       	subi	r19, 0xD0	; 208
    7f20:	31 93       	st	Z+, r19
    7f22:	de f6       	brtc	.-74     	; 0x7eda <__ultoa_invert+0xe>
    7f24:	cf 01       	movw	r24, r30
    7f26:	08 95       	ret
    7f28:	46 2f       	mov	r20, r22
    7f2a:	47 70       	andi	r20, 0x07	; 7
    7f2c:	40 5d       	subi	r20, 0xD0	; 208
    7f2e:	41 93       	st	Z+, r20
    7f30:	b3 e0       	ldi	r27, 0x03	; 3
    7f32:	0f d0       	rcall	.+30     	; 0x7f52 <__ultoa_invert+0x86>
    7f34:	c9 f7       	brne	.-14     	; 0x7f28 <__ultoa_invert+0x5c>
    7f36:	f6 cf       	rjmp	.-20     	; 0x7f24 <__ultoa_invert+0x58>
    7f38:	46 2f       	mov	r20, r22
    7f3a:	4f 70       	andi	r20, 0x0F	; 15
    7f3c:	40 5d       	subi	r20, 0xD0	; 208
    7f3e:	4a 33       	cpi	r20, 0x3A	; 58
    7f40:	18 f0       	brcs	.+6      	; 0x7f48 <__ultoa_invert+0x7c>
    7f42:	49 5d       	subi	r20, 0xD9	; 217
    7f44:	31 fd       	sbrc	r19, 1
    7f46:	40 52       	subi	r20, 0x20	; 32
    7f48:	41 93       	st	Z+, r20
    7f4a:	02 d0       	rcall	.+4      	; 0x7f50 <__ultoa_invert+0x84>
    7f4c:	a9 f7       	brne	.-22     	; 0x7f38 <__ultoa_invert+0x6c>
    7f4e:	ea cf       	rjmp	.-44     	; 0x7f24 <__ultoa_invert+0x58>
    7f50:	b4 e0       	ldi	r27, 0x04	; 4
    7f52:	a6 95       	lsr	r26
    7f54:	97 95       	ror	r25
    7f56:	87 95       	ror	r24
    7f58:	77 95       	ror	r23
    7f5a:	67 95       	ror	r22
    7f5c:	ba 95       	dec	r27
    7f5e:	c9 f7       	brne	.-14     	; 0x7f52 <__ultoa_invert+0x86>
    7f60:	00 97       	sbiw	r24, 0x00	; 0
    7f62:	61 05       	cpc	r22, r1
    7f64:	71 05       	cpc	r23, r1
    7f66:	08 95       	ret
    7f68:	9b 01       	movw	r18, r22
    7f6a:	ac 01       	movw	r20, r24
    7f6c:	0a 2e       	mov	r0, r26
    7f6e:	06 94       	lsr	r0
    7f70:	57 95       	ror	r21
    7f72:	47 95       	ror	r20
    7f74:	37 95       	ror	r19
    7f76:	27 95       	ror	r18
    7f78:	ba 95       	dec	r27
    7f7a:	c9 f7       	brne	.-14     	; 0x7f6e <__ultoa_invert+0xa2>
    7f7c:	62 0f       	add	r22, r18
    7f7e:	73 1f       	adc	r23, r19
    7f80:	84 1f       	adc	r24, r20
    7f82:	95 1f       	adc	r25, r21
    7f84:	a0 1d       	adc	r26, r0
    7f86:	08 95       	ret

00007f88 <__ctype_isfalse>:
    7f88:	99 27       	eor	r25, r25
    7f8a:	88 27       	eor	r24, r24

00007f8c <__ctype_istrue>:
    7f8c:	08 95       	ret

00007f8e <__mulsi3>:
    7f8e:	db 01       	movw	r26, r22
    7f90:	8f 93       	push	r24
    7f92:	9f 93       	push	r25
    7f94:	94 dc       	rcall	.-1752   	; 0x78be <__muluhisi3>
    7f96:	bf 91       	pop	r27
    7f98:	af 91       	pop	r26
    7f9a:	a2 9f       	mul	r26, r18
    7f9c:	80 0d       	add	r24, r0
    7f9e:	91 1d       	adc	r25, r1
    7fa0:	a3 9f       	mul	r26, r19
    7fa2:	90 0d       	add	r25, r0
    7fa4:	b2 9f       	mul	r27, r18
    7fa6:	90 0d       	add	r25, r0
    7fa8:	11 24       	eor	r1, r1
    7faa:	08 95       	ret

00007fac <_exit>:
    7fac:	f8 94       	cli

00007fae <__stop_program>:
    7fae:	ff cf       	rjmp	.-2      	; 0x7fae <__stop_program>
